<Type Name="BlockUIContainer" FullName="System.Windows.Documents.BlockUIContainer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6c2d6471d5095560577c780fd6873f96c7dfe2b0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30626279" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BlockUIContainer : System.Windows.Documents.Block" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BlockUIContainer extends System.Windows.Documents.Block" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.BlockUIContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class BlockUIContainer&#xA;Inherits Block" />
  <TypeSignature Language="C++ CLI" Value="public ref class BlockUIContainer : System::Windows::Documents::Block" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.Block</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Child")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Un elemento de nivel de bloque que habilita los elementos <see cref="T:System.Windows.UIElement" /> (es decir, un <see cref="T:System.Windows.Controls.Button" />) que se van a incrustar (hospedar) en el contenido dinámico.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.UIElement> elemento (es decir, un <xref:System.Windows.Controls.Button>) se puede incrustar directamente en el contenido del flujo incluyendo en un <xref:System.Windows.Documents.BlockUIContainer> (vea el ejemplo siguiente).  
  
 Un <xref:System.Windows.Documents.BlockUIContainer> directamente hospedar no más de un <xref:System.Windows.UIElement> secundarios.  Sin embargo, el elemento secundario hospedado por un <xref:System.Windows.Documents.BlockUIContainer> puede hospedar elementos secundarios propios.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Windows.Documents.BlockUIContainer> elementos al host <xref:System.Windows.UIElement> elementos dentro del contenido dinámico.  
  
 [!code-xaml[SpanSnippets#_BlockUIXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/SpanSnippets/CSharp/Window1.xaml#_blockuixaml)]  
  
 En la ilustración siguiente, se muestra cómo se representa este ejemplo.  
  
 ![Captura de pantalla: UIElement incrustado en contenido dinámico](~/add/media/blockuicontainer.png "captura de pantalla: UIElement incrustado en contenido dinámico")  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.InlineUIContainer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Documents.BlockUIContainer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlockUIContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.BlockUIContainer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BlockUIContainer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia vacía de la clase <see cref="T:System.Windows.Documents.BlockUIContainer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BlockUIContainer (System.Windows.UIElement uiElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.UIElement uiElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.BlockUIContainer.#ctor(System.Windows.UIElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BlockUIContainer(System::Windows::UIElement ^ uiElement);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="uiElement" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="uiElement">Un objeto <see cref="T:System.Windows.UIElement" /> que especifica el contenido inicial del nuevo <see cref="T:System.Windows.Documents.BlockUIContainer" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Documents.BlockUIContainer" />, tomando un objeto <see cref="T:System.Windows.UIElement" /> especificado como el contenido inicial del nuevo <see cref="T:System.Windows.Documents.BlockUIContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra el uso de este constructor.  
  
 [!code-csharp[SpanSnippets#_BlockUI_Const1](~/samples/snippets/csharp/VS_Snippets_Wpf/SpanSnippets/CSharp/Window1.xaml.cs#_blockui_const1)]
 [!code-vb[SpanSnippets#_BlockUI_Const1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/SpanSnippets/visualbasic/window1.xaml.vb#_blockui_const1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Child">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Child { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Child" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.BlockUIContainer.Child" />
      <MemberSignature Language="VB.NET" Value="Public Property Child As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Child { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el elemento <see cref="T:System.Windows.UIElement" /> hospedado por <see cref="T:System.Windows.Documents.BlockUIContainer" />.</summary>
        <value>
          <see cref="T:System.Windows.UIElement" /> hospedado por <see cref="T:System.Windows.Documents.BlockUIContainer" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Documents.BlockUIContainer> directamente hospedar no más de un <xref:System.Windows.UIElement> secundarios.  Sin embargo, el elemento secundario hospedado por un <xref:System.Windows.Documents.BlockUIContainer> puede hospedar elementos secundarios propios.  
  
 En [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)], ajuste un <xref:System.Windows.UIElement> en un <xref:System.Windows.Documents.BlockUIContainer> es equivalente a establecer que <xref:System.Windows.UIElement> como el valor de la <xref:System.Windows.Documents.BlockUIContainer.Child%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Windows.Documents.BlockUIContainer> elementos al host <xref:System.Windows.UIElement> elementos dentro del contenido dinámico.  
  
 [!code-xaml[SpanSnippets#_BlockUIXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/SpanSnippets/CSharp/Window1.xaml#_blockuixaml)]  
  
 En la ilustración siguiente, se muestra cómo se representa este ejemplo.  
  
 ![Captura de pantalla: UIElement incrustado en contenido dinámico](~/add/media/blockuicontainer.png "captura de pantalla: UIElement incrustado en contenido dinámico")  
  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Windows.Documents.BlockUIContainer.Child%2A> propiedad mediante programación.  
  
 [!code-csharp[spansnippets#_BlockUI_Child](~/samples/snippets/csharp/VS_Snippets_Wpf/SpanSnippets/CSharp/Window1.xaml.cs#_blockui_child)]
 [!code-vb[spansnippets#_BlockUI_Child](~/samples/snippets/visualbasic/VS_Snippets_Wpf/SpanSnippets/visualbasic/window1.xaml.vb#_blockui_child)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>