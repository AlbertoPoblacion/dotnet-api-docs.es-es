<Type Name="IEnumeratorContract&lt;C&gt;" FullName="System.AddIn.Contract.Collections.IEnumeratorContract&lt;C&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="025fffc8a5d8a9b5ee8ef5c1dc4593d1d8a2cd62" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36648255" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumeratorContract&lt;C&gt; : System.AddIn.Contract.IContract where C : IContract" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumeratorContract`1&lt;(class System.AddIn.Contract.IContract) C&gt; implements class System.AddIn.Contract.IContract" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Contract.Collections.IEnumeratorContract`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumeratorContract(Of C)&#xA;Implements IContract" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename C&gt;&#xA; where C : IContractpublic interface class IEnumeratorContract : System::AddIn::Contract::IContract" />
  <TypeSignature Language="F#" Value="type IEnumeratorContract&lt;'C (requires 'C :&gt; IContract)&gt; = interface&#xA;    interface IContract" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn.Contract</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="C">
      <Constraints>
        <InterfaceName>System.AddIn.Contract.IContract</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.AddIn.Contract.IContract</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="C">Tipo de los objetos que se van a enumerar. <c>C</c> debe implementar la <see cref="T:System.AddIn.Contract.IContract" /> interfaz.</typeparam>
    <summary>Enumera los elementos de una colección genérica de objetos <see cref="T:System.AddIn.Contract.IContract" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.  
  
 En principio, el enumerador se coloca antes del primer elemento de la colección. En esta posición, el valor devuelto de <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> es indefinido. Por lo tanto, debe llamar a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> para adelantar el enumerador hasta el primer elemento de la colección antes de llamar a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>.  
  
 <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> devuelve el mismo objeto hasta que se llama a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A>. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> establece el valor devuelto de <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> hasta el siguiente elemento.  
  
 Si <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> devuelve `false`. Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> también devolver `false`. Si la última llamada a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> devuelve `false`, el valor devuelto de <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> es indefinido.  
  
 Un enumerador es válido mientras la colección no cambie. Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public C GetCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !C GetCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.GetCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrent () As C" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; C GetCurrent();" />
      <MemberSignature Language="F#" Value="abstract member GetCurrent : unit -&gt; 'C" Usage="iEnumeratorContract.GetCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>C</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el objeto <see cref="T:System.AddIn.Contract.IContract" /> de la colección situado en la posición actual del enumerador.</summary>
        <returns>
          <see cref="T:System.AddIn.Contract.IContract" /> de la colección situado en la posición actual del enumerador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> es indefinido en cualquiera de las condiciones siguientes:  
  
-   El enumerador se coloca antes del primer elemento de la colección, inmediatamente después de crear el enumerador o después de <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> se llama. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> se debe llamar para adelantar el enumerador hasta el primer elemento de la colección antes de llamar a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A>.  
  
-   La última llamada a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> devuelve `false`, lo que indica el final de la colección.  
  
-   El enumerador queda invalidado debido a los cambios realizados en la colección, como agregar, modificar o eliminar elementos.  
  
 <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> devuelve el mismo objeto hasta que se llama a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A>. <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> establece el valor devuelto de <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.GetCurrent%2A> hasta el siguiente elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool" Usage="iEnumeratorContract.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Desplaza el enumerador al siguiente elemento de la colección.</summary>
        <returns>
          <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de crea un enumerador o después de la <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> se llama al método, el enumerador se coloca antes del primer elemento de la colección. La primera llamada a la <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> método desplaza el enumerador hasta el primer elemento de la colección.  
  
 Si <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> devuelve `false`. Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> también devolver `false` hasta <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> se llama.  
  
 Un enumerador es válido mientras la colección no cambie. Si se realizan cambios en la colección, como agregar, modificar, o eliminar elementos, el enumerador queda permanentemente invalidado y la siguiente llamada a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> o <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> produce una <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.Collections.IEnumeratorContract`1.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit" Usage="iEnumeratorContract.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un enumerador es válido mientras la colección no cambie. Si se realizan cambios en la colección, como agregar, modificar, o eliminar elementos, el enumerador queda permanentemente invalidado y la siguiente llamada a <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.MoveNext%2A> o <xref:System.AddIn.Contract.Collections.IEnumeratorContract%601.Reset%2A> produce una <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La colección se modificó después de crear el enumerador.</exception>
      </Docs>
    </Member>
  </Members>
</Type>