<Type Name="IParameterInspector" FullName="System.ServiceModel.Dispatcher.IParameterInspector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf2278efb91472b6df53e28d753d2443a7141017" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58562295" /></Metadata><TypeSignature Language="C#" Value="public interface IParameterInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IParameterInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IParameterInspector" />
  <TypeSignature Language="F#" Value="type IParameterInspector = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define el contrato implementado por inspectores de parámetros personalizados que permite inspeccionar o modificar la información antes y después de la realización de llamadas en el cliente o el servicio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente la interfaz <xref:System.ServiceModel.Dispatcher.IParameterInspector> para crear a un inspector de parámetros personalizado que puede ver y modificar el contenido de una llamada, tanto antes como después de la llamada, en aplicaciones cliente o de servicio.  
  
 En las llamadas salientes de un cliente, el inspector se invoca antes de que el contenido de la solicitud se serialice y se envíe al servicio. También se llama al inspector una vez que se ha deserializado la respuesta, pero antes de que los valores devueltos se hayan enviado al método de proxy.  
  
 En las llamadas entrantes a un servicio, el inspector se invoca una vez que se han deserializado los parámetros, pero antes de que se envíen a la operación del servicio.  
  
 Use las propiedades <xref:System.ServiceModel.Dispatcher.ClientOperation.ParameterInspectors%2A?displayProperty=nameWithType> o <xref:System.ServiceModel.Dispatcher.DispatchOperation.ParameterInspectors%2A?displayProperty=nameWithType> para agregar una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector> a la colección de inspectores para una operación determinada.  
  
 **Tenga en cuenta** a los desarrolladores y administradores deben asegurarse de que la interacción con otras <xref:System.ServiceModel.Dispatcher.IParameterInspector> se entiende las implementaciones.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector> que:  
  
-   Escribe el nombre de la operación y el valor devuelto en la consola una vez que el servicio ha deserializado una respuesta o un cliente ha serializado una solicitud.  
  
-   Escribe el nombre de la operación en la consola después de deserializar una respuesta en el cliente o de serializar una respuesta en el servicio.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> para insertar objetos <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterCall">
      <MemberSignature Language="C#" Value="public void AfterCall (string operationName, object[] outputs, object returnValue, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterCall(string operationName, object[] outputs, object returnValue, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AfterCall (operationName As String, outputs As Object(), returnValue As Object, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AfterCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ outputs, System::Object ^ returnValue, System::Object ^ correlationState);" />
      <MemberSignature Language="F#" Value="abstract member AfterCall : string * obj[] * obj * obj -&gt; unit" Usage="iParameterInspector.AfterCall (operationName, outputs, returnValue, correlationState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="outputs" Type="System.Object[]" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="operationName">Nombre de la operación invocada.</param>
        <param name="outputs">Cualquier objeto de salida.</param>
        <param name="returnValue">El valor devuelto de la operación.</param>
        <param name="correlationState">Cualquier estado de correlación devuelto desde el método <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />, o <see langword="null" />.</param>
        <summary>Se llama a este método una vez que se devuelven las llamadas del cliente y antes de que se envíen las respuestas del servicio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En las llamadas salientes de un cliente, el inspector se invoca antes de que el contenido de la solicitud se serialice y se envíe al servicio. También se llama al inspector una vez que se ha deserializado la respuesta, pero antes de que los valores devueltos se hayan enviado al método de proxy.  
  
 En las llamadas entrantes a un servicio, el inspector se invoca una vez que se han deserializado los parámetros, pero antes de que se envíen a la operación del servicio.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector> que:  
  
-   Escribe el nombre de la operación y el valor devuelto en la consola una vez que el servicio ha deserializado una respuesta o un cliente ha serializado una solicitud.  
  
-   Escribe el nombre de la operación en la consola después de deserializar una respuesta en el cliente o de serializar una respuesta en el servicio.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> para insertar objetos <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeCall">
      <MemberSignature Language="C#" Value="public object BeforeCall (string operationName, object[] inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeCall(string operationName, object[] inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IParameterInspector.BeforeCall(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeforeCall (operationName As String, inputs As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ BeforeCall(System::String ^ operationName, cli::array &lt;System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="abstract member BeforeCall : string * obj[] -&gt; obj" Usage="iParameterInspector.BeforeCall (operationName, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationName" Type="System.String" />
        <Parameter Name="inputs" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="operationName">Nombre de la operación.</param>
        <param name="inputs">Objetos que el cliente pasa al método.</param>
        <summary>Se llama a este método antes de enviar las llamadas del cliente y antes de que se devuelvan las respuestas del servicio.</summary>
        <returns>Estado de correlación devuelto como parámetro <paramref name="correlationState" /> en <see cref="M:System.ServiceModel.Dispatcher.IParameterInspector.AfterCall(System.String,System.Object[],System.Object,System.Object)" />. Devuelve <see langword="null" /> si no se piensa utilizar el estado de correlación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En las llamadas salientes de un cliente, el inspector se invoca antes de que el contenido de la solicitud se serialice y se envíe al servicio. También se llama al inspector una vez que se ha deserializado la respuesta, pero antes de que los valores devueltos se hayan enviado al método de proxy.  
  
 En las llamadas entrantes a un servicio, el inspector se invoca una vez que se ha deserializado el contenido de la solicitud y se ha enviado a la operación de servicio, y antes de que el contenido de la respuesta se ha serializado y enviado al cliente.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector> que:  
  
-   Escribe el nombre de la operación y el valor devuelto en la consola una vez que el servicio ha deserializado una respuesta o un cliente ha serializado una solicitud.  
  
-   Escribe el nombre de la operación en la consola después de deserializar una respuesta en el cliente o de serializar una respuesta en el servicio.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> para insertar objetos <xref:System.ServiceModel.Dispatcher.IParameterInspector>.  
  
 [!code-csharp[Interceptors#5](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#5)]
 [!code-vb[Interceptors#5](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>