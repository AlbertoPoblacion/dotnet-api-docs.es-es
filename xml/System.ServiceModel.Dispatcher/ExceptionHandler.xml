<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71aac6188e9d86d42129e5847fd1f20037bf1552" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36415614" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandler abstract" />
  <TypeSignature Language="F#" Value="type ExceptionHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Extienda la clase <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> para crear un controlador de excepciones para las excepciones no controladas que tengan lugar dentro del tiempo de ejecución de Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Extienda la clase <xref:System.ServiceModel.Dispatcher.ExceptionHandler> e invalide el método <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> para determinar si una excepción debe finalizar la aplicación. A continuación, cree una nueva instancia de su personalizado <xref:System.ServiceModel.Dispatcher.ExceptionHandler> clase y asígnela a estático <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> o <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> propiedad antes de crear servicios o clientes de WCF.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una implementación de la clase abstracta <xref:System.ServiceModel.Dispatcher.ExceptionHandler> que invalida el método <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>.  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 En el ejemplo de código siguiente se muestra cómo habilitar la opción de instalación `MyExceptionHandler` para las excepciones no controladas que se producen en tiempo de ejecución WCF.  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExceptionHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlwaysHandle As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AlwaysHandle { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlwaysHandle : System.ServiceModel.Dispatcher.ExceptionHandler" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una instancia de <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> que controla todas las excepciones.</summary>
        <value>Objeto <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> que devuelve <see langword="true" /> para todas las excepciones.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AsynchronousThreadExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ AsynchronousThreadExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsynchronousThreadExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la implementación de <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> actual para el dominio de la aplicación.</summary>
        <value>Asignar un personalizado <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> no controlada por el objeto que recibe las excepciones que se producen en subprocesos asincrónicos de Windows Communication Foundation (WCF).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> propiedad es `null`, y las excepciones no controladas en subprocesos asincrónicos de WCF finalizan la aplicación.  Establezca esta propiedad en un objeto <xref:System.ServiceModel.Dispatcher.ExceptionHandler> para recibir estas excepciones y actuar antes ellas.  
  
 Si una excepción no controlada se produce en un subproceso asincrónico de WCF y llega a este controlador, el estado del dominio de aplicación puede verse comprometido.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> no debe devolver `true` para estas excepciones.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool HandleException(Exception ^ exception);" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; bool" Usage="exceptionHandler.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Excepción que se ha producido en el runtime de Windows Communication Foundation (WCF) y que puede finalizar la aplicación.</param>
        <summary>Si se invalida en una clase derivada, devuelve <see langword="true" /> si se ha controlado la excepción, o <see langword="false" /> si la excepción se debe volver a iniciar y la aplicación se debe finalizar.</summary>
        <returns>Es <see langword="true" /> si se ha controlado la excepción; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La propiedad <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> devuelve `true` si se ha controlado la excepción. Si devuelve `false` o inicia otra excepción, la excepción original se vuelve a iniciar.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una implementación de la clase abstracta <xref:System.ServiceModel.Dispatcher.ExceptionHandler> que invalida el método <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>.  
  
  
  
 En el ejemplo de código siguiente se muestra cómo habilitar la opción de instalación `MyExceptionHandler` para las excepciones no controladas que se producen en tiempo de ejecución WCF.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TransportExceptionHandler As ExceptionHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::ServiceModel::Dispatcher::ExceptionHandler ^ TransportExceptionHandler { System::ServiceModel::Dispatcher::ExceptionHandler ^ get(); void set(System::ServiceModel::Dispatcher::ExceptionHandler ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransportExceptionHandler : System.ServiceModel.Dispatcher.ExceptionHandler with get, set" Usage="System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la implementación de transporte de <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> para el dominio de la aplicación.</summary>
        <value>Un personalizado <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> no controlada por el objeto que recibe las excepciones que se producen dentro de los transportes de Windows Communication Foundation (WCF) global.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> propiedad está establecida en el valor de <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, haciendo que las excepciones no controladas en transportes WCF que se pasen por alto.  Establezca esta propiedad en una instancia de <xref:System.ServiceModel.Dispatcher.ExceptionHandler> para recibir estas excepciones y actuar ante ellas.  
  
 Si una excepción no controlada se produce dentro de un transporte WCF global y llega a este controlador, es posible que el estado del dominio de aplicación se vean comprometido. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> puede devolver `false` para estas excepciones hacer que la aplicación haya finalizado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>