<Type Name="IErrorHandler" FullName="System.ServiceModel.Dispatcher.IErrorHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd1e11ac3f35c5961b906dfd950a1e5dfbd747bd" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39728805" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IErrorHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IErrorHandler" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IErrorHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IErrorHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IErrorHandler" />
  <TypeSignature Language="F#" Value="type IErrorHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Permite a un implementador controlar el mensaje del error devuelto al autor de la llamada y, opcionalmente, realizar un procesamiento de errores personalizado, por ejemplo registrándolos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para controlar explícitamente el comportamiento de la aplicación cuando se produce una excepción, implemente el <xref:System.ServiceModel.Dispatcher.IErrorHandler> interfaz y agréguelo a la <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>del <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> propiedad. <xref:System.ServiceModel.Dispatcher.IErrorHandler> le permite controlar explícitamente el error de SOAP generado, decidir si devolverlo al cliente y realizar tareas asociadas, como la creación de registros. Se llama a los controladores de errores en el orden en que se agregaron a la propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 Implemente el método <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> para controlar el mensaje del error que se devuelve al cliente.  
  
 Implemente el método <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> para garantizar que se realizan los comportamientos relacionados con errores, como el registro de errores, , asegurar que se producen errores rápidos, el cierre de la aplicación, etc.  
  
> [!NOTE]
>  Dado que se puede llamar al método <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> desde muchos lugares diferentes no hay ninguna garantía acerca de en qué subproceso se llama al método. No dependa del método <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> que se llama en el subproceso de la operación.  
  
 Primero se llama a todas las implementaciones de <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>, antes de enviar un mensaje de respuesta. Cuando se ha llamado a todas las implementaciones de <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> y vuelven, y si `fault` es no `null`, se devuelve al cliente según el contrato de la operación. Si `fault` es `null` una vez que se ha llamado a todas las implementaciones, el valor de la propiedad <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> controla el mensaje de respuesta.  
  
> [!NOTE]
>  Se pueden producir excepciones una vez que se ha llamado a todas las implementaciones de <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> y se entrega al canal un mensaje de respuesta. Si se produce una excepción de canal (por ejemplo, problemas al deserializar el mensaje) <xref:System.ServiceModel.Dispatcher.IErrorHandler> se notifica a los objetos. En este caso, debe todavía Asegúrese de que el entorno de desarrollo detecta y muestra dichas excepciones, o utiliza el seguimiento para detectar el problema. Para obtener más información acerca del seguimiento, vea [utilizando seguimiento de la solución de problemas de la aplicación](~/docs/framework/wcf/diagnostics/tracing/using-tracing-to-troubleshoot-your-application.md).  
  
 Una vez enviado el mensaje de respuesta, se llama a todas las implementaciones de <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> en el mismo orden.  
  
 Normalmente, se agrega una implementación de <xref:System.ServiceModel.Dispatcher.IErrorHandler> a la propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> del servicio (y del cliente si la comunicación es dúplex).  
  
 Puede agregar la propiedad <xref:System.ServiceModel.Dispatcher.IErrorHandler> al tiempo de ejecución implementando un comportamiento (un objeto <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> o <xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=nameWithType> ) y utilizar el comportamiento mediante programación, de un archivo de configuración o con un atributo personalizado, para asociar <xref:System.ServiceModel.Dispatcher.IErrorHandler>.  
  
 Para obtener más información sobre el uso de comportamientos para modificar el tiempo de ejecución, consulte [configurar y extender el tiempo de ejecución con comportamientos](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un servicio que implementa <xref:System.ServiceModel.Dispatcher.IErrorHandler> que sólo devuelve <xref:System.ServiceModel.FaultException%601> de tipo `GreetingFault` cuando un método de servicio genera una excepción administrada.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar un comportamiento de servicio para agregar la implementación de <xref:System.ServiceModel.Dispatcher.IErrorHandler> a la propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 En el ejemplo de código siguiente se muestra cómo configurar el servicio para cargar el comportamiento de servicio mediante un archivo de configuración de aplicación. Para obtener más detalles sobre cómo exponer un comportamiento de servicio en un archivo de configuración, vea <xref:System.ServiceModel.Description.IServiceBehavior>.  

 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleError">
      <MemberSignature Language="C#" Value="public bool HandleError (Exception error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception error) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Function HandleError (error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ error);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public bool HandleError (Exception exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleError(class System.Exception exception) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HandleError(Exception ^ exception);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member HandleError : Exception -&gt; bool" Usage="iErrorHandler.HandleError exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="error">Excepción iniciada durante el procesamiento.</param>
        <param name="exception">Excepción iniciada durante el procesamiento.</param>
        <summary>Habilita el procesamiento relacionado con errores y devuelve un valor que indica si el distribuidor anula la sesión y el contexto de la instancia en ciertos casos.</summary>
        <returns>
          <see langword="true" /> si Windows Communication Foundation (WCF) no debe anular la sesión (si la hay) y contexto de la instancia si este no es <see cref="F:System.ServiceModel.InstanceContextMode.Single" />; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice el método <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> para implementar comportamientos relacionados con errores como registros de errores, notificaciones del sistema, cierre de la aplicación, etc., y devuelva un valor que especifique si se ha administrado adecuadamente la excepción.  
  
> [!NOTE]
>  Dado que se puede llamar al método <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> desde muchos lugares diferentes no hay ninguna garantía acerca de en qué subproceso se llama al método. No dependa del método <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> que se llama en el subproceso de la operación.  
  
 Se llama a todas las implementaciones <xref:System.ServiceModel.Dispatcher.IErrorHandler>. De forma predeterminada (cuando el valor devuelto es `false`), si hay una excepción, el distribuidor anula todas las sesiones y anula <xref:System.ServiceModel.InstanceContext> si <xref:System.ServiceModel.InstanceContextMode> es difiere de <xref:System.ServiceModel.InstanceContextMode.Single>.  En ese caso la excepción se considera no controlada y cualquier estado se considera dañado.  
  
 Devuelva `true` de <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> para evitar este comportamiento predeterminado. Si cualquier controlador de errores devuelve `true` indica a WCF que es seguro continuar usando el estado asociado con la solicitud con error.  
  
 Si ningún controlador de errores devuelve `true` del método <xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>, la excepción se considera no controlada y se aplica la respuesta predeterminada, lo que puede producir potencialmente un canal y un <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> anulados al comunicar en un canal de la sesión, o que la propiedad <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> no se establezca como <xref:System.ServiceModel.InstanceContextMode.Single?displayProperty=nameWithType>.  
  
 El parámetro `error` no es nunca `null` y contiene el objeto de excepción que se inició.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un servicio que implementa <xref:System.ServiceModel.Dispatcher.IErrorHandler> que sólo devuelve <xref:System.ServiceModel.FaultException%601> de tipo `GreetingFault` cuando un método de servicio genera una excepción administrada.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar un comportamiento de servicio para agregar la implementación de <xref:System.ServiceModel.Dispatcher.IErrorHandler> a la propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 En el ejemplo de código siguiente se muestra cómo configurar el servicio para cargar el comportamiento de servicio mediante un archivo de configuración de aplicación. Para obtener más detalles sobre cómo exponer un comportamiento de servicio en un archivo de configuración, vea <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvideFault">
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception error, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProvideFault (error As Exception, version As MessageVersion, ByRef fault As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ error, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public void ProvideFault (Exception exception, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvideFault(class System.Exception exception, class System.ServiceModel.Channels.MessageVersion version, class System.ServiceModel.Channels.Message&amp; fault) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProvideFault(Exception ^ exception, System::ServiceModel::Channels::MessageVersion ^ version, System::ServiceModel::Channels::Message ^ % fault);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member ProvideFault : Exception * System.ServiceModel.Channels.MessageVersion *  -&gt; unit" Usage="iErrorHandler.ProvideFault (exception, version, fault)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="System.Exception" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.0;netframework-3.5;netframework-4.0" />
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="version" Type="System.ServiceModel.Channels.MessageVersion" Index="1" />
        <Parameter Name="fault" Type="System.ServiceModel.Channels.Message" RefType="ref" Index="2" />
      </Parameters>
      <Docs>
        <param name="error">Objeto <see cref="T:System.Exception" /> iniciado en el curso de la operación del servicio.</param>
        <param name="exception">Objeto <see cref="T:System.Exception" /> iniciado en el curso de la operación del servicio.</param>
        <param name="version">Versión de SOAP del mensaje.</param>
        <param name="fault">Objeto <see cref="T:System.ServiceModel.Channels.Message" /> que se devuelve al cliente, o servicio, en el caso de comunicación dúplex.</param>
        <summary>Permite la creación de un <see cref="T:System.ServiceModel.FaultException`1" /> personalizado que se devuelve de una excepción en el curso de un método de servicio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> para crear un mensaje de error personalizado que se devuelve al cliente.  El <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> siempre se llamará el método para las excepciones que dejan las operaciones, excepto cuando el tiempo de ejecución WCF reconoce la excepción como especialmente grave y se vuelve a producir la excepción propia. Cuando se ha llamado a todas las implementaciones de <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>, el mensaje de error se devuelve al cliente (si `fault` es no `null`). Si el `fault` parámetro es `null` el error predeterminado se envía al cliente.  
  
> [!NOTE]
>  El mensaje entrante que produjo el error de procesamiento está disponible mientras dura este método desde la propiedad <xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Dado que se puede llamar al método <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> desde muchos lugares diferentes no hay ninguna garantía acerca de en qué subproceso se llama al método. No dependa del método <xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> que se llama en el subproceso de la operación.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un servicio que implementa <xref:System.ServiceModel.Dispatcher.IErrorHandler> que sólo devuelve <xref:System.ServiceModel.FaultException%601> de tipo `GreetingFault` cuando un método de servicio genera una excepción administrada.  
  
 [!code-csharp[IErrorHandler#6](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#6)]
 [!code-vb[IErrorHandler#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#6)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar un comportamiento de servicio para agregar la implementación de <xref:System.ServiceModel.Dispatcher.IErrorHandler> a la propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 En el ejemplo de código siguiente se muestra cómo configurar el servicio para cargar el comportamiento de servicio mediante un archivo de configuración de aplicación. Para obtener más detalles sobre cómo exponer un comportamiento de servicio en un archivo de configuración, vea <xref:System.ServiceModel.Description.IServiceBehavior>.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>