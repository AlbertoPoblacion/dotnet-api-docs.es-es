<Type Name="IInstanceProvider" FullName="System.ServiceModel.Dispatcher.IInstanceProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d99445906f7000f567c08da21e17ff96cb11451f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37615922" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceProvider" />
  <TypeSignature Language="F#" Value="type IInstanceProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Declara métodos que proporcionan un objeto de servicio o reciclan un objeto de servicio de un servicio Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente la interfaz <xref:System.ServiceModel.Dispatcher.IInstanceProvider> para controlar la creación y el reciclaje de los objetos de servicio cuando un objeto <xref:System.ServiceModel.InstanceContext> solicita o elimina uno.  
  
 Una vez implementada la interfaz <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, debe asignar su objeto de proveedor de instancias personalizado a la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A> utilizando un comportamiento del extremo (un objeto <xref:System.ServiceModel.Description.IEndpointBehavior>) o un comportamiento del contrato (un objeto <xref:System.ServiceModel.Description.IContractBehavior> ).  
  
 Si el mecanismo de inserción es un comportamiento del extremo también puede implementar un objeto <xref:System.ServiceModel.Configuration.BehaviorExtensionElement> que pueda insertar su comportamiento personalizado mediante un archivo de configuración. Si el mecanismo de inserción es un comportamiento del contrato, puede insertar mediante programación el comportamiento antes de la apertura del host del servicio o puede implementar un atributo personalizado. (Para obtener un ejemplo de comportamiento de contrato, consulte la sección Ejemplo.)  
  
 <xref:System.ServiceModel.Dispatcher.IInstanceProvider> tiene dos métodos: <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> y <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>. Estos métodos se implementan normalmente para crear objetos de servicio mediante un constructor no predeterminado o para inicializar o eliminar algún estado relacionado con la duración del objeto. La agrupación de objetos de servicio es un ejemplo de funcionalidad <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personalizada.  
  
 Normalmente, <xref:System.ServiceModel.InstanceContext> invoca <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> cuando <xref:System.ServiceModel.InstanceContext> se crea por primera vez e invoca el método <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> cuando se cierra <xref:System.ServiceModel.InstanceContext>.  
  
 Hay dos maneras de hacer que un objeto <xref:System.ServiceModel.InstanceContext> libere un objeto de servicio antes de que se cierre <xref:System.ServiceModel.InstanceContext>. El primer método es establecer <xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> en <xref:System.ServiceModel.ReleaseInstanceMode.AfterCall> o <xref:System.ServiceModel.ReleaseInstanceMode.BeforeAndAfterCall>. El segundo método es llamar al método <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>. Si se hace esto, <xref:System.ServiceModel.InstanceContext> llama al método <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> en el proveedor de instancias del distribuidor. Si llega un mensaje nuevo una vez liberada la instancia, WCF crea una nueva instancia utilizando el <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> método.  
  
> [!NOTE]
>  Si <xref:System.ServiceModel.InstanceContextMode> del servicio es <xref:System.ServiceModel.InstanceContextMode.Single>, el sistema no llama a los métodos <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> o <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> ni siquiera cuando el usuario no proporcionó un objeto de servicio conocido a menos que el usuario llame directamente a <xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> y a continuación a <xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, que proporciona un comportamiento "singleton"; siempre devuelve la misma instancia del servicio y no la recicla.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 El ejemplo de código siguiente muestra cómo implementar un atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado. También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su uso a un contrato específico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un objeto de servicio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext -&gt; obj" Usage="iInstanceProvider.GetInstance instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Objeto <see cref="T:System.ServiceModel.InstanceContext" /> actual.</param>
        <summary>Devuelve un objeto de servicio dado el objeto <see cref="T:System.ServiceModel.InstanceContext" /> especificado.</summary>
        <returns>Un objeto de servicio definido por el usuario.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%29> método para controlar el objeto de servicio exacto que un servicio WCF recibe cuando intenta crear uno nuevo.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, que proporciona un comportamiento "singleton"; siempre devuelve la misma instancia del servicio y no la recicla.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 El ejemplo de código siguiente muestra cómo implementar un atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado. También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su uso a un contrato específico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetInstance(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetInstance : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message -&gt; obj" Usage="iInstanceProvider.GetInstance (instanceContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Objeto <see cref="T:System.ServiceModel.InstanceContext" /> actual.</param>
        <param name="message">El mensaje que activó la creación de un objeto de servicio.</param>
        <summary>Devuelve un objeto de servicio dado el objeto <see cref="T:System.ServiceModel.InstanceContext" /> especificado.</summary>
        <returns>El objeto de servicio.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%28System.ServiceModel.InstanceContext%2CSystem.ServiceModel.Channels.Message%29> método para controlar el objeto de servicio exacto que un servicio WCF recibe cuando intenta crear uno nuevo.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra como implementar <xref:System.ServiceModel.Dispatcher.IInstanceProvider>, que proporciona un comportamiento "singleton"; siempre devuelve la misma instancia del servicio y no la recicla.  
  
 [!code-csharp[IContractBehavior#1](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#1)]
 [!code-vb[IContractBehavior#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#1)]  
  
 El ejemplo de código siguiente muestra cómo implementar un atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado. También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su uso a un contrato específico.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseInstance">
      <MemberSignature Language="C#" Value="public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseInstance(class System.ServiceModel.InstanceContext instanceContext, object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseInstance(System::ServiceModel::InstanceContext ^ instanceContext, System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseInstance : System.ServiceModel.InstanceContext * obj -&gt; unit" Usage="iInstanceProvider.ReleaseInstance (instanceContext, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceContext">El contexto de la instancia del servicio.</param>
        <param name="instance">Objeto de servicio que se va a reciclar.</param>
        <summary>Llamado cuando un objeto <see cref="T:System.ServiceModel.InstanceContext" /> recicla un objeto de servicio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice el método <xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> para realizar una eliminación de recurso personalizada u otra personalización del reciclaje cuando un servicio recicla un objeto de servicio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>