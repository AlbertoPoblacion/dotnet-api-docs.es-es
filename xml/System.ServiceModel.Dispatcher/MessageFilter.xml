<Type Name="MessageFilter" FullName="System.ServiceModel.Dispatcher.MessageFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="89562be342087ef3e8abf6bf27ffdb95d6201cc6" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48761824" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageFilter abstract" />
  <TypeSignature Language="F#" Value="type MessageFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.DataContract</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchNoneMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.ActionMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.MatchAllMessageFilter))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.ServiceModel.Dispatcher.XPathMessageFilter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Clase base <see langword="abstract" /> para distintas clases de filtros utilizadas para realizar consultas en mensajes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.MessageFilter> es una clase `abstract` que los desarrolladores implementan para especificar los criterios que se van a usar para inspeccionar los mensajes. Normalmente, una aplicación de extremo utiliza filtros para determinar qué hacer con un mensaje en función de un examen de alguna parte del mensaje. Un proceso de cola, por ejemplo, puede utilizar una consulta de XPath 1.0 para comprobar el elemento de prioridad de un encabezado conocido para determinar si poner un mensaje al principio de la cola.  
  
 Los filtros se almacenan en una tabla de filtros que implementa <xref:System.ServiceModel.Dispatcher.IMessageFilterTable%601>. Cada filtro de la tabla está asociado a datos de filtro especificados que se pueden utilizar para indicar qué acciones se deben tomar si un mensaje coincide con el filtro. Los métodos de <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> se utilizan para determinar si un mensaje satisface un filtro.  
  
 Los criterios utilizados por un filtro no se pueden cambiar una vez que se ha construido el filtro, porque las tablas de filtros no cuentan con una forma de detectar cambios. La única manera de modificar los criterios de un filtro es la de construir otro y eliminar el filtro existente.  
  
 Las clases siguientes implementan la clase `abstract`<xref:System.ServiceModel.Dispatcher.MessageFilter>:  
  
-   <xref:System.ServiceModel.Dispatcher.XPathMessageFilter> utiliza una expresión XPath 1.0 para especificar los criterios de una coincidencia.  
  
-   <xref:System.ServiceModel.Dispatcher.MatchAllMessageFilter> hace que coincidan todos los mensajes.  
  
-   <xref:System.ServiceModel.Dispatcher.MatchNoneMessageFilter> hace que no coincida ninguno de los mensajes.  
  
-   <xref:System.ServiceModel.Dispatcher.ActionMessageFilter> prueba si la acción de un mensaje forma parte de un conjunto especificado de acciones.  
  
-   <xref:System.ServiceModel.Dispatcher.EndpointAddressMessageFilter> prueba si un mensaje satisface una dirección de extremo especificada.  
  
 <xref:System.ServiceModel.Channels.ChannelListenerBase%601> es una clase base `abstract` que se puede utilizar para escribir agentes de escucha que no se ponen en cola.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Cuando se llama en una clase derivada, inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.Dispatcher.MessageFilter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se protege el constructor de forma que sólo se puedan crear instancias de los filtros derivados de <xref:System.ServiceModel.Dispatcher.MessageFilter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFilterTable&lt;FilterData&gt;">
      <MemberSignature Language="C#" Value="protected internal virtual System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt; CreateFilterTable&lt;FilterData&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.ServiceModel.Dispatcher.IMessageFilterTable`1&lt;!!FilterData&gt; CreateFilterTable&lt;FilterData&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.CreateFilterTable``1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function CreateFilterTable(Of FilterData) () As IMessageFilterTable(Of FilterData)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename FilterData&gt;&#xA; virtual System::ServiceModel::Dispatcher::IMessageFilterTable&lt;FilterData&gt; ^ CreateFilterTable();" />
      <MemberSignature Language="F#" Value="abstract member CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;&#xA;override this.CreateFilterTable : unit -&gt; System.ServiceModel.Dispatcher.IMessageFilterTable&lt;'FilterData&gt;" Usage="messageFilter.CreateFilterTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.IMessageFilterTable&lt;FilterData&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="FilterData" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="FilterData">Datos asociados a los filtros de la tabla.</typeparam>
        <summary>Crea una tabla de filtros para un filtro que tiene un tipo de datos especificado asociado.</summary>
        <returns>Objeto <see cref="T:System.ServiceModel.Dispatcher.IMessageFilterTable`1" /> al que se pueden agregar filtros asociados a <paramref name="FilterData" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está pensado para que lo llame <xref:System.ServiceModel.Dispatcher.MessageFilterTable%601>. Los usuarios deben crear una tabla de filtros llamando a un constructor para la tabla de filtros. La implementación predeterminada de este método devuelve una tabla de filtros que llama al método <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> de cada filtro de forma secuencial. Invalide este método para asociar una tabla de filtros personalizada al implementar un filtro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Match">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Si se invalida en una clase derivada, prueba si un mensaje o un mensaje almacenado en búfer satisface los criterios de un filtro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La diferencia entre las dos sobrecargas es que una toma un parámetro <xref:System.ServiceModel.Channels.Message> y no puede examinar el cuerpo del mensaje. La otra toma un parámetro <xref:System.ServiceModel.Channels.MessageBuffer> y puede examinar cualquier parte del mensaje. Los encabezados de mensaje se almacenan en búfer automáticamente y un filtro puede inspeccionarlos sin utilizarse. Pero si un filtro debe inspeccionar el cuerpo del mensaje, el mensaje completo debe estar almacenado en búfer porque el cuerpo de mensaje sin almacenar en búfer puede ser utilizado por una consulta, y su contenido se destruye.  
  
 Use <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> si no es necesario que se examine el cuerpo del mensaje. Use <xref:System.ServiceModel.Dispatcher.MessageFilter.Match%2A> si es necesario que examinar el cuerpo del mensaje.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Los mensajes 
            <see langword="Null" /> no son válidos y deben hacer que se inicie una <see cref="T:System.ArgumentNullException" />.</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.Message -&gt; bool" Usage="messageFilter.Match message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <param name="message">Objeto <see cref="T:System.ServiceModel.Channels.Message" /> que se va a probar.</param>
        <summary>Si se invalida en una clase derivada, prueba si un mensaje satisface los criterios del filtro. No se puede examinar el cuerpo del mensaje.</summary>
        <returns><see langword="true" /> si el objeto <see cref="T:System.ServiceModel.Channels.Message" /> satisface los criterios del filtro; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no puede inspeccionar el contenido del cuerpo del mensaje.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Si un filtro intenta examinar el cuerpo de un mensaje no almacenado en búfer, dicho filtro debe iniciar <see cref="T:System.ServiceModel.Dispatcher.InvalidBodyAccessException" />. No debe devolver <see langword="false" />.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public abstract bool Match (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageFilter.Match(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Match (buffer As MessageBuffer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Match(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Match : System.ServiceModel.Channels.MessageBuffer -&gt; bool" Usage="messageFilter.Match buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <param name="buffer">Objeto <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> que se va a probar.</param>
        <summary>Si se invalida en una clase derivada, prueba si un mensaje almacenado en búfer satisface los criterios de un filtro.</summary>
        <returns><see langword="true" /> si el objeto <see cref="T:System.ServiceModel.Channels.MessageBuffer" /> satisface los criterios del filtro; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El mensaje debe estar totalmente almacenado en búfer si el filtro va a inspeccionar el cuerpo. El cuerpo del <xref:System.ServiceModel.Channels.MessageBuffer> está totalmente almacenado en búfer y, por consiguiente, puede ser inspeccionado por un filtro. El cuerpo de un <xref:System.ServiceModel.Channels.Message> no se ha almacenado totalmente en búfer y la inspección realizada por el filtro podría consumirlo. El elemento de encabezado de un <xref:System.ServiceModel.Channels.Message> se almacena en búfer automáticamente y, por consiguiente, se puede inspeccionar sin ser consumido.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>