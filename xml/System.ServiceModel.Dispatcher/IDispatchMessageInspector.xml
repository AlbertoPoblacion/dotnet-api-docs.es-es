<Type Name="IDispatchMessageInspector" FullName="System.ServiceModel.Dispatcher.IDispatchMessageInspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b993105bcecb3322ed5684bf4865f5440f8cc008" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30518419" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDispatchMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDispatchMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IDispatchMessageInspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDispatchMessageInspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDispatchMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define los métodos que permiten la inspección o modificación personalizadas de mensajes de la aplicación entrantes y salientes en aplicaciones de servicio.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> para inspeccionar o modificar los mensajes de la aplicación entrantes o salientes antes de enviar un mensaje de solicitud a una operación, o antes de devolver un mensaje de respuesta al autor de una llamada. Hay un gran número de situaciones que requieren que se intercepten los mensajes antes de invocar la operación a la que están destinados. Por ejemplo, puede registrar los mensajes de aplicación entrantes o usar una característica que se base en el encabezado de un mensaje.  
  
 Normalmente, los inspectores de mensajes son insertados por un comportamiento de servicio (<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>), un comportamiento de extremo (<xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType>), o un comportamiento de contrato (<xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType>). A continuación, el comportamiento agrega el inspector de mensajes a la colección <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>. Para obtener más información acerca de cómo ampliar el tiempo de ejecución utilizando los comportamientos, consulte [ServiceHost extender y el nivel de modelo de servicio](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
-   El método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> habilita el comportamiento personalizado después de recibir el mensaje, pero antes de enviarlo a la operación a la que va dirigido.  
  
-   El método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> habilita el comportamiento personalizado después de la devolución de la operación, pero antes de que se envíe la respuesta.  
  
> [!NOTE]
>  Se llama a los objetos <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> siempre en el mismo punto durante el envío del mensaje, sin tener en cuenta si una operación es unidireccional o del tipo solicitud-respuesta.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un objeto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> básico que escribe una cadena en la consola cuando se invoca.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 En el ejemplo de código siguiente se muestra una implementación de <xref:System.ServiceModel.Description.IServiceBehavior> que agrega el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> a la colección <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 En el ejemplo de código siguiente se muestra el uso de un archivo de configuración de aplicación para cargar el comportamiento de servicio que inserta el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveRequest">
      <MemberSignature Language="C#" Value="public object AfterReceiveRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AfterReceiveRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AfterReceiveRequest(System::ServiceModel::Channels::Message ^ % request, System::ServiceModel::IClientChannel ^ channel, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="request">Mensaje de solicitud.</param>
        <param name="channel">Canal de entrada.</param>
        <param name="instanceContext">Instancia de servicio actual.</param>
        <summary>Se le llama una vez que se ha recibido un mensaje entrante, pero antes de que el mensaje se envíe a la operación a la que va dirigido.</summary>
        <returns>Objeto utilizado para poner en correlación el estado. Este objeto se devuelve en el método <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> para inspeccionar o modificar el mensaje entrante, el canal de cliente que lo proporcionó, y la instancia de servicio actual. El valor devuelto puede ser cualquier objeto que desee usar para la correlación. Se le devuelve como parámetro `correlationState` en el método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A>.  
  
> [!IMPORTANT]
>  No puede usar el cuerpo del mensaje a menos que almacene en búfer el mensaje completo y realice una copia. Si hace esto, debe realizar dos copias del mensaje: una para realizar la inspección y otra para invalidar el parámetro `request`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un objeto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> básico que escribe una cadena en la consola cuando se invoca.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 En el ejemplo de código siguiente se muestra una implementación de <xref:System.ServiceModel.Description.IServiceBehavior> que agrega el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> a la colección <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 En el ejemplo de código siguiente se muestra el uso de un archivo de configuración de aplicación para cargar el comportamiento de servicio que inserta el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendReply">
      <MemberSignature Language="C#" Value="public void BeforeSendReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeforeSendReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeforeSendReply (ByRef reply As Message, correlationState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeforeSendReply(System::ServiceModel::Channels::Message ^ % reply, System::Object ^ correlationState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Mensaje de respuesta. Este valor es nulo si la operación es unidireccional.</param>
        <param name="correlationState">El objeto de correlación devuelto desde el método <see cref="M:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel,System.ServiceModel.InstanceContext)" />.</param>
        <summary>Se le llama después de la devolución de la operación, pero antes de que se envíe el mensaje de respuesta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply%2A> para realizar el comportamiento personalizado antes de enviar el mensaje de retorno. `correlationState` es el objeto devuelto del método <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest%2A> que puede utilizar para realizar la correlación entre las llamadas entrantes y salientes de manera que admitan el comportamiento.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra un objeto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> básico que escribe una cadena en la consola cuando se invoca.  
  
 [!code-csharp[Interceptors#7](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#7)]
 [!code-vb[Interceptors#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#7)]  
  
 En el ejemplo de código siguiente se muestra una implementación de <xref:System.ServiceModel.Description.IServiceBehavior> que agrega el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector> a la colección <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[Interceptors#8](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#8)]
 [!code-vb[Interceptors#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#8)]  
  
 En el ejemplo de código siguiente se muestra el uso de un archivo de configuración de aplicación para cargar el comportamiento de servicio que inserta el objeto `Inspector`<xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector>.  
  
 [!code-xml[Interceptors#9](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/hostapplication.exe.config#9)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>