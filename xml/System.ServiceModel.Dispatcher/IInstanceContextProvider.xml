<Type Name="IInstanceContextProvider" FullName="System.ServiceModel.Dispatcher.IInstanceContextProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="28c37f44bfb30eb2dcec7a72634b22bd36550b6c" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51868186" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInstanceContextProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInstanceContextProvider" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IInstanceContextProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInstanceContextProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInstanceContextProvider" />
  <TypeSignature Language="F#" Value="type IInstanceContextProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implemente esta interfaz para participar en la creación de un objeto <see cref="T:System.ServiceModel.InstanceContext" />, o elegir uno, sobre todo para habilitar sesiones compartidas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente la interfaz <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> para proporcionar al sistema el objeto <xref:System.ServiceModel.InstanceContext?displayProperty=nameWithType> adecuado. Normalmente, esta interfaz se implementa para admitir sesiones compartidas, habilitar la agrupación de instancias de servicio, controlar las duraciones de las instancias de servicio o agrupar contextos entre los clientes.  
  
 Por ejemplo, para implementar el uso compartido, inserte un objeto <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> personalizado para decidir qué sesión o llamada de un cliente se asocia a qué objeto <xref:System.ServiceModel.InstanceContext>. Para obtener un ejemplo que muestra el uso compartido de contextos de instancias, consulte [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
> [!NOTE]
>  Cuando un <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider> se inserta en Windows Communication Foundation (WCF), la propiedad normal que controla la creación de <xref:System.ServiceModel.InstanceContext> objetos (el <xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=nameWithType> propiedad) ya no está activada y no tiene ningún efecto.  
  
 Un mecanismo más genérico por el que puede inicializar objetos <xref:System.ServiceModel.InstanceContext> cuando se crean (por ejemplo, para adjuntar extensiones personalizadas a cada <xref:System.ServiceModel.InstanceContext>) es <xref:System.ServiceModel.Dispatcher.IInstanceContextInitializer?displayProperty=nameWithType>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetExistingInstanceContext">
      <MemberSignature Language="C#" Value="public System.ServiceModel.InstanceContext GetExistingInstanceContext (System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.InstanceContext GetExistingInstanceContext(class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::InstanceContext ^ GetExistingInstanceContext(System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member GetExistingInstanceContext : System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; System.ServiceModel.InstanceContext" Usage="iInstanceContextProvider.GetExistingInstanceContext (message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.InstanceContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje entrante.</param>
        <param name="channel">Canal que recibió el mensaje.</param>
        <summary>Se le llama cuando se recibe un nuevo mensaje.</summary>
        <returns>Objeto <see cref="T:System.ServiceModel.InstanceContext" /> que se utiliza para procesar el mensaje. Devuelva <see langword="null" /> para indicar a WCF que cree un nuevo objeto <see cref="T:System.ServiceModel.InstanceContext" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se llama al método <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> cuando se recibe un mensaje. Devuelva el objeto <xref:System.ServiceModel.InstanceContext> que desea que procese el mensaje, o `null`. En el caso de `null`, WCF crea un nuevo <xref:System.ServiceModel.InstanceContext> objeto para el mensaje y, a continuación, llama el <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> método.  
  
 Si devuelve `null`, el nuevo objeto <xref:System.ServiceModel.InstanceContext> pasa por el sistema de limitación de peticiones e incrementa el número de <xref:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeInstanceContext">
      <MemberSignature Language="C#" Value="public void InitializeInstanceContext (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message, System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeInstanceContext(class System.ServiceModel.InstanceContext instanceContext, class System.ServiceModel.Channels.Message message, class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InitializeInstanceContext(System::ServiceModel::InstanceContext ^ instanceContext, System::ServiceModel::Channels::Message ^ message, System::ServiceModel::IContextChannel ^ channel);" />
      <MemberSignature Language="F#" Value="abstract member InitializeInstanceContext : System.ServiceModel.InstanceContext * System.ServiceModel.Channels.Message * System.ServiceModel.IContextChannel -&gt; unit" Usage="iInstanceContextProvider.InitializeInstanceContext (instanceContext, message, channel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="instanceContext">El nuevo objeto <see cref="T:System.ServiceModel.InstanceContext" /> .</param>
        <param name="message">Mensaje entrante.</param>
        <param name="channel">Canal que recibió el mensaje.</param>
        <summary>Se le llama cuando se devuelve <see langword="null" /> desde el método <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(System.ServiceModel.Channels.Message,System.ServiceModel.IContextChannel)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se llama a <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext%2A> cuando <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext%2A> devuelve `null` y se crea un nuevo objeto <xref:System.ServiceModel.InstanceContext>. Se llama a este método para notificar al usuario que se ha creado un nuevo <xref:System.ServiceModel.InstanceContext>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle (System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsIdle(class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle(System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member IsIdle : System.ServiceModel.InstanceContext -&gt; bool" Usage="iInstanceContextProvider.IsIdle instanceContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="instanceContext">Objeto <see cref="T:System.ServiceModel.InstanceContext" /> que se considera inactivo.</param>
        <summary>Se le llama cuando todas las actividades de <see cref="T:System.ServiceModel.InstanceContext" /> han terminado, para permitir que los implementadores eviten que se recicle <see cref="T:System.ServiceModel.InstanceContext" />.</summary>
        <returns>
          <see langword="true" /> si Windows Communication Foundation (WCF) se va a cerrar y a reciclar el objeto <see cref="T:System.ServiceModel.InstanceContext" /> y ajusta el valor de <see cref="P:System.ServiceModel.Dispatcher.ServiceThrottle.MaxConcurrentInstances" />; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> se llama cuando WCF se va a cerrar y reciclar inactividad <xref:System.ServiceModel.InstanceContext> objeto para que se puede informar el tiempo de ejecución si se debe seguir haciéndolo.  
  
 Para obtener un ejemplo que muestra el uso compartido de contextos de instancias, consulte [InstanceContextSharing](https://msdn.microsoft.com/library/4a6a46d7-b7d7-4bb5-a0dd-03ffa3cbc230).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyIdle">
      <MemberSignature Language="C#" Value="public void NotifyIdle (System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, System.ServiceModel.InstanceContext instanceContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyIdle(class System.ServiceModel.Dispatcher.InstanceContextIdleCallback callback, class System.ServiceModel.InstanceContext instanceContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(System.ServiceModel.Dispatcher.InstanceContextIdleCallback,System.ServiceModel.InstanceContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyIdle(System::ServiceModel::Dispatcher::InstanceContextIdleCallback ^ callback, System::ServiceModel::InstanceContext ^ instanceContext);" />
      <MemberSignature Language="F#" Value="abstract member NotifyIdle : System.ServiceModel.Dispatcher.InstanceContextIdleCallback * System.ServiceModel.InstanceContext -&gt; unit" Usage="iInstanceContextProvider.NotifyIdle (callback, instanceContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.ServiceModel.Dispatcher.InstanceContextIdleCallback" />
        <Parameter Name="instanceContext" Type="System.ServiceModel.InstanceContext" />
      </Parameters>
      <Docs>
        <param name="callback">Objeto <see cref="T:System.ServiceModel.Dispatcher.InstanceContextIdleCallback" /> que notifica a WCF el momento de cerrar y reciclar el objeto <see cref="T:System.ServiceModel.InstanceContext" />.</param>
        <param name="instanceContext">Objeto <see cref="T:System.ServiceModel.InstanceContext" /> actual.</param>
        <summary>Se le llama cuando el método <see cref="M:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(System.ServiceModel.InstanceContext)" /> devuelve <see langword="false" /> para permitir que los implementadores proporcionen una devolución de llamada para notificar a WCF la finalización del objeto <see cref="T:System.ServiceModel.InstanceContext" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle%2A> método se llama cuando el <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> devuelve del método `false` para que pueda proporcionar WCF con un <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> objeto que se utiliza para notificar el tiempo de ejecución que el <xref:System.ServiceModel.InstanceContext> ha finalizado su trabajo. Cuando el <xref:System.ServiceModel.Dispatcher.InstanceContextIdleCallback?displayProperty=nameWithType> objeto notifica el tiempo de ejecución que el <xref:System.ServiceModel.InstanceContext> ha finalizado su trabajo, las llamadas WCF <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> una vez más. Este ciclo continúa hasta que <xref:System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle%2A> devuelve `true`, y el contexto se cierra y se recicla.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>