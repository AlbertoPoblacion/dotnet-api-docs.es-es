<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IOperationInvoker.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac53b0a2f00ea9c6966297f977571140e1f0ed068b3.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3b0a2f00ea9c6966297f977571140e1f0ed068b3</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.Dispatcher.IOperationInvoker">
          <source>Declares methods that take an object and an array of parameters extracted from a message, invoke a method on that object with those parameters, and return the method's return value and output parameters.</source>
          <target state="translated">Declara los métodos que toman un objeto y una matriz de parámetros extraídos de un mensaje, invocan un método en ese objeto con esos parámetros y devuelven los parámetros de salida y el valor devuelto del método.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IOperationInvoker">
          <source>Implement the <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker&gt;</ph> interface to control the conversion from an untyped object and array of parameters to a strongly-typed method call on that object.</source>
          <target state="translated">Implemente la interfaz <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker&gt;</ph> para controlar la conversión de un objeto sin tipo y matriz de parámetros en una llamada a un método fuertemente tipado en ese objeto.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IOperationInvoker">
          <source>It has a synchronous <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A&gt;</ph> method, which takes an instance and set of inputs of type object and returns an object and a set of outputs of type object.</source>
          <target state="translated">Tiene un método <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A&gt;</ph> sincrónico, que toma una instancia y conjunto de entradas de objeto de tipo y devuelve un objeto y un conjunto de resultados de objeto de tipo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IOperationInvoker">
          <source>It also has a <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd%2A&gt;</ph> variant.</source>
          <target state="translated">También tiene una variante <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.Dispatcher.IOperationInvoker">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous%2A&gt;</ph> property specifies whether the synchronous or asynchronous method should be used.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous%2A&gt;</ph> especifica si se debe utilizar el método sincrónico o asincrónico.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> of parameter objects.</source>
          <target state="translated">Devuelve una <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> de objetos de parámetro.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs">
          <source>The parameters that are to be used as arguments to the operation.</source>
          <target state="translated">Los parámetros que se va a utilizar como argumentos para la operación.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs">
          <source>Implement this to return an array of parameters for the operation.</source>
          <target state="translated">Impleméntelo para devolver una matriz de parámetros para la operación.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs">
          <source>This array is filled by the formatter and passed back to the invoker when <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A&gt;</ph> is called.</source>
          <target state="translated">El formateador rellena esta matriz, que se vuelve a pasar al llamador cuando se llama a <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs">
          <source>An implementation of this method must allocate the input array on every call.</source>
          <target state="translated">Una implementación de este método debe asignar la matriz de entrada en cada llamada.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs">
          <source>Returning the same array for multiple calls can result in unpredictable behavior.</source>
          <target state="translated">Devolver la misma matriz de varias llamadas puede provocar un comportamiento imprevisible.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
          <source>The object to be invoked.</source>
          <target state="translated">Objeto que se va a invocar.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
          <source>The inputs to the method.</source>
          <target state="translated">Entradas para el método.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
          <source>The outputs from the method.</source>
          <target state="translated">Salidas del método.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
          <source>Returns an object and a set of output objects from an instance and set of input objects.</source>
          <target state="translated">Devuelve un objeto y un conjunto de objetos de salida de una instancia y un conjunto de objetos de entrada.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
          <source>The return value.</source>
          <target state="translated">Valor devuelto.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
          <source>The object to be invoked.</source>
          <target state="translated">Objeto que se va a invocar.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
          <source>The inputs to the method.</source>
          <target state="translated">Entradas para el método.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
          <source>The asynchronous callback object.</source>
          <target state="translated">Objeto de devolución de llamada asincrónica.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
          <source>Associated state data.</source>
          <target state="translated">Datos de estado asociados.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
          <source>An asynchronous implementation of the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /&gt;</ph> method.</source>
          <target state="translated">Implementación asincrónica del método <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> used to complete the asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que se utiliza para completar la llamada asincrónica.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
          <source>The object invoked.</source>
          <target state="translated">Objeto invocado.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
          <source>The outputs from the method.</source>
          <target state="translated">Salidas del método.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
          <source>The asynchronous end method.</source>
          <target state="translated">Método de finalización asincrónico.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
          <source>The return value.</source>
          <target state="translated">Valor devuelto.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous">
          <source>Gets a value that specifies whether the <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /&gt;</ph> or <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph> method is called by the dispatcher.</source>
          <target state="translated">Obtiene un valor que especifica si el distribuidor llama al método <ph id="ph1">&lt;see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)" /&gt;</ph> o <ph id="ph2">&lt;see cref="M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the dispatcher invokes the synchronous operation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el distribuidor invoca la operación sincrónica; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous">
          <source>The default invoker dispatches messages to the synchronous operation by default.</source>
          <target state="translated">El llamador predeterminado envía los mensajes a la operación sincrónica de forma predeterminada.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous">
          <source>This value is cached by the dispatcher and therefore should not change over the lifetime of the object that implements <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker&gt;</ph>.</source>
          <target state="translated">El distribuidor almacena en memoria caché este valor y, por consiguiente, no debe cambiar durante el período de duración del objeto que implementa <ph id="ph1">&lt;xref:System.ServiceModel.Dispatcher.IOperationInvoker&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>