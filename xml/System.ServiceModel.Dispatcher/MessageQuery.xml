<Type Name="MessageQuery" FullName="System.ServiceModel.Dispatcher.MessageQuery">
  <Metadata><Meta Name="ms.openlocfilehash" Value="398692b5704baefe2ac60469d9fe0ceee2d1e493" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39936418" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageQuery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageQuery extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.MessageQuery" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageQuery" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQuery abstract" />
  <TypeSignature Language="F#" Value="type MessageQuery = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define el comportamiento básico de clases empleado para buscar datos de correlación concretos en un mensaje.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase <xref:System.ServiceModel.Dispatcher.MessageQuery> es parecida a la clase <xref:System.ServiceModel.Dispatcher.MessageFilter>.  Sin embargo, en lugar de devolver coincidencias, el método <xref:System.ServiceModel.Dispatcher.MessageQuery.Evaluate%2A> devuelve los resultados de la evaluación de una consulta con respecto a un mensaje. El resultado de la consulta es un valor en el mensaje. Utilice el valor como una clave para correlacionar el mensaje con otros mensajes. Para agregar una propiedad nueva a los datos, use el método <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty.Add%2A> de la clase <xref:System.ServiceModel.Channels.CorrelationDataMessageProperty>.  
  
> [!NOTE]
>  Para obtener información sobre una implementación concreta de <xref:System.ServiceModel.Dispatcher.MessageQuery>, vea la clase <xref:System.ServiceModel.XPathMessageQuery>.  
  
## <a name="using-the-xpathmessagequery-and-messagequerycollection-classes"></a>Utilizar las clases XPathMessageQuery y MessageQueryCollection  
 Puede optimizar el proceso de consulta creando un conjunto de objetos de consulta e insertándolos en una instancia de la clase <xref:System.ServiceModel.Dispatcher.MessageQueryCollection>.  
  
> [!NOTE]
>  Para obtener información sobre una implementación concreta de <xref:System.ServiceModel.Dispatcher.MessageQueryCollection>, vea la clase <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection>.  
  
 Un uso común es rellenar la colección con consultas que tienen el mismo predicado XPath y que solo se diferencian en el valor de hoja final. Por ejemplo, las siguientes consultas XPath son idénticas, salvo por la última cláusula. La primera consulta todos los elementos que hacen que el atributo de cantidad se establezca en 1, y la segunda consulta los elementos con el atributo de producto establecido en 'Contoso':  
  
```  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@quantity = 1]"  
"/s12:Envelope/s12:Body/PurchaseOrder/Items/Item[@product = 'Contoso']"  
```  
  
 La clase <xref:System.ServiceModel.Dispatcher.MessageQueryCollection> le permite crear tablas de consultas que solo difieren ligeramente, permitiendo un procesamiento más eficaz.  
  
 También puede utilizar la clase <xref:System.ServiceModel.Dispatcher.MessageQueryTable%601> para almacenar y evaluar consultas de mensajes.  
  
   
  
## Examples  
 En el siguiente ejemplo, se crean un mensaje y consultas de mensajes XPath. Los objetos <xref:System.ServiceModel.XPathMessageQuery> contenidos en un objeto <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> evalúan las consultas. Los resultados de cada consulta se prueban utilizando la propiedad <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> de la clase <xref:System.ServiceModel.Dispatcher.XPathResult>.  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ServiceModel.XPathMessageQuery" />
    <altmember cref="T:System.ServiceModel.Channels.CorrelationDataMessageProperty" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathMessageContext" />
    <altmember cref="T:System.ServiceModel.Dispatcher.XPathResult" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageQuery ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageQuery();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.Dispatcher.MessageQuery" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMessageQueryCollection">
      <MemberSignature Language="C#" Value="public virtual System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Dispatcher.MessageQueryCollection CreateMessageQueryCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.CreateMessageQueryCollection" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateMessageQueryCollection () As MessageQueryCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ServiceModel::Dispatcher::MessageQueryCollection ^ CreateMessageQueryCollection();" />
      <MemberSignature Language="F#" Value="abstract member CreateMessageQueryCollection : unit -&gt; System.ServiceModel.Dispatcher.MessageQueryCollection&#xA;override this.CreateMessageQueryCollection : unit -&gt; System.ServiceModel.Dispatcher.MessageQueryCollection" Usage="messageQuery.CreateMessageQueryCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.MessageQueryCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una colección de consultas que devuelve un tipo específico de datos asociados a ésta.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" /> La colección de consultas asociadas al tipo de datos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está previsto para su uso por parte de la clase <xref:System.ServiceModel.Dispatcher.MessageQueryCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Evaluate&lt;TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, ejecuta una consulta con respecto al mensaje y devuelve un valor que satisface la consulta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La diferencia entre las dos sobrecargas es que una toma un parámetro <xref:System.ServiceModel.Channels.Message> y no puede examinar el cuerpo, mientras que la otra toma un parámetro <xref:System.ServiceModel.Channels.MessageBuffer> y puede examinar cualquier parte del mensaje. Los encabezados del mensaje se almacenan en búfer automáticamente y pueden consultarse sin utilizarse. Sin embargo, si se desea consultar el cuerpo, el mensaje completo debe estar almacenado en búfer porque la consulta puede utilizar un cuerpo del mensaje sin búfer.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.ServiceModel.Channels.Message -&gt; 'Result" Usage="messageQuery.Evaluate message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">El tipo del valor que se va a devolver.</typeparam>
        <param name="message">El mensaje que se va a consultar.</param>
        <summary>Cuando se invalida en una clase derivada, ejecuta una consulta con respecto al mensaje y devuelve un resultado. No se puede consultar el cuerpo.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
Una colección enumerable de resultados que satisface la consulta.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public abstract TResult Evaluate&lt;TResult&gt; (System.ServiceModel.Channels.MessageBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!TResult Evaluate&lt;TResult&gt;(class System.ServiceModel.Channels.MessageBuffer buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.MessageQuery.Evaluate``1(System.ServiceModel.Channels.MessageBuffer)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Evaluate(Of TResult) (buffer As MessageBuffer) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; abstract TResult Evaluate(System::ServiceModel::Channels::MessageBuffer ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Evaluate : System.ServiceModel.Channels.MessageBuffer -&gt; 'Result" Usage="messageQuery.Evaluate buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="buffer" Type="System.ServiceModel.Channels.MessageBuffer" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">El tipo de objeto que se va a devolver.</typeparam>
        <param name="buffer">El mensaje que se va a consultar.</param>
        <summary>Cuando se invalida en una clase derivada, ejecuta una consulta con respecto al mensaje y devuelve un resultado.</summary>
        <returns><see cref="T:System.ServiceModel.Dispatcher.MessageQueryCollection" />  
  
Una colección enumerable de resultados que satisface la consulta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo, se crean un mensaje y consultas de mensajes XPath. Los objetos <xref:System.ServiceModel.XPathMessageQuery> contenidos en un objeto <xref:System.ServiceModel.Dispatcher.XPathMessageQueryCollection> evalúan las consultas. Los resultados de cada consulta se prueban utilizando la propiedad <xref:System.ServiceModel.Dispatcher.XPathResult.ResultType%2A> de la clase <xref:System.ServiceModel.Dispatcher.XPathResult>.  
  
 [!code-csharp[XPathMessageQuery#0](~/samples/snippets/csharp/VS_Snippets_CFX/xpathmessagequery/cs/source.cs#0)]
 [!code-vb[XPathMessageQuery#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xpathmessagequery/vb/source.vb#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>