<Type Name="IMessageFormatter" FullName="System.Messaging.IMessageFormatter">
  <TypeSignature Language="C#" Value="public interface IMessageFormatter : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMessageFormatter implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.IMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMessageFormatter&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMessageFormatter : ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ccfde-101">Serializa o deserializa objetos del cuerpo de un mensaje de Message Queuing.</span><span class="sxs-lookup"><span data-stu-id="ccfde-101">Serializes or deserializes objects from the body of a Message Queuing message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccfde-102">Cuando una aplicación envía un mensaje a la cola utilizando una instancia de la <xref:System.Messaging.MessageQueue> (clase), el formateador serializa el objeto (que puede ser una instancia de cualquier clase) en una secuencia y lo inserta en el cuerpo del mensaje.</span><span class="sxs-lookup"><span data-stu-id="ccfde-102">When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object (which can be an instance of any class) into a stream and inserts it into the message body.</span></span> <span data-ttu-id="ccfde-103">Al leer de una cola utilizando una <xref:System.Messaging.MessageQueue>, el formateador deserializa los datos del mensaje en el <xref:System.Messaging.Message.Body%2A> propiedad de un <xref:System.Messaging.Message>.</span><span class="sxs-lookup"><span data-stu-id="ccfde-103">When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.</span></span>  
  
 <span data-ttu-id="ccfde-104"><xref:System.Messaging.BinaryMessageFormatter> y <xref:System.Messaging.ActiveXMessageFormatter> proporcionan mayor rendimiento que la <xref:System.Messaging.XmlMessageFormatter>.</span><span class="sxs-lookup"><span data-stu-id="ccfde-104"><xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>.</span></span> <span data-ttu-id="ccfde-105">El <xref:System.Messaging.ActiveXMessageFormatter> permite la interoperabilidad con aplicaciones Message Queue Server de Visual Basic 6.0.</span><span class="sxs-lookup"><span data-stu-id="ccfde-105">The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications.</span></span> <span data-ttu-id="ccfde-106">El <xref:System.Messaging.XmlMessageFormatter> es débilmente acoplado, lo que significa que el servidor y el cliente pueden utilizar versiones el tipo que se envían y reciben de forma independiente.</span><span class="sxs-lookup"><span data-stu-id="ccfde-106">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, which means that the server and client can version the type that is sent and received independently.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Messaging.MessageQueue.Formatter" />
    <altmember cref="P:System.Messaging.Message.Formatter" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.XmlMessageFormatter" />
  </Docs>
  <Members>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanRead(System::Messaging::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ccfde-107"><see cref="T:System.Messaging.Message" /> que se va a inspeccionar.</span><span class="sxs-lookup"><span data-stu-id="ccfde-107">The <see cref="T:System.Messaging.Message" /> to inspect.</span></span></param>
        <summary><span data-ttu-id="ccfde-108">Cuando se implementa en una clase, determina si el formateador puede deserializar el contenido del mensaje.</span><span class="sxs-lookup"><span data-stu-id="ccfde-108">When implemented in a class, determines whether the formatter can deserialize the contents of the message.</span></span></summary>
        <returns>
          <span data-ttu-id="ccfde-109">Es <see langword="true" /> si el formateador puede deserializar el mensaje; de lo contrario, es <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="ccfde-109"><see langword="true" /> if the formatter can deserialize the message; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ccfde-110">Objeto <see cref="T:System.Messaging.Message" /> que se va a deserializar.</span><span class="sxs-lookup"><span data-stu-id="ccfde-110">The <see cref="T:System.Messaging.Message" /> to deserialize.</span></span></param>
        <summary><span data-ttu-id="ccfde-111">Cuando se implementa en una clase, lee el contenido del mensaje especificado y crea un objeto que contiene datos del mensaje.</span><span class="sxs-lookup"><span data-stu-id="ccfde-111">When implemented in a class, reads the contents from the given message and creates an object that contains data from the message.</span></span></summary>
        <returns><span data-ttu-id="ccfde-112">El mensaje deserializado.</span><span class="sxs-lookup"><span data-stu-id="ccfde-112">The deserialized message.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="ccfde-113">El objeto <see cref="T:System.Messaging.Message" /> que incluirá el objeto serializado.</span><span class="sxs-lookup"><span data-stu-id="ccfde-113">The <see cref="T:System.Messaging.Message" /> that will contain the serialized object.</span></span></param>
        <param name="obj"><span data-ttu-id="ccfde-114">Objeto que se va a serializar en el mensaje.</span><span class="sxs-lookup"><span data-stu-id="ccfde-114">The object to be serialized into the message.</span></span></param>
        <summary><span data-ttu-id="ccfde-115">Cuando se implementa en una clase, serializa un objeto en el cuerpo del mensaje.</span><span class="sxs-lookup"><span data-stu-id="ccfde-115">When implemented in a class, serializes an object into the body of the message.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>