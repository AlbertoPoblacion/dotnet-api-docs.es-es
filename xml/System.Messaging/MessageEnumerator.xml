<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="MessageEnumerator.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56a3039a11d941cd3db611cb997eb17835525e4da.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a3039a11d941cd3db611cb997eb17835525e4da</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Provides a forward-only cursor to enumerate through messages in a message queue.</source>
          <target state="translated">Proporciona un cursor de tipo sólo hacia delante con el fin de enumerar mensajes en una cola de mensajes.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Use <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> for dynamic interaction with messages in a queue.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> para la interacción dinámica con los mensajes de una cola.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Methods available through the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class can return either a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</source>
          <target state="translated">Métodos disponibles a través de la <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> clase puede devolver un <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> que apunta a una lista dinámica de mensajes en la cola o una matriz que contiene una copia en un momento dado (una instantánea) de la cola en el momento en el método especificado se llamó.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Unlike a static snapshot, an enumerator allows you to modify the collection.</source>
          <target state="translated">A diferencia de una instantánea estática, un enumerador permite modificar la colección.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Using a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>, you can remove messages from the queue, and the change is immediately reflected in the queue.</source>
          <target state="translated">Mediante un <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>, puede quitar los mensajes de la cola y el cambio se reflejará inmediatamente en la cola.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>An enumerator does not remove the messages from the queue when it queries the queue.</source>
          <target state="translated">Un enumerador no elimina los mensajes de la cola cuando consulta la cola.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>It returns information about the message at the current cursor position, but it leaves the message in the queue.</source>
          <target state="translated">Devuelve información sobre el mensaje en la posición actual del cursor, pero deja el mensaje en la cola.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> is a cursor, initialized to the head of a dynamic list.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> es un cursor, inicializado en el encabezado de una lista dinámica.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The list order is the same as the order of the messages in the queue, according to message priority.</source>
          <target state="translated">El orden de la lista es el mismo que el orden de los mensajes en la cola, según la prioridad del mensaje.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can move the cursor to the first message in the queue by calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Puede mover el cursor hasta el primer mensaje de la cola mediante una llamada a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>After the enumerator has been initialized, you can use <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> to step forward through the remaining messages.</source>
          <target state="translated">Una vez inicializado el enumerador, puede utilizar <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> para desplazarse hacia delante por los mensajes restantes.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can specify whether to wait for a message to become available by passing a timeout into the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> method.</source>
          <target state="translated">Puede especificar si se debe esperar un mensaje esté disponible pasando un tiempo de espera en el <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</source>
          <target state="translated">Dado que el enumerador es dinámico, un mensaje que se anexa más allá de la posición del cursor actual (por ejemplo, debido a una prioridad baja), puede tener acceso por el enumerador.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A message that is inserted before the cursor's current position cannot be accessed.</source>
          <target state="translated">Un mensaje que se inserta antes de que no se puede tener acceso a la posición del cursor actual.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>It is not possible to step backward with a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.</source>
          <target state="translated">No es posible ir hacia atrás con un <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>A cursor allows forward-only movement.</source>
          <target state="translated">Un cursor permite el movimiento de solo avance.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> method enables you to place the cursor back at the beginning of the queue.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> método le permite colocar el cursor volver al principio de la cola.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Instances of <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> for a given queue work independently.</source>
          <target state="translated">Instancias de <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> para una cola determinada trabajar de forma independiente.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>You can create two <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instances that apply to the same queue.</source>
          <target state="translated">Puede crear dos <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instancias que se aplican a la misma cola.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The changes that one <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</source>
          <target state="translated">Los cambios que otro <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> facilita a los mensajes en la cola se reflejarán inmediatamente en un segundo enumerador si el segundo enumerador se coloca antes del primer.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> property on the now-deleted message.</source>
          <target state="translated">Sin embargo, si dos enumeradores tienen la misma posición y uno de ellos quita el mensaje en esa posición, se produce una excepción si el otro enumerador intenta obtener el valor de la <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> propiedad en el mensaje que se elimina ahora.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>If you create an instance of <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> with <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType&gt;</ph> set to <ph id="ph3">`true`</ph>, no other application can modify the messages in your enumerator while you have the connection to the queue.</source>
          <target state="translated">Si crea una instancia de <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> con <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType&gt;</ph> establecido en <ph id="ph3">`true`</ph>, ninguna otra aplicación puede modificar los mensajes del enumerador mientras se mantenga la conexión a la cola.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The following example gets a dynamic list of messages in a queue and counts all messages with the <ph id="ph1">&lt;xref:System.Messaging.Message.Priority%2A&gt;</ph> property set to <ph id="ph2">&lt;xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se obtiene una lista dinámica de mensajes en una cola y se cuentan todos los mensajes con el <ph id="ph1">&lt;xref:System.Messaging.Message.Priority%2A&gt;</ph> propiedad establecida en <ph id="ph2">&lt;xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>Frees the resources associated with the enumerator.</source>
          <target state="translated">Libera los recursos asociados al enumerador.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>The operating system retains an open handle to the queue during the lifetime of the cursor.</source>
          <target state="translated">El sistema operativo retiene un identificador abierto en la cola durante la duración del cursor.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Close">
          <source>When you have finished working with the enumerator, call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> to release the resources associated with the handle.</source>
          <target state="translated">Cuando termine de trabajar con el enumerador, llame a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> para liberar los recursos asociados al identificador.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>Gets the current <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that this enumerator points to.</source>
          <target state="translated">Obtiene el <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> actual al que apunta este enumerador.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The current message.</source>
          <target state="translated">Mensaje actual.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>When the enumerator is created, it points to the head of the queue, at a location before the first message.</source>
          <target state="translated">Cuando se crea el enumerador, apunte al encabezado de la cola, en una ubicación delante del primer mensaje.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>In this case, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> is not valid and will throw an exception if it is accessed.</source>
          <target state="translated">En este caso, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> no es válida y producirá una excepción si se tiene acceso.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You must call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> to position the cursor at the first message in the queue.</source>
          <target state="translated">Debe llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> para colocar el cursor en el primer mensaje de la cola.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You called <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> before the first call to <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph>.</source>
          <target state="translated">Se llamó a <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> antes de la primera llamada a <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The cursor is located before the first element of the message enumeration.</source>
          <target state="translated">El cursor se encuentra ubicado delante del primer elemento de la enumeración del mensaje.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>You called <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> after a call to <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> had returned <ph id="ph3">&lt;see langword="false" /&gt;</ph> (indicating the cursor is located after the last element of the message enumeration.)</source>
          <target state="translated">Se llamó a <ph id="ph1">&lt;see cref="P:System.Messaging.MessageEnumerator.Current" /&gt;</ph> después de que una llamada a <ph id="ph2">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> devolviera <ph id="ph3">&lt;see langword="false" /&gt;</ph> (lo que indicaba que el cursor está situado después del último elemento de la enumeración del mensaje).</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>The message the enumerator is currently pointing to no longer exists.</source>
          <target state="translated">El mensaje al que está apuntando actualmente el enumerador ya no existe.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.Current">
          <source>It might have been deleted.</source>
          <target state="translated">Puede que se hayan eliminado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>Gets the native Message Queuing cursor handle used to browse messages in the queue.</source>
          <target state="translated">Obtiene el indicador de cursor de Message Queuing nativo que se utiliza para explorar los mensajes de la cola.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>The native cursor handle.</source>
          <target state="translated">Indicador de cursor nativo.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>This property contains the native handle to the enumeration.</source>
          <target state="translated">Esta propiedad contiene el identificador nativo de la enumeración.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>When you have finished working with the enumerator, call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> to release this resource.</source>
          <target state="translated">Cuando termine de trabajar con el enumerador, llame a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> para liberar este recurso.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.CursorHandle">
          <source>The handle does not exist.</source>
          <target state="translated">El indicador no existe.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</source>
          <target state="translated">Libera los recursos utilizados por <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</source>
          <target state="translated">Libera todos los recursos utilizados por <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>Calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> allows the resources used by the <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> to be reallocated for other purposes.</source>
          <target state="translated">Al llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> permite que los recursos utilizados por el <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> se reasignen para otros fines.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose">
          <source>For more information about <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph>, consulte <bpt id="p1">[</bpt>limpiar recursos no administrados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar tanto recursos administrados como no administrados; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar únicamente recursos no administrados.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Libera los recursos no administrados que utiliza <ph id="ph1">&lt;see cref="T:System.Messaging.MessageEnumerator" /&gt;</ph> y libera los recursos administrados de forma opcional.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Se llama a este método público <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> método y <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose()`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose()`</ph> se invoca el protegido <ph id="ph2">`Dispose(Boolean)`</ph> método con el <ph id="ph3">`disposing`</ph> parámetro establecido en <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invoca <ph id="ph2">`Dispose`</ph> con <ph id="ph3">`disposing`</ph> establecido en <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> references.</source>
          <target state="translated">Cuando el parámetro <ph id="ph1">`disposing`</ph> es <ph id="ph2">`true`</ph>, este método libera todos los recursos retenidos por los objetos administrados a los que el control <ph id="ph3">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> hace referencia.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose()`</ph> method of each referenced object.</source>
          <target state="translated">Este método invoca al método <ph id="ph1">`Dispose()`</ph> de cada uno de los objetos a los que se hace referencia.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> puede recibir varias llamadas de otros objetos.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Al invalidar <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre cómo implementar <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph>, consulte <bpt id="p1">[</bpt>implementa un método Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Para obtener más información acerca de <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> y <ph id="ph2">&lt;see langword="Finalize" /&gt;</ph>, consulte <bpt id="p1">[</bpt>limpiar recursos no administrados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> y <bpt id="p2">[</bpt>reemplazar el método Finalize<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Advances the enumerator to the next message in the queue.</source>
          <target state="translated">Desplaza el enumerador al siguiente mensaje de la cola.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>Advances the enumerator to the next message in the queue, if one is currently available.</source>
          <target state="translated">Desplaza el enumerador al siguiente mensaje de la cola si hay alguno disponible.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator was succesfully advanced to the next message; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has reached the end of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el enumerador avanzó con éxito hasta el siguiente mensaje; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si el enumerador alcanzó el final de la cola.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>This overload returns immediately if there is no message in the queue.</source>
          <target state="translated">Esta sobrecarga vuelve inmediatamente si no hay ningún mensaje en la cola.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>There is another overload that waits a specified <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> for a message to arrive.</source>
          <target state="translated">Hay otra sobrecarga que espera un determinado <ph id="ph1">&lt;xref:System.TimeSpan&gt;</ph> a que llegue un mensaje.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph2">`false`</ph> to the calling method.</source>
          <target state="translated">Si un mensaje no está disponible actualmente porque la cola está vacía o porque ha movido más allá del último elemento de la colección, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph> al método de llamada.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> brings the first message of the queue into view.</source>
          <target state="translated">Tras su creación, un enumerador se coloca conceptualmente delante del primer mensaje de la cola y la primera llamada a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> incorpora el primer mensaje de la cola en la vista.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">Se ha producido una excepción específica para Message Queuing.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> to wait for a message to be available if the enumerator is positioned at the end of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph> que se va a esperar hasta que un mensaje se encuentre disponible si el enumerador se coloca al final de la cola.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>Advances the enumerator to the next message in the queue.</source>
          <target state="translated">Desplaza el enumerador al siguiente mensaje de la cola.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If the enumerator is positioned at the end of the queue, <ph id="ph1">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> waits until a message is available or the given timeout expires.</source>
          <target state="translated">Si el enumerador se coloca al final de la cola, <ph id="ph1">&lt;see cref="M:System.Messaging.MessageEnumerator.MoveNext" /&gt;</ph> espera hasta que haya un mensaje disponible o expire el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the enumerator successfully advanced to the next message; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el enumerador avanzó satisfactoriamente hasta el siguiente mensaje; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si el enumerador llegó al final de la cola y un mensaje no pasa a estar disponible en el plazo de tiempo especificado por el parámetro <ph id="ph3">&lt;paramref name="timeout" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</source>
          <target state="translated">Espera a que esta sobrecarga si no hay ningún mensaje en la cola o si el cursor ha alcanzado el final de la cola.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> waits the specified timeout.</source>
          <target state="translated">Si un mensaje no está disponible actualmente porque la cola está vacía o porque ha movido más allá del último elemento de la colección, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> espera a que el tiempo de espera especificado.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>If the cursor is already at the end of the queue, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> only returns <ph id="ph2">`true`</ph> if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</source>
          <target state="translated">Si el cursor está al final de la cola, <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> sólo devuelve <ph id="ph2">`true`</ph> si el nuevo mensaje llega en el intervalo de tiempo especificado, tiene una prioridad menor que todos los mensajes actualmente en la cola y se coloca al final de la cola.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>An overload with no parameter returns immediately if no further messages are in the queue.</source>
          <target state="translated">Una sobrecarga sin parámetros devuelve inmediatamente si no hay más mensajes están en la cola.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> brings the first message of the enumeration into view.</source>
          <target state="translated">Tras su creación, un enumerador se coloca conceptualmente delante del primer mensaje de la enumeración y la primera llamada a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> pone el primer mensaje de la enumeración en la vista.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The value specified for the timeout parameter is invalid.</source>
          <target state="translated">El valor especificado para el parámetro de tiempo de espera no es válido.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>It might represent a negative number.</source>
          <target state="translated">Podría representar un número negativo.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>An exception specific to Message Queuing was thrown.</source>
          <target state="translated">Se ha producido una excepción específica para Message Queuing.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)">
          <source>The timeout has expired.</source>
          <target state="translated">El tiempo de espera ha expirado.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Removes the current message from the queue and returns the message to the calling application.</source>
          <target state="translated">Quita el mensaje actual de la cola y lo devuelve a la aplicación que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="T:System.Messaging.MessageEnumerator">
          <source>Removing the message deletes it from the queue.</source>
          <target state="translated">Al quitar el mensaje, éste se elimina de la cola.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>The behavior described for these overloads is applicable only if the <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instance is retrieved by using the <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph>.</source>
          <target state="translated">El comportamiento descrito para estas sobrecargas es aplicable solo si la <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instancia se recupera utilizando la <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Messaging.MessageEnumerator">
          <source>Do not use <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A&gt;</ph> to retrieve an instance of <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> as this method has been deprecated.</source>
          <target state="translated">No utilice <ph id="ph1">&lt;xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A&gt;</ph> para recuperar una instancia de <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> como este método está en desuso.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</source>
          <target state="translated">Quita el mensaje actual de una cola transaccional o no transaccional y lo devuelve a la aplicación que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">No hay un tiempo de espera determinado para que un mensaje llegue a la cola.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> que hace referencia al primer mensaje disponible en la cola.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Quita y devuelve el mensaje a la posición del cursor actual.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Si usas colas del diario, eliminar el mensaje hace una copia que se conservarán en la cola del diario, al igual que el <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> la clase <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Cuando se quita el mensaje actual, el cursor se mueve al siguiente mensaje.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">No es necesario llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> después de llamar a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">Si se llama a esta sobrecarga en una cola transaccional, Message Queue Server crea una sola transacción interna.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> object that specifies the transaction in which the message will be removed.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> que especifica la transacción de la que se quitará el mensaje.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">Quita el mensaje actual de una cola transaccional y devuelve el mensaje a la aplicación que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">No hay un tiempo de espera determinado para que un mensaje llegue a la cola.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> que hace referencia al primer mensaje disponible en la cola.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using the internal transaction context defined by the <ph id="ph2">`transaction`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Quita y devuelve el mensaje a la posición del cursor actual, utilizando el contexto de transacción interna definido por el <ph id="ph2">`transaction`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Si usas colas del diario, eliminar el mensaje hace una copia que se conservarán en la cola del diario, al igual que el <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> la clase <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Al trabajar con colas transaccionales, una reversión de una transacción hace que los mensajes que se quitan mediante una llamada a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> que se devolverá a la cola.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">La eliminación no es irreversible hasta que se confirma la transacción.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Cuando se quita el mensaje actual, el cursor se mueve al siguiente mensaje.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">No es necesario llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> después de llamar a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">Uno de los valores de <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>, que describe el tipo de contexto de transacción que se va a asociar al mensaje.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">Quita el mensaje actual de una cola y lo devuelve a la aplicación que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>There is no timeout specified for a message to arrive in the queue.</source>
          <target state="translated">No hay un tiempo de espera determinado para que un mensaje llegue a la cola.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> que hace referencia al primer mensaje disponible en la cola.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph2">`transactionType`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Quita y devuelve el mensaje a la posición del cursor actual, usando un contexto de transacción definido por el <ph id="ph2">`transactionType`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">Especifique <ph id="ph1">`Automatic`</ph> para el <ph id="ph2">`transactionType`</ph> parámetro si ya existe un contexto de transacción externa asociado al subproceso que desea utilizar para recibir el mensaje.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">Especifique <ph id="ph1">`Single`</ph> si desea recibir el mensaje como una sola transacción interna.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">Puede especificar <ph id="ph1">`None`</ph> si desea recibir un mensaje de una cola transaccional fuera de un contexto de transacción.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Si usas colas del diario, eliminar el mensaje hace una copia que se conservarán en la cola del diario, al igual que el <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> la clase <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Al trabajar con colas transaccionales, una reversión de una transacción hace que los mensajes que se quitan mediante una llamada a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> que se devolverá a la cola.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">La eliminación no es irreversible hasta que se confirma la transacción.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Cuando se quita el mensaje actual, el cursor se mueve al siguiente mensaje.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">No es necesario llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> después de llamar a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)">
          <source>The <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> parameter is not one of the <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> members.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> no es un miembro de <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The interval of time to wait for a message to arrive in the queue.</source>
          <target state="translated">Intervalo de tiempo que hay que esperar a que un mensaje llegue a la cola.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>Removes the current message from the queue and returns the message to the calling application.</source>
          <target state="translated">Quita el mensaje actual de la cola y lo devuelve a la aplicación que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Si hay un mensaje que quitar, el método lo devuelve inmediatamente.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">En caso contrario, el método espera el tiempo de espera especificado hasta que llegue un mensaje nuevo.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> que hace referencia al primer mensaje disponible en la cola.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Quita y devuelve el mensaje a la posición del cursor actual.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Si el cursor está al final de la cola, esta sobrecarga del método espera hasta que un mensaje esté disponible o el intervalo especificado por el <ph id="ph1">`timeout`</ph> parámetro ha expirado.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Si usas colas del diario, eliminar el mensaje hace una copia que se conservarán en la cola del diario, al igual que el <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> la clase <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Cuando se quita el mensaje actual, el cursor se mueve al siguiente mensaje.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">No es necesario llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> después de llamar a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</source>
          <target state="translated">Si se llama a esta sobrecarga en una cola transaccional, Message Queue Server crea una sola transacción interna.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">El valor especificado para el parámetro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)">
          <source>The timeout has expired.</source>
          <target state="translated">El tiempo de espera ha expirado.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">Intervalo de tiempo que hay que esperar hasta que se quite el mensaje.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> object that specifies the transaction context for the message.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransaction" /&gt;</ph> que especifica el contexto de transacción para el mensaje.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>Removes the current message from a transactional queue and returns the message to the calling application.</source>
          <target state="translated">Quita el mensaje actual de una cola transaccional y devuelve el mensaje a la aplicación que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Si hay un mensaje que quitar, el método lo devuelve inmediatamente.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">En caso contrario, el método espera el tiempo de espera especificado hasta que llegue un mensaje nuevo.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> que hace referencia al primer mensaje disponible en la cola.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Quita y devuelve el mensaje a la posición del cursor actual.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Si el cursor está al final de la cola, esta sobrecarga del método espera hasta que un mensaje esté disponible o el intervalo especificado por el <ph id="ph1">`timeout`</ph> parámetro ha expirado.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Al trabajar con colas transaccionales, una reversión de una transacción hace que los mensajes que se quitan mediante una llamada a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> que se devolverá a la cola.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">La eliminación no es irreversible hasta que se confirma la transacción.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Si usas colas del diario, eliminar el mensaje hace una copia que se conservarán en la cola del diario, al igual que el <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> la clase <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Cuando se quita el mensaje actual, el cursor se mueve al siguiente mensaje.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">No es necesario llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> después de llamar a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">El valor especificado para el parámetro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="transaction" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)">
          <source>The timeout has expired.</source>
          <target state="translated">El tiempo de espera ha expirado.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The interval of time to wait for the message to be removed.</source>
          <target state="translated">Intervalo de tiempo que hay que esperar hasta que se quite el mensaje.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> values, describing the type of transaction context to associate with the message.</source>
          <target state="translated">Uno de los valores de <ph id="ph1">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>, que describe el tipo de contexto de transacción que se va a asociar al mensaje.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Removes the current message from a queue and returns the message to the calling application.</source>
          <target state="translated">Quita el mensaje actual de una cola y lo devuelve a la aplicación que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If there is a message to remove, the method returns it immediately.</source>
          <target state="translated">Si hay un mensaje que quitar, el método lo devuelve inmediatamente.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Otherwise, the method waits the specified timeout for a new message to arrive.</source>
          <target state="translated">En caso contrario, el método espera el tiempo de espera especificado hasta que llegue un mensaje nuevo.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the first message available in the queue.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> que hace referencia al primer mensaje disponible en la cola.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id="ph2">`transactionType`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> Quita y devuelve el mensaje a la posición del cursor actual, usando un contexto de transacción definido por el <ph id="ph2">`transactionType`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id="ph1">`timeout`</ph> parameter has expired.</source>
          <target state="translated">Si el cursor está al final de la cola, esta sobrecarga del método espera hasta que un mensaje esté disponible o el intervalo especificado por el <ph id="ph1">`timeout`</ph> parámetro ha expirado.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Automatic`</ph> for the <ph id="ph2">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</source>
          <target state="translated">Especifique <ph id="ph1">`Automatic`</ph> para el <ph id="ph2">`transactionType`</ph> parámetro si ya existe un contexto de transacción externa asociado al subproceso que desea utilizar para recibir el mensaje.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>Specify <ph id="ph1">`Single`</ph> if you want to receive the message as a single internal transaction.</source>
          <target state="translated">Especifique <ph id="ph1">`Single`</ph> si desea recibir el mensaje como una sola transacción interna.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>You can specify <ph id="ph1">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.</source>
          <target state="translated">Puede especificar <ph id="ph1">`None`</ph> si desea recibir un mensaje de una cola transaccional fuera de un contexto de transacción.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.</source>
          <target state="translated">Si usas colas del diario, eliminar el mensaje hace una copia que se conservarán en la cola del diario, al igual que el <ph id="ph1">&lt;xref:System.Messaging.MessageQueue&gt;</ph> la clase <ph id="ph2">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.</source>
          <target state="translated">Al trabajar con colas transaccionales, una reversión de una transacción hace que los mensajes que se quitan mediante una llamada a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> que se devolverá a la cola.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The removal is not irreversible until the transaction is committed.</source>
          <target state="translated">La eliminación no es irreversible hasta que se confirma la transacción.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>When you remove the current message, the cursor is moved to the next message.</source>
          <target state="translated">Cuando se quita el mensaje actual, el cursor se mueve al siguiente mensaje.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>You do not have to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</source>
          <target state="translated">No es necesario llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> después de llamar a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The value specified for the <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is invalid.</source>
          <target state="translated">El valor especificado para el parámetro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The timeout has expired.</source>
          <target state="translated">El tiempo de espera ha expirado.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)">
          <source>The <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> parameter is not one of the <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph> members.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="transactionType" /&gt;</ph> no es un miembro de <ph id="ph2">&lt;see cref="T:System.Messaging.MessageQueueTransactionType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>Resets the current enumerator so it points to the head of the queue.</source>
          <target state="translated">Restablece el enumerador actual de forma que señale al encabezado de la cola.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>An enumerator can only move in a forward direction.</source>
          <target state="translated">Sólo puede mover un enumerador en una dirección hacia delante.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>Use this method to start over at the beginning of the queue.</source>
          <target state="translated">Utilice este método para volver a empezar al principio de la cola.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>After calling <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph>, the cursor points to the first message.</source>
          <target state="translated">Después de llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph>, el cursor señala al primer mensaje.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Messaging.MessageEnumerator.Reset">
          <source>You do not need to call <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> to move the cursor forward to the first message in the queue.</source>
          <target state="translated">No es necesario llamar a <ph id="ph1">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> después de llamar a <ph id="ph2">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> para mover el cursor hacia delante hasta el primer mensaje de la cola.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the message at the current cursor position.</source>
          <target state="translated">Devuelve una <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> que hace referencia al mensaje de la posición actual del cursor.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current">
          <source>A <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> that references the message at the current cursor position.</source>
          <target state="translated">Una clase <ph id="ph1">&lt;see cref="T:System.Messaging.Message" /&gt;</ph> que hace referencia al mensaje de la posición actual del cursor.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>