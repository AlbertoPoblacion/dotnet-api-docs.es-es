<Type Name="DataManipulator" FullName="System.Windows.Forms.DataVisualization.Charting.DataManipulator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eedc037b8608a61a26e93e1f1ec9cd7cb079c194" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36360250" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataManipulator : System.Windows.Forms.DataVisualization.Charting.DataFormula" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataManipulator extends System.Windows.Forms.DataVisualization.Charting.DataFormula" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" />
  <TypeSignature Language="VB.NET" Value="Public Class DataManipulator&#xA;Inherits DataFormula" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataManipulator : System::Windows::Forms::DataVisualization::Charting::DataFormula" />
  <TypeSignature Language="F#" Value="type DataManipulator = class&#xA;    inherit DataFormula" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataVisualization.Charting.DataFormula</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona el método que realiza operaciones de manipulación de datos en tiempo de ejecución. La propiedad <see cref="P:System.Windows.Forms.DataVisualization.Charting.Chart.DataManipulator" /> del objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Chart" /> raíz expone esta clase.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataManipulator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataManipulator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.DataVisualization.Charting.DataManipulator" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExportSeriesValues">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Exporta los datos de una serie o una colección de series al objeto <see cref="T:System.Data.DataSet" /> .</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExportSeriesValues">
      <MemberSignature Language="C#" Value="public System.Data.DataSet ExportSeriesValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet ExportSeriesValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSeriesValues () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ ExportSeriesValues();" />
      <MemberSignature Language="F#" Value="member this.ExportSeriesValues : unit -&gt; System.Data.DataSet" Usage="dataManipulator.ExportSeriesValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exporta los datos para cada serie almacenada en <see cref="T:System.Windows.Forms.DataVisualization.Charting.SeriesCollection" /> al objeto <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Objeto <see cref="T:System.Data.DataSet" /> que contiene los datos de la serie exportados.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportSeriesValues">
      <MemberSignature Language="C#" Value="public System.Data.DataSet ExportSeriesValues (string seriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet ExportSeriesValues(string seriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExportSeriesValues (seriesNames As String) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ ExportSeriesValues(System::String ^ seriesNames);" />
      <MemberSignature Language="F#" Value="member this.ExportSeriesValues : string -&gt; System.Data.DataSet" Usage="dataManipulator.ExportSeriesValues seriesNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="seriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a exportar.</param>
        <summary>Exporta los datos de una o más series al objeto <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Objeto <see cref="T:System.Data.DataSet" /> que contiene los datos de la serie exportados.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportSeriesValues">
      <MemberSignature Language="C#" Value="public System.Data.DataSet ExportSeriesValues (System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet ExportSeriesValues(class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.ExportSeriesValues(System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ ExportSeriesValues(System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.ExportSeriesValues : System.Windows.Forms.DataVisualization.Charting.Series -&gt; System.Data.DataSet" Usage="dataManipulator.ExportSeriesValues series" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="series">Serie que se va a exportar.</param>
        <summary>Exporta los datos de la serie especificada al objeto <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Objeto <see cref="T:System.Data.DataSet" /> que contiene los datos de la serie exportados.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Filtra una o varias series, o filtra el punto de datos de una serie o una colección de series, aplicando una regla de filtrado estándar o una regla de filtrado personalizada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(class System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (filterInterface As IDataPointFilter, inputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::IDataPointFilter ^ filterInterface, System::String ^ inputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.IDataPointFilter * string -&gt; unit" Usage="dataManipulator.Filter (filterInterface, inputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterInterface" Type="System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterInterface">Objeto que implementa la interfaz <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <summary>Realiza el filtrado personalizado de los puntos de datos en una o más series, basándose en los puntos de la primera serie. Los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> filtrados también almacenan los datos modificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(class System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (filterInterface As IDataPointFilter, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::IDataPointFilter ^ filterInterface, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.IDataPointFilter * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (filterInterface, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterInterface" Type="System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="filterInterface">Objeto que implementa la interfaz <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se filtra.</param>
        <summary>Realiza el filtrado personalizado de los puntos de datos en una serie. El objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se filtra también almacena los datos modificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::String ^ inputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * string -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> que determina el método de comparación para la regla de filtrado. Puede ser <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, etc.</param>
        <param name="compareValue">Parte de valor de la regla de filtrado que se aplica a los primeros valores Y de los puntos de datos. Por ejemplo, en la regla de filtrado "&lt;6", 6 es el valor.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <summary>Filtra una o más series aplicando una regla de filtrado al primer valor Y de los puntos de datos en la primera serie. Los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> filtrados se usan para almacenar los datos modificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> que determina el método de comparación para la regla de filtrado. Puede ser <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, etc.</param>
        <param name="compareValue">Parte de valor de la regla de filtrado que se aplica a los primeros valores Y de los puntos de datos. Por ejemplo, en la regla de filtrado "&lt;6", 6 es el valor.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se filtra.</param>
        <summary>Filtra los puntos de datos de una serie aplicando una regla de filtrado al primer valor Y de cada punto de datos. El objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se filtra también almacena los datos modificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (dateRange As DateRangeType, rangeElements As String, inputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::DateRangeType dateRange, System::String ^ rangeElements, System::String ^ inputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.DateRangeType * string * string -&gt; unit" Usage="dataManipulator.Filter (dateRange, rangeElements, inputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateRange" Type="System.Windows.Forms.DataVisualization.Charting.DateRangeType" />
        <Parameter Name="rangeElements" Type="System.String" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateRange">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" /> que representa un intervalo de fecha y hora, como días de la semana, días del mes, etc. Determina el intervalo por el que se filtrarán los elementos definidos.</param>
        <param name="rangeElements">Especifica los elementos del intervalo de fecha y hora indicado por el parámetro <c>dateRange</c> que se van a filtrar. Puede ser un solo valor, por ejemplo "7"; valores separados por comas, por ejemplo "5,6"; un intervalo de valores, como "9-11"; o cualquier variación de los mismos, como "5,6,9-11".</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <summary>Filtra los puntos de datos de una o más series, ya sea quitando los puntos especificados o marcándolos como vacíos para los intervalos de fecha y hora dados. Los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> filtrados se usan para almacenar los datos modificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (dateRange As DateRangeType, rangeElements As String, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::DateRangeType dateRange, System::String ^ rangeElements, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.DateRangeType * string * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (dateRange, rangeElements, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateRange" Type="System.Windows.Forms.DataVisualization.Charting.DateRangeType" />
        <Parameter Name="rangeElements" Type="System.String" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="dateRange">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" /> que representa un intervalo de fecha y hora, como días de la semana, días del mes, etc. Determina el intervalo por el que se filtrarán los elementos definidos.</param>
        <param name="rangeElements">Especifica los elementos del intervalo de fecha y hora indicado por el parámetro <c>dateRange</c> que se van a filtrar. Puede ser un solo valor, por ejemplo "7"; valores separados por comas, por ejemplo "5,6"; un intervalo de valores, como "9-11"; o cualquier variación de los mismos, como "5,6,9-11".</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <summary>Filtra los puntos de datos de una serie, ya sea quitando los puntos especificados o marcándolos como vacíos para los intervalos de fecha y hora especificados. El objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se filtra se usa para almacenar los datos modificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, string inputSeriesNames, string outputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(class System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, string inputSeriesNames, string outputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (filterInterface As IDataPointFilter, inputSeriesNames As String, outputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::IDataPointFilter ^ filterInterface, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.IDataPointFilter * string * string -&gt; unit" Usage="dataManipulator.Filter (filterInterface, inputSeriesNames, outputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterInterface" Type="System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterInterface">Objeto que implementa la interfaz <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <param name="outputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenan los datos filtrados. Asegúrese de que el número de series de salida coincide con el número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <summary>Realiza el filtrado personalizado de los puntos de datos en una o más series, basándose en los puntos de la primera serie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(class System.Windows.Forms.DataVisualization.Charting.IDataPointFilter filterInterface, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.IDataPointFilter,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (filterInterface As IDataPointFilter, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::IDataPointFilter ^ filterInterface, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.IDataPointFilter * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (filterInterface, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterInterface" Type="System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="filterInterface">Objeto que implementa la interfaz <see cref="T:System.Windows.Forms.DataVisualization.Charting.IDataPointFilter" />.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacena los datos filtrados. Si la serie no existe, se iniciará una excepción.</param>
        <summary>Realiza el filtrado personalizado de los puntos de datos en una serie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, string inputSeriesNames, string outputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, string inputSeriesNames, string outputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * string * string -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeriesNames, outputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> que determina el método de comparación para la regla de filtrado. Puede ser <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, etc.</param>
        <param name="compareValue">Parte de valor de la regla de filtrado que se aplica a los primeros valores Y de los puntos de datos. Por ejemplo, en la regla de filtrado "&lt;6", 6 es el valor.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <param name="outputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenan los datos filtrados. El número de series de salida debe coincidir con el número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <summary>Filtra una o más series aplicando una regla de filtrado al primer valor Y de cada uno de los puntos de datos de la primera serie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> que determina el método de comparación para la regla de filtrado. Puede ser <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, etc.</param>
        <param name="compareValue">Parte de valor de la regla de filtrado que se aplica a los primeros valores Y de los puntos de datos. Por ejemplo, en la regla de filtrado "&lt;6", 6 es el valor.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacena los datos filtrados. Si la serie no existe, se iniciará una excepción.</param>
        <summary>Filtra los puntos de datos de una serie aplicando una regla de filtrado al primer valor Y de cada uno de los puntos de datos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, string inputSeriesNames, string outputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, string inputSeriesNames, string outputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (dateRange As DateRangeType, rangeElements As String, inputSeriesNames As String, outputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::DateRangeType dateRange, System::String ^ rangeElements, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.DateRangeType * string * string * string -&gt; unit" Usage="dataManipulator.Filter (dateRange, rangeElements, inputSeriesNames, outputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateRange" Type="System.Windows.Forms.DataVisualization.Charting.DateRangeType" />
        <Parameter Name="rangeElements" Type="System.String" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dateRange">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" /> que representa un intervalo de fecha y hora, como días de la semana, días del mes, etc. Determina el intervalo por el que se filtrarán los elementos definidos.</param>
        <param name="rangeElements">Especifica los elementos del intervalo de fecha y hora indicado por el parámetro <c>dateRange</c> que se van a filtrar. Puede ser un solo valor, por ejemplo "7"; valores separados por comas, por ejemplo "5,6"; un intervalo de valores, como "9-11"; o cualquier variación de los mismos, como "5,6,9-11".</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <param name="outputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenan los datos filtrados. Asegúrese de que el número de series de salida coincide con el número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <summary>Filtra los puntos de datos de una o más series, ya sea quitando los puntos especificados o marcándolos como vacíos para los intervalos de fecha y hora dados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.DateRangeType dateRange, string rangeElements, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.DateRangeType,System.String,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Filter (dateRange As DateRangeType, rangeElements As String, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::DateRangeType dateRange, System::String ^ rangeElements, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.DateRangeType * string * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Filter (dateRange, rangeElements, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateRange" Type="System.Windows.Forms.DataVisualization.Charting.DateRangeType" />
        <Parameter Name="rangeElements" Type="System.String" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="dateRange">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.DateRangeType" /> que representa un intervalo de fecha y hora, como días de la semana, días del mes, etc. Determina el intervalo por el que se filtrarán los elementos definidos.</param>
        <param name="rangeElements">Especifica los elementos del intervalo de fecha y hora indicado por el parámetro <c>dateRange</c> que se van a filtrar. Puede ser un solo valor, por ejemplo "7"; valores separados por comas, por ejemplo "5,6"; un intervalo de valores, como "9-11"; o cualquier variación de los mismos, como "5,6,9-11".</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacena los datos filtrados. Si la serie no existe, se iniciará una excepción.</param>
        <summary>Filtra los puntos de datos de una serie, ya sea quitando los puntos especificados o marcándolos como vacíos para los intervalos de fecha y hora especificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, string inputSeriesNames, string outputSeriesNames, string usingValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, string inputSeriesNames, string outputSeriesNames, string usingValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.String,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames, System::String ^ usingValue);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * string * string * string -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeriesNames, outputSeriesNames, usingValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
        <Parameter Name="usingValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> que determina el método de comparación para la regla de filtrado. Puede ser <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, etc.</param>
        <param name="compareValue">Parte de valor de la regla de filtrado que se aplica a los primeros valores Y de los puntos de datos. Por ejemplo, en la regla de filtrado "&lt;6", 6 es el valor.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <param name="outputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenan los datos filtrados. El número de series de salida debe ser igual que el número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <param name="usingValue">Valor de punto de datos al que se va a aplicar la regla de filtrado. Puede ser X, Y, Y2, Y3, etc.</param>
        <summary>Filtra una o más series aplicando una regla de filtrado a los valores de punto de datos especificados de la primera serie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public void Filter (System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, double compareValue, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Filter(valuetype System.Windows.Forms.DataVisualization.Charting.CompareMethod compareMethod, float64 compareValue, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Filter(System.Windows.Forms.DataVisualization.Charting.CompareMethod,System.Double,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Filter(System::Windows::Forms::DataVisualization::Charting::CompareMethod compareMethod, double compareValue, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries, System::String ^ usingValue);" />
      <MemberSignature Language="F#" Value="member this.Filter : System.Windows.Forms.DataVisualization.Charting.CompareMethod * double * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series * string -&gt; unit" Usage="dataManipulator.Filter (compareMethod, compareValue, inputSeries, outputSeries, usingValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compareMethod" Type="System.Windows.Forms.DataVisualization.Charting.CompareMethod" />
        <Parameter Name="compareValue" Type="System.Double" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="usingValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="compareMethod">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.CompareMethod" /> que determina el método de comparación para la regla de filtrado. Puede ser <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.LessThan" />, <see cref="F:System.Windows.Forms.DataVisualization.Charting.CompareMethod.EqualTo" />, etc.</param>
        <param name="compareValue">Parte de valor de la regla de filtrado que se aplica a los primeros valores Y de los puntos de datos. Por ejemplo, en la regla de filtrado "&lt;6", 6 es el valor.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacena los datos filtrados. Si la serie no existe, se iniciará una excepción.</param>
        <param name="usingValue">Valor de punto de datos al que se va a aplicar la regla de filtrado. Puede ser X, Y, Y2, Y3, etc.</param>
        <summary>Filtra los puntos de datos de una serie aplicando una regla de filtrado a los valores de punto de datos especificados para la comparación.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterMatchedPoints">
      <MemberSignature Language="C#" Value="public bool FilterMatchedPoints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterMatchedPoints" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterMatchedPoints" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterMatchedPoints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FilterMatchedPoints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FilterMatchedPoints : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterMatchedPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina si se filtran los puntos si coinciden con los criterios especificados en argumentos de los métodos <c>Filter</c> de esta clase.</summary>
        <value>Es <see langword="true" /> si se filtran los puntos que coinciden con los criterios especificados; es <see langword="false" /> si se filtran los puntos que no coinciden con los criterios. El valor predeterminado es <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterSetEmptyPoints">
      <MemberSignature Language="C#" Value="public bool FilterSetEmptyPoints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FilterSetEmptyPoints" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterSetEmptyPoints" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterSetEmptyPoints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FilterSetEmptyPoints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FilterSetEmptyPoints : bool with get, set" Usage="System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterSetEmptyPoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una marca que indica si los puntos filtrados por los métodos <c>Filter</c> o <c>FilterTopN</c> se van a quitar o a marcar como vacíos.</summary>
        <value>Es <see langword="true" /> si los puntos filtrados se marcarán como vacíos; es <see langword="false" /> si se quitarán. El valor predeterminado es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilterTopN">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Filtra todos los puntos de datos de una o más series, excepto un número de puntos especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, string inputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, string inputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::String ^ inputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * string -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointCount">Número de puntos de datos que no quitará la operación de filtrado.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <summary>Filtra todos los puntos de datos de una o más series, excepto un número de puntos especificado. Los puntos que no se filtran corresponden a los puntos de la primera serie que tienen los primeros valores Y más grandes. Los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se filtran se usan para almacenar los datos modificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="pointCount">Número de puntos de datos que no quitará la operación de filtrado.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <summary>Filtra todos los puntos de datos de una serie excepto un número de puntos especificado con los primeros valores Y más grandes. El objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se filtra se usa para almacenar los datos modificados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, string inputSeriesNames, string outputSeriesNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, string inputSeriesNames, string outputSeriesNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeriesNames As String, outputSeriesNames As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * string * string -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeriesNames, outputSeriesNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointCount">Número de puntos de datos que no quitará la operación de filtrado.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <param name="outputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenan los datos filtrados. Asegúrese de que el número de series de salida coincide con el número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <summary>Filtra todos los puntos de datos de una o más series, excepto un número de puntos especificado. Los puntos que no se filtran corresponden a los puntos de la primera serie que tienen los primeros valores Y más grandes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="pointCount">Número de puntos de datos que no quitará la operación de filtrado.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacena los datos filtrados. Si la serie no existe, se iniciará una excepción.</param>
        <summary>Filtra todos los puntos de datos de una serie excepto un número de puntos especificado con los primeros valores Y más grandes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeriesNames As String, outputSeriesNames As String, usingValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames, System::String ^ usingValue);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * string * string * string -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeriesNames, outputSeriesNames, usingValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
        <Parameter Name="usingValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointCount">Número de puntos de datos que no quitará la operación de filtrado.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <param name="outputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenan los datos filtrados. Asegúrese de que el número de series de salida coincide con el número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <param name="usingValue">Valor de punto de datos al que se va a aplicar la regla de filtrado. Puede ser X, Y, Y2, Y3, etc.</param>
        <summary>Filtra todos los puntos de datos de una o más series, excepto un número de puntos especificado. Los puntos que no se filtran corresponden a los puntos de la primera serie que tienen los valores más grandes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeries As Series, outputSeries As Series, usingValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries, System::String ^ usingValue);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series * string -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeries, outputSeries, usingValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="usingValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointCount">Número de puntos de datos que no quitará la operación de filtrado.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacena los datos filtrados. Si la serie no existe, se iniciará una excepción.</param>
        <param name="usingValue">Valor de punto de datos al que se va a aplicar la regla de filtrado. Puede ser X, Y, Y2, Y3, etc.</param>
        <summary>Filtra todos los puntos de datos de una serie excepto un número de puntos especificado con los valores más grandes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue, bool getTopValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, string inputSeriesNames, string outputSeriesNames, string usingValue, bool getTopValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeriesNames As String, outputSeriesNames As String, usingValue As String, getTopValues As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::String ^ inputSeriesNames, System::String ^ outputSeriesNames, System::String ^ usingValue, bool getTopValues);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * string * string * string * bool -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeriesNames, outputSeriesNames, usingValue, getTopValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeriesNames" Type="System.String" />
        <Parameter Name="outputSeriesNames" Type="System.String" />
        <Parameter Name="usingValue" Type="System.String" />
        <Parameter Name="getTopValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pointCount">Número de puntos de datos que no quitará la operación de filtrado.</param>
        <param name="inputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a filtrar.</param>
        <param name="outputSeriesNames">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenan los datos filtrados. Asegúrese de que el número de series de salida coincide con el número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <param name="usingValue">Valor de punto de datos al que se va a aplicar la regla de filtrado. Puede ser X, Y, Y2, Y3, etc.</param>
        <param name="getTopValues">Es <see langword="true" /> si se conservan los valores más grandes; es <see langword="false" /> si se conservan los valores más pequeños.</param>
        <summary>Filtra todos los puntos de datos de una o más series, excepto un número de puntos especificado. Los puntos que no se filtran corresponden a los puntos de la primera serie de entrada que tienen los valores más grandes o más pequeños.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTopN">
      <MemberSignature Language="C#" Value="public void FilterTopN (int pointCount, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue, bool getTopValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void FilterTopN(int32 pointCount, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries, string usingValue, bool getTopValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.FilterTopN(System.Int32,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilterTopN (pointCount As Integer, inputSeries As Series, outputSeries As Series, usingValue As String, getTopValues As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void FilterTopN(int pointCount, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries, System::String ^ usingValue, bool getTopValues);" />
      <MemberSignature Language="F#" Value="member this.FilterTopN : int * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series * string * bool -&gt; unit" Usage="dataManipulator.FilterTopN (pointCount, inputSeries, outputSeries, usingValue, getTopValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointCount" Type="System.Int32" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="usingValue" Type="System.String" />
        <Parameter Name="getTopValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pointCount">Número de puntos de datos que no quitará la operación de filtrado.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a filtrar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacena los datos filtrados. Si la serie no existe, se iniciará una excepción.</param>
        <param name="usingValue">Valor de punto de datos al que se va a aplicar la regla de filtrado. Puede ser X, Y, Y2, Y3, etc.</param>
        <param name="getTopValues">Es <see langword="true" /> si se conservan los valores más grandes; es <see langword="false" /> si se conservan los valores más pequeños.</param>
        <summary>Filtra todos los puntos de datos de una serie excepto un número de puntos especificado con los valores más pequeños o más grandes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Group">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrupa puntos de datos de una o más series usando una o más fórmulas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::String ^ inputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, inputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="inputSeriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a agrupar.</param>
        <summary>Agrupa puntos de datos de una o más series usando una o más fórmulas. Las series se borran de los datos originales y se usan para almacenar los nuevos puntos de datos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a agrupar.</param>
        <summary>Agrupa puntos de datos de una serie usando una o más fórmulas. La serie que se agrupa se borra de sus datos originales y se usa para almacenar los nuevos puntos de datos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string inputSeriesName, string outputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string inputSeriesName, string outputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::String ^ inputSeriesName, System::String ^ outputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string * string -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, inputSeriesName, outputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeriesName" Type="System.String" />
        <Parameter Name="outputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="inputSeriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a agrupar.</param>
        <param name="outputSeriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenarán los puntos de datos agrupados. Si una serie no existe, se creará; si existe, se borrarán de ella primero todos los datos antes de almacenar los puntos de datos agrupados. El número de series de salida debe ser igual al número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <summary>Agrupa puntos de datos de una o más series usando una o más fórmulas. Se usan series de salida para almacenar los puntos de datos agrupados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a agrupar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenará los nuevos puntos de datos creados por la operación de agrupación. Si no existe, se iniciará una excepción.</param>
        <summary>Agrupa puntos de datos de una serie usando una o más fórmulas. Se usa una serie de salida para almacenar los puntos de datos agrupados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::String ^ inputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, intervalOffset, intervalOffsetType, inputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="intervalOffset">Tamaño de desplazamiento del intervalo.</param>
        <param name="intervalOffsetType">Unidad de medida para el desplazamiento del intervalo.</param>
        <param name="inputSeriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a agrupar.</param>
        <summary>Agrupa puntos de datos de una o más series usando una o más fórmulas. Las series se borran de los datos originales y se usan para almacenar los nuevos puntos de datos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, intervalOffset, intervalOffsetType, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="intervalOffset">Tamaño de desplazamiento del intervalo.</param>
        <param name="intervalOffsetType">Unidad de medida para el desplazamiento del intervalo.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a agrupar.</param>
        <summary>Agrupa puntos de datos de una serie usando una o más fórmulas. La serie que se agrupa se borra de sus datos originales y se usa para almacenar los nuevos puntos de datos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string inputSeriesName, string outputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string inputSeriesName, string outputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::String ^ inputSeriesName, System::String ^ outputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string * string -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, intervalOffset, intervalOffsetType, inputSeriesName, outputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeriesName" Type="System.String" />
        <Parameter Name="outputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="intervalOffset">Tamaño de desplazamiento del intervalo.</param>
        <param name="intervalOffsetType">Unidad de medida para el desplazamiento del intervalo.</param>
        <param name="inputSeriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a agrupar.</param>
        <param name="outputSeriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenarán los puntos de datos agrupados. Si una serie no existe, se creará; si existe, se borrarán de ella primero todos los datos antes de almacenar los puntos de datos agrupados. El número de series de salida debe ser igual al número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <summary>Agrupa puntos de datos de una o más series usando una o más fórmulas. Se usan series de salida para almacenar los puntos de datos agrupados y se puede usar un desplazamiento para los intervalos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public void Group (string formula, double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Group(string formula, float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Group(System.String,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Group(System::String ^ formula, double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.Group : string * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Group (formula, interval, intervalType, intervalOffset, intervalOffsetType, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="intervalOffset">Tamaño de desplazamiento del intervalo.</param>
        <param name="intervalOffsetType">Unidad de medida para el desplazamiento del intervalo.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a agrupar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenará los nuevos puntos de datos creados por la operación de agrupación. Si no existe, se iniciará una excepción.</param>
        <summary>Agrupa puntos de datos de una serie usando una o más fórmulas. Se usa una serie de salida para almacenar los puntos de datos agrupados y se puede usar un desplazamiento para los intervalos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupByAxisLabel">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrupa los puntos de datos de una o más series por etiquetas de eje usando una o más fórmulas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupByAxisLabel">
      <MemberSignature Language="C#" Value="public void GroupByAxisLabel (string formula, string inputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GroupByAxisLabel(string formula, string inputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GroupByAxisLabel (formula As String, inputSeriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GroupByAxisLabel(System::String ^ formula, System::String ^ inputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.GroupByAxisLabel : string * string -&gt; unit" Usage="dataManipulator.GroupByAxisLabel (formula, inputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="inputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="inputSeriesName">Lista separada por comas de nombres del objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> de entrada.</param>
        <summary>Agrupa los puntos de datos de una o más series por etiquetas de eje usando una o más fórmulas. Se borran los valores de punto de datos originales y, a continuación, cada una de las series almacena sus nuevos puntos de datos agrupados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByAxisLabel">
      <MemberSignature Language="C#" Value="public void GroupByAxisLabel (string formula, System.Windows.Forms.DataVisualization.Charting.Series inputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GroupByAxisLabel(string formula, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GroupByAxisLabel (formula As String, inputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GroupByAxisLabel(System::String ^ formula, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries);" />
      <MemberSignature Language="F#" Value="member this.GroupByAxisLabel : string * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.GroupByAxisLabel (formula, inputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> de entrada.</param>
        <summary>Agrupa puntos de datos de una serie por etiquetas de eje usando una o más fórmulas. Se borran los valores de punto de datos originales y, a continuación, la serie almacena los nuevos puntos de datos agrupados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByAxisLabel">
      <MemberSignature Language="C#" Value="public void GroupByAxisLabel (string formula, string inputSeriesName, string outputSeriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GroupByAxisLabel(string formula, string inputSeriesName, string outputSeriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GroupByAxisLabel (formula As String, inputSeriesName As String, outputSeriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GroupByAxisLabel(System::String ^ formula, System::String ^ inputSeriesName, System::String ^ outputSeriesName);" />
      <MemberSignature Language="F#" Value="member this.GroupByAxisLabel : string * string * string -&gt; unit" Usage="dataManipulator.GroupByAxisLabel (formula, inputSeriesName, outputSeriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="inputSeriesName" Type="System.String" />
        <Parameter Name="outputSeriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="inputSeriesName">Lista separada por comas de nombres del objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> de entrada.</param>
        <param name="outputSeriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenarán los puntos de datos agrupados. Si una serie no existe, se creará; si existe, se borrarán de ella primero todos los datos antes de almacenar los puntos de datos agrupados. El número de series de salida debe ser igual al número de series de entrada; de lo contrario se iniciará una excepción.</param>
        <summary>Agrupa los puntos de datos de una o más series por etiquetas de eje usando una o más fórmulas. Se usan series de salida para almacenar los puntos de datos agrupados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByAxisLabel">
      <MemberSignature Language="C#" Value="public void GroupByAxisLabel (string formula, System.Windows.Forms.DataVisualization.Charting.Series inputSeries, System.Windows.Forms.DataVisualization.Charting.Series outputSeries);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GroupByAxisLabel(string formula, class System.Windows.Forms.DataVisualization.Charting.Series inputSeries, class System.Windows.Forms.DataVisualization.Charting.Series outputSeries) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.GroupByAxisLabel(System.String,System.Windows.Forms.DataVisualization.Charting.Series,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GroupByAxisLabel (formula As String, inputSeries As Series, outputSeries As Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GroupByAxisLabel(System::String ^ formula, System::Windows::Forms::DataVisualization::Charting::Series ^ inputSeries, System::Windows::Forms::DataVisualization::Charting::Series ^ outputSeries);" />
      <MemberSignature Language="F#" Value="member this.GroupByAxisLabel : string * System.Windows.Forms.DataVisualization.Charting.Series * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.GroupByAxisLabel (formula, inputSeries, outputSeries)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formula" Type="System.String" />
        <Parameter Name="inputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
        <Parameter Name="outputSeries" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="formula">Lista separada por comas de una o más fórmulas que se van a usar para calcular los valores de punto de datos agrupados.</param>
        <param name="inputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> de entrada que se va a agrupar.</param>
        <param name="outputSeries">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que almacenará los nuevos puntos de datos creados por la operación de agrupación. Si no existe, se iniciará una excepción.</param>
        <summary>Agrupa puntos de datos de una serie por etiquetas de eje usando una o más fórmulas. Se usa una serie de salida para almacenar los puntos de datos agrupados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InsertEmptyPoints">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Reemplaza los puntos de datos que faltan en una serie o colección de series por puntos vacíos.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="seriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a comprobar.</param>
        <summary>Reemplaza los puntos de datos que faltan en una o más series con puntos vacíos. En cada serie se comprueba si hay un intervalo definido, que viene determinado por los argumentos <paramref name="interval" /> e <paramref name="intervalType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="series">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se comprueba.</param>
        <summary>Reemplaza los puntos de datos que faltan en una serie con puntos vacíos. En cada serie se comprueba si hay un intervalo definido, que viene determinado por los argumentos <paramref name="interval" /> e <paramref name="intervalType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * string -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, intervalOffset, intervalOffsetType, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="intervalOffset">Tamaño de desplazamiento del intervalo.</param>
        <param name="intervalOffsetType">Unidad de medida para el desplazamiento del intervalo.</param>
        <param name="seriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a comprobar.</param>
        <summary>Reemplaza los puntos de datos que faltan en una o más series con puntos vacíos. En cada serie se comprueba si hay un intervalo definido, que viene determinado por los argumentos <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> e <paramref name="intervalType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, intervalOffset, intervalOffsetType, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="intervalOffset">Tamaño de desplazamiento del intervalo.</param>
        <param name="intervalOffsetType">Unidad de medida para el desplazamiento del intervalo.</param>
        <param name="series">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> en el que se van a insertar los puntos vacíos.</param>
        <summary>Reemplaza los puntos de datos que faltan en una serie con puntos vacíos. En cada serie se comprueba si hay un intervalo definido, que viene determinado por los argumentos <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> e <paramref name="intervalType" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, double fromXValue, double toXValue, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, float64 fromXValue, float64 toXValue, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Double,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, double fromXValue, double toXValue, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * double * string -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, intervalOffset, intervalOffsetType, fromXValue, toXValue, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="fromXValue" Type="System.Double" />
        <Parameter Name="toXValue" Type="System.Double" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="intervalOffset">Tamaño de desplazamiento del intervalo.</param>
        <param name="intervalOffsetType">Unidad de medida para el desplazamiento del intervalo.</param>
        <param name="fromXValue">Punto inicial del intervalo de la serie que se va a comprobar. Usa los valores X de los puntos de datos.</param>
        <param name="toXValue">Punto final del intervalo de la serie que se va a comprobar. Usa los valores X de los puntos de datos.</param>
        <param name="seriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a comprobar.</param>
        <summary>Reemplaza los puntos de datos que faltan en una o más series con puntos vacíos. En cada serie se comprueba si hay un intervalo definido, que viene determinado por los argumentos <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> e <paramref name="intervalType" />. El intervalo de la serie que se comprueba viene determinado por los argumentos <paramref name="toXValue" /> y <paramref name="fromXValue" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertEmptyPoints">
      <MemberSignature Language="C#" Value="public void InsertEmptyPoints (double interval, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, double intervalOffset, System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, double fromXValue, double toXValue, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEmptyPoints(float64 interval, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalType, float64 intervalOffset, valuetype System.Windows.Forms.DataVisualization.Charting.IntervalType intervalOffsetType, float64 fromXValue, float64 toXValue, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.InsertEmptyPoints(System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Windows.Forms.DataVisualization.Charting.IntervalType,System.Double,System.Double,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEmptyPoints(double interval, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalType, double intervalOffset, System::Windows::Forms::DataVisualization::Charting::IntervalType intervalOffsetType, double fromXValue, double toXValue, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.InsertEmptyPoints : double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * System.Windows.Forms.DataVisualization.Charting.IntervalType * double * double * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.InsertEmptyPoints (interval, intervalType, intervalOffset, intervalOffsetType, fromXValue, toXValue, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="intervalType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="intervalOffset" Type="System.Double" />
        <Parameter Name="intervalOffsetType" Type="System.Windows.Forms.DataVisualization.Charting.IntervalType" />
        <Parameter Name="fromXValue" Type="System.Double" />
        <Parameter Name="toXValue" Type="System.Double" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="interval">Tamaño del intervalo en el que se ha comprobado si faltan puntos de datos.</param>
        <param name="intervalType">Unidad de medida del parámetro <c>interval</c>.</param>
        <param name="intervalOffset">Tamaño de desplazamiento del intervalo.</param>
        <param name="intervalOffsetType">Unidad de medida para el desplazamiento del intervalo.</param>
        <param name="fromXValue">Punto inicial del intervalo de la serie que se va a comprobar. Usa los valores X de los puntos de datos.</param>
        <param name="toXValue">Punto final del intervalo de la serie que se va a comprobar. Usa los valores X de los puntos de datos.</param>
        <param name="series">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> en el que se van a insertar los puntos vacíos.</param>
        <summary>Reemplaza los puntos de datos que faltan en una serie con puntos vacíos. En cada serie se comprueba si hay un intervalo definido, que viene determinado por los argumentos <paramref name="interval" />, <paramref name="intervalOffset" />, <paramref name="intervalOffsetType" /> e <paramref name="intervalType" />. El intervalo de la serie que se comprueba viene determinado por los argumentos <paramref name="toXValue" /> y <paramref name="fromXValue" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Realiza una ordenación personalizada de los puntos de datos de una o más series.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; comparer, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;class System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; comparer, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Collections.Generic.IComparer{System.Windows.Forms.DataVisualization.Charting.DataPoint},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of DataPoint), seriesName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;System::Windows::Forms::DataVisualization::Charting::DataPoint ^&gt; ^ comparer, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; * string -&gt; unit" Usage="dataManipulator.Sort (comparer, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt;" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="comparer">Objeto que implementa la interfaz <see cref="T:System.Collections.IComparer" /> y proporciona la lógica de ordenación personalizada.</param>
        <param name="seriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a ordenar.</param>
        <summary>Realiza una ordenación personalizada de los puntos de datos de una o más series.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método realiza a una ordenación personalizada en los puntos de datos en una o más series; la lógica de ordenación se define mediante el `comparer` parámetro. Invalide e implemente el <xref:System.Collections.IComparer.Compare%2A> método de la <xref:System.Collections.IComparer> de interfaz, realice las comparaciones y, a continuación, devolver `true` o `false`. El orden es determinado por el valor devuelto.  
  
 Tenga en cuenta que si se ordenan varias series, las series deben estar alineadas, en caso contrario, se producirá una excepción.  
  
 Los dos parámetros de objeto del <xref:System.Collections.IComparer.Compare%2A> método siempre debe ser de tipo <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint>.  
  
> [!IMPORTANT]
>  Todos los puntos de datos, independientemente de las series que pertenecen, se ordenan según la primera serie; Si cambia la posición de un punto de datos en la primera serie, todos los puntos de la otra serie correspondientes cambian.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; comparer, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;class System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; comparer, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Collections.Generic.IComparer{System.Windows.Forms.DataVisualization.Charting.DataPoint},System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;System::Windows::Forms::DataVisualization::Charting::DataPoint ^&gt; ^ comparer, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt; * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Sort (comparer, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;System.Windows.Forms.DataVisualization.Charting.DataPoint&gt;" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="comparer">Objeto que implementa la interfaz <see cref="T:System.Collections.IComparer" /> y proporciona la lógica de ordenación personalizada.</param>
        <param name="series">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a ordenar.</param>
        <summary>Realiza una ordenación personalizada de los puntos de datos de una serie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método realiza a una ordenación personalizada en los puntos de datos en una serie; la lógica de ordenación se define mediante el `comparer` parámetro. Invalide e implemente el <xref:System.Collections.IComparer.Compare%2A> método de la <xref:System.Collections.IComparer> de interfaz, realice las comparaciones y, a continuación, devolver `true` o `false`. El orden es determinado por el valor devuelto.  
  
 Los dos parámetros de objeto del <xref:System.Collections.IComparer.Compare%2A> método siempre debe ser de tipo <xref:System.Windows.Forms.DataVisualization.Charting.DataPoint>.  
  
 Para realizar una ordenación personalizada de más de una serie por cada llamada de función, utilice la <xref:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(valuetype System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Windows::Forms::DataVisualization::Charting::PointSortOrder pointSortOrder, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Windows.Forms.DataVisualization.Charting.PointSortOrder * string -&gt; unit" Usage="dataManipulator.Sort (pointSortOrder, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointSortOrder" Type="System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointSortOrder">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> que determina si el orden es ascendente o descendente.</param>
        <param name="seriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a ordenar.</param>
        <summary>Realiza una ordenación de los puntos de datos de una o más series usando el orden especificado. La ordenación se basa en el primer valor Y de cada uno de los puntos de datos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(valuetype System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Windows::Forms::DataVisualization::Charting::PointSortOrder pointSortOrder, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Windows.Forms.DataVisualization.Charting.PointSortOrder * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Sort (pointSortOrder, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointSortOrder" Type="System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="pointSortOrder">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> que determina si el orden es ascendente o descendente.</param>
        <param name="series">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a ordenar.</param>
        <summary>Realiza una ordenación de los puntos de datos de una serie usando el orden especificado. La ordenación se basa en el primer valor Y de cada uno de los puntos de datos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string sortBy, string seriesName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(valuetype System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string sortBy, string seriesName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Windows::Forms::DataVisualization::Charting::PointSortOrder pointSortOrder, System::String ^ sortBy, System::String ^ seriesName);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Windows.Forms.DataVisualization.Charting.PointSortOrder * string * string -&gt; unit" Usage="dataManipulator.Sort (pointSortOrder, sortBy, seriesName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointSortOrder" Type="System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />
        <Parameter Name="sortBy" Type="System.String" />
        <Parameter Name="seriesName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pointSortOrder">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> que determina si el orden es ascendente o descendente.</param>
        <param name="sortBy">Valor <see langword="string" /> que representa los valores de punto de datos que se van a ordenar. Los valores posibles son: "X", "Y", "Y2", "Y3", "AxisLabel", etc.</param>
        <param name="seriesName">Lista separada por comas de nombres de los objetos <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se van a ordenar.</param>
        <summary>Realiza una ordenación de los puntos de datos de una o más series usando el orden especificado. La ordenación se puede basar en cualquier valor de punto de datos disponible.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método realiza en orden ascendente o descendente en datos puntos en una serie y se basa en el valor que se establece en el `sortBy` parámetro como "X", "Etiqueta de ejes", "Y", "Y1" y así sucesivamente.  
  
 Tenga en cuenta que si se ordenan varias series, las series deben estar alineadas, en caso contrario, se producirá una excepción.  
  
> [!IMPORTANT]
>  Todas las series se ordenarán utilizando el valor Y de la primera serie enumerada; es decir, todos los puntos de datos, independientemente de las series que pertenecen, se ordenan según la primera serie.  
  
 Para ordenar puntos mediante una rutina de ordenación personalizada, utilice una definición diferente de este método sobrecargado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string sortBy, System.Windows.Forms.DataVisualization.Charting.Series series);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(valuetype System.Windows.Forms.DataVisualization.Charting.PointSortOrder pointSortOrder, string sortBy, class System.Windows.Forms.DataVisualization.Charting.Series series) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataVisualization.Charting.DataManipulator.Sort(System.Windows.Forms.DataVisualization.Charting.PointSortOrder,System.String,System.Windows.Forms.DataVisualization.Charting.Series)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Windows::Forms::DataVisualization::Charting::PointSortOrder pointSortOrder, System::String ^ sortBy, System::Windows::Forms::DataVisualization::Charting::Series ^ series);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Windows.Forms.DataVisualization.Charting.PointSortOrder * string * System.Windows.Forms.DataVisualization.Charting.Series -&gt; unit" Usage="dataManipulator.Sort (pointSortOrder, sortBy, series)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.DataVisualization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointSortOrder" Type="System.Windows.Forms.DataVisualization.Charting.PointSortOrder" />
        <Parameter Name="sortBy" Type="System.String" />
        <Parameter Name="series" Type="System.Windows.Forms.DataVisualization.Charting.Series" />
      </Parameters>
      <Docs>
        <param name="pointSortOrder">Un valor de enumeración <see cref="T:System.Windows.Forms.DataVisualization.Charting.PointSortOrder" /> que determina si el orden es ascendente o descendente.</param>
        <param name="sortBy">Valor <see langword="string" /> que representa los valores de punto de datos que se van a ordenar. Los valores posibles son: "X", "Y", "Y2", "Y3", "AxisLabel", etc.</param>
        <param name="series">Objeto <see cref="T:System.Windows.Forms.DataVisualization.Charting.Series" /> que se va a ordenar.</param>
        <summary>Realiza una ordenación de los puntos de datos de una serie usando el orden especificado. La ordenación se puede basar en cualquier valor de punto de datos disponible.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>