<Type Name="PingReply" FullName="System.Net.NetworkInformation.PingReply">
  <Metadata><Meta Name="ms.openlocfilehash" Value="02658955cbcea15b85a8fddda92f34a0084c05ea" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39987625" /></Metadata><TypeSignature Language="C#" Value="public class PingReply" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PingReply extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PingReply" />
  <TypeSignature Language="VB.NET" Value="Public Class PingReply" />
  <TypeSignature Language="C++ CLI" Value="public ref class PingReply" />
  <TypeSignature Language="F#" Value="type PingReply = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona información sobre el estado y los datos resultantes de una operación <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> o <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Net.NetworkInformation.Ping> clase intenta enviar una solicitud de eco del protocolo de mensajes de Control de Internet (ICMP) a un equipo remoto y recibir información desde el equipo a través de un mensaje de respuesta de eco ICMP. El <xref:System.Net.NetworkInformation.Ping> clase utiliza instancias de la <xref:System.Net.NetworkInformation.PingReply> clase para devolver información sobre la operación, como su estado y el tiempo dedicado a enviar la solicitud y recibir la respuesta.  
  
 El <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos devuelven instancias de la <xref:System.Net.NetworkInformation.PingReply> directamente la clase. El <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos devuelven un <xref:System.Net.NetworkInformation.PingReply> en el <xref:System.Net.NetworkInformation.PingCompletedEventHandler> del método <xref:System.Net.NetworkInformation.PingCompletedEventArgs> parámetro. El <xref:System.Net.NetworkInformation.PingReply> se accede a través del <xref:System.Net.NetworkInformation.PingCompletedEventArgs.Reply%2A> propiedad.  
  
 Si el valor de <xref:System.Net.NetworkInformation.PingReply.Status%2A> no <xref:System.Net.NetworkInformation.IPStatus.Success>, no debe usar los valores devueltos por la <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> o <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propiedades. El <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> propiedad devolverá cero, el <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propiedad devolverá una matriz vacía y el <xref:System.Net.NetworkInformation.PingReply.Options%2A> propiedad devolverá `null`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.Net.NetworkInformation.Ping> clase para enviar una solicitud de eco ICMP de forma sincrónica y mostrar la respuesta.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Address">
      <MemberSignature Language="C#" Value="public System.Net.IPAddress Address { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPAddress Address" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Address" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Address As IPAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPAddress ^ Address { System::Net::IPAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Address : System.Net.IPAddress" Usage="System.Net.NetworkInformation.PingReply.Address" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.IPAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la dirección del host que envía el mensaje de respuesta de eco ICPM (Protocolo de mensajes de control de Internet).</summary>
        <value>Un objeto <see cref="T:System.Net.IPAddress" /> que contiene el destino para el mensaje de eco ICMP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.NetworkInformation.PingReply.Address%2A> devueltos por cualquiera de los <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecargas pueden originarse en un equipo remoto malintencionado. No se conectan al equipo remoto mediante esta dirección. Usar DNS para determinar la dirección IP de la máquina a la que desea conectarse.  
  
   
  
## Examples  
 El siguiente ejemplo de código envía una solicitud de eco ICMP de forma sincrónica y muestra el valor de esta propiedad.  
  
 [!code-cpp[NclPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NclPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Buffer As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Buffer { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Buffer : byte[]" Usage="System.Net.NetworkInformation.PingReply.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el búfer de datos recibidos en un mensaje de respuesta de eco ICMP (Protocolo de mensajes de control de Internet).</summary>
        <value>Una matriz <see cref="T:System.Byte" /> que contiene los datos recibidos en un mensaje de respuesta de eco ICMP, o una matriz vacía si no se obtiene respuesta.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El búfer de datos que se envían con la solicitud de eco ICMP se devuelve al remitente en la respuesta de eco para que se puede calcular el tiempo de viaje de ida y vuelta para un paquete de un tamaño conocido. El búfer de datos, combinado con el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> opción, se puede usar para detectar la unidad de transmisión máxima para la ruta de acceso de red entre los equipos de origen y destino. Para obtener más información, vea "Traceroute" en RFC 1574, sección 3.2, disponible en [ https://www.ietf.org ](https://www.ietf.org).  
  
 El búfer predeterminado utilizado con <xref:System.Net.NetworkInformation.Ping.Send%2A> y <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> contiene 32 bytes de datos.  
  
   
  
## Examples  
 El siguiente ejemplo de código envía una solicitud de eco ICMP de forma sincrónica y muestra el tamaño del búfer devuelto por esta propiedad.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkInformation.PingOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As PingOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::PingOptions ^ Options { System::Net::NetworkInformation::PingOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Net.NetworkInformation.PingOptions" Usage="System.Net.NetworkInformation.PingReply.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene las opciones utilizadas para transmitir la respuesta a un mensaje de solicitud de eco ICPM (Protocolo de mensajes de control de Internet).</summary>
        <value>Un objeto <see cref="T:System.Net.NetworkInformation.PingOptions" /> que contiene el Período de vida (TTL) y la directiva de fragmentación que se utilizan para transmitir la respuesta si <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> es <see cref="F:System.Net.NetworkInformation.IPStatus.Success" />; de lo contrario, <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de TTL define el número de veces que los nodos pueden reenviar un paquete que se desplaza entre su origen y destino. Si el número de reenvíos, también denominados saltos, supera el valor especificado para el TTL, el paquete se considera no entregable y se descarta.  
  
 El <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> valor especificado en la fragmentación de paquetes ICMP echo solicitud controles. Si <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño del paquete supera la unidad de transmisión máxima de la ruta de acceso de red realizada por el paquete, el paquete se descarta y el <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig> se devuelve el error.  
  
   
  
## Examples  
 El siguiente ejemplo de código envía una solicitud de eco ICMP de forma sincrónica y muestra los valores almacenados en el <xref:System.Net.NetworkInformation.PingOptions> objeto devuelto por esta propiedad.  
  
 [!code-cpp[NclPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NclPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoundtripTime">
      <MemberSignature Language="C#" Value="public long RoundtripTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 RoundtripTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoundtripTime As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long RoundtripTime { long get(); };" />
      <MemberSignature Language="F#" Value="member this.RoundtripTime : int64" Usage="System.Net.NetworkInformation.PingReply.RoundtripTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de milisegundos empleados en enviar una solicitud de eco del Protocolo de mensajes de control de Internet (ICMP) y recibir el mensaje de respuesta de eco ICMP correspondiente.</summary>
        <value><see cref="T:System.Int64" /> que especifica el tiempo de ida y vuelta en milisegundos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si se produce un error en la solicitud de eco, la <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> tiempo se notifica como 0, que también es un valor válido cuando la solicitud se realiza correctamente. Debe comprobar el <xref:System.Net.NetworkInformation.PingReply.Status%2A> para determinar si se debe omitir el valor devuelto por esta propiedad.  
  
   
  
## Examples  
 El siguiente ejemplo de código envía una solicitud de eco ICMP de forma sincrónica y muestra el tamaño del búfer devuelto por esta propiedad.  
  
 [!code-cpp[NclPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NclPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.IPStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.NetworkInformation.IPStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.PingReply.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As IPStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::NetworkInformation::IPStatus Status { System::Net::NetworkInformation::IPStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Net.NetworkInformation.IPStatus" Usage="System.Net.NetworkInformation.PingReply.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.IPStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el estado de un intento de envío de un mensaje de solicitud de eco ICMP (Protocolo de mensajes de control de Internet) y la recepción del mensaje de respuesta de eco ICMP correspondiente.</summary>
        <value>Un valor de <see cref="T:System.Net.NetworkInformation.IPStatus" /> que indica el resultado de la solicitud.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el valor de <xref:System.Net.NetworkInformation.PingReply.Status%2A> no <xref:System.Net.NetworkInformation.IPStatus.Success>, no debe usar los valores devueltos por la <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A>, <xref:System.Net.NetworkInformation.PingReply.Options%2A> o <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propiedades. El <xref:System.Net.NetworkInformation.PingReply.RoundtripTime%2A> y <xref:System.Net.NetworkInformation.PingReply.Buffer%2A> propiedades devolverá cero y el <xref:System.Net.NetworkInformation.PingReply.Options%2A> propiedad devolverá `null`.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar <xref:System.Net.NetworkInformation.Ping> clase para enviar una solicitud de eco ICMP de forma sincrónica y mostrar la respuesta.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>