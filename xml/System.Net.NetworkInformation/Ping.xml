<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7614e0ddbe0d0018c7f7a83135b6f1772bb89384" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57928534" /></Metadata><TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Permite que una aplicación determine si un equipo remoto está accesible a través de la red.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las aplicaciones utilizan la <xref:System.Net.NetworkInformation.Ping> clase para detectar si un equipo remoto es accesible.  
  
 Topología de red puede determinar si <xref:System.Net.NetworkInformation.Ping> ponerse en contacto con un host remoto. Pueden evitar que la presencia y la configuración de los servidores proxy, del equipo de red dirección translation (NAT) o firewalls <xref:System.Net.NetworkInformation.Ping> pueda realizarse correctamente. Una correcta <xref:System.Net.NetworkInformation.Ping> solo indica que el servidor remoto se puede alcanzar el host en la red; no se garantiza la presencia de servicios de nivel superior (por ejemplo, un servidor Web) en el host remoto.  
  
 Esta clase proporciona una funcionalidad similar a la herramienta de línea de comandos Ping.exe. El <xref:System.Net.NetworkInformation.Ping.Send%2A> y <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos envían un mensaje de solicitud de eco de protocolo de mensajes de Control de Internet (ICMP) a un equipo remoto y espera un mensaje de respuesta de eco ICMP de ese equipo. Para obtener una descripción detallada de los mensajes de ICMP, consulte RFC 792, disponible en [ https://www.ietf.org ](https://www.ietf.org/).  
  
 Los tipos siguientes se utilizan con el <xref:System.Net.NetworkInformation.Ping> clase y se describen en detalle a continuación.  
  
|**Nombre de tipo**|**Descripción**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|Define códigos de estado que describen el resultado de un mensaje de solicitud de eco ICMP.|  
|<xref:System.Net.NetworkInformation.PingOptions>|Permite configurar o recuperar la configuración que controla el número de veces que el paquete de solicitud se puede reenviar (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>), y si puede fragmentarse (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> ).|  
|<xref:System.Net.NetworkInformation.PingReply>|Contiene los resultados de una solicitud de eco ICMP.|  
|<xref:System.Net.NetworkInformation.PingException>|Se produce si se produce un error irrecuperable.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|Contiene los datos asociados con <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos, que son se genera cuando un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamada finaliza o se cancela.|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|El delegado que proporciona el método de devolución de llamada invoca cuando un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamada finaliza o se cancela.|  
  
 El <xref:System.Net.NetworkInformation.Ping.Send%2A> y <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos devuelven la respuesta en un <xref:System.Net.NetworkInformation.PingReply> objeto. El <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType> propiedad devuelve un <xref:System.Net.NetworkInformation.IPStatus> valor para indicar el resultado de la solicitud.  
  
 Al enviar la solicitud, debe especificar el equipo remoto. Puede hacer esto proporcionando una dirección IP en formato de cadena, cadena de nombre de un host o un <xref:System.Net.IPAddress> objeto.  
  
 También puede especificar cualquiera de los siguientes tipos de información:  
  
-   Datos que se va a acompañar a la solicitud. Especificar `buffer` permite conocer la cantidad de tiempo necesario para un paquete de un tamaño determinado para el viaje hacia y desde el host remoto y la unidad de transmisión máxima de la ruta de acceso de red. (Consulte la <xref:System.Net.NetworkInformation.Ping.Send%2A> o <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecargas que toman un `buffer` parámetro.)  
  
-   Si el paquete de eco ICMP se puede fragmentar en tránsito. (Consulte la <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad y el <xref:System.Net.NetworkInformation.Ping.Send%2A> o <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecargas que toman un `options` parámetro.)  
  
-   Número de veces que los nodos de enrutamientos, como enrutadores o puertas de enlace, puede reenviar el paquete antes de que llegue al equipo de destino o se descarta. (Consulte <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> y <xref:System.Net.NetworkInformation.Ping.Send%2A> o <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecargas que toman un `options` parámetro.)  
  
-   El límite de tiempo dentro del cual se debe recibir la respuesta. (Consulte la <xref:System.Net.NetworkInformation.Ping.Send%2A> o <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecargas que toman un `timeout` parámetro.  
  
 La <xref:System.Net.NetworkInformation.Ping> clase ofrece métodos sincrónicos y asincrónicos para enviar la solicitud. Si la aplicación debe bloquearse mientras espera una respuesta, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos. Si la aplicación no debe bloquearse, utilizar el asincrónico <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos. Una llamada a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> se ejecuta en su propio subproceso que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Las aplicaciones utilizan un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado para especificar el método que se llama para <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
 No se puede usar la misma instancia de la <xref:System.Net.NetworkInformation.Ping> clase para generar varias solicitudes simultáneas de eco ICMP. Una llamada a <xref:System.Net.NetworkInformation.Ping.Send%2A> mientras un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamada está en curso o llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> varias veces antes de que todas las llamadas anteriores finalicen, se produce un <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Net.NetworkInformation.Ping> clase sincrónicamente.  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Net.NetworkInformation.Ping> clase de forma asincrónica.  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/how-to-ping-a-host.md">Cómo: hacer ping a un Host</related>
    <related type="Article" href="~/docs/framework/network-programming/index.md">Programación para redes en .NET Framework</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">Ejemplos de programación de red</related>
    <related type="Article" href="~/docs/framework/network-programming/networkinformation.md">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.NetworkInformation.Ping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente se muestra cómo crear un <xref:System.Net.NetworkInformation.Ping> instancia. El ejemplo completo está disponible en el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar los recursos administrados y no administrados; es <see langword="false" /> para liberar sólo los recursos no administrados.</param>
        <summary>Libera los recursos no administrados que utiliza el objeto <see cref="T:System.Net.NetworkInformation.Ping" /> y, de forma opcional, desecha los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se llama por el público `Dispose()` método y el <xref:System.ComponentModel.Component.Finalize%2A> método. El público `Dispose()` método invoca protegido <xref:System.Net.NetworkInformation.Ping.Dispose%2A> método con el `disposing` parámetro establecido en `true`. <xref:System.ComponentModel.Component.Finalize%2A> invoca `Dispose` con `disposing` establecido en `false`.  
  
 Cuando el `disposing` parámetro es `true`, este método libera todos los recursos mantenidos por los objetos administrados que <xref:System.Net.NetworkInformation.Ping> las referencias a objetos. Este método invoca al método `Dispose()` de cada uno de los objetos a los que se hace referencia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las clases que heredan de la <xref:System.Net.NetworkInformation.Ping> clase puede invalidar este método para llevar a cabo tareas adicionales, como registrar los datos contenidos en el `e` parámetro.  
  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener más información, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 El método <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Cuando se reemplaza <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" /> método para que los delegados registrados reciban el evento.</para></block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando una operación asincrónica para enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) y recibir el mensaje de respuesta de eco ICMP correspondiente finaliza o se cancela.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las aplicaciones utilizan la <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos para obtener información sobre el estado de finalización y los datos recopilan por una llamada a uno de los <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos. El <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado proporciona la llamada al método back-invoca cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca este evento.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo especificar un método de devolución de llamada para el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. El ejemplo completo está disponible en el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) a un equipo remoto y recibir un mensaje de respuesta de eco ICMP correspondiente del equipo remoto.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La dirección IP devuelta por cualquiera de los <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecargas pueden originarse en un equipo remoto malintencionado. No se conectan al equipo remoto con este. Usar DNS para determinar la dirección IP de la máquina a la que desea conectarse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo.</summary>
        <returns>Un objeto <see cref="T:System.Net.NetworkInformation.PingReply" /> que proporciona información sobre el mensaje de respuesta de eco ICMP, si se recibió alguno, o indica el motivo del error, si no se recibió ninguno.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método envía al host especificado por `address` un 32 <xref:System.Byte> búfer de datos con el mensaje de eco ICMP. El método espera cinco segundos para un mensaje de respuesta de eco ICMP. Si no recibe una respuesta en ese momento, el método devuelve y la <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. El paquete o sus fragmentos (si está fragmentado) pueden ser reenviados por nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> que identifica el equipo de destino para el mensaje de eco ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo especificado y recibir un mensaje de respuesta de eco ICMP correspondiente de dicho equipo.</summary>
        <returns>Un objeto <see cref="T:System.Net.NetworkInformation.PingReply" /> que proporciona información sobre el mensaje de respuesta de eco ICMP, si se recibió alguno, o indica el motivo del error, si no se recibió ningún mensaje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método envía un 32 <xref:System.Byte> búfer de datos con el mensaje de eco ICMP. El método espera cinco segundos para un mensaje de respuesta de eco ICMP. Si no recibe una respuesta en ese momento, el método devuelve y la <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. El paquete o sus fragmentos (si está fragmentado) pueden ser reenviados por nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> es <see langword="null" /> o una cadena vacía ("").</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP. Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo. Este método permite especificar un valor de tiempo de espera para la operación.</summary>
        <returns>Un objeto <see cref="T:System.Net.NetworkInformation.PingReply" /> que proporciona información sobre el mensaje de respuesta de eco ICMP, si se recibió alguno, o indica el motivo del error, si no se recibió ningún mensaje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado en el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 El paquete o sus fragmentos pueden reenviar mediante nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Para obtener un ejemplo que muestra cómo llamar a un <xref:System.Net.NetworkInformation.Ping.Send%2A> método, consulte el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> que identifica el equipo de destino para el mensaje de eco ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo especificado y recibir un mensaje de respuesta de eco ICMP correspondiente de dicho equipo. Este método permite especificar un valor de tiempo de espera para la operación.</summary>
        <returns>Un objeto <see cref="T:System.Net.NetworkInformation.PingReply" /> que proporciona información sobre el mensaje de respuesta de eco ICMP, si se recibió alguno, o indica el motivo del error, si no se recibió ningún mensaje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado en el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. El paquete o sus fragmentos (si está fragmentado) pueden ser reenviados por nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Para obtener un ejemplo que muestra cómo llamar a un <xref:System.Net.NetworkInformation.Ping.Send%2A> método, consulte el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> es <see langword="null" /> o una cadena vacía ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación.</summary>
        <returns>Un objeto <see cref="T:System.Net.NetworkInformation.PingReply" /> que proporciona información sobre el mensaje de respuesta de eco ICMP, si se recibió alguno, o indica el motivo del error, si no se recibió ningún mensaje. El método devolverá <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> si el paquete supera la Unidad de transmisión máxima (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado en el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 El paquete o sus fragmentos pueden reenviar mediante nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="buffer" /> es <see langword="null" />, o el tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> que identifica el equipo de destino para el mensaje de eco ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo especificado y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación.</summary>
        <returns>Un objeto <see cref="T:System.Net.NetworkInformation.PingReply" /> que proporciona información sobre el mensaje de respuesta de eco ICMP, si se recibió alguno, o indica el motivo del error, si no se recibió ningún mensaje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado en el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 El paquete o sus fragmentos pueden reenviar mediante nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Para obtener un ejemplo que muestra cómo llamar a un <xref:System.Net.NetworkInformation.Ping.Send%2A> sobrecarga, vea el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> es <see langword="null" /> o una cadena vacía ("").  
  
O bien 
 El valor de <paramref name="buffer" /> es <see langword="null" />, o el tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <param name="options">Objeto <see cref="T:System.Net.NetworkInformation.PingOptions" /> que se usa para controlar los valores de Período de vida y fragmentación del paquete de mensaje de eco ICMP.</param>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo con la <see cref="T:System.Net.IPAddress" /> especificada y recibir un mensaje de respuesta de eco ICMP de ese equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación y controlar los valores de Período de vida y fragmentación para el paquete del mensaje de eco ICMP.</summary>
        <returns>Un objeto <see cref="T:System.Net.NetworkInformation.PingReply" /> que proporciona información sobre el mensaje de respuesta de eco ICMP, si se recibió alguno, o indica el motivo del error, si no se recibió ningún mensaje. El método devolverá <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> si el paquete supera la Unidad de transmisión máxima (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado por el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Si el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Use el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad para especificar el número máximo de veces que se puede reenviar el mensaje de eco ICMP antes de llegar a su destino. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="buffer" /> es <see langword="null" />, o el tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> que identifica el equipo de destino para el mensaje de eco ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <param name="options">Objeto <see cref="T:System.Net.NetworkInformation.PingOptions" /> que se usa para controlar los valores de Período de vida y fragmentación del paquete de mensaje de eco ICMP.</param>
        <summary>Intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo especificado y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación y controlar los valores de Período de vida y fragmentación para el paquete ICMP.</summary>
        <returns>Un objeto <see cref="T:System.Net.NetworkInformation.PingReply" /> que proporciona información sobre el mensaje de respuesta de eco ICMP, si se recibió alguno, o indica el motivo del error, si no se recibió ningún mensaje.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado por el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Si el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Use el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad para especificar el número máximo de veces que se puede reenviar el mensaje de eco ICMP antes de llegar a su destino. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="hostNameOrAddress" /> es <see langword="null" /> o una cadena de longitud cero.  
  
O bien 
 El valor de <paramref name="buffer" /> es <see langword="null" />, o el tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Intenta enviar de forma asincrónica un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo especificado y recibir un mensaje de respuesta de eco ICMP correspondiente de dicho equipo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estos métodos no hacen que el subproceso principal de la aplicación se bloquee. Si desea bloquear mientras espera para el mensaje de respuesta de eco ICMP, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos.  
  
> [!NOTE]
>  La dirección IP devuelta por cualquiera de los <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos pueden originarse en un equipo remoto malintencionado. No se conectan al equipo remoto con este. Usar DNS para determinar la dirección IP de la máquina a la que desea conectarse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="userToken">Objeto que se pasa al método invocado cuando la operación asincrónica termina.</param>
        <summary>Intenta enviar de forma asincrónica un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada y recibir un mensaje de respuesta de eco ICMP correspondiente de dicho equipo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método envía el mensaje de eco de forma asincrónica y, cuando se completa la operación (correctamente o no), devuelve el estado a la aplicación. Llame a la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método cuando la aplicación no debe bloquearse. Cada llamada a este método se ejecuta en un subproceso independiente que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Para especificar el método que se llama cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca el evento, debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar. El <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto hereda el <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propiedad. Esta propiedad contiene el `userToken` objeto pasado en el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
> [!NOTE]
>  Si la aplicación debe bloquearse mientras espera una respuesta, utilice uno de los <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos.  
  
 Este método envía un 32 <xref:System.Byte> búfer de datos con el mensaje de eco ICMP. El método espera cinco segundos para un mensaje de respuesta de eco ICMP. Si no recibe una respuesta en ese momento, el método devuelve y la <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 El paquete o sus fragmentos pueden reenviar mediante nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Para obtener un ejemplo de código que se muestra cómo llamar un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método, consulte el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">El valor de <paramref name="address" /> no es una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> que identifica el equipo de destino para el mensaje de eco ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="userToken">Objeto que se pasa al método invocado cuando la operación asincrónica termina.</param>
        <summary>Intenta enviar de forma asincrónica un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo especificado y recibir un mensaje de respuesta de eco ICMP correspondiente de dicho equipo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método envía el mensaje de eco de forma asincrónica y, cuando se completa la operación (correctamente o no), devuelve el estado a la aplicación. Llame a la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método cuando la aplicación no debe bloquearse. Cada llamada a este método se ejecuta en un subproceso independiente que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Para especificar el método que se llama cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca el evento, debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar. El <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto hereda el <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propiedad. Esta propiedad contiene el `userToken` objeto pasado en el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
> [!NOTE]
>  Si la aplicación debe bloquearse mientras espera una respuesta, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos.  
  
 Este método envía un 32 <xref:System.Byte> búfer de datos con el mensaje de eco ICMP. El método espera cinco segundos para un mensaje de respuesta de eco ICMP. Si no recibe una respuesta en ese momento, el método devuelve y la <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 El paquete o sus fragmentos pueden reenviar mediante nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Para obtener un ejemplo de código que se muestra cómo llamar el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método, consulte el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> es <see langword="null" /> o una cadena vacía ("").</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada al método <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> no pudo resolverse en una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="userToken">Objeto que se pasa al método invocado cuando la operación asincrónica termina.</param>
        <summary>Intenta enviar de forma asincrónica un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada y recibir un mensaje de respuesta de eco ICMP correspondiente de dicho equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método envía el mensaje de eco de forma asincrónica y, cuando se completa la operación (correctamente o no), devuelve el estado a la aplicación. Llame a la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método cuando la aplicación no debe bloquearse. Cada llamada se ejecuta en un subproceso independiente que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Las aplicaciones utilizan un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado para especificar el método que se llama cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca el evento. Debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar. El <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto hereda el <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propiedad. Esta propiedad contiene el `userToken` objeto pasado en el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
 Si la aplicación debe bloquearse mientras espera una respuesta, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos.  
  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado por el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. El paquete o sus fragmentos (si está fragmentado) pueden ser reenviados por nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Para obtener un ejemplo de código que se muestra cómo llamar un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga, vea el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada al método <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">El valor de <paramref name="address" /> no es una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> que identifica el equipo de destino para el mensaje de eco ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="userToken">Objeto que se pasa al método invocado cuando la operación asincrónica termina.</param>
        <summary>Intenta enviar de forma asincrónica un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo especificado y recibir un mensaje de respuesta de eco ICMP correspondiente de dicho equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método envía el mensaje de eco de forma asincrónica y, cuando se completa la operación (correctamente o no), devuelve el estado a la aplicación. Llame a la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método cuando la aplicación no debe bloquearse. Cada llamada se ejecuta en un subproceso independiente que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Las aplicaciones utilizan un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado para especificar el método que se llama cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca el evento. Debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar. El <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto hereda el <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propiedad. Esta propiedad contiene el `userToken` objeto pasado en el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
 Si la aplicación debe bloquearse mientras espera una respuesta, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos.  
  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado por el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. El paquete o sus fragmentos (si está fragmentado) pueden ser reenviados por nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Para obtener un ejemplo de código que se muestra cómo llamar el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método, consulte el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> es <see langword="null" /> o una cadena vacía ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> no pudo resolverse en una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <param name="userToken">Objeto que se pasa al método invocado cuando la operación asincrónica termina.</param>
        <summary>De forma asincrónica, intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada, y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método envía el mensaje de eco de forma asincrónica y, cuando se completa la operación (correctamente o no), devuelve el estado a la aplicación. Llame a la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método cuando la aplicación no debe bloquearse. Cada llamada se ejecuta en un subproceso independiente que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Para especificar el método que se llama cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca el evento, debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar. El <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto hereda el <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propiedad. Esta propiedad contiene el `userToken` objeto pasado en el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
> [!NOTE]
>  Si la aplicación se bloquea mientras espera una respuesta, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos.  
  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado por el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. El paquete o sus fragmentos (si está fragmentado) pueden ser reenviados por nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 Para obtener un ejemplo de código que se muestra cómo llamar un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga, vea el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.  
  
O bien 
 <paramref name="buffer" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">El valor de <paramref name="address" /> no es una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> que identifica el equipo de destino para el mensaje de eco ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <param name="userToken">Objeto que se pasa al método invocado cuando la operación asincrónica termina.</param>
        <summary>De forma asincrónica, intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo especificado, y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método envía el mensaje de eco de forma asincrónica y, cuando se completa la operación (correctamente o no), devuelve el estado a la aplicación. Llame a la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método cuando la aplicación no debe bloquearse. Cada llamada se ejecuta en un subproceso independiente que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Las aplicaciones utilizan un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado para especificar el método que se llama cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca el evento. Debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar. El <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto hereda el <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propiedad. Esta propiedad contiene el `userToken` objeto pasado en el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
 Si la aplicación debe bloquearse mientras espera una respuesta, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos.  
  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado por el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Esta sobrecarga utiliza la configuración predeterminada para la fragmentación y el reenvío de paquetes. El paquete que contiene el mensaje de eco ICMP se puede fragmentar en tránsito si el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos. Para evitar la fragmentación, utilice uno de los <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> métodos que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad `true`. Cuando <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>. El paquete o sus fragmentos (si está fragmentado) pueden ser reenviados por nodos de enrutamiento 128 veces antes de descartarse. Para cambiar esta configuración, use un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga que toma un `options` parámetro y establezca el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad en el valor deseado. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a un <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sobrecarga, vea el <xref:System.Net.NetworkInformation.Ping> información general de clases.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> es <see langword="null" /> o una cadena vacía ("").  
  
O bien 
 <paramref name="buffer" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> no pudo resolverse en una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address"><see cref="T:System.Net.IPAddress" /> que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <param name="options">Objeto <see cref="T:System.Net.NetworkInformation.PingOptions" /> que se usa para controlar los valores de Período de vida y fragmentación del paquete de mensaje de eco ICMP.</param>
        <param name="userToken">Objeto que se pasa al método invocado cuando la operación asincrónica termina.</param>
        <summary>De forma asincrónica, intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada, y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación y controlar los valores de Período de vida y fragmentación para el paquete del mensaje de eco ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método envía el mensaje de eco de forma asincrónica y, cuando se completa la operación (correctamente o no), devuelve el estado a la aplicación. Llame a la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método cuando la aplicación no debe bloquearse. Cada llamada se ejecuta en un subproceso independiente que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Las aplicaciones utilizan un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado para especificar el método que se llama cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca el evento. Debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar. El <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto hereda el <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propiedad. Esta propiedad contiene el `userToken` objeto pasado en el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
 Si la aplicación se bloquea mientras espera una respuesta, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos.  
  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado por el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Si el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Use el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad para especificar el número máximo de veces que se puede reenviar el mensaje de eco ICMP antes de llegar a su destino. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método. Para una implementación del método de devolución de llamada, vea la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> sección de ejemplo de sobrecarga del método.  
  
 El siguiente ejemplo de código requiere los siguientes espacios de nombres:  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 En el ejemplo de código siguiente se envía un mensaje de eco ICMP de forma asincrónica.  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.  
  
O bien 
 <paramref name="buffer" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">El valor de <paramref name="address" /> no es una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="userToken" Type="System.Object" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress"><see cref="T:System.String" /> que identifica el equipo de destino para el mensaje de eco ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <param name="buffer">Valor <see cref="T:System.Int32" /> que especifica el número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="options">Objeto <see cref="T:System.Net.NetworkInformation.PingOptions" /> que se usa para controlar los valores de Período de vida y fragmentación del paquete de mensaje de eco ICMP.</param>
        <param name="userToken">Objeto que se pasa al método invocado cuando la operación asincrónica termina.</param>
        <summary>De forma asincrónica, intenta enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo especificado, y recibir el correspondiente mensaje de respuesta de eco ICMP de ese equipo. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación y controlar los valores de Período de vida y fragmentación para el paquete ICMP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método envía el mensaje de eco de forma asincrónica y, cuando se completa la operación (correctamente o no), devuelve el estado a la aplicación. Llame a la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> método cuando la aplicación no debe bloquearse. Cada llamada se ejecuta en un subproceso independiente que se asigna automáticamente desde el grupo de subprocesos. Cuando se complete la operación asincrónica, se genera el <xref:System.Net.NetworkInformation.Ping.PingCompleted> eventos. Las aplicaciones utilizan un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado para especificar el método que se llama cuando <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> provoca el evento. Debe agregar un <xref:System.Net.NetworkInformation.PingCompletedEventHandler> delegado al evento antes de llamar a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>. El método del delegado recibe un <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto que contiene un <xref:System.Net.NetworkInformation.PingReply> objeto que describe el resultado de la <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar. El <xref:System.Net.NetworkInformation.PingCompletedEventArgs> objeto hereda el <xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A> propiedad. Esta propiedad contiene el `userToken` objeto pasado en el <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> llamar.  
  
 Si la aplicación debe bloquearse mientras espera una respuesta, utilice el <xref:System.Net.NetworkInformation.Ping.Send%2A> métodos; estos métodos son sincrónicos.  
  
 Si no se recibe el mensaje de respuesta de eco ICMP en el tiempo especificado por el `timeout` parámetro, el eco ICMP se produce un error y el <xref:System.Net.NetworkInformation.PingReply.Status%2A> propiedad está establecida en <xref:System.Net.NetworkInformation.IPStatus.TimedOut>.  
  
> [!NOTE]
>  Al especificar un número muy reducido para `timeout`, puede recibir la respuesta de Ping aunque `timeout` milisegundos transcurridos.  
  
 Si el <xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> propiedad es `true` y el tamaño total del paquete supera el tamaño máximo de paquetes que se puede transmitir mediante uno de los nodos de enrutamiento entre los equipos locales y remotos, se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>.  
  
 Use el <xref:System.Net.NetworkInformation.PingOptions.Ttl%2A> propiedad para especificar el número máximo de veces que se puede reenviar el mensaje de eco ICMP antes de llegar a su destino. Si el paquete no llega a su destino después de que se reenvían el número de veces especificado, el paquete se descarta y se produce un error en la solicitud de eco ICMP. Cuando esto sucede, el <xref:System.Net.NetworkInformation.PingReply.Status%2A> está establecido en <xref:System.Net.NetworkInformation.IPStatus.TtlExpired>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este método.  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> es <see langword="null" /> o una cadena vacía ("").  
  
O bien 
 <paramref name="buffer" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />.</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> es una dirección IPv6 y el equipo local está ejecutando un sistema operativo anterior a Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> no pudo resolverse en una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> es superior a 65.500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">Para enviar un mensaje de eco ICMP.  
  
Enumeración asociada: <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancela todas las solicitudes asincrónicas pendientes para enviar un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) y recibe un mensaje de respuesta de eco ICMP correspondiente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a este método para finalizar las llamadas a <xref:System.Net.NetworkInformation.Ping.SendAsync%2A> que no se han completado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) al equipo especificado y recibe un mensaje de respuesta de eco ICMP correspondiente de dicho equipo como una operación asincrónica.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Dirección IP que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada, y recibe el correspondiente mensaje de respuesta de eco ICMP de ese equipo como una operación asincrónica.</summary>
        <returns>Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha enviado el paquete ICMP y se ha recibido la respuesta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">El valor de <paramref name="address" /> no es una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">El equipo que es el destino del mensaje de la generación de repetición de ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo especificado, y recibe el correspondiente mensaje de respuesta de eco ICMP de ese equipo como una operación asincrónica.</summary>
        <returns>Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha enviado el paquete ICMP y se ha recibido la respuesta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Dirección IP que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">El número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada, y recibe el correspondiente mensaje de respuesta de eco ICMP de ese equipo como una operación asincrónica. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación.</summary>
        <returns>Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha enviado el paquete ICMP y se ha recibido la respuesta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">El equipo que es el destino del mensaje de la generación de repetición de ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">El número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo especificado, y recibe el correspondiente mensaje de respuesta de eco ICMP de ese equipo como una operación asincrónica. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación.</summary>
        <returns>Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha enviado el paquete ICMP y se ha recibido la respuesta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Dirección IP que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">El número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo que tiene la <see cref="T:System.Net.IPAddress" /> especificada, y recibe el correspondiente mensaje de respuesta de eco ICMP de ese equipo como una operación asincrónica. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación y un búfer para enviar y recibir.</summary>
        <returns>Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha enviado el paquete ICMP y se ha recibido la respuesta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.  
  
O bien 
 <paramref name="buffer" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">El valor de <paramref name="address" /> no es una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> supera los 65.500 bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">El equipo que es el destino del mensaje de la generación de repetición de ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">El número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo especificado, y recibe el correspondiente mensaje de respuesta de eco ICMP de ese equipo como una operación asincrónica. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación y un búfer para enviar y recibir.</summary>
        <returns>Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha enviado el paquete ICMP y se ha recibido la respuesta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="address">Dirección IP que identifica el equipo de destino para el mensaje de eco ICMP.</param>
        <param name="timeout">El número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <param name="options">Objeto <see cref="T:System.Net.NetworkInformation.PingOptions" /> que se usa para controlar los valores de Período de vida y fragmentación del paquete de mensaje de eco ICMP.</param>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo que tiene el elemento <see cref="T:System.Net.IPAddress" /> especificado y recibe el correspondiente mensaje de respuesta de eco ICMP de ese equipo como una operación asincrónica. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación y un búfer para enviar y recibir y controlar los valores de Período de vida y fragmentación para el paquete del mensaje de eco ICMP.</summary>
        <returns>Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha enviado el paquete ICMP y se ha recibido la respuesta.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> es <see langword="null" />.  
  
O bien 
 <paramref name="buffer" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> es menor que cero.</exception>
        <exception cref="T:System.InvalidOperationException">Se está realizando una llamada a <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">Se ha producido una excepción al enviar o recibir los mensajes ICMP. Para conocer la excepción exacta que se produjo, vea la excepción interna.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">El valor de <paramref name="address" /> no es una dirección IP válida.</exception>
        <exception cref="T:System.ObjectDisposedException">Este objeto se ha eliminado.</exception>
        <exception cref="T:System.ArgumentException">El tamaño de <paramref name="buffer" /> supera los 65.500 bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="timeout" Type="System.Int32" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="buffer" Type="System.Byte[]" Index="2" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" Index="3" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">El equipo que es el destino del mensaje de la generación de repetición de ICMP. El valor especificado para este parámetro puede ser un nombre de host o una representación de cadena de una dirección IP.</param>
        <param name="timeout">El número máximo de milisegundos (después de enviar el mensaje de eco) que hay que esperar hasta recibir el mensaje de respuesta de eco ICMP.</param>
        <param name="buffer">Matriz de <see cref="T:System.Byte" /> que contiene los datos que se envían con el mensaje de eco ICMP y se devuelven en el mensaje de respuesta de eco ICMP. La matriz no puede contener más de 65.500 bytes.</param>
        <param name="options">Objeto <see cref="T:System.Net.NetworkInformation.PingOptions" /> que se usa para controlar los valores de Período de vida y fragmentación del paquete de mensaje de eco ICMP.</param>
        <summary>Envía un mensaje de eco ICMP (Protocolo de mensajes de control de Internet) con el búfer de datos especificado al equipo especificado, y recibe el correspondiente mensaje de respuesta de eco ICMP de ese equipo como una operación asincrónica. Esta sobrecarga permite especificar un valor de tiempo de espera para la operación y un búfer para enviar y recibir y controlar los valores de Período de vida y fragmentación para el paquete del mensaje de eco ICMP.</summary>
        <returns>Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha enviado el paquete ICMP y se ha recibido la respuesta.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos utilizados por las instancias de la clase <see cref="T:System.Net.NetworkInformation.Ping" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Si se llama a cualquier método en un <xref:System.Net.NetworkInformation.Ping> objeto que se ha eliminado, recibirá un <xref:System.ObjectDisposedException>.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>