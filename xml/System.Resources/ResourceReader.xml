<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ResourceReader.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5682738b4136d074223cbe025a9380b3cca9bc1d0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">682738b4136d074223cbe025a9380b3cca9bc1d0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</source>
          <target state="translated">Enumera los recursos en un archivo binario de recursos (.resources) leyendo pares secuenciales de nombre/valor del recurso.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">**</bpt>Security Note<ept id="p1">**</ept>: Calling methods in this class with untrusted data is a security risk.</source>
          <target state="translated"><bpt id="p1">**</bpt>Nota de seguridad<ept id="p1">**</ept>: llamar a métodos en esta clase con datos que no son de confianza conlleva un riesgo de seguridad.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Call the methods in the class only with trusted data.</source>
          <target state="translated">Llame a los métodos en la clase solo con datos de confianza.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>For more information, see <bpt id="p1">[</bpt>Untrusted Data Security Risks<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</source>
          <target state="translated">Para más información, consulte <bpt id="p1">[</bpt>Riesgos de seguridad de datos que no son de confianza<ept id="p1">](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)</ept>.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class provides a standard implementation of the <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph> interface.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> clase proporciona una implementación estándar de la <ph id="ph2">&lt;xref:System.Resources.IResourceReader&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instancia representa un archivo .resources independiente o un archivo .resources que se incrusta en un ensamblado.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</source>
          <target state="translated">Sirve para enumerar los recursos en un archivo .resources y recuperar sus pares de nombre/valor.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It differs from the <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</source>
          <target state="translated">Difiere de la <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> (clase), que se usa para recuperar recursos con nombre especificados de un archivo .resources que se incrusta en un ensamblado.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> class is used to retrieve resources whose names are known in advance, whereas the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class is useful for retrieving resources whose number or precise names are not known at compile time.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Resources.ResourceManager&gt;</ph> clase se utiliza para recuperar recursos cuyos nombres se conocen de antemano, mientras que la <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> clase es útil para recuperar los recursos cuyo número o los nombres exactos no se conocen en tiempo de compilación.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</source>
          <target state="translated">Por ejemplo, una aplicación puede utilizar un archivo de recursos para almacenar información de configuración que se organiza en las secciones y los elementos de una sección, donde el número de secciones o elementos en una sección no se conoce de antemano.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Resources can then be named generically (such as <ph id="ph1">`Section1`</ph>, <ph id="ph2">`Section1Item1`</ph>, <ph id="ph3">`Section1Item2`</ph>, and so on) and retrieved by using a <ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph> object.</source>
          <target state="translated">Recursos, a continuación, pueden llamarse genéricamente (como <ph id="ph1">`Section1`</ph>, <ph id="ph2">`Section1Item1`</ph>, <ph id="ph3">`Section1Item2`</ph>, etc.) y recuperar usando una <ph id="ph4">&lt;xref:System.Resources.ResourceReader&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa la <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Para deshacerse del tipo directamente, llame a su <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> método en un <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para deshacerse de él indirectamente, use una construcción de lenguaje como <ph id="ph1">`using`</ph> (en C#) o <ph id="ph2">`Using`</ph> (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tema de la interfaz.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information about using the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class, see the following sections:</source>
          <target state="translated">Para obtener más información sobre el uso de la <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> de clases, consulte las secciones siguientes:</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Instantiating a ResourceReader object<ept id="p1">](#instantiate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Instancias de un objeto ResourceReader<ept id="p1">](#instantiate)</ept></target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Enumerating a ResourceReader object's resources<ept id="p1">](#enumerate)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Enumerar los recursos de un objeto ResourceReader<ept id="p1">](#enumerate)</ept></target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Retrieving resources by using IDictionaryEnumerator properties<ept id="p1">](#idictionaryenumerator)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Recuperar recursos mediante propiedades IDictionaryEnumerator<ept id="p1">](#idictionaryenumerator)</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">[</bpt>Retrieving resources by name with GetResourceData<ept id="p1">](#getresourcedata)</ept></source>
          <target state="translated"><bpt id="p1">[</bpt>Recuperar recursos por el nombre con GetResourceData<ept id="p1">](#getresourcedata)</ept></target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Instantiating a ResourceReader Object</source>
          <target state="translated">Instancias de un objeto ResourceReader</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by <bpt id="p1">[</bpt>Resgen.exe (Resource File Generator)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</source>
          <target state="translated">Un archivo .resources es un archivo binario que se ha compilado en un archivo de texto o un archivo .resx XML <bpt id="p1">[</bpt>Resgen.exe (generador de archivos de recursos)<ept id="p1">](~/docs/framework/tools/resgen-exe-resource-file-generator.md)</ept>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objeto puede representar un archivo .resources independiente o un archivo .resources que se han incrustado en un ensamblado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To instantiate a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that reads from a standalone .resources file, use the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class constructor with either an input stream or a string that contains the .resources file name.</source>
          <target state="translated">Para crear instancias de un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objeto que lee desde un archivo .resources independiente, utilice la <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> constructor de clase con un flujo de entrada o una cadena que contiene el nombre del archivo .resources.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example illustrates both approaches.</source>
          <target state="translated">En el ejemplo siguiente se muestra ambos enfoques.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The first instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources1.resources`</ph> by using its file name.</source>
          <target state="translated">Crea una instancia de la primera un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objeto que representa un archivo .resources denominado <ph id="ph2">`Resources1.resources`</ph> mediante su nombre de archivo.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The second instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents a .resources file named <ph id="ph2">`Resources2.resources`</ph> by using a stream created from the file.</source>
          <target state="translated">Crea una instancia de la segunda un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objeto que representa un archivo .resources denominado <ph id="ph2">`Resources2.resources`</ph> mediante el uso de una secuencia que se crea a partir del archivo.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To create a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file, instantiate an <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> object from the assembly in which the .resources file is embedded.</source>
          <target state="translated">Para crear un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> crear una instancia de objeto que representa un archivo .resources incrustado, un <ph id="ph2">&lt;xref:System.Reflection.Assembly&gt;</ph> objeto desde el ensamblado en el que se incrusta el archivo .resources.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Its <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object that can be passed to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">Su <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> método devuelve un <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> objeto que puede pasarse a la <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example instantiates a <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that represents an embedded .resources file.</source>
          <target state="translated">El ejemplo siguiente crea un <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> objeto que representa un archivo .resources incrustado.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Enumerating a ResourceReader Object's Resources</source>
          <target state="translated">Enumerar los recursos de un objeto ResourceReader</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To enumerate the resources in a .resources file, you call the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method, which returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> object.</source>
          <target state="translated">Para enumerar los recursos en un archivo .resources, se llama a la <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> método, que devuelve un <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move from one resource to the next.</source>
          <target state="translated">Se llama a la <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> método para mover de un recurso a la siguiente.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The method returns <ph id="ph1">`false`</ph> when all the resources in the .resources file have been enumerated.</source>
          <target state="translated">El método devuelve <ph id="ph1">`false`</ph> cuando se han enumerado todos los recursos en el archivo .resources.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Although the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface and the <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method, the <ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method does not provide the <ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">Aunque la <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> la clase implementa la <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interfaz y la <ph id="ph3">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> método, el <ph id="ph4">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> método no proporciona el <ph id="ph5">&lt;xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> implementación.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Instead, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method  returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object that provides access to each resource's name/value pair.</source>
          <target state="translated">En su lugar, el <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> método devuelve un <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> objeto de interfaz que proporciona acceso al par de nombre/valor de cada recurso.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can retrieve the individual resources in the collection in two ways:</source>
          <target state="translated">Puede recuperar los recursos individuales de la colección de dos maneras:</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can iterate each resource in the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection and use <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> properties to retrieve the resource name and value.</source>
          <target state="translated">Puede recorrer en iteración cada recurso en el <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> recopilación y uso <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> propiedades para recuperar el nombre del recurso y el valor.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</source>
          <target state="translated">Se recomienda esta técnica cuando todos los recursos son del mismo tipo, o sabe el tipo de datos de cada recurso.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can retrieve the name of each resource when you iterate the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> collection and call the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve the resource's data.</source>
          <target state="translated">Puede recuperar el nombre de cada recurso cuando se recorra en el <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType&gt;</ph> colección y llame al método el <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> método para recuperar los datos del recurso.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</source>
          <target state="translated">Se recomienda este enfoque cuando no se conoce el tipo de datos de cada recurso o si el enfoque anterior genera una excepción.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Retrieving Resources by Using IDictionaryEnumerator Properties</source>
          <target state="translated">Recuperar recursos mediante propiedades IDictionaryEnumerator</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</source>
          <target state="translated">El primer método de enumerar los recursos en un archivo .resources implica recuperar directamente el par de nombre/valor de cada recurso.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>After you call the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method to move to each resource in the collection, you can retrieve the resource name from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property and the resource data from the <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Después de llamar a la <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> nombre de método para desplazarse a cada recurso de la colección, se puede recuperar el recurso de la <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> propiedad y los datos de recursos de la <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example shows how to retrieve the name and value of each resource in a .resources file by using the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> properties.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo recuperar el nombre y valor de cada recurso en un archivo .resources mediante el uso de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propiedades.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To run the example, create the following text file named ApplicationResources.txt to define string resources.</source>
          <target state="translated">Para ejecutar el ejemplo, cree el siguiente archivo de texto denominado ApplicationResources.txt para definir recursos de cadena.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</source>
          <target state="translated">A continuación, puede convertir el archivo de recursos de texto a un archivo binario denominado ApplicationResources.resources mediante el comando siguiente:</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen ApplicationResources.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</source>
          <target state="translated">El ejemplo siguiente, a continuación, utiliza el <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> clase para enumerar cada recurso en el archivo binario .resources independiente y mostrar el nombre de la clave y el valor correspondiente.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The attempt to retrieve resource data from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property can throw the following exceptions:</source>
          <target state="translated">Al intentar recuperar datos de recursos de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propiedad puede producir las excepciones siguientes:</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> if the data is not in the expected format.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> si los datos no están en el formato esperado.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> if the assembly that contains the type to which the data belongs cannot be found.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.IO.FileNotFoundException&gt;</ph> si no se encuentra el ensamblado que contiene el tipo al que pertenecen los datos.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>A <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> if the type to which the data belongs cannot be cannot be found.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.TypeLoadException&gt;</ph> si no puede ser el tipo al que pertenecen los datos no se encuentra.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</source>
          <target state="translated">Normalmente, estas excepciones se producen si el archivo .resources se ha modificado manualmente, si el ensamblado en el que se define un tipo ha no se han incluido con una aplicación o se ha eliminado accidentalmente, o si el ensamblado es una versión anterior precede a un tipo.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method, as the following section shows.</source>
          <target state="translated">Si se produce una de estas excepciones, puede recuperar recursos enumerar cada recurso y llamando a la <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> método, tal como se muestra en la siguiente sección.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This approach provides you with some information about the data type that the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property attempted to return.</source>
          <target state="translated">Este enfoque proporciona escribe información acerca de los datos del <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propiedad intenta devolver.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Retrieving Resources by Name with GetResourceData</source>
          <target state="translated">Recuperar recursos por el nombre con GetResourceData</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> method.</source>
          <target state="translated">El segundo enfoque para enumerar los recursos en un archivo .resources también implica desplazarse por los recursos en el archivo mediante una llamada a la <ph id="ph1">`IDictionaryEnumerator.MoveNext`</ph> método.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For each resource, you retrieve the resource's name from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property, which is then passed to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph> method to retrieve the resource's data.</source>
          <target state="translated">Para cada recurso, recuperar el nombre del recurso de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> propiedad, que se pasa a continuación el <ph id="ph2">&lt;xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29&gt;</ph> método para recuperar los datos del recurso.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This is returned as a byte array in the <ph id="ph1">`resourceData`</ph> argument.</source>
          <target state="translated">Esto se devuelve como una matriz de bytes en el <ph id="ph1">`resourceData`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>This approach is more awkward than retrieving the resource name and value from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> properties, because it returns the actual bytes that form the resource value.</source>
          <target state="translated">Este enfoque es más difícil que recuperar el nombre del recurso y el valor de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propiedades, porque devuelve la cantidad real de bytes que forman el valor del recurso.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>However, if the attempt to retrieve the resource throws an exception, the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method can help identify the source of the exception by supplying information about the resource's data type.</source>
          <target state="translated">Sin embargo, si el intento de recuperar el recurso produce una excepción, el <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> método puede ayudar a identificar el origen de la excepción proporcionando información sobre el tipo de datos del recurso.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information about the string that indicates the resource's data type, see <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>.</source>
          <target state="translated">Para obtener más información acerca de la cadena que indica el tipo de datos del recurso, vea <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar este enfoque para recuperar los recursos y para controlar las excepciones que se producen.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom <ph id="ph1">`DateTimeTZI`</ph> object.</source>
          <target state="translated">Crea mediante programación un archivo .resources binario que contiene cuatro cadenas, un valor booleano, un número entero, un mapa de bits y uno personalizado <ph id="ph1">`DateTimeTZI`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>To run the example, do the following:</source>
          <target state="translated">Para ejecutar el ejemplo, haga lo siguiente:</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Create an assembly named Library.dll that contains the <ph id="ph1">`DateTimeTZI`</ph> structure.</source>
          <target state="translated">Crear un ensamblado denominado Library.dll que contiene el <ph id="ph1">`DateTimeTZI`</ph> estructura.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The following is the source code for the assembly.</source>
          <target state="translated">Éste es el código fuente para el ensamblado.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile the source code in C# by using the following command:</source>
          <target state="translated">Compile el código fuente de C# mediante el comando siguiente:</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
          <target state="translated">O bien, puede compilar en Visual Basic mediante el comando siguiente:</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</source>
          <target state="translated">Compile y ejecute el siguiente código fuente, lo que crea un archivo .resources denominado ContactResources.resources.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>The source code file is named CreateResources.cs.</source>
          <target state="translated">El archivo de código fuente se denomina CreateResources.cs.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>You can compile it in C# by using the following command:</source>
          <target state="translated">Puede compilar en C# mediante el comando siguiente:</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Or, you can compile it in Visual Basic by using the following command:</source>
          <target state="translated">O bien, puede compilar en Visual Basic mediante el comando siguiente:</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Compile and run the following code to enumerate the resources in the ContactResources.resources file.</source>
          <target state="translated">Compile y ejecute el código siguiente para enumerar los recursos en el archivo ContactResources.resources.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>After modifying the source code (for example, by deliberately throwing a <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> at the end of the <ph id="ph2">`try`</ph> block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> enable you to retrieve or recreate some resource information.</source>
          <target state="translated">Después de modificar el código fuente (por ejemplo, al lanzar deliberadamente una <ph id="ph1">&lt;xref:System.FormatException&gt;</ph> al final de la <ph id="ph2">`try`</ph> bloque) o cambiar el nombre del ensamblado Library.dll para que esté disponible en tiempo de ejecución, puede ejecutar el ejemplo para ver cómo las llamadas a <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> le permiten recuperar o volver a crear información de recursos.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Resources.ResourceReader">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">Usar una instancia de este objeto con datos no es de confianza es un riesgo de seguridad.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>Use this object only with trusted data.</source>
          <target state="translated">Use este objeto solo con datos de confianza.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Resources.ResourceReader">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>validación de datos<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The input stream for reading resources.</source>
          <target state="translated">Flujo de entrada para la lectura de recursos.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class for the specified stream.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> para la secuencia especificada.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor crea un <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> objeto que recupera los recursos desde un archivo .resources independiente o desde un archivo .resources archivo que está incrustado en un ensamblado.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>To read from a standalone .resources file, instantiate a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> object and pass it to the <ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">Para leer de un archivo .resources independiente, crear una instancia de un <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> objeto y lo pasa a la <ph id="ph2">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>To read from an embedded .resources file, call the <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> method with the case-sensitive name of the .resources file, and pass the returned <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> object to the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">Para leer desde un archivo .resources incrustado, llame a la <ph id="ph1">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType&gt;</ph> método con el nombre del archivo .resources y pase el valor devuelto entre mayúsculas y minúsculas <ph id="ph2">&lt;xref:System.IO.Stream&gt;</ph> el objeto a la <ph id="ph3">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">Usar una instancia de este objeto con datos no es de confianza es un riesgo de seguridad.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Use this object only with trusted data.</source>
          <target state="translated">Use este objeto solo con datos de confianza.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>validación de datos<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">El ejemplo de esta sección usa el siguiente archivo .txt denominado <ph id="ph1">`PatientForm.txt`</ph> para definir los recursos utilizados por una aplicación.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>You can compile the .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">Puede compilar el archivo .txt en un archivo .resources emitiendo el comando siguiente:</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</source>
          <target state="translated">En el siguiente ejemplo se da por supuesto que el archivo de recursos está incrustado en el ensamblado que contiene código ejecutable de la aplicación.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>It retrieves a resource file named <ph id="ph1">`PatientForm.resources`</ph> from the currently executing assemblies and displays the name and value of each of its resources.</source>
          <target state="translated">Recupera un archivo de recursos denominado <ph id="ph1">`PatientForm.resources`</ph> desde los ensamblados que se está ejecutando actualmente y muestra el nombre y valor de cada uno de sus recursos.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>If the C# example is named <ph id="ph1">`Example.cs`</ph>, you can compile it by using the following command:</source>
          <target state="translated">Si el ejemplo de C# se denomina <ph id="ph1">`Example.cs`</ph>, puede compilar mediante el comando siguiente:</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>csc Example.cs /res:PatientForm.resources<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>csc Example.cs /res:PatientForm.resources<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>If the Visual Basic example is named <ph id="ph1">`Example.vb`</ph>, you can compile it by using the following command:</source>
          <target state="translated">Si el ejemplo de Visual Basic se denomina <ph id="ph1">`Example.vb`</ph>, puede compilar mediante el comando siguiente:</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source><bpt id="p1">**</bpt>vbc Example.vb /res:PatientForm.resources<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>vbc Example.vb /res:PatientForm.resources<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is not readable.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> no se puede leer.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>The <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="stream" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>An I/O error has occurred while accessing <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</source>
          <target state="translated">Error de E/S durante el acceso al parámetro <ph id="ph1">&lt;paramref name="stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>for providing serialization services.</source>
          <target state="translated">para proporcionar servicios de serialización.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Acción de seguridad: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The path and name of the resource file to read.</source>
          <target state="translated">Ruta de acceso y nombre del archivo de recursos que se va a leer.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source><bpt id="p1">&lt;c&gt;</bpt>filename<ept id="p1">&lt;/c&gt;</ept> is not case-sensitive.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>filename<ept id="p1">&lt;/c&gt;</ept> no distingue mayúsculas de minúsculas.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class for the specified named resource file.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> para el archivo de recursos denominado especificado.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph> constructor instantiates a <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> object that retrieves resources from a standalone .resources file.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.String%29&gt;</ph> constructor crea un <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> objeto que recupera los recursos de un archivo .resources independiente.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>To retrieve resources from an embedded .resources file, use the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</source>
          <target state="translated">Para recuperar recursos de un archivo .resources incrustado, utilice la <ph id="ph1">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Using an instance of this object with untrusted data is a security risk.</source>
          <target state="translated">Usar una instancia de este objeto con datos no es de confianza es un riesgo de seguridad.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>Use this object only with trusted data.</source>
          <target state="translated">Use este objeto solo con datos de confianza.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Data Validation<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>validación de datos<ept id="p1">](https://www.owasp.org/index.php/Data_Validation)</ept>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">El ejemplo de esta sección usa el siguiente archivo .txt denominado <ph id="ph1">`PatientForm.txt`</ph> para definir los recursos utilizados por una aplicación.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>You can compile this .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">Puede compilar este archivo .txt en un archivo .resources emitiendo el comando siguiente:</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The following example enumerates the resources in <ph id="ph1">`PatientForm.resources`</ph> and displays the name and value of each.</source>
          <target state="translated">En el ejemplo siguiente se enumeran los recursos de <ph id="ph1">`PatientForm.resources`</ph> y muestra el nombre y valor de cada uno.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="fileName" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The file cannot be found.</source>
          <target state="translated">No se puede encontrar el archivo.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>An I/O error has occurred.</source>
          <target state="translated">Se produjo un error de E/S.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>The resource file has an invalid format.</source>
          <target state="translated">El archivo de recursos tiene un formato no válido.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.#ctor(System.String)">
          <source>For example, the length of the file may be zero.</source>
          <target state="translated">Por ejemplo, la longitud del archivo puede ser cero.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.Close">
          <source>Releases all operating system resources associated with this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Libera todos los recursos del sistema operativo asociados a este objeto <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> can be safely called multiple times.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> puede llamarse de forma segura varias veces.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source>The following example moves through a file's resources and displays all the key/value pairs it finds.</source>
          <target state="translated">En el ejemplo siguiente se mueve a través de recursos de un archivo y muestra todos los pares de clave/valor que busca.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Close">
          <source>The code then uses the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> method to shut down the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> and to release all resources used by it.</source>
          <target state="translated">El código utiliza el <ph id="ph1">&lt;xref:System.Resources.ResourceReader.Close%2A&gt;</ph> método para cerrar la <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> y liberar todos los recursos usados por el mismo.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.Dispose">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> class.</source>
          <target state="translated">Libera todos los recursos usados por la instancia actual de la clase <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>When you are finished using this instance of <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>, call <ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> to release all resources used by this instance.</source>
          <target state="translated">Cuando haya terminado de usar esta instancia de <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph>, llame a <ph id="ph2">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> para liberar todos los recursos usados por esta instancia.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>You should eliminate further references to this <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</source>
          <target state="translated">Debe eliminar las demás referencias a este <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> para que el recolector de elementos no utilizados pueda reclamar la memoria de la instancia en lugar de mantener activo para la finalización de la instancia.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.Dispose%2A&gt;</ph> llama al método Dispose (Boolean) privado, que contiene el código para liberar recursos no administrados y no administrados.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.Dispose">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>implementa un método Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>Returns an enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Devuelve un enumerador para este objeto <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>An enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Enumerator para este objeto <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>Typically, you enumerate resources by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method and then repeatedly calling the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method on the returned <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object until the method returns <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Por lo general, enumerar los recursos mediante una llamada a la <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> método y, a continuación, al llamar repetidamente la <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> método en el valor devuelto <ph id="ph3">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> objeto hasta que el método devuelve <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The resource name is available from the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> property; its value from the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">El nombre de recurso está disponible desde el <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType&gt;</ph> propiedad; su valor desde el <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The example illustrates how to enumerate resources in this way.</source>
          <target state="translated">En el ejemplo se muestra cómo enumerar los recursos de esta manera.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The implementation of the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> property by the <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> class can throw the following exceptions:</source>
          <target state="translated">La implementación de la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType&gt;</ph> propiedad por la <ph id="ph2">&lt;xref:System.Resources.ResourceReader&gt;</ph> puede producir las excepciones siguientes:</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The assembly that contains the type to which the data belongs cannot be found.</source>
          <target state="translated">No se encuentra el ensamblado que contiene el tipo al que pertenecen los datos.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The data is not in the expected format.</source>
          <target state="translated">Los datos no están en el formato esperado.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The type to which the data belongs cannot be found.</source>
          <target state="translated">No se puede encontrar el tipo al que pertenecen los datos.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>You can handle the exception by calling the <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method to retrieve information about the data type and the byte array assigned to the named resource.</source>
          <target state="translated">Puede controlar la excepción mediante una llamada a la <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> método para recuperar información sobre el tipo de datos y la matriz de bytes que se asignan al recurso con nombre.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class topic.</source>
          <target state="translated">Para obtener más información, vea la sección "Recuperar recursos por nombre con GetResourceData" en el <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> tema de la clase.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> class includes two methods that return enumerators.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> clase incluye dos métodos que devuelven los enumeradores.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> method returns an <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> interface object and is the recommended method to call when enumerating resources.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A&gt;</ph> método devuelve un <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> objeto de la interfaz y es el método recomendado para llamar al enumerar los recursos.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The example in this section uses the following .txt file named <ph id="ph1">`PatientForm.txt`</ph> to define the resources used by an application.</source>
          <target state="translated">El ejemplo de esta sección usa el siguiente archivo .txt denominado <ph id="ph1">`PatientForm.txt`</ph> para definir los recursos utilizados por una aplicación.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>You can compile the .txt file into a .resources file by issuing the following command:</source>
          <target state="translated">Puede compilar el archivo .txt en un archivo .resources emitiendo el comando siguiente:</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>resgen PatientForm.txt<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The following example enumerates the resources in <ph id="ph1">`PatientForm.resources`</ph> and displays the name and value of each.</source>
          <target state="translated">En el ejemplo siguiente se enumeran los recursos de <ph id="ph1">`PatientForm.resources`</ph> y muestra el nombre y valor de cada uno.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetEnumerator">
          <source>The reader has been closed or disposed, and cannot be accessed.</source>
          <target state="translated">El lector se ha cerrado o se ha eliminado y no se puede obtener acceso.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The name of a resource.</source>
          <target state="translated">Nombre de un recurso.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>When this method returns, contains a string that represents the type name of the retrieved resource.</source>
          <target state="translated">El resultado que devuelve este método contiene una cadena que representa el nombre de tipo del recurso recuperado.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Este parámetro se pasa sin inicializar.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>When this method returns, contains a byte array that is the binary representation of the retrieved type.</source>
          <target state="translated">Cuando este método devuelve el control al sistema, contiene una matriz de bytes que es la representación binaria del tipo recuperado.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Este parámetro se pasa sin inicializar.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Retrieves the type name and data of a named resource from an open resource file or stream.</source>
          <target state="translated">Recupera el nombre de tipo y datos de un recurso con nombre a partir de un archivo de recursos o secuencia abierto.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> method retrieves the value of a named resource as a byte array.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Resources.ResourceReader.GetResourceData%2A&gt;</ph> método recupera el valor de un recurso con nombre como una matriz de bytes.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>It is typically used when the <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph> property throws an exception when it tries to retrieve the value of a resource.</source>
          <target state="translated">Suele utilizar cuando la <ph id="ph1">&lt;xref:System.Collections.IDictionaryEnumerator.Value%2A&gt;</ph> propiedad produce una excepción cuando intenta recuperar el valor de un recurso.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">`resourceType`</ph> is a string that represents the data type of the resource.</source>
          <target state="translated"><ph id="ph1">`resourceType`</ph> es una cadena que representa el tipo de datos del recurso.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>It can be any of the following values:</source>
          <target state="translated">Puede ser cualquiera de los siguientes valores:</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The string representation of a <ph id="ph1">`ResourceTypeCode`</ph> enumeration member that indicates the data type of the resource.</source>
          <target state="translated">La representación de cadena de un <ph id="ph1">`ResourceTypeCode`</ph> miembro de enumeración que indica el tipo de datos del recurso.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">`ResourceTypeCode`</ph> is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</source>
          <target state="translated"><ph id="ph1">`ResourceTypeCode`</ph> es una enumeración privada que se utiliza por .para indican que se usa un formato binario especial para almacenar uno de 19 tipos de datos comunes.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>These include the .NET Framework primitive data types (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>), as well as <ph id="ph14">&lt;xref:System.String&gt;</ph>, <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>, and <ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>, In addition, the <ph id="ph17">`ResourceTypeCode`</ph> enumeration includes the values shown in the following table.</source>
          <target state="translated">Se incluyen los tipos de datos primitivos de .NET Framework (<ph id="ph1">&lt;xref:System.Boolean&gt;</ph>, <ph id="ph2">&lt;xref:System.Byte&gt;</ph>, <ph id="ph3">&lt;xref:System.Char&gt;</ph>, <ph id="ph4">&lt;xref:System.Decimal&gt;</ph>, <ph id="ph5">&lt;xref:System.Double&gt;</ph>, <ph id="ph6">&lt;xref:System.Int16&gt;</ph>, <ph id="ph7">&lt;xref:System.Int32&gt;</ph>, <ph id="ph8">&lt;xref:System.Int64&gt;</ph>, <ph id="ph9">&lt;xref:System.Single&gt;</ph>, <ph id="ph10">&lt;xref:System.SByte&gt;</ph>, <ph id="ph11">&lt;xref:System.UInt16&gt;</ph>, <ph id="ph12">&lt;xref:System.UInt32&gt;</ph>, <ph id="ph13">&lt;xref:System.UInt64&gt;</ph>), así como <ph id="ph14">&lt;xref:System.String&gt;</ph>, <ph id="ph15">&lt;xref:System.DateTime&gt;</ph>, y <ph id="ph16">&lt;xref:System.TimeSpan&gt;</ph>, además, la <ph id="ph17">`ResourceTypeCode`</ph> enumeración incluye los valores mostrados en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>ResourceTypeCode value</source>
          <target state="translated">Valor de ResourceTypeCode</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Description</source>
          <target state="translated">Descripción</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is a byte array.</source>
          <target state="translated">Los datos son una matriz de bytes.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Estos datos normalmente escribe los resultados de la llamada a la <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is a null reference.</source>
          <target state="translated">Los datos son una referencia nula.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> method with an object whose value is <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Estos datos normalmente escribe los resultados de la llamada a la <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType&gt;</ph> método con un objeto cuyo valor es <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The data is stored in a stream.</source>
          <target state="translated">Los datos se almacenan en una secuencia.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>This data type commonly results from the call to the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Estos datos normalmente escribe los resultados de la llamada a la <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType&gt;</ph> o <ph id="ph2">&lt;xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <ph id="ph2">&lt;xref:System.BitConverter&gt;</ph> or <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> method.</source>
          <target state="translated">Suponiendo que <ph id="ph1">`resourceData`</ph> no ha sido dañado, normalmente se puede convertir de una matriz de bytes a su valor original mediante una llamada a un <ph id="ph2">&lt;xref:System.BitConverter&gt;</ph> o <ph id="ph3">&lt;xref:System.IO.BinaryReader&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>A string that contains the fully qualified name of the type whose serialized data is assigned to the <ph id="ph1">`resourceData`</ph> argument (for example, <ph id="ph2">`System.String`</ph>).</source>
          <target state="translated">Una cadena que contiene el nombre completo del tipo cuyos datos serializados se asignan a la <ph id="ph1">`resourceData`</ph> argumento (por ejemplo, <ph id="ph2">`System.String`</ph>).</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</source>
          <target state="translated">Además, para los tipos que no forman parte de la biblioteca de clases de .NET Framework, la cadena incluye el nombre, la versión, la referencia cultural y la clave pública del ensamblado que contiene el tipo.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>For example, the following string indicates that the serialized data represents an instance of the <ph id="ph1">`Person`</ph> type in the <ph id="ph2">`Extensions`</ph> namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</source>
          <target state="translated">Por ejemplo, la siguiente cadena indica que los datos serializados representan una instancia de la <ph id="ph1">`Person`</ph> escriba en el <ph id="ph2">`Extensions`</ph> espacio de nombres, que se encuentra en la versión 1.0 de un ensamblado denominado utilidad con ninguna clave pública y ninguna referencia cultural designada.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>Assuming that <ph id="ph1">`resourceData`</ph> has not been corrupted and that the source type is available, <ph id="ph2">`resourceData`</ph> can be converted from a byte array back to its original value by converting the byte array to a <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> object and passing the stream to the <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Suponiendo que <ph id="ph1">`resourceData`</ph> no se ha dañado y que el tipo de origen está disponible, <ph id="ph2">`resourceData`</ph> se pueden convertir de una matriz de bytes a su valor original mediante la conversión de la matriz de bytes a una <ph id="ph3">&lt;xref:System.IO.Stream&gt;</ph> objeto y se pasa a la secuencia a la <ph id="ph4">&lt;xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The string used to describe the data type in the <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType&gt;</ph> method call.</source>
          <target state="translated">La cadena que se usa para describir el tipo de datos en el <ph id="ph1">&lt;xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType&gt;</ph> llamada al método.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> no existe.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> has an invalid type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="resourceName" /&gt;</ph> tiene un tipo no válido.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The retrieved resource data is corrupt.</source>
          <target state="translated">Los datos del recurso están dañados.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)">
          <source>The current <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object is not initialized, probably because it is closed.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> actual no se ha inicializado, probablemente porque está cerrado.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Devuelve un enumerador para este objeto <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator for this <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph> object.</source>
          <target state="translated">Enumerator para este objeto <ph id="ph1">&lt;see cref="T:System.Resources.ResourceReader" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> es una implementación de interfaz explícita.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Resources.ResourceReader&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Collections.IEnumerable&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>The recommended approach to enumerating the resources in a .resources file is to call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> object returned by the <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">El método recomendado para enumerar los recursos en un archivo .resources es llamar a la <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> método de la <ph id="ph2">&lt;xref:System.Collections.IDictionaryEnumerator&gt;</ph> objeto devuelto por la <ph id="ph3">&lt;xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator">
          <source>The reader has already been closed and cannot be accessed.</source>
          <target state="translated">El lector ya se ha cerrado y no es accesible.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>