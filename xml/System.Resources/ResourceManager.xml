<Type Name="ResourceManager" FullName="System.Resources.ResourceManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d18e0d0b21e593733c17a8ad1b69a3fc64a6cfda" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30481399" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ResourceManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ResourceManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ResourceManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceManager" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un administrador de recursos que proporciona un acceso más cómodo a los recursos específicos de la referencia cultural en tiempo de ejecución.  
  
 **Nota de seguridad**: llamar a métodos en esta clase con datos que no son de confianza conlleva un riesgo de seguridad. Llame a los métodos en la clase solo con datos de confianza. Para más información, consulte [Riesgos de seguridad de datos que no son de confianza](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Resources.ResourceManager> clase recupera los recursos de un archivo .resources binario que se incrusta en un ensamblado o de un archivo .resources independiente. Si una aplicación se ha traducido y se han implementado los recursos localizados en [ensamblados satélite](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md), busca recursos específicos de la referencia cultural, proporciona un recurso de reserva cuando no existe un recurso localizado y permite la serialización de recursos.  
  
 Para obtener más información sobre cómo crear y administrar los recursos en aplicaciones de escritorio y [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, consulte las secciones siguientes:  
  
-   [Aplicaciones de escritorio](#desktop)  
  
    -   [Creación de recursos](#creating_resources)  
  
    -   [Instancias de un objeto de administrador de recursos](#instantiating)  
  
    -   [Administrador de recursos y recursos específicos de la referencia cultural](#CultureSpecific)  
  
    -   [Recuperar recursos](#retrieving)  
  
    -   [Control MissingManifestResourceException y excepciones de MissingSatelliteAssemblyException](#exception)  
  
    -   [Control de versiones de recursos](#versioning)  
  
    -   [\<satelliteassemblies > nodo de archivo de configuración](#config)  
  
-   [Aplicaciones de la tienda de Windows](#ws)  
  
<a name="desktop"></a>   
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 Para aplicaciones de escritorio, la <xref:System.Resources.ResourceManager> clase recupera los recursos de archivos de recursos binarios (.resources). Normalmente, un compilador de lenguaje o la [Assembly Linker (AL.exe)](~/docs/framework/tools/al-exe-assembly-linker.md) inserta estos archivos de recursos en un ensamblado. También puede usar un <xref:System.Resources.ResourceManager> objeto que se va a recuperar recursos directamente desde un archivo .resources que no se incrusta en un ensamblado, mediante una llamada a la <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> método.  
  
> [!CAUTION]
>  Uso de archivos .resources independientes en una aplicación ASP.NET interrumpirá la implementación mediante XCOPY, ya que los recursos permanecerán bloqueados hasta que se libere explícitamente el <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> método. Si desea implementar los recursos con sus aplicaciones ASP.NET, debe compilar los archivos .resources en ensamblados satélite.  
  
 En una aplicación basada en recursos, un archivo .resources contiene los recursos de la referencia cultural predeterminada cuyos recursos se usan si no se encuentra ningún recursos específicos de la referencia cultural. Por ejemplo, si la referencia cultural predeterminada de una aplicación es inglés (en), se utilizan los recursos de idioma inglés siempre que no se puede encontrar los recursos localizados para una referencia cultural concreta, como inglés (Estados Unidos) (en-US) o francés (Francia) (fr-FR). Normalmente, los recursos de la referencia cultural predeterminada se incrustan en el ensamblado principal de la aplicación y los recursos para otras referencias culturales localizados se incrustan en los ensamblados satélite. Los ensamblados satélite contienen recursos solo. Tienen el mismo nombre de archivo raíz que el ensamblado principal y una extensión de. resources.dll. Para las aplicaciones cuyos ensamblados no están registrados en la caché global de ensamblados, los ensamblados satélite se almacenan en un subdirectorio de aplicación cuyo nombre se corresponde con la referencia cultural del ensamblado.  
  
<a name="creating_resources"></a>   
### <a name="creating-resources"></a>Creación de recursos  
 Al desarrollar una aplicación basada en recursos, almacenar información de recursos en archivos de texto (archivos que tienen una extensión .txt o .restext) o archivos XML (archivos que tienen la extensión .resx). A continuación, compile el texto o archivos XML con la [generador de archivos de recursos (Resgen.exe)](~/docs/framework/tools/resgen-exe-resource-file-generator.md) para crear un archivo .resources binario. A continuación, puede incrustar el archivo .resources resultante en un archivo ejecutable o biblioteca mediante una opción del compilador como `/resources` para los compiladores de C# y Visual Basic, o puede incrustarlo en un ensamblado satélite utilizando el. Si incluye un archivo .resx en el proyecto de Visual Studio, Visual Studio controla la compilación y la incrustación de forma predeterminada y los recursos localizados automáticamente como parte del proceso de compilación.  
  
 Idealmente, debe crear los recursos para cada idioma la aplicación es compatible con, o al menos para un subconjunto significativo de cada lenguaje. Los nombres de archivo .resources binario siguen la convención de nomenclatura *basename*.* cultureName*".resources", donde *basename* es el nombre de la aplicación o el nombre de una clase, según el nivel de detalle que desee. El <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propiedad se utiliza para determinar *cultureName*. Un recurso para la referencia cultural predeterminada de la aplicación debe tener un nombre *basename*".resources".  
  
 Por ejemplo, supongamos que un ensamblado tiene varios recursos en un archivo de recursos que tiene el nombre base MyResources. Estos archivos de recursos deberían tener nombres como MyResources.ja-JP.resources para la referencia cultural japonés (Japón), MyResources.de.resources para la configuración regional alemana, MyResources.zh-CHS.resources para la referencia cultural de chino simplificado y MyResources.fr-BE.resources para la referencia cultural Francés (Bélgica). El archivo de recursos predeterminado debe denominarse MyResources.resources. Normalmente, los archivos de recursos específicos de la referencia cultural se empaquetan en ensamblados satélite para cada referencia cultural. El archivo de recursos predeterminado debe estar incrustado en el ensamblado principal de la aplicación.  
  
 Tenga en cuenta que permite a los recursos se marque como privado, pero siempre debe marcarlas como público por lo que puede tener acceso a otros ensamblados. (Dado que un ensamblado satélite no contiene ningún código, recursos que están marcados como privado no están disponibles a la aplicación mediante cualquier mecanismo.)  
  
 Para obtener más información acerca de cómo crear, empaquetar e implementar recursos, vea los artículos [crear archivos de recursos](~/docs/framework/resources/creating-resource-files-for-desktop-apps.md), [crear ensamblados satélite](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md), y [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
<a name="instantiating"></a>   
### <a name="instantiating-a-resourcemanager-object"></a>Instancias de un objeto de administrador de recursos  
 Cree instancias de un <xref:System.Resources.ResourceManager> objeto que recupera los recursos de un archivo .resources incrustado llamando a una de las sobrecargas del constructor de clase. Esto asocia estrictamente un <xref:System.Resources.ResourceManager> objeto con un archivo .resources determinado y con cualquier asociado localizar archivos .resources en ensamblados satélite.  
  
 Los dos constructores llamados normalmente son:  
  
-   <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> busca recursos en función de dos partes de información que suministre: el nombre base del archivo .resources y el ensamblado en el que reside el archivo .resources de forma predeterminada. El nombre base incluye el nombre de raíz y espacio de nombres del archivo .resources, sin su referencia cultural o la extensión. Tenga en cuenta que los archivos .resources que se compilen a partir de la línea de comandos normalmente no incluyen un nombre de espacio de nombres, mientras que lo hacen .resources (archivos) que se crean en el entorno de Visual Studio. Por ejemplo, si un archivo de recursos se denomina MyCompany.StringResources.resources y <xref:System.Resources.ResourceManager> constructor se llama desde un método estático denominado `Example.Main`, el código siguiente crea una instancia una <xref:System.Resources.ResourceManager> objeto que puede recuperar los recursos desde el archivo .resources:  
  
     [!code-csharp[Conceptual.Resources.Retrieving#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#1)]
     [!code-vb[Conceptual.Resources.Retrieving#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#1)]  
  
-   <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> busca recursos en los ensamblados satélite en función de información desde un objeto de tipo. Nombre completo del tipo se corresponde con el nombre base del archivo .resources sin la extensión de nombre de archivo. En aplicaciones de escritorio que se crean mediante el Diseñador de recursos de Visual Studio, Visual Studio crea una clase de contenedor cuyo nombre completo es el mismo que el nombre de raíz del archivo .resources. Por ejemplo, si un archivo de recursos se denomina MyCompany.StringResources.resources y hay una clase de contenedor denominada `MyCompany.StringResources`, el código siguiente crea un <xref:System.Resources.ResourceManager> objeto que puede recuperar los recursos desde el archivo .resources:  
  
     [!code-csharp[Conceptual.Resources.Retrieving#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#2)]
     [!code-vb[Conceptual.Resources.Retrieving#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#2)]  
  
 Si no se puede encontrar los recursos adecuados, la llamada al constructor crea válido <xref:System.Resources.ResourceManager> objeto. Sin embargo, se produce al intentar recuperar un recurso de un <xref:System.Resources.MissingManifestResourceException> excepción. Para obtener información sobre cómo gestionar la excepción, consulte el [control MissingManifestResourceException y excepciones de MissingSatelliteAssembly](#exception) sección más adelante en este artículo.  
  
 En el ejemplo siguiente se muestra cómo crear una instancia de un <xref:System.Resources.ResourceManager> objeto. Contiene el código fuente de un archivo ejecutable denominado ShowTime.exe. También incluye el siguiente archivo de texto denominado Strings.txt que contiene un recurso de cadena único, `TimeHeader`:  
  
```  
TimeHeader=The current time is  
```  
  
 Puede utilizar un archivo por lotes para generar el archivo de recursos e insertar en el archivo ejecutable. Este es el archivo por lotes para generar un archivo ejecutable mediante el compilador de C#:  
  
```  
  
resgen strings.txt  
csc ShowTime.cs /resource:strings.resources  
  
```  
  
 Para que el compilador de Visual Basic, puede usar el siguiente archivo por lotes:  
  
```  
  
resgen strings.txt  
vbc ShowTime.vb /resource:strings.resources  
  
```  
  
 [!code-csharp[System.Resources.ResourceManager.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showtime.cs#1)]
 [!code-vb[System.Resources.ResourceManager.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showtime.vb#1)]  
  
<a name="CultureSpecific"></a>   
### <a name="resourcemanager-and-culture-specific-resources"></a>Administrador de recursos y recursos específicos de la referencia cultural  
 Una aplicación localizada requiere recursos para su implementación, como se describe en el artículo [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md). Si los ensamblados se han configurado correctamente, el Administrador de recursos determina qué recursos recuperar basándose en el subproceso actual <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad. (Esta propiedad también devuelve referencia cultural de interfaz de usuario del subproceso actual). Por ejemplo, si una aplicación se compila con predeterminado recursos del idioma inglés en el ensamblado principal y con los recursos de idioma francés y ruso de dos ensamblados satélite y el <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad se establece en fr-FR, el Administrador de recursos recupera los recursos en francés.  
  
 Puede establecer el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propiedad explícita o implícitamente. La manera en que se establece determina cómo el <xref:System.Resources.ResourceManager> objeto recupera los recursos basados en la referencia cultural:  
  
-   Si se establece explícitamente el <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad a una referencia cultural concreta, el Administrador de recursos siempre recupera los recursos para esa referencia cultural, independientemente del idioma de un explorador o sistema operativo del usuario. Considere la posibilidad de una aplicación que se compila con los recursos predeterminados del idioma inglés y tres ensamblados satélite que contienen recursos de inglés (Estados Unidos), francés (Francia) y ruso (Rusia). Si el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propiedad se establece en fr-FR, la <xref:System.Resources.ResourceManager> objeto siempre recupera los recursos de francés (Francia), incluso si el usuario operativo del idioma del sistema no es francés. Asegúrese de que éste es el comportamiento deseado antes de establecer la propiedad explícitamente.  
  
     En las aplicaciones ASP.NET, debe establecer el <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad explícitamente, porque es improbable que la configuración en el servidor coincida con las solicitudes de cliente entrantes. Una aplicación ASP.NET puede establecer la <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> idioma aceptado por propiedad explícitamente en el explorador del usuario.  
  
     Cuando se establece explícitamente el <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad define la referencia cultural de interfaz de usuario actual para ese subproceso. No afecta a la referencia cultural de interfaz de usuario actual de todos los demás subprocesos en una aplicación.  
  
-   Puede establecer la referencia cultural de interfaz de usuario de todos los subprocesos en un dominio de aplicación mediante la asignación de un <xref:System.Globalization.CultureInfo> objeto que representa esa referencia cultural estático <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> propiedad.  
  
-   Si no establece explícitamente la referencia cultural de interfaz de usuario actual y no se define una referencia cultural predeterminada para el dominio de aplicación actual, el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad se establece implícitamente por las ventanas `GetUserDefaultUILanguage` función. Esta función se proporciona por la interfaz de usuario multilingüe (MUI), lo que permite al usuario establecer el idioma predeterminado. Si el usuario no establece el idioma de interfaz de usuario, el valor predeterminado es el idioma instalado por el sistema, que es el idioma de recursos del sistema operativo.  
  
 El siguiente ejemplo simple "Hola a todos" establece explícitamente la referencia cultural de interfaz de usuario actual. Contiene recursos para tres referencias culturales: inglés (Estados Unidos) o en-US, francés (Francia) o fr-FR y ruso (Rusia) o ru-RU. Los recursos de en-US se incluyen en un archivo de texto denominado Greetings.txt:  
  
```  
HelloString=Hello world!  
```  
  
 Los recursos de fr-FR están contenidos en un archivo de texto denominado Greetings.fr-FR.txt:  
  
```  
HelloString=Salut tout le monde!  
```  
  
 Los recursos de ru-RU están contenidos en un archivo de texto denominado Greetings.ru-RU.txt:  
  
```  
HelloString=Всем привет!  
```  
  
 Este es el código de origen para el ejemplo (Example.vb para la versión de Visual Basic) o Example.cs para la versión de C#:  
  
 [!code-csharp[Conceptual.Resources.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.currentculture/cs/example.cs#1)]
 [!code-vb[Conceptual.Resources.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.currentculture/vb/example.vb#1)]  
  
 Para compilar este ejemplo, cree un archivo por lotes (.bat) que contiene los siguientes comandos y ejecútelo desde la línea de comandos. Si está utilizando C#, especifique `csc` en lugar de `vbc` y `Example.cs` en lugar de `Example.vb`.  
  
```  
resgen Greetings.txt   
vbc Example.vb /resource:Greetings.resources  
  
resgen Greetings.fr-FR.txt  
Md fr-FR  
al /embed:Greetings.fr-FR.resources /culture:fr-FR /out:fr-FR\Example.resources.dll  
  
resgen Greetings.ru-RU.txt  
Md ru-RU  
al /embed:Greetings.ru-RU.resources /culture:ru-RU /out:ru-RU\Example.resources.dll  
```  
  
<a name="retrieving"></a>   
### <a name="retrieving-resources"></a>Recuperar recursos  
 Se llama a la <xref:System.Resources.ResourceManager.GetObject%28System.String%29> y <xref:System.Resources.ResourceManager.GetString%28System.String%29> métodos para tener acceso a un recurso concreto. También puede llamar a la <xref:System.Resources.ResourceManager.GetStream%28System.String%29> método para recuperar los recursos que no son de cadena como una matriz de bytes. De forma predeterminada, en una aplicación que se adaptado recursos, estos métodos devuelven el recurso para la referencia cultural determinada por la referencia cultural de interfaz de usuario actual del subproceso que realizó la llamada. Vea la sección anterior, [ResourceManager y recursos específicos de la referencia cultural](#CultureSpecific), para obtener más información acerca de cómo se define la referencia cultural de interfaz de usuario actual de un subproceso. Si el Administrador de recursos no encuentra el recurso para la referencia cultural de interfaz de usuario del subproceso actual, utiliza un proceso de reserva para recuperar el recurso especificado. Si el Administrador de recursos no puede encontrar los recursos localizados, utiliza los recursos de la referencia cultural predeterminada. Para obtener más información acerca de las reglas de reserva de recursos, vea la sección "Proceso de reserva de recursos" del artículo [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
> [!NOTE]
>  Si el archivo .resources especificado en el <xref:System.Resources.ResourceManager> no se puede encontrar el constructor de clase, al intentar recuperar un recurso produce un <xref:System.Resources.MissingManifestResourceException> o <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Para obtener información sobre cómo gestionar la excepción, consulte el [control MissingManifestResourceException y excepciones MissingSatelliteAssemblyException](#exception) sección más adelante en este tema.  
  
 En el ejemplo siguiente se usa el <xref:System.Resources.ResourceManager.GetString%2A> método para recuperar recursos específicos de la referencia cultural. Consta de los recursos que se compila a partir de los archivos .txt de inglés (en), francés (Francia) (fr-FR) y ruso (Rusia) (ru-RU) según la referencia cultural. En el ejemplo se cambia la referencia cultural actual y la referencia cultural de interfaz de usuario actual a inglés (Estados Unidos), francés (Francia), ruso (Rusia) y sueco (Suecia). A continuación, llama el <xref:System.Resources.ResourceManager.GetString%2A> método para recuperar la cadena localizada, que muestra junto con el día actual y el mes. Observe que la salida muestra la cadena localizada adecuada salvo cuando la referencia cultural de interfaz de usuario actual es Sueco (Suecia). Dado que no están disponibles los recursos de idioma sueco, la aplicación en su lugar, utiliza los recursos de la referencia cultural predeterminada, que es el inglés.  
  
 El ejemplo requiere los archivos de recursos basados en texto aparece en la tabla siguiente. Cada uno tiene un recurso de cadena único denominado `DateStart`.  
  
|culture|Nombre del archivo|Nombre del recurso|Valor del recurso|  
|-------------|---------------|-------------------|--------------------|  
|en-US|DateStrings.txt|`DateStart`|Hoy es|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui, le c'est|  
|ru-RU|DateStrings.ru-RU.txt|`DateStart`|Сегодня|  
  
 Este es el código de origen para el ejemplo (ShowDate.vb para la versión de Visual Basic) o ShowDate.cs para la versión de C# del código.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)]
 [!code-vb[System.Resources.ResourceManager.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)]  
  
 Para compilar este ejemplo, cree un archivo por lotes que contiene los siguientes comandos y ejecútelo desde la línea de comandos. Si está utilizando C#, especifique `csc` en lugar de `vbc` y `showdate.cs` en lugar de `showdate.vb`.  
  
```  
  
resgen DateStrings.txt  
vbc showdate.vb /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
  
```  
  
 Hay dos maneras de recuperar los recursos de una referencia cultural específica que no sea la referencia cultural de interfaz de usuario actual:  
  
-   Puede llamar a la <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>, <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29>, o <xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29> método para recuperar un recurso para una referencia cultural concreta. Si no se encuentra un recurso localizado, el Administrador de recursos usa el proceso de reserva de recursos para buscar un recurso adecuado.  
  
-   Puede llamar a la <xref:System.Resources.ResourceManager.GetResourceSet%2A> método para obtener un <xref:System.Resources.ResourceSet> objeto que representa los recursos para una referencia cultural determinada. En la llamada de método, puede determinar si el Administrador de recursos sondea según la referencia cultural principal si no ha podido encontrar recursos localizados, o si simplemente recurre a los recursos de la referencia cultural predeterminada. A continuación, puede usar el <xref:System.Resources.ResourceSet> métodos para tener acceso a los recursos (adaptados a esa referencia cultural) por su nombre, o para enumerar los recursos en el conjunto.  
  
<a name="exception"></a>   
### <a name="handling-missingmanifestresourceexception-and-missingsatelliteassemblyexception-exceptions"></a>Control MissingManifestResourceException y excepciones de MissingSatelliteAssemblyException  
 Si se intenta recuperar un recurso específico, pero no se puede encontrar el Administrador de recursos que se ha definido ninguna referencia cultural de forma predeterminada y de recursos o los recursos de la referencia cultural predeterminada no se encuentra, inicia el Administrador de recursos una <xref:System.Resources.MissingManifestResourceException> excepción si se espera encontrar los recursos en el ensamblado principal o un <xref:System.Resources.MissingSatelliteAssemblyException> si espera encontrar los recursos en un ensamblado satélite. Tenga en cuenta que la excepción se produce cuando se llama a un método de recuperación de recursos como <xref:System.Resources.ResourceManager.GetString%2A> o <xref:System.Resources.ResourceManager.GetObject%2A>, y no cuando crea una instancia una <xref:System.Resources.ResourceManager> objeto.  
  
 La excepción se produce normalmente en las siguientes condiciones:  
  
-   No existe el ensamblado de archivo o satélite de recursos apropiado. Si el Administrador de recursos espera que los recursos de la aplicación predeterminada para incrustar en el ensamblado principal de la aplicación, aparecen. Si el <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo indica que los recursos predeterminados de la aplicación se encuentran en un ensamblado satélite, que no se puede encontrar el ensamblado. Cuando se compila la aplicación, asegúrese de que los recursos se incrustan en el ensamblado principal o que el ensamblado satélite necesario se genera y se denomina de forma adecuada. Su nombre debe tener el formato *appName*. resources.dll y deben encontrarse en un directorio llamado después de la referencia cultural cuyos recursos contiene.  
  
-   La aplicación no tiene una referencia cultural neutra definido o predeterminada. Agregar el <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo a un archivo de código fuente o al archivo de archivo (AssemblyInfo.vb para una aplicación de Visual Basic) o AssemblyInfo.cs para una aplicación de C# de información del proyecto.  
  
-   El `baseName` parámetro en el <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> constructor no especifica el nombre de un archivo .resources. El nombre debe incluir el espacio de nombres completo del archivo de recursos pero no su extensión de nombre de archivo. Normalmente, archivos de recursos que se crean en Visual Studio incluyen espacios de nombres, pero no los archivos de recursos que se crean y se compilan en el símbolo del sistema. Puede determinar los nombres de archivos .resources insertados, compile y ejecute la siguiente utilidad. Se trata de una aplicación de consola que acepta el nombre de un ensamblado principal o un ensamblado satélite como un parámetro de línea de comandos. Muestra las cadenas que se deben proporcionar como el `baseName` parámetro para que el Administrador de recursos puede identificar correctamente el recurso.  
  
     [!code-csharp[System.Resources.ResourceManager.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)]
     [!code-vb[System.Resources.ResourceManager.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)]  
  
 Si va a cambiar explícitamente la referencia cultural actual de la aplicación, también debe recordar que el Administrador de recursos recupera un conjunto de recursos en función del valor de la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad y no el <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propiedad. Por lo general, si cambia un valor, también debe cambiar la otra.  
  
<a name="versioning"></a>   
### <a name="resource-versioning"></a>Control de versiones de recursos  
 Dado que el ensamblado principal que contiene los recursos de forma predeterminada de una aplicación es independiente de los ensamblados satélite de la aplicación, puede liberar una nueva versión del ensamblado principal sin volver a implementar los ensamblados satélite. Usa el <xref:System.Resources.SatelliteContractVersionAttribute> atributo usar los ensamblados satélite existentes e indicar a no para volver a implementarlos con una nueva versión del ensamblado principal, el Administrador de recursos  
  
 Para obtener más información sobre la compatibilidad con las versiones de los ensamblados satélite, vea el artículo [recuperar recursos](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md).  
  
<a name="config"></a>   
### <a name="satelliteassemblies-configuration-file-node"></a>\<satelliteassemblies > nodo de archivo de configuración  
 Para los archivos ejecutables que se implementan y ejecutar desde un sitio Web (archivos .exe HREF), la <xref:System.Resources.ResourceManager> objeto puede sondear los ensamblados satélite en la web, lo que puede afectar al rendimiento de la aplicación. Para eliminar el problema de rendimiento, puede limitar este sondeo a los ensamblados satélite que haya implementado con la aplicación. Para ello, se crea un `<satelliteassemblies>` nodo en el archivo de configuración de la aplicación para especificar que ha implementado un conjunto de referencias culturales específicas para la aplicación y que la <xref:System.Resources.ResourceManager> objeto no debe intentar buscar cualquier referencia cultural que no aparece en ese nodo.  
  
> [!NOTE]
>  La alternativa preferida a la creación de un `<satelliteassemblies>` nodo consiste en utilizar el [manifiesto de implementación de ClickOnce](http://msdn.microsoft.com/library/8457e615-e3b6-4990-8dcf-11bc590e4e9b) característica.  
  
 En el archivo de configuración de la aplicación, cree una sección similar al siguiente:  
  
```  
<?xml version ="1.0"?>  
<configuration>  
    <satelliteassemblies>  
        <assembly name="MainAssemblyName, Version=versionNumber, Culture=neutral, PublicKeyToken=null|yourPublicKeyToken">  
            <culture>cultureName1</culture>  
            <culture>cultureName2</culture>  
            <culture>cultureName3</culture>  
        </assembly>  
    </satelliteassemblies>  
</configuration>  
```  
  
 Edite esta información de configuración como sigue:  
  
-   Especifique uno o varios `<assembly>` nodos para cada ensamblado principal que implemente, donde cada nodo especifica un nombre de ensamblado completo. Especifique el nombre del ensamblado principal en lugar de *nombre de ensamblado principal*y especifique la `Version`, `PublicKeyToken`, y `Culture` valores de atributo que corresponden al ensamblado principal.  
  
     Para el `Version` de atributo, especifique el número de versión del ensamblado. Por ejemplo, la primera versión del ensamblado podría ser un número de versión 1.0.0.0.  
  
     Para el `PublicKeyToken` atributo, especifique la palabra clave `null` si no se ha registrado el ensamblado con un nombre seguro, o si especifica el token de clave pública si ha firmado el ensamblado.  
  
     Para el `Culture` atributo, especifique la palabra clave `neutral` para designar el ensamblado principal y provocar la <xref:System.Resources.ResourceManager> clase para buscar solo las referencias culturales enumeradas en la `<culture>` nodos.  
  
     Para obtener más información acerca de los nombres de ensamblado completo, vea el artículo [nombres de ensamblado](~/docs/framework/app-domains/assembly-names.md). Para obtener más información acerca de los ensamblados con nombre seguro, vea el artículo [crear y utilizar ensamblados](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).  
  
-   Especifique uno o varios `<culture>` nodos con un nombre de referencia cultural concreta, como "fr-FR", o un nombre de referencia cultural neutra, como "fr".  
  
 Si se necesitan recursos para cualquier ensamblado que no aparece en la `<satelliteassemblies>` nodo, la <xref:System.Resources.ResourceManager> clase sondeos para referencias culturales con reglas de búsqueda estándares.  
  
<a name="ws"></a>   
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque la <xref:System.Resources.ResourceManager> clase es compatible con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que pueden utilizarse con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 Para [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, la <xref:System.Resources.ResourceManager> clase recupera los recursos de archivos de índice (PRI) del recurso de paquete. Un único archivo PRI (el archivo PRI del paquete de aplicación) contiene los recursos para la referencia cultural predeterminada y cualquier adaptado según la referencia cultural. Utilice la utilidad MakePRI para crear un archivo PRI desde uno o varios archivos de recursos que están en formato de recursos (.resw) de XML. Para los recursos que se incluyen en un proyecto de Visual Studio, Visual Studio controla el proceso de crear y empaquetar el archivo PRI automáticamente. A continuación, puede usar .NET Framework <xref:System.Resources.ResourceManager> clase para tener acceso a recursos de la biblioteca o de la aplicación.  
  
 Puede crear instancias de un <xref:System.Resources.ResourceManager> de objeto para un [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicación de la misma manera que en una aplicación de escritorio.  
  
 A continuación, puede tener acceso a los recursos para una referencia cultural concreta, pasando el nombre del recurso que se va a recuperar para el <xref:System.Resources.ResourceManager.GetString%28System.String%29> método. De forma predeterminada, este método devuelve el recurso para la referencia cultural determinada por la referencia cultural de interfaz de usuario actual del subproceso que realizó la llamada. También puede recuperar los recursos para una referencia cultural concreta, pasando el nombre del recurso y un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo recurso se va a recuperar para el <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> método. Si no se encuentra el recurso para la referencia cultural de interfaz de usuario actual o la referencia cultural especificada, el Administrador de recursos usa una lista de reserva de idioma de interfaz de usuario para buscar un recurso adecuado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar una referencia cultural explícita y la referencia cultural implícita de la interfaz de usuario actual para obtener recursos de cadena de un ensamblado principal y un ensamblado satélite. Para obtener más información, vea la sección "Directorio ubicaciones de satélite ensamblados no instalados en la caché Global de ensamblados" de la [crear ensamblados satélite](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) tema.  
  
 Para ejecutar este ejemplo:  
  
1.  En el directorio de la aplicación, cree un archivo denominado rmc.txt que contiene las cadenas de recursos siguientes:  
  
    ```  
  
    day=Friday  
    year=2006  
    holiday="Cinco de Mayo"  
  
    ```  
  
2.  Use la [generador de archivos de recursos](~/docs/framework/tools/resgen-exe-resource-file-generator.md) para generar el archivo de recursos de rmc.resources desde el archivo de entrada de rmc.txt como se indica a continuación:  
  
    ```  
    resgen rmc.txt  
    ```  
  
3.  Cree un subdirectorio del directorio de aplicación y asígnele el nombre "es-MX". Este es el nombre de referencia cultural del ensamblado satélite que creará en los siguientes tres pasos.  
  
4.  Cree un archivo denominado rmc.es-MX.txt en el directorio es-MX que contiene las cadenas de recursos siguientes:  
  
    ```  
  
    day=Viernes  
    year=2006  
    holiday="Cinco de Mayo"  
  
    ```  
  
5.  Use la [generador de archivos de recursos](~/docs/framework/tools/resgen-exe-resource-file-generator.md) para generar el archivo de recursos rmc.es MX.resources desde el archivo de entrada de rmc.es MX.txt como se indica a continuación:  
  
    ```  
    resgen rmc.es-MX.txt  
    ```  
  
6.  Suponga que el nombre de archivo para este ejemplo es rmc.vb o rmc.cs. Copie el siguiente código fuente en un archivo. A continuación, compilarlo e incrustar el archivo de recursos de ensamblado principal, rmc.resources, en el ensamblado ejecutable. Si está utilizando el compilador de Visual Basic, la sintaxis es:  
  
    ```  
    vbc rmc.vb /resource:rmc.resources  
    ```  
  
     La sintaxis correspondiente para el compilador de C# es:  
  
    ```  
    csc /resource:rmc.resources rmc.cs  
    ```  
  
7.  Use la [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) para crear un ensamblado satélite. Si el nombre de base de la aplicación es rmc, el nombre del ensamblado satélite debe ser rmc.resources.dll. El ensamblado satélite debe crearse en el directorio es-MX. Si es-MX es el directorio actual, use este comando:  
  
    ```  
    al /embed:rmc.es-MX.resources /c:es-MX /out:rmc.resources.dll   
    ```  
  
8.  Ejecute rmc.exe para obtener y mostrar las cadenas de recursos incrustado.  
  
 [!code-csharp[ResourceManager_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/ResourceManager_Class/cs/rmc.cs#1)]
 [!code-vb[ResourceManager_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ResourceManager_Class/vb/rmc.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para la ejecución de subprocesos.</threadsafe>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
    <altmember cref="T:System.Resources.SatelliteContractVersionAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Resources.ResourceManager" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ResourceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ResourceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Resources.ResourceManager" /> con valores predeterminados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor sólo es útil si escribir su propia clase que deriva de la <xref:System.Resources.ResourceManager> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (Type resourceSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type resourceSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resourceSource As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(Type ^ resourceSource);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resourceSource" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="resourceSource">Tipo a partir del cual el administrador de recursos deriva toda la información para buscar archivos .resources.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Resources.ResourceManager" /> que busca recursos en los ensamblados satélite a partir de la información del objeto de tipo especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 En aplicaciones de escritorio, el Administrador de recursos usa la `resourceSource` parámetro para cargar un archivo de recursos determinado como sigue:  
  
-   Si el <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo no se utiliza para indicar que los recursos de la referencia cultural predeterminada que se encuentran en un ensamblado satélite, el Administrador de recursos se da por supuesto que el archivo de recursos para la referencia cultural predeterminada se encuentra en el mismo ensamblado que el tipo especificado por el `resourceSource` parámetro.  
  
-   El Administrador de recursos se da por supuesto que el archivo de recursos predeterminado tiene el mismo nombre base que el tipo especificado por el `resourceSource` parámetro.  
  
-   El Administrador de recursos usa el valor predeterminado <xref:System.Resources.ResourceSet> clase para manipular el archivo de recursos.  
  
 Por ejemplo, dado un tipo denominado MyCompany.MyProduct.MyType, busca el Administrador de recursos de un archivo .resources denominado MyCompany.MyProduct.MyType.resources en el ensamblado que define MyType.  
  
 En Visual Studio, el Diseñador de recursos genera automáticamente el código que define un `internal` (en C#) o `Friend` (en Visual Basic), clase cuyo nombre es el mismo que el nombre base del archivo .resources de la referencia cultural predeterminada. Esto permite crear una instancia de un <xref:System.Resources.ResourceManager> de objetos y acoplarlo con un determinado conjunto de recursos obteniendo un objeto de tipo cuyo nombre se corresponde con el nombre del recurso, porque siempre que la clase sea visible para el compilador, los recursos deben ser también. Por ejemplo, si un archivo .resources se denomina Resource1, la siguiente instrucción crea una instancia de un <xref:System.Resources.ResourceManager> objeto para administrar el archivo .resources denominado Resource1:  
  
 [!code-csharp[System.Resources.ResourceManager.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/ctor1.cs#2)]  
  
 Si no está utilizando Visual Studio, puede crear una clase sin miembros cuyo nombre y espacio de nombres son los mismos que los que el archivo .resources de forma predeterminada. En este ejemplo se ilustra.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque la <xref:System.Resources.ResourceManager> clase es compatible con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que pueden utilizarse con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 En [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, <xref:System.Resources.ResourceManager> usa el `resourceSource` parámetro deducir el ensamblado, el nombre base y el espacio de nombres donde los elementos de recursos pueden encontrarse en el archivo de índice (PRI) de recurso de paquete de la aplicación. Por ejemplo, dado un tipo denominado MyCompany.MyProduct.MyType que se define en `MyAssembly`, el Administrador de recursos busca un recurso establece identificador denominado MyAssembly y busca un ámbito MyCompany.MyProduct.MyType dentro de ese conjunto de recursos. Busca en el Administrador de recursos para los elementos de recurso en el contexto predeterminado (referencia cultural actual, la configuración de contraste alto actual etc.) dentro de este ámbito.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> constructor para crear instancias de un <xref:System.Resources.ResourceManager> objeto. Consta de los recursos que se compila a partir de los archivos .txt de inglés (en), francés (Francia) (fr-FR) y ruso (Rusia) (ru-RU) según la referencia cultural. En el ejemplo se cambia la referencia cultural actual y la referencia cultural de interfaz de usuario actual a inglés (Estados Unidos), francés (Francia), ruso (Rusia) y sueco (Suecia). A continuación, llama el <xref:System.Resources.ResourceManager.GetString%28System.String%29> método para recuperar la cadena localizada, que mostrará un saludo que depende de la hora del día.  
  
 El ejemplo requiere tres archivos de recursos basados en texto, como se muestra en la tabla siguiente. Cada archivo incluye recursos de cadena denominados `Morning`, `Afternoon`, y `Evening`.  
  
|culture|Nombre del archivo|Nombre del recurso|Valor del recurso|  
|-------------|---------------|-------------------|--------------------|  
|en-US|GreetingResources.txt|`Morning`|Buenos días|  
|en-US|GreetingResources.txt|`Afternoon`|Buenas tardes|  
|en-US|GreetingResources.txt|`Evening`|Buenas noches|  
|fr-FR|GreetingResources.fr-FR.txt|`Morning`|¡Bonjour|  
|fr-FR|GreetingResources.fr-FR.txt|`Afternoon`|¡Bonjour|  
|fr-FR|GreetingResources.fr-FR.txt|`Evening`|Bonsoir|  
|ru-RU|GreetingResources.ru RU.txt|`Morning`|Доброе утро|  
|ru-RU|GreetingResources.ru RU.txt|`Afternoon`|Добрый день|  
|ru-RU|GreetingResources.ru RU.txt|`Evening`|ДОБРЫЙ ВЕЧЕР|  
  
 Puede usar el siguiente archivo por lotes para compilar el ejemplo de Visual Basic y crear un archivo ejecutable denominado Greet.exe. Para compilar con C#, cambie el nombre del compilador de `vbc` a `csc` y la extensión de archivo de `.vb` a `.cs`.  
  
```  
  
resgen GreetingResources.txt  
vbc Greet.vb /resource: GreetingResources.resources  
  
md fr-FR  
resgen GreetingResources.fr-FR.txt  
al /out:fr-FR\Greet.resources.dll /culture:fr-FR /embed: GreetingResources.fr-FR.resources   
  
md ru-RU  
resgen GreetingResources.ru-RU.txt  
al /out:ru-RU\Greet.resources.dll /culture:ru-RU /embed: GreetingResources.ru-RU.resources  
  
```  
  
 Este es el código de origen para el ejemplo (ShowDate.vb para la versión de Visual Basic) o ShowDate.cs para la versión de C# del código.  
  
 [!code-csharp[System.Resources.ResourceManager.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/greet.cs#3)]
 [!code-vb[System.Resources.ResourceManager.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/vb/greet.vb#3)]  
  
 Además de definir una clase de aplicación denominado `Example`, el código fuente define una clase interna cuyo nombre `GreetingResources`, es el mismo que el nombre de base de los archivos de recursos. Esto permite crear instancias de correctamente un <xref:System.Resources.ResourceManager> objeto mediante una llamada a la <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> constructor.  
  
 Observe que la muestra de salida adaptado adecuado cadena excepto cuando la referencia cultural de interfaz de usuario actual es Sueco (Suecia), en cuyo caso utiliza recursos del idioma inglés. Dado que no están disponibles los recursos de idioma sueco, la aplicación usa los recursos de la referencia cultural predeterminada, tal como se define por la <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo, en su lugar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="resourceSource" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (string baseName, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseName, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(System::String ^ baseName, System::Reflection::Assembly ^ assembly);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="baseName">Nombre de raíz del archivo de recursos sin su extensión pero con cualquier nombre de espacio de nombres completo. Por ejemplo, el nombre de raíz para el archivo de recursos denominado "MyApplication.MyResource.en-US.resources" es "MyApplication.MyResource".</param>
        <param name="assembly">Ensamblado principal de los recursos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Resources.ResourceManager" /> que busca los recursos que contienen los archivos con el nombre raíz especificado, en el objeto dado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 En aplicaciones de escritorio, los archivos de recursos de referencia cultural individuales deben incluirse en los ensamblados satélite y archivo de recursos de la referencia cultural de forma predeterminada debe incluirse en el ensamblado principal. Un ensamblado satélite se supone que contiene recursos de una única referencia cultural especificada en el manifiesto de ese ensamblado y se carga según sea necesario.  
  
> [!NOTE]
>  Para recuperar recursos de archivos .resources directamente en lugar de recuperarlos desde ensamblados, se debe llamar a la <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> método en su lugar para crear instancias de un <xref:System.Resources.ResourceManager> objeto.  
  
 Si el archivo de recursos identificados por `baseName` no se encuentra en `assembly`, el método crea un <xref:System.Resources.ResourceManager> objeto, pero al intentar recuperar un recurso concreto produce una excepción, normalmente <xref:System.Resources.MissingManifestResourceException>. Para obtener información acerca de cómo diagnosticar la causa de la excepción, vea la sección "Control the MissingManifestResourceException (excepción)" de la <xref:System.Resources.ResourceManager> tema de la clase.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque la <xref:System.Resources.ResourceManager> clase es compatible con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que pueden utilizarse con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 En [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, el Administrador de recursos usa el nombre sencillo de la `assembly` parámetro para buscar un recurso coincidente se establece en el archivo de índice (PRI) de recurso de paquete de la aplicación. El `baseName` parámetro se utiliza para buscar un elemento de recurso en el conjunto de recursos. Por ejemplo, el nombre de raíz para PortableLibrary1.Resource1.de-DE.resources es PortableLibrary1.Resource1.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza una aplicación de "Hello World" simple no localizada para ilustrar la <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> constructor. A continuación muestra el contenido de un archivo de texto denominado ExampleResources.txt. Cuando se compila la aplicación, el recurso se incrusta en el ensamblado principal de la aplicación.  
  
```  
Greeting=Hello  
```  
  
 El archivo de texto se puede convertir en un archivo de recursos binario mediante el en el comando de símbolo del sistema como se indica a continuación:  
  
```  
resgen ExampleResources.txt  
```  
  
 En el ejemplo siguiente se proporciona el código ejecutable que se crea una instancia de un <xref:System.Resources.ResourceManager> pide al usuario que escriba un nombre de objeto y mostrará un saludo.  
  
 [!code-csharp[System.Resources.ResourceManager.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/example.cs#1)]
 [!code-vb[System.Resources.ResourceManager.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/vb/example.vb#1)]  
  
 Se pueden compilar mediante el comando siguiente en Visual Basic:  
  
```  
vbc Example.vb /resource:ExampleResources.resources  
```  
  
 o bien utilizando el siguiente comando en C#:  
  
```  
csc Example.cs /resource:ExampleResources.resources  
```  
  
 Tenga en cuenta que en el ejemplo se recupera una referencia al ensamblado que contiene el archivo de recursos al pasar un tipo definido en dicho ensamblado para el `typeof` función (en C#) o `GetType` función (en Visual Basic) y la recuperación del valor de su <xref:System.Type.Assembly%2A?displayProperty=nameWithType>propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="baseName" /> o <paramref name="assembly" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Este constructor utiliza proporcionados por el sistema <see cref="T:System.Resources.ResourceSet" /> implementación. Para usar un formato de archivo de recursos personalizado, debe derivarse de la <see cref="T:System.Resources.ResourceSet" /> clase, invalide el <see cref="M:System.Resources.ResourceSet.GetDefaultReader" /> y <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /> métodos y pase que escriba para la <see cref="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" /> constructor. Usando un comparador <see cref="T:System.Resources.ResourceSet" /> puede ser útil para controlar recursos directiva de caché o la admisión de su propio formato de archivo de recursos, pero generalmente no es necesario.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (string baseName, System.Reflection.Assembly assembly, Type usingResourceSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseName, class System.Reflection.Assembly assembly, class System.Type usingResourceSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(System::String ^ baseName, System::Reflection::Assembly ^ assembly, Type ^ usingResourceSet);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="usingResourceSet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseName">Nombre de raíz del archivo de recursos sin su extensión pero con cualquier nombre de espacio de nombres completo. Por ejemplo, el nombre de raíz para el archivo de recursos denominado "MyApplication.MyResource.en-US.resources" es "MyApplication.MyResource".</param>
        <param name="assembly">Ensamblado principal de los recursos.</param>
        <param name="usingResourceSet">Tipo del objeto <see cref="T:System.Resources.ResourceSet" /> personalizado que se va a usar. Si es <see langword="null" />, se usa el objeto predeterminado <see cref="T:System.Resources.ResourceSet" /> en tiempo de ejecución.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Resources.ResourceManager" /> que usa un <see cref="T:System.Resources.ResourceSet" /> especificado para buscar recursos que contenga archivos con el nombre de raíz especificado en el ensamblado determinado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los archivos de recursos de referencia cultural individuales deben incluirse en los ensamblados satélite y archivo de recursos de la referencia cultural de forma predeterminada debe incluirse en el ensamblado principal. Un ensamblado satélite se supone que contiene recursos de una única referencia cultural especificada en el manifiesto de ese ensamblado y se carga según sea necesario.  
  
> [!NOTE]
>  Para recuperar recursos de archivos .resources directamente en lugar de recuperarlos desde ensamblados, se debe llamar a la <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> método en su lugar para crear instancias de un <xref:System.Resources.ResourceManager> objeto.  
  
 Si el archivo de recursos identificados por `baseName` no se encuentra en `assembly`, el método crea un <xref:System.Resources.ResourceManager> objeto, pero al intentar recuperar un recurso concreto produce una excepción, normalmente <xref:System.Resources.MissingManifestResourceException>. Para obtener información acerca de cómo diagnosticar la causa de la excepción, vea la sección "Control the MissingManifestResourceException (excepción)" de la <xref:System.Resources.ResourceManager> tema de la clase.  
  
> [!NOTE]
>  El `usingResourceSet` parámetro se usa para admitir el formato de recursos y normalmente será `null`. Esto es diferente del constructor que toma un <xref:System.Type> solo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="usingResourceset" /> no se deriva de <see cref="T:System.Resources.ResourceSet" />.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="baseName" /> o <paramref name="assembly" /> es <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Este constructor permite especificar un <see cref="T:System.Resources.ResourceSet" /> implementación. Si no desea que un determinado <see cref="T:System.Resources.ResourceSet" /> implementación pero desea como al utilizar un formato de archivo de recursos personalizado, debe derivarse de la <see cref="T:System.Resources.ResourceSet" /> clase, invalide el <see cref="M:System.Resources.ResourceSet.GetDefaultReader" /> y <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /> métodos y pase que escriba para este constructor.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BaseName">
      <MemberSignature Language="C#" Value="public virtual string BaseName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseName" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.BaseName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BaseName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre raíz de los archivos de recursos donde <see cref="T:System.Resources.ResourceManager" /> busca recursos.</summary>
        <value>Nombre raíz de los archivos de recursos donde <see cref="T:System.Resources.ResourceManager" /> busca recursos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.BaseName%2A> propiedad refleja el nombre completo del espacio de nombres y el nombre de recurso de raíz de un archivo de recursos, sin la extensión de nombre de referencia cultural o archivo. Por ejemplo, si el archivo de recursos predeterminado de una aplicación se denomina `SampleApps.StringResources.resources`, el valor de la <xref:System.Resources.ResourceManager.BaseName%2A> propiedad es "SampleApps.StringResources". Si el archivo de recursos predeterminado de una aplicación se denomina `SampleApps.StringResources.en-US.resources` está incrustado en un ensamblado satélite, el valor de la <xref:System.Resources.ResourceManager.BaseName%2A> propiedad sigue siendo "SampleApps.StringResources".  
  
> [!IMPORTANT]
>  La <xref:System.Resources.ResourceManager.BaseName%2A> valor de propiedad de un archivo de recursos que se compila y se incrusta en la línea de comandos no incluye un nombre de espacio de nombres, a menos que los incluya explícitamente uno al compilar el archivo. Por otro lado, la <xref:System.Resources.ResourceManager.BaseName%2A> valor de propiedad de un archivo de recursos que se compila y se incrusta dentro del entorno de Visual Studio, normalmente incluye el nombre de espacio de nombres predeterminado.  
  
 El <xref:System.Resources.ResourceManager.BaseName%2A> valor de la propiedad es el mismo que la cadena pasada a la <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> o <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29> constructor al crear instancias de un <xref:System.Resources.ResourceManager> instancia.  
  
   
  
## Examples  
 Puede determinar los nombres de archivos .resources insertados, compile y ejecute la siguiente utilidad. Se trata de una aplicación de consola que acepta el nombre de un ensamblado principal o un ensamblado satélite como un parámetro de línea de comandos. Muestra las cadenas que se deben proporcionar como el `baseName` parámetro de la <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> o <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29> constructor para que el Administrador de recursos puede identificar correctamente el recurso.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)]
 [!code-vb[System.Resources.ResourceManager.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseNameField">
      <MemberSignature Language="C#" Value="protected string BaseNameField;" />
      <MemberSignature Language="ILAsm" Value=".field family string BaseNameField" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.BaseNameField" />
      <MemberSignature Language="VB.NET" Value="Protected BaseNameField As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ BaseNameField;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el nombre raíz de los archivos de recursos donde <see cref="T:System.Resources.ResourceManager" /> busca recursos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.BaseNameField> campo solamente resulta útil si escribir su propia clase que deriva de la <xref:System.Resources.ResourceManager> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFileBasedResourceManager">
      <MemberSignature Language="C#" Value="public static System.Resources.ResourceManager CreateFileBasedResourceManager (string baseName, string resourceDir, Type usingResourceSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Resources.ResourceManager CreateFileBasedResourceManager(string baseName, string resourceDir, class System.Type usingResourceSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFileBasedResourceManager (baseName As String, resourceDir As String, usingResourceSet As Type) As ResourceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Resources::ResourceManager ^ CreateFileBasedResourceManager(System::String ^ baseName, System::String ^ resourceDir, Type ^ usingResourceSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="resourceDir" Type="System.String" />
        <Parameter Name="usingResourceSet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseName">Nombre raíz de los recursos. Por ejemplo, el nombre raíz del archivo de recursos denominado "MyResource.en-US.resources" es "MyResource".</param>
        <param name="resourceDir">Nombre del directorio donde se van a buscar los recursos. <c>resourceDir</c> puede ser una ruta de acceso absoluta o una ruta de acceso relativa del directorio de la aplicación.</param>
        <param name="usingResourceSet">Tipo del objeto <see cref="T:System.Resources.ResourceSet" /> personalizado que se va a usar. Si es <see langword="null" />, se usa el objeto predeterminado <see cref="T:System.Resources.ResourceSet" /> en tiempo de ejecución.</param>
        <summary>Devuelve un objeto <see cref="T:System.Resources.ResourceManager" /> que busca un directorio específico en lugar de en el manifiesto del ensamblado para recursos.</summary>
        <returns>Una nueva instancia de un administrador de recursos que busca en el directorio especificado en lugar de un manifiesto del ensamblado para los recursos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve un administrador de recursos que recupera los recursos de un archivo .resources que no se incrusta en un ensamblado. Puede utilizar esta <xref:System.Resources.ResourceManager> objeto que se va a cargar recursos de una página ASP.NET o probar una <xref:System.Resources.ResourceSet> implementación.  Para obtener un ejemplo que recupera los recursos de un archivo .resources independiente, consulte la [recuperar recursos](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md) artículo.  
  
 Este método le permite especificar un <xref:System.Resources.ResourceSet> implementación. Si no desea que un determinado <xref:System.Resources.ResourceSet> implementación, pero le gustaría utilizar un formato de archivo de recursos personalizado, debe derivarse de la <xref:System.Resources.ResourceSet> clase, invalide el <xref:System.Resources.ResourceSet.GetDefaultReader%2A> y <xref:System.Resources.ResourceSet.GetDefaultWriter%2A> métodos y pase que escriba para este constructor.  
  
> [!CAUTION]
>  Uso de archivos .resources independientes en una aplicación ASP.NET interrumpirá la implementación mediante XCOPY, ya que los recursos permanecerán bloqueados hasta que se libere explícitamente el <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> método. Si desea implementar los recursos con sus aplicaciones ASP.NET, compile los archivos .resources en ensamblados satélite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="baseName" /> o <paramref name="resourceDir" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FallbackLocation">
      <MemberSignature Language="C#" Value="protected System.Resources.UltimateResourceFallbackLocation FallbackLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Resources.UltimateResourceFallbackLocation FallbackLocation" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.FallbackLocation" />
      <MemberSignature Language="VB.NET" Value="Protected Property FallbackLocation As UltimateResourceFallbackLocation" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Resources::UltimateResourceFallbackLocation FallbackLocation { System::Resources::UltimateResourceFallbackLocation get(); void set(System::Resources::UltimateResourceFallbackLocation value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.UltimateResourceFallbackLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ubicación de la que se recuperan los recursos de reserva predeterminados.</summary>
        <value>Uno de los valores de enumeración que especifica dónde el administrador de recursos puede buscar los recursos de reserva.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.FallbackLocation%2A> propiedad sólo es útil si escribir su propia clase que deriva de la <xref:System.Resources.ResourceManager> clase.  
  
 Puede usar el <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo para informar al administrador de recursos dónde se encuentra la referencia cultural predeterminada para una aplicación: en el ensamblado principal (valor predeterminado) o en un ensamblado satélite.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.UltimateResourceFallbackLocation" />
        <altmember cref="T:System.Resources.NeutralResourcesLanguageAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetNeutralResourcesLanguage">
      <MemberSignature Language="C#" Value="protected static System.Globalization.CultureInfo GetNeutralResourcesLanguage (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Globalization.CultureInfo GetNeutralResourcesLanguage(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetNeutralResourcesLanguage (a As Assembly) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Globalization::CultureInfo ^ GetNeutralResourcesLanguage(System::Reflection::Assembly ^ a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">El ensamblado para el que se va a devolver información específica de la referencia cultural.</param>
        <summary>Devuelve información específica de la referencia cultural para los recursos predeterminados del ensamblado recuperando el valor del atributo <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> en un ensamblado específico.</summary>
        <returns>La referencia cultural de atributo <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" />, si se encuentra; si no, la referencia cultural invariable.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve el valor del recurso distinto de una cadena especificado para la referencia cultural actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nombre del recurso que se va a obtener.</param>
        <summary>Devuelve el valor del recurso que no sea de cadena especificado.</summary>
        <returns>Valor del recurso adaptado a la configuración de la referencia cultural actual del llamador. Si existe un conjunto adecuado de recursos pero <paramref name="name" /> no se encuentra, el método devuelve <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetObject%2A> método se usa para recuperar los recursos no es una cadena. Estos incluyen los valores que pertenecen a tipos de datos primitivos como <xref:System.Int32> o <xref:System.Double>, mapas de bits (como un <xref:System.Drawing.Bitmap?displayProperty=nameWithType> objeto), o personalizar los objetos serializados. Normalmente, el objeto devuelto se debe convertir (en C#) o convertir (en Visual Basic) a un objeto del tipo adecuado.  
  
 El recurso devuelto se adapta a la referencia cultural de interfaz de usuario del subproceso actual, que es definido por el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad. Si no se encuentra el recurso para esa referencia cultural, el Administrador de recursos usa reglas de reserva para cargar un recurso adecuado. Si no se encuentra ningún conjunto de recursos localizados utilizable, la <xref:System.Resources.ResourceManager> vuelve en los recursos de la referencia cultural de forma predeterminada. Si no se encuentra un conjunto de recursos de la referencia cultural predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si el conjunto de recursos se espera que resida en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (valor predeterminado) o entre mayúsculas y minúsculas.  
  
> [!CAUTION]
>  Este método puede producir más excepciones que se muestran. Una razón que esto puede ocurrir es si un método que llama a este método produce una excepción.  Por ejemplo, un <xref:System.IO.FileLoadException> podría producirse la excepción si se produce un error de implementación o instalación de un ensamblado satélite, o un <xref:System.Runtime.Serialization.SerializationException> excepción se puede producir si un tipo definido por el usuario inicia una excepción definida por el usuario cuando se deserializa el tipo.  
  
## <a name="performance-considerations"></a>Consideraciones sobre el rendimiento  
 Si se llama a la <xref:System.Resources.ResourceManager.GetObject%2A> método varias veces con el mismo `name` parámetro, no dependa en el método devuelve una referencia al mismo objeto con cada llamada. Esto es porque el <xref:System.Resources.ResourceManager.GetObject%2A> método puede devolver una referencia a un objeto de recurso existente en una memoria caché, o puede volver a cargar el recurso y devuelve una referencia a un nuevo objeto de recurso.  
  
   
  
## Examples  
 En el siguiente ejemplo se usa el método <xref:System.Resources.ResourceManager.GetObject%28System.String%29> para deserializar un objeto personalizado. El ejemplo incluye un archivo de código fuente denominado UIElements.cs (UIElements.vb si está utilizando Visual Basic) que define la estructura siguiente denominada `PersonTable`. Esta estructura está pensada para usarse con una rutina de visualización general de tabla en la que se muestren los nombres localizados de las columnas de la tabla. Tenga en cuenta que la estructura `PersonTable` está marcada con el atributo <xref:System.SerializableAttribute> .  
  
 [!code-csharp[Conceptual.Resources.Retrieving#6](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example.cs#6)]
 [!code-vb[Conceptual.Resources.Retrieving#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example.vb#6)]  
  
 El siguiente código del archivo CreateResources.cs (CreateResources.vb para Visual Basic) crea un archivo de recursos XML denominado UIResources.resx que almacena un título de tabla y un objeto `PersonTable` que contiene información de una aplicación localizada para el idioma inglés.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#7](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example1.cs#7)]
 [!code-vb[Conceptual.Resources.Retrieving#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example.vb#7)]  
  
 Después, el siguiente código del archivo de código fuente GetObject.cs (GetObject.vb) recupera los recursos y los muestra en la consola.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#8](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example2.cs#8)]
 [!code-vb[Conceptual.Resources.Retrieving#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example2.vb#8)]  
  
 Puede crear el archivo de recursos y los ensamblados necesarios y ejecutar la aplicación con el siguiente archivo por lotes. Debe usar la opción `/r` para proporcionar a Resgen.exe una referencia a UIElements.dll para que pueda tener acceso a la información de la estructura `PersonTable` . Si usa C#, reemplace el nombre del compilador `vbc` por `csc`y la extensión `.vb` por `.cs`.  
  
```  
  
vbc /t:library UIElements.vb  
vbc CreateResources.vb /r:UIElements.dll  
CreateResources  
  
resgen UIResources.resx  /r:UIElements.dll  
vbc GetObject.vb /r:UIElements.dll /resource:UIResources.resources  
  
GetObject.exe  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No se han encontrado conjuntos de recursos localizados que se puedan usar y no hay recursos para la referencia cultural predeterminada. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Los recursos de la referencia cultural predeterminada residen en un ensamblado satélite que no se encuentra. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="M:System.Resources.ResourceManager.GetStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String, culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">Nombre del recurso que se va a obtener.</param>
        <param name="culture">Referencia cultural a la que se va a adaptar el recurso. Si el recurso no se adapta para esta referencia cultural, el administrador de recursos usa reglas de reserva para buscar un recurso adecuado.  
  
 Si este valor es <see langword="null" />, el objeto <see cref="T:System.Globalization.CultureInfo" /> se obtiene mediante la propiedad <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" />.</param>
        <summary>Obtiene el valor del recurso especificado de cadena no adaptado a la referencia cultural especificada.</summary>
        <returns>Valor del recurso, adaptado a la referencia cultural especificada. Si existe un conjunto adecuado de recursos pero <paramref name="name" /> no se encuentra, el método devuelve <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> método se usa para recuperar los recursos no es una cadena. Estos incluyen los valores que pertenecen a tipos de datos primitivos como <xref:System.Int32> o <xref:System.Double>, mapas de bits (como un <xref:System.Drawing.Bitmap?displayProperty=nameWithType> objeto), o personalizar los objetos serializados. Normalmente, el objeto devuelto se debe convertir (en C#) o convertir (en Visual Basic) a un objeto del tipo adecuado.  
  
 El recurso devuelto se adapta a la referencia cultural especificada por `culture`, o para la referencia cultural especificada por el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad si `culture` es `null`. Si no se encuentra el recurso para esa referencia cultural, el Administrador de recursos usa reglas de reserva para cargar un recurso adecuado. Si no se encuentra ningún conjunto de recursos localizados utilizable, el Administrador de recursos vuelve en los recursos de la referencia cultural de forma predeterminada. Si no se encuentra un conjunto de recursos de la referencia cultural predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si el conjunto de recursos se espera que resida en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (valor predeterminado) o entre mayúsculas y minúsculas.  
  
> [!CAUTION]
>  Este método puede producir más excepciones que se muestran. Una razón que esto puede ocurrir es si un método que llama a este método produce una excepción.  Por ejemplo, un <xref:System.IO.FileLoadException> podría producirse la excepción si se produce un error de implementación o instalación de un ensamblado satélite, o un <xref:System.Runtime.Serialization.SerializationException> excepción se puede producir si un tipo definido por el usuario inicia una excepción definida por el usuario cuando se deserializa el tipo.  
  
## <a name="performance-considerations"></a>Consideraciones sobre el rendimiento  
 Si se llama a la <xref:System.Resources.ResourceManager.GetObject%2A> método varias veces con el mismo `name` parámetro, no dependa en el método devuelve una referencia al mismo objeto con cada llamada. Esto es porque el <xref:System.Resources.ResourceManager.GetObject%2A> método puede devolver una referencia a un objeto de recurso existente en una memoria caché, o puede volver a cargar el recurso y devuelve una referencia a un nuevo objeto de recurso.  
  
   
  
## Examples  
 En el siguiente ejemplo se usa el método <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> para deserializar un objeto personalizado. El ejemplo incluye un archivo de código fuente denominado NumberInfo.cs (NumberInfo.vb si está utilizando Visual Basic) que define la estructura siguiente denominada `Numbers`. Esta estructura está pensada para ser usada por una aplicación educativa simple que enseña estudiantes de habla no esté en inglés para contar y diez en inglés. Tenga en cuenta que la `Numbers` clase se marca con el <xref:System.SerializableAttribute> atributo.  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/numberinfo.cs#1)]
 [!code-vb[System.Resources.ResourceManager.GetObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/numberinfo.vb#1)]  
  
 El siguiente código fuente desde un archivo con nombre CreateResources.cs (CreateResources.vb para Visual Basic) crea los archivos de recursos XML para el idioma inglés de forma predeterminada, así como para los idiomas francés, portugués y ruso.  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/createresources.cs#2)]
 [!code-vb[System.Resources.ResourceManager.GetObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/createresources.vb#2)]  
  
 La aplicación siguiente, que establece la referencia cultural de interfaz de usuario actual a francés (Francia), portugués (Brasil) o ruso (Rusia) consume los recursos. Lo llama el <xref:System.Resources.ResourceManager.GetObject%28System.String%29> método para obtener un `Numbers` objeto que contiene números localizados y el <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> método para obtener un `Numbers` objeto que contiene números de idioma inglés. A continuación, muestra los números impares usando la referencia cultural de interfaz de usuario actual y el idioma inglés. El archivo de código fuente se denomina ShowNumbers.cs (ShowNumbers.vb).  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/shownumbers.cs#3)]
 [!code-vb[System.Resources.ResourceManager.GetObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/shownumbers.vb#3)]  
  
 Puede usar el siguiente archivo por lotes para compilar y ejecutar la versión de Visual Basic del ejemplo. Si está utilizando C#, reemplace `vbc` con `csc`y reemplace el `.vb` extensión con `.cs`.  
  
```  
  
vbc /t:library NumberInfo.vb  
  
vbc CreateResources.vb /r:NumberInfo.dll  
CreateResources  
  
resgen NumberResources.resx /r:NumberInfo.dll  
  
resgen NumberResources.fr.resx /r:Numberinfo.dll  
Md fr  
al /embed:NumberResources.fr.resources /culture:fr /t:lib /out:fr\ShowNumbers.resources.dll  
  
resgen NumberResources.pt.resx  /r:Numberinfo.dll  
Md pt  
al /embed:NumberResources.pt.resources /culture:pt /t:lib /out:pt\ShowNumbers.resources.dll  
  
resgen NumberResources.ru.resx /r:Numberinfo.dll  
Md ru  
al /embed:NumberResources.ru.resources /culture:ru /t:lib /out:ru\ShowNumbers.resources.dll  
  
vbc ShowNumbers.vb /r:NumberInfo.dll /resource:NumberResources.resources  
ShowNumbers.exe  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No se han encontrado conjuntos de recursos que se puedan utilizar y no hay recursos de la referencia cultural predeterminada. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Los recursos de la referencia cultural predeterminada residen en un ensamblado satélite que no se encuentra. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>El <see cref="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" /> método es seguro para subprocesos.</threadsafe>
        <altmember cref="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceFileName">
      <MemberSignature Language="C#" Value="protected virtual string GetResourceFileName (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetResourceFileName(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetResourceFileName (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetResourceFileName(System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">Objeto de referencia cultural para la que se va a construir el nombre del archivo de recursos.</param>
        <summary>Genera el nombre del archivo de recursos para el objeto <see cref="T:System.Globalization.CultureInfo" /> especificado.</summary>
        <returns>Nombre que se puede usar para un archivo de recursos del objeto <see cref="T:System.Globalization.CultureInfo" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetResourceFileName%2A> método sólo es útil si escribir su propia clase que deriva de la <xref:System.Resources.ResourceManager> clase.  
  
 Este método usa la <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propiedad como parte del nombre de archivo para todas las referencias culturales que no sea la referencia cultural invariable. Este método no aparece en el manifiesto de un ensamblado ni en el disco y sólo se utiliza para construir un nombre de archivo de recursos (adecuado para enviarlo a la <xref:System.Resources.ResourceReader> constructor) o un nombre de blob de recurso del manifiesto.  
  
 Una clase derivada puede invalidar este método para buscar una extensión diferente, como ". ResX", o un esquema completamente diferente para asignar nombres a archivos de recursos. Tenga en cuenta que el método se puede utilizar para personalizar el nombre de un archivo de recursos dentro de un ensamblado satélite y no para personalizar el nombre del propio ensamblado satélite.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceSet">
      <MemberSignature Language="C#" Value="public virtual System.Resources.ResourceSet GetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Resources.ResourceSet GetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSet (culture As CultureInfo, createIfNotExists As Boolean, tryParents As Boolean) As ResourceSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Resources::ResourceSet ^ GetResourceSet(System::Globalization::CultureInfo ^ culture, bool createIfNotExists, bool tryParents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="createIfNotExists" Type="System.Boolean" />
        <Parameter Name="tryParents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Referencia cultural cuyos recursos se van a recuperar.</param>
        <param name="createIfNotExists">
          <see langword="true" /> para cargar el conjunto de recursos, si aún no se cargaron; de lo contrario, <see langword="false" />.</param>
        <param name="tryParents">
          <see langword="true" /> para usar la reserva de recursos para cargar un recurso adecuado si el conjunto de recursos no se puede encontrar; <see langword="false" /> para omitir el proceso de reserva de recursos.</param>
        <summary>Recupera el conjunto de recursos para una referencia cultural determinada.</summary>
        <returns>El conjunto de recursos para la referencia cultural especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El conjunto de recursos que se devuelve representa los recursos que están localizados para la referencia cultural especificada. Si los recursos no se han localizado para esa referencia cultural y `tryParents` es `true`, <xref:System.Resources.ResourceManager.GetResourceSet%2A> utiliza reglas de reserva de recursos para cargar un recurso adecuado. Si `tryParents` es `false` y no se encuentra un conjunto de recursos específicos de la referencia cultural, el método devuelve `null`. Para obtener más información acerca de la reserva de recursos, consulte la sección "El proceso de reserva de recursos" en la [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) artículo.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.Resources.ResourceManager.GetResourceSet%2A> método para recuperar recursos específicos de la referencia cultural para la referencia cultural Francés (Francia). A continuación, enumera todos los recursos en el conjunto de recursos. Contiene el código fuente de un archivo ejecutable denominado ShowNumbers.exe. También incluye el siguiente archivo de texto de dos que contienen los nombres de los números. La primera, NumberResources.txt, contiene los nombres de los números entre uno y diez en inglés:  
  
```  
  
one=one  
two=two  
three=three  
four=four  
five=five  
six=six  
seven=seven  
eight=eight  
nine=nine  
ten=ten  
  
```  
  
 El segundo, NumberResources.fr-FR.txt, contiene los nombres de los números de uno a cuatro en francés:  
  
```  
  
one=un  
two=deux  
three=trois  
four=quatre  
  
```  
  
 Puede usar un archivo por lotes para generar los archivos de recursos, incrustar el archivo de recursos de idioma inglés en el archivo ejecutable y crear un ensamblado satélite para los recursos de idioma francés. Este es el archivo por lotes para generar un archivo ejecutable mediante el compilador de Visual Baisc:  
  
```  
  
resgen NumberResources.txt  
vbc shownumbers.vb /resource:NumberResources.resources  
  
md fr-FR  
resgen NumberResources.fr-FR.txt  
al /out:fr-FR\ShowNumbers.resources.dll /culture:fr-FR /embed:NumberResources.fr-FR.resources  
```  
  
 Para el compilador de C#, puede usar el siguiente archivo por lotes:  
  
```  
  
resgen NumberResources.txt  
csc shownumbers.cs /resource:NumberResources.resources  
  
md fr-FR  
resgen NumberResources.fr-FR.txt  
al /out:fr-FR\ShowNumbers.resources.dll /culture:fr-FR /embed:NumberResources.fr-FR.resources  
  
```  
  
 [!code-csharp[System.Resources.ResourceManager.GetResourceSet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getresourceset/cs/shownumbers.cs#1)]
 [!code-vb[System.Resources.ResourceManager.GetResourceSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getresourceset/vb/shownumbers.vb#1)]  
  
 Tenga en cuenta que si cambia el valor de la `createIfNotExists` argumento pasado a `false`, devuelve la llamada al método `null`, ya que el Administrador de recursos no se ha cargado los recursos de idioma francés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="culture" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">
          <paramref name="tryParents" /> es <see langword="true" /> si no se han encontrado conjuntos de recursos que se puedan usar y no hay recursos de la referencia cultural predeterminada.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteContractVersion">
      <MemberSignature Language="C#" Value="protected static Version GetSatelliteContractVersion (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Version GetSatelliteContractVersion(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetSatelliteContractVersion (a As Assembly) As Version" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Version ^ GetSatelliteContractVersion(System::Reflection::Assembly ^ a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">Ensamblado en el que se comprueba el atributo <see cref="T:System.Resources.SatelliteContractVersionAttribute" />.</param>
        <summary>Devuelve la versión especificada por el atributo <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> en el ensamblado especificado.</summary>
        <returns>La versión del contrato satélite del ensamblado o <see langword="null" /> si no se encontró ninguna versión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información acerca de las versiones de ensamblado satélite, consulte el <xref:System.Resources.SatelliteContractVersionAttribute> tema de referencia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El objeto <see cref="T:System.Version" /> encontrado en el parámetro <paramref name="a" /> del ensamblado no es válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="a" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Resources.SatelliteContractVersionAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStream">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve un objeto de secuencia de memoria no administrada de un recurso especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.UnmanagedMemoryStream GetStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.UnmanagedMemoryStream GetStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (name As String) As UnmanagedMemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::UnmanagedMemoryStream ^ GetStream(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.UnmanagedMemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nombre de un recurso.</param>
        <summary>Devuelve un objeto de secuencia de memoria no administrada del recurso especificado.</summary>
        <returns>Un objeto de secuencia de memoria no administrada que representa un recurso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetStream%2A> método toma el nombre de un recurso que se almacena como un <xref:System.IO.MemoryStream> de objetos, obtiene el valor de la <xref:System.Object> recursos y devuelve un <xref:System.IO.UnmanagedMemoryStream> objeto. Requiere que se trabaja directamente con una secuencia de bytes, que, a continuación, convertir en un objeto. Este método es útil principalmente por motivos de rendimiento: recuperando un recurso como una secuencia de bytes en lugar de un objeto explícito puede mejorar el rendimiento.  
  
 El recurso devuelto se adapta a la referencia cultural de interfaz de usuario del subproceso actual, que es definido por el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad. Si no se encuentra el recurso para esa referencia cultural, el Administrador de recursos usa reglas de reserva para cargar un recurso adecuado. Si no se encuentra ningún conjunto de recursos localizados utilizable, la <xref:System.Resources.ResourceManager> vuelve en los recursos de la referencia cultural de forma predeterminada. Si no se encuentra un conjunto de recursos de la referencia cultural predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si el conjunto de recursos se espera que resida en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (valor predeterminado) o entre mayúsculas y minúsculas.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el método <xref:System.Resources.ResourceManager.GetStream%28System.String%29> para recuperar un mapa de bits que se emplea en la ventana de inicio de una aplicación. El siguiente código desde un archivo llamado de fuente CreateResources.cs (en C#) o CreateResources.vb (en Visual Basic) genera un archivo .resx denominado AppResources.resx que contiene la imagen serializada. En este caso, la imagen se carga desde un archivo denominado SplashScreen.jpg; puede modificar el nombre del archivo para sustituir su propia imagen.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#4](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/createresources.cs#4)]
 [!code-vb[Conceptual.Resources.Retrieving#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/createresources.vb#4)]  
  
 El siguiente código desde un archivo llamado GetStream.cs (en C#) o GetStream.vb (en Visual Basic), a continuación, recupera el recurso y que muestra la imagen en un <xref:System.Windows.Forms.PictureBox?displayProperty=nameWithType> control.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#5](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/getstream.cs#5)]
 [!code-vb[Conceptual.Resources.Retrieving#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/getstream.vb#5)]  
  
 Puede usar el siguiente archivo por lotes para compilar el ejemplo de C#. En Visual Basic, cambiar `csc` a `vbc`y cambie la extensión de archivo de código fuente de `.cs` a `.vb`...  
  
```  
  
csc CreateResources.cs  
CreateResources  
  
resgen AppResources.resx  
  
csc GetStream.cs /resource:AppResources.resources  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El valor del recurso especificado no es un objeto <see cref="T:System.IO.MemoryStream" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No se han encontrado conjuntos de recursos que se puedan utilizar y no hay recursos predeterminados. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Los recursos de la referencia cultural predeterminada residen en un ensamblado satélite que no se encuentra. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.UnmanagedMemoryStream GetStream (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.UnmanagedMemoryStream GetStream(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (name As String, culture As CultureInfo) As UnmanagedMemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::UnmanagedMemoryStream ^ GetStream(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.UnmanagedMemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">Nombre de un recurso.</param>
        <param name="culture">Objeto que especifica la referencia cultural que se debe usar para la búsqueda de recursos. Si <c>culture</c> es <see langword="null" />, se usa la referencia cultural del subproceso actual.</param>
        <summary>Devuelve un objeto de secuencia de memoria no administrada a partir del recurso especificado, usando la referencia cultural especificada.</summary>
        <returns>Objeto de secuencia de memoria no administrada que representa un recurso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetStream%2A> método toma el nombre de un recurso que se almacena como un <xref:System.IO.MemoryStream> de objetos, obtiene el valor de la <xref:System.Object> recursos y devuelve un <xref:System.IO.UnmanagedMemoryStream> objeto. Requiere que se trabaja directamente con una secuencia de bytes, que, a continuación, convertir en un objeto. Este método es útil principalmente por motivos de rendimiento: recuperando un recurso como una secuencia de bytes en lugar de un objeto explícito puede mejorar el rendimiento.  
  
 El recurso devuelto se adapta a la referencia cultural especificada por `culture`, o para la referencia cultural especificada por el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad si `culture` es `null`. Si no se encuentra el recurso para esa referencia cultural, el Administrador de recursos usa reglas de reserva para cargar un recurso adecuado. Si no se encuentra ningún conjunto de recursos localizados utilizable, la <xref:System.Resources.ResourceManager> vuelve en los recursos de la referencia cultural de forma predeterminada. Si no se encuentra un conjunto de recursos de la referencia cultural predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si el conjunto de recursos se espera que resida en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (valor predeterminado) o entre mayúsculas y minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El valor del recurso especificado no es un objeto <see cref="T:System.IO.MemoryStream" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No se han encontrado conjuntos de recursos que se puedan utilizar y no hay recursos predeterminados. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Los recursos de la referencia cultural predeterminada residen en un ensamblado satélite que no se encuentra. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve el recurso de cadena especificado para la referencia cultural especificada o la referencia cultural de la interfaz de usuario actual.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nombre del recurso que se va a recuperar.</param>
        <summary>Devuelve el valor del recurso de cadena especificado.</summary>
        <returns>El valor del recurso localizado para la referencia cultural de la interfaz de usuario actual del llamador, o <see langword="null" /> si <paramref name="name" /> no se encuentra en un conjunto de recursos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 En aplicaciones de escritorio, se encuentra el recurso que se devuelve para la referencia cultural de interfaz de usuario del subproceso actual, tal como se define por la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad. Si el recurso no se haya adaptado para la referencia cultural, el Administrador de recursos sondea un recurso siguiendo los pasos descritos en la sección "Proceso de reserva de recursos" de la [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) artículo. Si no se encuentra ningún conjunto de recursos localizados utilizable, el Administrador de recursos vuelve en los recursos de la referencia cultural de forma predeterminada. Si el Administrador de recursos no puede cargar el conjunto de recursos de la referencia cultural de forma predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si el conjunto de recursos se espera que resida en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (valor predeterminado) o entre mayúsculas y minúsculas.  
  
> [!CAUTION]
>  Este método puede producir más excepciones que se muestran. Una razón que esto puede ocurrir es si un método que llama a este método produce una excepción.  Por ejemplo, un <xref:System.IO.FileLoadException> podría producirse la excepción si se produce un error de implementación o instalación de un ensamblado satélite, o un <xref:System.Runtime.Serialization.SerializationException> excepción se puede producir si un tipo definido por el usuario inicia una excepción definida por el usuario cuando se deserializa el tipo.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque la <xref:System.Resources.ResourceManager> clase es compatible con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que pueden utilizarse con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 En [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, el <xref:System.Resources.ResourceManager.GetString%28System.String%29> método devuelve el valor de la `name` cadena de recurso, adaptado a la configuración de referencia cultural de interfaz de usuario actual del llamador. La lista de referencias culturales se deriva de la lista de idiomas de interfaz de usuario preferida del sistema operativo. Si no puede coincidir con el Administrador de recursos `name`, el método devuelve `null`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Resources.ResourceManager.GetString%2A> método para recuperar recursos específicos de la referencia cultural. Consta de los recursos que se compila a partir de los archivos .txt de inglés (en), francés (Francia) (fr-FR) y ruso (Rusia) (ru-RU) según la referencia cultural. En el ejemplo se cambia la referencia cultural actual y la referencia cultural de interfaz de usuario actual a inglés (Estados Unidos), francés (Francia), ruso (Rusia) y sueco (Suecia). A continuación, llama el <xref:System.Resources.ResourceManager.GetString%2A> método para recuperar la cadena localizada, que muestra junto con el día actual y el mes. Observe que la salida muestra la cadena localizada adecuada salvo cuando la referencia cultural de interfaz de usuario actual es Sueco (Suecia). Dado que no están disponibles los recursos de idioma sueco, la aplicación en su lugar, utiliza los recursos de la referencia cultural predeterminada, que es el inglés. El ejemplo requiere los archivos de recursos basados en texto aparece en la tabla siguiente. Cada uno tiene un recurso de cadena único denominado `DateStart`.  
  
|culture|Nombre del archivo|Nombre del recurso|Valor del recurso|  
|-------------|---------------|-------------------|--------------------|  
|en-US|DateStrings.txt|`DateStart`|Hoy es|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui, le c'est|  
|ru-RU|DateStrings.ru-RU.txt|`DateStart`|Сегодня|  
  
 Puede utilizar el siguiente archivo por lotes para compilar el ejemplo de C#. Si usa Visual Basic, cambie `csc` por `vbc`y la extensión del archivo de código fuente de `.cs` a `.vb`.  
  
```  
resgen DateStrings.txt  
csc showdate.cs /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
```  
  
 Este es el código de origen para el ejemplo (ShowDate.vb para la versión de Visual Basic) o ShowDate.cs para la versión de C#.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)]
 [!code-vb[System.Resources.ResourceManager.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">El valor del recurso especificado no es una cadena.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No se han encontrado conjuntos de recursos que se puedan usar y no hay recursos para la referencia cultural neutral. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Los recursos de la referencia cultural predeterminada residen en un ensamblado satélite que no se encuentra. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>El <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> método es seguro para subprocesos.</threadsafe>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">Nombre del recurso que se va a recuperar.</param>
        <param name="culture">Objeto que representa la referencia cultural a la que se va a adaptar el recurso.</param>
        <summary>Devuelve el valor del recurso de cadena adaptado a la referencia cultural especificada.</summary>
        <returns>El valor del recurso localizado para la referencia cultural especificada, o <see langword="null" /> si <paramref name="name" /> no se encuentra en un conjunto de recursos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 En aplicaciones de escritorio, si `culture` es `null`, <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> método usa la referencia cultural de la interfaz de usuario actual obtenida de la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad.  
  
 El recurso que se devuelve se adapta a la referencia cultural especificada por el `culture` parámetro. Si el recurso no se haya adaptado para `culture`, el Administrador de recursos sondea un recurso siguiendo los pasos descritos en la sección "Proceso de reserva de recursos" de la [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) tema. Si no se encuentra ningún conjunto de recursos puede usar el Administrador de recursos vuelve en los recursos de la referencia cultural de forma predeterminada. Si el Administrador de recursos no puede cargar el conjunto de recursos de la referencia cultural de forma predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si el conjunto de recursos se espera que resida en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (valor predeterminado) o entre mayúsculas y minúsculas.  
  
> [!CAUTION]
>  Este método puede producir más excepciones que se muestran. Una razón que esto puede ocurrir es si un método que llama a este método produce una excepción.  Por ejemplo, un <xref:System.IO.FileLoadException> podría producirse la excepción si se produce un error de implementación o instalación de un ensamblado satélite, o un <xref:System.Runtime.Serialization.SerializationException> excepción se puede producir si un tipo definido por el usuario inicia una excepción definida por el usuario cuando se deserializa el tipo.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque la <xref:System.Resources.ResourceManager> clase es compatible con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que pueden utilizarse con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 En [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, el <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> método devuelve el valor de la `name` cadena de recurso, adaptado a la referencia cultural especificada por el `culture` parámetro. Si no se encuentra el recurso para el `culture` referencia cultural, la búsqueda utiliza toda la matriz [!INCLUDE[win8](~/includes/win8-md.md)] lista de reserva de idioma y se detiene después de buscar en la referencia cultural predeterminada. Si no puede coincidir con el Administrador de recursos `name`, el método devuelve `null`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> método para recuperar recursos específicos de la referencia cultural. Referencia cultural predeterminada del ejemplo es inglés (en), e incluye los ensamblados satélite para el francés (Francia) (fr-FR) y ruso (Rusia) (ru-RU) según la referencia cultural. El ejemplo cambia la referencia cultural actual y la referencia cultural de interfaz de usuario actual para ruso (Rusia) antes de llamar a <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>. A continuación, se llama la <xref:System.Resources.ResourceManager.GetString%2A> método y la <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> método y pasa <xref:System.Globalization.CultureInfo> objetos que representan las referencias culturales de sueco (Suecia) y el francés (Francia) a cada método. En la salida, el mes y día del mes, así como la cadena que precede a ellos aparecen en francés, porque el <xref:System.Resources.ResourceManager.GetString%2A> método es capaz de recuperar el recurso de idioma francés. Sin embargo, cuando se usa la referencia cultural Sueco (Suecia), el mes y día del mes aparecen en sueco, aunque la cadena que precede a ellos está disponible en inglés. Esto es porque el Administrador de recursos no puede encontrar recursos de idioma sueco localizado, por lo que devuelve un recurso para la referencia cultural inglés de forma predeterminada en su lugar.  
  
 El ejemplo requiere los archivos de recursos basados en texto aparece en la tabla siguiente. Cada uno tiene un recurso de cadena único denominado `DateStart`.  
  
|culture|Nombre del archivo|Nombre del recurso|Valor del recurso|  
|-------------|---------------|-------------------|--------------------|  
|en-US|DateStrings.txt|`DateStart`|Hoy es|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui, le c'est|  
|ru-RU|DateStrings.ru-RU.txt|`DateStart`|Сегодня|  
  
 Puede utilizar el siguiente archivo por lotes para compilar el ejemplo de Visual Basic. Para compilar en C#, cambie `vbc` a `csc`y cambie la extensión de archivo de código fuente de `.vb` a `.cs`.  
  
```  
resgen DateStrings.txt  
vbc showdate.vb /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
```  
  
 Este es el código de origen para el ejemplo (ShowDate.vb para la versión de Visual Basic) o ShowDate.cs para la versión de C#.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate2.cs#3)]
 [!code-vb[System.Resources.ResourceManager.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="name" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">El valor del recurso especificado no es una cadena.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No se han encontrado conjuntos de recursos que se puedan usar y no hay recursos para una referencia cultural predeterminada. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">Los recursos de la referencia cultural predeterminada residen en un ensamblado satélite que no se encuentra. Para obtener información sobre cómo administrar esta excepción, vea la sección "Administrar las excepciones MissingManifestResourceException y MissingSatelliteAssemblyException" en el tema de la clase <see cref="T:System.Resources.ResourceManager" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>El <see cref="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" /> método es seguro para subprocesos.</threadsafe>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="HeaderVersionNumber">
      <MemberSignature Language="C#" Value="public static readonly int HeaderVersionNumber;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 HeaderVersionNumber" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.HeaderVersionNumber" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderVersionNumber As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int HeaderVersionNumber;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica la versión de los encabezados de archivos de recursos que la implementación actual de <see cref="T:System.Resources.ResourceManager" /> puede interpretar y producir.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreCase">
      <MemberSignature Language="C#" Value="public virtual bool IgnoreCase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.IgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IgnoreCase As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IgnoreCase { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el administrador de recursos permite realizar búsquedas de recursos sin distinción entre mayúsculas y minúsculas en los métodos <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> y <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" />.</summary>
        <value>
          <see langword="true" /> para omitir el modelo de mayúsculas y minúsculas durante la búsqueda de recursos; si no, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el valor de la <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad es `false`, un recurso con el nombre "Recurso" no es equivalente a otro recurso con el nombre "resource". Si <xref:System.Resources.ResourceManager.IgnoreCase%2A> es `true`, un recurso con el nombre "Recurso" es equivalente a otro recurso con el nombre "resource". Sin embargo, tenga en cuenta que, cuando <xref:System.Resources.ResourceManager.IgnoreCase%2A> es `true`, <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> y <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> métodos realizan las comparaciones de cadenas entre mayúsculas y minúsculas usando la referencia cultural invariable. La ventaja es que los resultados de las comparaciones de cadenas entre mayúsculas y minúsculas realizadas por estos métodos son los mismos en todos los equipos, independientemente de la referencia cultural. La desventaja es que los resultados no son coherentes con las reglas de mayúsculas y minúsculas de todas las referencias culturales.  
  
 Por ejemplo, el alfabeto turco tiene dos versiones del carácter I: uno con un punto y otra sin un punto. En turco, el carácter I (Unicode 0049) se considera la versión en mayúsculas de un carácter diferente, ı (Unicode 0131). El carácter i (Unicode 0069) se considera la versión en minúsculas de carácter i (Unicode 0130). Según estas reglas de mayúsculas y minúsculas, una comparación de cadenas entre mayúsculas y minúsculas de los caracteres i (Unicode 0069) e I (Unicode 0049) genera un error para la referencia cultural "tr-TR" (turco de Turquía). Sin embargo, dado que la comparación se realiza mediante las reglas de mayúsculas y minúsculas de la referencia cultural invariable, si <xref:System.Resources.ResourceManager.IgnoreCase%2A> es `true`, esta comparación se realiza correctamente.  
  
> [!NOTE]
>  Por motivos de rendimiento, es mejor especificar siempre las mayúsculas y minúsculas correctas para los nombres de recursos. Establecer <xref:System.Resources.ResourceManager.IgnoreCase%2A> a `true` puede provocar un aumento significativo de espacio de trabajo y una disminución significativa del rendimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalGetResourceSet">
      <MemberSignature Language="C#" Value="protected virtual System.Resources.ResourceSet InternalGetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Resources.ResourceSet InternalGetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function InternalGetResourceSet (culture As CultureInfo, createIfNotExists As Boolean, tryParents As Boolean) As ResourceSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Resources::ResourceSet ^ InternalGetResourceSet(System::Globalization::CultureInfo ^ culture, bool createIfNotExists, bool tryParents);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="createIfNotExists" Type="System.Boolean" />
        <Parameter Name="tryParents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">Objeto de referencia cultural que se va a buscar.</param>
        <param name="createIfNotExists">
          <see langword="true" /> para cargar el conjunto de recursos, si aún no se cargaron; de lo contrario, <see langword="false" />.</param>
        <param name="tryParents">
          <see langword="true" /> para comprobar objetos <see cref="T:System.Globalization.CultureInfo" /> primarios si el conjunto de recursos no se puede cargar; si no, <see langword="false" />.</param>
        <summary>Proporciona la implementación para buscar un conjunto de recursos.</summary>
        <returns>Conjunto de recursos especificado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Resources.MissingManifestResourceException">El ensamblado principal no contiene un archivo .resources, que es necesario para buscar un recurso.</exception>
        <exception cref="T:System.ExecutionEngineException">Error interno en tiempo de ejecución.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">No se encontró el ensamblado satélite asociado a <paramref name="culture" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <block subset="none" type="overrides">
          <para>Este método completa todo el trabajo necesario para encontrar un recurso de conjunto y puede ser recursivo y reentrante. En otras palabras, este método puede cargar un ensamblado y un desencadenador un <see cref="E:System.AppDomain.AssemblyLoad" /> evento, que, a continuación, llama de nuevo en un <see cref="T:System.Resources.ResourceManager" /> objeto que no se ha inicializado completamente. Para evitar realizar bloqueos adicionales, este método no es seguro para subprocesos. El <see cref="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />, <see cref="M:System.Resources.ResourceManager.GetString(System.String)" />, y <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> métodos realizan toda la sincronización necesaria.</para>
        </block>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="MagicNumber">
      <MemberSignature Language="C#" Value="public static readonly int MagicNumber;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 MagicNumber" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.MagicNumber" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MagicNumber As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int MagicNumber;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Conserva el número usado para identificar los archivos de recursos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor se establece en 0xBEEFCACE. Los primeros cuatro bytes del formato de archivo predeterminado del sistema contienen un entero con signo de 32 bits en formato little-endian (vea <xref:System.Text.Encoding>).  
  
 Si el <xref:System.Resources.ResourceManager.MagicNumber> se encuentra, los bytes sigue deberá ser un número de versión para un <xref:System.Resources.ResourceManager> encabezado, seguido por un número que indica el número de bytes que debe omitirse para pasar este encabezado. El siguiente número indica la versión de la <xref:System.Resources.ResourceManager> que creó el encabezado, seguido de información específica de versión.  
  
 El número de versión para la implementación actual es uno. Los siguientes bytes tienen una cadena de longitud fija que contiene el nombre de un <xref:System.Resources.IResourceReader>, que puede leer este archivo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MainAssembly">
      <MemberSignature Language="C#" Value="protected System.Reflection.Assembly MainAssembly;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Reflection.Assembly MainAssembly" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.MainAssembly" />
      <MemberSignature Language="VB.NET" Value="Protected MainAssembly As Assembly " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Reflection::Assembly ^ MainAssembly;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el ensamblado principal que contiene los recursos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.MainAssembly> campo solamente resulta útil si escribir su propia clase que deriva de la <xref:System.Resources.ResourceManager> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllResources">
      <MemberSignature Language="C#" Value="public virtual void ReleaseAllResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseAllResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.ReleaseAllResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseAllResources ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseAllResources();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica al administrador de recursos que llame al método <see cref="M:System.Resources.ResourceSet.Close" /> en todos los objetos <see cref="T:System.Resources.ResourceSet" /> y libere todos los recursos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método reducirá el espacio de trabajo en una aplicación en ejecución. Las búsquedas de recursos futuro en el objeto <xref:System.Resources.ResourceManager> objeto será más costoso que la primera búsqueda, ya que tendrá el Administrador de recursos buscar y cargar recursos de nuevo. Esto puede resultar útil en algunos casos de subprocesos complejos, donde crear un nuevo <xref:System.Resources.ResourceManager> objeto es el comportamiento adecuado.  
  
> [!NOTE]
>  A partir de .NET Framework versión 2.0, el <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> método no es seguro para la ejecución con respecto a subprocesos <xref:System.Resources.ResourceManager.GetObject%2A>, <xref:System.Resources.ResourceManager.GetString%2A>, y <xref:System.Resources.ResourceManager.GetStream%2A> las operaciones. La ventaja de este cambio es una mejora del rendimiento para varios subprocesos que tienen acceso a recursos. Sin embargo, si se llama a la <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> método en un subproceso al obtener simultáneamente un recurso en otro subproceso, la operación get puede producir un <xref:System.ObjectDisposedException> excepción.  
  
 También puede usar este método en situaciones donde las instancias administradas para los recursos creados por el Administrador de recursos actual deben liberarse de forma determinista, sin esperar a que el Administrador de recursos estén completamente fuera de ámbito y haya sido recolectado.  
  
> [!NOTE]
>  Llamar a este método no descarga los ensamblados satélite. Para descargar ensamblados satélite, utilice el <xref:System.AppDomain.Unload%2A> método.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ResourceSets">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ResourceSets;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Collections.Hashtable ResourceSets" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.ResourceSets" />
      <MemberSignature Language="VB.NET" Value="Protected ResourceSets As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Collections::Hashtable ^ ResourceSets;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("call InternalGetResourceSet instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contiene un objeto <see cref="T:System.Collections.Hashtable" /> que devuelve una asignación de referencias culturales a objetos <see cref="T:System.Resources.ResourceSet" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSetType">
      <MemberSignature Language="C#" Value="public virtual Type ResourceSetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ResourceSetType" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.ResourceSetType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResourceSetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ResourceSetType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el tipo de objeto de conjunto de recursos que el administrador de recursos usa para construir un objeto <see cref="T:System.Resources.ResourceSet" />.</summary>
        <value>El tipo del objeto de conjunto de recursos que el administrador de recursos usa para construir un objeto <see cref="T:System.Resources.ResourceSet" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>