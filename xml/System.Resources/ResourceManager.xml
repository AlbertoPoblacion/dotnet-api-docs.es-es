<Type Name="ResourceManager" FullName="System.Resources.ResourceManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="621ffd2c5b5e5acab1b4620cb97287cd2ec3b307" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37640582" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ResourceManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ResourceManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ResourceManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceManager" />
  <TypeSignature Language="F#" Value="type ResourceManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a resource manager that provides convenient access to culture-specific resources at run time.  **Security Note**: Calling methods in this class with untrusted data is a security risk. Call the methods in the class only with trusted data. For more information, see [Untrusted Data Security Risks](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Resources.ResourceManager> clase recupera los recursos desde un archivo .resources binario que se incrusta en un ensamblado o desde un archivo .resources independiente. Si se ha localizado una aplicación y se han implementado los recursos localizados en [ensamblados satélite](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md), busca recursos específicos de la referencia cultural, que proporciona recursos de reserva cuando no existe un recurso localizado y es compatible con recursos serialización.  
  
 Para obtener más información sobre cómo crear y administrar recursos en aplicaciones de escritorio y [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] las aplicaciones, consulte las secciones siguientes:  
  
-   [Aplicaciones de escritorio](#desktop)  
  
    -   [Creación de recursos](#creating_resources)  
  
    -   [Instancias de un objeto ResourceManager](#instantiating)  
  
    -   [ResourceManager y recursos específicos de la referencia cultural](#CultureSpecific)  
  
    -   [Recuperar recursos](#retrieving)  
  
    -   [Control MissingManifestResourceException y MissingSatelliteAssemblyException excepciones](#exception)  
  
    -   [Control de versiones de recursos](#versioning)  
  
    -   [\<satelliteassemblies > nodo del archivo de configuración](#config)  
  
-   [Aplicaciones de Windows Store](#ws)  
  
<a name="desktop"></a>   
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 Para aplicaciones de escritorio, la <xref:System.Resources.ResourceManager> clase recupera los recursos de archivos de recursos binario (.resources). Normalmente, un compilador de lenguaje o la [Assembly Linker (AL.exe)](~/docs/framework/tools/al-exe-assembly-linker.md) inserta estos archivos de recursos en un ensamblado. También puede usar un <xref:System.Resources.ResourceManager> objeto para recuperar recursos directamente desde un archivo .resources que no se incrusta en un ensamblado, mediante una llamada a la <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> método.  
  
> [!CAUTION]
>  Uso de archivos .resources independientes en una aplicación ASP.NET interrumpirá la implementación de XCOPY, ya que los recursos permanecerán bloqueados hasta que se libere explícitamente el <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> método. Si desea implementar los recursos con las aplicaciones de ASP.NET, debe compilar los archivos .resources en ensamblados satélite.  
  
 En una aplicación basada en recursos, un archivo .resources contiene los recursos de la referencia cultural predeterminada cuyos recursos se usan si no se encuentra ningún recurso de la referencia cultural específica. Por ejemplo, si la referencia cultural predeterminada de una aplicación es inglés (en), los recursos de idioma inglés se usan siempre que no se puede encontrar los recursos localizados para una referencia cultural concreta, como inglés (Estados Unidos) (en-US) o francés (Francia) (fr-FR). Normalmente, los recursos de la referencia cultural predeterminada se incrustan en el ensamblado de aplicación principal y los recursos para otras referencias culturales incrustados en ensamblados satélite. Los ensamblados satélite contienen únicamente los recursos. Tienen el mismo nombre de archivo raíz como el ensamblado principal y una extensión de. resources.dll. Para las aplicaciones cuyos ensamblados no están registrados en la caché global de ensamblados, los ensamblados satélite se almacenan en un subdirectorio de la aplicación cuyo nombre se corresponde con la referencia cultural del ensamblado.  
  
<a name="creating_resources"></a>   
### <a name="creating-resources"></a>Creación de recursos  
 Al desarrollar una aplicación basada en recursos, almacenar información de recursos en archivos de texto (archivos que tienen una extensión .txt o .restext) o archivos XML (archivos que tienen la extensión .resx). A continuación, compila el texto o archivos XML con el [generador de archivos de recursos (Resgen.exe)](~/docs/framework/tools/resgen-exe-resource-file-generator.md) para crear un archivo .resources binario. A continuación, puede incrustar el archivo .resources resultante en un archivo ejecutable o biblioteca mediante una opción del compilador, como `/resources` para los compiladores de C# y Visual Basic, o bien puede insertarlo en un ensamblado satélite mediante el. Si incluye un archivo .resx en el proyecto de Visual Studio, Visual Studio controla la compilación y la incrustación de forma predeterminada y los recursos localizados automáticamente como parte del proceso de compilación.  
  
 Idealmente, debe crear los recursos para cada idioma de la aplicación es compatible con, o al menos para un subconjunto significativo de cada idioma. Los nombres de archivo .resources binario siguen la convención de nomenclatura *basename*.* cultureName*.resources, donde *basename* es el nombre de la aplicación o el nombre de una clase, según el nivel de detalle que desee. El <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propiedad se utiliza para determinar *cultureName*. Un recurso para la referencia cultural predeterminada de la aplicación debe denominarse *basename*Resources.  
  
 Por ejemplo, supongamos que un ensamblado tiene varios recursos en un archivo de recursos que tiene el nombre base MyResources. Estos archivos de recursos deberían tener nombres como MyResources.ja JP.resources la referencia cultural japonés (Japón), MyResources.de.resources para la referencia cultural de alemán, MyResources.zh-CHS.resources la referencia cultural chino simplificado, y MyResources.fr-BE.resources para la referencia cultural de francés (Bélgica). El archivo de recursos predeterminado debe ser denominado. Normalmente, los archivos de recursos específicos de referencias culturales se empaquetan en ensamblados satélite para cada referencia cultural. El archivo de recursos predeterminado se debe incrustar en el ensamblado principal de la aplicación.  
  
 Tenga en cuenta que permite que los recursos esté marcado como privado, pero siempre debe marcarlas como públicas por lo que se puede acceder a otros ensamblados. (Dado que un ensamblado satélite no contiene código, los recursos que están marcados como privados no están disponibles a la aplicación mediante cualquier mecanismo.)  
  
 Para obtener más información sobre la creación, empaquetado e implementación de recursos, consulte los artículos [crear archivos de recursos](~/docs/framework/resources/creating-resource-files-for-desktop-apps.md), [crear ensamblados satélite](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md), y [empaquetar e implementar Recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
<a name="instantiating"></a>   
### <a name="instantiating-a-resourcemanager-object"></a>Instancias de un objeto ResourceManager  
 Crea instancias de un <xref:System.Resources.ResourceManager> objeto que recupera los recursos de un archivo .resources incrustado llamando a uno de sus sobrecargas del constructor de clase. Esto se acople estrechamente una <xref:System.Resources.ResourceManager> objeto con un archivo .resources concreto y con cualquier asociado localizar archivos .resources en ensamblados satélite.  
  
 Los dos constructores llamados con más frecuencia son:  
  
-   <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> busca recursos en función de los dos fragmentos de información que proporcione: el nombre base del archivo .resources y el ensamblado en el que reside el archivo .resources predeterminado. El nombre base incluye el nombre raíz y espacio de nombres del archivo .resources, sin su referencia cultural o la extensión. Tenga en cuenta que los archivos .resources que se compilan a partir de la línea de comandos normalmente no incluyen un espacio de nombres, mientras que los archivos .resources que se crean en el entorno de Visual Studio lo hacen. Por ejemplo, si un archivo de recursos se denomina MyCompany.StringResources.resources y <xref:System.Resources.ResourceManager> constructor se llama desde un método estático denominado `Example.Main`, el código siguiente crea una instancia un <xref:System.Resources.ResourceManager> objeto que puede recuperar recursos desde el. archivo de recursos:  
  
     [!code-csharp[Conceptual.Resources.Retrieving#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#1)]
     [!code-vb[Conceptual.Resources.Retrieving#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#1)]  
  
-   <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> busca recursos en ensamblados satélite según la información de un objeto de tipo. Nombre completo del tipo corresponde al nombre base del archivo .resources sin la extensión de nombre de archivo. En las aplicaciones de escritorio que se crean mediante el Diseñador de recursos de Visual Studio, Visual Studio crea una clase de contenedor cuyo nombre completo es el mismo que el nombre de la raíz del archivo .resources. Por ejemplo, si un archivo de recursos se denomina MyCompany.StringResources.resources y hay una clase contenedora denominada `MyCompany.StringResources`, el código siguiente crea una instancia de un <xref:System.Resources.ResourceManager> objeto que puede recuperar recursos desde el archivo .resources:  
  
     [!code-csharp[Conceptual.Resources.Retrieving#2](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/ctor1.cs#2)]
     [!code-vb[Conceptual.Resources.Retrieving#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/ctor1.vb#2)]  
  
 Si no se encuentra los recursos adecuados, la llamada al constructor crea un válido <xref:System.Resources.ResourceManager> objeto. Sin embargo, el intento de recuperar un recurso produce un <xref:System.Resources.MissingManifestResourceException> excepción. Para obtener información sobre cómo tratar con la excepción, vea el [control MissingManifestResourceException y excepciones MissingSatelliteAssembly](#exception) sección más adelante en este artículo.  
  
 El ejemplo siguiente muestra cómo crear una instancia de un <xref:System.Resources.ResourceManager> objeto. Contiene el código fuente para un archivo ejecutable denominado ShowTime.exe. También incluye el siguiente archivo de texto denominado Strings.txt que contiene un recurso de cadena único, `TimeHeader`:  
  
```  
TimeHeader=The current time is  
```  
  
 Puede usar un archivo por lotes para generar el archivo de recursos e insertarlo en el archivo ejecutable. Este es el archivo por lotes para generar un archivo ejecutable con el compilador de C#:  
  
```  
  
resgen strings.txt  
csc ShowTime.cs /resource:strings.resources  
  
```  
  
 Para el compilador de Visual Basic, puede usar el siguiente archivo por lotes:  
  
```  
  
resgen strings.txt  
vbc ShowTime.vb /resource:strings.resources  
  
```  
  
 [!code-csharp[System.Resources.ResourceManager.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showtime.cs#1)]
 [!code-vb[System.Resources.ResourceManager.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showtime.vb#1)]  
  
<a name="CultureSpecific"></a>   
### <a name="resourcemanager-and-culture-specific-resources"></a>ResourceManager y recursos específicos de la referencia cultural  
 Una aplicación localizada requiere recursos para su implementación, como se describe en el artículo [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md). Si los ensamblados se han configurado correctamente, el Administrador de recursos determina qué recursos recuperar basan en el subproceso actual <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad. (Esa propiedad también devuelve referencia cultural de interfaz de usuario del subproceso actual). Por ejemplo, si una aplicación se compila con de forma predeterminada los recursos de idioma inglés en el ensamblado principal y con recursos de idioma de francés y ruso en dos ensamblados satélite y el <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad se establece en fr-FR, el Administrador de recursos recupera el francés recursos.  
  
 Puede establecer el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propiedad explícita o implícitamente. Determina la forma en que se establece el modo <xref:System.Resources.ResourceManager> objeto recupera los recursos basados en la referencia cultural:  
  
-   Si se establece explícitamente el <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad a una referencia cultural específica, el Administrador de recursos siempre recupera los recursos para esa referencia cultural, independientemente del lenguaje de sistema operativo o explorador del usuario. Considere la posibilidad de una aplicación que se compila con los recursos del idioma inglés de forma predeterminada y tres ensamblados satélite que contienen los recursos para inglés (Estados Unidos), francés (Francia) y ruso (Rusia). Si el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> propiedad se establece en fr-FR, el <xref:System.Resources.ResourceManager> objeto siempre recupera los recursos de francés (Francia), incluso si el usuario operativo del idioma del sistema no es el francés. Asegúrese de que es el comportamiento deseado antes de establecer la propiedad explícitamente.  
  
     En las aplicaciones ASP.NET, debe establecer el <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad explícitamente, porque es improbable que la configuración del servidor coincida con las solicitudes de cliente entrantes. Una aplicación ASP.NET puede establecer la <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> idioma aceptado por la propiedad explícitamente para el explorador del usuario.  
  
     De forma explícita el <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> propiedad define la referencia cultural de interfaz de usuario actual para ese subproceso. No afecta a la actual referencia cultural de interfaz de usuario de cualquier otro subproceso en una aplicación.  
  
-   Puede establecer la referencia cultural de interfaz de usuario de todos los subprocesos en un dominio de aplicación mediante la asignación de un <xref:System.Globalization.CultureInfo> objeto que representa esa referencia cultural estático <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A?displayProperty=nameWithType> propiedad.  
  
-   Si no establece explícitamente la referencia cultural de interfaz de usuario actual y no se define una referencia cultural predeterminada para el dominio de aplicación actual, el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad se establece implícitamente por el Windows `GetUserDefaultUILanguage` función. Esta función se proporciona por la interfaz de usuario multilingüe (MUI), lo que permite al usuario establecer el idioma predeterminado. Si no se establece el idioma de interfaz de usuario por el usuario, el valor predeterminado es el idioma instalado por el sistema, que es el idioma de recursos del sistema operativo.  
  
 El siguiente ejemplo simple "Hola mundo" establece explícitamente la referencia cultural de interfaz de usuario actual. Contiene recursos para tres referencias culturales: inglés (Estados Unidos) o en-US, francés (Francia) o fr-FR y ruso (Rusia) o ru-RU. Los recursos en-US se incluyen en un archivo de texto denominado Greetings.txt:  
  
```  
HelloString=Hello world!  
```  
  
 Contenidos en un archivo de texto denominado Greetings.fr los recursos de fr-FR-fr. txt:  
  
```  
HelloString=Salut tout le monde!  
```  
  
 Contenidos en un archivo de texto denominado Greetings.ru los recursos de ru-RU-RU. txt:  
  
```  
HelloString=Всем привет!  
```  
  
 Este es el código fuente para el ejemplo (Example.vb para la versión de Visual Basic) o Example.cs para la versión de C#:  
  
 [!code-csharp[Conceptual.Resources.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.currentculture/cs/example.cs#1)]
 [!code-vb[Conceptual.Resources.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.currentculture/vb/example.vb#1)]  
  
 Para compilar este ejemplo, cree un archivo por lotes (.bat) que contiene los siguientes comandos y ejecutarlo desde el símbolo del sistema. Si usa C#, especifique `csc` en lugar de `vbc` y `Example.cs` en lugar de `Example.vb`.  
  
```  
resgen Greetings.txt   
vbc Example.vb /resource:Greetings.resources  
  
resgen Greetings.fr-FR.txt  
Md fr-FR  
al /embed:Greetings.fr-FR.resources /culture:fr-FR /out:fr-FR\Example.resources.dll  
  
resgen Greetings.ru-RU.txt  
Md ru-RU  
al /embed:Greetings.ru-RU.resources /culture:ru-RU /out:ru-RU\Example.resources.dll  
```  
  
<a name="retrieving"></a>   
### <a name="retrieving-resources"></a>Recuperar recursos  
 Se llama a la <xref:System.Resources.ResourceManager.GetObject%28System.String%29> y <xref:System.Resources.ResourceManager.GetString%28System.String%29> métodos para tener acceso a un recurso específico. También puede llamar a la <xref:System.Resources.ResourceManager.GetStream%28System.String%29> método para recuperar los recursos que no son de cadena como una matriz de bytes. De forma predeterminada, en una aplicación que ha localizado a los recursos, estos métodos devuelven el recurso para la referencia cultural determinada por la referencia cultural de interfaz de usuario actual del subproceso que realizó la llamada. Consulte la sección anterior, [ResourceManager y recursos específicos de la referencia cultural](#CultureSpecific), para obtener más información acerca de cómo se define la referencia cultural de interfaz de usuario actual de un subproceso. Si el Administrador de recursos no encuentra el recurso para la referencia cultural de interfaz de usuario del subproceso actual, utiliza un proceso de reserva para recuperar el recurso especificado. Si el Administrador de recursos no puede encontrar los recursos adaptados, usa los recursos de la referencia cultural predeterminada. Para obtener más información acerca de las reglas de reserva de recursos, consulte la sección "Proceso de reserva de recursos" del artículo [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md).  
  
> [!NOTE]
>  Si el archivo .resources especificado en el <xref:System.Resources.ResourceManager> no se encuentra el constructor de clase, el intento de recuperar un recurso produce una <xref:System.Resources.MissingManifestResourceException> o <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Para obtener información sobre cómo tratar con la excepción, vea el [control MissingManifestResourceException y MissingSatelliteAssemblyException excepciones](#exception) sección más adelante en este tema.  
  
 En el ejemplo siguiente se usa el <xref:System.Resources.ResourceManager.GetString%2A> método para recuperar recursos específicos de la referencia cultural. Consta de los recursos compilados desde archivos .txt de inglés (en), francés (Francia) (fr-FR) y ruso (Rusia) (ru-RU), las referencias culturales. El ejemplo cambia la referencia cultural actual y la referencia cultural de interfaz de usuario actual para inglés (Estados Unidos), francés (Francia), ruso (Rusia) y sueco (Suecia). A continuación, llama el <xref:System.Resources.ResourceManager.GetString%2A> método para recuperar la cadena localizada, que muestra junto con el día actual y el mes. Observe que la salida muestra la cadena localizada adecuada, excepto cuando la referencia cultural de interfaz de usuario actual es Sueco (Suecia). Dado que no están disponibles los recursos de idioma sueco, la aplicación en su lugar, usa los recursos de la referencia cultural predeterminada, que es el inglés.  
  
 El ejemplo requiere los archivos de recursos basado en texto aparece en la tabla siguiente. Cada uno tiene un recurso de cadena único llamado `DateStart`.  
  
|culture|Nombre del archivo|Nombre del recurso|Valor del recurso|  
|-------------|---------------|-------------------|--------------------|  
|en-US|DateStrings.txt|`DateStart`|Hoy es|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui, le c'est|  
|ru-RU|DateStrings.ru-RU. txt|`DateStart`|СЕГОДНЯ|  
  
 Este es el código fuente para el ejemplo (ShowDate.vb para la versión de Visual Basic) o ShowDate.cs para la versión de C# del código.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)]
 [!code-vb[System.Resources.ResourceManager.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)]  
  
 Para compilar este ejemplo, cree un archivo por lotes que contiene los siguientes comandos y ejecutarlo desde el símbolo del sistema. Si usa C#, especifique `csc` en lugar de `vbc` y `showdate.cs` en lugar de `showdate.vb`.  
  
```  
  
resgen DateStrings.txt  
vbc showdate.vb /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
  
```  
  
 Hay dos maneras de recuperar los recursos de una referencia cultural que no sea la actual referencia cultural de interfaz de usuario:  
  
-   Puede llamar a la <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>, <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29>, o <xref:System.Resources.ResourceManager.GetStream%28System.String%2CSystem.Globalization.CultureInfo%29> método para recuperar un recurso para una referencia cultural concreta. Si no se encuentra un recurso localizado, el Administrador de recursos usa el proceso de reserva de recursos para buscar un recurso adecuado.  
  
-   Puede llamar a la <xref:System.Resources.ResourceManager.GetResourceSet%2A> método para obtener un <xref:System.Resources.ResourceSet> objeto que representa los recursos para una referencia cultural determinada. En la llamada al método, puede determinar si el Administrador de recursos busca las referencias culturales del elemento primario si no puede encontrar los recursos localizados, o si simplemente recurre a los recursos de la referencia cultural predeterminada. A continuación, puede usar el <xref:System.Resources.ResourceSet> métodos para tener acceso a los recursos (adaptados para esa referencia cultural) por su nombre, o para enumerar los recursos en el conjunto.  
  
<a name="exception"></a>   
### <a name="handling-missingmanifestresourceexception-and-missingsatelliteassemblyexception-exceptions"></a>Control MissingManifestResourceException y MissingSatelliteAssemblyException excepciones  
 Si se intenta recuperar un recurso específico, pero no se encuentra el Administrador de recursos que se ha definido ninguna referencia cultural de forma predeterminada y de recursos o los recursos de la referencia cultural predeterminada no se encuentra, se inicia el Administrador de recursos un <xref:System.Resources.MissingManifestResourceException> excepción si se espera encontrar los recursos en el ensamblado principal o un <xref:System.Resources.MissingSatelliteAssemblyException> si espera encontrar los recursos en un ensamblado satélite. Tenga en cuenta que la excepción se produce cuando se llama a un método de recuperación de recursos, como <xref:System.Resources.ResourceManager.GetString%2A> o <xref:System.Resources.ResourceManager.GetObject%2A>, y no cuando cree una instancia un <xref:System.Resources.ResourceManager> objeto.  
  
 La excepción se produce normalmente en las siguientes condiciones:  
  
-   No existe el ensamblado de archivo o satélite de recursos apropiado. Si el Administrador de recursos espera recursos de la aplicación predeterminada para incrustar en el ensamblado de aplicación principal, no aparecen. Si el <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo indica que los recursos predeterminados de la aplicación se encuentran en un ensamblado satélite, que no se encuentra el ensamblado. Cuando se compila la aplicación, asegúrese de que los recursos se incrustan en el ensamblado principal o que el ensamblado satélite necesario se genera y se denomina apropiadamente. Su nombre debe tener la forma *appName*. resources.dll y deben encontrarse en un directorio con el nombre de la referencia cultural cuyos recursos que contiene.  
  
-   La aplicación no tiene un valor predeterminado o la referencia cultural neutra definido. Agregar el <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo a un archivo de código fuente o al archivo de archivo (AssemblyInfo.vb para una aplicación de Visual Basic) o AssemblyInfo.cs para una aplicación de C# de información del proyecto.  
  
-   El `baseName` parámetro en el <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> constructor no especifica el nombre de un archivo .resources. El nombre debe incluir el espacio de nombres completo del archivo de recursos, pero no su extensión de nombre de archivo. Normalmente, los archivos de recursos que se crean en Visual Studio incluyen espacios de nombres, pero no los archivos de recursos que se crean y se compilan en el símbolo del sistema. Puede determinar los nombres de archivos .resources insertados, compile y ejecute la siguiente utilidad. Se trata de una aplicación de consola que acepta el nombre de un ensamblado principal o un ensamblado satélite como un parámetro de línea de comandos. Muestra las cadenas que se deben proporcionar como el `baseName` parámetro para que el Administrador de recursos pueda identificar correctamente el recurso.  
  
     [!code-csharp[System.Resources.ResourceManager.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)]
     [!code-vb[System.Resources.ResourceManager.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)]  
  
 Si va a cambiar explícitamente la referencia cultural actual de la aplicación, también debe recordar que el Administrador de recursos recupera un conjunto de recursos en función del valor de la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad y no el <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> propiedad. Normalmente, si cambia un valor, también debe cambiar el otro.  
  
<a name="versioning"></a>   
### <a name="resource-versioning"></a>Control de versiones de recursos  
 Dado que el ensamblado principal que contiene los recursos predeterminados de una aplicación es independiente de los ensamblados satélite de la aplicación, puede liberar una nueva versión del ensamblado principal sin volver a implementar los ensamblados satélite. Usa el <xref:System.Resources.SatelliteContractVersionAttribute> atributo usar ensamblados satélite existentes e indicarle el Administrador de recursos no volver a implementarlos con una nueva versión del ensamblado principal,  
  
 Para obtener más información sobre la compatibilidad con control de versiones de los ensamblados satélite, vea el artículo [recuperar recursos](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md).  
  
<a name="config"></a>   
### <a name="satelliteassemblies-configuration-file-node"></a>\<satelliteassemblies > nodo del archivo de configuración  
 Para los archivos ejecutables que se implementan y ejecutan desde un sitio Web (archivos .exe HREF), el <xref:System.Resources.ResourceManager> objeto puede sondear los ensamblados satélite a través de la web, que puede afectar negativamente al rendimiento de la aplicación. Para eliminar el problema de rendimiento, puede limitar este sondeo de los ensamblados satélite que haya implementado con la aplicación. Para ello, se crea un `<satelliteassemblies>` nodo en el archivo de configuración de la aplicación para especificar que ha implementado un conjunto de referencias culturales específicas para la aplicación y que la <xref:System.Resources.ResourceManager> no debe intentar que el objeto de sondeo para cualquier referencia cultural que no aparece en ese nodo.  
  
> [!NOTE]
>  La alternativa preferida a la creación de un `<satelliteassemblies>` nodo consiste en usar el [del manifiesto de implementación ClickOnce](http://msdn.microsoft.com/library/8457e615-e3b6-4990-8dcf-11bc590e4e9b) característica.  
  
 En el archivo de configuración de la aplicación, cree una sección similar al siguiente:  
  
```  
<?xml version ="1.0"?>  
<configuration>  
    <satelliteassemblies>  
        <assembly name="MainAssemblyName, Version=versionNumber, Culture=neutral, PublicKeyToken=null|yourPublicKeyToken">  
            <culture>cultureName1</culture>  
            <culture>cultureName2</culture>  
            <culture>cultureName3</culture>  
        </assembly>  
    </satelliteassemblies>  
</configuration>  
```  
  
 Edite esta información de configuración de la manera siguiente:  
  
-   Especifique uno o más `<assembly>` nodos para cada ensamblado principal que implemente, donde cada nodo especifica un nombre completo del ensamblado. Especifique el nombre del ensamblado principal en lugar de *nombre de ensamblado principal*y especifique el `Version`, `PublicKeyToken`, y `Culture` valores de atributo que corresponden al ensamblado principal.  
  
     Para el `Version` atributo, especifique el número de versión del ensamblado. Por ejemplo, la primera versión del ensamblado podría ser un número de versión 1.0.0.0.  
  
     Para el `PublicKeyToken` atributo, especifique la palabra clave `null` si no se ha firmado el ensamblado con un nombre seguro, o especifique su token de clave pública si ha firmado el ensamblado.  
  
     Para el `Culture` atributo, especifique la palabra clave `neutral` para designar el ensamblado principal y hacer que el <xref:System.Resources.ResourceManager> clase sondee solo para las referencias culturales que se muestran en el `<culture>` nodos.  
  
     Para obtener más información acerca de los nombres de ensamblado completo, vea el artículo [nombres de ensamblado](~/docs/framework/app-domains/assembly-names.md). Para obtener más información acerca de los ensamblados con nombre seguro, vea el artículo [crear y utilizar ensamblados](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).  
  
-   Especifique uno o más `<culture>` nodos con un nombre de referencia cultural específica, como "fr-FR", o un nombre de referencia cultural neutra, por ejemplo, "fr".  
  
 Si se necesitan recursos de cualquier ensamblado no aparece en el `<satelliteassemblies>` nodo, el <xref:System.Resources.ResourceManager> clase sondeos para referencias culturales con reglas de búsqueda estándares.  
  
<a name="ws"></a>   
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque el <xref:System.Resources.ResourceManager> clase es compatible en [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] las aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que se pueden usar con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos desde [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 Para [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, la <xref:System.Resources.ResourceManager> clase recupera los recursos de paquete (PRI) de índice archivos de recursos. Un único archivo PRI (el archivo PRI del paquete de aplicación) contiene los recursos de la referencia cultural predeterminada y cualquier localizados de las referencias culturales. Use la utilidad MakePRI para crear un archivo PRI desde uno o varios archivos de recursos que están en formato de recursos (.resw) XML. Para obtener recursos que se incluyen en un proyecto de Visual Studio, Visual Studio controla el proceso de crear y empaquetar el archivo PRI automáticamente. A continuación, puede usar .NET Framework <xref:System.Resources.ResourceManager> clase para tener acceso a los recursos de la biblioteca o de la aplicación.  
  
 Puede crear instancias de un <xref:System.Resources.ResourceManager> de objeto para un [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicación de la misma manera que lo hace para una aplicación de escritorio.  
  
 A continuación, puede tener acceso a los recursos para una referencia cultural determinada pasando el nombre del recurso que se va a recuperar para el <xref:System.Resources.ResourceManager.GetString%28System.String%29> método. De forma predeterminada, este método devuelve el recurso para la referencia cultural determinada por la referencia cultural de interfaz de usuario actual del subproceso que realizó la llamada. También puede recuperar los recursos para una referencia cultural concreta, pasando el nombre del recurso y un <xref:System.Globalization.CultureInfo> objeto que representa la referencia cultural cuyo recurso se va a recuperar para el <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> método. Si no se encuentra el recurso para la referencia cultural de interfaz de usuario actual o la referencia cultural especificada, el Administrador de recursos usa una lista de reserva de idioma de interfaz de usuario para buscar un recurso adecuado.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar una referencia cultural explícita y la referencia cultural implícita de la interfaz de usuario actual para obtener recursos de cadena de un ensamblado principal y un ensamblado satélite. Para obtener más información, vea la sección "Directorio ubicaciones de satélite ensamblados no instalado en la caché Global de ensamblados" de la [crear ensamblados satélite](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) tema.  
  
 Para ejecutar este ejemplo:  
  
1.  En el directorio de aplicación, cree un archivo denominado rmc.txt que contiene las cadenas de recursos siguientes:  
  
    ```  
  
    day=Friday  
    year=2006  
    holiday="Cinco de Mayo"  
  
    ```  
  
2.  Use la [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) para generar el archivo de recursos rmc.resources desde el archivo de entrada rmc.txt como sigue:  
  
    ```  
    resgen rmc.txt  
    ```  
  
3.  Cree un subdirectorio del directorio de aplicación y denomínelo "es-MX". Este es el nombre de referencia cultural del ensamblado satélite que creará en los tres pasos siguientes.  
  
4.  Cree un archivo denominado rmc.es-MX.txt en el directorio es-MX que contiene las cadenas de recursos siguientes:  
  
    ```  
  
    day=Viernes  
    year=2006  
    holiday="Cinco de Mayo"  
  
    ```  
  
5.  Use la [Resource File Generator](~/docs/framework/tools/resgen-exe-resource-file-generator.md) para generar el archivo de recursos rmc.es MX.resources desde el archivo de entrada rmc.es MX.txt como sigue:  
  
    ```  
    resgen rmc.es-MX.txt  
    ```  
  
6.  Suponga que el nombre de archivo para este ejemplo es rmc.vb o rmc.cs. Copie el siguiente código fuente en un archivo. A continuación, compilarlo e incrustar el archivo de recursos del ensamblado principal, rmc.resources, en el ensamblado ejecutable. Si usa el compilador de Visual Basic, la sintaxis es:  
  
    ```  
    vbc rmc.vb /resource:rmc.resources  
    ```  
  
     La sintaxis para el compilador de C# correspondiente es:  
  
    ```  
    csc /resource:rmc.resources rmc.cs  
    ```  
  
7.  Use la [Assembly Linker](~/docs/framework/tools/al-exe-assembly-linker.md) para crear un ensamblado satélite. Si el nombre de base de la aplicación es rmc, el nombre del ensamblado satélite debe ser rmc.resources.dll. El ensamblado satélite debe crearse en el directorio es-MX. Si es-MX es el directorio actual, use este comando:  
  
    ```  
    al /embed:rmc.es-MX.resources /c:es-MX /out:rmc.resources.dll   
    ```  
  
8.  Ejecute rmc.exe para obtener y mostrar las cadenas de recursos incrustado.  
  
 [!code-csharp[ResourceManager_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/ResourceManager_Class/cs/rmc.cs#1)]
 [!code-vb[ResourceManager_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ResourceManager_Class/vb/rmc.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para la ejecución de subprocesos.</threadsafe>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
    <altmember cref="T:System.Resources.SatelliteContractVersionAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ResourceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ResourceManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class with default values.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor solo es útil si escribir su propia clase que deriva la <xref:System.Resources.ResourceManager> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (Type resourceSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type resourceSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resourceSource As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(Type ^ resourceSource);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceManager : Type -&gt; System.Resources.ResourceManager" Usage="new System.Resources.ResourceManager resourceSource" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resourceSource" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="resourceSource">A type from which the resource manager derives all information for finding .resources files.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that looks up resources in satellite assemblies based on information from the specified type object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 En las aplicaciones de escritorio, el Administrador de recursos usa la `resourceSource` parámetro para cargar un archivo de recursos determinado como sigue:  
  
-   Si el <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo no se utiliza para indicar que los recursos de la referencia cultural predeterminada residen en un ensamblado satélite, el Administrador de recursos, se da por supuesto que el archivo de recursos para la referencia cultural predeterminada se encuentra en el mismo ensamblado que el tipo especificado por el `resourceSource` parámetro.  
  
-   El Administrador de recursos, se da por supuesto que el archivo de recursos predeterminado tiene el mismo nombre base que el tipo especificado por el `resourceSource` parámetro.  
  
-   El Administrador de recursos usa el valor predeterminado <xref:System.Resources.ResourceSet> clase para manipular el archivo de recursos.  
  
 Por ejemplo, dado un tipo denominado MyCompany.MyProduct.MyType, busca el Administrador de recursos para un archivo .resources denominado MyCompany.MyProduct.MyType.resources en el ensamblado que define MyType.  
  
 En Visual Studio, el Diseñador de recursos genera automáticamente código que define un `internal` (en C#) o `Friend` (en Visual Basic) la clase cuyo nombre es el mismo que el nombre base del archivo .resources para la referencia cultural predeterminada. Esto hace posible crear una instancia de un <xref:System.Resources.ResourceManager> de objetos y asociarlos a un determinado conjunto de recursos mediante la obtención de un objeto de tipo cuyo nombre se corresponde con el nombre del recurso, ya que siempre que la clase sea visible para el compilador, los recursos deben estar como bien. Por ejemplo, si un archivo .resources denominado Resource1, la siguiente instrucción crea una instancia de un <xref:System.Resources.ResourceManager> objeto para administrar el archivo .resources denominado Resource1:  
  
 [!code-csharp[System.Resources.ResourceManager.ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/ctor1.cs#2)]  
  
 Si no usa Visual Studio, puede crear una clase sin miembros cuyo nombre y espacio de nombres son los mismos que el del archivo .resources predeterminado. En este ejemplo se ilustra.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque el <xref:System.Resources.ResourceManager> clase es compatible en [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] las aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que se pueden usar con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos desde [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 En [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, <xref:System.Resources.ResourceManager> usa el `resourceSource` parámetro para deducir el ensamblado, el nombre base y el espacio de nombres donde los elementos del recurso pueden ubicarse en el archivo de recursos (PRI) de índice del paquete de la aplicación. Por ejemplo, dado un tipo denominado MyCompany.MyProduct.MyType que se define en `MyAssembly`, el Administrador de recursos es para un recurso del conjunto de identificador que se denomine MyAssembly y busca un ámbito MyCompany.MyProduct.MyType dentro de ese conjunto de recursos. Busca en el Administrador de recursos para los elementos de recursos en el contexto predeterminado (referencia cultural actual, la configuración de contraste alto actual etc.) dentro de este ámbito.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> constructor para crear instancias de un <xref:System.Resources.ResourceManager> objeto. Consta de los recursos compilados desde archivos .txt de inglés (en), francés (Francia) (fr-FR) y ruso (Rusia) (ru-RU), las referencias culturales. El ejemplo cambia la referencia cultural actual y la referencia cultural de interfaz de usuario actual para inglés (Estados Unidos), francés (Francia), ruso (Rusia) y sueco (Suecia). A continuación, llama el <xref:System.Resources.ResourceManager.GetString%28System.String%29> método para recuperar la cadena localizada, que mostrará un saludo que depende de la hora del día.  
  
 El ejemplo requiere tres archivos de recursos basado en texto, como se muestra en la tabla siguiente. Cada archivo incluye recursos de cadena denominados `Morning`, `Afternoon`, y `Evening`.  
  
|culture|Nombre del archivo|Nombre del recurso|Valor del recurso|  
|-------------|---------------|-------------------|--------------------|  
|en-US|GreetingResources.txt|`Morning`|Buenos días|  
|en-US|GreetingResources.txt|`Afternoon`|Buenas tardes|  
|en-US|GreetingResources.txt|`Evening`|Buenas noches|  
|fr-FR|GreetingResources.fr-FR.txt|`Morning`|Bonjour|  
|fr-FR|GreetingResources.fr-FR.txt|`Afternoon`|Bonjour|  
|fr-FR|GreetingResources.fr-FR.txt|`Evening`|Bonsoir|  
|ru-RU|GreetingResources.ru-RU. txt|`Morning`|ДОБРОЕ УТРО|  
|ru-RU|GreetingResources.ru-RU. txt|`Afternoon`|ДОБРЫЙ ДЕНЬ|  
|ru-RU|GreetingResources.ru-RU. txt|`Evening`|ДОБРЫЙ ВЕЧЕР|  
  
 Puede usar el siguiente archivo por lotes para compilar el ejemplo de Visual Basic y crear un archivo ejecutable denominado Greet.exe. Para compilar con C#, cambie el nombre del compilador de `vbc` a `csc` y la extensión de archivo de `.vb` a `.cs`.  
  
```  
  
resgen GreetingResources.txt  
vbc Greet.vb /resource: GreetingResources.resources  
  
md fr-FR  
resgen GreetingResources.fr-FR.txt  
al /out:fr-FR\Greet.resources.dll /culture:fr-FR /embed: GreetingResources.fr-FR.resources   
  
md ru-RU  
resgen GreetingResources.ru-RU.txt  
al /out:ru-RU\Greet.resources.dll /culture:ru-RU /embed: GreetingResources.ru-RU.resources  
  
```  
  
 Este es el código fuente para el ejemplo (ShowDate.vb para la versión de Visual Basic) o ShowDate.cs para la versión de C# del código.  
  
 [!code-csharp[System.Resources.ResourceManager.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/greet.cs#3)]
 [!code-vb[System.Resources.ResourceManager.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/vb/greet.vb#3)]  
  
 Además de definir una clase de aplicación denominado `Example`, el código fuente define una clase interna cuyo nombre, `GreetingResources`, es el mismo que el nombre de la base de los archivos de recursos. Esto hace posible crear instancias de correctamente un <xref:System.Resources.ResourceManager> objeto mediante una llamada a la <xref:System.Resources.ResourceManager.%23ctor%28System.Type%29> constructor.  
  
 Tenga en cuenta que la salida muestra localizado adecuado cadena excepto cuando la referencia cultural de interfaz de usuario actual es Sueco (Suecia), en cuyo caso utiliza recursos del idioma inglés. Dado que los recursos de idioma sueco están disponibles, la aplicación usa los recursos de la referencia cultural predeterminada, tal como se define por la <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo, en su lugar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="resourceSource" /> parameter is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (string baseName, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseName, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(System::String ^ baseName, System::Reflection::Assembly ^ assembly);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceManager : string * System.Reflection.Assembly -&gt; System.Resources.ResourceManager" Usage="new System.Resources.ResourceManager (baseName, assembly)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name. For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource.</param>
        <param name="assembly">The main assembly for the resources.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that looks up resources contained in files with the specified root name in the given assembly.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 En las aplicaciones de escritorio, los archivos de recursos individuales de referencia cultural específica deben estar incluidos en los ensamblados satélite y archivo de recursos de la referencia cultural de forma predeterminada debe estar incluido en el ensamblado principal. Un ensamblado satélite se supone que contiene los recursos de una única referencia cultural especificada en el manifiesto del ensamblado y se carga según sea necesario.  
  
> [!NOTE]
>  Para recuperar recursos desde archivos .resources directamente en lugar de recuperarlos desde ensamblados, debe llamar a la <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> método en su lugar para crear instancias de un <xref:System.Resources.ResourceManager> objeto.  
  
 Si el archivo de recursos identificados por `baseName` no se encuentra en `assembly`, el método crea una instancia de un <xref:System.Resources.ResourceManager> objeto, pero el intento de recuperar un recurso concreto produce una excepción, normalmente <xref:System.Resources.MissingManifestResourceException>. Para obtener información acerca de cómo diagnosticar la causa de la excepción, vea la sección "Control the MissingManifestResourceException (excepción)" de la <xref:System.Resources.ResourceManager> tema de la clase.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque el <xref:System.Resources.ResourceManager> clase es compatible en [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] las aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que se pueden usar con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos desde [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 En [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] apps, el Administrador de recursos usa el nombre sencillo de la `assembly` establecido para buscar un recurso coincidente en el archivo de recursos (PRI) de índice del paquete de la aplicación. El `baseName` parámetro se usa para buscar un elemento de recurso en el conjunto de recursos. Por ejemplo, el nombre de raíz para PortableLibrary1.Resource1.de-DE.resources es PortableLibrary1.Resource1.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa una aplicación de "Hello World" sencilla no localizado para ilustrar la <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> constructor. La siguiente muestra el contenido de un archivo de texto denominado ExampleResources.txt. Cuando se compila la aplicación, el recurso se incrusta en el ensamblado de aplicación principal.  
  
```  
Greeting=Hello  
```  
  
 El archivo de texto se puede convertir en un archivo de recursos binario mediante el uso de la en el comando de símbolo del sistema como sigue:  
  
```  
resgen ExampleResources.txt  
```  
  
 En el ejemplo siguiente se proporciona el código ejecutable que se crea una instancia de un <xref:System.Resources.ResourceManager> pide al usuario que escriba un nombre de objeto y mostrará un saludo.  
  
 [!code-csharp[System.Resources.ResourceManager.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/cs/example.cs#1)]
 [!code-vb[System.Resources.ResourceManager.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.ctor/vb/example.vb#1)]  
  
 Se puede compilar mediante el comando siguiente en Visual Basic:  
  
```  
vbc Example.vb /resource:ExampleResources.resources  
```  
  
 o bien, mediante el siguiente comando en C#:  
  
```  
csc Example.cs /resource:ExampleResources.resources  
```  
  
 Tenga en cuenta que el ejemplo recupera una referencia al ensamblado que contiene el archivo de recursos al pasar un tipo definido en dicho ensamblado para el `typeof` función (en C#) o el `GetType` función (en Visual Basic) y recuperar el valor de su <xref:System.Type.Assembly%2A?displayProperty=nameWithType>propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> or <paramref name="assembly" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Este constructor utiliza proporcionado por el sistema <see cref="T:System.Resources.ResourceSet" /> implementación. Para usar un formato de archivo de recursos personalizado, debe derivar de la <see cref="T:System.Resources.ResourceSet" /> clase, invalide el <see cref="M:System.Resources.ResourceSet.GetDefaultReader" /> y <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /> métodos y pase que escriba para la <see cref="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" /> constructor. Utiliza una <see cref="T:System.Resources.ResourceSet" /> puede ser útil para controlar recurso de la directiva de caché o que admiten el formato de archivo de recursos, pero generalmente no es necesario.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceManager (string baseName, System.Reflection.Assembly assembly, Type usingResourceSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string baseName, class System.Reflection.Assembly assembly, class System.Type usingResourceSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.#ctor(System.String,System.Reflection.Assembly,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceManager(System::String ^ baseName, System::Reflection::Assembly ^ assembly, Type ^ usingResourceSet);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceManager : string * System.Reflection.Assembly * Type -&gt; System.Resources.ResourceManager" Usage="new System.Resources.ResourceManager (baseName, assembly, usingResourceSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="usingResourceSet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseName">The root name of the resource file without its extension but including any fully qualified namespace name. For example, the root name for the resource file named MyApplication.MyResource.en-US.resources is MyApplication.MyResource.</param>
        <param name="assembly">The main assembly for the resources.</param>
        <param name="usingResourceSet">The type of the custom <see cref="T:System.Resources.ResourceSet" /> to use. If <see langword="null" />, the default runtime <see cref="T:System.Resources.ResourceSet" /> object is used.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Resources.ResourceManager" /> class that uses a specified <see cref="T:System.Resources.ResourceSet" /> class to look up resources contained in files with the specified root name in the given assembly.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los archivos de recursos individuales de referencia cultural específica deben estar incluidos en los ensamblados satélite y archivo de recursos de la referencia cultural de forma predeterminada debe estar incluido en el ensamblado principal. Un ensamblado satélite se supone que contiene los recursos de una única referencia cultural especificada en el manifiesto del ensamblado y se carga según sea necesario.  
  
> [!NOTE]
>  Para recuperar recursos desde archivos .resources directamente en lugar de recuperarlos desde ensamblados, debe llamar a la <xref:System.Resources.ResourceManager.CreateFileBasedResourceManager%2A> método en su lugar para crear instancias de un <xref:System.Resources.ResourceManager> objeto.  
  
 Si el archivo de recursos identificados por `baseName` no se encuentra en `assembly`, el método crea una instancia de un <xref:System.Resources.ResourceManager> objeto, pero el intento de recuperar un recurso concreto produce una excepción, normalmente <xref:System.Resources.MissingManifestResourceException>. Para obtener información acerca de cómo diagnosticar la causa de la excepción, vea la sección "Control the MissingManifestResourceException (excepción)" de la <xref:System.Resources.ResourceManager> tema de la clase.  
  
> [!NOTE]
>  El `usingResourceSet` parámetro se usa para admitir el formato de recursos y, normalmente será `null`. Esto es diferente del constructor que toma un <xref:System.Type> solo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="usingResourceset" /> is not a derived class of <see cref="T:System.Resources.ResourceSet" />.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> or <paramref name="assembly" /> parameter is <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Este constructor permite especificar un <see cref="T:System.Resources.ResourceSet" /> implementación. Si no desea que un determinado <see cref="T:System.Resources.ResourceSet" /> implementación pero desea utilizar un formato de archivo de recursos personalizado, debe derivar de la <see cref="T:System.Resources.ResourceSet" /> clase, invalide el <see cref="M:System.Resources.ResourceSet.GetDefaultReader" /> y <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" /> métodos y que escriba pase a este constructor.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BaseName">
      <MemberSignature Language="C#" Value="public virtual string BaseName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseName" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.BaseName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property BaseName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseName : string" Usage="System.Resources.ResourceManager.BaseName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</summary>
        <value>Nombre raíz de los archivos de recursos donde <see cref="T:System.Resources.ResourceManager" /> busca recursos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.BaseName%2A> propiedad refleja el nombre de espacio de nombres completo y el nombre de recurso de la raíz de un archivo de recursos, sin la extensión de nombre de la referencia cultural o archivo. Por ejemplo, si el archivo de recursos predeterminado de una aplicación se denomina `SampleApps.StringResources.resources`, el valor de la <xref:System.Resources.ResourceManager.BaseName%2A> propiedad es "SampleApps.StringResources". Si es el nombre de archivo de recursos predeterminado de una aplicación `SampleApps.StringResources.en-US.resources` y se incrusta en un ensamblado satélite, el valor de la <xref:System.Resources.ResourceManager.BaseName%2A> propiedad sigue siendo "SampleApps.StringResources".  
  
> [!IMPORTANT]
>  El <xref:System.Resources.ResourceManager.BaseName%2A> valor de propiedad de un archivo de recursos que se compila e incrustado desde la línea de comandos no incluye un espacio de nombres, a menos que los incluya explícitamente uno al compilar el archivo. Por otro lado, la <xref:System.Resources.ResourceManager.BaseName%2A> valor de propiedad de un archivo de recursos que se compila e incrustado en el entorno de Visual Studio normalmente incluye el nombre del espacio de nombres predeterminado.  
  
 El <xref:System.Resources.ResourceManager.BaseName%2A> valor de propiedad es el mismo que la cadena pasada a la <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> o <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29> constructor al crear instancias de un <xref:System.Resources.ResourceManager> instancia.  
  
   
  
## Examples  
 Puede determinar los nombres de archivos .resources insertados, compile y ejecute la siguiente utilidad. Se trata de una aplicación de consola que acepta el nombre de un ensamblado principal o un ensamblado satélite como un parámetro de línea de comandos. Muestra las cadenas que se deben proporcionar como el `baseName` parámetro de la <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> o <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%2CSystem.Type%29> constructor para que el Administrador de recursos pueda identificar correctamente el recurso.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/resourcenames.cs#4)]
 [!code-vb[System.Resources.ResourceManager.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/resourcenames.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseNameField">
      <MemberSignature Language="C#" Value="protected string BaseNameField;" />
      <MemberSignature Language="ILAsm" Value=".field family string BaseNameField" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.BaseNameField" />
      <MemberSignature Language="VB.NET" Value="Protected BaseNameField As String " />
      <MemberSignature Language="C++ CLI" Value="protected: System::String ^ BaseNameField;" />
      <MemberSignature Language="F#" Value="val mutable BaseNameField : string" Usage="System.Resources.ResourceManager.BaseNameField" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the root name of the resource files that the <see cref="T:System.Resources.ResourceManager" /> searches for resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.BaseNameField> campo solo es útil si escribir su propia clase que deriva la <xref:System.Resources.ResourceManager> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFileBasedResourceManager">
      <MemberSignature Language="C#" Value="public static System.Resources.ResourceManager CreateFileBasedResourceManager (string baseName, string resourceDir, Type usingResourceSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Resources.ResourceManager CreateFileBasedResourceManager(string baseName, string resourceDir, class System.Type usingResourceSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.CreateFileBasedResourceManager(System.String,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFileBasedResourceManager (baseName As String, resourceDir As String, usingResourceSet As Type) As ResourceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Resources::ResourceManager ^ CreateFileBasedResourceManager(System::String ^ baseName, System::String ^ resourceDir, Type ^ usingResourceSet);" />
      <MemberSignature Language="F#" Value="static member CreateFileBasedResourceManager : string * string * Type -&gt; System.Resources.ResourceManager" Usage="System.Resources.ResourceManager.CreateFileBasedResourceManager (baseName, resourceDir, usingResourceSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="resourceDir" Type="System.String" />
        <Parameter Name="usingResourceSet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="baseName">The root name of the resources. For example, the root name for the resource file named "MyResource.en-US.resources" is "MyResource".</param>
        <param name="resourceDir">The name of the directory to search for the resources. <c>resourceDir</c> can be an absolute path or a relative path from the application directory.</param>
        <param name="usingResourceSet">The type of the custom <see cref="T:System.Resources.ResourceSet" /> to use. If <see langword="null" />, the default runtime <see cref="T:System.Resources.ResourceSet" /> object is used.</param>
        <summary>Returns a <see cref="T:System.Resources.ResourceManager" /> object that searches a specific directory instead of an assembly manifest for resources.</summary>
        <returns>A new instance of a resource manager that searches the specified directory instead of an assembly manifest for resources.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método devuelve un administrador de recursos que recupera los recursos de un archivo .resources que no se incrusta en un ensamblado. Puede usar esto <xref:System.Resources.ResourceManager> objeto que se va a cargar los recursos de una página ASP.NET o probar un <xref:System.Resources.ResourceSet> implementación.  Para obtener un ejemplo que recupera los recursos de un archivo .resources independiente, consulte el [recuperar recursos](~/docs/framework/resources/retrieving-resources-in-desktop-apps.md) artículo.  
  
 Este método le permite especificar un <xref:System.Resources.ResourceSet> implementación. Si no desea que un determinado <xref:System.Resources.ResourceSet> implementación, pero le gustaría utilizar un formato de archivo de recursos personalizado, debe derivar de la <xref:System.Resources.ResourceSet> clase, invalide el <xref:System.Resources.ResourceSet.GetDefaultReader%2A> y <xref:System.Resources.ResourceSet.GetDefaultWriter%2A> métodos y que escriba pase a este constructor.  
  
> [!CAUTION]
>  Uso de archivos .resources independientes en una aplicación ASP.NET interrumpirá la implementación de XCOPY, ya que los recursos permanecerán bloqueados hasta que se libere explícitamente el <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> método. Si desea implementar los recursos con las aplicaciones de ASP.NET, compile los archivos .resources en ensamblados satélite.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="baseName" /> or <paramref name="resourceDir" /> parameter is <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="FallbackLocation">
      <MemberSignature Language="C#" Value="protected System.Resources.UltimateResourceFallbackLocation FallbackLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Resources.UltimateResourceFallbackLocation FallbackLocation" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.FallbackLocation" />
      <MemberSignature Language="VB.NET" Value="Protected Property FallbackLocation As UltimateResourceFallbackLocation" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Resources::UltimateResourceFallbackLocation FallbackLocation { System::Resources::UltimateResourceFallbackLocation get(); void set(System::Resources::UltimateResourceFallbackLocation value); };" />
      <MemberSignature Language="F#" Value="member this.FallbackLocation : System.Resources.UltimateResourceFallbackLocation with get, set" Usage="System.Resources.ResourceManager.FallbackLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.UltimateResourceFallbackLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the location from which to retrieve default fallback resources.</summary>
        <value>Uno de los valores de enumeración que especifica dónde el administrador de recursos puede buscar los recursos de reserva.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.FallbackLocation%2A> propiedad sólo es útil si escribir su propia clase que deriva la <xref:System.Resources.ResourceManager> clase.  
  
 Puede usar el <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo para informar al administrador de recursos dónde encontrar la referencia cultural predeterminada para una aplicación: en el ensamblado principal (valor predeterminado) o en un ensamblado satélite.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.UltimateResourceFallbackLocation" />
        <altmember cref="T:System.Resources.NeutralResourcesLanguageAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetNeutralResourcesLanguage">
      <MemberSignature Language="C#" Value="protected static System.Globalization.CultureInfo GetNeutralResourcesLanguage (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Globalization.CultureInfo GetNeutralResourcesLanguage(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetNeutralResourcesLanguage(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetNeutralResourcesLanguage (a As Assembly) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Globalization::CultureInfo ^ GetNeutralResourcesLanguage(System::Reflection::Assembly ^ a);" />
      <MemberSignature Language="F#" Value="static member GetNeutralResourcesLanguage : System.Reflection.Assembly -&gt; System.Globalization.CultureInfo" Usage="System.Resources.ResourceManager.GetNeutralResourcesLanguage a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">The assembly for which to return culture-specific information.</param>
        <summary>Returns culture-specific information for the main assembly's default resources by retrieving the value of the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> attribute on a specified assembly.</summary>
        <returns>The culture from the <see cref="T:System.Resources.NeutralResourcesLanguageAttribute" /> attribute, if found; otherwise, the invariant culture.</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the value of the specified non-string resource for the current culture.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : string -&gt; obj&#xA;override this.GetObject : string -&gt; obj" Usage="resourceManager.GetObject name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the resource to get.</param>
        <summary>Returns the value of the specified non-string resource.</summary>
        <returns>The value of the resource localized for the caller's current culture settings. If an appropriate resource set exists but <paramref name="name" /> cannot be found, the method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetObject%2A> método se usa para recuperar los recursos que no son de cadena. Estos incluyen valores que pertenecen a tipos de datos primitivos como <xref:System.Int32> o <xref:System.Double>, mapas de bits (como un <xref:System.Drawing.Bitmap?displayProperty=nameWithType> objeto), o personalizar objetos serializados. Normalmente, el objeto devuelto debe ser convierta (en C#) o convertir (en Visual Basic) a un objeto del tipo adecuado.  
  
 El recurso devuelto se adapta a la referencia cultural de interfaz de usuario del subproceso actual, que se define mediante el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad. Si no se encuentra el recurso para esa referencia cultural, el Administrador de recursos usa reglas de reserva para cargar un recurso adecuado. Si no se encuentra ningún conjunto de recursos localizados utilizable, el <xref:System.Resources.ResourceManager> recurre a los recursos de la referencia cultural de forma predeterminada. Si no se encuentra un conjunto de recursos para la referencia cultural predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si se espera que el conjunto de recursos que residan en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (predeterminado) o entre mayúsculas y minúsculas.  
  
> [!CAUTION]
>  Este método puede producir más excepciones que aparecen. Una razón de que esto puede ocurrir es si un método que llama este método produce una excepción.  Por ejemplo, un <xref:System.IO.FileLoadException> que podría producirse la excepción si se produjo un error de implementación o la instalación de un ensamblado satélite, o un <xref:System.Runtime.Serialization.SerializationException> que podría producirse la excepción si un tipo definido por el usuario inicia una excepción definida por el usuario cuando se deserializa el tipo.  
  
## <a name="performance-considerations"></a>Consideraciones sobre el rendimiento  
 Si se llama a la <xref:System.Resources.ResourceManager.GetObject%2A> método varias veces con el mismo `name` parámetro, no dependen del método que devuelve una referencia al mismo objeto con cada llamada. Esto es porque el <xref:System.Resources.ResourceManager.GetObject%2A> método puede devolver una referencia a un objeto de recurso existente en una memoria caché, o puede volver a cargar el recurso y devolver una referencia a un nuevo objeto de recurso.  
  
   
  
## Examples  
 En el siguiente ejemplo se usa el método <xref:System.Resources.ResourceManager.GetObject%28System.String%29> para deserializar un objeto personalizado. El ejemplo incluye un archivo de código fuente denominado UIElements.cs (UIElements.vb en el caso si está utilizando Visual Basic) que define la siguiente estructura, denominada `PersonTable`. Esta estructura está pensada para usarse con una rutina de visualización general de tabla en la que se muestren los nombres localizados de las columnas de la tabla. Tenga en cuenta que la estructura `PersonTable` está marcada con el atributo <xref:System.SerializableAttribute> .  
  
 [!code-csharp[Conceptual.Resources.Retrieving#6](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example.cs#6)]
 [!code-vb[Conceptual.Resources.Retrieving#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example.vb#6)]  
  
 El siguiente código del archivo CreateResources.cs (CreateResources.vb para Visual Basic) crea un archivo de recursos XML denominado UIResources.resx que almacena un título de tabla y un objeto `PersonTable` que contiene información de una aplicación localizada para el idioma inglés.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#7](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example1.cs#7)]
 [!code-vb[Conceptual.Resources.Retrieving#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example.vb#7)]  
  
 Después, el siguiente código del archivo de código fuente GetObject.cs (GetObject.vb) recupera los recursos y los muestra en la consola.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#8](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/example2.cs#8)]
 [!code-vb[Conceptual.Resources.Retrieving#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/example2.vb#8)]  
  
 Puede crear el archivo de recursos y los ensamblados necesarios y ejecutar la aplicación con el siguiente archivo por lotes. Debe usar la opción `/r` para proporcionar a Resgen.exe una referencia a UIElements.dll para que pueda tener acceso a la información de la estructura `PersonTable` . Si usa C#, reemplace el nombre del compilador `vbc` por `csc`y la extensión `.vb` por `.cs`.  
  
```  
  
vbc /t:library UIElements.vb  
vbc CreateResources.vb /r:UIElements.dll  
CreateResources  
  
resgen UIResources.resx  /r:UIElements.dll  
vbc GetObject.vb /r:UIElements.dll /resource:UIResources.resources  
  
GetObject.exe  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of localized resources has been found, and there are no default culture resources. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">The default culture's resources reside in a satellite assembly that could not be found. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="M:System.Resources.ResourceManager.GetStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String, culture As CultureInfo) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : string * System.Globalization.CultureInfo -&gt; obj&#xA;override this.GetObject : string * System.Globalization.CultureInfo -&gt; obj" Usage="resourceManager.GetObject (name, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">The name of the resource to get.</param>
        <param name="culture">The culture for which the resource is localized. If the resource is not localized for this culture, the resource manager uses fallback rules to locate an appropriate resource.  If this value is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> object is obtained by using the <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> property.</param>
        <summary>Gets the value of the specified non-string resource localized for the specified culture.</summary>
        <returns>The value of the resource, localized for the specified culture. If an appropriate resource set exists but <paramref name="name" /> cannot be found, the method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> método se usa para recuperar los recursos que no son de cadena. Estos incluyen valores que pertenecen a tipos de datos primitivos como <xref:System.Int32> o <xref:System.Double>, mapas de bits (como un <xref:System.Drawing.Bitmap?displayProperty=nameWithType> objeto), o personalizar objetos serializados. Normalmente, el objeto devuelto debe ser convierta (en C#) o convertir (en Visual Basic) a un objeto del tipo adecuado.  
  
 El recurso devuelto se adapta a la referencia cultural especificada por `culture`, o para la referencia cultural especificada por el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad si `culture` es `null`. Si no se encuentra el recurso para esa referencia cultural, el Administrador de recursos usa reglas de reserva para cargar un recurso adecuado. Si no se encuentra ningún conjunto de recursos localizados utilizable, el Administrador de recursos vuelve en los recursos de la referencia cultural de forma predeterminada. Si no se encuentra un conjunto de recursos para la referencia cultural predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si se espera que el conjunto de recursos que residan en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (predeterminado) o entre mayúsculas y minúsculas.  
  
> [!CAUTION]
>  Este método puede producir más excepciones que aparecen. Una razón de que esto puede ocurrir es si un método que llama este método produce una excepción.  Por ejemplo, un <xref:System.IO.FileLoadException> que podría producirse la excepción si se produjo un error de implementación o la instalación de un ensamblado satélite, o un <xref:System.Runtime.Serialization.SerializationException> que podría producirse la excepción si un tipo definido por el usuario inicia una excepción definida por el usuario cuando se deserializa el tipo.  
  
## <a name="performance-considerations"></a>Consideraciones sobre el rendimiento  
 Si se llama a la <xref:System.Resources.ResourceManager.GetObject%2A> método varias veces con el mismo `name` parámetro, no dependen del método que devuelve una referencia al mismo objeto con cada llamada. Esto es porque el <xref:System.Resources.ResourceManager.GetObject%2A> método puede devolver una referencia a un objeto de recurso existente en una memoria caché, o puede volver a cargar el recurso y devolver una referencia a un nuevo objeto de recurso.  
  
   
  
## Examples  
 En el siguiente ejemplo se usa el método <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> para deserializar un objeto personalizado. El ejemplo incluye un archivo de código fuente denominado NumberInfo.cs (NumberInfo.vb si está utilizando Visual Basic) que define la siguiente estructura, denominada `Numbers`. Esta estructura está pensada para usarse mediante una sencilla aplicación educativa que enseña a los estudiantes de habla de distintos del inglés para contar a diez en inglés. Tenga en cuenta que el `Numbers` clase está marcada con el <xref:System.SerializableAttribute> atributo.  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/numberinfo.cs#1)]
 [!code-vb[System.Resources.ResourceManager.GetObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/numberinfo.vb#1)]  
  
 El siguiente código fuente desde un archivo con nombre CreateResources.cs (CreateResources.vb para Visual Basic) crea los archivos de recursos XML para el idioma inglés de forma predeterminada, así como para los idiomas francés, portugués y ruso.  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/createresources.cs#2)]
 [!code-vb[System.Resources.ResourceManager.GetObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/createresources.vb#2)]  
  
 La aplicación siguiente, que establece la referencia cultural de interfaz de usuario actual a francés (Francia), portugués (Brasil) o ruso (Rusia) consume los recursos. Llama a la <xref:System.Resources.ResourceManager.GetObject%28System.String%29> método para obtener un `Numbers` objeto que contiene números localizados y la <xref:System.Resources.ResourceManager.GetObject%28System.String%2CSystem.Globalization.CultureInfo%29> método para obtener un `Numbers` objeto que contiene los números de idioma inglés. A continuación, muestra los números impares utilizando la referencia cultural de interfaz de usuario actual y el idioma inglés. El archivo de código fuente se denomina ShowNumbers.cs (ShowNumbers.vb).  
  
 [!code-csharp[System.Resources.ResourceManager.GetObject#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/cs/shownumbers.cs#3)]
 [!code-vb[System.Resources.ResourceManager.GetObject#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getobject/vb/shownumbers.vb#3)]  
  
 Puede usar el siguiente archivo por lotes para compilar y ejecutar la versión de Visual Basic del ejemplo. Si está utilizando C#, reemplace `vbc` con `csc`y reemplace el `.vb` extensión con `.cs`.  
  
```  
  
vbc /t:library NumberInfo.vb  
  
vbc CreateResources.vb /r:NumberInfo.dll  
CreateResources  
  
resgen NumberResources.resx /r:NumberInfo.dll  
  
resgen NumberResources.fr.resx /r:Numberinfo.dll  
Md fr  
al /embed:NumberResources.fr.resources /culture:fr /t:lib /out:fr\ShowNumbers.resources.dll  
  
resgen NumberResources.pt.resx  /r:Numberinfo.dll  
Md pt  
al /embed:NumberResources.pt.resources /culture:pt /t:lib /out:pt\ShowNumbers.resources.dll  
  
resgen NumberResources.ru.resx /r:Numberinfo.dll  
Md ru  
al /embed:NumberResources.ru.resources /culture:ru /t:lib /out:ru\ShowNumbers.resources.dll  
  
vbc ShowNumbers.vb /r:NumberInfo.dll /resource:NumberResources.resources  
ShowNumbers.exe  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources have been found, and there are no default culture resources. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">The default culture's resources reside in a satellite assembly that could not be found. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>El <see cref="M:System.Resources.ResourceManager.GetObject(System.String,System.Globalization.CultureInfo)" /> método es seguro para subprocesos.</threadsafe>
        <altmember cref="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceFileName">
      <MemberSignature Language="C#" Value="protected virtual string GetResourceFileName (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetResourceFileName(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetResourceFileName(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetResourceFileName (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetResourceFileName(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetResourceFileName : System.Globalization.CultureInfo -&gt; string&#xA;override this.GetResourceFileName : System.Globalization.CultureInfo -&gt; string" Usage="resourceManager.GetResourceFileName culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">The culture object for which a resource file name is constructed.</param>
        <summary>Generates the name of the resource file for the given <see cref="T:System.Globalization.CultureInfo" /> object.</summary>
        <returns>The name that can be used for a resource file for the given <see cref="T:System.Globalization.CultureInfo" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetResourceFileName%2A> método sólo es útil si escribir su propia clase que deriva la <xref:System.Resources.ResourceManager> clase.  
  
 Este método usa la <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> propiedad como parte del nombre de archivo para todas las referencias culturales que no sea la referencia cultural invariable. Este método no aparece en el manifiesto de un ensamblado ni en el disco y solo se utiliza para construir un nombre de archivo de recursos (adecuado para pasar a la <xref:System.Resources.ResourceReader> constructor) o un nombre de blob del recurso del manifiesto.  
  
 Una clase derivada puede invalidar este método para buscar una extensión diferente, como ". ResX", o un esquema completamente diferente para nombrar los archivos de recursos. Tenga en cuenta que el método puede utilizarse para personalizar el nombre de un archivo de recursos dentro de un ensamblado satélite y no para personalizar el nombre del propio ensamblado satélite.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceSet">
      <MemberSignature Language="C#" Value="public virtual System.Resources.ResourceSet GetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Resources.ResourceSet GetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResourceSet (culture As CultureInfo, createIfNotExists As Boolean, tryParents As Boolean) As ResourceSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Resources::ResourceSet ^ GetResourceSet(System::Globalization::CultureInfo ^ culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="F#" Value="abstract member GetResourceSet : System.Globalization.CultureInfo * bool * bool -&gt; System.Resources.ResourceSet&#xA;override this.GetResourceSet : System.Globalization.CultureInfo * bool * bool -&gt; System.Resources.ResourceSet" Usage="resourceManager.GetResourceSet (culture, createIfNotExists, tryParents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="createIfNotExists" Type="System.Boolean" />
        <Parameter Name="tryParents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">The culture whose resources are to be retrieved.</param>
        <param name="createIfNotExists">
          <see langword="true" /> to load the resource set, if it has not been loaded yet; otherwise, <see langword="false" />.</param>
        <param name="tryParents">
          <see langword="true" /> to use resource fallback to load an appropriate resource if the resource set cannot be found; <see langword="false" /> to bypass the resource fallback process.</param>
        <summary>Retrieves the resource set for a particular culture.</summary>
        <returns>The resource set for the specified culture.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El conjunto de recursos que se devuelve representa los recursos localizados para la referencia cultural especificada. Si los recursos no se han localizado para esa referencia cultural y `tryParents` es `true`, <xref:System.Resources.ResourceManager.GetResourceSet%2A> usa las reglas de reserva de recursos para cargar un recurso adecuado. Si `tryParents` es `false` y no se encuentra un conjunto de recursos específicos de referencias culturales, el método devuelve `null`. Para obtener más información acerca de retroceso de recursos, consulte la sección "El proceso de reserva de recursos" en el [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) artículo.  
  
   
  
## Examples  
 El ejemplo siguiente se llama el <xref:System.Resources.ResourceManager.GetResourceSet%2A> método para recuperar recursos específicos de la referencia cultural para la referencia cultural Francés (Francia). A continuación, enumera todos los recursos en el conjunto de recursos. Contiene el código fuente para un archivo ejecutable denominado ShowNumbers.exe. También incluye el siguiente archivo de texto de dos que contienen los nombres de los números. La primera, NumberResources.txt, contiene los nombres de los números entre uno y diez en inglés:  
  
```  
  
one=one  
two=two  
three=three  
four=four  
five=five  
six=six  
seven=seven  
eight=eight  
nine=nine  
ten=ten  
  
```  
  
 El segundo, NumberResources.fr-FR.txt, contiene los nombres de los números de uno a cuatro en el idioma francés:  
  
```  
  
one=un  
two=deux  
three=trois  
four=quatre  
  
```  
  
 Puede usar un archivo por lotes para generar los archivos de recursos, incrustar el archivo de recursos de idioma inglés en el archivo ejecutable y crear un ensamblado satélite para los recursos de idioma francés. Este es el archivo por lotes para generar un archivo ejecutable con el compilador Visual Baisc:  
  
```  
  
resgen NumberResources.txt  
vbc shownumbers.vb /resource:NumberResources.resources  
  
md fr-FR  
resgen NumberResources.fr-FR.txt  
al /out:fr-FR\ShowNumbers.resources.dll /culture:fr-FR /embed:NumberResources.fr-FR.resources  
```  
  
 Para el compilador de C#, puede usar el siguiente archivo por lotes:  
  
```  
  
resgen NumberResources.txt  
csc shownumbers.cs /resource:NumberResources.resources  
  
md fr-FR  
resgen NumberResources.fr-FR.txt  
al /out:fr-FR\ShowNumbers.resources.dll /culture:fr-FR /embed:NumberResources.fr-FR.resources  
  
```  
  
 [!code-csharp[System.Resources.ResourceManager.GetResourceSet#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.getresourceset/cs/shownumbers.cs#1)]
 [!code-vb[System.Resources.ResourceManager.GetResourceSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.getresourceset/vb/shownumbers.vb#1)]  
  
 Tenga en cuenta que si cambia el valor de la `createIfNotExists` argumento `false`, devuelve la llamada al método `null`, ya que el Administrador de recursos no se ha cargado los recursos de idioma francés.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="culture" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">
          <paramref name="tryParents" /> is <see langword="true" />, no usable set of resources has been found, and there are no default culture resources.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetSatelliteContractVersion">
      <MemberSignature Language="C#" Value="protected static Version GetSatelliteContractVersion (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Version GetSatelliteContractVersion(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetSatelliteContractVersion(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetSatelliteContractVersion (a As Assembly) As Version" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static Version ^ GetSatelliteContractVersion(System::Reflection::Assembly ^ a);" />
      <MemberSignature Language="F#" Value="static member GetSatelliteContractVersion : System.Reflection.Assembly -&gt; Version" Usage="System.Resources.ResourceManager.GetSatelliteContractVersion a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">The assembly to check for the <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> attribute.</param>
        <summary>Returns the version specified by the <see cref="T:System.Resources.SatelliteContractVersionAttribute" /> attribute in the given assembly.</summary>
        <returns>The satellite contract version of the given assembly, or <see langword="null" /> if no version was found.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información acerca de versiones de los ensamblados satélite, vea el <xref:System.Resources.SatelliteContractVersionAttribute> tema de referencia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="T:System.Version" /> found in the assembly <paramref name="a" /> is invalid.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="a" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <altmember cref="T:System.Resources.SatelliteContractVersionAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetStream">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns an unmanaged memory stream object from a specified resource.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.UnmanagedMemoryStream GetStream (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.UnmanagedMemoryStream GetStream(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (name As String) As UnmanagedMemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::UnmanagedMemoryStream ^ GetStream(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetStream : string -&gt; System.IO.UnmanagedMemoryStream" Usage="resourceManager.GetStream name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.UnmanagedMemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of a resource.</param>
        <summary>Returns an unmanaged memory stream object from the specified resource.</summary>
        <returns>An unmanaged memory stream object that represents a resource .</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetStream%2A> método toma el nombre de un recurso que se almacena como un <xref:System.IO.MemoryStream> de objetos, obtiene el valor de la <xref:System.Object> recursos y devuelve un <xref:System.IO.UnmanagedMemoryStream> objeto. Requiere que trabaje directamente con una secuencia de bytes, que, a continuación, convertir en un objeto. Este método es útil principalmente por motivos de rendimiento: recuperación de un recurso como una secuencia de bytes en lugar de un objeto explícito puede mejorar el rendimiento.  
  
 El recurso devuelto se adapta a la referencia cultural de interfaz de usuario del subproceso actual, que se define mediante el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad. Si no se encuentra el recurso para esa referencia cultural, el Administrador de recursos usa reglas de reserva para cargar un recurso adecuado. Si no se encuentra ningún conjunto de recursos localizados utilizable, el <xref:System.Resources.ResourceManager> recurre a los recursos de la referencia cultural de forma predeterminada. Si no se encuentra un conjunto de recursos para la referencia cultural predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si se espera que el conjunto de recursos que residan en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (predeterminado) o entre mayúsculas y minúsculas.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el método <xref:System.Resources.ResourceManager.GetStream%28System.String%29> para recuperar un mapa de bits que se emplea en la ventana de inicio de una aplicación. El siguiente código desde un archivo denominado fuente CreateResources.cs (para C#) o CreateResources.vb (para Visual Basic) genera un archivo .resx denominado AppResources.resx que contiene la imagen serializada. En este caso, la imagen se carga desde un archivo denominado SplashScreen.jpg; puede modificar el nombre del archivo para sustituir su propia imagen.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#4](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/createresources.cs#4)]
 [!code-vb[Conceptual.Resources.Retrieving#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/createresources.vb#4)]  
  
 El siguiente código de un archivo denominado GetStream.cs (para C#) o GetStream.vb (para Visual Basic), a continuación, recupera el recurso y muestra la imagen en un <xref:System.Windows.Forms.PictureBox?displayProperty=nameWithType> control.  
  
 [!code-csharp[Conceptual.Resources.Retrieving#5](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.retrieving/cs/getstream.cs#5)]
 [!code-vb[Conceptual.Resources.Retrieving#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.retrieving/vb/getstream.vb#5)]  
  
 Puede usar el siguiente archivo por lotes para compilar el ejemplo de C#. Visual Basic, cambie `csc` a `vbc`y cambie la extensión de archivo de código fuente de `.cs` a `.vb`...  
  
```  
  
csc CreateResources.cs  
CreateResources  
  
resgen AppResources.resx  
  
csc GetStream.cs /resource:AppResources.resources  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a <see cref="T:System.IO.MemoryStream" /> object.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources is found, and there are no default resources. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">The default culture's resources reside in a satellite assembly that could not be found. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetStream">
      <MemberSignature Language="C#" Value="public System.IO.UnmanagedMemoryStream GetStream (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.UnmanagedMemoryStream GetStream(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetStream(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStream (name As String, culture As CultureInfo) As UnmanagedMemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::UnmanagedMemoryStream ^ GetStream(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.GetStream : string * System.Globalization.CultureInfo -&gt; System.IO.UnmanagedMemoryStream" Usage="resourceManager.GetStream (name, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.UnmanagedMemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">The name of a resource.</param>
        <param name="culture">An  object that specifies the culture to use for the resource lookup. If <c>culture</c> is <see langword="null" />, the culture for the current thread is used.</param>
        <summary>Returns an unmanaged memory stream object from the specified resource, using the specified culture.</summary>
        <returns>An unmanaged memory stream object that represents a resource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.GetStream%2A> método toma el nombre de un recurso que se almacena como un <xref:System.IO.MemoryStream> de objetos, obtiene el valor de la <xref:System.Object> recursos y devuelve un <xref:System.IO.UnmanagedMemoryStream> objeto. Requiere que trabaje directamente con una secuencia de bytes, que, a continuación, convertir en un objeto. Este método es útil principalmente por motivos de rendimiento: recuperación de un recurso como una secuencia de bytes en lugar de un objeto explícito puede mejorar el rendimiento.  
  
 El recurso devuelto se adapta a la referencia cultural especificada por `culture`, o para la referencia cultural especificada por el <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad si `culture` es `null`. Si no se encuentra el recurso para esa referencia cultural, el Administrador de recursos usa reglas de reserva para cargar un recurso adecuado. Si no se encuentra ningún conjunto de recursos localizados utilizable, el <xref:System.Resources.ResourceManager> recurre a los recursos de la referencia cultural de forma predeterminada. Si no se encuentra un conjunto de recursos para la referencia cultural predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si se espera que el conjunto de recursos que residan en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (predeterminado) o entre mayúsculas y minúsculas.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a <see cref="T:System.IO.MemoryStream" /> object.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources is found, and there are no default resources. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">The default culture's resources reside in a satellite assembly that could not be found. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Returns the specified string resource for the specified culture or current UI culture.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetString : string -&gt; string&#xA;override this.GetString : string -&gt; string" Usage="resourceManager.GetString name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the resource to retrieve.</param>
        <summary>Returns the value of the specified string resource.</summary>
        <returns>The value of the resource localized for the caller's current UI culture, or <see langword="null" /> if <paramref name="name" /> cannot be found in a resource set.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 En las aplicaciones de escritorio, el recurso que se devuelve se adapta a la referencia cultural de interfaz de usuario del subproceso actual, tal como se define por la <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad. Si el recurso no se ha adaptado para esa referencia cultural, el Administrador de recursos sondea un recurso siguiendo los pasos descritos en la sección "Proceso de reserva de recursos" de la [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) artículo. Si no se encuentra ningún conjunto de recursos localizados utilizable, el Administrador de recursos vuelve en los recursos de la referencia cultural de forma predeterminada. Si el Administrador de recursos no puede cargar el conjunto de recursos de la referencia cultural de forma predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si se espera que el conjunto de recursos que residan en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (predeterminado) o entre mayúsculas y minúsculas.  
  
> [!CAUTION]
>  Este método puede producir más excepciones que aparecen. Una razón de que esto puede ocurrir es si un método que llama este método produce una excepción.  Por ejemplo, un <xref:System.IO.FileLoadException> que podría producirse la excepción si se produjo un error de implementación o la instalación de un ensamblado satélite, o un <xref:System.Runtime.Serialization.SerializationException> que podría producirse la excepción si un tipo definido por el usuario inicia una excepción definida por el usuario cuando se deserializa el tipo.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque el <xref:System.Resources.ResourceManager> clase es compatible en [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] las aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que se pueden usar con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos desde [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 En [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, el <xref:System.Resources.ResourceManager.GetString%28System.String%29> método devuelve el valor de la `name` cadena de recurso, adaptado a la configuración de referencia cultural de interfaz de usuario actual del llamador. La lista de referencias culturales se deriva de lista de idiomas de interfaz de usuario preferida del sistema operativo. Si no puede coincidir con el Administrador de recursos `name`, el método devuelve `null`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Resources.ResourceManager.GetString%2A> método para recuperar recursos específicos de la referencia cultural. Consta de los recursos compilados desde archivos .txt de inglés (en), francés (Francia) (fr-FR) y ruso (Rusia) (ru-RU), las referencias culturales. El ejemplo cambia la referencia cultural actual y la referencia cultural de interfaz de usuario actual para inglés (Estados Unidos), francés (Francia), ruso (Rusia) y sueco (Suecia). A continuación, llama el <xref:System.Resources.ResourceManager.GetString%2A> método para recuperar la cadena localizada, que muestra junto con el día actual y el mes. Observe que la salida muestra la cadena localizada adecuada, excepto cuando la referencia cultural de interfaz de usuario actual es Sueco (Suecia). Dado que no están disponibles los recursos de idioma sueco, la aplicación en su lugar, usa los recursos de la referencia cultural predeterminada, que es el inglés. El ejemplo requiere los archivos de recursos basado en texto aparece en la tabla siguiente. Cada uno tiene un recurso de cadena único llamado `DateStart`.  
  
|culture|Nombre del archivo|Nombre del recurso|Valor del recurso|  
|-------------|---------------|-------------------|--------------------|  
|en-US|DateStrings.txt|`DateStart`|Hoy es|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui, le c'est|  
|ru-RU|DateStrings.ru-RU. txt|`DateStart`|СЕГОДНЯ|  
  
 Puede usar el siguiente archivo por lotes para compilar el ejemplo de C#. Si usa Visual Basic, cambie `csc` por `vbc`y la extensión del archivo de código fuente de `.cs` a `.vb`.  
  
```  
resgen DateStrings.txt  
csc showdate.cs /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
```  
  
 Este es el código fuente para el ejemplo (ShowDate.vb para la versión de Visual Basic) o ShowDate.cs para la versión de C#.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate.cs#2)]
 [!code-vb[System.Resources.ResourceManager.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a string.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources has been found, and there are no resources for the default culture. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">The default culture's resources reside in a satellite assembly that could not be found. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>El <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> método es seguro para subprocesos.</threadsafe>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member GetString : string * System.Globalization.CultureInfo -&gt; string&#xA;override this.GetString : string * System.Globalization.CultureInfo -&gt; string" Usage="resourceManager.GetString (name, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">The name of the resource to retrieve.</param>
        <param name="culture">An object that represents the culture for which the resource is localized.</param>
        <summary>Returns the value of the string resource localized for the specified culture.</summary>
        <returns>The value of the resource localized for the specified culture, or <see langword="null" /> if <paramref name="name" /> cannot be found in a resource set.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="desktop-apps"></a>Aplicaciones de escritorio  
 En las aplicaciones de escritorio si `culture` es `null`, el <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> método usa la referencia cultural de interfaz de usuario actual obtenida del <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> propiedad.  
  
 El recurso que se devuelve se adapta a la referencia cultural especificada por el `culture` parámetro. Si el recurso no se ha adaptado para `culture`, sondea el Administrador de recursos para un recurso siguiendo los pasos descritos en la sección "Proceso de reserva de recursos" de la [empaquetar e implementar recursos](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) tema. Si no se encuentra ningún conjunto de recursos utilizable, el Administrador de recursos vuelve en los recursos de la referencia cultural de forma predeterminada. Si el Administrador de recursos no puede cargar el conjunto de recursos de la referencia cultural de forma predeterminada, el método produce una <xref:System.Resources.MissingManifestResourceException> excepción o, si se espera que el conjunto de recursos que residan en un ensamblado satélite, una <xref:System.Resources.MissingSatelliteAssemblyException> excepción. Si el Administrador de recursos puede cargar un recurso adecuado establecer pero no se puede encontrar un recurso denominado `name`, el método devuelve `null`.  
  
 El <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad determina si la comparación de `name` con los nombres de recursos, distingue mayúsculas de minúsculas (predeterminado) o entre mayúsculas y minúsculas.  
  
> [!CAUTION]
>  Este método puede producir más excepciones que aparecen. Una razón de que esto puede ocurrir es si un método que llama este método produce una excepción.  Por ejemplo, un <xref:System.IO.FileLoadException> que podría producirse la excepción si se produjo un error de implementación o la instalación de un ensamblado satélite, o un <xref:System.Runtime.Serialization.SerializationException> que podría producirse la excepción si un tipo definido por el usuario inicia una excepción definida por el usuario cuando se deserializa el tipo.  
  
## <a name="includewin8appnamelongincludeswin8-appname-long-mdmd-apps"></a>Aplicaciones de [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]  
  
> [!IMPORTANT]
>  Aunque el <xref:System.Resources.ResourceManager> clase es compatible en [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] las aplicaciones, no se recomienda su uso. Utilice esta clase solo cuando se desarrollan [!INCLUDE[net_portable](~/includes/net-portable-md.md)] proyectos que se pueden usar con [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones. Para recuperar recursos desde [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, use el [Windows.ApplicationModel.Resources.ResourceLoader](http://go.microsoft.com/fwlink/p/?LinkId=238182) clase en su lugar.  
  
 En [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicaciones, el <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> método devuelve el valor de la `name` cadena de recurso, adaptado a la referencia cultural especificada por el `culture` parámetro. Si no se encuentra el recurso para el `culture` referencia cultural, la búsqueda utiliza toda la [!INCLUDE[win8](~/includes/win8-md.md)] lista de reserva de idioma y se detiene después de buscar en la referencia cultural predeterminada. Si no puede coincidir con el Administrador de recursos `name`, el método devuelve `null`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29> método para recuperar recursos específicos de la referencia cultural. Referencia cultural predeterminada del ejemplo es inglés (en), e incluye los ensamblados satélite para el francés (Francia) (fr-FR) y ruso (Rusia) (ru-RU) las referencias culturales. El ejemplo cambia la referencia cultural actual y la referencia cultural de interfaz de usuario actual al ruso (Rusia) antes de llamar a <xref:System.Resources.ResourceManager.GetString%28System.String%2CSystem.Globalization.CultureInfo%29>. A continuación, llama el <xref:System.Resources.ResourceManager.GetString%2A> método y el <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> y pasa <xref:System.Globalization.CultureInfo> objetos que representan las referencias culturales de sueco (Suecia) y el francés (Francia) a cada método. En la salida, el mes y día del mes, así como la cadena que precede a ellos aparecen en francés, porque el <xref:System.Resources.ResourceManager.GetString%2A> método es capaz de recuperar el recurso de idioma francés. Sin embargo, cuando se usa la referencia cultural del sueco (Suecia), el mes y día del mes aparecen en sueco, aunque la cadena que precede a ellos es en inglés. Esto es porque el Administrador de recursos no puede encontrar los recursos de idioma sueco localizado, por lo que devuelve un recurso para la referencia cultural inglés de forma predeterminada en su lugar.  
  
 El ejemplo requiere los archivos de recursos basado en texto aparece en la tabla siguiente. Cada uno tiene un recurso de cadena único llamado `DateStart`.  
  
|culture|Nombre del archivo|Nombre del recurso|Valor del recurso|  
|-------------|---------------|-------------------|--------------------|  
|en-US|DateStrings.txt|`DateStart`|Hoy es|  
|fr-FR|DateStrings.fr-FR.txt|`DateStart`|Aujourd'hui, le c'est|  
|ru-RU|DateStrings.ru-RU. txt|`DateStart`|СЕГОДНЯ|  
  
 Puede usar el siguiente archivo por lotes para compilar el ejemplo de Visual Basic. Para compilar en C#, cambie `vbc` a `csc`y cambie la extensión de archivo de código fuente de `.vb` a `.cs`.  
  
```  
resgen DateStrings.txt  
vbc showdate.vb /resource:DateStrings.resources  
  
md fr-FR  
resgen DateStrings.fr-FR.txt  
al /out:fr-FR\Showdate.resources.dll /culture:fr-FR /embed:DateStrings.fr-FR.resources   
  
md ru-RU  
resgen DateStrings.ru-RU.txt  
al /out:ru-RU\Showdate.resources.dll /culture:ru-RU /embed:DateStrings.ru-RU.resources  
```  
  
 Este es el código fuente para el ejemplo (ShowDate.vb para la versión de Visual Basic) o ShowDate.cs para la versión de C#.  
  
 [!code-csharp[System.Resources.ResourceManager.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcemanager.class/cs/showdate2.cs#3)]
 [!code-vb[System.Resources.ResourceManager.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcemanager.class/vb/showdate2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The value of the specified resource is not a string.</exception>
        <exception cref="T:System.Resources.MissingManifestResourceException">No usable set of resources has been found, and there are no resources for a default culture. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">The default culture's resources reside in a satellite assembly that could not be found. For information about how to handle this exception, see the "Handling MissingManifestResourceException and MissingSatelliteAssemblyException Exceptions" section in the <see cref="T:System.Resources.ResourceManager" /> class topic.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <threadsafe>El <see cref="M:System.Resources.ResourceManager.GetString(System.String,System.Globalization.CultureInfo)" /> método es seguro para subprocesos.</threadsafe>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="HeaderVersionNumber">
      <MemberSignature Language="C#" Value="public static readonly int HeaderVersionNumber;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 HeaderVersionNumber" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.HeaderVersionNumber" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderVersionNumber As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int HeaderVersionNumber;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeaderVersionNumber : int" Usage="System.Resources.ResourceManager.HeaderVersionNumber" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the version of resource file headers that the current implementation of <see cref="T:System.Resources.ResourceManager" /> can interpret and produce.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreCase">
      <MemberSignature Language="C#" Value="public virtual bool IgnoreCase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.IgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property IgnoreCase As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IgnoreCase { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreCase : bool with get, set" Usage="System.Resources.ResourceManager.IgnoreCase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the resource manager allows case-insensitive resource lookups in the <see cref="M:System.Resources.ResourceManager.GetString(System.String)" /> and <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> methods.</summary>
        <value>
          <see langword="true" /> para omitir el modelo de mayúsculas y minúsculas durante la búsqueda de recursos; si no, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el valor de la <xref:System.Resources.ResourceManager.IgnoreCase%2A> propiedad es `false`, un recurso con el nombre "Resource" no es equivalente al recurso con el nombre "resource". Si <xref:System.Resources.ResourceManager.IgnoreCase%2A> es `true`, un recurso con el nombre "Recurso" es equivalente al recurso con el nombre "resource". Sin embargo, tenga en cuenta que, cuando <xref:System.Resources.ResourceManager.IgnoreCase%2A> es `true`, <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> y <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> métodos realizan las comparaciones de cadenas entre mayúsculas y minúsculas usando la referencia cultural invariable. La ventaja es que los resultados de las comparaciones de cadenas entre mayúsculas y minúsculas realizadas por estos métodos son los mismos en todos los equipos, independientemente de la referencia cultural. La desventaja es que los resultados no son coherentes con las reglas de mayúsculas y minúsculas de todas las referencias culturales.  
  
 Por ejemplo, el alfabeto turco tiene dos versiones del carácter I: uno con un punto y otra sin un punto. En turco, el carácter I (Unicode 0049) se considera la versión en mayúsculas de un carácter diferente (Unicode 0131). El carácter i (Unicode 0069) se considera la versión en minúsculas de otro carácter (Unicode 0130). Según estas reglas de mayúsculas y minúsculas, una comparación de cadenas entre mayúsculas y minúsculas de los caracteres i (Unicode 0069) e I (Unicode 0049) genera un error para la referencia cultural "tr-TR" (turco de Turquía). Sin embargo, dado que se lleva a cabo la comparación con las reglas de mayúsculas y minúsculas de la referencia cultural invariable, si <xref:System.Resources.ResourceManager.IgnoreCase%2A> es `true`, esta comparación se realiza correctamente.  
  
> [!NOTE]
>  Por motivos de rendimiento, es mejor especificar siempre el caso correcto para los nombres de recursos. Establecer <xref:System.Resources.ResourceManager.IgnoreCase%2A> a `true` puede provocar un aumento significativo en el espacio de trabajo y una disminución significativa del rendimiento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalGetResourceSet">
      <MemberSignature Language="C#" Value="protected virtual System.Resources.ResourceSet InternalGetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Resources.ResourceSet InternalGetResourceSet(class System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.InternalGetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function InternalGetResourceSet (culture As CultureInfo, createIfNotExists As Boolean, tryParents As Boolean) As ResourceSet" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Resources::ResourceSet ^ InternalGetResourceSet(System::Globalization::CultureInfo ^ culture, bool createIfNotExists, bool tryParents);" />
      <MemberSignature Language="F#" Value="abstract member InternalGetResourceSet : System.Globalization.CultureInfo * bool * bool -&gt; System.Resources.ResourceSet&#xA;override this.InternalGetResourceSet : System.Globalization.CultureInfo * bool * bool -&gt; System.Resources.ResourceSet" Usage="resourceManager.InternalGetResourceSet (culture, createIfNotExists, tryParents)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Resources.ResourceSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="createIfNotExists" Type="System.Boolean" />
        <Parameter Name="tryParents" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture">The culture object to look for.</param>
        <param name="createIfNotExists">
          <see langword="true" /> to load the resource set, if it has not been loaded yet; otherwise, <see langword="false" />.</param>
        <param name="tryParents">
          <see langword="true" /> to check parent <see cref="T:System.Globalization.CultureInfo" /> objects if the resource set cannot be loaded; otherwise, <see langword="false" />.</param>
        <summary>Provides the implementation for finding a resource set.</summary>
        <returns>The specified resource set.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Resources.MissingManifestResourceException">The main assembly does not contain a .resources file, which is required to look up a resource.</exception>
        <exception cref="T:System.ExecutionEngineException">There was an internal error in the runtime.</exception>
        <exception cref="T:System.Resources.MissingSatelliteAssemblyException">The satellite assembly associated with <paramref name="culture" /> could not be located.</exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
        <block subset="none" type="overrides">
          <para>Este método completa todo el trabajo necesario para encontrar un recurso de conjunto y puede ser recursivo y reentrante. En otras palabras, este método puede cargar un ensamblado y un desencadenador un <see cref="E:System.AppDomain.AssemblyLoad" /> evento, que, a continuación, vuelve a llamar en un <see cref="T:System.Resources.ResourceManager" /> objeto que no se ha inicializado completamente. Para evitar realizar bloqueos adicionales, este método no es seguro para subprocesos. El <see cref="M:System.Resources.ResourceManager.GetResourceSet(System.Globalization.CultureInfo,System.Boolean,System.Boolean)" />, <see cref="M:System.Resources.ResourceManager.GetString(System.String)" />, y <see cref="M:System.Resources.ResourceManager.GetObject(System.String)" /> métodos hacen toda la sincronización necesaria.</para>
        </block>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="MagicNumber">
      <MemberSignature Language="C#" Value="public static readonly int MagicNumber;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 MagicNumber" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.MagicNumber" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MagicNumber As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly int MagicNumber;" />
      <MemberSignature Language="F#" Value=" staticval mutable MagicNumber : int" Usage="System.Resources.ResourceManager.MagicNumber" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Holds the number used to identify resource files.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor se establece en 0xBEEFCACE. Los cuatro primeros bytes del formato de archivo predeterminado del sistema contienen un entero con signo de 32 bits en formato little-endian (consulte <xref:System.Text.Encoding>).  
  
 Si el <xref:System.Resources.ResourceManager.MagicNumber> se encuentra, los bytes que hay a continuación será un número de versión para un <xref:System.Resources.ResourceManager> encabezado, seguido por un número que indica cuántos bytes se deben omitir para pasar este encabezado. El siguiente número indica la versión de la <xref:System.Resources.ResourceManager> que creó el encabezado, seguido de información de versión específica.  
  
 El número de versión para la implementación actual es uno. Los siguientes bytes tienen una cadena de longitud fija que contiene el nombre de un <xref:System.Resources.IResourceReader>, que puede leer este archivo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MainAssembly">
      <MemberSignature Language="C#" Value="protected System.Reflection.Assembly MainAssembly;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Reflection.Assembly MainAssembly" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.MainAssembly" />
      <MemberSignature Language="VB.NET" Value="Protected MainAssembly As Assembly " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Reflection::Assembly ^ MainAssembly;" />
      <MemberSignature Language="F#" Value="val mutable MainAssembly : System.Reflection.Assembly" Usage="System.Resources.ResourceManager.MainAssembly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the main assembly that contains the resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Resources.ResourceManager.MainAssembly> campo solo es útil si escribir su propia clase que deriva la <xref:System.Resources.ResourceManager> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseAllResources">
      <MemberSignature Language="C#" Value="public virtual void ReleaseAllResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseAllResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceManager.ReleaseAllResources" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseAllResources ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseAllResources();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseAllResources : unit -&gt; unit&#xA;override this.ReleaseAllResources : unit -&gt; unit" Usage="resourceManager.ReleaseAllResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells the resource manager to call the <see cref="M:System.Resources.ResourceSet.Close" /> method on all <see cref="T:System.Resources.ResourceSet" /> objects and release all resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método reducirá el espacio de trabajo en una aplicación en ejecución. Todas las búsquedas de recursos futuro en este <xref:System.Resources.ResourceManager> objeto será más costoso que la primera búsqueda, ya que tendrá el Administrador de recursos buscar y cargar recursos de nuevo. Esto puede ser útil en algunos escenarios complejos de subprocesamiento, donde crear un nuevo <xref:System.Resources.ResourceManager> objeto es el comportamiento adecuado.  
  
> [!NOTE]
>  A partir de .NET Framework versión 2.0, el <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> método no es seguro para subprocesos con respecto a <xref:System.Resources.ResourceManager.GetObject%2A>, <xref:System.Resources.ResourceManager.GetString%2A>, y <xref:System.Resources.ResourceManager.GetStream%2A> operaciones. La ventaja de este cambio es una mejora del rendimiento de varios subprocesos que acceden a recursos. Sin embargo, si se llama a la <xref:System.Resources.ResourceManager.ReleaseAllResources%2A> método en un subproceso al tiempo que un recurso en otro subproceso, la operación get puede producir un <xref:System.ObjectDisposedException> excepción.  
  
 También puede usar este método en situaciones donde las instancias administradas para los recursos creados por el Administrador de recursos actual tienen que liberarse de manera determinista, sin esperar a que el Administrador de recursos estar completamente fuera del ámbito y haya sido recolectado.  
  
> [!NOTE]
>  Llamar a este método no descarga los ensamblados satélite. Para descargar ensamblados satélite, utilice el <xref:System.AppDomain.Unload%2A> método.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">Cuando se invoca en tiempo de ejecución a través de mecanismos como <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />. Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ResourceSets">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ResourceSets;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Collections.Hashtable ResourceSets" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceManager.ResourceSets" />
      <MemberSignature Language="VB.NET" Value="Protected ResourceSets As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Collections::Hashtable ^ ResourceSets;" />
      <MemberSignature Language="F#" Value="val mutable ResourceSets : System.Collections.Hashtable" Usage="System.Resources.ResourceManager.ResourceSets" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("call InternalGetResourceSet instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contains a <see cref="T:System.Collections.Hashtable" /> that returns a mapping from cultures to <see cref="T:System.Resources.ResourceSet" /> objects.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSetType">
      <MemberSignature Language="C#" Value="public virtual Type ResourceSetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ResourceSetType" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceManager.ResourceSetType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ResourceSetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ResourceSetType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ResourceSetType : Type" Usage="System.Resources.ResourceManager.ResourceSetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of the resource set object that the resource manager uses to construct a <see cref="T:System.Resources.ResourceSet" /> object.</summary>
        <value>El tipo del objeto de conjunto de recursos que el administrador de recursos usa para construir un objeto <see cref="T:System.Resources.ResourceSet" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>