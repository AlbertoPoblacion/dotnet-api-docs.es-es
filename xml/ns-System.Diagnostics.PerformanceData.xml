<Namespace Name="System.Diagnostics.PerformanceData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43a4cee968c302db34b15db72a2e91890ce7c882" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51915935" /></Metadata><Docs>
    <summary>Utilice las clases de este espacio de nombres para proporcionar los datos del contador. Los contadores se utilizan para exponer las métricas de rendimiento a los consumidores, como el Monitor de rendimiento. El espacio de nombres no contiene clases para consumir los datos del contador. Para obtener una descripción completa de la arquitectura de los contadores de rendimiento, vea <see href="https://msdn.microsoft.com/library/windows/desktop/aa373083\(v=vs.85\">Performance Counters</see> (Contadores de rendimiento).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las clases de este espacio de nombres admiten la nueva arquitectura (versión 2.0) para los contadores de rendimiento que se introdujo en Windows Vista. En la nueva arquitectura, el proveedor ya no responde a las solicitudes de consumidor directamente, pero en su lugar, simplemente mantiene los datos del contador. El sistema inserta un subproceso en el proceso del proveedor cuando el proveedor crea una instancia de conjunto de contadores; el subproceso es responsable de controlar las solicitudes de consumidor.  
  
 Los pasos siguientes muestran el proceso para escribir un proveedor de contadores.  
  
1.  Los contadores que proporciona el proveedor se define en un manifiesto basado en XML. Los contadores se agrupan lógicamente en conjuntos de contadores. Los contadores dentro de un conjunto de contadores se identifican mediante un identificador numérico que es único en el conjunto de contadores. Un proveedor puede definir uno o varios conjuntos de contadores. Un conjunto de contadores se identifica mediante un Guid que es único para un proveedor. Tenga en cuenta que si usa estas clases para escribir un proveedor:  
  
    -   Se omite el atributo de devolución de llamada del elemento del proveedor.  
  
    -   Se omite el valor de referencia para el atributo name del elemento counterAttribute.  
  
     Para obtener más información sobre cómo escribir el manifiesto, consulte [esquema de los contadores de rendimiento](https://msdn.microsoft.com/library/windows/desktop/aa373092\(v=vs.85\).aspx).  
  
2.  Después de escribir su manifiesto, use el [CTRPP](https://msdn.microsoft.com/library/windows/desktop/aa372128\(v=vs.85\).aspx) herramienta para compilar el manifiesto (ctrpp provider.man). La herramienta genera cuatro archivos:. h, .c, .rc y * _r.h. Puede omitir los archivos .h y .c. El archivo .rc contiene las cadenas localizadas definidas en el manifiesto. Utilice los archivos .rc y * _r.h para crear el archivo de recursos compilado (. res) que incluye en el proyecto. La llamada siguiente muestra cómo se compila el archivo de recursos:  
  
    ```console  
    rc /r /i "c:\Program Files\Microsoft SDKs\Windows\v6.0\Include" provider.rc  
    ```  
  
     Si se produce un error que hace referencia a sal.h, copie el archivo sal.h de Microsoft Visual Studio, Visual C se incluyen al directorio que especifique para el modificador/i.  
  
     Agregar una ruta de acceso al archivo de recursos compilado (. res) a la página de propiedades de aplicación del proyecto.  
  
3.  Escribir un proveedor. Los pasos siguientes muestran las llamadas realizadas por un proveedor:  
  
    1.  Llame a la <xref:System.Diagnostics.PerformanceData.CounterSet.%23ctor%2A?displayProperty=nameWithType> constructor para definir el conjunto de contadores. Llame a este método para cada conjunto de contadores definido en el manifiesto.  
  
    2.  Para cada conjunto de contadores, llame a uno de los <xref:System.Diagnostics.PerformanceData.CounterSet.AddCounter%2A?displayProperty=nameWithType> métodos para agregar los contadores al conjunto. Llame a este método para cada contador definido en el conjunto de contadores.  
  
    3.  Llame a la <xref:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance%2A?displayProperty=nameWithType> método para crear una instancia de conjunto de contadores (una instancia contiene los datos del contador). Para conjuntos de contadores de instancia única, llame a este método una vez. Para varios conjuntos de contadores de instancia, llame a este método para cada instancia para el que se necesita proporcionar datos del contador (usar un nombre único para cada instancia).  
  
    4.  Use el <xref:System.Diagnostics.PerformanceData.CounterSetInstance.Counters%2A?displayProperty=nameWithType> propiedad para tener acceso a y establecer los datos del contador del contador.  
  
4.  Cuando termine de su proveedor, use la herramienta LodCtr para registrar los contadores en el equipo. Por ejemplo,  
  
    ```console  
    lodctr /m:provider.man  
    ```  
  
     El ejemplo supone que el manifiesto y archivo ejecutable que se encuentran en el directorio actual. Para obtener información detallada sobre el uso de LodCtr, consulte [Microsoft Technet](https://Go.Microsoft.Com/FWLink/?LinkId=84000).  
  
 Puede usar las clases en este espacio de nombres en equipos que ejecutan el Windows Vista y sistemas operativos posteriores.  
  
   
  
## Examples  
 A continuación muestra un manifiesto sencillo:  
  
```xml  
<!-- <?xml version="1.0" encoding="UTF-16"?> -->  
<instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd"   
     xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events"   
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
     xmlns:xs="http://www.w3.org/2001/XMLSchema"   
     xmlns:trace=http://schemas.microsoft.com/win/2004/08/events/trace>  
  
    <instrumentation>  
  
        <counters xmlns=http://schemas.microsoft.com/win/2005/12/counters>  
  
            <provider  
              applicationIdentity = "provider1.exe"  
              providerType = "userMode"  
              providerGuid = "{51D1685C-35ED-45be-99FE-17261A4F27F3}">  
  
               <counterSet guid = "{582803C9-AACD-45e5-8C30-571141A22092}"  
                  uri = "Microsoft.Windows.System.PerfCounters.Typing"  
                  name = "$(string.CounterSet1.Name)"   
                  description = "$(string.CounterSet1.Description)"   
                  instances = "single">  
  
                    <counter id = "1"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.TotalWords"  
                      name = "$(string.CS1.Counter1.Name)"  
                      description = "$(string.CS1.Counter1.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "2"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsInInterval"  
                      name = "$(string.CS1.Counter2.Name)"  
                      description = "$(string.CS1.Counter2.Description)"  
                      type = "perf_counter_delta"  
                      detailLevel = "standard"/>  
  
                    <counter id = "3"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.LetterAPressed"  
                      name = "$(string.CS1.Counter3.Name)"  
                      description = "$(string.CS1.Counter3.Description)"  
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "4"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.WordsContainingLetterA"  
                      name = "$(string.CS1.Counter4.Name)"   
                      description = "$(string.CS1.Counter4.Description)"   
                      type = "perf_counter_rawcount"  
                      detailLevel = "standard"/>  
  
                    <counter id = "5"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentOfWordsContainingLetterA"  
                      name = "$(string.CS1.Counter5.Name)"   
                      description = "$(string.CS1.Counter5.Description)"   
                      type = "perf_sample_fraction"  
                      baseID = "6"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "displayAsReal" />  
                      </counterAttributes>  
                    </counter>  
  
                    <counter id = "6"  
                      uri = "Microsoft.Windows.System.PerfCounters.Typing.PercentBase"  
                      type = "perf_sample_base"  
                      detailLevel = "standard">  
                      <counterAttributes>  
                          <counterAttribute name = "noDisplay" />  
                      </counterAttributes>  
                    </counter>  
  
                </counterSet>  
            </provider>  
        </counters>  
    </instrumentation>  
  
    <localization>  
        <resources culture="en-US">  
            <stringTable>  
  
                <string id="CounterSet1.Name" value="Typing"/>  
                <string id="CounterSet1.Description" value="Captures simple typing metrics."/>  
                <string id="CS1.Counter1.Name" value="Total Words Typed"/>   
                <string id="CS1.Counter1.Description" value="The total number of words typed."/>  
                <string id="CS1.Counter2.Name" value="Words Typed In Interval"/>   
                <string id="CS1.Counter2.Description" value="The total number of words typed in the interval."/>  
                <string id="CS1.Counter3.Name" value="Letter A Pressed"/>   
                <string id="CS1.Counter3.Description" value="The number of times that the letter A is pressed."/>  
                <string id="CS1.Counter4.Name" value="Words Containing A"/>   
                <string id="CS1.Counter4.Description" value="The number of words that contain the letter A."/>  
                <string id="CS1.Counter5.Name" value="Percent of Words Containing A"/>   
                <string id="CS1.Counter5.Description" value="The percent of words that contain the letter A in the last interval."/>  
  
            </stringTable>  
        </resources>  
    </localization>  
</instrumentationManifest>  
```  
  
 La continuación muestra una implementación sencilla del proveedor para el manifiesto:  
  
```cs  
using System.Diagnostics.PerformanceData;  
  
        private static Guid providerId = new Guid("{51D1685C-35ED-45be-99FE-17261A4F27F3}");  
        private static Guid typingCounterSetId = new Guid("{582803C9-AACD-45e5-8C30-571141A22092}");  
  
        private static CounterSet typingCounterSet;         // Defines the counter set  
        private static CounterSetInstance typingCsInstance; // Instance of the counter set  
  
        private static int numberOfLetterAInWord = 0;  
  
        . . .  
  
            // Create the 'Typing' counter set.  
            typingCounterSet = new CounterSet(providerId, typingCounterSetId, CounterSetInstanceType.Single);  
  
            // Add the counters to the counter set definition.  
            typingCounterSet.AddCounter(1, CounterType.RawData32, "Total Word Count");  
            typingCounterSet.AddCounter(2, CounterType.Delta32, "Words Typed In Interval");  
            typingCounterSet.AddCounter(3, CounterType.RawData32, "A Key Pressed");  
            typingCounterSet.AddCounter(4, CounterType.RawData32, "Words Containing A");  
            typingCounterSet.AddCounter(5, CounterType.SampleFraction, "Percent of Words Containg A");  
            typingCounterSet.AddCounter(6, CounterType.SampleBase, "Percent Base");  
  
            // Create an instance of the counter set (contains the counter data).  
            typingCsInstance = typingCounterSet.CreateCounterSetInstance("Typing Instance");  
            typingCsInstance.Counters[1].Value = 0;  
            typingCsInstance.Counters[2].Value = 0;  
            typingCsInstance.Counters[3].Value = 0;  
            typingCsInstance.Counters[4].Value = 0;  
            typingCsInstance.Counters[5].Value = 0;  
            typingCsInstance.Counters[6].Value = 0;  
  
        . . .  
  
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)  
        {  
            typingCounterSet.Dispose();  
        }  
  
        // Simple effort to capture letter A key press and words typed.  
        private void textInput_KeyDown(object sender, KeyEventArgs e)  
        {  
            Keys keyData = e.KeyData;  
  
            switch (e.KeyData)  
            {  
                case Keys.A :  
                    // In the .NET 3.5 Framework, you had to use the  
                    // Value property to set and increment the counter   
                    // value. Beginning with the .NET 4.0 Framework,   
                    // the Value property is safe to use in a multi-  
                    // threaded application.  
                    typingCsInstance.Counters["A Key Pressed"].Value++;  
                    numberOfLetterAInWord++;  
  
                    break;  
  
                case Keys.Enter:  
                case Keys.Space:  
                case Keys.Tab:  
  
                    if (numberOfLetterAInWord > 0)  
                    {  
                        // Beginning with the .NET 4.0 Framework, you   
                        // can use the Increment method to increment   
                        // the counter value by 1. The Increment method   
                        // is safe to use in a multi-threaded   
                        // application.  
                        typingCsInstance.Counters["Words Containing A"].Increment();  
                        typingCsInstance.Counters["Percent of Words Containg A"].Increment();  
                        numberOfLetterAInWord = 0;  
                    }  
  
                    typingCsInstance.Counters["Percent Base"].Increment();  
                    typingCsInstance.Counters["Total Word Count"].Increment();  
                    typingCsInstance.Counters["Words Typed In Interval"].Increment();  
  
                    break;  
            }  
        }  
```  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>