<Type Name="SrgsToken" FullName="System.Speech.Recognition.SrgsGrammar.SrgsToken">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="60d36595c7920c386e5d877b465a0712d46f94a2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36608865" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SrgsToken : System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SrgsToken extends System.Speech.Recognition.SrgsGrammar.SrgsElement" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" />
  <TypeSignature Language="VB.NET" Value="Public Class SrgsToken&#xA;Inherits SrgsElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SrgsToken : System::Speech::Recognition::SrgsGrammar::SrgsElement" />
  <TypeSignature Language="F#" Value="type SrgsToken = class&#xA;    inherit SrgsElement" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.SrgsGrammar.SrgsElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a word or short phrase that can be recognized.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usando los miembros de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> (clase), puede especificar tres formas de una palabra: el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> formulario, el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> formulario y un personalizado <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> para la palabra.  
  
 Si varias palabras se almacenan en una sola <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> de objetos, cada uno se trata como un token distinto internamente y en el resultado.  
  
 Esta clase representa el `token` elemento definido por el World Wide Web Consortium (W3C) [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0.](http://go.microsoft.com/fwlink/?LinkId=201761). Para obtener información sobre la SRGS `token` elemento y detalles sobre su compatibilidad con System.Speech, consulte [token elemento](http://msdn.microsoft.com/library/3a9e8d64-7bd4-4188-a6f4-dbf28ea71632).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SrgsToken (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SrgsGrammar.SrgsToken.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SrgsToken(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SrgsGrammar.SrgsToken : string -&gt; System.Speech.Recognition.SrgsGrammar.SrgsToken" Usage="new System.Speech.Recognition.SrgsGrammar.SrgsToken text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text of the new <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> class instance.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> class and specifies the text to be recognized.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Crea un <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> cuyos <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> propiedad se establece inicialmente en el valor de la `text` parámetro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="text" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public string Display { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Display" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberSignature Language="VB.NET" Value="Public Property Display As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Display { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Display : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the display form of the text to be spoken.</summary>
        <value>Una representación del token tal y como se debe mostrar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque normalmente representan el mismo valor, el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> formulario puede ser diferente que el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> forman una palabra o frase en un <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Por ejemplo, el formato de presentación puede ser un acrónimo, por ejemplo, "EE", mientras que el texto que se proporcionarán y a la que el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> se aplica, es "Estados Unidos".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" /> to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">An attempt is made to assign an empty string to <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string that defines the pronunciation for the token.</summary>
        <value>Devuelve una cadena que contiene los teléfonos del alfabeto fonético especificado en <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Teléfonos son letras o símbolos que describen los sonidos de voz. System.Speech admite tres alfabetos fonético para especificar las pronunciaciones personalizadas: el conjunto teléfono Universal (UPS), el conjunto de teléfono de Speech API (SAPI) y el alfabeto fonético internacional (IPA). Los teléfonos especificados en <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> debe coincidir con el alfabeto fonético especificado en <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument.PhoneticAlphabet%2A>. Vea [léxicos y alfabetos fonético](http://msdn.microsoft.com/library/435e3c6f-6834-4e5a-b0f6-c17b2275dc51) para obtener más información.  
  
 Los teléfonos especificados en <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> indicar cómo el contenido de <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> debe pronunciado para el reconocimiento correcto.  El motor de reconocimiento de voz utiliza la pronunciación especificada en <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> para que coincida con la entrada de voz y devuelve la cadena que se encuentra por <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> en el resultado del reconocimiento.  
  
 Si los teléfonos no están delimitados por espacios o la cadena especificada contiene un teléfono no reconocido, el motor de reconocimiento no reconoce la pronunciación especificada como una pronunciación válida de la palabra contenida <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.  
  
 Pronunciaciones especificadas en <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> tienen prioridad sobre las pronunciaciones especificadas en léxicos asociados a una gramática o un motor de reconocimiento. Además, la pronunciación en el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> propiedad solo se aplica a la aparición única de la palabra o frase contenida por <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A>.  
  
   
  
## Examples  
 La gramática en el ejemplo siguiente contiene palabras jerga y tiene también una palabra poco común: "whatchamacallit". Agregar un personalizado, pronunciación alineado con la <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> propiedad de la <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken> clase puede mejorar la precisión del reconocimiento de la palabra "whatchamacallit", así como para la frase completa que lo contiene. El ejemplo usa teléfonos desde el Microsoft Universal teléfono establecido (SAI o UPS) para definir las pronunciaciones personalizadas.  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an instance of the in-process recognizer.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Build the SrgsOneOf objects with alternative choices for the slang phrase.  
        SrgsOneOf gimme = new SrgsOneOf(  
          new string[] { "give me", "gimme", "hand me", "ha'me" });  
        SrgsOneOf the = new SrgsOneOf(new string[] { "the", "duh" });  
  
        // Build the one-of element that contains the pronunciation.  
        SrgsItem thing = new SrgsItem("thingamajig");  
        SrgsItem whatcha = new SrgsItem();  
        SrgsToken callit = new SrgsToken("whatchamacallit");  
        callit.Pronunciation = "W AE T CH AE M AE K AA L IH T";  
        whatcha.Add(callit);  
        SrgsOneOf what = new SrgsOneOf(new SrgsItem[] {thing, whatcha});  
  
        // Create the rule from the SrgsOneOf objects.  
        SrgsRule slangRule = new SrgsRule("slang", gimme, the, what);  
  
        // Build an SrgsDocument object from the rule and set the phonetic alphabet.  
        SrgsDocument tokenPron = new SrgsDocument(slangRule);  
        tokenPron.PhoneticAlphabet = SrgsPhoneticAlphabet.Ups;  
  
        // Create a Grammar object from the SrgsDocument and load it to the recognizer.  
        Grammar g_Slang = new Grammar(tokenPron);  
        g_Slang.Name = ("Slang Pronunciation");  
        recognizer.LoadGrammarAsync(g_Slang);  
  
        // Configure recognizer input.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized phrase: " + e.Result.Text);  
      Console.WriteLine("Confidence: " + e.Result.Confidence);  
      Console.WriteLine("  Word summary: ");  
      foreach (RecognizedWordUnit word in e.Result.Words)  
      {  
        Console.WriteLine(  
          "    Lexical form ({1})" +  
          " Pronunciation ({0})" +  
          " Confidence ({2})",  
          word.Pronunciation, word.LexicalForm, word.Confidence);  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" /> to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">An attempt is made to assign an empty string to <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the written form of the word that should be spoken.</summary>
        <value>El texto contenido en el <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsToken" /> instancia de la clase.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque normalmente representan el mismo valor, el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> formulario puede ser diferente que el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> forman una palabra o frase en un <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken>. Por ejemplo, el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Display%2A> formulario puede ser un acrónimo, por ejemplo, "EE", mientras que el texto que se proporcionarán y a la que el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Pronunciation%2A> se aplica, es "Estados Unidos".  
  
 El valor predeterminado para el <xref:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text%2A> propiedad es una cadena vacía: "".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">An attempt is made to set <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" /> to <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">An attempt is made to assign an empty string to <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />.</exception>
        <exception cref="T:System.ArgumentException">An attempt is made to assign a string that contains a quotation mark (") to <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsToken.Text" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>