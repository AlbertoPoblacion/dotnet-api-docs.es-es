<Type Name="InputManager" FullName="System.Windows.Input.InputManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aa56d52654eab665d221b299fa3e48e18508421f" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55422840" /></Metadata><TypeSignature Language="C#" Value="public sealed class InputManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InputManager extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InputManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputManager sealed : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type InputManager = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Administra todos los sistemas de entrada de Windows Presentation Foundation (WPF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Input.InputManager> es responsable de coordinar todos los sistemas de entrada en la clase [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].  
  
 Un filtro es cualquier código que realiza escuchas para <xref:System.Windows.Input.InputManager.PreProcessInput> o <xref:System.Windows.Input.InputManager.PostProcessInput>.  Los filtros pueden modificar el área de almacenamiento.  
  
 Un monitor es cualquier código que realiza escuchas para <xref:System.Windows.Input.InputManager.PreNotifyInput> o <xref:System.Windows.Input.InputManager.PostNotifyInput>.  Monitores no pueden modificar el área de almacenamiento.  
  
 El <xref:System.Windows.Input.InputManager> controla el área de almacenamiento.  Procesa los datos en el área de ensayo entrado [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] eventos.  
  
 Se procesa la entrada en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en las siguientes fases:  
  
1.  Fase de procesamiento previo.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreProcessInput> eventos.  
  
2.  Fase de notificación previa.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreNotifyInput> eventos.  
  
3.  El [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] se generan eventos de entrada o eventos.  
  
4.  Posterior a la fase de notificación.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostNotifyInput> eventos.  
  
5.  Fase de procesamiento posterior.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostProcessInput> eventos.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.StagingAreaInputItem" />
    <altmember cref="T:System.Windows.Input.ProcessInputEventArgs" />
    <altmember cref="T:System.Windows.Input.PreProcessInputEventArgs" />
    <altmember cref="T:System.Windows.Input.NotifyInputEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.InputManager Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.InputManager Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As InputManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::InputManager ^ Current { System::Windows::Input::InputManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Windows.Input.InputManager" Usage="System.Windows.Input.InputManager.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la instancia de <see cref="T:System.Windows.Input.InputManager" /> asociada con el subproceso actual.</summary>
        <value>El administrador de entrada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase no estará disponible en la zona de Internet.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Para obtener el Administrador de entrada actual. Enumeraciones asociadas: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="EnterMenuMode">
      <MemberSignature Language="C#" Value="public event EventHandler EnterMenuMode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnterMenuMode" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.EnterMenuMode" />
      <MemberSignature Language="VB.NET" Value="Public Event EnterMenuMode As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ EnterMenuMode;" />
      <MemberSignature Language="F#" Value="member this.EnterMenuMode : EventHandler " Usage="member this.EnterMenuMode : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un control se sitúa en modo de menú tras llamar al método <see cref="M:System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los componentes registran los delegados con este evento para responder a un control de entrada al modo de menú del Administrador de entrada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTestInvalidatedAsync">
      <MemberSignature Language="C#" Value="public event EventHandler HitTestInvalidatedAsync;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HitTestInvalidatedAsync" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.HitTestInvalidatedAsync" />
      <MemberSignature Language="VB.NET" Value="Public Event HitTestInvalidatedAsync As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HitTestInvalidatedAsync;" />
      <MemberSignature Language="F#" Value="member this.HitTestInvalidatedAsync : EventHandler " Usage="member this.HitTestInvalidatedAsync : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el resultado de la prueba de posicionamiento puede haber cambiado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputProviders">
      <MemberSignature Language="C#" Value="public System.Collections.ICollection InputProviders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection InputProviders" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.InputProviders" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputProviders As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ICollection ^ InputProviders { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputProviders : System.Collections.ICollection" Usage="System.Windows.Input.InputManager.InputProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de <see cref="P:System.Windows.Input.InputManager.InputProviders" /> registrada con <see cref="T:System.Windows.Input.InputManager" />.</summary>
        <value>La colección de proveedores de entrada.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Para obtener la colección de proveedores de entrada. Enumeraciones asociadas: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsInMenuMode">
      <MemberSignature Language="C#" Value="public bool IsInMenuMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInMenuMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.IsInMenuMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInMenuMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInMenuMode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInMenuMode : bool" Usage="System.Windows.Input.InputManager.IsInMenuMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si esta instancia de <see cref="T:System.Windows.Interop.ComponentDispatcher" /> se encuentra en modo de menú.</summary>
        <value>Es <see langword="true" /> si esta instancia de <see cref="T:System.Windows.Interop.ComponentDispatcher" /> se encuentra en modo de menú; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Input.InputManager.IsInMenuMode%2A> propiedad devuelve `true` si los menús están abiertos y se devuelve `false` si no los menús están abiertos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaveMenuMode">
      <MemberSignature Language="C#" Value="public event EventHandler LeaveMenuMode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LeaveMenuMode" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.LeaveMenuMode" />
      <MemberSignature Language="VB.NET" Value="Public Event LeaveMenuMode As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LeaveMenuMode;" />
      <MemberSignature Language="F#" Value="member this.LeaveMenuMode : EventHandler " Usage="member this.LeaveMenuMode : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un control abandona el modo de menú tras llamar al método <see cref="M:System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los componentes registran los delegados con este evento para responder a un control de salir del modo de menú del Administrador de entrada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MostRecentInputDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputDevice MostRecentInputDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputDevice MostRecentInputDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.MostRecentInputDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MostRecentInputDevice As InputDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputDevice ^ MostRecentInputDevice { System::Windows::Input::InputDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MostRecentInputDevice : System.Windows.Input.InputDevice" Usage="System.Windows.Input.InputManager.MostRecentInputDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que representa el dispositivo de entrada asociado al evento de entrada más reciente.</summary>
        <value>El dispositivo de entrada.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopMenuMode">
      <MemberSignature Language="C#" Value="public void PopMenuMode (System.Windows.PresentationSource menuSite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PopMenuMode(class System.Windows.PresentationSource menuSite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputManager.PopMenuMode(System.Windows.PresentationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PopMenuMode (menuSite As PresentationSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PopMenuMode(System::Windows::PresentationSource ^ menuSite);" />
      <MemberSignature Language="F#" Value="member this.PopMenuMode : System.Windows.PresentationSource -&gt; unit" Usage="inputManager.PopMenuMode menuSite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSite" Type="System.Windows.PresentationSource" />
      </Parameters>
      <Docs>
        <param name="menuSite">Menú que se va a abandonar.</param>
        <summary>Se invoca a través de los componentes que abandonan el modo de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un componente llama a este método para salir del modo de menú del Administrador de entrada. El `menuSite` libera el acceso con privilegios a los mensajes de ventana.  
  
 Llamar a este método hace que el recuento interno de menús abiertos disminuya y establece el <xref:System.Windows.Input.InputManager.IsInMenuMode%2A> propiedad `false`, si se trata del último menú para cerrar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="menuSite" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="PostNotifyInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.NotifyInputEventHandler PostNotifyInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.NotifyInputEventHandler PostNotifyInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.PostNotifyInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PostNotifyInput As NotifyInputEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::NotifyInputEventHandler ^ PostNotifyInput;" />
      <MemberSignature Language="F#" Value="member this.PostNotifyInput : System.Windows.Input.NotifyInputEventHandler " Usage="member this.PostNotifyInput : System.Windows.Input.NotifyInputEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>add: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.NotifyInputEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce una vez que los controladores <see cref="E:System.Windows.Input.InputManager.PreNotifyInput" /> finalizan el procesamiento de la entrada y se han provocado los eventos de [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] correspondientes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un monitor es cualquier código que realiza escuchas para <xref:System.Windows.Input.InputManager.PreNotifyInput> o <xref:System.Windows.Input.InputManager.PostNotifyInput>.  Monitores no pueden modificar el área de almacenamiento.  
  
 Los controladores se asocian a <xref:System.Windows.Input.InputManager.PostNotifyInput> se invocan en orden inverso para que se invocan los controladores agregados por los usuarios antes de controladores en el sistema.  
  
 Se procesa la entrada en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en las siguientes fases:  
  
1.  Fase de procesamiento previo.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreProcessInput> eventos.  
  
2.  Fase de notificación previa.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreNotifyInput> eventos.  
  
3.  El [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] se generan eventos de entrada o eventos.  
  
4.  Posterior a la fase de notificación.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostNotifyInput> eventos.  
  
5.  Fase de procesamiento posterior.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostProcessInput> eventos.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Para agregar o quitar un controlador de eventos.  Enumeraciones asociadas: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Input.NotifyInputEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PostProcessInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ProcessInputEventHandler PostProcessInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ProcessInputEventHandler PostProcessInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.PostProcessInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PostProcessInput As ProcessInputEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::ProcessInputEventHandler ^ PostProcessInput;" />
      <MemberSignature Language="F#" Value="member this.PostProcessInput : System.Windows.Input.ProcessInputEventHandler " Usage="member this.PostProcessInput : System.Windows.Input.ProcessInputEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>add: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ProcessInputEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce después de que los controladores <see cref="E:System.Windows.Input.InputManager.PreNotifyInput" /> finalizan el procesamiento de la entrada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un filtro es cualquier código que realiza escuchas para <xref:System.Windows.Input.InputManager.PreProcessInput> o <xref:System.Windows.Input.InputManager.PostProcessInput>.  Los filtros pueden modificar el área de almacenamiento.  
  
 Los controladores se asocian a <xref:System.Windows.Input.InputManager.PostProcessInput> se invocan en orden inverso para que se invocan los controladores agregados por los usuarios antes de controladores en el sistema.  
  
 Se procesa la entrada en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en las siguientes fases:  
  
1.  Fase de procesamiento previo.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreProcessInput> eventos.  
  
2.  Fase de notificación previa.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreNotifyInput> eventos.  
  
3.  El [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] se generan eventos de entrada o eventos.  
  
4.  Posterior a la fase de notificación.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostNotifyInput> eventos.  
  
5.  Fase de procesamiento posterior.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostProcessInput> eventos.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Para agregar o quitar un controlador de eventos. Enumeraciones asociadas: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Input.ProcessInputEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PreNotifyInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.NotifyInputEventHandler PreNotifyInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.NotifyInputEventHandler PreNotifyInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.PreNotifyInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreNotifyInput As NotifyInputEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::NotifyInputEventHandler ^ PreNotifyInput;" />
      <MemberSignature Language="F#" Value="member this.PreNotifyInput : System.Windows.Input.NotifyInputEventHandler " Usage="member this.PreNotifyInput : System.Windows.Input.NotifyInputEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>add: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.NotifyInputEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce una vez que los controladores <see cref="E:System.Windows.Input.InputManager.PreProcessInput" /> terminan de procesar la entrada, siempre que la entrada no se haya cancelado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un monitor es cualquier código que realiza escuchas para <xref:System.Windows.Input.InputManager.PreNotifyInput> o <xref:System.Windows.Input.InputManager.PostNotifyInput>.  Monitores no pueden modificar el área de almacenamiento.  
  
 Los controladores se asocian a <xref:System.Windows.Input.InputManager.PreNotifyInput> se invocan en orden inverso para que se invocan los controladores agregados por los usuarios antes de controladores en el sistema.  
  
 Se procesa la entrada en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en las siguientes fases:  
  
1.  Fase de procesamiento previo.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreProcessInput> eventos.  
  
2.  Fase de notificación previa.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreNotifyInput> eventos.  
  
3.  El [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] se generan eventos de entrada o eventos.  
  
4.  Posterior a la fase de notificación.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostNotifyInput> eventos.  
  
5.  Fase de procesamiento posterior.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostProcessInput> eventos.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Para agregar o quitar un controlador de eventos. Enumeraciones asociadas: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Input.NotifyInputEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PreProcessInput">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.PreProcessInputEventHandler PreProcessInput;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.PreProcessInputEventHandler PreProcessInput" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.InputManager.PreProcessInput" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreProcessInput As PreProcessInputEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Input::PreProcessInputEventHandler ^ PreProcessInput;" />
      <MemberSignature Language="F#" Value="member this.PreProcessInput : System.Windows.Input.PreProcessInputEventHandler " Usage="member this.PreProcessInput : System.Windows.Input.PreProcessInputEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>add: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.PreProcessInputEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando <see cref="T:System.Windows.Input.InputManager" /> empieza a procesar el elemento de entrada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un filtro es cualquier código que realiza escuchas para <xref:System.Windows.Input.InputManager.PreProcessInput> o <xref:System.Windows.Input.InputManager.PostProcessInput>.  Los filtros pueden modificar el área de almacenamiento.  
  
 Los controladores se asocian a <xref:System.Windows.Input.InputManager.PreProcessInput> se invocan en orden inverso para que se invocan los controladores agregados por los usuarios antes de controladores en el sistema.  
  
 Una llamada a <xref:System.Windows.Input.PreProcessInputEventArgs.Cancel%2A> en el <xref:System.Windows.Input.PreProcessInputEventArgs> pasa a la <xref:System.Windows.Input.PreProcessInputEventHandler> cancelará el procesamiento de la entrada.  
  
 Se procesa la entrada en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en las siguientes fases:  
  
1.  Fase de procesamiento previo.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreProcessInput> eventos.  
  
2.  Fase de notificación previa.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreNotifyInput> eventos.  
  
3.  El [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] se generan eventos de entrada o eventos.  
  
4.  Posterior a la fase de notificación.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostNotifyInput> eventos.  
  
5.  Fase de procesamiento posterior.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostProcessInput> eventos.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Para agregar o quitar un controlador de eventos. Enumeraciones asociadas: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="T:System.Windows.Input.PreProcessInputEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PrimaryKeyboardDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.KeyboardDevice PrimaryKeyboardDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.KeyboardDevice PrimaryKeyboardDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.PrimaryKeyboardDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrimaryKeyboardDevice As KeyboardDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::KeyboardDevice ^ PrimaryKeyboardDevice { System::Windows::Input::KeyboardDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryKeyboardDevice : System.Windows.Input.KeyboardDevice" Usage="System.Windows.Input.InputManager.PrimaryKeyboardDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyboardDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el dispositivo de teclado primario.</summary>
        <value>El dispositivo de teclado.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.Keyboard" />
      </Docs>
    </Member>
    <Member MemberName="PrimaryMouseDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseDevice PrimaryMouseDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.MouseDevice PrimaryMouseDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputManager.PrimaryMouseDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrimaryMouseDevice As MouseDevice" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::MouseDevice ^ PrimaryMouseDevice { System::Windows::Input::MouseDevice ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PrimaryMouseDevice : System.Windows.Input.MouseDevice" Usage="System.Windows.Input.InputManager.PrimaryMouseDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el dispositivo de mouse primario.</summary>
        <value>El dispositivo de mouse.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.Mouse" />
      </Docs>
    </Member>
    <Member MemberName="ProcessInput">
      <MemberSignature Language="C#" Value="public bool ProcessInput (System.Windows.Input.InputEventArgs input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ProcessInput(class System.Windows.Input.InputEventArgs input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputManager.ProcessInput(System.Windows.Input.InputEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ProcessInput (input As InputEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ProcessInput(System::Windows::Input::InputEventArgs ^ input);" />
      <MemberSignature Language="F#" Value="member this.ProcessInput : System.Windows.Input.InputEventArgs -&gt; bool" Usage="inputManager.ProcessInput input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Windows.Input.InputEventArgs" />
      </Parameters>
      <Docs>
        <param name="input">Entrada que se va a procesar.</param>
        <summary>Procesa de manera sincrónica la entrada especificada.</summary>
        <returns><see langword="true" /> si todos los eventos de entrada se han controlado; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un filtro es cualquier código que realiza escuchas para <xref:System.Windows.Input.InputManager.PreProcessInput> o <xref:System.Windows.Input.InputManager.PostProcessInput>.  Los filtros pueden modificar el área de almacenamiento.  
  
 Un monitor es cualquier código que realiza escuchas para <xref:System.Windows.Input.InputManager.PreNotifyInput> o <xref:System.Windows.Input.InputManager.PostNotifyInput>.  Monitores no pueden modificar el área de almacenamiento.  
  
 La entrada especificada es procesada por todos los filtros y los monitores y, por último, se envía al elemento adecuado como un evento de entrada.  
  
 Se procesa la entrada en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] en las siguientes fases:  
  
1.  Fase de procesamiento previo.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreProcessInput> eventos.  
  
2.  Fase de notificación previa.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PreNotifyInput> eventos.  
  
3.  El [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] se generan eventos de entrada o eventos.  
  
4.  Posterior a la fase de notificación.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostNotifyInput> eventos.  
  
5.  Fase de procesamiento posterior.  Administrador de entrada provoca la <xref:System.Windows.Input.InputManager.PostProcessInput> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">para procesar la entrada especificada. Enumeraciones asociadas: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
      </Docs>
    </Member>
    <Member MemberName="PushMenuMode">
      <MemberSignature Language="C#" Value="public void PushMenuMode (System.Windows.PresentationSource menuSite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PushMenuMode(class System.Windows.PresentationSource menuSite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputManager.PushMenuMode(System.Windows.PresentationSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushMenuMode (menuSite As PresentationSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PushMenuMode(System::Windows::PresentationSource ^ menuSite);" />
      <MemberSignature Language="F#" Value="member this.PushMenuMode : System.Windows.PresentationSource -&gt; unit" Usage="inputManager.PushMenuMode menuSite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSite" Type="System.Windows.PresentationSource" />
      </Parameters>
      <Docs>
        <param name="menuSite">Menú en el que se va a entrar.</param>
        <summary>Se invoca a través de los componentes que entrar en el modo de menú.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un componente llama a este método para entrar en modo de menú del Administrador de entrada. El `menuSite` obtiene acceso con privilegios a los mensajes de ventana. Llamar a este método hace que el recuento interno de menús abiertos aumente y establece el <xref:System.Windows.Input.InputManager.IsInMenuMode%2A> propiedad `true`, si se trata del primer menú para abrir.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="menuSite" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>