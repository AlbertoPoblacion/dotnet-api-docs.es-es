<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50863996da2e316125463f1727ac8d6947611179" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39920798" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa un enlace entre <see cref="T:System.Windows.Input.InputGesture" /> y un comando. El comando puede ser de tipo <see cref="T:System.Windows.Input.RoutedCommand" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar que los proporcionados por el usuario invoca un comando mediante la creación de un <xref:System.Windows.Input.InputBinding>. Cuando el usuario realiza la entrada especificada, el <xref:System.Windows.Input.ICommand> que se establece en el <xref:System.Windows.Input.InputBinding.Command%2A> se ejecuta la propiedad.  
  
 Puede especificar que el <xref:System.Windows.Input.InputBinding> invoca un comando que se define en un objeto mediante la creación de un enlace en el <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, y <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propiedades. Esto le permite definir un comando personalizado y lo asocia con la entrada del usuario. Para obtener más información, vea el segundo ejemplo en la sección ejemplos.  
  
 Un <xref:System.Windows.Input.InputBinding> puede definirse en un objeto específico o en el nivel de clase registrando un <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> con el <xref:System.Windows.Input.CommandManager>.  
  
 El <xref:System.Windows.Input.InputBinding> propia clase no admite el uso XAML porque no expone un constructor predeterminado público (hay un constructor predeterminado, pero está protegido). Sin embargo, las clases derivadas pueden exponer un constructor público y, por tanto, puede establecer propiedades en la clase derivada que se heredan de <xref:System.Windows.Input.InputBinding> con un uso XAML. Dos existente <xref:System.Windows.Input.InputBinding>-las clases derivadas que se pueden crear instancias en XAML y se pueden establecer propiedades en XAML son <xref:System.Windows.Input.KeyBinding> y <xref:System.Windows.Input.MouseBinding>. La propiedad típica en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] de programación que es establece en XAML y toma uno o varios <xref:System.Windows.Input.InputBinding> objetos como valores es el <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> propiedad.  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a>Uso de elementos de objeto XAML  
 \<*inputBindingDerivedClass.../*>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a>Valores XAML  
 `inputBindingDerivedClass`  
 Una clase derivada de <xref:System.Windows.Input.InputBinding> que admite la sintaxis de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>. Vea la sección Comentarios.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar un <xref:System.Windows.Input.KeyBinding> para enlazar un <xref:System.Windows.Input.KeyGesture> a la <xref:System.Windows.Input.ApplicationCommands.Open%2A> comando. Cuando se realiza el gesto de teclas, se invoca el comando Abrir.  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 Los ejemplos siguientes muestran cómo enlazar un comando personalizado a <xref:System.Windows.Input.InputBinding> objetos. Estos ejemplos crea una aplicación que permite al usuario cambiar el color de fondo mediante la realización de una de las acciones siguientes:  
  
-   Al hacer clic en un botón.  
  
-   Al presionar CTRL+C.  
  
-   Con el botón secundario una <xref:System.Windows.Controls.StackPanel> (fuera de la <xref:System.Windows.Controls.ListBox>).  
  
 El primer ejemplo crea una clase denominada `SimpleDelegateCommand`. Esta clase acepta a un delegado para que el objeto de crear el comando puede definir la acción que se produce cuando se ejecuta el comando. `SimpleDelegateCommand` También define las propiedades que especifican qué tecla y mouse entrada invoca el comando. `GestureKey` y `GestureModifier` especificar el entradas de teclado; `MouseGesture` especifica la entrada del mouse.  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 El ejemplo siguiente se crea e inicializa el `ColorChangeCommand`, que es un `SimpleDelegateCommand`. El ejemplo también define el método que se ejecuta cuando se invoca el comando y se establece la `GestureKey`, `GestureModifier`, y `MouseGesture` propiedades. Una aplicación podría llamar a la `InitializeCommand` método cuando se inicia el programa, como se muestra en el constructor de un <xref:System.Windows.Window>.  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 Por último, en el ejemplo siguiente se crea la interfaz de usuario. El ejemplo se agrega un <xref:System.Windows.Input.KeyBinding> y un <xref:System.Windows.Input.MouseBinding> a un <xref:System.Windows.Controls.StackPanel> que contiene un <xref:System.Windows.Controls.Button> y un <xref:System.Windows.Controls.ListBox>. Cuando el usuario selecciona un elemento en el <xref:System.Windows.Controls.ListBox>, quien puede cambiar el color de fondo al color seleccionado. En cada caso, el `CommandParameter` propiedad está enlazada al elemento seleccionado en el <xref:System.Windows.Controls.ListBox>y el `Command` propiedad está enlazada a la `ColorChangeCommand`. El <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, y <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> propiedades se enlazan a las propiedades correspondientes el `SimpleDelegateCommand` clase.  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Input.InputBinding" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Proporciona la inicialización base para las clases derivadas de <see cref="T:System.Windows.Input.InputBinding" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.InputBinding> no es técnicamente una clase abstracta, pero el constructor predeterminado es deliberadamente acceso protegido. Esto tiene el efecto de hacer que <xref:System.Windows.Input.InputBinding> una clase "abstracta" para XAML. Hay propiedades existentes en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] que tienen usos XAML que esperan objetos de tipo <xref:System.Windows.Input.InputBinding>, pero no se puede especificar un <xref:System.Windows.Input.InputBinding> instancia en XAML. En su lugar, puede especificar uno de los específicos del dispositivo <xref:System.Windows.Input.InputBinding> sus clases derivadas como valores, por ejemplo <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si implementa un personalizado <see cref="T:System.Windows.Input.InputBinding" /> que admite el uso XAML, utilice este constructor para la inicialización base.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command">Comando que se va a asociar con <c>gesture</c>.</param>
        <param name="gesture">Gesto de entrada que se va a asociar con <c>command</c>.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Input.InputBinding" /> con el comando y el gesto de entrada especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si es un desarrollador de software con las clases de enlace de entrada existentes, por lo general no se utiliza este constructor, incluso si va a definir comandos personalizados. En su lugar, se utilizarán los constructores de clases derivadas (<xref:System.Windows.Input.KeyBinding> y <xref:System.Windows.Input.MouseBinding>), o va a utilizar este constructor como la creación de instancias de base de una clase personalizada. Aunque la <xref:System.Windows.Input.InputBinding> clase es compatible con dispositivos de entrada diferentes en principio, en la práctica, debe elegir qué dispositivo representará el enlace de entrada. Solo se puede establecer solo uno <xref:System.Windows.Input.InputBinding.Gesture%2A> valor en el enlace de entrada y los movimientos son específicas del dispositivo.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo utilizar este constructor para asociar un <xref:System.Windows.Input.KeyGesture> con un <xref:System.Windows.Input.RoutedCommand>.  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcomand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingComand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcomand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="command" /> o <paramref name="gesture" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">Objeto que se va a clonar.</param>
        <summary>Copia los valores base (sin animaciones) de las propiedades del objeto especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member CloneCurrentValueCore : System.Windows.Freezable -&gt; unit&#xA;override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">Objeto que se va a clonar.</param>
        <summary>Copia los valores actuales de las propiedades del objeto especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Windows.Input.ICommand" /> asociado a este enlace de entrada.</summary>
        <value>Comando asociado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Input.InputBinding> clase no admite el uso XAML porque no expone un constructor público predeterminado (tiene un constructor predeterminado, pero está protegido). Sin embargo, las clases derivadas pueden exponer un constructor público y por lo tanto, puede usar las propiedades que se heredan de <xref:System.Windows.Input.InputBinding>. Dos existente <xref:System.Windows.Input.InputBinding> son las clases derivadas que se pueden crear instancias en XAML y se pueden establecer las propiedades con los usos XAML <xref:System.Windows.Input.KeyBinding> y <xref:System.Windows.Input.MouseBinding>.  
  
 <xref:System.Windows.Input.ICommand> hace referencia a un convertidor de tipos que permite ciertas preexistente <xref:System.Windows.Input.ICommand> implementaciones para especificar los valores en forma de cadena. Este comportamiento de conversión de tipo establece el formato de valor de atributo de esta propiedad. También puede enlazar el <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, y <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propiedades a un <xref:System.Windows.Input.ICommand> que se define en un objeto. Esto le permite definir un comando personalizado y lo asocia con la entrada del usuario. Para obtener más información, vea el segundo ejemplo de <xref:System.Windows.Input.InputBinding>.  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
 <`inputBindingDerivedClass` `Command`= "<xref:System.Windows.Input.ICommand>" / >  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a>Valores XAML  
 `inputBindingDerivedClass`  
 Una clase derivada de <xref:System.Windows.Input.InputBinding> que admite la sintaxis de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>. Vea la sección Comentarios.  
  
 `iCommandImplementation`  
 Implementación de objeto de <xref:System.Windows.Input.ICommand> que admite la sintaxis de elemento de objeto (tiene un constructor predeterminado público).  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar un <xref:System.Windows.Input.KeyBinding> para enlazar un <xref:System.Windows.Input.KeyGesture> a la <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> comando. Cuando se realiza el gesto de teclas, se invoca el comando Abrir.  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <see cref="P:System.Windows.Input.InputBinding.Command" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece los datos específicos de un comando concreto.</summary>
        <value>Datos específicos del comando. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Input.InputBinding.CommandParameter%2A> propiedad se utiliza para pasar información específica al comando cuando se ejecuta. El tipo de datos se define mediante el comando. Muchos comandos no esperan parámetros de comando; para estos comandos, se omitirá cualquier parámetro de comando.  
  
 Si el comando que está asociado un enlace de entrada es un <xref:System.Windows.Input.RoutedCommand>, el <xref:System.Windows.Input.InputBinding.CommandParameter%2A> del enlace de entrada se pasa a la <xref:System.Windows.Input.RoutedCommand> controladores a través de la <xref:System.Windows.Input.ExecutedRoutedEventArgs> y el <xref:System.Windows.Input.CanExecuteRoutedEventArgs> datos del evento cuando se procesa el comando.  
  
 El tipo de datos y el propósito del parámetro de comando se definen de forma diferente para cada comando y puede ser `null`. Puede enlazar el <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, y <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propiedades a un <xref:System.Windows.Input.ICommand> que se define en un objeto. Esto le permite definir un comando personalizado y lo asocia con la entrada del usuario. Para obtener más información, vea el segundo ejemplo de <xref:System.Windows.Input.InputBinding>.  
  
 La <xref:System.Windows.Input.InputBinding> clase no admite el uso XAML porque no expone un constructor público predeterminado (tiene un constructor predeterminado, pero está protegido). Sin embargo, las clases derivadas pueden exponer un constructor público y por lo tanto, puede establecer las propiedades que se heredan de <xref:System.Windows.Input.InputBinding> con el uso XAML. Dos existente <xref:System.Windows.Input.InputBinding> son las clases derivadas que se pueden crear instancias en XAML y se pueden establecer propiedades en XAML <xref:System.Windows.Input.KeyBinding> y <xref:System.Windows.Input.MouseBinding>.  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a>Valores XAML  
 `inputBindingDerivedClass`  
 Una clase derivada de <xref:System.Windows.Input.InputBinding> que admite la sintaxis de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>. Vea la sección Comentarios.  
  
 `commandParameterString`  
 Una cadena que es procesada por un comando concreto. Las cadenas son el tipo común que puede usar para parámetros de comando porque se puede establecer fácilmente en XAML. Para el formato de cadena y su finalidad, consulte la documentación para el comando concreto que está asociado el enlace de entrada. Muchos comandos no esperan parámetros.  
  
 `commandParameterObject`  
 Un objeto que es procesado por un comando concreto. Todas las [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] comandos usan cadenas. Por lo tanto, esta sintaxis de elemento de propiedad solo es relevante para escenarios de comando personalizado. Para admitir esta sintaxis, la `commandParameterObject` objeto también debe admitir la sintaxis de elemento de objeto (debe tener un constructor predeterminado público).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Input.InputBinding.CommandParameter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Input.InputBinding.Command" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el elemento de destino del comando.</summary>
        <value>Destino del comando. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el sistema, de comandos de Windows Presentation Foundation la <xref:System.Windows.Input.InputBinding.CommandTarget%2A> propiedad en un <xref:System.Windows.Input.ICommandSource> objeto solo es aplicable cuando la <xref:System.Windows.Input.ICommand> es un <xref:System.Windows.Input.RoutedCommand>. Si <xref:System.Windows.Input.InputBinding.CommandTarget%2A> se establece en un <xref:System.Windows.Input.ICommandSource> y el comando correspondiente no es un <xref:System.Windows.Input.RoutedCommand>, se omite el destino del comando.  
  
 Cuando se usa con un <xref:System.Windows.Input.RoutedCommand>, el destino del comando es el objeto en el que el <xref:System.Windows.Input.CommandManager.Executed> y <xref:System.Windows.Input.CommandManager.CanExecute> se generan eventos. Si el <xref:System.Windows.Input.InputBinding.CommandTarget%2A> no está establecida la propiedad, el elemento con foco de teclado se usa como destino.  
  
 El <xref:System.Windows.Input.InputBinding> propia clase no admite el uso XAML, porque no expone un constructor predeterminado público (hay un constructor predeterminado, pero está protegido). Sin embargo, las clases derivadas pueden exponer un constructor público y, por tanto, puede establecer las propiedades que se heredan de <xref:System.Windows.Input.InputBinding> con un uso XAML. Dos existente <xref:System.Windows.Input.InputBinding> son las clases derivadas que se pueden crear instancias en XAML y se pueden establecer propiedades en XAML <xref:System.Windows.Input.KeyBinding> y <xref:System.Windows.Input.MouseBinding>.  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a>Valores XAML  
 `inputBindingDerivedClass`  
 Una clase derivada de <xref:System.Windows.Input.InputBinding> que admite la sintaxis de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>. Vea la sección Comentarios.  
  
 `bindingToTarget`  
 Una cadena que utiliza un tipo de sintaxis de enlace que pueden devolver una referencia de objeto a un elemento de nombre. Vea la sección Comentarios.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Input.InputBinding.CommandTarget" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una instancia de un objeto <see cref="T:System.Windows.Input.InputBinding" />.</summary>
        <returns>El objeto nuevo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Windows.Input.InputGesture" /> asociado a este enlace de entrada.</summary>
        <value>El gesto asociado. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El gesto de entrada es la acción que invoca el comando. Ejemplos de gestos de entrada en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] son <xref:System.Windows.Input.KeyGesture> y <xref:System.Windows.Input.MouseGesture>. Un <xref:System.Windows.Input.KeyGesture> es una combinación de un <xref:System.Windows.Input.Key> y un conjunto de <xref:System.Windows.Input.ModifierKeys>. Un <xref:System.Windows.Input.MouseGesture> es una combinación de un <xref:System.Windows.Input.MouseAction> y un conjunto de <xref:System.Windows.Input.ModifierKeys>.  
  
 El <xref:System.Windows.Input.InputBinding> propia clase no admite el uso XAML, porque no expone un constructor predeterminado público (hay un constructor predeterminado, pero está protegido). Sin embargo, las clases derivadas pueden exponer un constructor público y, por tanto, puede establecer las propiedades que se heredan de <xref:System.Windows.Input.InputBinding> con un uso XAML. Dos existente <xref:System.Windows.Input.InputBinding> son las clases derivadas que se pueden crear instancias en XAML y se pueden establecer propiedades en XAML <xref:System.Windows.Input.KeyBinding> y <xref:System.Windows.Input.MouseBinding>.  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
 <<xref:System.Windows.Input.KeyBinding> `Gesture`= "<xref:System.Windows.Input.KeyGesture>" / >  
  
 \- o -  
  
 <<xref:System.Windows.Input.MouseBinding> `Gesture`= "<xref:System.Windows.Input.MouseGesture>" / >  
  
 \- o -  
  
 <`inputBindingDerivedClass` `Gesture`= "<xref:System.Windows.Input.InputGesture>" / >  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a>Valores XAML  
 `inputBindingDerivedClass`  
 Una clase derivada de <xref:System.Windows.Input.InputBinding> que admite la sintaxis de elemento de objeto, como <xref:System.Windows.Input.KeyBinding> o <xref:System.Windows.Input.MouseBinding>. Vea la sección Comentarios.  
  
 `inputGestureImplementation`  
 Clase de derivada personalizada <xref:System.Windows.Input.InputGesture> que admite la sintaxis de elemento de objeto.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar un <xref:System.Windows.Input.KeyBinding> para enlazar un <xref:System.Windows.Input.KeyGesture> a un <xref:System.Windows.Input.RoutedCommand>. Cuando el <xref:System.Windows.Input.KeyGesture> se presiona ALT + L, el <xref:System.Windows.Input.ApplicationCommands.Close%2A> se invoca el comando.  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">Objeto que se va a clonar.</param>
        <summary>Convierte la instancia en un clon inmovilizado del objeto <see cref="T:System.Windows.Freezable" /> especificado mediante los valores base de propiedades (sin animaciones).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit&#xA;override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable">Objeto que se va a clonar.</param>
        <summary>Convierte la instancia actual en un clon inmovilizado de la clase <see cref="T:System.Windows.Freezable" /> especificada. Si el objeto tiene propiedades de dependencia animadas, se copian sus valores animados actuales.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>