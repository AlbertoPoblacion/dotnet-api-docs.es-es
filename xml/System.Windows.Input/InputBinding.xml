<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="InputBinding.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac56b90f23db0a0464ab8bde6a060b5dd9953d82808.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6b90f23db0a0464ab8bde6a060b5dd9953d82808</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>Represents a binding between an <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> and a command.</source>
          <target state="translated">Representa un enlace entre <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> y un comando.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>The command is potentially a <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</source>
          <target state="translated">El comando puede ser de tipo <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>You can specify that user input invokes a command by creating a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">Puede especificar que proporcionados por el usuario invoca un comando mediante la creación de un <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the user performs the specified input, the <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is set to the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> property is executed.</source>
          <target state="translated">Cuando el usuario realiza la entrada especificada, el <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> que se establece en el <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> se ejecuta la propiedad.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>You can specify that the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> invokes a command that is defined on an object by creating a binding on the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties.</source>
          <target state="translated">Puede especificar que la <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> invoca un comando que se define en un objeto mediante la creación de un enlace en el <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, y <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propiedades.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">Esto le permite definir un comando personalizado y asociarlo con proporcionados por el usuario.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>For more information, see the second example in the Examples section.</source>
          <target state="translated">Para obtener más información, vea el segundo ejemplo en la sección ejemplos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> can be defined on a specific object or at the class level by registering a <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> with the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> pueden definirse en un objeto específico o en el nivel de clase registrando un <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> con el <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> no admite la propia clase <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso porque no expone un constructor predeterminado público (hay un constructor predeterminado, pero está protegido).</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">Sin embargo, las clases derivadas pueden exponer un constructor público y, por tanto, puede establecer propiedades en la clase derivada que hereda de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> con un <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>-derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dos existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>-las clases derivadas que se pueden crear instancias en <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> y puede establecer propiedades en <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> son <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> y <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The typical property in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> programming that is set in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and takes one or more <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects as values is the <ph id="ph4">&lt;xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">La propiedad típico en <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> de programación que es establece en <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> y toma uno o más <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objetos como valores es el <ph id="ph4">&lt;xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>XAML Object Element Usage</source>
          <target state="translated">Uso de elementos de objeto XAML</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>inputBindingDerivedClass…/<ept id="p1">*</ept><ph id="ph2">&gt;</ph></source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>inputBindingDerivedClass…/<ept id="p1">*</ept><ph id="ph2">&gt;</ph></target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Una clase derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que admite la sintaxis de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> o <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>See Remarks.</source>
          <target state="translated">Vea la sección Comentarios.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> command.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar un <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> para enlazar un <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> a la <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A&gt;</ph> comando.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the key gesture is performed, the Open command is invoked.</source>
          <target state="translated">Cuando se realiza el gesto de teclas, se invoca el comando Abrir.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following examples show how to bind a custom command to <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objects.</source>
          <target state="translated">Los ejemplos siguientes muestran cómo enlazar un comando personalizado a <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> objetos.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>These examples create an application that enables the user to change the background color by performing one of the following actions:</source>
          <target state="translated">Estos ejemplos crea una aplicación que permite al usuario cambiar el color de fondo realizando una de las siguientes acciones:</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Clicking a button.</source>
          <target state="translated">Al hacer clic en un botón.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Pressing CTRL+C.</source>
          <target state="translated">Al presionar CTRL+C.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Right-clicking a <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> (outside the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>).</source>
          <target state="translated">Con el botón secundario una <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> (fuera de la <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>).</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The first example creates a class named <ph id="ph1">`SimpleDelegateCommand`</ph>.</source>
          <target state="translated">El primer ejemplo crea una clase denominada <ph id="ph1">`SimpleDelegateCommand`</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</source>
          <target state="translated">Esta clase acepta a un delegado para que el objeto de crear el comando pueda definir la acción que se produce cuando se ejecuta el comando.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">`SimpleDelegateCommand`</ph> also defines properties that specify what key and mouse input invokes the command.</source>
          <target state="translated"><ph id="ph1">`SimpleDelegateCommand`</ph> También define las propiedades que especifican qué clave y el mouse entrada, invoca el comando.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source><ph id="ph1">`GestureKey`</ph> and <ph id="ph2">`GestureModifier`</ph> specify the keyboard input; <ph id="ph3">`MouseGesture`</ph> specifies the mouse input.</source>
          <target state="translated"><ph id="ph1">`GestureKey`</ph> y <ph id="ph2">`GestureModifier`</ph> especificar el teclado de entrada; <ph id="ph3">`MouseGesture`</ph> especifica la entrada del mouse (ratón).</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The following example creates and initializes the <ph id="ph1">`ColorChangeCommand`</ph>, which is a <ph id="ph2">`SimpleDelegateCommand`</ph>.</source>
          <target state="translated">En el ejemplo siguiente se crea e inicializa la <ph id="ph1">`ColorChangeCommand`</ph>, que es un <ph id="ph2">`SimpleDelegateCommand`</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The example also defines the method that executes when the command is invoked and sets the <ph id="ph1">`GestureKey`</ph>, <ph id="ph2">`GestureModifier`</ph>, and <ph id="ph3">`MouseGesture`</ph> properties.</source>
          <target state="translated">El ejemplo también define el método que se ejecuta cuando el comando se invoca y establece el <ph id="ph1">`GestureKey`</ph>, <ph id="ph2">`GestureModifier`</ph>, y <ph id="ph3">`MouseGesture`</ph> propiedades.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>An application would call the <ph id="ph1">`InitializeCommand`</ph> method when the program begins, such as in the constructor of a <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</source>
          <target state="translated">Una aplicación puede llamar el <ph id="ph1">`InitializeCommand`</ph> método cuando se inicia el programa, como se muestra en el constructor de un <ph id="ph2">&lt;xref:System.Windows.Window&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>Finally, the following example creates the user interface.</source>
          <target state="translated">Por último, en el ejemplo siguiente se crea la interfaz de usuario.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The example adds a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and a <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> that contains a <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> and a <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</source>
          <target state="translated">En el ejemplo se agrega un <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> y un <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> a una <ph id="ph3">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> que contiene un <ph id="ph4">&lt;xref:System.Windows.Controls.Button&gt;</ph> y <ph id="ph5">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>When the user selects an item in the <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, he or she can change the color of the background to the selected color.</source>
          <target state="translated">Cuando el usuario selecciona un elemento en el <ph id="ph1">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, que puede cambiar el color de fondo para el color seleccionado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>In each case, the <ph id="ph1">`CommandParameter`</ph> property is bound to the selected item in the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>, and the <ph id="ph3">`Command`</ph> property is bound to the <ph id="ph4">`ColorChangeCommand`</ph>.</source>
          <target state="translated">En cada caso, el <ph id="ph1">`CommandParameter`</ph> propiedad se enlaza con el elemento seleccionado en el <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph>y el <ph id="ph3">`Command`</ph> propiedad está enlazada a la <ph id="ph4">`ColorChangeCommand`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.InputBinding">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType&gt;</ph> properties are bound to the corresponding properties on the <ph id="ph4">`SimpleDelegateCommand`</ph> class.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType&gt;</ph>, y <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType&gt;</ph> propiedades se enlazan las propiedades correspondientes la <ph id="ph4">`SimpleDelegateCommand`</ph> clase.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.InputBinding">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>Provides base initialization for classes derived from <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</source>
          <target state="translated">Proporciona la inicialización base para las clases derivadas de <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> is not technically an abstract class, but the default constructor is deliberately protected access.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> no es técnicamente una clase abstracta, pero el constructor predeterminado es deliberadamente acceso protegido.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>This has the effect of making <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> an "abstract" class for <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Esto tiene el efecto de hacer que <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> clase "abstracta" para <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>There are existing properties in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> that have <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages that expect objects of type <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>, but you cannot specify an <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> instance in <ph id="ph5">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Hay propiedades existentes en <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> que tienen <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usos que esperan objetos de tipo <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>, pero no se puede especificar un <ph id="ph4">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> de instancia de <ph id="ph5">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>Instead, you can specify one of the device-specific <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes as values, for instance <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">En su lugar, puede especificar uno de los específicos del dispositivo <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> deriva clases como valores, por ejemplo <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> o <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor">
          <source>If you implement a custom <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> that supports a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, use this constructor for base initialization.</source>
          <target state="translated">Si implementa un personalizado <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> que admite un <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso, utilice este constructor para la inicialización base.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The command to associate with <bpt id="p1">&lt;c&gt;</bpt>gesture<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Comando que se va a asociar con <bpt id="p1">&lt;c&gt;</bpt>gesture<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The input gesture to associate with <bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Gesto de entrada que se va a asociar con <bpt id="p1">&lt;c&gt;</bpt>command<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> class with the specified command and input gesture.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph> con el comando y el gesto de entrada especificados.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</source>
          <target state="translated">Si es un desarrollador de software con las clases de enlace de entrada existentes, por lo general no se utiliza este constructor, incluso si va a definir los comandos personalizados.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Instead, you will either use constructors of derived classes (<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>), or you will use this constructor as the base instantiation of a custom class.</source>
          <target state="translated">En su lugar, se utilizarán los constructores de clases derivadas (<ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> y <ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>), o va a utilizar este constructor como la creación de instancias de base de una clase personalizada.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>Although the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</source>
          <target state="translated">Aunque la <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> clase es compatible con dispositivos de entrada distintos en principio, en la práctica, debe elegir qué dispositivo representará el enlace de entrada.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>You only can set only one <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> value on the input binding, and gestures are device-specific.</source>
          <target state="translated">Solo se puede establecer solo uno <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> valor en el enlace de entrada y los movimientos son específicos del dispositivo.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source>The following example shows how to use this constructor to associate a <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> with a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar este constructor para asociar un <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> con un <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)">
          <source><ph id="ph1">&lt;paramref name="command" /&gt;</ph> or <ph id="ph2">&lt;paramref name="gesture" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="command" /&gt;</ph> o <ph id="ph2">&lt;paramref name="gesture" /&gt;</ph> es <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">Objeto que se va a clonar.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)">
          <source>Copies the base (non-animated) values of the properties of the specified object.</source>
          <target state="translated">Copia los valores base (sin animaciones) de las propiedades del objeto especificado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">Objeto que se va a clonar.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)">
          <source>Copies the current values of the properties of the specified object.</source>
          <target state="translated">Copia los valores actuales de las propiedades del objeto especificado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Command">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> associated with this input binding.</source>
          <target state="translated">Obtiene o establece el <ph id="ph1">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> asociado a este enlace de entrada.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The associated command.</source>
          <target state="translated">Comando asociado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> no admite la clase <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso porque no expone un constructor predeterminado público (tiene un constructor predeterminado, pero está protegido).</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">Sin embargo, las clases derivadas pueden exponer un constructor público y por lo tanto, puede usar las propiedades que se heredan de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties with <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dos existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> las clases derivadas que se pueden crear instancias en <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> y puede establecer las propiedades con <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usos son <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> y <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> references a type converter that enables certain preexisting <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> implementations to specify values in the form of a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> hace referencia a un convertidor de tipos que permite ciertas preexistente <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> implementaciones para especificar valores en forma de una cadena.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>This type conversion behavior sets the attribute value form of this property.</source>
          <target state="translated">Este comportamiento de conversión de tipo establece el formato de valor de atributo de esta propiedad.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>You can also bind the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.</source>
          <target state="translated">También puede enlazar la <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, y <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propiedades a un <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> que se define en un objeto.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">Esto le permite definir un comando personalizado y asociarlo con proporcionados por el usuario.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>For more information, see the second example in <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">Para obtener más información, vea el segundo ejemplo de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso de atributos XAML</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Command`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Command`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Property Element Usage</source>
          <target state="translated">Uso de elementos de propiedad XAML</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Una clase derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que admite la sintaxis de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> o <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>See Remarks.</source>
          <target state="translated">Vea la sección Comentarios.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>An object implementation of <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that supports object element syntax (has a public default constructor).</source>
          <target state="translated">Una implementación de objeto de <ph id="ph1">&lt;xref:System.Windows.Input.ICommand&gt;</ph> que admite la sintaxis de elemento de objeto (tiene un constructor predeterminado público).</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to the <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType&gt;</ph> command.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar un <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> para enlazar un <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> a la <ph id="ph3">&lt;xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType&gt;</ph> comando.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Command">
          <source>When the key gesture is performed, the Open command is invoked.</source>
          <target state="translated">Cuando se realiza el gesto de teclas, se invoca el comando Abrir.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Command">
          <source>The <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Gets or sets the command-specific data for a particular command.</source>
          <target state="translated">Obtiene o establece los datos específicos de un comando concreto.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The command-specific data.</source>
          <target state="translated">Datos específicos del comando.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> property is used to pass specific information to the command when it is executed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> propiedad se utiliza para pasar información concreta al comando cuando se ejecuta.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The type of the data is defined by the command.</source>
          <target state="translated">El tipo de los datos se define mediante el comando.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</source>
          <target state="translated">Muchos comandos no esperan parámetros de comando; para estos comandos, se omitirá cualquier parámetro de comando.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>If the command that an input binding is associated with is a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> of the input binding is passed to the <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> handlers through the <ph id="ph4">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph> and the <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;</ph> event data when the command is processed.</source>
          <target state="translated">Si el comando que está asociado un enlace de entrada es un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, el <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph> de enlace de entrada se pasa a la <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> controladores a través de la <ph id="ph4">&lt;xref:System.Windows.Input.ExecutedRoutedEventArgs&gt;</ph> y <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs&gt;</ph> datos del evento cuando se procesa el comando.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The data type and purpose of the command parameter are defined differently for each command and can be <ph id="ph1">`null`</ph>.</source>
          <target state="translated">El tipo de datos y el propósito del parámetro de comando se definen de forma diferente para cada comando y puede ser <ph id="ph1">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>You can bind the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> properties to an <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> that is defined on an object.</source>
          <target state="translated">Puede enlazar la <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandParameter%2A&gt;</ph>, y <ph id="ph3">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propiedades a un <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> que se define en un objeto.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>This enables you to define a custom command and associate it with user input.</source>
          <target state="translated">Esto le permite definir un comando personalizado y asociarlo con proporcionados por el usuario.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>For more information, see the second example in <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</source>
          <target state="translated">Para obtener más información, vea el segundo ejemplo de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage because it does not expose a public default constructor (it has a default constructor, but it is protected).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> no admite la clase <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso porque no expone un constructor predeterminado público (tiene un constructor predeterminado, pero está protegido).</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">Sin embargo, las clases derivadas pueden exponer un constructor público y por lo tanto, puede establecer las propiedades que se heredan de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> con <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dos existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> las clases derivadas que se pueden crear instancias en <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> y puede establecer propiedades en <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> son <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> y <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso de atributos XAML</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Property Element Usage</source>
          <target state="translated">Uso de elementos de propiedad XAML</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Una clase derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que admite la sintaxis de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> o <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>See Remarks.</source>
          <target state="translated">Vea la sección Comentarios.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>A string that is processed by a particular command.</source>
          <target state="translated">Una cadena que es procesada por un comando concreto.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Strings are the common type used for command parameters because they can be easily set in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
          <target state="translated">Las cadenas son el tipo común que se utiliza para los parámetros de comando porque se pueden establecer fácilmente <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</source>
          <target state="translated">Para el formato de cadena y su propósito, consulte la documentación para el comando concreto que está asociado el enlace de entrada.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Many commands do not expect parameters.</source>
          <target state="translated">Muchos comandos no esperan parámetros.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>An object that is processed by a particular command.</source>
          <target state="translated">Un objeto que es procesado por un comando concreto.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>All existing <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> commands use strings.</source>
          <target state="translated">Todos los <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> comandos usan cadenas.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>Therefore, this property element syntax is only relevant for custom command scenarios.</source>
          <target state="translated">Por lo tanto, esta sintaxis de elemento de propiedad solo es pertinente para escenarios de comando personalizados.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandParameter">
          <source>In order to support this syntax, the <ph id="ph1">`commandParameterObject`</ph> object must also support object element syntax (must have a public default constructor).</source>
          <target state="translated">Para admitir esta sintaxis, la <ph id="ph1">`commandParameterObject`</ph> objeto también debe admitir la sintaxis de elemento de objeto (debe tener un constructor predeterminado público).</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandParameterProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandParameter" /&gt;</ph> dependency property.</source>
          <target state="translated">Identifica la propiedad de dependencia <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandParameter" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph> dependency property.</source>
          <target state="translated">Identifica la propiedad de dependencia <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.Command" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>Gets or sets the target element of the command.</source>
          <target state="translated">Obtiene o establece el elemento de destino del comando.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The target of the command.</source>
          <target state="translated">Destino del comando.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>In the <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> commanding system, the <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property on an <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> object is applicable only when the <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> is a <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">En el <ph id="ph1">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> estableciendo el sistema, la <ph id="ph2">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> propiedad en un <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> objeto solo es aplicable cuando la <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph> es una <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> is set on an <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> and the corresponding command is not a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is ignored.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> se establece en un <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> y el comando correspondiente no es un <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, se omite el destino del comando.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>When used with a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, the command target is the object on which the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised.</source>
          <target state="translated">Cuando se usa con un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, el destino del comando es el objeto en el que el <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> se generan eventos.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> property is not set, the element with keyboard focus is used as the target.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding.CommandTarget%2A&gt;</ph> no está establecida la propiedad, el elemento tiene el foco de teclado se utiliza como destino.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> no admite la propia clase <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso, porque no expone un constructor predeterminado público (hay un constructor predeterminado, pero está protegido).</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>However, derived classes can expose a public constructor and therefore can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">Sin embargo, las clases derivadas pueden exponer un constructor público y, por tanto, puede establecer las propiedades que se heredan de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> con un <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dos existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> las clases derivadas que se pueden crear instancias en <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> y puede establecer propiedades en <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> son <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> y <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso de atributos XAML</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Una clase derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que admite la sintaxis de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> o <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>See Remarks.</source>
          <target state="translated">Vea la sección Comentarios.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>A string that uses a type of binding syntax that can return an object reference to an existing named element.</source>
          <target state="translated">Elemento cuyo nombre de una cadena que utiliza un tipo de sintaxis de enlace que pueden devolver una referencia de objeto a una existente.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.CommandTarget">
          <source>See Remarks.</source>
          <target state="translated">Vea la sección Comentarios.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="F:System.Windows.Input.InputBinding.CommandTargetProperty">
          <source>Identifies the <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandTarget" /&gt;</ph> dependency property.</source>
          <target state="translated">Identifica la propiedad de dependencia <ph id="ph1">&lt;see cref="P:System.Windows.Input.InputBinding.CommandTarget" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CreateInstanceCore">
          <source>Creates an instance of an <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</source>
          <target state="translated">Crea una instancia de un objeto <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputBinding" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.CreateInstanceCore">
          <source>The new object.</source>
          <target state="translated">El objeto nuevo.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Gets or sets the <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> associated with this input binding.</source>
          <target state="translated">Obtiene o establece el <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> asociado a este enlace de entrada.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The associated gesture.</source>
          <target state="translated">El gesto asociado.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The default is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The input gesture is the action that invokes the command.</source>
          <target state="translated">El movimiento de entrada es la acción que invoca el comando.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Examples of input gestures in <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> are <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>.</source>
          <target state="translated">Ejemplos de gestos de entrada en <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> son <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> is a combination of a <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> es una combinación de un <ph id="ph2">&lt;xref:System.Windows.Input.Key&gt;</ph> y un conjunto de <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> is a combination of a <ph id="ph2">&lt;xref:System.Windows.Input.MouseAction&gt;</ph> and a set of <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> es una combinación de un <ph id="ph2">&lt;xref:System.Windows.Input.MouseAction&gt;</ph> y un conjunto de <ph id="ph3">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> class itself does not support <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage, because it does not expose a public default constructor (there is a default constructor, but it is protected).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> no admite la propia clase <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso, porque no expone un constructor predeterminado público (hay un constructor predeterminado, pero está protegido).</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>However, derived classes can expose a public constructor and thus can set properties that are inherited from <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> with a <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage.</source>
          <target state="translated">Sin embargo, las clases derivadas pueden exponer un constructor público y, por tanto, puede establecer las propiedades que se heredan de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> con un <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> uso.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>Two existing <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> derived classes that can be instantiated in <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> and can set properties in <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> are <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> and <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Dos existente <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> las clases derivadas que se pueden crear instancias en <ph id="ph2">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> y puede establecer propiedades en <ph id="ph3">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> son <ph id="ph4">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> y <ph id="ph5">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso de atributos XAML</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>"/&gt;</source>
          <target state="translated"><ph id="ph1">&lt;</ph><ph id="ph2">`inputBindingDerivedClass`</ph> <ph id="ph3">`Gesture`</ph>="<ph id="ph4">&lt;xref:System.Windows.Input.InputGesture&gt;</ph>"/&gt;</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Property Element Usage</source>
          <target state="translated">Uso de elementos de propiedad XAML</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> that supports object element syntax, such as <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</source>
          <target state="translated">Una clase derivada de <ph id="ph1">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> que admite la sintaxis de elemento de objeto, como <ph id="ph2">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> o <ph id="ph3">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>See Remarks.</source>
          <target state="translated">Vea la sección Comentarios.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>A custom derived class of <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> that supports object element syntax.</source>
          <target state="translated">Clase de derivada personalizada <ph id="ph1">&lt;xref:System.Windows.Input.InputGesture&gt;</ph> que admite la sintaxis de elemento de objeto.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>The following example shows how to use a <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar un <ph id="ph1">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> para enlazar un <ph id="ph2">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> a una <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.InputBinding.Gesture">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> ALT+L is pressed, the <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> command is invoked.</source>
          <target state="translated">Cuando el <ph id="ph1">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> se presiona ALT + L, el <ph id="ph2">&lt;xref:System.Windows.Input.ApplicationCommands.Close%2A&gt;</ph> se invoca el comando.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">Objeto que se va a clonar.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)">
          <source>Makes the instance a frozen clone of the specified <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> by using base (non-animated) property values.</source>
          <target state="translated">Convierte la instancia en un clon inmovilizado del objeto <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> especificado mediante los valores base de propiedades (sin animaciones).</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>The object to clone.</source>
          <target state="translated">Objeto que se va a clonar.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>Makes the current instance a frozen clone of the specified <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph>.</source>
          <target state="translated">Convierte la instancia actual en un clon inmovilizado de la clase <ph id="ph1">&lt;see cref="T:System.Windows.Freezable" /&gt;</ph> especificada.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
          <source>If the object has animated dependency properties, their current animated values are copied.</source>
          <target state="translated">Si el objeto tiene propiedades de dependencia animadas, se copian sus valores animados actuales.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>