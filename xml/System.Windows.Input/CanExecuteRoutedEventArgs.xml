<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CanExecuteRoutedEventArgs.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ee42842634492a0b412e4641ee5dcc557ee54b5c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee42842634492a0b412e4641ee5dcc557ee54b5c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.CanExecuteRoutedEventArgs">
          <source>Provides data for the <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandBinding.CanExecute" /&gt;</ph> and <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /&gt;</ph> routed events.</source>
          <target state="translated">Proporciona datos para los eventos enrutados <ph id="ph1">&lt;see cref="E:System.Windows.Input.CommandBinding.CanExecute" /&gt;</ph> y <ph id="ph2">&lt;see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CanExecuteRoutedEventArgs">
          <source>Typically, a command source, such a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, will call the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method on a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to determine if the command can or cannot execute on the current command target.</source>
          <target state="translated">Normalmente, un origen de comando, este tipo una <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph>, llamará a la <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> método en un <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> para determinar si el comando puede o no se puede ejecutar en el destino del comando actual.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CanExecuteRoutedEventArgs">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id="ph2">`false`</ph> from an event handler, the command source will disable itself.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> está establecido en <ph id="ph2">`false`</ph> desde un controlador de eventos, el origen del comando se deshabilitará.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CanExecuteRoutedEventArgs">
          <source>For example, if a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> is acting as the command source for a command and the command cannot execute on the current command target, then the <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> will gray itself out.</source>
          <target state="translated">Por ejemplo, si un <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> actúa como el origen del comando para un comando y el comando no se puede ejecutar en el destino del comando actual, el <ph id="ph2">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> se deshabilitará.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CanExecuteRoutedEventArgs">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event notifies a command source when the ability of a command to execute may have changed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> evento notifica a un origen de comando cuando puede haber cambiado la posibilidad de que se ejecute un comando.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CanExecuteRoutedEventArgs">
          <source>The follow example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> that returns <ph id="ph2">`true`</ph> only if the command target is a control.</source>
          <target state="translated">El ejemplo siguiente se crea un <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> que devuelve <ph id="ph2">`true`</ph> solo si el destino del comando es un control.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CanExecuteRoutedEventArgs">
          <source>First, <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> is cast to a <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
          <target state="translated">En primer lugar, <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> se convierte en un <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.CanExecuteRoutedEventArgs">
          <source>If <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> is a <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id="ph4">`true`</ph>; otherwise, it is set to <ph id="ph5">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> es un <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> está establecido en <ph id="ph4">`true`</ph>; en caso contrario, se establece en <ph id="ph5">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> associated with this event can be executed on the command target.</source>
          <target state="translated">Obtiene o establece un valor que indica si el <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> asociado a este evento puede ejecutarse en el destino de comando.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the event can be executed on the command target; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el evento puede ejecutarse en el destino de comando; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
          <source>Many command sources, such as <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, are disabled when <ph id="ph3">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is <ph id="ph4">`false`</ph> and enabled when the <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is <ph id="ph6">`true`</ph>.</source>
          <target state="translated">Muchos comandos orígenes, como <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> y <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph>, se deshabilitan cuando <ph id="ph3">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> es <ph id="ph4">`false`</ph> y habilitado cuando el <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> es <ph id="ph6">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
          <source>The follow example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> that only returns true if the command target is a control.</source>
          <target state="translated">El ejemplo siguiente se crea un <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> que solo devuelve true si el destino del comando es un control.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
          <source>First the <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> event data is cast to a <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</source>
          <target state="translated">Primera la <ph id="ph1">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> datos del evento se convierten en un <ph id="ph2">&lt;xref:System.Windows.Controls.Control&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute">
          <source>If it is a <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id="ph3">`true`</ph>; otherwise, it is set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated">Si es un <ph id="ph1">&lt;xref:System.Windows.Controls.Control&gt;</ph>, <ph id="ph2">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> está establecido en <ph id="ph3">`true`</ph>; en caso contrario, se establece en <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
          <source>Gets the command associated with this event.</source>
          <target state="translated">Obtiene el comando asociado a este evento.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
          <source>The command.</source>
          <target state="translated">Comando.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
          <source>Unless the command is a custom command, this is generally a <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</source>
          <target state="translated">A menos que el comando sea un comando personalizado, suele ser un <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
          <source>There is no default value.</source>
          <target state="translated">No existe ningún valor predeterminado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
          <source>For more information on commanding, see the <bpt id="p1">[</bpt>Commanding Overview<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre los comandos, consulte el <bpt id="p1">[</bpt>Introducción estableciendo<ept id="p1">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
          <source>The following example creates a <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> which handles multiple commands.</source>
          <target state="translated">En el ejemplo siguiente se crea un <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> que controla varios comandos.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A&gt;</ph> property is equal to the <ph id="ph2">&lt;xref:System.Windows.Input.MediaCommands.Play%2A&gt;</ph> command and the method <ph id="ph3">`IsPlaying`</ph> returns <ph id="ph4">`false`</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id="ph6">`true`</ph>; otherwise, <ph id="ph7">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id="ph8">`false`</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A&gt;</ph> propiedad es igual a la <ph id="ph2">&lt;xref:System.Windows.Input.MediaCommands.Play%2A&gt;</ph> comando y el método <ph id="ph3">`IsPlaying`</ph> devuelve <ph id="ph4">`false`</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> está establecido en <ph id="ph6">`true`</ph>; en caso contrario, <ph id="ph7">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> está establecido en <ph id="ph8">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A&gt;</ph> property is equal to the <ph id="ph2">&lt;xref:System.Windows.Input.MediaCommands.Stop%2A&gt;</ph> command and the method <ph id="ph3">`IsPlaying`</ph> returns <ph id="ph4">`true`</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id="ph6">`true`</ph>; otherwise, <ph id="ph7">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> is set to <ph id="ph8">`false`</ph>.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A&gt;</ph> propiedad es igual a la <ph id="ph2">&lt;xref:System.Windows.Input.MediaCommands.Stop%2A&gt;</ph> comando y el método <ph id="ph3">`IsPlaying`</ph> devuelve <ph id="ph4">`true`</ph>, <ph id="ph5">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> está establecido en <ph id="ph6">`true`</ph>; en caso contrario, <ph id="ph7">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> está establecido en <ph id="ph8">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting">
          <source>Determines whether the input routed event that invoked the command should continue to route through the element tree.</source>
          <target state="translated">Determina si el evento enrutado de entrada que invocó el comando debe seguir enrutando a través del árbol de elementos.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the routed event should continue to route through element tree; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el evento enrutado debe seguir recorriendo el árbol de elementos; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting">
          <source>The default value is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>Gets the command specific data.</source>
          <target state="translated">Obtiene los datos específicos del comando.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>The command data.</source>
          <target state="translated">Datos del comando.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>The default value is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>The command parameter is used to pass specific information to the command when it is executed.</source>
          <target state="translated">El parámetro de comando se utiliza para pasar información concreta al comando cuando se ejecuta.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>The type of the data is defined by the command.</source>
          <target state="translated">El tipo de los datos se define mediante el comando.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A&gt;</ph> can be <ph id="ph2">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A&gt;</ph> puede ser <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>Many commands do not process or expect command parameters.</source>
          <target state="translated">Muchos comandos no procesará ni esperan parámetros de comando.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>The following example shows up to use a <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> as the command source for a custom command.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo para utilizar un <ph id="ph1">&lt;xref:System.Windows.Controls.Button&gt;</ph> como el origen del comando para un comando personalizado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> is set to the custom <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> called <ph id="ph4">`customComand`</ph> and the <ph id="ph5">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph> is used to pass the value of the <ph id="ph6">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> property of a <ph id="ph7">&lt;xref:System.Windows.Controls.Slider&gt;</ph> control.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> propiedad de la <ph id="ph2">&lt;xref:System.Windows.Controls.Button&gt;</ph> está establecido en personalizado <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> llama <ph id="ph4">`customComand`</ph> y <ph id="ph5">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph> se utiliza para pasar el valor de la <ph id="ph6">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> propiedad de un <ph id="ph7">&lt;xref:System.Windows.Controls.Slider&gt;</ph> control.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>This is accomplishment by using databinding to bind the <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph> to the <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> property.</source>
          <target state="translated">Se trata de cumplimiento mediante el uso de enlace de datos para enlazar la <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph> a la <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter">
          <source>The converter in the binding expression is a custom <ph id="ph1">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph> which converts <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> into an <ph id="ph3">&lt;xref:System.Int32&gt;</ph> before binding it to the <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</source>
          <target state="translated">El convertidor en la expresión de enlace es un personalizado <ph id="ph1">&lt;xref:System.Windows.Data.IValueConverter&gt;</ph> que convierte <ph id="ph2">&lt;xref:System.Windows.Controls.Primitives.RangeBase.Value%2A&gt;</ph> en un <ph id="ph3">&lt;xref:System.Int32&gt;</ph> antes de enlazar a la <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>