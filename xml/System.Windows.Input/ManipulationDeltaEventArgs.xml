<Type Name="ManipulationDeltaEventArgs" FullName="System.Windows.Input.ManipulationDeltaEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e6fbc72fc91d48389fccd701463806fcfff77f26" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39740482" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManipulationDeltaEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ManipulationDeltaEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManipulationDeltaEventArgs&#xA;Inherits InputEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManipulationDeltaEventArgs sealed : System::Windows::Input::InputEventArgs" />
  <TypeSignature Language="F#" Value="type ManipulationDeltaEventArgs = class&#xA;    inherit InputEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona datos para el evento <see cref="E:System.Windows.UIElement.ManipulationDelta" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Input.ManipulationDeltaEventArgs> clase contiene datos sobre los cambios en la posición de una manipulación. El <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propiedad contiene los cambios producidos desde la última <xref:System.Windows.UIElement.ManipulationDelta> se produjo el evento. El <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> propiedad contiene todos los cambios producidos durante la manipulación actual. Usa una de esas propiedades para transformar el objeto manipulado.  
  
 Puede finalizar una manipulación mediante una llamada a la <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> método o forzar la manipulación en inercia llamando el <xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> método.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un controlador de eventos para el <xref:System.Windows.UIElement.ManipulationDelta> eventos. El ejemplo se usa el <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propiedad para mover, girar y cambiar el tamaño de un <xref:System.Windows.Shapes.Rectangle>. El ejemplo también se comprueba si el <xref:System.Windows.UIElement.ManipulationDelta> se ha producido un evento durante la inercia y si el rectángulo toca el borde de una ventana. Si se cumplen esos casos, la aplicación detiene la manipulación para evitar que el rectángulo salir del área visible de la aplicación. Este ejemplo forma parte de un ejemplo más extenso en [Tutorial: crear su primera aplicación táctil](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Function Cancel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Cancel();" />
      <MemberSignature Language="F#" Value="member this.Cancel : unit -&gt; bool" Usage="manipulationDeltaEventArgs.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancela la manipulación.</summary>
        <returns><see langword="true" /> si la manipulación se canceló correctamente; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el método se realiza correctamente, el valor predeterminado <xref:System.Windows.Input.TouchDevice> anterior envía eventos de teclado como el mouse hacia abajo o eventos de movimiento al elemento del mouse y no se producen eventos de manipulación futuras. Toque no se puede promover a los eventos del mouse si el <xref:System.Windows.UIElement.ManipulationCompleted> evento tiene lugar durante la inercia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.Complete" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete();" />
      <MemberSignature Language="F#" Value="member this.Complete : unit -&gt; unit" Usage="manipulationDeltaEventArgs.Complete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completa la manipulación sin inercia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede llamar a la <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> método para finalizar la manipulación. Por ejemplo, cuando un objeto alcanza el borde de una ventana, puede llamar <xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A> para impedir que el objeto quede fuera de la pantalla.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un controlador de eventos para el <xref:System.Windows.UIElement.ManipulationDelta> eventos. El ejemplo se comprueba si el <xref:System.Windows.UIElement.ManipulationDelta> se ha producido un evento durante la inercia y si el rectángulo toca el borde de una ventana. Si se cumplen esos casos, la aplicación detiene la manipulación para evitar que el rectángulo salir del área visible de la aplicación. Este ejemplo forma parte de un ejemplo más extenso en [Tutorial: crear su primera aplicación táctil](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CumulativeManipulation">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationDelta CumulativeManipulation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CumulativeManipulation As ManipulationDelta" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationDelta ^ CumulativeManipulation { System::Windows::Input::ManipulationDelta ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CumulativeManipulation : System.Windows.Input.ManipulationDelta" Usage="System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationDelta</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los cambios acumulados de la manipulación actual.</summary>
        <value>Los cambios acumulados de la manipulación actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> propiedad contiene todos los cambios producidos durante la manipulación actual. Puede usar <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> para transformar el objeto manipulado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeltaManipulation">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationDelta DeltaManipulation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeltaManipulation As ManipulationDelta" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationDelta ^ DeltaManipulation { System::Windows::Input::ManipulationDelta ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeltaManipulation : System.Windows.Input.ManipulationDelta" Usage="System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationDelta</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los cambios más recientes de la manipulación actual.</summary>
        <value>Los cambios más recientes de la manipulación actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propiedad contiene los cambios producidos desde la última <xref:System.Windows.UIElement.ManipulationDelta> se produjo el evento. Esta propiedad se puede usar para transformar el objeto manipulado.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un controlador de eventos para el <xref:System.Windows.UIElement.ManipulationDelta> eventos. El ejemplo se usa el <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> propiedad para mover, girar y cambiar el tamaño de un <xref:System.Windows.Shapes.Rectangle>. Este ejemplo forma parte de un ejemplo más extenso en [Tutorial: crear su primera aplicación táctil](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="manipulationDeltaEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInertial">
      <MemberSignature Language="C#" Value="public bool IsInertial { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInertial" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInertial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInertial { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInertial : bool" Usage="System.Windows.Input.ManipulationDeltaEventArgs.IsInertial" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el evento <see cref="E:System.Windows.UIElement.ManipulationDelta" /> se produce durante inercia.</summary>
        <value>Es <see langword="true" /> si el evento <see cref="E:System.Windows.UIElement.ManipulationDelta" /> se produce durante la inercia; es <see langword="false" /> si el evento se produce mientras el usuario tiene contacto con <see cref="T:System.Windows.UIElement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este método para determinar si el <xref:System.Windows.UIElement.ManipulationDelta> evento se produce durante la inercia o mientras el usuario tiene contacto con el elemento que recibe la <xref:System.Windows.UIElement.ManipulationDelta> eventos.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un controlador de eventos para el <xref:System.Windows.UIElement.ManipulationDelta> eventos. El ejemplo se comprueba si el <xref:System.Windows.UIElement.ManipulationDelta> se ha producido un evento durante la inercia y si el rectángulo toca el borde de una ventana. Si se cumplen esos casos, la aplicación detiene la manipulación para evitar que el rectángulo salir del área visible de la aplicación. Este ejemplo forma parte de un ejemplo más extenso en [Tutorial: crear su primera aplicación táctil](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  
  
 [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]
 [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationContainer">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement ManipulationContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement ManipulationContainer" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManipulationContainer As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ ManipulationContainer { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationContainer : System.Windows.IInputElement" Usage="System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el contenedor que define las coordenadas para la manipulación.</summary>
        <value>El contenedor que define las coordenadas para la manipulación.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManipulationOrigin">
      <MemberSignature Language="C#" Value="public System.Windows.Point ManipulationOrigin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point ManipulationOrigin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ManipulationOrigin As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point ManipulationOrigin { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.ManipulationOrigin : System.Windows.Point" Usage="System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el punto en el que se origina la manipulación.</summary>
        <value>Punto en el que se originó la manipulación.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Manipulators">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt; Manipulators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Input.IManipulator&gt; Manipulators" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.Manipulators" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Manipulators As IEnumerable(Of IManipulator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ Manipulators { System::Collections::Generic::IEnumerable&lt;System::Windows::Input::IManipulator ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Manipulators : seq&lt;System.Windows.Input.IManipulator&gt;" Usage="System.Windows.Input.ManipulationDeltaEventArgs.Manipulators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Input.IManipulator&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de objetos que representa los contactos táctiles para la manipulación.</summary>
        <value>Colección de objetos que representa los contactos táctiles para la manipulación.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportBoundaryFeedback">
      <MemberSignature Language="C#" Value="public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportBoundaryFeedback(class System.Windows.Input.ManipulationDelta unusedManipulation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReportBoundaryFeedback (unusedManipulation As ManipulationDelta)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReportBoundaryFeedback(System::Windows::Input::ManipulationDelta ^ unusedManipulation);" />
      <MemberSignature Language="F#" Value="member this.ReportBoundaryFeedback : System.Windows.Input.ManipulationDelta -&gt; unit" Usage="manipulationDeltaEventArgs.ReportBoundaryFeedback unusedManipulation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unusedManipulation" Type="System.Windows.Input.ManipulationDelta" />
      </Parameters>
      <Docs>
        <param name="unusedManipulation">La parte de la manipulación que representa la mudanza más allá del límite.</param>
        <summary>Especifica que la manipulación ha excedido ciertos límites.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> método para indicar que un elemento se ha movido más allá de un límite determinado.  Por ejemplo, si un usuario mueve un elemento fuera de los límites de un <xref:System.Windows.Window>, puede llamar a este método para notificar que a la ventana.  Cuando se llama a <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A>, el <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> se produce el evento.  De forma predeterminada, el <xref:System.Windows.Window> se suscribe a la <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> eventos para proporcionar comentarios visuales al usuario que se ha alcanzado un límite.  Puede suscribirse a <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> para implementar un comportamiento personalizado.  
  
   
  
## Examples  
 El ejemplo siguiente muestra un controlador de eventos para el <xref:System.Windows.UIElement.ManipulationDelta> evento que llama el <xref:System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback%2A> método cuando el usuario mueve el elemento sobre el borde de su contenedor.  Para probar este ejemplo, siga los pasos descritos en [Tutorial: crear su primera aplicación táctil](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md) y reemplace el código en el paso 5 con este código.  
  
 [!code-csharp[BasicManipulation#ReportBoundaryFeedback](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]
 [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unusedManipulation" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartInertia">
      <MemberSignature Language="C#" Value="public void StartInertia ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartInertia() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartInertia ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartInertia();" />
      <MemberSignature Language="F#" Value="member this.StartInertia : unit -&gt; unit" Usage="manipulationDeltaEventArgs.StartInertia " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia la inercia en la manipulación omitiendo los movimientos de contacto subsiguientes y generando el evento <see cref="E:System.Windows.UIElement.ManipulationInertiaStarting" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Velocities">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ManipulationVelocities Velocities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ManipulationVelocities Velocities" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ManipulationDeltaEventArgs.Velocities" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Velocities As ManipulationVelocities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ManipulationVelocities ^ Velocities { System::Windows::Input::ManipulationVelocities ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Velocities : System.Windows.Input.ManipulationVelocities" Usage="System.Windows.Input.ManipulationDeltaEventArgs.Velocities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ManipulationVelocities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la velocidad de los cambios más recientes que se producen en la manipulación.</summary>
        <value>La velocidad de los cambios más recientes que se producen en la manipulación.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>