<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="RoutedCommand.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac59d7469aafedfab5bf01be9f8214fc44809973b73.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9d7469aafedfab5bf01be9f8214fc44809973b73</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.RoutedCommand">
          <source>Defines a command that implements <ph id="ph1">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> and is routed through the element tree.</source>
          <target state="translated">Define un comando que implementa <ph id="ph1">&lt;see cref="T:System.Windows.Input.ICommand" /&gt;</ph> y se enruta a través del árbol de elementos.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> methods on a <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> do not contain the application logic for the command as is the case with a typical <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>, but rather, these methods raise events that traverse the element tree looking for an object with a <ph id="ph5">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> métodos en un <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> no contienen la lógica de aplicación para el comando, como es el caso típico <ph id="ph4">&lt;xref:System.Windows.Input.ICommand&gt;</ph>, pero en su lugar, estos métodos generan eventos que atraviesan el árbol de elementos que se busca un objeto con un <ph id="ph5">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>The event handlers attached to the <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> contain the command logic.</source>
          <target state="translated">Los controladores de eventos que se adjunta a la <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> contienen la lógica de comando.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> method raises the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> método genera el <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method raises the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> método genera el <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>XAML Attribute Usage</source>
          <target state="translated">Uso de atributos XAML</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="<bpt id="p3">*</bpt>predefinedCommandName<ept id="p3">*</ept>"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="<bpt id="p3">*</bpt>predefinedCommandName<ept id="p3">*</ept>"/&gt;</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="<bpt id="p3">*</bpt>predefinedClassName<ept id="p3">*</ept>.<bpt id="p4">*</bpt>predefinedCommandName<ept id="p4">*</ept>"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="<bpt id="p3">*</bpt>predefinedClassName<ept id="p3">*</ept>.<bpt id="p4">*</bpt>predefinedCommandName<ept id="p4">*</ept>"/&gt;</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="{ <bpt id="p3">*</bpt>customClassName<ept id="p3">*</ept>.<bpt id="p4">*</bpt>customCommandName<ept id="p4">*</ept>}"/&gt;</source>
          <target state="translated"><ph id="ph1">\&lt;</ph><bpt id="p1">*</bpt>object<ept id="p1">*</ept> <bpt id="p2">*</bpt>property<ept id="p2">*</ept>="{ <bpt id="p3">*</bpt>customClassName<ept id="p3">*</ept>.<bpt id="p4">*</bpt>customCommandName<ept id="p4">*</ept>}"/&gt;</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>XAML Values</source>
          <target state="translated">Valores XAML</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><bpt id="p1">*</bpt>predefinedClassName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>predefinedClassName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>One of the predefined command classes.</source>
          <target state="translated">Una de las clases de comandos predefinidos.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><bpt id="p1">*</bpt>predefinedCommandName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>predefinedCommandName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>One of the predefined commands.</source>
          <target state="translated">Uno de los comandos predefinidos.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><bpt id="p1">*</bpt>customClassName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>customClassName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>A custom class which contains the custom command.</source>
          <target state="translated">Una clase personalizada que contiene el comando personalizado.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>Custom classes generally require an <ph id="ph1">`xlmns`</ph> prefix mapping; see <bpt id="p1">[</bpt>XAML Namespaces and Namespace Mapping for WPF XAML<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.</source>
          <target state="translated">Las clases personalizadas generalmente requieren un <ph id="ph1">`xlmns`</ph> prefijar la asignación; vea <bpt id="p1">[</bpt>espacios de nombres XAML y asignación de Namespace para XAML de WPF<ept id="p1">](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source><bpt id="p1">*</bpt>customCommandName<ept id="p1">*</ept></source>
          <target state="translated"><bpt id="p1">*</bpt>customCommandName<ept id="p1">*</ept></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Input.RoutedCommand">
          <source>A custom command.</source>
          <target state="translated">Un comando personalizado.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="T:System.Windows.Input.RoutedCommand">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)">
          <source>Declared name for serialization.</source>
          <target state="translated">Nombre declarado para la serialización.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)">
          <source>The type which is registering the command.</source>
          <target state="translated">Tipo que registra el comando.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> class with the specified name and owner type.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> con el nombre y el tipo de propietario especificados.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)">
          <source><ph id="ph1">&lt;paramref name="ownerType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ownerType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
          <source>Declared name for serialization.</source>
          <target state="translated">Nombre declarado para la serialización.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
          <source>The type that is registering the command.</source>
          <target state="translated">Tipo que registra el comando.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
          <source>Default input gestures associated with this command.</source>
          <target state="translated">Gestos de entrada predeterminados asociados a este comando.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> class with the specified name, owner type, and collection of gestures.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> con el nombre, el tipo de propietario y la colección de gestos especificados.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
          <source>the length of <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is zero</source>
          <target state="translated">La longitud de <ph id="ph1">&lt;paramref name="name" /&gt;</ph> es cero.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)">
          <source><ph id="ph1">&lt;paramref name="ownerType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ownerType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>A user defined data type.</source>
          <target state="translated">Tipo de datos definido por el usuario.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>The command target.</source>
          <target state="translated">Destino del comando.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>Determines whether this <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> can execute in its current state.</source>
          <target state="translated">Determina si este <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> puede ejecutarse en su estado actual.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the command can execute on the current command target; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el comando puede ejecutarse en el destino de comando actual; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>The actual logic that determines if a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> can execute on the current command target is not contained in the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> methods, rather <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> raises the <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and the <ph id="ph5">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events which tunnel and bubble through element tree looking for a object with a <ph id="ph6">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
          <target state="translated">La lógica real que determina si un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> se puede ejecutar en este destino del comando no se encuentra en la <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> métodos, en su lugar <ph id="ph3">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> genera el <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> y la <ph id="ph5">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> eventos de túnel y se propagan a través de elemento de árbol busca un objeto con un <ph id="ph6">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is found, then the <ph id="ph3">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> attached to <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.</source>
          <target state="translated">Si un <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> para que <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> se encuentra, la <ph id="ph3">&lt;xref:System.Windows.Input.CanExecuteRoutedEventHandler&gt;</ph> conectado a <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> se llama.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>These handlers supply the programming logic for determining if the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> can execute or not.</source>
          <target state="translated">Estos controladores proporcionan la lógica de programación para determinar si el <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> se puede ejecutar o no.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> events are raised on the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> y <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> los eventos se producen en el <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is not set on the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> events are raised on the element with keyboard focus.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> no está establecida en el <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.PreviewCanExecute&gt;</ph> y <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.CanExecute&gt;</ph> se generan eventos en el elemento con el foco del teclado.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>The following example is a <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event handler from a custom implementation of <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente es un <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> controlador de eventos de una implementación personalizada de <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source><ph id="ph1">`this.Command`</ph> in this example is the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> property on the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`this.Command`</ph> en este ejemplo es el <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> propiedad en el <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>If the command is not <ph id="ph1">`null`</ph>, the command is cast to a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">Si el comando no es <ph id="ph1">`null`</ph>, el comando se convierte en un <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>If the command is a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method is called passing the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> and the <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</source>
          <target state="translated">Si el comando es un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, la <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> método se llama pasando el <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> y <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>If command is not a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, it is cast to an <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> method is called passing the <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</source>
          <target state="translated">Si el comando no es un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, se convierte en una <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> método se llama pasando el <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, then the control is enabled; otherwise, the control is disable.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> método <ph id="ph2">`true`</ph>, a continuación, el control está habilitado; en caso contrario, el control está deshabilitado.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> no es <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> ni <ph id="ph3">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>Occurs when changes to the command source are detected by the command manager.</source>
          <target state="translated">Se produce cuando el administrador del comando detecta cambios en el origen del comando.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>These changes often affect whether the command should execute on the current command target.</source>
          <target state="translated">Normalmente, estos cambios afectan al hecho de que el comando se ejecute en el destino de comando actual.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> listens for the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event, which is raised by the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> realiza escuchas para el <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> evento, que se genera mediante el <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event is raised whenever conditions are met that may change the whether the command should execute, such as a change in keyboard focus.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> evento se desencadena cuando se cumplen las condiciones que pueden cambiar si el comando debería ejecutarse, por ejemplo, un cambio en el foco del teclado.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>When the command receives the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event, it raises the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> event.</source>
          <target state="translated">Cuando se recibe el comando el <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event, genera el <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>Generally, the command source will listen for this event and query the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> by way of the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method.</source>
          <target state="translated">Por lo general, el origen del comando escuchará este evento y consulta el <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> por medio de la <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>Most command sources will disable themselves if the command cannot be executed, as part of their command binding.</source>
          <target state="translated">La mayoría de los orígenes de comando, se deshabilitará por sí mismos si no se puede ejecutar el comando, como parte de su enlace de comando.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>An example of this is when a <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> grays itself out when the command cannot be executed.</source>
          <target state="translated">Un ejemplo de esto es cuando un <ph id="ph1">&lt;xref:System.Windows.Controls.MenuItem&gt;</ph> se atenúa cuando no se puede ejecutar el comando.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>In some situations, the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> is unaware of a change in conditions that alters the ability of a command to execute.</source>
          <target state="translated">En algunas situaciones, la <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> no tiene constancia de un cambio en las condiciones que modifica la posibilidad de que se ejecute un comando.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>In these cases, you can force the <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> to raises the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> event by calling the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> method, this will in turn cause the <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> to raise the <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> event.</source>
          <target state="translated">En estos casos, puede forzar la <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> que genera el <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.RequerySuggested&gt;</ph> eventos mediante una llamada a la <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A&gt;</ph> método, esto hará que a su vez la <ph id="ph4">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> para generar el <ph id="ph5">&lt;xref:System.Windows.Input.RoutedCommand.CanExecuteChanged&gt;</ph> eventos.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>The following example is a <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> event handler from a custom implementation of <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</source>
          <target state="translated">El ejemplo siguiente es un <ph id="ph1">&lt;xref:System.Windows.Input.ICommand.CanExecuteChanged&gt;</ph> controlador de eventos de una implementación personalizada de <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source><ph id="ph1">`this.Command`</ph> in this example is the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> property on the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`this.Command`</ph> en este ejemplo es el <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource.Command%2A&gt;</ph> propiedad en el <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>If the command is not <ph id="ph1">`null`</ph>, the command is cast to a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">Si el comando no es <ph id="ph1">`null`</ph>, el comando se convierte en un <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>If the command is a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method is called passing the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> and the <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</source>
          <target state="translated">Si el comando es un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, la <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> método se llama pasando el <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> y <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>If command is not a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, it is cast to an <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> method is called passing the <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</source>
          <target state="translated">Si el comando no es un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, se convierte en una <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.Input.ICommand.CanExecute%2A&gt;</ph> método se llama pasando el <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="E:System.Windows.Input.RoutedCommand.CanExecuteChanged">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> method returns <ph id="ph2">`true`</ph>, then the control is enabled; otherwise, the control is disabled.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.CanExecute%2A&gt;</ph> método <ph id="ph2">`true`</ph>, a continuación, el control está habilitado; en caso contrario, el control está deshabilitado.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>User defined parameter to be passed to the handler.</source>
          <target state="translated">Parámetro definido por el usuario que se va a pasar al controlador.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>Element at which to begin looking for command handlers.</source>
          <target state="translated">Elemento en el se debe comenzar a buscar controladores de comando.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>Executes the <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> on the current command target.</source>
          <target state="translated">Ejecuta <ph id="ph1">&lt;see cref="T:System.Windows.Input.RoutedCommand" /&gt;</ph> en el destino de comando actual.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>The actual logic that executes the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is not contained in the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> methods.</source>
          <target state="translated">La lógica real que se ejecuta el <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> no se encuentra en la <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source><ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> raises the <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events, which tunnel and bubble through the element tree looking for an object with a <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> genera el <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> eventos de túnel y se propagan a través del elemento de árbol busca un objeto con un <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> for that <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is found, then the <ph id="ph3">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> attached to <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> is called.</source>
          <target state="translated">Si un <ph id="ph1">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> para que <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> se encuentra, la <ph id="ph3">&lt;xref:System.Windows.Input.ExecutedRoutedEventHandler&gt;</ph> conectado a <ph id="ph4">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> se llama.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>These handlers supply the programming logic that performs the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">Estos controladores proporcionan la lógica de programación que realiza el <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events are raised on the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> y <ph id="ph2">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> los eventos se producen en el <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>If the <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> is not set on the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, the <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> and <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> events are raised on the element with keyboard focus.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> no está establecida en el <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Input.CommandManager.PreviewExecuted&gt;</ph> y <ph id="ph4">&lt;xref:System.Windows.Input.CommandManager.Executed&gt;</ph> se generan eventos en el elemento con el foco del teclado.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>The following example is from a custom implementation of <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> sample.</source>
          <target state="translated">El ejemplo siguiente es de una implementación personalizada de <ph id="ph1">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph> ejemplo.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source><ph id="ph1">`this.Command`</ph> in this example is the Command property on the <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`this.Command`</ph> en este ejemplo es la propiedad del comando en el <ph id="ph2">&lt;xref:System.Windows.Input.ICommandSource&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>If the command is not null, the command is cast to a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">Si el comando no es null, el comando se convierte en un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>If it is a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> method is called passing the <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> and the <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</source>
          <target state="translated">Si es un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, la <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand.Execute%2A&gt;</ph> método se llama pasando el <ph id="ph3">&lt;xref:System.Windows.Input.ICommandSource.CommandTarget%2A&gt;</ph> y <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source>If the command is not a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, it is cast to an <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> and the <ph id="ph3">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> method is called passing the <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</source>
          <target state="translated">Si el comando no es un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>, se convierte en una <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> y <ph id="ph3">&lt;xref:System.Windows.Input.ICommand.Execute%2A&gt;</ph> método se llama pasando el <ph id="ph4">&lt;xref:System.Windows.Input.ICommandSource.CommandParameter%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> no es <ph id="ph2">&lt;see cref="T:System.Windows.UIElement" /&gt;</ph> ni <ph id="ph3">&lt;see cref="T:System.Windows.ContentElement" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.RoutedCommand.InputGestures">
          <source>Gets the collection of <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> objects that are associated with this command.</source>
          <target state="translated">Obtiene la colección de objetos <ph id="ph1">&lt;see cref="T:System.Windows.Input.InputGesture" /&gt;</ph> asociados a este comando.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.RoutedCommand.InputGestures">
          <source>The input gestures.</source>
          <target state="translated">Gestos de entrada.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.RoutedCommand.InputGestures">
          <source>The following example shows how to add a new <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> to a <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo agregar un nuevo <ph id="ph1">&lt;xref:System.Windows.Input.MouseGesture&gt;</ph> a una <ph id="ph2">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.RoutedCommand.Name">
          <source>Gets the name of the command.</source>
          <target state="translated">Obtiene el nombre del comando.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.RoutedCommand.Name">
          <source>The name of the command.</source>
          <target state="translated">Nombre del comando.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.RoutedCommand.Name">
          <source>This property can be used when referencing a <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> in <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>.</source>
          <target state="translated">Esta propiedad puede utilizarse para hacer referencia a un <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> en <ph id="ph2">[!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="P:System.Windows.Input.RoutedCommand.OwnerType">
          <source>Gets the type that is registered with the command.</source>
          <target state="translated">Obtiene el tipo que se registra con el comando.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Input.RoutedCommand.OwnerType">
          <source>The type of the command owner.</source>
          <target state="translated">Tipo del propietario del comando.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
          <source>Data used by the command.</source>
          <target state="translated">Datos que usa el comando.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
          <source>If the command does not require data to be passed, this object can be set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si el comando no exige pasar los datos, se puede establecer este objeto en <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
          <source>For a description of this members, see <ph id="ph1">&lt;see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" /&gt;</ph>.</source>
          <target state="translated">Para obtener una descripción de este miembro, vea <ph id="ph1">&lt;see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if this command can be executed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se puede ejecutar este comando; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)">
          <source>Data used by the command.</source>
          <target state="translated">Datos que usa el comando.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)">
          <source>If the command does not require data to be passed, this object can be set to <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si el comando no exige pasar los datos, se puede establecer este objeto en <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)">
          <source>For a description of this members, see <ph id="ph1">&lt;see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" /&gt;</ph>.</source>
          <target state="translated">Para obtener una descripción de este miembro, vea <ph id="ph1">&lt;see cref="M:System.Windows.Input.ICommand.Execute(System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">Este miembro es una implementación explícita de un miembro de interfaz.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface.</source>
          <target state="translated">Solo se puede utilizar cuando la instancia de <ph id="ph1">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> se convierte en una interfaz <ph id="ph2">&lt;xref:System.Windows.Input.ICommand&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)">
          <source>See Also</source>
          <target state="translated">Vea también</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>