<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="40314ee81839ebd0b1ef25f5f831b2e68f2b0ad5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30646669" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">
      <span data-ttu-id="dd1b7-101">Destino de comando que invoca al controlador.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dd1b7-101">The command target that is invoking the handler.</span>
      </span>
    </param>
    <param name="e">
      <span data-ttu-id="dd1b7-102">Datos del evento.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dd1b7-102">The event data.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="dd1b7-103">Representa el método que controlará el evento <see cref="E:System.Windows.Input.CommandBinding.CanExecute" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="dd1b7-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd1b7-104">El <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determina si el comando asociado con el origen del evento es capaz de ejecutar en el destino del comando.</span><span class="sxs-lookup"><span data-stu-id="dd1b7-104">The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target.</span></span> <span data-ttu-id="dd1b7-105">Si el comando no tiene un origen de comando que especifica un destino, la información de destino puede obtenerse a través de `sender`.</span><span class="sxs-lookup"><span data-stu-id="dd1b7-105">If the command has a command source that specifies a target, then the target information can be obtained through `sender`.</span></span> <span data-ttu-id="dd1b7-106">Si el <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> no se establece, el elemento tiene el foco de teclado es el destino y también puede obtenerse a través de `sender`.</span><span class="sxs-lookup"><span data-stu-id="dd1b7-106">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.</span></span>  <span data-ttu-id="dd1b7-107">Si se determina que el comando puede ejecutarse en el destino, la <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> propiedad debe establecerse en `true`; en caso contrario, establézcalo en `false`.</span><span class="sxs-lookup"><span data-stu-id="dd1b7-107">If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> property should be set to `true`; otherwise, set it to `false`.</span></span>  
  
 <span data-ttu-id="dd1b7-108">No debe confiar en los datos del evento para determinar el comando, el origen y el destino.</span><span class="sxs-lookup"><span data-stu-id="dd1b7-108">You do not need to rely on event data to determine the command, source, and target.</span></span> <span data-ttu-id="dd1b7-109">Puede limitar el uso del controlador a las invocaciones de comando posibles conocido, aunque esto es más difícil de lograr si la estructura de comandos depende en gran medida el enrutamiento de comandos para ejecutar el mismo comando en posibles destinos sucesivos en una ruta del evento.</span><span class="sxs-lookup"><span data-stu-id="dd1b7-109">You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dd1b7-110">El ejemplo siguiente muestra un <xref:System.Windows.Input.CanExecuteRoutedEventHandler> que establece <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> a `true`.</span><span class="sxs-lookup"><span data-stu-id="dd1b7-110">The following example shows a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>