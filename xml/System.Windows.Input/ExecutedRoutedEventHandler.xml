<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5e7060feb6bd9cc789b91cd51b75c1f71d708b5f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30647819" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">Objeto en que está asociado el controlador de eventos.</param>
    <param name="e">Datos del evento.</param>
    <summary>Representa el método que va a controlar los eventos enrutados <see cref="E:System.Windows.Input.CommandBinding.Executed" /> y <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" />, así como los eventos adjuntos relacionados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este delegado contiene la lógica de implementación para un <xref:System.Windows.Input.RoutedCommand>.  Separar la lógica de implementación del comando permite que el comando que se debe invocar desde tipos y orígenes diferentes y permite la centralización de la lógica de comandos.  
  
 Este delegado también se utiliza para <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> y <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, ¿cuáles son los eventos adjuntos en el <xref:System.Windows.Input.CommandManager> clase que implementa gran parte de la infraestructura de comandos. Pero los controladores más prácticos controlarán la <xref:System.Windows.Input.CommandBinding.Executed> eventos de un determinado <xref:System.Windows.Input.CommandBinding>, en lugar de trabajo en el <xref:System.Windows.Input.CommandManager> nivel.  
  
 Dentro de <xref:System.Windows.Input.ExecutedRoutedEventArgs>, las siguientes propiedades suelen ser de interés al escribir un controlador de eventos para un evento enrutado que es el resultado de un comando ejecutado:  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> indica el destino donde se ejecutó el comando. Una vez que se ejecuta el comando, también puede considerar de los <xref:System.Windows.RoutedEventArgs.Source%2A> más generalmente en enrutan términos de evento, como el objeto que provocó un evento enrutado.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> indica el comando que ejecuta. Esta propiedad es útil si se usan enlaces de comandos y escribir controladores potencialmente controlan varios comandos.  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> informa de los parámetros específicos del comando que se han pasado por el comando en ejecución. No todos los comandos se utilizan o esperan parámetros específicos del comando.  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> informa de si ya se controló el evento enrutado que dan como resultado del comando ejecutado por un elemento diferente en la ruta. Para los controladores de eventos enrutados, es una práctica recomendada tener controladores que realicen un trabajo significativo al controlar el evento para establecer <xref:System.Windows.RoutedEventArgs.Handled%2A> a `true`. Esto evita que controladores típicos para el evento de control de nuevo más el evento a lo largo de la ruta. Para obtener más información sobre cómo controlar los eventos enrutados, vea [Marcar eventos enrutados como Handled and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  
  
 Este delegado también representa controladores para <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> y <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, ¿cuáles son los eventos adjuntos en el <xref:System.Windows.Input.CommandManager> clase que implementa gran parte de la infraestructura de comandos. Pero los controladores más prácticos controlarán la <xref:System.Windows.Input.CommandBinding.Executed> eventos de un determinado <xref:System.Windows.Input.CommandBinding>, en lugar de trabajo en el <xref:System.Windows.Input.CommandManager> nivel.  
  
 Para obtener más información sobre los comandos, consulte [Información general sobre los comandos](~/docs/framework/wpf/advanced/commanding-overview.md).  
  
   
  
## Examples  
 Este ejemplo se crea un <xref:System.Windows.Input.ExecutedRoutedEventHandler> que establece una propiedad visual en el destino cuando se ejecuta el comando. El ejemplo también incluye el <xref:System.Windows.Input.CanExecuteRoutedEventHandler> para el mismo comando.  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>