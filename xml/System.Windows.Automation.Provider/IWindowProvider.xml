<Type Name="IWindowProvider" FullName="System.Windows.Automation.Provider.IWindowProvider">
  <TypeSignature Language="C#" Value="public interface IWindowProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IWindowProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWindowProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWindowProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="fac4f-101">Expone métodos y propiedades para admitir el acceso del cliente de automatización de la interfaz de usuario a controles que proporcionan la función fundamental basada en ventanas dentro de una interfaz gráfica de usuario tradicional.</span><span class="sxs-lookup"><span data-stu-id="fac4f-101">Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fac4f-102">Implementa en un proveedor de automatización de la interfaz de usuario que debe admitir el <xref:System.Windows.Automation.WindowPattern> patrón de control.</span><span class="sxs-lookup"><span data-stu-id="fac4f-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.WindowPattern" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="fac4f-103">Intenta cerrar la ventana.</span><span class="sxs-lookup"><span data-stu-id="fac4f-103">Attempts to close the window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fac4f-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> debe volver inmediatamente sin bloquearse.</span><span class="sxs-lookup"><span data-stu-id="fac4f-104"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.</span></span>  
  
 <span data-ttu-id="fac4f-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> genera el evento <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent>.</span><span class="sxs-lookup"><span data-stu-id="fac4f-105"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event.</span></span> <span data-ttu-id="fac4f-106">Si es posible, se debe generar el evento después de que el control ha completado su acción asociada.</span><span class="sxs-lookup"><span data-stu-id="fac4f-106">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="fac4f-107">Cuando se llama en un control de panel dividido, este método cierra el panel y quita la división asociada.</span><span class="sxs-lookup"><span data-stu-id="fac4f-107">When called on a split pane control, this method will close the pane and remove the associated split.</span></span> <span data-ttu-id="fac4f-108">Este método también puede cerrar todos los demás paneles, según la implementación.</span><span class="sxs-lookup"><span data-stu-id="fac4f-108">This method might also close all other panes, depending on implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fac4f-109">Cuando el control no puede realizar la acción solicitada.</span><span class="sxs-lookup"><span data-stu-id="fac4f-109">When the control is unable to perform the requested action.</span></span></exception>
        <exception cref="T:System.Windows.Automation.ElementNotAvailableException"><span data-ttu-id="fac4f-110">Cuando el elemento de destino ya no está disponible (por ejemplo, la ventana se cerró).</span><span class="sxs-lookup"><span data-stu-id="fac4f-110">When the target element is no longer available (for example, the window has closed).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InteractionState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowInteractionState InteractionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowInteractionState InteractionState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InteractionState As WindowInteractionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowInteractionState InteractionState { System::Windows::Automation::WindowInteractionState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowInteractionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fac4f-111">Obtiene el estado de interacción de la ventana.</span><span class="sxs-lookup"><span data-stu-id="fac4f-111">Gets the interaction state of the window.</span></span></summary>
        <value><span data-ttu-id="fac4f-112"><see cref="T:System.Windows.Automation.WindowInteractionState" /> del control.</span><span class="sxs-lookup"><span data-stu-id="fac4f-112">The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsModal">
      <MemberSignature Language="C#" Value="public bool IsModal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModal { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fac4f-113">Obtiene un valor que especifica si la ventana es modal.</span><span class="sxs-lookup"><span data-stu-id="fac4f-113">Gets a value that specifies whether the window is modal.</span></span></summary>
        <value>
          <span data-ttu-id="fac4f-114"><see langword="true" /> si la ventana es modal; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fac4f-114"><see langword="true" /> if the window is modal; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTopmost">
      <MemberSignature Language="C#" Value="public bool IsTopmost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTopmost { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fac4f-115">Obtiene un valor que especifica si la ventana es el elemento superior en el orden z.</span><span class="sxs-lookup"><span data-stu-id="fac4f-115">Gets a value that specifies whether the window is the topmost element in the z-order.</span></span></summary>
        <value>
          <span data-ttu-id="fac4f-116"><see langword="true" /> si la ventana es el elemento superior; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fac4f-116"><see langword="true" /> if the window is topmost; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Maximizable">
      <MemberSignature Language="C#" Value="public bool Maximizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Maximizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Maximizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fac4f-117">Obtiene un valor que especifica si la ventana se puede maximizar.</span><span class="sxs-lookup"><span data-stu-id="fac4f-117">Gets a value that specifies whether the window can be maximized.</span></span></summary>
        <value>
          <span data-ttu-id="fac4f-118"><see langword="true" /> si la ventana se puede maximizar; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fac4f-118"><see langword="true" /> if the window can be maximized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Minimizable">
      <MemberSignature Language="C#" Value="public bool Minimizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Minimizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Minimizable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fac4f-119">Obtiene un valor que especifica si la ventana se puede minimizar.</span><span class="sxs-lookup"><span data-stu-id="fac4f-119">Gets a value that specifies whether the window can be minimized.</span></span></summary>
        <value>
          <span data-ttu-id="fac4f-120"><see langword="true" /> si la ventana se puede minimizar; en caso contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="fac4f-120"><see langword="true" /> if the window can be minimized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisualState">
      <MemberSignature Language="C#" Value="public void SetVisualState (System.Windows.Automation.WindowVisualState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisualState(valuetype System.Windows.Automation.WindowVisualState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVisualState (state As WindowVisualState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVisualState(System::Windows::Automation::WindowVisualState state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Automation.WindowVisualState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="fac4f-121">Estado visual solicitado de la ventana.</span><span class="sxs-lookup"><span data-stu-id="fac4f-121">The requested visual state of the window.</span></span></param>
        <summary><span data-ttu-id="fac4f-122">Cambia el estado visual de la ventana.</span><span class="sxs-lookup"><span data-stu-id="fac4f-122">Changes the visual state of the window.</span></span> <span data-ttu-id="fac4f-123">Por ejemplo, lo minimiza o lo maximiza.</span><span class="sxs-lookup"><span data-stu-id="fac4f-123">For example, minimizes or maximizes it.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="fac4f-124">Cuando el control no admite un comportamiento solicitado.</span><span class="sxs-lookup"><span data-stu-id="fac4f-124">When the control does not support the requested behavior.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VisualState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowVisualState VisualState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowVisualState VisualState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisualState As WindowVisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowVisualState VisualState { System::Windows::Automation::WindowVisualState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowVisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="fac4f-125">Obtiene el estado visual de la ventana.</span><span class="sxs-lookup"><span data-stu-id="fac4f-125">Gets the visual state of the window.</span></span></summary>
        <value><span data-ttu-id="fac4f-126">Estado visual de la ventana.</span><span class="sxs-lookup"><span data-stu-id="fac4f-126">The visual state of the window.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="fac4f-127">Cantidad de tiempo, en milisegundos, que se esperará hasta que el proceso asociado entre a un estado de inactividad.</span><span class="sxs-lookup"><span data-stu-id="fac4f-127">The amount of time, in milliseconds, to wait for the associated process to become idle.</span></span> <span data-ttu-id="fac4f-128">El máximo es <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="fac4f-128">The maximum is <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="fac4f-129">Hace que el código de llamada se bloquee durante el tiempo especificado o hasta que el proceso asociado entre en un estado de inactividad, lo que ocurra primero.</span><span class="sxs-lookup"><span data-stu-id="fac4f-129">Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</span></span></summary>
        <returns>
          <span data-ttu-id="fac4f-130"><see langword="true" /> si la ventana ha entrado en el estado inactivo; <see langword="false" /> si se ha superado el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="fac4f-130"><see langword="true" /> if the window has entered the idle state; <see langword="false" /> if the timeout occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fac4f-131">Este método se utiliza normalmente junto con el control de un <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span><span class="sxs-lookup"><span data-stu-id="fac4f-131">This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span></span>  
  
 <span data-ttu-id="fac4f-132">Depende de la implementación en el marco de aplicación subyacente; por lo tanto, este método podría devolver algún tiempo después de que la ventana está lista para la entrada de usuario.</span><span class="sxs-lookup"><span data-stu-id="fac4f-132">The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.</span></span> <span data-ttu-id="fac4f-133">El código de llamada no debe confiar en este método para determinar exactamente cuándo se ha vuelto inactiva la ventana.</span><span class="sxs-lookup"><span data-stu-id="fac4f-133">The calling code should not rely on this method to ascertain exactly when the window has become idle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="fac4f-134">Cuando el parámetro pasado no es un número válido.</span><span class="sxs-lookup"><span data-stu-id="fac4f-134">When the parameter passed in is not a valid number.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>