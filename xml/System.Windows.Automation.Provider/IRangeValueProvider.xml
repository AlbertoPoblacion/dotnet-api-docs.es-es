<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IRangeValueProvider.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86c58a78d93529ddc2cf59c8fe5a6800abd76e65386.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">58a78d93529ddc2cf59c8fe5a6800abd76e65386</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Automation.Provider.IRangeValueProvider">
          <source>Exposes methods and properties to support UI Automation client access to controls that can be set to a value within a range.</source>
          <target state="translated">Expone métodos y propiedades para admitir el acceso del cliente de UI Automation a controles que se pueden establecer en un valor dentro de un intervalo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Automation.Provider.IRangeValueProvider">
          <source>Implemented on a UI Automation provider that must support the <ph id="ph1">&lt;xref:System.Windows.Automation.RangeValuePattern&gt;</ph> control pattern.</source>
          <target state="translated">Implementa en un proveedor de automatización de la interfaz de usuario que debe admitir el <ph id="ph1">&lt;xref:System.Windows.Automation.RangeValuePattern&gt;</ph> patrón de control.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly">
          <source>Gets a value that specifies whether the value of a control is read-only.</source>
          <target state="translated">Obtiene un valor que especifica si el valor de un control es de sólo lectura.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value is read-only; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it can be modified.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el valor es de solo lectura; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si se puede modificar.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly">
          <source>The following example shows an implementation of this method for a control that is not read-only.</source>
          <target state="translated">En el ejemplo siguiente se muestra una implementación de este método para un control que no es de solo lectura.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange">
          <source>Gets the value that is added to or subtracted from the <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /&gt;</ph> property when a large change is made, such as with the PAGE DOWN key.</source>
          <target state="translated">Obtiene el valor que se suma o se resta a la propiedad <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /&gt;</ph> cuando se realiza un cambio grande, por ejemplo con la tecla AV PÁG.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange">
          <source>The large-change value supported by the control or null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if the control does not support <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" /&gt;</ph>.</source>
          <target state="translated">El valor de cambio grande admitido por el control o null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic) si el control no admite <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange">
          <source>The following example shows an implementation of this method for a control that has a large change value of 5.0.</source>
          <target state="translated">En el ejemplo siguiente se muestra una implementación de este método para un control que tiene un valor de cambio grande de 5.0.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum">
          <source>Gets the maximum range value supported by the control.</source>
          <target state="translated">Obtiene el valor máximo del intervalo admitido por el control.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum">
          <source>The maximum value supported by the control or null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if the control does not support <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" /&gt;</ph>.</source>
          <target state="translated">El valor máximo admitido por el control o null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic) si el control no admite <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum">
          <source>The following example shows an implementation of this method for a control that has a maximum value of 255.0.</source>
          <target state="translated">En el ejemplo siguiente se muestra una implementación de este método para un control que tiene un valor máximo de 255.0.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum">
          <source>Gets the minimum range value supported by the control.</source>
          <target state="translated">Obtiene el valor mínimo del intervalo admitido por el control.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum">
          <source>The minimum value supported by the control or null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if the control does not support <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" /&gt;</ph>.</source>
          <target state="translated">El valor mínimo admitido por el control o null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic) si el control no admite <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum">
          <source>The following example shows an implementation of this method for a control that has a minimum value of 0.0.</source>
          <target state="translated">En el ejemplo siguiente se muestra una implementación de este método para un control que tiene un valor mínimo de 0.0.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
          <source>The value to set.</source>
          <target state="translated">Valor que se va a establecer.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
          <source>Sets the value of the control.</source>
          <target state="translated">Establece el valor del control.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
          <source>The actual value set depends on the control implementation.</source>
          <target state="translated">El conjunto de valores real depende de la implementación del control.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
          <source>The control may round the requested <ph id="ph1">`value`</ph> up or down.</source>
          <target state="translated">El control puede redondear solicitado <ph id="ph1">`value`</ph> hacia arriba o abajo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
          <source>The following example shows one possible implementation of this method for a custom control.</source>
          <target state="translated">En el ejemplo siguiente se muestra una posible implementación de este método para un control personalizado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
          <source>The custom control displays its range value through the alpha value of its base color.</source>
          <target state="translated">El control personalizado muestra su valor de intervalo a través del valor alfa de su color base.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
          <source>When <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is less than the minimum or greater than the maximum value of the control.</source>
          <target state="translated">Cuando <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es menor que el mínimo o mayor que el valor máximo del control.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange">
          <source>Gets the value that is added to or subtracted from the <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /&gt;</ph> property when a small change is made, such as with an arrow key.</source>
          <target state="translated">Obtiene el valor que se suma o se resta a la propiedad <ph id="ph1">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /&gt;</ph> cuando se realiza un cambio pequeño, por ejemplo con una tecla de dirección.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange">
          <source>The small-change value or null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if the control does not support <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" /&gt;</ph>.</source>
          <target state="translated">El valor de cambio pequeño o null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic) si el control no admite <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange">
          <source>The following example shows an implementation of this method for a control that has a small change value of 1.0.</source>
          <target state="translated">En el ejemplo siguiente se muestra una implementación de este método para un control que tiene un valor de cambio pequeño de 1.0.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
          <source>Gets the value of the control.</source>
          <target state="translated">Obtiene el valor del control.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
          <source>The value of the control or null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic) if the control does not support <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /&gt;</ph>.</source>
          <target state="translated">El valor del control o null (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic) si el control no admite <ph id="ph2">&lt;see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
          <source>The following example shows an implementation of this method for a custom control.</source>
          <target state="translated">En el ejemplo siguiente se muestra una implementación de este método para un control personalizado.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
          <source>For the purposes of this sample, the custom control displays the value through the alpha setting of its base color.</source>
          <target state="translated">Para los fines de este ejemplo, el control personalizado muestra el valor a través del valor alfa de su color base.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>