<Type Name="IInvokeProvider" FullName="System.Windows.Automation.Provider.IInvokeProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6d7fc6c654649e8fbec52f5f04da49c29f591a2a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37526613" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IInvokeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvokeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IInvokeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvokeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvokeProvider" />
  <TypeSignature Language="F#" Value="type IInvokeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7d83d-101">Expone métodos y propiedades para admitir el acceso de cliente de UI Automation a los controles que inician o realizan una única acción inequívoca y no mantienen el estado cuando se activan.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7d83d-101">Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d83d-102">Implementa en un proveedor de automatización de interfaz de usuario que debe admitir el <xref:System.Windows.Automation.InvokePattern> patrón de control.</span><span class="sxs-lookup"><span data-stu-id="7d83d-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.</span></span>  
  
 <span data-ttu-id="7d83d-103">Los controles implementan <xref:System.Windows.Automation.Provider.IInvokeProvider> si el mismo comportamiento no se expone a través de otro proveedor de patrón de control.</span><span class="sxs-lookup"><span data-stu-id="7d83d-103">Controls implement <xref:System.Windows.Automation.Provider.IInvokeProvider> if the same behavior is not exposed through another control pattern provider.</span></span> <span data-ttu-id="7d83d-104">Por ejemplo, si el método <xref:System.Windows.Automation.InvokePattern.Invoke%2A> de un control realiza la misma acción que los métodos <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> o <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> , el control no debe implementar <xref:System.Windows.Automation.Provider.IInvokeProvider>.</span><span class="sxs-lookup"><span data-stu-id="7d83d-104">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement <xref:System.Windows.Automation.Provider.IInvokeProvider>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.InvokePattern" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="abstract member Invoke : unit -&gt; unit" Usage="iInvokeProvider.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7d83d-105">Envía una solicitud para activar un control e iniciar su acción única e inequívoca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d83d-105">Sends a request to activate a control and initiate its single, unambiguous action.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7d83d-106"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> es una llamada asincrónica y debe volver inmediatamente sin bloquearse.</span><span class="sxs-lookup"><span data-stu-id="7d83d-106"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> is an asynchronous call and must return immediately without blocking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7d83d-107">Este comportamiento es especialmente importante para los controles que, directa o indirectamente, inician un cuadro de diálogo modal cuando se invocan.</span><span class="sxs-lookup"><span data-stu-id="7d83d-107">This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked.</span></span> <span data-ttu-id="7d83d-108">Cualquier cliente de Automatización de la interfaz de usuario que haya provocado que el evento permanezca bloqueado hasta que se cierre el cuadro de diálogo modal.</span><span class="sxs-lookup"><span data-stu-id="7d83d-108">Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.</span></span>  
  
 <span data-ttu-id="7d83d-109"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> genera el evento <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>.</span><span class="sxs-lookup"><span data-stu-id="7d83d-109"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event.</span></span> <span data-ttu-id="7d83d-110">Si es posible, se debe generar el evento después de que el control ha terminado su acción asociada.</span><span class="sxs-lookup"><span data-stu-id="7d83d-110">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="7d83d-111"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> debe emitirse antes de atender la <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> solicitud en los escenarios siguientes:</span><span class="sxs-lookup"><span data-stu-id="7d83d-111"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> request in the following scenarios:</span></span>  
  
-   <span data-ttu-id="7d83d-112">No es posible ni práctico esperar hasta que se complete la acción.</span><span class="sxs-lookup"><span data-stu-id="7d83d-112">It is not possible or practical to wait until the action is complete.</span></span>  
  
-   <span data-ttu-id="7d83d-113">La acción requiere la interacción del usuario.</span><span class="sxs-lookup"><span data-stu-id="7d83d-113">The action requires user interaction.</span></span>  
  
-   <span data-ttu-id="7d83d-114">La acción requiere mucho tiempo y hará que el cliente que realiza la llamada se bloquea durante un período de tiempo significativo.</span><span class="sxs-lookup"><span data-stu-id="7d83d-114">The action is time-consuming and will cause the calling client to block for a significant length of time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7d83d-115">En el ejemplo siguiente se implementa el <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> método en el controlador de eventos MouseDown de un control.</span><span class="sxs-lookup"><span data-stu-id="7d83d-115">The following example implements the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> method on the MouseDown event handler of a control.</span></span> <span data-ttu-id="7d83d-116">Supongamos que `providerControl` es una variable de miembro que se inicializa cuando se construyó la clase.</span><span class="sxs-lookup"><span data-stu-id="7d83d-116">Assume that `providerControl` is a member variable that was initialized when the class was constructed.</span></span>  
  
 [!code-csharp[UIAProvider_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/Invoker.cs#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">
          <span data-ttu-id="7d83d-117">Si el control no está habilitado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7d83d-117">If the control is not enabled.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>