<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19dabc2ace8fba060536a278060176e6f5b49aa4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36607318" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona información sobre una expresión regular que se usa para compilar una expresión regular en un ensamblado independiente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una matriz de <xref:System.Text.RegularExpressions.RegexCompilationInfo> objetos se pasa a la <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método para proporcionar información sobre las expresiones regulares que se incluirá en el ensamblado. Cada expresión regular compilada que se incluye en el ensamblado se representa como una clase derivada de <xref:System.Text.RegularExpressions.Regex>. Las propiedades de la <xref:System.Text.RegularExpressions.RegexCompilationInfo> tipo Definir nombre de la clase de la expresión regular, su nombre completo (es decir, su espacio de nombres y nombre de su tipo), su patrón de expresión regular, las opciones adicionales (por ejemplo, si la expresión regular es mayúsculas y minúsculas) y un intervalo de tiempo de espera que especifica cuánto tiempo el motor de expresiones regulares debe buscar una coincidencia.  
  
 Puede crear instancias de un <xref:System.Text.RegularExpressions.RegexCompilationInfo> objeto mediante una llamada a su constructor de clase sobrecargados.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">Expresión regular que se va a compilar.</param>
        <param name="options">Opciones de la expresión regular que se van a usar al compilar la expresión regular.</param>
        <param name="name">Nombre del tipo que representa la expresión regular compilada.</param>
        <param name="fullnamespace">Espacio de nombres al que pertenece el nuevo tipo.</param>
        <param name="ispublic">
          <see langword="true" /> para hacer públicamente visible la expresión regular compilada; en caso contrario, <see langword="false" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> que contiene información sobre una expresión regular que se va a incluir en un ensamblado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada parámetro de la <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> constructor se corresponde directamente con una propiedad de la <xref:System.Text.RegularExpressions.RegexCompilationInfo> clase. Dado que todas las propiedades son de lectura/escritura, sus valores también se pueden asignar directamente.  
  
 El <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método genera un ensamblado que contiene expresiones regulares compiladas. Por lo tanto, no se debe especificar <xref:System.Text.RegularExpressions.RegexOptions.Compiled> como uno de los valores de `options`.  
  
 Si `ispublic` es `true`, la clase de expresión regular compilada tiene accesibilidad pública. Es decir, se pueden crear instancias del código que se ejecuta en cualquier ensamblado. Si `ispublic` es `false`, se proporciona la clase de expresión regular compilada `internal` (en C#) o `Friend` (en Visual Basic) accesibilidad. Es decir, se pueden crear instancias solo desde el código que se ejecuta en el mismo ensamblado que la clase de expresión regular.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea y utiliza una expresión regular compilada en dos pasos.  
  
 En el primer paso, compile y ejecute el siguiente ejemplo de código. El <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> constructor en el ejemplo de código define una expresión regular compilada. El resultado de ejecutar el código es un ensamblado denominado FishRegex.dll que contiene un tipo de expresión regular compilada denominado `FishRegex`.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 En el segundo paso, compile el ejemplo de código siguiente utilizando una referencia a FishRegex.dll y, a continuación, ejecute el archivo ejecutable resultante. El archivo ejecutable coincide con una cadena de destino mediante el uso de la `FishRegex` escriba y muestra la coincidencia, el grupo, el grupo de captura y la posición de índice de las coincidencias en la cadena de destino.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> es <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> es <see langword="null" />.  -o bien- <paramref name="name" /> es <see langword="null" />.  -o bien- <paramref name="fullnamespace" /> es <see langword="null" />.</exception>
        <block subset="none" type="usage">
          <para>Este constructor crea una expresión regular compilada que utiliza el valor de tiempo de espera predeterminado del dominio de aplicación en el que se crea. Si se define un valor de tiempo de espera para el dominio de aplicación, la expresión regular compilada utiliza el valor <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, lo que impide que una operación de coincidencia de patrones de tiempo de espera. El constructor para crear una expresión regular compilada recomendado es <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, que permite establecer el intervalo de tiempo de espera.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">Expresión regular que se va a compilar.</param>
        <param name="options">Opciones de la expresión regular que se van a usar al compilar la expresión regular.</param>
        <param name="name">Nombre del tipo que representa la expresión regular compilada.</param>
        <param name="fullnamespace">Espacio de nombres al que pertenece el nuevo tipo.</param>
        <param name="ispublic">
          <see langword="true" /> para hacer públicamente visible la expresión regular compilada; en caso contrario, <see langword="false" />.</param>
        <param name="matchTimeout">Intervalo de tiempo de espera predeterminado para la expresión regular.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> que contiene información sobre una expresión regular con un valor de tiempo de espera especificado que se va a incluir en un ensamblado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada parámetro de la <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> constructor se corresponde directamente con una propiedad de la <xref:System.Text.RegularExpressions.RegexCompilationInfo> clase. Dado que todas las propiedades son de lectura/escritura, sus valores también se pueden asignar directamente.  
  
 El <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método genera un ensamblado que contiene expresiones regulares compiladas. Por lo tanto, no se debe especificar <xref:System.Text.RegularExpressions.RegexOptions.Compiled> como uno de los valores de `options`.  
  
 Si `ispublic` es `true`, la clase de expresión regular compilada tiene accesibilidad pública. Es decir, se pueden crear instancias del código que se ejecuta en cualquier ensamblado. Si `ispublic` es `false`, se proporciona la clase de expresión regular compilada `internal` (en C#) o `Friend` (en Visual Basic) accesibilidad. Es decir, se pueden crear instancias solo desde el código que se ejecuta en el mismo ensamblado que la clase de expresión regular.  
  
 El `matchTimeout` parámetro define el intervalo de tiempo de espera predeterminado para la expresión regular compilada. Este valor representa la cantidad aproximada de tiempo que un objeto de expresión regular compilada ejecutará una única operación coincidente antes de que el tiempo de espera de la operación y el motor de expresiones regulares produce una <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> excepción durante su próxima comprobación de tiempo . Para obtener información adicional sobre el valor de tiempo de espera, vea el <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> propiedad.  
  
> [!IMPORTANT]
>  Se recomienda establecer siempre un valor de tiempo de espera predeterminado para una expresión regular compilada. Los consumidores de la biblioteca de expresiones regulares pueden reemplazar este valor de tiempo de espera si se pasa un <xref:System.TimeSpan> valor que representa el nuevo intervalo de tiempo de espera para esta sobrecarga del constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una expresión regular compilada única denominada `DuplicateChars` que identifica dos o más apariciones del mismo carácter en una cadena de entrada. La expresión regular compilada tiene un tiempo de espera predeterminado de 2 segundos. Cuando se ejecuta el ejemplo, crea una biblioteca de clases denominada RegexLib.dll que contiene la expresión regular compilada.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 El patrón de expresión regular `(\w)\1+` se define como se muestra en la tabla siguiente.  
  
|Modelo|Descripción|  
|-------------|-----------------|  
|`(\w)`|Coincide con cualquier carácter de palabra y asignarla al primer grupo de captura.|  
|`\1+`|Buscar coincidencias con uno o más apariciones del valor del primer grupo capturado.|  
  
 En el ejemplo siguiente se usa el `DuplicatedChars` expresión regular para identificar duplicados caracteres en una matriz de cadenas. Cuando llama el `DuplicatedChars` constructor, cambia el intervalo de tiempo de espera a 0,5 segundos.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> es <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> es <see langword="null" />.  -o bien- <paramref name="name" /> es <see langword="null" />.  -o bien- <paramref name="fullnamespace" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la expresión regular compilada tiene visibilidad pública.</summary>
        <value>
          <see langword="true" /> si la expresión regular tiene visibilidad pública; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> propiedad es `false`, se puede crear instancias de la clase de expresión regular definida por la instancia actual de código que se está ejecutando en el ensamblado que contiene la clase. Sin embargo, dado que la <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> método genera un ensamblado que contiene solo las expresiones regulares compiladas y no permite agregar código adicional, por lo general no hay ninguna razón para asignar esta propiedad en un valor de `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el intervalo de tiempo de espera predeterminado de la expresión regular.</summary>
        <value>Intervalo de tiempo máximo predeterminado que puede transcurrir en una operación de coincidencia de modelos antes de que se produzca una <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> si se deshabilitan los tiempos de espera.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> propiedad define el intervalo de tiempo de espera predeterminado para la expresión regular compilada. Este valor representa la cantidad aproximada de tiempo que una expresión regular compilada ejecutará una única operación coincidente antes de que el tiempo de espera de la operación y el motor de expresiones regulares produce una <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> excepción durante su próxima comprobación de control de tiempo.  
  
> [!IMPORTANT]
>  Se recomienda establecer siempre un valor de tiempo de espera predeterminado para una expresión regular compilada. Los consumidores de la biblioteca de expresiones regulares pueden reemplazar este valor de tiempo de espera si se pasa un <xref:System.TimeSpan> valor que representa el nuevo intervalo de tiempo de espera al constructor de clase de la expresión regular compilada.  
  
 Puede asignar un valor de tiempo de espera predeterminado para un <xref:System.Text.RegularExpressions.RegexCompilationInfo> objeto en cualquiera de las maneras siguientes:  
  
-   Mediante una llamada a la <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> método y proporcionar la representación de cadena de un <xref:System.TimeSpan> valor para la propiedad "REGEX_DEFAULT_MATCH_TIMEOUT".  
  
-   Mediante una llamada a la <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> constructor y se proporciona un valor para el `matchTimeout` parámetro.  
  
-   Al establecer el valor de esta propiedad.  
  
 Para establecer un intervalo de tiempo de espera razonable, tenga en cuenta los siguientes factores:  
  
-   La longitud y complejidad del patrón de expresión regular. Las expresiones regulares más largas y complejas requieren más tiempo que las más cortas y más sencillas.  
  
-   La carga esperado de la máquina. El proceso tarda más tiempo en sistemas con una utilización elevada de CPU y memoria.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una expresión regular compilada única denominada `DuplicateChars` que identifica dos o más apariciones del mismo carácter en una cadena de entrada. La expresión regular compilada tiene un tiempo de espera predeterminado de 2 segundos. Cuando se ejecuta el ejemplo, crea una biblioteca de clases denominada RegexLib.dll que contiene la expresión regular compilada.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 El patrón de expresión regular `(\w)\1+` se define como se muestra en la tabla siguiente.  
  
|Modelo|Descripción|  
|-------------|-----------------|  
|`(\w)`|Coincide con cualquier carácter de palabra y asignarla al primer grupo de captura.|  
|`\1+`|Buscar coincidencias con uno o más apariciones del valor del primer grupo capturado.|  
  
 En el ejemplo siguiente se usa el `DuplicatedChars` expresión regular para identificar duplicados caracteres en una matriz de cadenas. Cuando llama el `DuplicatedChars` constructor, cambia el intervalo de tiempo de espera a 0,5 segundos.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del tipo que representa la expresión regular compilada.</summary>
        <value>Nombre del nuevo tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Text.RegularExpressions.RegexCompilationInfo> clase se utiliza para definir una expresión regular compilada, que se representa como una clase derivada de <xref:System.Text.RegularExpressions.Regex>. El <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> propiedad define el nombre de clase del tipo de expresión regular y el <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> y <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> propiedades juntas definen su nombre completo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de esta propiedad es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El valor de esta propiedad es una cadena vacía.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el espacio de nombres al que pertenece el nuevo tipo.</summary>
        <value>Espacio de nombres del nuevo tipo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Text.RegularExpressions.RegexCompilationInfo> clase se utiliza para definir una expresión regular compilada, que se representa como una clase derivada de <xref:System.Text.RegularExpressions.Regex>. El <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> propiedad define el espacio de nombres que contiene el tipo de expresión regular compilada y <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> y <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> propiedades juntas definen su nombre completo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de esta propiedad es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las opciones que se van a usar al compilar la expresión regular.</summary>
        <value>Combinación bit a bit de los valores de la enumeración.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método genera un ensamblado que contiene expresiones regulares compiladas. Por lo tanto, no es necesario especificar <xref:System.Text.RegularExpressions.RegexOptions.Compiled> como uno de los valores de esta propiedad. Si está presente, el <xref:System.Text.RegularExpressions.RegexOptions.Compiled> se omite.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la expresión regular que se va a compilar.</summary>
        <value>Expresión regular que se va a compilar.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> propiedad puede contener cualquier expresión regular válida. Si el valor de la <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> propiedad no es un patrón de expresión regular sintácticamente correcto, la llamada a la <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> método produce un <xref:System.ArgumentException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de esta propiedad es <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>