<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b8c6622a46ed260faf6d20df76bc89b8d28ce112" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37609802" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa los resultados de una única captura de subexpresiones correcta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Text.RegularExpressions.Capture> objeto es inmutable y no tiene ningún constructor público. Las instancias se devuelven a través de la <xref:System.Text.RegularExpressions.CaptureCollection> objeto, que es devuelto por la `Match.Captures` y <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> propiedades. Sin embargo, el `Match.Captures` propiedad proporciona información sobre la misma coincidencia que la <xref:System.Text.RegularExpressions.Match> objeto.  
  
 Si no se aplican una a un grupo de captura, el <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> propiedad devuelve un <xref:System.Text.RegularExpressions.CaptureCollection> con una sola <xref:System.Text.RegularExpressions.Capture> objeto que proporciona información sobre la misma captura que el <xref:System.Text.RegularExpressions.Group> objeto. Si se aplica un cuantificador a un grupo de captura, el `Group.Index`, `Group.Length`, y `Group.Value` propiedades proporcionan información sobre el último grupo capturado, mientras que el <xref:System.Text.RegularExpressions.Capture> objetos en el <xref:System.Text.RegularExpressions.CaptureCollection> proporcionan información acerca de todos captura la subexpresión. En este ejemplo se ilustra.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una expresión regular que coincida con frases que no contengan ninguna puntuación salvo un punto (".").  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 El patrón de expresión regular `((\w+)[\s.])+` se define como se muestra en la tabla siguiente. Tenga en cuenta que en esta expresión regular, se aplica un cuantificador (+) a la expresión regular completa.  
  
|Modelo|Descripción|  
|-------------|-----------------|  
|`(\w+)`|Buscar coincidencias con uno o más caracteres alfabéticos. Este es el segundo grupo de captura.|  
|`[\s.])`|Coincide con un carácter de espacio en blanco o punto (".").|  
|`((\w+)[\s.])`|Coincide con uno o más caracteres de palabra seguidos de un carácter de espacio en blanco o punto ("."). Este es el primer grupo de captura.|  
|`((\w+)[\s.])+`|Coincide con uno o más apariciones de un carácter de palabra o caracteres seguidos de un carácter de espacio en blanco o punto (".").|  
  
 En este ejemplo, la cadena de entrada consta de dos oraciones. Como se muestra en la salida, la primera frase consta de sólo una palabra, por lo que la <xref:System.Text.RegularExpressions.CaptureCollection> objeto tiene una sola <xref:System.Text.RegularExpressions.Capture> objeto que representa la misma captura que el <xref:System.Text.RegularExpressions.Group> objeto. La segunda oración está formado por varias palabras, por lo que el <xref:System.Text.RegularExpressions.Group> objetos sólo contienen información sobre la última subexpresión coincidente. Grupo 1, que representa la primera captura, contiene la última palabra de la oración que tiene un período de cierre. Grupo 2, que representa la segunda captura, contiene la última palabra de la oración. Sin embargo, el <xref:System.Text.RegularExpressions.Capture> objetos en el grupo <xref:System.Text.RegularExpressions.CaptureCollection> objeto capturar cada coincidencia de subexpresión. El <xref:System.Text.RegularExpressions.Capture> objetos de colección de la captura del primer grupo de capturas contienen información sobre cada palabra capturada y un carácter de espacio en blanco o un punto. El <xref:System.Text.RegularExpressions.Capture> objetos de colección de la captura del segundo grupo de capturas contienen información sobre cada palabra capturada.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Posición en la cadena original donde se encuentra el primer carácter de la subcadena capturada.</summary>
        <value>Posición inicial basada en cero en la cadena original donde se encuentra la subcadena capturada.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la longitud de la subcadena capturada.</summary>
        <value>Longitud de la subcadena capturada.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera la subcadena capturada de la cadena de entrada llamando a la propiedad <see cref="P:System.Text.RegularExpressions.Capture.Value" />.</summary>
        <returns>Subcadena capturada por la coincidencia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString` es realmente una llamada interna a la <xref:System.Text.RegularExpressions.Capture.Value%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la subcadena capturada desde la cadena de entrada.</summary>
        <value>Subcadena capturada por la coincidencia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una llamada a la <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> o <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> no se puede encontrar una coincidencia, el valor devuelto del método `Match.Value` propiedad es <xref:System.String.Empty?displayProperty=nameWithType>. Si el motor de expresiones regulares no puede coincidir con un grupo de captura. el valor devuelto del `Group.Value` propiedad es <xref:System.String.Empty?displayProperty=nameWithType>. Vea el segundo ejemplo para ver una ilustración.  
  
   
  
## Examples  
 En el ejemplo siguiente se define una expresión regular que coincida con frases que no contengan ninguna puntuación salvo un punto ("."). El `Match.Value` propiedad muestra la cadena de resultado que consta de una frase coincidente, para cada coincidencia. El `Group.Value` propiedad muestra la cadena de resultado para cada grupo de captura; consta de la última cadena capturada por este grupo de captura. El <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType> propiedad muestra la cadena de resultado para cada captura.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 El patrón de expresión regular `((\w+)[\s.])+` se define como se muestra en la tabla siguiente. Tenga en cuenta que en esta expresión regular, se aplica un cuantificador (+) a la expresión regular completa.  
  
|Modelo|Descripción|  
|-------------|-----------------|  
|`(\w+)`|Buscar coincidencias con uno o más caracteres alfabéticos. Este es el segundo grupo de captura.|  
|`[\s.])`|Coincide con un carácter de espacio en blanco o punto (".").|  
|`((\w+)[\s.])`|Coincide con uno o más caracteres de palabra seguidos de un carácter de espacio en blanco o punto ("."). Este es el primer grupo de captura.|  
|`((\w+)[\s.])+`|Coincide con uno o más apariciones de un carácter de palabra o caracteres seguidos de un carácter de espacio en blanco o punto (".").|  
  
 En este ejemplo, la cadena de entrada consta de dos oraciones. Como se muestra en la salida, la primera frase consta de sólo una palabra, por lo que la <xref:System.Text.RegularExpressions.CaptureCollection> objeto tiene una sola <xref:System.Text.RegularExpressions.Capture> objeto que representa la misma captura que el <xref:System.Text.RegularExpressions.Group> objeto. La segunda oración está formado por varias palabras, por lo que el <xref:System.Text.RegularExpressions.Group> objetos sólo contienen información sobre la última subexpresión coincidente. Grupo 1, que representa la primera captura, contiene la última palabra de la oración que tiene un período de cierre. Grupo 2, que representa la segunda captura, contiene la última palabra de la oración. Sin embargo, el <xref:System.Text.RegularExpressions.Capture> objetos en el grupo <xref:System.Text.RegularExpressions.CaptureCollection> objeto capturar cada coincidencia de subexpresión. El <xref:System.Text.RegularExpressions.Capture> objetos de colección de la captura del primer grupo de capturas contienen información sobre cada palabra capturada y un carácter de espacio en blanco o un punto. El <xref:System.Text.RegularExpressions.Capture> objetos de colección de la captura del segundo grupo de capturas contienen información sobre cada palabra capturada.  
  
 En el ejemplo siguiente se usa un patrón de expresión regular, `^([a-z]+)(\d+)*\.([a-z]+(\d)*)$`, para que coincida con un número de producto que consta de dos partes separadas por un período. Ambas partes constan de caracteres alfabéticos seguidos por números opcionales. Dado que la primera cadena de entrada no coincide con el patrón, el valor devuelto del <xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType> del objeto `Value` propiedad es <xref:System.String.Empty?displayProperty=nameWithType>. De forma similar, cuando el patrón de expresión regular no puede coincidir con un grupo de captura, el valor de la correspondiente <xref:System.Text.RegularExpressions.Group> del objeto `Value` propiedad es <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  
  
 El patrón de expresión regular se define como se muestra en la tabla siguiente:  
  
|Modelo|Descripción|  
|-------------|-----------------|  
|`^`|Empieza la búsqueda de coincidencias en el principio de la cadena.|  
|`([a-z]+)`|Coincide con uno o más apariciones de cualquier carácter de una a la z. Dado que el motor de expresiones regulares se pasa el <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> opción, esta comparación no distingue entre mayúsculas y minúsculas. Este es el primer grupo de captura.|  
|`(\d+)?`|Coincide con cero o una aparición de uno o más dígitos decimales. Este es el segundo grupo de captura.|  
|`\.`|Coincide con un carácter de punto literal.|  
|`([a-z]+`|Coincide con uno o más apariciones de cualquier carácter de una a la z. En la comparación no se distingue entre mayúsculas y minúsculas.|  
|`(\d)*`|Busca cero o más dígitos decimales. Un único dígito coincidente es el cuarto grupo de captura.|  
|`([a-z]+(\d)*)`|Coincide con uno o más caracteres alfabéticos de una a la z, seguido de cero, uno o más dígitos decimales. Este es el cuarto grupo de captura.|  
|`$`|Concluir a la coincidencia al final de la cadena.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>