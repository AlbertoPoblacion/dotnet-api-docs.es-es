<Type Name="Match" FullName="System.Text.RegularExpressions.Match">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13c607dda098b110d0be299d25ccb90fb25acd31" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48732550" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Match : System.Text.RegularExpressions.Group" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Match extends System.Text.RegularExpressions.Group" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Match" />
  <TypeSignature Language="VB.NET" Value="Public Class Match&#xA;Inherits Group" />
  <TypeSignature Language="C++ CLI" Value="public ref class Match : System::Text::RegularExpressions::Group" />
  <TypeSignature Language="F#" Value="type Match = class&#xA;    inherit Group" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.RegularExpressions.Group</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa los resultados de una sola coincidencia de expresión regular.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Text.RegularExpressions.Match> objeto es inmutable y no tiene ningún constructor público. Una instancia de la <xref:System.Text.RegularExpressions.Match> clase es devuelta por la <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> método y representa el primer patrón coinciden en una cadena. Las coincidencias subsiguientes se representan mediante <xref:System.Text.RegularExpressions.Match> los objetos devueltos por la <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> método. Además, un <xref:System.Text.RegularExpressions.MatchCollection> objeto que consta de cero, uno o más <xref:System.Text.RegularExpressions.Match> objetos devuelto por la <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> método.  
  
 Si el <xref:System.Text.RegularExpressions.Regex.Matches%2A?displayProperty=nameWithType> método no coincide con un patrón de expresión regular en una cadena de entrada, devuelve un valor vacío <xref:System.Text.RegularExpressions.MatchCollection> objeto. A continuación, puede usar un `foreach` construcción en C# o un `For Each` construir en Visual Basic para recorrer en iteración la colección.  
  
 Si el <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> método no coincide con el patrón de expresión regular, devuelve un <xref:System.Text.RegularExpressions.Match> objeto que es igual a <xref:System.Text.RegularExpressions.Match.Empty%2A?displayProperty=nameWithType>. Puede usar el <xref:System.Text.RegularExpressions.Group.Success%2A> propiedad para determinar si la coincidencia se realizó correctamente. Esto se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match1.vb#1)]  
  
 Si una coincidencia de patrones se realiza correctamente, el <xref:System.Text.RegularExpressions.Capture.Value%2A> propiedad contiene la subcadena coincidente, el <xref:System.Text.RegularExpressions.Capture.Index%2A> propiedad indica la posición inicial de base cero de la subcadena coincidente en la cadena de entrada y el <xref:System.Text.RegularExpressions.Capture.Length%2A> propiedad indica el longitud de la subcadena coincidente en la cadena de entrada.  
  
 Dado que una coincidencia única puede implicar varios grupos de captura, <xref:System.Text.RegularExpressions.Match> tiene un <xref:System.Text.RegularExpressions.Match.Groups%2A> propiedad que devuelve el <xref:System.Text.RegularExpressions.GroupCollection>. El <xref:System.Text.RegularExpressions.Match> propia instancia es equivalente al primer objeto de la colección, en `Match.Groups[0]` (`Match.Groups(0)` en Visual Basic), que representa la coincidencia completa. Puede tener acceso a los grupos capturados en una coincidencia de las maneras siguientes:  
  
-   Puede recorrer en iteración los miembros de la <xref:System.Text.RegularExpressions.GroupCollection> objeto utilizando un `foreach` (C#) o `For Each` construcción (Visual Basic).  
  
-   Puede usar el <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.Int32%29?displayProperty=nameWithType> propiedad para recuperar grupos por el número del grupo de captura. Tenga en cuenta que puede determinar qué grupos numerados están presentes en una expresión regular por una llamada a la instancia <xref:System.Text.RegularExpressions.Regex.GetGroupNumbers%2A?displayProperty=nameWithType> método.  
  
-   Puede usar el <xref:System.Text.RegularExpressions.GroupCollection.Item%28System.String%29?displayProperty=nameWithType> propiedad para recuperar grupos con el nombre del grupo de captura. Tenga en cuenta que puede determinar qué grupos con nombre están presentes en una expresión regular por una llamada a la instancia <xref:System.Text.RegularExpressions.Regex.GetGroupNames?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 Los ejemplos siguientes usan la expresión regular `Console\.Write(Line)?`. La expresión regular se interpreta como sigue:  
  
|||  
|-|-|  
|Consola\\. Escritura|Coincide con la cadena "Console.Write". Tenga en cuenta que el "." carácter de escape para que se interpreta como un punto literal en lugar de como carácter comodín que coincide con cualquier carácter.|  
|¿(Línea)?|Coincide con cero o una repetición de la cadena "Line".|  
  
 **Ejemplo 1**  
  
 El ejemplo siguiente se llama el <xref:System.Text.RegularExpressions.Regex.Matches%28System.String%2CSystem.String%29?displayProperty=nameWithType> método para recuperar todas las coincidencias de patrón en una cadena de entrada. A continuación, repite la <xref:System.Text.RegularExpressions.Match> objetos en el valor devuelto <xref:System.Text.RegularExpressions.MatchCollection> objeto para mostrar información sobre cada coincidencia.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match2.cs#2)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match2.vb#2)]  
  
 **Ejemplo 2**  
  
 El ejemplo siguiente se llama el <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.String%29> y <xref:System.Text.RegularExpressions.Match.NextMatch%2A> métodos para recuperar una coincidencia a la vez.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/cs/Match3.cs#3)]
 [!code-vb[System.Text.RegularExpressions.Match.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.RegularExpressions.Match.Class/vb/Match3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.MatchCollection" />
    <altmember cref="T:System.Text.RegularExpressions.Regex" />
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.RegularExpressions.Match Empty" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::RegularExpressions::Match ^ Empty { System::Text::RegularExpressions::Match ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el grupo vacío. Todas las coincidencias erróneas devuelven esta coincidencia vacía.</summary>
        <value>Coincidencia vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad no debe usarse para determinar si una coincidencia es correcta. En su lugar, use el `Match.Success` propiedad (que se hereda de <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public virtual System.Text.RegularExpressions.GroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.RegularExpressions.GroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Match.Groups" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Groups As GroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Text::RegularExpressions::GroupCollection ^ Groups { System::Text::RegularExpressions::GroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Text.RegularExpressions.GroupCollection" Usage="System.Text.RegularExpressions.Match.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.GroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de grupos que coinciden con la expresión regular.</summary>
        <value>Los grupos de carácter coinciden con el patrón.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un patrón de expresión regular puede incluir subexpresiones, que se definen, incluya una parte del patrón de expresión regular entre paréntesis. Cada subexpresión de este tipo forma un grupo. El <xref:System.Text.RegularExpressions.Match.Groups%2A> propiedad proporciona acceso a información sobre las coincidencias de subexpresiones. Por ejemplo, el patrón de expresión regular `(\d{3})-(\d{3}-\d{4})`, que coincide con los números de teléfono de América del Norte, tiene dos subexpresiones. El primero está formado por el código de área, que crea los tres primeros dígitos del número de teléfono. Este grupo capturado por la primera parte de la expresión regular, `(\d{3})`. El segundo está compuesto por el número de teléfono individuales que crea los siete últimos dígitos del número de teléfono. Este grupo capturado por la segunda parte de la expresión regular, `(\d{3}-\d{4})`. Estos dos grupos, a continuación, se pueden recuperar desde el <xref:System.Text.RegularExpressions.GroupCollection> objeto devuelto por la <xref:System.Text.RegularExpressions.Match.Groups%2A> propiedad, como se muestra en el ejemplo siguiente.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/cs/groups1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.groups/vb/groups1.vb#1)]  
  
 El <xref:System.Text.RegularExpressions.GroupCollection> objeto devuelto por la <xref:System.Text.RegularExpressions.Match.Groups%2A?displayProperty=nameWithType> propiedad es un objeto de colección basada en cero que siempre tiene al menos un miembro. Si el motor de expresiones regulares no encuentra ninguna coincidencia en una cadena de entrada determinada, el <xref:System.Text.RegularExpressions.Group.Success%2A?displayProperty=nameWithType> propiedad de la única <xref:System.Text.RegularExpressions.Group> objeto en la colección (el objeto en el índice 0) se establece en `false` y <xref:System.Text.RegularExpressions.Group> objeto <xref:System.Text.RegularExpressions.Capture.Value%2A>propiedad está establecida en <xref:System.String.Empty?displayProperty=nameWithType>. Si el motor de expresiones regulares puede encontrar una coincidencia, el primer elemento de la <xref:System.Text.RegularExpressions.GroupCollection> objeto (el elemento en el índice 0) devuelto por la <xref:System.Text.RegularExpressions.Match.Groups%2A> propiedad contiene una cadena que coincide con el patrón de expresión regular completa. Cada elemento subsiguiente, desde el índice uno hacia arriba, representa un grupo capturado, si la expresión regular incluye grupos de captura. Para obtener más información, vea la sección "Agrupación construye y Regular Expression Objects" de la [construcciones de agrupamiento](~/docs/standard/base-types/grouping-constructs-in-regular-expressions.md) artículo.  
  
   
  
## Examples  
 El ejemplo siguiente se intenta hacer coincidir un patrón de expresión regular con una cadena de ejemplo. El ejemplo se usa el <xref:System.Text.RegularExpressions.Match.Groups%2A> propiedad para almacenar información que se recupera mediante la coincidencia para su presentación en la consola.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMatch">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.Match NextMatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.RegularExpressions.Match NextMatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.NextMatch" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMatch () As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::RegularExpressions::Match ^ NextMatch();" />
      <MemberSignature Language="F#" Value="member this.NextMatch : unit -&gt; System.Text.RegularExpressions.Match" Usage="match.NextMatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un nuevo objeto <see cref="T:System.Text.RegularExpressions.Match" /> con los resultados de la siguiente coincidencia, empezando en la posición donde finalizó la última (en el carácter siguiente al último que coincidía).</summary>
        <returns>Siguiente coincidencia de expresión regular.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es similar a llamar a <xref:System.Text.RegularExpressions.Regex.Match%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> nuevamente y pasar (`Index+Length`) como la nueva posición inicial.  
  
> [!NOTE]
>  Este método no modifica la instancia actual. En su lugar, devuelve un nuevo <xref:System.Text.RegularExpressions.Match> objeto que contiene información acerca de la siguiente coincidencia.  
  
 Intenta recuperar la siguiente coincidencia puede producir un <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> si un valor de tiempo de espera para las operaciones coincidentes está en vigor y tratar de buscar la siguiente coincidencia excede ese intervalo de tiempo de espera.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Text.RegularExpressions.Match.NextMatch%2A> método para capturar la expresión regular coincide con más allá de la primera coincidencia.  
  
 [!code-cpp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/cpp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cpp/snippet8.cpp#8)]
 [!code-csharp[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/csharp/VS_Snippets_CLR/regex match, nextmatch, groups, captures/cs/snippet8.cs#8)]
 [!code-vb[Regex Match, NextMatch, Groups, Captures#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/regex match, nextmatch, groups, captures/vb/snippet8.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera.</exception>
        <block subset="none" type="usage">
          <para>Cuando un intento de coincidencia que se repite mediante una llamada a la <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> método, el motor de expresiones regulares otorga coincidencias vacías un tratamiento especial. Por lo general, <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> comienza la búsqueda de la siguiente coincidencia, la coincidencia anterior exactamente. Sin embargo, tras una coincidencia vacía, el <see cref="M:System.Text.RegularExpressions.Match.NextMatch" /> método avanza un carácter antes de intentar la siguiente coincidencia. Este comportamiento garantiza que el motor de expresiones regulares progresan a través de la cadena. En caso contrario, dado que una coincidencia vacía no produce ningún movimiento hacia delante, empezaría la siguiente coincidencia de exactamente el mismo lugar que la coincidencia anterior y coincidiría con repetidamente la misma cadena vacía.  
  
Esto se muestra en el ejemplo siguiente. El patrón de expresión regular <c>un *</c> Busca cero o más apariciones de la letra "a" en la cadena "abaabb". Como se muestra el resultado del ejemplo, la búsqueda encuentra a seis coincidencias. El primer intento de coincidencia busca el primer "a". La segunda búsqueda se inicia exactamente donde el primero coincide con extremos, antes de la primera b; Busca cero repeticiones de "a" y devuelve una cadena vacía. La coincidencia terceros no empieza exactamente donde terminó la segunda coincidencia, porque la segunda coincidencia devolvió una cadena vacía. En su lugar, inicia un carácter más adelante, después de la primera "b". La tercera coincidencia busca dos apariciones de "a" y devuelve "aa". El cuarto intento de coincidencia comienza donde finalizó la coincidencia terceros, antes de la segunda "b" y devuelve una cadena vacía. El quinto intento de coincidencia nuevo avanza un carácter para que se inicia antes de que el tercer "b" y devuelve una cadena vacía. El sexta coincidencia comienza después de la última "b" y devuelve una cadena vacía de nuevo.  
  
[! código csharp[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/cs/nextmatch1.cs#1)] [! código vb[System.Text.RegularExpressions.Match.NextMatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.nextmatch/vb/nextmatch1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual string Result (string replacement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Result(string replacement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Result(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Result (replacement As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Result(System::String ^ replacement);" />
      <MemberSignature Language="F#" Value="abstract member Result : string -&gt; string&#xA;override this.Result : string -&gt; string" Usage="match.Result replacement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replacement" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="replacement">Patrón de reemplazo que se va a utilizar.</param>
        <summary>Devuelve la expansión del patrón de reemplazo especificado.</summary>
        <returns>Versión expandida del parámetro <paramref name="replacement" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mientras que la <xref:System.Text.RegularExpressions.Regex.Replace%2A?displayProperty=nameWithType> método reemplaza todas las coincidencias en una cadena de entrada con un patrón de reemplazo especificado, el <xref:System.Text.RegularExpressions.Match.Result%2A> método reemplaza una coincidencia única con un patrón de reemplazo especificada. Ya que funciona en una coincidencia individual, también es posible realizar el procesamiento en la cadena coincidente antes de llamar a la <xref:System.Text.RegularExpressions.Match.Result%2A> método.  
  
 El `replacement` parámetro es un patrón de reemplazo de expresión regular estándar. Puede constar de caracteres literales y las sustituciones de expresión regular. Para más información, consulte [Sustituciones](~/docs/standard/base-types/substitutions-in-regular-expressions.md).  
  
   
  
## Examples  
 El siguiente ejemplo reemplaza los guiones que comienzan y terminan en una expresión entre paréntesis con paréntesis.  
  
 [!code-csharp[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/cs/result1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Match.Result#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.match.result/vb/result1.vb#1)]  
  
 El patrón de la expresión regular `--(.+?)--` se interpreta como se muestra en la tabla siguiente.  
  
|Modelo|Descripción|  
|-------------|-----------------|  
|`--`|Coincide con dos guiones.|  
|`(.+?)`|Coincide con cualquier carácter una o varias veces, pero el menor número de veces que sea posible. Este es el primer grupo de captura.|  
|`--`|Coincide con dos guiones.|  
  
 Tenga en cuenta que el patrón de expresión regular `--(.+?)--` usa el cuantificador diferido `+?`. Si el cuantificador expansivo `+` se usaron en su lugar, el motor de expresiones regulares encontraría solo una coincidencia única en la cadena de entrada.  
  
 La cadena de reemplazo `($1)` reemplaza la coincidencia con el primer grupo capturado se encierra entre paréntesis.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="replacement" /> es <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">No se permite la expansión para este modelo.</exception>
        <altmember cref="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)" />
        <related type="Article" href="http://msdn.microsoft.com/library/d1f52431-1c7d-4dc6-8792-6b988256892e">Sustituciones</related>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Text.RegularExpressions.Match Synchronized (System.Text.RegularExpressions.Match inner);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Text.RegularExpressions.Match Synchronized(class System.Text.RegularExpressions.Match inner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (inner As Match) As Match" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Text::RegularExpressions::Match ^ Synchronized(System::Text::RegularExpressions::Match ^ inner);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Text.RegularExpressions.Match -&gt; System.Text.RegularExpressions.Match" Usage="System.Text.RegularExpressions.Match.Synchronized inner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.Match</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inner" Type="System.Text.RegularExpressions.Match" />
      </Parameters>
      <Docs>
        <param name="inner">Coincidencia de expresión regular equivalente a la esperada.</param>
        <summary>Devuelve una instancia de <see cref="T:System.Text.RegularExpressions.Match" /> equivalente a la suministrada que es adecuada para compartirse entre varios subprocesos.</summary>
        <returns>Coincidencia de expresión regular que se puede compartir entre varios subprocesos.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inner" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>