<Type Name="VirtualPathProvider" FullName="System.Web.Hosting.VirtualPathProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="27e266af779c9e51c80127f68edf282203c88fdc" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39787734" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class VirtualPathProvider : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualPathProvider extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualPathProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualPathProvider&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualPathProvider abstract : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type VirtualPathProvider = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona un conjunto de métodos que permiten a una aplicación Web recuperar los recursos de un sistema de archivos virtual.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Hosting.VirtualPathProvider> clase proporciona un conjunto de métodos para implementar un sistema de archivos virtual para una aplicación Web. En un sistema de archivos virtual, un almacén de datos que no sea el sistema de archivos proporcionado por el sistema operativo del servidor administra los archivos y directorios. Por ejemplo, puede usar un sistema de archivos virtual para almacenar contenido en una base de datos de SQL Server.  
  
 Puede almacenar cualquier archivo que se procesa en la solicitud en un sistema de archivos virtual. Esto incluye:  
  
-   Las páginas ASP.NET, las páginas maestras, controles de usuario y otros objetos.  
  
-   Páginas Web estándar con extensiones como .htm y jpg.  
  
-   Cualquier extensión personalizada asignada a un <xref:System.Web.Compilation.BuildProvider> instancia.  
  
-   Cualquier tema con nombre en el `App_Theme` carpeta.  
  
 No se puede almacenar las carpetas de aplicación de ASP.NET o archivos que generan los ensamblados de nivel de aplicación en un sistema de archivos virtual. Esto incluye:  
  
-   El archivo Global.asax.  
  
-   Archivos Web.config.  
  
-   Usa archivos de datos de mapa del sitio el <xref:System.Web.XmlSiteMapProvider>.  
  
-   Directorios que contienen los ensamblados de aplicación o que generan los ensamblados de aplicación: `Bin`, `App_Code`, `App_GlobalResources`, cualquier `App_LocalResources`.  
  
-   La carpeta de datos de aplicación, `App_Data`.  
  
> [!NOTE]
>  Si un sitio Web se precompila para la implementación, el contenido proporcionado por un <xref:System.Web.Hosting.VirtualPathProvider> instancia no se compila y no <xref:System.Web.Hosting.VirtualPathProvider> las instancias se utilizan el sitio precompilado.  
  
## <a name="registering-a-virtualpathprovider"></a>Registrar un VirtualPathProvider  
 Personalizada <xref:System.Web.Hosting.VirtualPathProvider> instancia se debe registrar con el sistema de compilación de ASP.NET mediante el uso de la <xref:System.Web.Hosting.HostingEnvironment.RegisterVirtualPathProvider%2A?displayProperty=nameWithType> método antes de realiza cualquier análisis de la página o la compilación por la aplicación Web.  
  
 Normalmente, un <xref:System.Web.Hosting.VirtualPathProvider> instancia está registrada en un `AppInitialize` método definido en el `App_Code` directorio, o durante la `Application_Start` eventos en el `Global.asax` archivo. Para obtener un ejemplo de registrar un <xref:System.Web.Hosting.VirtualPathProvider> de instancia en un `AppInitialize` método, vea la sección ejemplo.  
  
 Puede registrar un <xref:System.Web.Hosting.VirtualPathProvider> instancia durante otros eventos, pero las páginas se compilan y se almacenan en caché antes el <xref:System.Web.Hosting.VirtualPathProvider> se registra la instancia no se invalidarán, incluso si el nuevo <xref:System.Web.Hosting.VirtualPathProvider> instancia ahora proporcionaría el origen de la previamente página compilada.  
  
   
  
## Examples  
 El ejemplo de código siguiente es un <xref:System.Web.Hosting.VirtualPathProvider> implementación de la clase que crea un sistema de archivos virtual usando la información almacenada en un <xref:System.Data.DataSet> objeto. El ejemplo de código funciona con los ejemplos de código para el <xref:System.Web.Hosting.VirtualFile> y <xref:System.Web.Hosting.VirtualDirectory> las clases para proporcionar recursos virtuales de los datos de un almacén que se cargan en un <xref:System.Data.DataSet> objeto.  
  
 En este ejemplo tiene cuatro partes: el <xref:System.Web.Hosting.VirtualPathProvider> implementación de la clase, un archivo de datos XML usado para rellenar el <xref:System.Data.DataSet> objeto, un `AppStart` objeto que contiene un `AppInitialize` método usado para registrar el <xref:System.Web.Hosting.VirtualPathProvider> clase con la compilación sistema y una página ASP.NET que se proporciona vínculos a los archivos virtuales.  
  
 Para usar este código de ejemplo en una aplicación, siga estos pasos.  
  
1.  Crear una aplicación de ejemplo en el servidor Web.  
  
2.  Copie el código fuente personalizada de <xref:System.Web.Hosting.VirtualPathProvider> objeto (ver abajo) en un archivo en la aplicación `App_Code` directory.  
  
3.  Copie el código fuente personalizada de <xref:System.Web.Hosting.VirtualDirectory> objeto (consulte la sección de ejemplo en el <xref:System.Web.Hosting.VirtualDirectory> tema de información general sobre la clase) en un archivo en la aplicación `App_Code` directory.  
  
4.  Copie el código fuente personalizada de <xref:System.Web.Hosting.VirtualFile> objeto (consulte la sección de ejemplo en el <xref:System.Web.Hosting.VirtualFile> tema de información general sobre la clase) en un archivo en la aplicación `App_Code` directory.  
  
5.  Copie el código fuente para el `AppStart` objeto (ver abajo) en un archivo en la aplicación `App_Code` directory.  
  
6.  Copie los datos XML (ver abajo) en un archivo denominado `XMLData.xml` en un archivo en la aplicación `App_Data` directory.  
  
7.  Copia el `default.aspx` archivo (ver abajo) en el directorio raíz de la aplicación de ejemplo. Use un explorador Web para abrir el `default.aspx` de archivo y, a continuación, haga clic en los vínculos en la página para ver el contenido de los archivos virtuales.  
  
 El primer ejemplo es un personalizado <xref:System.Web.Hosting.VirtualPathProvider> clase. El <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> y <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> invalida los métodos para indicar si un directorio solicitado está presente en el sistema de archivos virtual. El <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> y <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> invalida los métodos para devolver personalizado <xref:System.Web.Hosting.VirtualDirectory> y <xref:System.Web.Hosting.VirtualFile> instancias que contiene información del sistema de archivos virtual.  
  
 La clase también proporciona un `GetVirtualData` método utilizado por el <xref:System.Web.Hosting.VirtualDirectory> y <xref:System.Web.Hosting.VirtualFile> clases para tener acceso a la <xref:System.Data.DataSet> objeto que contiene los datos del sistema de archivos virtual. En una implementación de producción, este método normalmente se implementaría en un objeto de negocios responsable de interactuar con el almacén de datos.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#20](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#20)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#20)]  
  
 El segundo ejemplo es el archivo de datos XML utilizado para rellenar el <xref:System.Data.DataSet> objeto devuelto por personalizado <xref:System.Web.Hosting.VirtualPathProvider> objeto. Estos datos XML se usan para demostrar el uso de la <xref:System.Web.Hosting.VirtualPathProvider>, <xref:System.Web.Hosting.VirtualDirectory>, y <xref:System.Web.Hosting.VirtualFile> objetos para recuperar datos de datos externos y no está pensado para representar un almacén de datos de producción.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
  <resource type="dir"   
    path="/vrDir"   
    parentPath=""   
    content="">  
    <resource type="file"   
      path="/vrDir/Level1FileA.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level1FileB.vrf"  
      parentPath="/vrDir"   
      content="This is the content of file Level1FileB.">  
    </resource>  
    <resource type="dir"   
      path="/vrDir/Level2DirA"   
      parentPath="/vrDir"   
      content="">  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirA/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirA"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
    path="/vrDir/Level2DirB"   
    parentPath="/vrDir"   
    content="">  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileA.vrf"   
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
      path="/vrDir/Level2DirB/Level2FileB.vrf"  
      parentPath="/vrDir/Level2DirB"   
      content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 El tercer ejemplo proporciona un `AppStart` objeto que contiene un `AppInitialize` método. Este método se llama durante la inicialización de una aplicación ASP.NET para realizar cualquier inicialización personalizada necesaria. En este caso, registra personalizado <xref:System.Web.Hosting.VirtualPathProvider> sistema de compilación del objeto con ASP.NET.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#10](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/AppStart.cs#10)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/AppStart.vb#10)]  
  
 El último ejemplo es una página ASP.NET que contiene vínculos a los archivos virtuales contenidos en el sistema de archivos virtual.  
  
 [!code-aspx-csharp[System.Web.Hosting.VirtualPathProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/Default.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.VirtualPathProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/Default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Al heredar de <see cref="T:System.Web.Hosting.VirtualPathProvider" />, debe reemplazar los miembros siguientes:- <see cref="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />   
  
-    <see cref="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" /> si personalizado <see cref="T:System.Web.Hosting.VirtualPathProvider" /> clase es compatible con los directorios del sistema de archivos virtual, debe reemplazar los miembros siguientes.  - <see cref="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />   
  
-    <see cref="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" /><block subset="none" type="note"><para> Si el sistema de archivos virtual contendrá los temas para el sitio Web (mediante la creación de una virtual <c>App_Themes</c> directorio), personalizado <see cref="T:System.Web.Hosting.VirtualPathProvider" /> clase debe ser compatible con los directorios.  </para></block>  Personalizada <see cref="T:System.Web.Hosting.VirtualPathProvider" /> clase funciona con las clases derivadas de la <see cref="T:System.Web.Hosting.VirtualFile" /> y <see cref="T:System.Web.Hosting.VirtualDirectory" /> clases. Debe implementar las clases derivadas de estos tipos para proporcionar información de archivos y directorios desde el sistema de archivos virtual. Para obtener un ejemplo de un personalizado <see cref="T:System.Web.Hosting.VirtualFile" /> implementación, consulte la sección ejemplo de la <see cref="T:System.Web.Hosting.VirtualFile" /> tema de información general sobre la clase. Para obtener un ejemplo de un personalizado <see cref="T:System.Web.Hosting.VirtualDirectory" /> implementación, consulte la sección ejemplo de la <see cref="T:System.Web.Hosting.VirtualDirectory" /> tema de información general sobre la clase.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualPathProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualPathProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa la clase para que la use una instancia de la clase heredada. A este constructor sólo lo puede llamar una clase heredada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se reemplaza el <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> constructor, aplazar cualquier inicialización que debe producirse después de la <xref:System.Web.Hosting.VirtualPathProvider> objeto está registrado en el <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> método.  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualPathProvider.%23ctor%2A> constructor que inicializa un personalizado <xref:System.Web.Hosting.VirtualPathProvider> clase. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> tema de información general sobre la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#25](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#25)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#25](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CombineVirtualPaths">
      <MemberSignature Language="C#" Value="public virtual string CombineVirtualPaths (string basePath, string relativePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CombineVirtualPaths(string basePath, string relativePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CombineVirtualPaths (basePath As String, relativePath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CombineVirtualPaths(System::String ^ basePath, System::String ^ relativePath);" />
      <MemberSignature Language="F#" Value="abstract member CombineVirtualPaths : string * string -&gt; string&#xA;override this.CombineVirtualPaths : string * string -&gt; string" Usage="virtualPathProvider.CombineVirtualPaths (basePath, relativePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePath" Type="System.String" />
        <Parameter Name="relativePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="basePath">La ruta de acceso base para la aplicación.</param>
        <param name="relativePath">La ruta de acceso al recurso virtual, relativa a la ruta de acceso base.</param>
        <summary>Combina una ruta de acceso base con una ruta de acceso relativa para devolver una ruta de acceso completa a un recurso virtual.</summary>
        <returns>Ruta completa a un recurso virtual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths%2A> método para inspeccionar el contenido de una ruta de acceso relativa a un recurso virtual y realizar cualquier modificación necesaria.  
  
 La implementación predeterminada combina el `basePath` y `relativePath` parámetros según el procesamiento de ruta de acceso ASP.NET estándar.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si invalida la implementación predeterminada de la <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> método, se le solicitará que convierta cualquier sintaxis especial con la <paramref name="relativePath" /> parámetro a una ruta de acceso virtual válida. Usted es responsable de la sintaxis de la comprobación de validación de la ruta de acceso y control de entrada con formato incorrecto, así como casos extremos de entrada tiene el formato correcto.  En la mayoría de los casos no será necesario invalidar el predeterminado <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> método. Sin embargo, si tiene que modificar la ruta de acceso, se recomienda que limite su <see cref="M:System.Web.Hosting.VirtualPathProvider.CombineVirtualPaths(System.String,System.String)" /> implementación a la modificación de los tokens específicos de su proveedor de ruta de acceso virtual en el <paramref name="relativeUrl" /> parámetro y, a continuación, llamar a la implementación base para realizar normal Procesamiento de la ruta de acceso ASP.NET</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DirectoryExists">
      <MemberSignature Language="C#" Value="public virtual bool DirectoryExists (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DirectoryExists(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.DirectoryExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DirectoryExists (virtualDir As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DirectoryExists(System::String ^ virtualDir);" />
      <MemberSignature Language="F#" Value="abstract member DirectoryExists : string -&gt; bool&#xA;override this.DirectoryExists : string -&gt; bool" Usage="virtualPathProvider.DirectoryExists virtualDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">Ruta de acceso al directorio virtual.</param>
        <summary>Obtiene un valor que indica si existe un directorio en el sistema de archivos virtual.</summary>
        <returns>
          <see langword="true" /> si el directorio existe en el sistema de archivos virtual; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Invalidar el <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> método para indicar al sistema de compilación que el recurso representado por `virtualDir` existe en el sistema de archivos virtual proporcionado por este <xref:System.Web.Hosting.VirtualPathProvider> instancia.  
  
 Si su custom <xref:System.Web.Hosting.VirtualPathProvider> clase no admite directorios, el <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> método debe devolver `false`.  
  
> [!NOTE]
>  Si el sistema de archivos virtual contendrá los temas para el sitio Web (mediante la creación de una virtual `App_Themes` directorio), personalizado <xref:System.Web.Hosting.VirtualPathProvider> clase debe ser compatible con los directorios.  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualPathProvider.DirectoryExists%2A> método personalizada <xref:System.Web.Hosting.VirtualPathProvider> clase. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> tema de información general sobre la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#22](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#22)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public virtual bool FileExists (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FileExists(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.FileExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FileExists (virtualPath As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool FileExists(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member FileExists : string -&gt; bool&#xA;override this.FileExists : string -&gt; bool" Usage="virtualPathProvider.FileExists virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso al archivo virtual.</param>
        <summary>Obtiene un valor que indica si existe un archivo en el sistema de archivos virtual.</summary>
        <returns>
          <see langword="true" /> si el directorio existe en el sistema de archivos virtual; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Invalidar el <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> método para indicar al sistema de compilación que el recurso representado por `virtualPath` existe en el sistema de archivos virtual proporcionado por este <xref:System.Web.Hosting.VirtualPathProvider> instancia.  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualPathProvider.FileExists%2A> método personalizada <xref:System.Web.Hosting.VirtualPathProvider> clase. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> tema de información general sobre la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#21](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#21)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#21](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheDependency">
      <MemberSignature Language="C#" Value="public virtual System.Web.Caching.CacheDependency GetCacheDependency (string virtualPath, System.Collections.IEnumerable virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Caching.CacheDependency GetCacheDependency(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies, valuetype System.DateTime utcStart) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheDependency(System.String,System.Collections.IEnumerable,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCacheDependency (virtualPath As String, virtualPathDependencies As IEnumerable, utcStart As DateTime) As CacheDependency" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Caching::CacheDependency ^ GetCacheDependency(System::String ^ virtualPath, System::Collections::IEnumerable ^ virtualPathDependencies, DateTime utcStart);" />
      <MemberSignature Language="F#" Value="abstract member GetCacheDependency : string * System.Collections.IEnumerable * DateTime -&gt; System.Web.Caching.CacheDependency&#xA;override this.GetCacheDependency : string * System.Collections.IEnumerable * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="virtualPathProvider.GetCacheDependency (virtualPath, virtualPathDependencies, utcStart)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Caching.CacheDependency</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
        <Parameter Name="utcStart" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso al recurso virtual primario.</param>
        <param name="virtualPathDependencies">Matriz de rutas de acceso a otros recursos que requiere el recurso virtual primario.</param>
        <param name="utcStart">La hora UTC en la que se leyeron los recursos virtuales.</param>
        <summary>Crea una dependencia de caché basada en las rutas de acceso virtuales especificadas.</summary>
        <returns>Objeto <see cref="T:System.Web.Caching.CacheDependency" /> de los recursos virtuales especificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación predeterminada de la <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> devuelve del método `null`. En caché los recursos virtuales para su uso posterior debe invalidar el <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> método o la <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> método.  
  
   
  
## Examples  
 El siguiente ejemplo de código implementa la <xref:System.Web.Hosting.VirtualPathProvider.GetCacheDependency%2A> método para un personalizado <xref:System.Web.Hosting.VirtualPathProvider> clase. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> tema de información general sobre la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#28](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#28)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#28](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheKey">
      <MemberSignature Language="C#" Value="public virtual string GetCacheKey (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCacheKey(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCacheKey (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetCacheKey(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member GetCacheKey : string -&gt; string&#xA;override this.GetCacheKey : string -&gt; string" Usage="virtualPathProvider.GetCacheKey virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso al recurso virtual.</param>
        <summary>Devuelve una clave de caché que se va a utilizar para la ruta de acceso virtual especificada.</summary>
        <returns>Clave de caché para el recurso virtual especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> método para proporcionar una clave de caché personalizada para recursos virtuales. Si no invalida el <xref:System.Web.Hosting.VirtualPathProvider.GetCacheKey%2A> se usa el método, la ruta de acceso virtual para la clave de caché.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Invalidar el valor predeterminado de solo <see cref="M:System.Web.Hosting.VirtualPathProvider.GetCacheKey(System.String)" /> método si crear una clave de caché basada en ruta de acceso virtual no funcionará para su aplicación.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetDirectory">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualDirectory GetDirectory (string virtualDir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualDirectory GetDirectory(string virtualDir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetDirectory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDirectory (virtualDir As String) As VirtualDirectory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Hosting::VirtualDirectory ^ GetDirectory(System::String ^ virtualDir);" />
      <MemberSignature Language="F#" Value="abstract member GetDirectory : string -&gt; System.Web.Hosting.VirtualDirectory&#xA;override this.GetDirectory : string -&gt; System.Web.Hosting.VirtualDirectory" Usage="virtualPathProvider.GetDirectory virtualDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualDirectory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualDir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualDir">Ruta de acceso al directorio virtual.</param>
        <summary>Recibe un directorio virtual del sistema de archivos virtual.</summary>
        <returns>Descendiente de la clase <see cref="T:System.Web.Hosting.VirtualDirectory" /> que representa un directorio del sistema de archivos virtual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> método devuelve un descendiente de la <xref:System.Web.Hosting.VirtualDirectory> clase que contiene los archivos y directorios que se incluyen en el directorio especificado en el `virtualDir` parámetro.  
  
 Si su custom <xref:System.Web.Hosting.VirtualPathProvider> clase no admite directorios, el <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> método debe devolver `null`.  
  
> [!NOTE]
>  Si el sistema de archivos virtual contendrá los temas para el sitio Web (mediante la creación de una virtual `App_Themes` directorio), personalizado <xref:System.Web.Hosting.VirtualPathProvider> clase debe ser compatible con los directorios.  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualPathProvider.GetDirectory%2A> método personalizada <xref:System.Web.Hosting.VirtualPathProvider> clase. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> tema de información general sobre la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#24](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#24)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#24](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFile">
      <MemberSignature Language="C#" Value="public virtual System.Web.Hosting.VirtualFile GetFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.Hosting.VirtualFile GetFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFile (virtualPath As String) As VirtualFile" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Hosting::VirtualFile ^ GetFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="abstract member GetFile : string -&gt; System.Web.Hosting.VirtualFile&#xA;override this.GetFile : string -&gt; System.Web.Hosting.VirtualFile" Usage="virtualPathProvider.GetFile virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso al archivo virtual.</param>
        <summary>Recibe un archivo virtual del sistema de archivos virtual.</summary>
        <returns>Descendiente de la clase <see cref="T:System.Web.Hosting.VirtualFile" /> que representa un archivo del sistema de archivos virtual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> método devuelve un descendiente de la <xref:System.Web.Hosting.VirtualFile> clase que representa el archivo especificado por el `virtualPath` parámetro.  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> método personalizada <xref:System.Web.Hosting.VirtualPathProvider> clase. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> tema de información general sobre la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileHash">
      <MemberSignature Language="C#" Value="public virtual string GetFileHash (string virtualPath, System.Collections.IEnumerable virtualPathDependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetFileHash(string virtualPath, class System.Collections.IEnumerable virtualPathDependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.GetFileHash(System.String,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileHash (virtualPath As String, virtualPathDependencies As IEnumerable) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetFileHash(System::String ^ virtualPath, System::Collections::IEnumerable ^ virtualPathDependencies);" />
      <MemberSignature Language="F#" Value="abstract member GetFileHash : string * System.Collections.IEnumerable -&gt; string&#xA;override this.GetFileHash : string * System.Collections.IEnumerable -&gt; string" Usage="virtualPathProvider.GetFileHash (virtualPath, virtualPathDependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="virtualPathDependencies" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso al recurso virtual primario.</param>
        <param name="virtualPathDependencies">Matriz de rutas de acceso a otros recursos virtuales que requiere el recurso virtual primario.</param>
        <summary>Devuelve un código hash de las rutas de acceso virtuales especificadas.</summary>
        <returns>Código hash de las rutas de acceso virtuales especificadas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.Hosting.VirtualPathProvider.GetFileHash%2A> método para proporcionar un valor hash de las dependencias de un recurso de sistema de archivos virtual.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected virtual void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.Initialize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Initialize();" />
      <MemberSignature Language="F#" Value="abstract member Initialize : unit -&gt; unit&#xA;override this.Initialize : unit -&gt; unit" Usage="virtualPathProvider.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa la instancia <see cref="T:System.Web.Hosting.VirtualPathProvider" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> se llama al método después de que el proveedor está registrado con el sistema de compilación de ASP.NET. El <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> método se utiliza para proporcionar cualquier inicialización requerida después de la <xref:System.Web.Hosting.VirtualPathProvider> instancia se coloca en el entorno que se ocupa de la aplicación.  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualPathProvider.Initialize%2A> método que establece la ruta de acceso a un archivo de datos de la aplicación <xref:System.Web.Hosting.HostingEnvironment> instancia. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> tema de información general sobre la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#26](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#26)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#26](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="virtualPathProvider.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Concede al objeto <see cref="T:System.Web.Hosting.VirtualPathProvider" /> una duración infinita ya que impide que se genere una concesión.</summary>
        <returns>Siempre es <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invalida el <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> método en su clase base. Siempre devuelve `null` y así evita que se cree una concesión que limite el <xref:System.Web.Hosting.VirtualPathProvider> duración del objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenFile(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualPathProvider.OpenFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenFile (virtualPath As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenFile(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="static member OpenFile : string -&gt; System.IO.Stream" Usage="System.Web.Hosting.VirtualPathProvider.OpenFile virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso al archivo virtual.</param>
        <summary>Devuelve una secuencia de un archivo virtual.</summary>
        <returns>Objeto <see cref="T:System.IO.Stream" /> de sólo lectura para el archivo o recurso virtual especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Hosting.VirtualPathProvider.OpenFile%2A> método es una utilidad que le permite obtener una secuencia de un archivo virtual sin crear un <xref:System.Web.Hosting.VirtualPathProvider> instancia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Previous">
      <MemberSignature Language="C#" Value="protected internal System.Web.Hosting.VirtualPathProvider Previous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Hosting.VirtualPathProvider Previous" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property Previous As VirtualPathProvider" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Web::Hosting::VirtualPathProvider ^ Previous { System::Web::Hosting::VirtualPathProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Previous : System.Web.Hosting.VirtualPathProvider" Usage="System.Web.Hosting.VirtualPathProvider.Previous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.VirtualPathProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia a un objeto <see cref="T:System.Web.Hosting.VirtualPathProvider" /> previamente registrado del sistema de compilación.</summary>
        <value>El objeto <see cref="T:System.Web.Hosting.VirtualPathProvider" /> siguiente del sistema de compilación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Web.Hosting.VirtualPathProvider> objeto está registrado con el sistema de compilación de ASP.NET, se agrega a una cadena de proveedores. Use la <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> propiedad hasta el procesamiento de mano desactivado y el anterior <xref:System.Web.Hosting.VirtualPathProvider> objeto en la cadena si la ruta de acceso solicitada no se proporciona este <xref:System.Web.Hosting.VirtualPathProvider> instancia.  
  
 La cadena de proveedores de ruta de acceso siempre termina con el proveedor ASP.NET predeterminado, que sirve archivos del sistema de archivos.  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualPathProvider.GetFile%2A> método. Si el directorio virtual solicitado no comienza con la cadena `"/vrdir"`, el método usa la <xref:System.Web.Hosting.VirtualPathProvider.Previous%2A> propiedad para pasar la solicitud a la siguiente <xref:System.Web.Hosting.VirtualPathProvider> objeto de la cadena. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> tema de información general sobre la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SamplePathProvider.cs#23)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SamplePathProvider.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>