<Type Name="VirtualFile" FullName="System.Web.Hosting.VirtualFile">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="33f9791a60e614665696afca84d9f5d1942faacc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30540059" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class VirtualFile : System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit VirtualFile extends System.Web.Hosting.VirtualFileBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.VirtualFile" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class VirtualFile&#xA;Inherits VirtualFileBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class VirtualFile abstract : System::Web::Hosting::VirtualFileBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Hosting.VirtualFileBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un objeto de archivo de un archivo virtual o un espacio de recurso.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Hosting.VirtualFile> clase es la clase base para los objetos que representan los archivos en un sistema de archivos virtual. Normalmente, se implementaría un descendiente de la <xref:System.Web.Hosting.VirtualFile> clase para cada <xref:System.Web.Hosting.VirtualPathProvider> objeto descendiente en la aplicación Web.  
  
   
  
## Examples  
 El ejemplo de código siguiente es un <xref:System.Web.Hosting.VirtualFile> implementación de la clase que combina información almacenada en un <xref:System.Data.DataSet> objeto con un archivo de plantilla para devolver datos HTML. Este ejemplo de código funciona con los ejemplos de código para el <xref:System.Web.Hosting.VirtualPathProvider> y <xref:System.Web.Hosting.VirtualDirectory> clases para proporcionar recursos virtuales de datos de un almacén que se cargan en un <xref:System.Data.DataSet> objeto. Para obtener instrucciones completas para compilar y ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualPathProvider> Introducción a la clase.  
  
 Este ejemplo tiene tres partes: la <xref:System.Web.Hosting.VirtualFile> la implementación de clase, un archivo de datos XML utilizado para rellenar el <xref:System.Data.DataSet> objeto y el archivo de plantilla de página.  
  
 El primer ejemplo de código es una implementación de la <xref:System.Web.Hosting.VirtualFile> clase. Su constructor utiliza un método en un personalizado <xref:System.Web.Hosting.VirtualPathProvider> objeto que se va a devolver un <xref:System.Data.DataSet> objeto. A continuación, busca el <xref:System.Data.DataSet> objeto que se va a recuperar la información asociada con la ruta de acceso virtual proporcionada. En el <xref:System.Web.Hosting.VirtualFile.Open%2A> método, combina la información de la <xref:System.Data.DataSet> objeto con un archivo de plantilla y devuelve la combinación como un <xref:System.IO.Stream> objeto.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#40)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#40](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#40)]  
  
 El segundo ejemplo es el archivo de datos XML utilizado para rellenar el <xref:System.Data.DataSet> objeto devuelto por la opción de instalación <xref:System.Web.Hosting.VirtualPathProvider> objeto. Estos datos XML se usan para mostrar el uso del <xref:System.Web.Hosting.VirtualPathProvider>, <xref:System.Web.Hosting.VirtualFile>, y <xref:System.Web.Hosting.VirtualDirectory> clases para recuperar datos de datos externos y no está diseñada para representar un almacén de datos de calidad de producción.  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<resource type="dir"   
          path="/vrDir"   
          parentPath=""   
          content="">  
  <resource type="file"   
            path="/vrDir/Level1FileA.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileA.">  
  </resource>  
  <resource type="file"   
            path="/vrDir/Level1FileB.vrf"  
            parentPath="/vrDir"   
            content="This is the content of file Level1FileB.">  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirA"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirA/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirA"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
  <resource type="dir"   
            path="/vrDir/Level2DirB"   
            parentPath="/vrDir"   
            content="">  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileA.vrf"   
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileA.">  
    </resource>  
    <resource type="file"   
              path="/vrDir/Level2DirB/Level2FileB.vrf"  
              parentPath="/vrDir/Level2DirB"   
              content="This is the content of file Level2FileB.">  
    </resource>  
  </resource>  
</resource>  
```  
  
 El tercer ejemplo es el archivo de texto que se utiliza como plantilla para el archivo virtual. Marcadores de posición en el archivo se representan mediante texto entre signos de porcentaje (%), como `%file%` y `%content%`. Las marcas de tiempo se utilizan para supervisar los cambios en los datos almacenados en caché de archivos virtual.  
  
```  
<html>  
  <head>  
    <title>File name: %file%</title>  
  </head>  
  
  <body>  
    <h1>%file%</h1>  
    <p>%content%</p>  
    <p>Page timestamp: %pageTimestamp%<br>  
       Data timestamp: %dataTimestamp%<br>  
       Template timestamp: %templateTimestamp%</p>  
  </body>  
</html>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Al heredar de la <see cref="T:System.Web.Hosting.VirtualFile" /> (clase), es necesario reemplazar el <see cref="M:System.Web.Hosting.VirtualFile.Open" /> método para devolver una secuencia de sólo lectura para el contenido del recurso virtual.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected VirtualFile (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (virtualPath As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; VirtualFile(System::String ^ virtualPath);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">Ruta de acceso virtual al recurso representado por esta instancia.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Hosting.VirtualFile" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualFile.%23ctor%2A> constructor al que se recupera información de archivo virtual de un <xref:System.Data.DataSet> objeto proporcionado por un personalizado <xref:System.Web.Hosting.VirtualPathProvider> objeto. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualFile> Introducción a la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#41)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#41](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirectory">
      <MemberSignature Language="C#" Value="public override bool IsDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Web.Hosting.VirtualFile.IsDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDirectory { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica que éste es un recurso virtual que se debería tratar como un archivo.</summary>
        <value>Siempre es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public abstract System.IO.Stream Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.VirtualFile.Open" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Open () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::IO::Stream ^ Open();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, devuelve una secuencia de sólo lectura al recurso virtual.</summary>
        <returns>Secuencia de sólo lectura al archivo virtual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Hosting.VirtualFile.Open%2A> método devuelve una secuencia que contiene los datos tratados como un archivo por el <xref:System.Web.Hosting.VirtualPathProvider> clase. La secuencia es de solo lectura y está pueden realizar búsqueda (el <xref:System.IO.Stream.CanSeek%2A> propiedad es true).  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación de la <xref:System.Web.Hosting.VirtualFile.Open%2A> método que combina información específica del archivo virtual con un archivo de plantilla y, a continuación, devuelve la combinación. El archivo de plantilla se almacena en caché para reducir la sobrecarga de leer el sistema de archivos varias veces para recuperar el archivo de plantilla. Para el código completo necesario para ejecutar el ejemplo, vea la sección ejemplo de la <xref:System.Web.Hosting.VirtualFile> Introducción a la clase.  
  
 [!code-csharp[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/CS/SampleVirtualFile.cs#42)]
 [!code-vb[System.Web.Hosting.VirtualPathProvider#42](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.hosting.virtualpathprovider/VB/SampleVirtualFile.vb#42)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>En las clases derivadas el <see cref="M:System.Web.Hosting.VirtualFile.Open" /> método debe devolver una secuencia que se pueden realizar búsqueda. Si el método devuelve una secuencia que no admite búsquedas, un <see cref="T:System.NotSupportedException" /> se produce cuando la secuencia se pasa a la <see cref="T:System.Web.HttpResponse" /> objeto que se va a escribir los datos. La excepción se produce porque la respuesta intenta leer el <see cref="P:System.IO.Stream.Length" /> propiedad, y en una secuencia que no pueden realizar búsqueda, intenta tener acceso a la propiedad provoca una excepción. Para obtener más información, vea la propiedad <see cref="P:System.IO.Stream.CanSeek" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>