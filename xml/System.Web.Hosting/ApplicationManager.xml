<Type Name="ApplicationManager" FullName="System.Web.Hosting.ApplicationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3fa9dd2c9f13ca0685de293d35a22629355589b7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539999" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ApplicationManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ApplicationManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.ApplicationManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ApplicationManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationManager sealed : MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Administra dominios de la aplicación ASP.NET para aplicaciones host ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Hosting.ApplicationManager> objeto proporciona administración de la duración de objetos en el entorno de hospedaje en una aplicación ASP.NET. Es responsable de:  
  
-   Activar e inicializar las aplicaciones ASP.NET.  
  
-   Administrar la duración de la aplicación y la duración de objetos registrados en la aplicación.  
  
-   Exponer objetos utilizados por el entorno de hospedaje para procesar solicitudes de aplicación de ASP.NET.  
  
-   Proporciona una lista de aplicaciones que se ejecutan en el proceso de hospedaje en un momento dado.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra todos los dominios de aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una llamada a la <xref:System.Web.Hosting.ApplicationManager.Close%2A> método reduce el recuento de referencias de aplicaciones mediante el Administrador de la aplicación en 0, el <xref:System.Web.Hosting.ApplicationManager.Close%2A> llamadas al método el <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un objeto para el dominio de aplicación y el tipo de objeto especificados.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (System.Web.Hosting.IApplicationHost appHost, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(class System.Web.Hosting.IApplicationHost appHost, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::Web::Hosting::IApplicationHost ^ appHost, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appHost">Un objeto <see cref="T:System.Web.Hosting.IApplicationHost" />.</param>
        <param name="type">Tipo del objeto que se va a crear.</param>
        <summary>Crea un objeto para el dominio de aplicación especificado, basado en el tipo.</summary>
        <returns>Un nuevo objeto del tipo especificado en <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> se introdujo en la versión 3.5 de .NET Framework.  Para más información, vea [Versiones y dependencias](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No existe una ruta de acceso física de la aplicación.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appHost" /> es <see langword="null" />.  
  
 \- o -  
  
 <paramref name="type" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">El identificador único para la aplicación que posee el objeto.</param>
        <param name="type">Tipo del objeto que se va a crear.</param>
        <param name="virtualPath">Ruta de acceso virtual a la aplicación.</param>
        <param name="physicalPath">Ruta de acceso física a la aplicación.</param>
        <param name="failIfExists">
          <see langword="true" /> para producir una excepción si hay actualmente registrado un objeto del tipo especificado; <see langword="false" /> para devolver el objeto registrado existente del tipo especificado.</param>
        <summary>Crea un objeto para el dominio de aplicación especificado basado en el tipo, las rutas de acceso virtual y física, y un valor booleano que indica el comportamiento del error si ya existe un objeto del tipo especificado.</summary>
        <returns>Nuevo objeto del <paramref name="type" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> método se usa para crear y registrar los objetos de la aplicación. Puede crearse un único objeto de cada tipo. Si necesita crear varios objetos del mismo tipo, debe implementar un generador de objetos. Para obtener más información, vea el ejemplo de código de este tema.  
  
 Cada aplicación, identificado por un identificador único de la aplicación, se ejecuta en su propio dominio de aplicación. El <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> método crea un objeto del tipo especificado en el dominio de aplicación de la aplicación especificada en el `appID` parámetro. Si no existe ningún dominio de aplicación para la aplicación especificada, se crea uno antes de crea el objeto.  
  
 El `failIfExists` parámetro controla el comportamiento de la <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> método cuando ya existe un objeto del tipo especificado en la aplicación. Cuando `failIfExists` es `true`, <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> método produce una <xref:System.InvalidOperationException> excepción.  
  
 Cuando `failIfExists` es `false`, el <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> método devuelve el objeto registrado existente del tipo especificado.  
  
 El <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> método llama a la sobrecarga que toma más `throwOnError` parámetro con `throwOnError` establecido en `false`.  
  
   
  
## Examples  
 El ejemplo de código siguiente es una implementación del patrón de diseño de generador de objetos para los objetos registrados. Con el modelo de generador permite registrar varias instancias de un objeto. El ejemplo contiene dos objetos: `SampleComponent`, que es el objeto de la aplicación utilizará varias instancias de, y `SampleComponentFactory`, que administra una lista de `SampleComponent` instancias.  
  
 [!code-csharp[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/CS/appManagercs.aspx.cs#1)]
 [!code-vb[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/VB/appManagervb.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="physicalPath" /> es <see langword="null" />  
  
 \- o -  
  
 <paramref name="physicalPath" /> no es una ruta de acceso a la aplicación válida  
  
 \- o -  
  
 <paramref name="type" /> no implementa la interfaz <see cref="T:System.Web.Hosting.IRegisteredObject" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appID" /> es <see langword="null" />.  
  
 \- o -  
  
 <paramref name="type" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="failIfExists" /> es <see langword="true" /> y ya hay registrado un objeto del tipo especificado.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">El identificador único para la aplicación que posee el objeto.</param>
        <param name="type">Tipo del objeto que se va a crear.</param>
        <param name="virtualPath">Ruta de acceso virtual a la aplicación.</param>
        <param name="physicalPath">Ruta de acceso física a la aplicación.</param>
        <param name="failIfExists">
          <see langword="true" /> para producir una excepción si hay actualmente registrado un objeto del tipo especificado; <see langword="false" /> para devolver el objeto registrado existente del tipo especificado.</param>
        <param name="throwOnError">
          <see langword="true" /> para iniciar excepciones de error de inicialización del host; <see langword="false" /> para no iniciar excepciones de inicialización del host.</param>
        <summary>Crea un objeto para el dominio de aplicación especificado, basado en el tipo, las rutas de acceso virtual y física, un valor booleano que indica el comportamiento de error si ya existe un objeto del tipo especificado, y un valor booleano que indica si se inician excepciones de error de inicialización del host.</summary>
        <returns>Nuevo objeto del <paramref name="type" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> método proporciona la `throwOnError` parámetro, que le permite controlar si se producen excepciones de inicialización del host. La sobrecarga de la <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> método que no proporciona `throwOnError` llama a esta sobrecarga con el parámetro establecido en `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="physicalPath" /> es <see langword="null" />  
  
 \- o -  
  
 <paramref name="physicalPath" /> no es una ruta de acceso a la aplicación válida  
  
 \- o -  
  
 <paramref name="type" /> no implementa la interfaz <see cref="T:System.Web.Hosting.IRegisteredObject" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appID" /> es <see langword="null" />.  
  
 \- o -  
  
 <paramref name="type" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="failIfExists" /> es <see langword="true" /> y ya hay registrado un objeto del tipo especificado.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAppDomain">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene el dominio de aplicación de una aplicación especificada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appId As String) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::String ^ appId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">Identificador único de la aplicación.</param>
        <summary>Obtiene el dominio de aplicación de la aplicación especificada.</summary>
        <returns>Dominio de aplicación de la aplicación.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (System.Web.Hosting.IApplicationHost appHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(class System.Web.Hosting.IApplicationHost appHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appHost As IApplicationHost) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::Web::Hosting::IApplicationHost ^ appHost);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" />
      </Parameters>
      <Docs>
        <param name="appHost">Host para el que se va a obtener el dominio de aplicación.</param>
        <summary>Obtiene el dominio de aplicación de una aplicación con el host especificado.</summary>
        <returns>Dominio de aplicación de la aplicación.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationManager">
      <MemberSignature Language="C#" Value="public static System.Web.Hosting.ApplicationManager GetApplicationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Hosting.ApplicationManager GetApplicationManager() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetApplicationManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetApplicationManager () As ApplicationManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Hosting::ApplicationManager ^ GetApplicationManager();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve la instancia única del objeto <see cref="T:System.Web.Hosting.ApplicationManager" /> asociado a este proceso host ASP.NET.</summary>
        <returns>La instancia única del objeto <see cref="T:System.Web.Hosting.ApplicationManager" /> asociada al proceso host ASP.NET que está en ejecución.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo una instancia de la <xref:System.Web.Hosting.ApplicationManager> un proceso de host ASP.NET en el dominio de aplicación predeterminado crea el objeto. Si una instancia de la <xref:System.Web.Hosting.ApplicationManager> clase no está disponible, el <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> método crea primero una instancia de la <xref:System.Web.Hosting.ApplicationManager> clase y, a continuación, devuelve el objeto recién creado. Si una instancia de la <xref:System.Web.Hosting.ApplicationManager> clase creada previamente, el <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> método devuelve el objeto existente.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> método para recuperar el <xref:System.Web.Hosting.ApplicationManager> instancia para una aplicación Web.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject GetObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject GetObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ GetObject(System::String ^ appId, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">El identificador único para la aplicación que posee el objeto.</param>
        <param name="type">El tipo de objeto que se va a devolver.</param>
        <summary>Devuelve el objeto registrado del tipo especificado de la aplicación especificada.</summary>
        <returns>Objeto registrado del tipo especificado; o <see langword="null" /> si el tipo no se ha registrado mediante una llamada al método <see cref="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> es <see langword="null" />.  
  
 -O bien-  
  
 <paramref name="type" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunningApplications">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.ApplicationInfo[] GetRunningApplications ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.ApplicationInfo[] GetRunningApplications() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetRunningApplications" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRunningApplications () As ApplicationInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Web::Hosting::ApplicationInfo ^&gt; ^ GetRunningApplications();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una instantánea de aplicaciones en ejecución.</summary>
        <returns>Matriz de objetos <see cref="T:System.Web.Hosting.ApplicationInfo" /> que contiene información sobre las aplicaciones administradas por esta instancia de <see cref="T:System.Web.Hosting.ApplicationManager" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Hosting.ApplicationManager.GetRunningApplications%2A> método para mostrar información sobre las aplicaciones administradas por un <xref:System.Web.Hosting.ApplicationManager> instancia.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Proporciona al dominio de aplicación una duración infinita al impedir que se cree una concesión.</summary>
        <returns>Siempre es <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método invalida el <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> método en su clase base. Siempre devuelve `null` y por eso evita que se crea una concesión que limite período de duración del dominio de aplicación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.IsIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un valor que indica si todas las aplicaciones alojadas por el proceso están inactivas y no procesan las solicitudes.</summary>
        <returns>
          <see langword="true" /> si todas las aplicaciones del proceso están inactivas; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Hosting.ApplicationManager.IsIdle%2A> método `true` si todas las aplicaciones alojadas por el proceso están inactivas.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Open" />
      <MemberSignature Language="VB.NET" Value="Public Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Open();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Realiza un incremento seguro para subprocesos del recuento de referencias de usuario de la instancia del administrador de aplicación.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownAll">
      <MemberSignature Language="C#" Value="public void ShutdownAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Descarga todos los recursos de la aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a la <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> es equivalente a llamar al método el <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> método en todos los dominios de aplicación administrados por este <xref:System.Web.Hosting.ApplicationManager> ejemplo; sin embargo, la <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> método se puede llamar desde fuera de los dominios de aplicación administrada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownApplication">
      <MemberSignature Language="C#" Value="public void ShutdownApplication (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownApplication(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownApplication (appId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownApplication(System::String ^ appId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">El identificador único de la aplicación que se va a descargar.</param>
        <summary>Descarga la aplicación especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al llamar a la <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> es equivalente a llamar al método el <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> método para un dominio de aplicación concreto; sin embargo, la <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> método puede llamarse desde dominios de aplicación administrados exterior.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopObject">
      <MemberSignature Language="C#" Value="public void StopObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopObject(System::String ^ appId, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">El identificador único para la aplicación que posee el objeto.</param>
        <param name="type">Tipo del objeto que se va a descargar.</param>
        <summary>Quita el objeto especificado de la lista de objetos registrados de una aplicación. Si el objeto que se va a quitar es el último objeto restante en la lista de objetos registrados de una aplicación, entonces se descarga la aplicación.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> es <see langword="null" />.  
  
 \- o -  
  
 <paramref name="type" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>