<Type Name="DataLoadOptions" FullName="System.Data.Linq.DataLoadOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="68d7a106a236150ca9a1a8a2a5972fb7ae8eee39" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39833081" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataLoadOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataLoadOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataLoadOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataLoadOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataLoadOptions sealed" />
  <TypeSignature Language="F#" Value="type DataLoadOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona la carga inmediata y el filtrado de los datos relacionados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="general"></a>General  
 Al consultar un objeto, en realidad se recupera únicamente el objeto solicitado. El *relacionados* objetos no se capturan automáticamente al mismo tiempo. (Para obtener más información, consulte [consultas en varias relaciones](~/docs/framework/data/adonet/sql/linq/querying-across-relationships.md).)  
  
 La <xref:System.Data.Linq.DataLoadOptions> clase proporciona dos métodos para lograr la carga inmediata de los datos relacionados especificados. El <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> método permite la carga inmediata de los datos relacionados con el destino principal. El <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> método permite filtrar los objetos relacionados.  
  
## <a name="rules"></a>Reglas  
 Tenga en cuenta las siguientes reglas sobre <xref:System.Data.Linq.DataLoadOptions> uso:  
  
-   Asignar un <xref:System.Data.Linq.DataLoadOptions> a un <xref:System.Data.Linq.DataContext> una vez ejecutada la primera consulta genera una excepción.  
  
-   Modificar un <xref:System.Data.Linq.DataLoadOptions> después de que se ha asignado a un <xref:System.Data.Linq.DataContext> genera una excepción  
  
## <a name="cycle-handling"></a>Control de ciclos  
 <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> y <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> directivas no deben crear ciclos. El siguiente figuran algunos ejemplos de tales gráficos:  
  
-   Ejemplo 1: Self recursiva  
  
    -   `dlo.LoadWith<Employee>(e => e.Reports);`  
  
-   Ejemplo 2: Punteros alternativos  
  
    -   `dlo.LoadWith <Customer>(c => C.Orders);`  
  
    -   `dlo.LoadWith <Order>(o => o.Customer);`  
  
-   Ejemplo 3: Ciclos más largos  
  
     Aunque esto no debería ocurrir en un modelo normalizado bien, es posible.  
  
    -   `dlo.LoadWith <A>(a => a.Bs);`  
  
    -   `dlo.LoadWith <B>(b => b.Cs);`  
  
    -   `dlo.LoadWith <C>(c => c.As);`  
  
-   : Ejemplo 4 subconsultas recursivas  
  
    -   `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));`  
  
-   Ejemplo 5: Subconsultas recursivas más largas  
  
    -   `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`  
  
    -   `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));`  
  
 Las siguientes son algunas reglas generales que le ayudarán a comprender lo que ocurre en estos escenarios.  
  
 **LoadWith** cada llamada a <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> comprueba si se han introducido ciclos en el gráfico. Si hay, como en los ejemplos 1, 2 y 3, se produce una excepción.  
  
 **AssociateWith** el motor en tiempo de ejecución no se aplican las cláusulas de subconsulta existentes a la relación en la expresión.  
  
-   En el ejemplo 4, el `Where` cláusula se ejecuta en todos los `A`, no solo los Sub filtraron por la propia expresión de subconsulta (ya que sería recursivo)  
  
-   En el ejemplo 5, la primera `Where` cláusula se aplica a todos los `B`s, incluso si hay subconsultas en `B`. El segundo `Where` cláusula se aplica a todos los `A`subconsultas s, aunque no exista en `A`.  
  
   
  
## Examples  
 Al recuperar `Customers` desde la base de datos de ejemplo Northwind, puede usar <xref:System.Data.Linq.DataLoadOptions> para especificar que `Orders` es también va a recuperar. Incluso puede especificar qué subconjunto de `Orders` para recuperar.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataLoadOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataLoadOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Linq.DataLoadOptions" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith">
      <MemberSignature Language="C#" Value="public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociateWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression">Identifica la consulta que se va a utilizar en una propiedad o un campo uno a varios determinado. Tenga en cuenta lo siguiente: 
Si la expresión no se inicia con un campo o una propiedad que representa una relación uno a varios, se produce una excepción.  
  
Si en la expresión aparece un operador que no sea válido, se produce una excepción. Los operadores válidos son los siguientes: 
Where 
OrderBy 
ThenBy 
OrderByDescending 
ThenByDescending 
Take</param>
        <summary>Filtra los objetos recuperados para una relación concreta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el ejemplo siguiente, el bucle interior recorre en iteración los sólo `Orders` que no se han enviado hoy en día.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssociateWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void AssociateWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociateWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociateWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void AssociateWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.AssociateWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.AssociateWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo en el que se realizan las consultas.  
  
Si se trata de un tipo no asignado, se produce una excepción.</typeparam>
        <param name="expression">Identifica la consulta que se va a utilizar en una propiedad o un campo uno a varios determinado. Tenga en cuenta lo siguiente: 
Si la expresión no se inicia con un campo o una propiedad que representa una relación uno a varios, se produce una excepción.  
  
Si en la expresión aparece un operador que no sea válido, se produce una excepción. Los operadores válidos son los siguientes: 
Where 
OrderBy 
ThenBy 
OrderByDescending 
ThenByDescending 
Take</param>
        <summary>Filtra los objetos recuperados para una relación concreta.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener información acerca de cómo evitar los ciclos, vea <xref:System.Data.Linq.DataLoadOptions>.  
  
   
  
## Examples  
 En el ejemplo siguiente, el bucle interior recorre en iteración los sólo `Orders` que no se han enviado hoy en día.  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.DataLoadOptions#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssociationCriteria">
      <MemberSignature Language="C#" Value="public bool GetAssociationCriteria (System.Reflection.MemberInfo memberInfo, out System.Linq.Expressions.LambdaExpression associationCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetAssociationCriteria(class System.Reflection.MemberInfo memberInfo, [out] class System.Linq.Expressions.LambdaExpression&amp; associationCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.GetAssociationCriteria(System.Reflection.MemberInfo,System.Linq.Expressions.LambdaExpression@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetAssociationCriteria(System::Reflection::MemberInfo ^ memberInfo, [Runtime::InteropServices::Out] System::Linq::Expressions::LambdaExpression ^ % associationCriteria);" />
      <MemberSignature Language="F#" Value="member this.GetAssociationCriteria : System.Reflection.MemberInfo *  -&gt; bool" Usage="dataLoadOptions.GetAssociationCriteria (memberInfo, associationCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
        <Parameter Name="associationCriteria" Type="System.Linq.Expressions.LambdaExpression" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <param name="associationCriteria">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImmediate">
      <MemberSignature Language="C#" Value="public bool IsImmediate (System.Reflection.MemberInfo memberInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsImmediate(class System.Reflection.MemberInfo memberInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.IsImmediate(System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsImmediate(System::Reflection::MemberInfo ^ memberInfo);" />
      <MemberSignature Language="F#" Value="member this.IsImmediate : System.Reflection.MemberInfo -&gt; bool" Usage="dataLoadOptions.IsImmediate memberInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberInfo" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="memberInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith">
      <MemberSignature Language="C#" Value="public void LoadWith (System.Linq.Expressions.LambdaExpression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith(class System.Linq.Expressions.LambdaExpression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith (expression As LambdaExpression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadWith(System::Linq::Expressions::LambdaExpression ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.LambdaExpression -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="expression">Expresión lambda que identifica el material relacionado.</param>
        <summary>Recupera los datos especificados que están relacionados con el destino principal utilizando una expresión lambda.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En el siguiente ejemplo, se recuperan todos los `Orders` de todos los `Customers` de Londres cuando se ejecuta la consulta. En consecuencia, el acceso posterior a la propiedad `Orders` de un objeto `Customer` no desencadena una nueva consulta de base de datos.  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadWith&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void LoadWith&lt;T&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,object&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadWith&lt;T&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!T, object&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadWith(Of T) (expression As Expression(Of Func(Of T, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void LoadWith(System::Linq::Expressions::Expression&lt;Func&lt;T, System::Object ^&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="F#" Value="member this.LoadWith : System.Linq.Expressions.Expression&lt;Func&lt;'T, obj&gt;&gt; -&gt; unit" Usage="dataLoadOptions.LoadWith expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,System.Object&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Tipo en el que se realizan las consultas.  
  
Si se trata de un tipo no asignado, se produce una excepción.</typeparam>
        <param name="expression">Identifica el campo o la propiedad que se va a recuperar.  
  
Si la expresión no identifica un campo o una propiedad que represente una relación uno a uno o uno a varios, se produce una excepción.</param>
        <summary>Especifica los subobjetos que se van a recuperar cuando se envíe una consulta para un objeto de tipo T.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede especificar la carga de dos niveles de relaciones (por ejemplo, `Orders.OrderDetails`). En estos escenarios, debe especificar dos <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> métodos.  
  
 Para evitar los ciclos, vea la sección comentarios en la sección <xref:System.Data.Linq.DataLoadOptions>.  
  
   
  
## Examples  
 En el siguiente ejemplo, se recuperan todos los `Orders` de todos los `Customers` de Londres cuando se ejecuta la consulta. En consecuencia, el acceso posterior a la propiedad `Orders` de un objeto `Customer` no desencadena una nueva consulta de base de datos.  
  
 [!code-csharp[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.dataloadoptions/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.DataLoadOptions#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.dataloadoptions/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>