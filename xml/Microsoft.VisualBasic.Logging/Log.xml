<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7fff402c8466f2b7b1d17f50b5c0e890d5b3d773" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52201851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <TypeSignature Language="F#" Value="type Log = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona una propiedad y métodos para escribir información sobre excepciones y eventos en los agentes de escucha de registro de la aplicación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `My.Application.Log` objeto proporciona un punto de entrada sencillo desde el que se va a obtener acceso a la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]del registro de servicios. El `WriteEntry` y `WriteException` métodos escriben mensajes en los agentes de escucha de registro de la aplicación. Los agentes de escucha pueden configurarse mediante el archivo de configuración de la aplicación. Para obtener más información, consulte [Tutorial: cambiar Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) y [trabajar con registros de aplicaciones](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 La `My.Application.Log` objeto solo está disponible para las aplicaciones cliente. Para aplicaciones Web, utilice `My.Log`. Para obtener más información, vea <xref:Microsoft.VisualBasic.Logging.AspLog>.  
  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `My.Application.Log` objeto.  
  
|En|Vea|  
|--------|---------|  
|Escribir información de eventos a los agentes de escucha de registro de la aplicación|[Escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Escribir información de excepción en los agentes de escucha de registro de la aplicación|[Registrar excepciones](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinar dónde `My.Application.Log` escribe información|[Tutorial: Determinar el lugar en el que My.Application.Log escribe la información](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 Este ejemplo muestra cómo usar el método `My.Application.Log.WriteEntry` para registrar información de seguimiento. Para obtener más información, consulte [Cómo: escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.Log : string -&gt; Microsoft.VisualBasic.Logging.Log" Usage="new Microsoft.VisualBasic.Logging.Log name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />. Nombre que se va a dar al objeto de propiedad <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFileLogWriter : Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> que está debajo del objeto <see langword="Log" />.</summary>
        <value>Devuelve el objeto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> que está debajo del objeto <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para determinar la configuración actual de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> objeto.  
  
 En las aplicaciones cliente, el `Log` objeto está disponible a través de la `My.Application.Log` objeto. En las aplicaciones Web, el `Log` objeto está disponible a través de la `My.Log` objeto.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Solución de problemas: Agentes de escucha de registro</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberSignature Language="F#" Value="abstract member InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit&#xA;override this.InitializeWithDefaultsSinceNoConfigExists : unit -&gt; unit" Usage="log.InitializeWithDefaultsSinceNoConfigExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuevo objeto <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> y lo agrega a la colección <see cref="P:System.Diagnostics.TraceSource.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método crea un nuevo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, establece su nombre en `FileLog`y lo configura para registrar los mensajes con nivel de gravedad <xref:System.Diagnostics.SourceLevels.Information> y versiones posteriores. El nuevo <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> , a continuación, se agrega el objeto a la <xref:System.Diagnostics.TraceSource.Listeners%2A> colección.  
  
 El <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> llama al método si el <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> no se ha configurado la propiedad. El origen de seguimiento puede configurarse en el archivo de configuración de la aplicación.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TraceSource : System.Diagnostics.TraceSource" Usage="Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Diagnostics.TraceSource" /> que está debajo del objeto <see langword="Log" />.</summary>
        <value>Devuelve el objeto <see cref="T:System.Diagnostics.TraceSource" /> que está debajo del objeto <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para determinar la configuración actual de la `Log` objeto.  
  
 En las aplicaciones cliente, el `Log` objeto está disponible a través de la `My.Application.Log` objeto. En las aplicaciones Web, el `Log` objeto está disponible a través de la `My.Log` objeto.  
  
 Se trata de un miembro avanzado; no se muestra en IntelliSense a menos que seleccione la **todas** ficha.  
  
 La tabla siguiente muestra un ejemplo de una tarea que implica la `TraceSource` propiedad.  
  
|En|Vea|  
|--------|---------|  
|Obtenga información para cada uno de los `Log` agentes de escucha de registro del objeto.|[Solución de problemas: Agentes de escucha de registro](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|------------------|---------------|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ac6eb760-3d5d-461e-aedd-40599ee22e49">Solución de problemas: Agentes de escucha de registro</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe un mensaje en los agentes de escucha de registro de la aplicación.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string -&gt; unit" Usage="log.WriteEntry message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Obligatorio. Mensaje que se va a registrar. Si <paramref name="message" /> es <see langword="Nothing" />, se utiliza una cadena vacía.</param>
        <summary>Escribe un mensaje en los agentes de escucha de registro de la aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `WriteEntry` método escribe un mensaje en los agentes de escucha de registro de eventos de la aplicación.  
  
 En las aplicaciones cliente, el `Log` objeto está disponible a través de la `My.Application.Log` objeto. En las aplicaciones Web, el `Log` objeto está disponible a través de la `My.Log` objeto.  
  
 Para obtener información sobre qué registro de agentes de escucha reciben el `WriteEntry` los mensajes del método, vea [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Puede cambiar los agentes de escucha de registro predeterminado. Para obtener más información, vea [Trabajar con registros de aplicaciones](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para las sobrecargas que no toman el `id` argumento, el `id` escribe en el registro se define en la siguiente tabla.  
  
|`severity`|Valor predeterminado `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `WriteEntry` método.  
  
|En|Vea|  
|--------|---------|  
|Escribir información de eventos a los agentes de escucha de registro de la aplicación|[Escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinar dónde `Log` escribe información|[Tutorial: Determinar el lugar en el que My.Application.Log escribe la información](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|------------------|---------------|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 Este ejemplo muestra cómo usar el método `My.Application.Log.WriteEntry` para registrar información de seguimiento. Para obtener más información, consulte [Cómo: escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Puede ejecutar este ejemplo de código sólo dentro de una aplicación cliente. Cambio `My.Application.Log.WriteEntry` a `My.Log.WriteEntry` para aplicaciones Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Código con confianza parcial que llama al método, pero escribe en un agente de escucha del registro de eventos que requiere plena confianza.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabajar con registros de aplicaciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Cómo: Escribir mensajes de registro</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Tutorial: Determinar el lugar en el que My.Application.Log escribe la información</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType -&gt; unit" Usage="log.WriteEntry (message, severity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">Obligatorio. Mensaje que se va a registrar. Si <paramref name="message" /> es <see langword="Nothing" />, se utiliza una cadena vacía.</param>
        <param name="severity">El tipo de mensaje. De manera predeterminada, es <see langword="TraceEventType.Information" />.</param>
        <summary>Escribe un mensaje en los agentes de escucha de registro de la aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `WriteEntry` método escribe un mensaje en los agentes de escucha de registro de eventos de la aplicación.  
  
 En las aplicaciones cliente, el `Log` objeto está disponible a través de la `My.Application.Log` objeto. En las aplicaciones Web, el `Log` objeto está disponible a través de la `My.Log` objeto.  
  
 Para obtener información sobre qué registro de agentes de escucha reciben el `WriteEntry` los mensajes del método, vea [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Puede cambiar los agentes de escucha de registro predeterminado. Para obtener más información, vea [Trabajar con registros de aplicaciones](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para las sobrecargas que no toman el `id` argumento, el `id` escribe en el registro se define en la siguiente tabla.  
  
|`severity`|Valor predeterminado `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `WriteEntry` método.  
  
|En|Vea|  
|--------|---------|  
|Escribir información de eventos a los agentes de escucha de registro de la aplicación|[Escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinar dónde `Log` escribe información|[Tutorial: Determinar el lugar en el que My.Application.Log escribe la información](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|------------------|---------------|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 Este ejemplo muestra cómo usar el método `My.Application.Log.WriteEntry` para registrar información de seguimiento. Para obtener más información, consulte [Cómo: escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Puede ejecutar este ejemplo de código sólo dentro de una aplicación cliente. Cambio `My.Application.Log.WriteEntry` a `My.Log.WriteEntry` para aplicaciones Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El tipo de mensaje no se corresponde con ninguno de los valores de la enumeración <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código con confianza parcial que llama al método, pero escribe en un agente de escucha del registro de eventos que requiere plena confianza.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabajar con registros de aplicaciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Cómo: Escribir mensajes de registro</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Tutorial: Determinar el lugar en el que My.Application.Log escribe la información</related>
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteEntry : string * System.Diagnostics.TraceEventType * int -&gt; unit" Usage="log.WriteEntry (message, severity, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Obligatorio. Mensaje que se va a registrar. Si <paramref name="message" /> es <see langword="Nothing" />, se utiliza una cadena vacía.</param>
        <param name="severity">El tipo de mensaje. De manera predeterminada, es <see langword="TraceEventType.Information" />.</param>
        <param name="id">Identificador de mensaje, que se utiliza normalmente para la correlación. De manera predeterminada, está relacionado con <c>entryType</c> tal y como se describe en la tabla.</param>
        <summary>Escribe un mensaje en los agentes de escucha de registro de la aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `WriteEntry` método escribe un mensaje en los agentes de escucha de registro de eventos de la aplicación.  
  
 En las aplicaciones cliente, el `Log` objeto está disponible a través de la `My.Application.Log` objeto. En las aplicaciones Web, el `Log` objeto está disponible a través de la `My.Log` objeto.  
  
 Para obtener información sobre qué registro de agentes de escucha reciben el `WriteEntry` los mensajes del método, vea [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Puede cambiar los agentes de escucha de registro predeterminado. Para obtener más información, vea [Trabajar con registros de aplicaciones](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para las sobrecargas que no toman el `id` argumento, el `id` escribe en el registro se define en la siguiente tabla.  
  
|`severity`|Valor predeterminado `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `WriteEntry` método.  
  
|En|Vea|  
|--------|---------|  
|Escribir información de eventos a los agentes de escucha de registro de la aplicación|[Escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Determinar dónde `Log` escribe información|[Tutorial: Determinar el lugar en el que My.Application.Log escribe la información](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|------------------|---------------|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 Este ejemplo muestra cómo usar el método `My.Application.Log.WriteEntry` para registrar información de seguimiento. Para obtener más información, consulte [Cómo: escribir mensajes de registro](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Puede ejecutar este ejemplo de código sólo dentro de una aplicación cliente. Cambio `My.Application.Log.WriteEntry` a `My.Log.WriteEntry` para aplicaciones Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El tipo de mensaje no se corresponde con ninguno de los valores de la enumeración <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código con confianza parcial que llama al método, pero escribe en un agente de escucha del registro de eventos que requiere plena confianza.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabajar con registros de aplicaciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/972a3e0c-2996-4623-a7a9-d7ebc4d207f8">Cómo: Escribir mensajes de registro</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Tutorial: Determinar el lugar en el que My.Application.Log escribe la información</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe la información de excepciones en los agentes de escucha de registro de la aplicación</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception -&gt; unit" Usage="log.WriteException ex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Obligatorio. Excepción que se va a registrar.</param>
        <summary>Escribe la información de excepciones en los agentes de escucha de registro de la aplicación</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `WriteException` método escribe la información contenida en una excepción para los agentes de escucha de registro de eventos de la aplicación.  
  
 En las aplicaciones cliente, el `Log` objeto está disponible a través de la `My.Application.Log` objeto. En las aplicaciones Web, el `Log` objeto está disponible a través de la `My.Log` objeto.  
  
 Para obtener información sobre qué registro de agentes de escucha reciben el `WriteException` los mensajes del método, vea [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Puede cambiar los agentes de escucha de registro predeterminado. Para obtener más información, vea [Trabajar con registros de aplicaciones](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para las sobrecargas que no toman el `id` argumento, el identificador que se escriben en el registro se define en la siguiente tabla.  
  
|`severity`|Valor predeterminado `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `WriteException` método.  
  
|En|Vea|  
|--------|---------|  
|Escribir información de excepción en los agentes de escucha de registro de eventos de la aplicación.|[Registrar excepciones](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinar dónde `Log` escribe información.|[Tutorial: Determinar el lugar en el que My.Application.Log escribe la información](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|------------------|---------------|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 En este ejemplo se muestra cómo usar el `My.Application.Log.WriteException` método para registrar excepciones. Quite la marca de comentario de las líneas `Dim` y `MsgBox` para generar una excepción <xref:System.NullReferenceException>. Para obtener más información, consulte [Cómo: registrar excepciones](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Puede ejecutar este ejemplo de código sólo dentro de una aplicación cliente. Cambio `My.Application.Log.WriteException` a `My.Log.WriteException` para aplicaciones Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="ex" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código con confianza parcial que llama al método, pero escribe en un agente de escucha del registro de eventos que requiere plena confianza.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabajar con registros de aplicaciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Cómo: Registrar excepciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Tutorial: Determinar el lugar en el que My.Application.Log escribe la información</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Obligatorio. Excepción que se va a registrar.</param>
        <param name="severity">El tipo de mensaje. De manera predeterminada, es <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Cadena que se va a anexar al mensaje. De manera predeterminada, es una cadena vacía.</param>
        <summary>Escribe la información de excepciones en los agentes de escucha de registro de la aplicación</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `WriteException` método escribe la información contenida en una excepción para los agentes de escucha de registro de eventos de la aplicación.  
  
 En las aplicaciones cliente, el `Log` objeto está disponible a través de la `My.Application.Log` objeto. En las aplicaciones Web, el `Log` objeto está disponible a través de la `My.Log` objeto.  
  
 Para obtener información sobre qué registro de agentes de escucha reciben el `WriteException` los mensajes del método, vea [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Puede cambiar los agentes de escucha de registro predeterminado. Para obtener más información, vea [Trabajar con registros de aplicaciones](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para las sobrecargas que no toman el `id` argumento, el identificador que se escriben en el registro se define en la siguiente tabla.  
  
|`severity`|Valor predeterminado `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `WriteException` método.  
  
|En|Vea|  
|--------|---------|  
|Escribir información de excepción en los agentes de escucha de registro de eventos de la aplicación.|[Registrar excepciones](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinar dónde `Log` escribe información.|[Tutorial: Determinar el lugar en el que My.Application.Log escribe la información](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|------------------|---------------|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 En este ejemplo se muestra cómo usar el `My.Application.Log.WriteException` método para registrar excepciones. Quite la marca de comentario de las líneas `Dim` y `MsgBox` para generar una excepción <xref:System.NullReferenceException>. Para obtener más información, consulte [Cómo: registrar excepciones](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Puede ejecutar este ejemplo de código sólo dentro de una aplicación cliente. Cambio `My.Application.Log.WriteException` a `My.Log.WriteException` para aplicaciones Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="ex" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El tipo de mensaje no se corresponde con ninguno de los valores de la enumeración <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código con confianza parcial que llama al método, pero escribe en un agente de escucha del registro de eventos que requiere plena confianza.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabajar con registros de aplicaciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Cómo: Registrar excepciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Tutorial: Determinar el lugar en el que My.Application.Log escribe la información</related>
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberSignature Language="F#" Value="member this.WriteException : Exception * System.Diagnostics.TraceEventType * string * int -&gt; unit" Usage="log.WriteException (ex, severity, additionalInfo, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">Obligatorio. Excepción que se va a registrar.</param>
        <param name="severity">El tipo de mensaje. De manera predeterminada, es <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Cadena que se va a anexar al mensaje. De manera predeterminada, es una cadena vacía.</param>
        <param name="id">Identificador de mensaje, que se utiliza normalmente para la correlación. De manera predeterminada, está relacionado con <c>entryType</c> tal y como se describe en la sección Comentarios de la tabla.</param>
        <summary>Escribe la información de excepciones en los agentes de escucha de registro de la aplicación</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `WriteException` método escribe la información contenida en una excepción para los agentes de escucha de registro de eventos de la aplicación.  
  
 En las aplicaciones cliente, el `Log` objeto está disponible a través de la `My.Application.Log` objeto. En las aplicaciones Web, el `Log` objeto está disponible a través de la `My.Log` objeto.  
  
 Para obtener información sobre qué registro de agentes de escucha reciben el `WriteException` los mensajes del método, vea [Walkthrough: Determining Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Puede cambiar los agentes de escucha de registro predeterminado. Para obtener más información, vea [Trabajar con registros de aplicaciones](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Para las sobrecargas que no toman el `id` argumento, el identificador que se escriben en el registro se define en la siguiente tabla.  
  
|`severity`|Valor predeterminado `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 En la tabla siguiente se muestra ejemplos de tareas que implican la `WriteException` método.  
  
|En|Vea|  
|--------|---------|  
|Escribir información de excepción en los agentes de escucha de registro de eventos de la aplicación.|[Registrar excepciones](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Determinar dónde `Log` escribe información.|[Tutorial: Determinar el lugar en el que My.Application.Log escribe la información](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Disponibilidad por tipo de proyecto  
  
|Tipo de proyecto|Disponible|  
|------------------|---------------|  
|Aplicación Windows|**Sí**|  
|Biblioteca de clases|**Sí**|  
|Aplicación de consola|**Sí**|  
|Biblioteca de controles de Windows|**Sí**|  
|Biblioteca de controles Web|No|  
|Servicio de Windows|**Sí**|  
|Sitio web|**Sí**|  
  
   
  
## Examples  
 En este ejemplo se muestra cómo usar el `My.Application.Log.WriteException` método para registrar excepciones. Quite la marca de comentario de las líneas `Dim` y `MsgBox` para generar una excepción <xref:System.NullReferenceException>. Para obtener más información, consulte [Cómo: registrar excepciones](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Puede ejecutar este ejemplo de código sólo dentro de una aplicación cliente. Cambio `My.Application.Log.WriteException` a `My.Log.WriteException` para aplicaciones Web.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="ex" /> es <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">El tipo de mensaje no se corresponde con ninguno de los valores de la enumeración <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Código con confianza parcial que llama al método, pero escribe en un agente de escucha del registro de eventos que requiere plena confianza.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controla la capacidad para tener acceso a archivos y carpetas. Enumeración asociada: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
        <related type="Article" href="~/docs/visual-basic/language-reference/objects/index.md">Objetos (Visual Basic)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/2581afd1-5791-4bc4-86b2-46244e9fe468">Trabajar con registros de aplicaciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/a26c60e2-ae39-444a-aebb-33eccadc0eeb">Cómo: Registrar excepciones en Visual Basic</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5b70143a-7741-45f2-ae1d-03324a3a4189">Tutorial: Determinar el lugar en el que My.Application.Log escribe la información</related>
      </Docs>
    </Member>
  </Members>
</Type>