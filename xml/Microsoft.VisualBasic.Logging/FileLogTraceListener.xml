<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa5ff254194dbb877eac42c4dd1549a8e24421b9" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37710647" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona un agente de escucha simple que dirige el resultado del registro a un archivo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase proporciona funciones de mantenimiento automatizadas para archivar los archivos de registro según sea necesario, en forma diaria o por aplicación. Esta funcionalidad de archivado automático ayuda a reducir las responsabilidades de mantenimiento de los desarrolladores y administradores.  
  
 Una instancia de <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> pueden agregarse a la <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> o <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> colecciones para redirigir la salida de registro a un archivo de texto. También se pueden agregar instancias de esta clase para `My.Application.Log` o `My.Log` (para aplicaciones Web) en aplicaciones de Visual Basic. Para obtener más información, consulte [Tutorial: cambiar Where My.Application.Log Writes Information](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md)`.`  
  
 Las principales características de esta clase son:  
  
1.  *Funcionalidad de archivado*. Los archivos de registro generados por esta clase se denominan según el nombre base y la fecha, junto con un número para distinguir el archivo de registro de versiones sucesivas del registro. Se crean nuevos archivos de registro según sea necesario.  
  
     La forma explícita del nombre de archivo es `baseName`[-`dateStamp`] [-`version`]. log, donde:  
  
    -   El `baseName` parte es el nombre de registro fundamental, especificado por el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> propiedad.  
  
    -   El `dateStamp` parte tiene el formato "Aaaa-MM-DD" y se muestra cuando <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> es <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> o <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
    -   Si se necesita más de un archivo de registro con el mismo `baseName` y `dateStamp`, `version` parte, un positivo `Integer`, se agrega al nombre de archivo.  
  
2.  *Varias instancias de clase*. Si una instancia de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase escribe en un archivo que está en uso:  
  
    -   La clase comparte el archivo si está usando otra instancia de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase en el mismo proceso.  
  
    -   La clase crea un nuevo archivo de registro con el siguiente nombre disponible si el archivo está siendo utilizado por otro proceso.  
  
3.  *Seguridad para subprocesos*. La <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase es segura para subprocesos. Esto le permite escribir sin ningún riesgo mensajes en el registro desde varios subprocesos sin utilizar bloqueos.  
  
 **Ubicación del archivo de registro**  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> propiedad toma un <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeración para especificar uno de los directorios típicos para escribir el archivo de registro.  
  
-   Para escribir el registro a otra ubicación, establezca el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> propiedad en esa ubicación.  
  
 **Nombre de archivo de registro**  
  
-   El nombre base del archivo de registro especificado por el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> propiedad.  
  
-   El nombre de archivo de registro actual se puede leer desde el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> propiedad. Que se deriva algunas otras propiedades y el estado actual de los registros del sistema de archivos.  
  
 **Mantenimiento del registro**  
  
-   La frecuencia mínima para la creación de nuevos archivos de registro viene determinada por la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> propiedad. Cuando el valor es <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> o <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>, se crea un nuevo archivo de registro al menos una vez cada día o semana, y una marca de fecha se incorpora a la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nombre.  
  
-   El tamaño máximo (en bytes) del archivo de registro viene determinada por la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> propiedad. Si el tamaño de archivo de registro supera este tamaño, los mensajes adicionales que se escriben en el registro son descartados y, según la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> propiedad, se produce una excepción.  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> propiedad determina cuánto espacio libre (en bytes) debe estar disponible. Esto ayuda a garantizar que la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase no consuma todo el espacio disponible en disco. Use la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> propiedad para especificar el comportamiento de registro se escribe cuando hay menos de <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> bytes libres.  
  
 **Configuración de salida de archivo de registro**  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> propiedad especifica si la secuencia subyacente se debe vaciar automáticamente después de cada escritura al archivo de registro.  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> propiedad especifica si se debe anexar mensajes en el archivo de registro actual, si permite o escribirlos en un archivo de registro.  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> propiedad especifica la cadena que se utiliza para delimitar los campos dentro de un mensaje de registro.  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> propiedad especifica la codificación que se utilizará al crear un nuevo archivo de registro.  
  
 **Salida de archivo de registro**  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> y <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> métodos escriben mensajes en el archivo de registro. Estos métodos comprueban la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> propiedad, junto con todos los registros existentes con el mismo nombre base para determinar si se debe crear un nuevo registro.  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> método vuelca todos los mensajes actualmente en el búfer de salida al archivo de registro.  
  
-   El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> método cierra el archivo de registro para que se puede usar por otros procesos.  
  
 **Habilitación de salida**  
  
 Debe habilitar la traza o la depuración para utilizar un agente de escucha de seguimiento. La sintaxis siguiente es específica del compilador. Si usa los compiladores que no sean de C# o Visual Basic, consulte la documentación del compilador.  
  
-   Para habilitar la depuración en C#, agregue el `/d:DEBUG` marca a la línea de comandos del compilador al compilar el código, o puede agregar `#define DEBUG` a la parte superior del archivo. En Visual Basic, agregue el `/d:DEBUG=True` marca a la línea de comandos del compilador.  
  
-   Para habilitar el seguimiento en C#, agregue el `/d:TRACE` marca a la línea de comandos del compilador al compilar el código, o agregue `#define TRACE` a la parte superior del archivo. En Visual Basic, agregue el `/d:TRACE=True` marca a la línea de comandos del compilador.  
  
 Para establecer el nivel del agente de escucha, edite el archivo de configuración de la aplicación. En este archivo, puede agregar un agente de escucha, establezca su tipo y establezca sus parámetros, quitar un agente de escucha o borrar todos los agentes de escucha previamente establecidos por la aplicación. El archivo de configuración se debe dar formato similar al ejemplo siguiente.  
  
 Para que ejecutar este ejemplo, debe proporcionar el nombre completo del ensamblado. Para obtener información acerca de cómo obtener el nombre completo del ensamblado, vea [nombres de ensamblado](~/docs/framework/app-domains/assembly-names.md).  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> y establece el nombre.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> con el nombre predeterminado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método establece el nombre de instancia de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase FileLogTraceListener.  
  
 Puede tener acceso el nombre de instancia a través de la <xref:System.Diagnostics.TraceListener.Name%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see langword="String" />. Nombre del objeto de la instancia.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> con el nombre proporcionado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método establece el nombre de instancia de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase `name`.  
  
 Puede tener acceso a considerar el nombre de instancia el <xref:System.Diagnostics.TraceListener.Name%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina si el resultado se va a anexar al archivo actual o escribir en un nuevo archivo.</summary>
        <value>Un valor de tipo <see langword="Boolean" />; <see langword="True" /> indica que el resultado se anexa al archivo actual y <see langword="False" /> indica que el resultado se escribe en un nuevo archivo. El valor predeterminado de esta propiedad es <see langword="True" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> propiedad es `False`, la salida se escribe en un archivo nuevo. Cuando la propiedad es `True`, el resultado se anexa al archivo actual, a menos que:  
  
-   El archivo de salida está bloqueado por otro proceso. En esta situación, se crea un nuevo archivo de registro con un número de versión que se incorpora a la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nombre.  
  
-   El tamaño de archivo actual es mayor que el valor del <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> permite la propiedad. En esta situación, los mensajes adicionales son descartados y, según la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> propiedad, se produce una excepción.  
  
-   El nombre de archivo existente está actualizado según la programación de creación de registro especificada por el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> propiedad. En esta situación, se crea un nuevo archivo de registro y la marca de fecha se incorpora en el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> nombre.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica si al escribir en el archivo de registro se vacía el búfer.</summary>
        <value>
          <see langword="Boolean" />; <see langword="True" /> indica que la secuencia se vacía después cada escritura; de lo contrario, las entradas de registro se almacenan en el búfer y se escriben más eficazmente. El valor predeterminado de esta propiedad es <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `False` para el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> propiedad proporciona el mejor rendimiento para la mayoría de las aplicaciones, porque es más eficaz para escribir varios mensajes en el archivo de registro al mismo tiempo. Puede usar el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> el búfer de salida del método para vaciar los mensajes actualmente en el archivo de registro. También puede usar el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> método, que vacía implícitamente la secuencia antes de cerrar el archivo de registro.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre base de los archivos de registro, que se utiliza para crear su nombre completo.</summary>
        <value>
          <see langword="String" />. Nombre base de los archivos de registro. El valor predeterminado es el nombre de producto de la aplicación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> propiedad determina el nombre base para los archivos de registro que el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase escribe en.  
  
 El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> propiedad proporciona el nombre completo del archivo de registro actual. Se genera según la ruta de acceso del registro, el nombre base, la fecha y un número para distinguirlo de distintas versiones del registro. Se crean nuevos archivos de registro según sea necesario.  
  
 La forma explícita del nombre del archivo de registro completo es `path` \\ `baseName`[-`dateStamp`] [-`iteration`]. log, donde  
  
-   El `path` viene determinado por la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> propiedad y, si ese valor de propiedad se establece en <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> propiedad.  
  
-   El `baseName` parte es el nombre de registro fundamental, especificado por el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> propiedad.  
  
-   El `dateStamp` parte tiene el formato "Aaaa-MM-DD" y se muestra cuando <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> está establecido en <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> o <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
-   Si se necesita más de un archivo de registro con el mismo `baseName` y `dateStamp`, `iteration` parte, un positivo `Integer`, se agrega al nombre de archivo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra la secuencia subyacente del archivo de registro actual y libera los recursos asociados a la secuencia actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No es necesario llamar a la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> método explícitamente, porque el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase administra la secuencia subyacente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el directorio del archivo de registro cuando el valor de la propiedad <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> se establece en <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />.</summary>
        <value>
          <see langword="String" />, que es el nombre del directorio del archivo de registro. El valor predeterminado de esta propiedad es el directorio del usuario para los datos de la aplicación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> propiedad está establecida, también establece la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> propiedad <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>.  
  
 El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> propiedad producirá una excepción si el directorio no se puede resolver.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el delimitador utilizado para delimitar los campos en un mensaje de registro.</summary>
        <value>
          <see langword="String" />, que es el delimitador utilizado para los campos en un mensaje de registro. El valor predeterminado de esta propiedad es el carácter de tabulación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> propiedad le permite cambiar el delimitador predeterminado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina qué debe hacerse cuando se escribe en el archivo de registro y hay menos espacio disponible en disco que el especificado por la propiedad <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />. Determina lo que se debe hacer cuando se intenta escribir en el archivo de registro y hay menos espacio disponible en disco que el especificado por la propiedad <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />, o si el tamaño del archivo de registro es mayor que el valor permitido por la propiedad <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />. El valor predeterminado es <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> propiedad está establecida en <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages>, los mensajes de registro se descartan silenciosamente si no hay suficiente espacio en disco reservado. Este es el comportamiento predeterminado y evitan que las aplicaciones sencillas genere un error si el disco llega a estar demasiado lleno.  
  
 Aplicaciones más sólidas pueden establecer el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> propiedad <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException>y agregue `Try...Catch` bloques alrededor de todo el código que escribe en el registro.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="True" /> libera los recursos administrados y no administrados; <see langword="False" /> libera sólo los recursos no administrados.</param>
        <summary>Cierra la secuencia subyacente y, de manera opcional, libera los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el parámetro `disposing` es `True`, este método libera todos los recursos retenidos por los objetos administrados a los que el control <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> hace referencia. Este método invoca al método `Dispose` de cada uno de los objetos a los que se hace referencia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> puede llamarse varias veces por otros objetos. Al invalidar <see langword="Dispose" />, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />.  Este método llama a la <see langword="Dispose" /> método de la clase base, <see langword="Dispose" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la codificación que se va a utilizar al crear un nuevo archivo de registro.</summary>
        <value>
          <see cref="T:System.Text.Encoding" />, que es la codificación que se va a utilizar al crear un nuevo archivo de registro. El valor predeterminado de esta propiedad es <see cref="T:System.Text.UTF8Encoding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al anexar texto a un archivo de registro existente, la codificación para ese archivo se usa en lugar de la codificación especificada por el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Vacía la secuencia subyacente que escribe en el archivo de registro actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> método para escribir todos los datos modificados en el archivo de registro actual.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre completo del archivo de registro actual.</summary>
        <value>
          <see langword="String" />, que es el nombre completo del archivo de registro actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> propiedad proporciona el nombre completo del archivo de registro actual. Se genera según la ruta de acceso del registro, el nombre base, la fecha y un número para distinguirlo de distintas versiones del registro. Se crean nuevos archivos de registro según sea necesario.  
  
 La forma explícita del nombre completo del archivo de registro es `path` \\ `baseName`[-`dateStamp`] [-`iteration`]. log, donde:  
  
-   El `path` viene determinado por la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> propiedad y, si ese valor de propiedad se establece en <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>, el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> propiedad.  
  
-   El `baseName` parte es el nombre de registro fundamental, especificado por el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> propiedad.  
  
-   El `dateStamp` parte tiene el formato aaaa-MM-DD, y se muestra al <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> es <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> o <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>.  
  
-   Si se necesita más de un archivo de registro con el mismo `baseName` y `dateStamp`, `iteration` parte, un positivo `Integer`, se agrega al nombre de archivo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedAttributes : unit -&gt; string[]&#xA;override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene los atributos de configuración XML personalizados que admite el agente de escucha de seguimiento.</summary>
        <returns>Una matriz de <see langword="String" /> que contiene los atributos de configuración XML reconocidos por este agente de escucha.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los atributos personalizados para el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> se puede usar en el archivo de configuración XML para controlar el comportamiento de una instancia de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase. Uso de cualquier otro atributo, produce una excepción de configuración.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica si el nombre de host del equipo de registro debe incluirse en el resultado.</summary>
        <value>
          <see langword="Boolean" />. Use <see langword="True" /> si debe incluirse el identificador de host; de lo contrario, use <see langword="False" />. El valor predeterminado es <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la propiedad para configurar el comportamiento de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> y <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> métodos.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ubicación de los archivos de registro.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />, que es la ubicación del archivo de registro. El valor predeterminado es <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> propiedad para establecer la ruta de acceso de registro en una de las rutas de acceso predefinidas, determinados por la <xref:Microsoft.VisualBasic.Logging.LogFileLocation> valores de enumeración.  
  
|**Valor de ubicación**|**Path**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|La ruta de acceso para los datos de aplicación que se comparten entre todos los usuarios, con el formato:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Un valor típico de `BasePath` es:<br /><br /> C:\Documents and Settings\All Users\Application Data<br /><br /> Los valores de `CompanyName`, `ProductName`, y `ProductVersion` proceden del ensamblado.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|Ruta de acceso del archivo ejecutable que inició la aplicación.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|La ruta de acceso para los datos de aplicación de un usuario, con el formato:<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> Un valor típico de `BasePath` es:<br /><br /> C:\Documents and Settings\\`username`\Application Data<br /><br /> Los valores de `CompanyName`, `ProductName`, y `ProductVersion` proceden del ensamblado.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|La ruta de acceso de carpeta temporal del sistema actual.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|Si la cadena especificada por <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> está vacía, no, a continuación, usarla como la ruta de acceso; de lo contrario, utilice la ruta de acceso para los datos de aplicación de un usuario.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina qué fecha se va a incluir en los nombres de los archivos de registro.</summary>
        <value>
          <see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />. Indica qué fecha se va a incluir en los nombres de los archivos de registro. El valor predeterminado es <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asignar uno de los <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> los valores de enumeración del <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> propiedad para especificar qué fecha se va a incluir en los nombres de los archivos de registro.  
  
 El formato de la fecha es aaaa-MM-DD. Para obtener más información sobre el formato del nombre del archivo de registro, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
|**Valor de LogFileCreationSchedule**|**Fecha en el nombre de archivo de registro**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|Incluye la fecha actual en el nombre del archivo de registro.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|No incluye la fecha en el nombre del archivo de registro.|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|Incluye el primer día de la semana actual en el nombre del archivo de registro.<br /><br /> La semana comienza el sábado.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tamaño máximo permitido del archivo de registro, expresado en bytes.</summary>
        <value>
          <see langword="Long" />. Es el tamaño máximo permitido del archivo de registro, en bytes. El valor predeterminado es 5000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta propiedad para asegurarse de que los archivos de registro no aumente demasiados.  
  
 Si el registro de tamaño de archivo (en bytes) es mayor que el valor de esta propiedad, a continuación, cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase intenta escribir un mensaje en el registro, se descarta el mensaje y el error es silenciosa o una excepción se produce según el valor de la <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>propiedad. En caso contrario, el mensaje se escribe en el registro, si la cantidad de espacio libre en disco (en bytes) es menor que <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Se genera cuando esta propiedad se establece en un valor menor que 1000.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la cantidad necesaria de espacio disponible en disco, en bytes, para que los mensajes puedan escribirse en el archivo de registro.</summary>
        <value>
          <see langword="Long" />. Es la cantidad necesaria de espacio disponible en disco. El valor predeterminado es 10000000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta propiedad para asegurarse de que los archivos de registro no llenar completamente el disco.  
  
 Si la cantidad de disco libre espacio (en bytes) es menor que el valor de esta propiedad, a continuación, cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> clase intenta escribir un mensaje en el registro, se descarta el mensaje y el error es silenciosa o una excepción se produce según el valor de la < C2 > <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>  propiedad. En caso contrario, el mensaje se escribe en el registro, si el tamaño de archivo de registro (en bytes) es mayor que <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Se genera cuando esta propiedad se establece en un valor menor que 0.</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe los datos de seguimiento en el archivo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> los métodos no están diseñados para ser llamado por el código de la aplicación. Estos métodos son invocados por los miembros de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir datos de seguimiento para la salida.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">Objeto <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre del origen de seguimiento que invocó este método.</param>
        <param name="eventType">Uno de los valores de enumeración de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="data">Información de seguimiento que se va a emitir.</param>
        <summary>Escribe la información de seguimiento, un objeto de datos y la información de evento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método:  
  
1.  Da formato a la información de contexto y los datos de salida.  
  
2.  Crea un nuevo archivo de registro, si es necesario.  
  
3.  Escribe la información en el archivo de registro.  
  
 Para obtener más información sobre la creación de nuevos archivos de registro, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 En la tabla siguiente enumera los campos de salida en el orden en que aparecen. Los campos están delimitados por la cadena que el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> propiedad especifica y van seguidas de un terminador de línea.  
  
|**Campo**|**Condición de salida**|**Descripción**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|El valor de `name`.|  
|`severity`|Always|El nombre del valor de enumeración de `eventType`.|  
|`id`|Always|Representación de cadena de `id`.|  
|`message`|Always|Representación de cadena de `data`.|  
|`callStack`|Cuando el <xref:System.Diagnostics.TraceOptions.Callstack> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.Callstack%2A> propiedad de `eventCache`.|  
|`CorrelationID`|Cuando el <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> propiedad de `eventCache`.|  
|`DateTime`|Cuando el <xref:System.Diagnostics.TraceOptions.DateTime> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.DateTime%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`ProcessID`|Cuando el <xref:System.Diagnostics.TraceOptions.ProcessId> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`ThreadID`|Cuando el <xref:System.Diagnostics.TraceOptions.ThreadId> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> propiedad de `eventCache`.|  
|`Timestamp`|Cuando el <xref:System.Diagnostics.TraceOptions.Timestamp> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`HostName`|Cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> propiedad es `True`.|El nombre del equipo.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit&#xA;override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Objeto <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre del origen de seguimiento que invocó este método.</param>
        <param name="eventType">Uno de los valores de enumeración de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="data">Matriz de objetos que se van a emitir como datos.</param>
        <summary>Escribe la información de seguimiento, una matriz de objetos de datos y la información de evento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método:  
  
1.  Da formato a la información de contexto y los datos de salida,  
  
2.  Si es necesario, se crea un nuevo archivo de registro  
  
3.  Escribe la información en el archivo de registro.  
  
 Para obtener más información sobre la creación de nuevos archivos de registro, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Esta tabla enumeran los campos de salida en el orden en que aparecen. Los campos están delimitados por la cadena que el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> propiedad especifica y van seguidas de un terminador de línea.  
  
|**Campo**|**Condición de salida**|**Descripción**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|El valor de `name`.|  
|`severity`|Always|El nombre del valor de enumeración de `eventType`.|  
|`id`|Always|Representación de cadena de `id`.|  
|`message`|Always|La cadena que consta de la representación de cadena de cada elemento de `data`, separados por <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>.|  
|`callStack`|Cuando el <xref:System.Diagnostics.TraceOptions.Callstack> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.Callstack%2A> propiedad de `eventCache`.|  
|`CorrelationID`|Cuando el <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> propiedad de `eventCache`.|  
|`DateTime`|Cuando el <xref:System.Diagnostics.TraceOptions.DateTime> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.DateTime%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`ProcessID`|Cuando el <xref:System.Diagnostics.TraceOptions.ProcessId> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`ThreadID`|Cuando el <xref:System.Diagnostics.TraceOptions.ThreadId> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> propiedad de `eventCache`.|  
|`Timestamp`|Cuando el <xref:System.Diagnostics.TraceOptions.Timestamp> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`HostName`|Cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> propiedad es `True`.|El nombre del equipo.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Escribe información de eventos y de seguimiento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> los métodos no están diseñados para ser llamado por el código de la aplicación. Estos métodos son invocados por los miembros de la <xref:System.Diagnostics.Debug>, <xref:System.Diagnostics.Trace>, y <xref:System.Diagnostics.TraceSource> clases para escribir datos de seguimiento para la salida.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">Objeto <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre del origen de seguimiento que invocó este método.</param>
        <param name="eventType">Uno de los valores de enumeración de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="message">Mensaje que se va a escribir.</param>
        <summary>Escribe la información de seguimiento, un mensaje y la información de evento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método:  
  
1.  Da formato a la información de contexto y los datos de salida.  
  
2.  Crea un nuevo archivo de registro, si es necesario.  
  
3.  Escribe la información en el archivo de registro.  
  
 Para obtener más información sobre la creación de nuevos archivos de registro, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Esta tabla enumeran los campos de salida en el orden en que aparecen. Los campos están delimitados por la cadena que el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> propiedad especifica y van seguidas de un terminador de línea.  
  
|**Campo**|**Condición de salida**|**Descripción**|  
|---------------|--------------------------|---------------------|  
|`source`|Siempre.|El valor de `name`.|  
|`severity`|Siempre.|El nombre del valor de enumeración de `eventType`.|  
|`id`|Siempre.|Representación de cadena de `id`.|  
|`message`|Siempre.|El valor de `message`.|  
|`callStack`|Cuando el <xref:System.Diagnostics.TraceOptions.Callstack> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.Callstack%2A> propiedad de `eventCache`.|  
|`CorrelationID`|Cuando el <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> propiedad de `eventCache`.|  
|`DateTime`|Cuando el <xref:System.Diagnostics.TraceOptions.DateTime> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.DateTime%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`ProcessID`|Cuando el <xref:System.Diagnostics.TraceOptions.ProcessId> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`ThreadID`|Cuando el <xref:System.Diagnostics.TraceOptions.ThreadId> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> propiedad de `eventCache`.|  
|`Timestamp`|Cuando el <xref:System.Diagnostics.TraceOptions.Timestamp> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`HostName`|Cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> propiedad es `True`.|El nombre del equipo.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit&#xA;override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">Objeto <see cref="T:System.Diagnostics.TraceEventCache" /> que contiene el identificador de proceso actual, el identificador de subproceso e información sobre el seguimiento de la pila.</param>
        <param name="source">Nombre del origen de seguimiento que invocó este método.</param>
        <param name="eventType">Uno de los valores de enumeración de <see cref="T:System.Diagnostics.TraceEventType" />.</param>
        <param name="id">Identificador numérico para el evento.</param>
        <param name="format">Cadena de formato que contiene cero o más elementos de formato, que corresponden a objetos de la matriz <c>args</c>.</param>
        <param name="args">Matriz de <see langword="Object" /> que contiene cero o más objetos a los que se va a aplicar formato.</param>
        <summary>Escribe la información de seguimiento, una matriz de objetos con formato y la información de evento en el archivo de salida o el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método:  
  
1.  Da formato a la información de contexto y los datos de salida.  
  
2.  Crea un nuevo un nuevo archivo de registro, si es necesario.  
  
3.  Escribe la información en el archivo de registro.  
  
 Para obtener más información sobre cómo crear el nuevo archivo de registro, consulte <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>.  
  
 Esta tabla enumeran los campos de salida en el orden en que aparecen. Los campos están delimitados por la cadena que el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> especifica propiedad y seguido de un terminador de línea.  
  
|**Campo**|**Condición de salida**|**Descripción**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|El valor de `name`.|  
|`severity`|Always|El nombre del valor de enumeración de `eventType`.|  
|`id`|Always|Representación de cadena de `id`.|  
|`message`|Always|Los datos de `args` formateado con el `format` cadena y usa la referencia cultural invariable para conversiones de cadenas.|  
|`callStack`|Cuando el <xref:System.Diagnostics.TraceOptions.Callstack> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.Callstack%2A> propiedad de `eventCache`.|  
|`CorrelationID`|Cuando el <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> propiedad de `eventCache`.|  
|`DateTime`|Cuando el <xref:System.Diagnostics.TraceOptions.DateTime> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.DateTime%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`ProcessID`|Cuando el <xref:System.Diagnostics.TraceOptions.ProcessId> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`ThreadID`|Cuando el <xref:System.Diagnostics.TraceOptions.ThreadId> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|El <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> propiedad de `eventCache`.|  
|`Timestamp`|Cuando el <xref:System.Diagnostics.TraceOptions.Timestamp> marca se establece en el <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> propiedad.|La representación de cadena de la <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> propiedad de `eventCache`. La referencia cultural se usa para la conversión de cadena.|  
|`HostName`|Cuando el <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> propiedad es `True`.|El nombre del equipo.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />. Mensaje personalizado que se va a escribir.</param>
        <summary>Escribe literalmente un mensaje en el disco, sin información de contexto adicional.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A> método escribe un mensaje concreto en el archivo de registro, sin ninguna información de contexto adicional.  
  
 Use uno de los <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> métodos debe incluir la información de contexto en la salida del registro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <see langword="String" />. Mensaje personalizado que se va a escribir.</param>
        <summary>Escribe un mensaje literal en el disco, seguido del terminador de línea actual y sin ninguna información de contexto adicional.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A> método escribe un mensaje concreto en el archivo de registro, sin ninguna información de contexto adicional.  
  
 Use uno de los <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> métodos debe incluir la información de contexto en la salida del registro.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>