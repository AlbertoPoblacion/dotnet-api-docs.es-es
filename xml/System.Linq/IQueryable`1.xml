<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ce37fbee5e58b17172d46f7cc39389015ce470a5" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51324446" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">El tipo de los datos del origen de datos.</typeparam>
    <summary>Proporciona características para evaluar consultas con respecto a un origen de datos concreto en el que se conoce el tipo de datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Linq.IQueryable%601> interfaz está diseñada para la implementación en los proveedores de consultas.  
  
 Esta interfaz se hereda el <xref:System.Collections.Generic.IEnumerable%601> interfaz para que si representa una consulta, se pueden enumerar los resultados de esa consulta. La enumeración fuerza el árbol de expresión asociado a un <xref:System.Linq.IQueryable%601> objeto que se va a ejecutar. Las consultas que no devuelven resultados enumerables se ejecutan cuando el <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> se llama al método.  
  
 La definición de "ejecución de un árbol de expresión" es específica para un proveedor de consultas. Por ejemplo, puede implicar traducir el árbol de expresión en un lenguaje de consulta adecuado para un origen de datos subyacente.  
  
 El <xref:System.Linq.IQueryable%601> interfaz permite que las consultas sean polimórficas. Es decir, dado que una consulta en un `IQueryable` origen de datos se representa como un árbol de expresión, se puede ejecutar en diferentes tipos de orígenes de datos.  
  
 El `static` (`Shared` en Visual Basic) los métodos definidos en la clase <xref:System.Linq.Queryable> (excepto para <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, y <xref:System.Linq.Queryable.ThenByDescending%2A>) extienden los objetos de tipos que implementan la <xref:System.Linq.IQueryable%601> interfaz.  
  
 Para obtener más información sobre cómo crear su propio proveedor LINQ, vea [LINQ: compilar un proveedor IQueryable](http://go.microsoft.com/fwlink/?LinkID=112370) en los Blogs de MSDN.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>