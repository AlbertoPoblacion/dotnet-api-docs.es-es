<Type Name="UdpClient" FullName="System.Net.Sockets.UdpClient">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="245b7bab0477b3744774cfadd7975c02388156f5" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36474045" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class UdpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UdpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.UdpClient" />
  <TypeSignature Language="VB.NET" Value="Public Class UdpClient&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class UdpClient : IDisposable" />
  <TypeSignature Language="F#" Value="type UdpClient = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona servicios de red de Protocolo de datagramas de usuarios (UDP).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Net.Sockets.UdpClient> clase proporciona métodos sencillos para enviar y recibir datagramas UDP sin conexión en modo de bloqueo sincrónico. Dado que UDP es un protocolo de transporte sin conexión, no es necesario establecer una conexión a host remoto antes de enviar y recibir datos. Sin embargo, tiene la opción de establecer un host remoto predeterminado en una de las dos maneras siguientes:  
  
-   Cree una instancia de la <xref:System.Net.Sockets.UdpClient> clase utilizando el nombre de host remoto y el número de puerto como parámetros.  
  
-   Cree una instancia de la <xref:System.Net.Sockets.UdpClient> clase y, a continuación, llame a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método.  
  
 Puede usar cualquiera de los métodos de envío proporcionados en el <xref:System.Net.Sockets.UdpClient> para enviar datos a un dispositivo remoto. Use la <xref:System.Net.Sockets.UdpClient.Receive%2A> método para recibir datos de los hosts remotos.  
  
> [!NOTE]
>  No llame a <xref:System.Net.Sockets.UdpClient.Send%2A> con un nombre de host o <xref:System.Net.IPEndPoint> si ya ha especificado un host remoto predeterminado. Si lo hace, <xref:System.Net.Sockets.UdpClient> se iniciará una excepción.  
  
 <xref:System.Net.Sockets.UdpClient> métodos también permiten enviar y recibir datagramas de multidifusión. Use la <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> método suscribirse un <xref:System.Net.Sockets.UdpClient> a un grupo de multidifusión. Use la <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> método cancelar la suscripción a un <xref:System.Net.Sockets.UdpClient> de un grupo de multidifusión.  
  
   
  
## Examples  
 El ejemplo siguiente se establece un <xref:System.Net.Sockets.UdpClient> conexión mediante el nombre de host www.contoso.com en el puerto 11000. Se envía un mensaje de cadena pequeño a dos equipos host remoto independiente. El <xref:System.Net.Sockets.UdpClient.Receive%2A> método bloquea la ejecución hasta que se recibe un mensaje. Mediante el <xref:System.Net.IPEndPoint> pasado a <xref:System.Net.Sockets.UdpClient.Receive%2A>, se revela la identidad del host responde.  
  
 [!code-cpp[Classic UdpClientExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClientExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClientExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClientExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClientExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClientExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">Para establecer una conexión saliente o Aceptar una solicitud entrante.</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor crea un nuevo <xref:System.Net.Sockets.UdpClient> y permite que el proveedor de servicio subyacente asignar el más apropiado local IPv4 dirección y número de puerto. Si se utiliza este constructor, la <xref:System.Net.Sockets.UdpClient> instancia se establece con una familia de direcciones de IPv4 que no se cambiaron o se sobrescriben con una llamada de método de conectar con un destino de IPv6.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 Este constructor no es apropiado para unirse a un grupo de multidifusión porque no se realiza el enlace de socket. Además, funciona únicamente con tipos de dirección IPv4.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el constructor predeterminado para crear una instancia de la <xref:System.Net.Sockets.UdpClient> clase.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">Número de puerto local desde el que se desea establecer comunicación.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.Sockets.UdpClient" /> y la enlaza con el número de puerto local especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor crea una subyacente <xref:System.Net.Sockets.Socket> y la enlaza con el número de puerto desde el que desea comunicarse. Utilice este constructor si solo está interesado en establecer el número de puerto local. El proveedor de servicios subyacente asignará la dirección IP local. Si se pasa 0 al constructor, el proveedor de servicios subyacente asignará a un número de puerto. Si se utiliza este constructor, la <xref:System.Net.Sockets.UdpClient> instancia se establece con una familia de direcciones de IPv4 que no se cambiaron o se sobrescriben con una llamada de método de conectar con un destino de IPv6.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 Este constructor sólo funciona con tipos de dirección IPv4.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar un número de puerto local para crear una instancia de la <xref:System.Net.Sockets.UdpClient> clase.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="port" /> es mayor que <see cref="F:System.Net.IPEndPoint.MaxPort" /> o menor que <see cref="F:System.Net.IPEndPoint.MinPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.IPEndPoint -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <see cref="T:System.Net.IPEndPoint" /> que representa el extremo local con el que desea enlazar la conexión UDP.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.Sockets.UdpClient" /> y la enlaza con el extremo local especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor crea un nuevo <xref:System.Net.Sockets.UdpClient> y lo asocia a la <xref:System.Net.IPEndPoint> especificado por el `localEP` parámetro. Antes de llamar a este constructor, debe crear un <xref:System.Net.IPEndPoint> con el número de puerto y la dirección IP desde la que se va a enviar y recibir datos. No es necesario especificar un número de puerto y la dirección IP local para enviar y recibir datos. Si no lo hace, el proveedor de servicios subyacente asignará a la más adecuada local dirección IP y puerto número.  
  
 Si se utiliza este constructor, el <xref:System.Net.Sockets.UdpClient> instancia se establece con la familia de direcciones especificada por el `localEP` parámetro que no se cambiaron o se sobrescriben con una llamada de método de conectar con una familia de direcciones diferentes.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear una instancia de la <xref:System.Net.Sockets.UdpClient> clase con un extremo local.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localEP" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient family" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="family">Uno de los valores <see cref="T:System.Net.Sockets.AddressFamily" /> que especifica el esquema de direccionamiento del socket.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `family` parámetro determina si el agente de escucha utiliza una dirección IP versión 4 (IPv4) o una IP versión 6 (IPv6) dirección. Para usar una dirección IPv4, pase el <xref:System.Net.Sockets.AddressFamily.InterNetwork> valor. Para usar una dirección IPv6, pase el <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> valor. Pasar cualquier otro valor hará que el método se producirá una <xref:System.ArgumentException>.  
  
 Si se utiliza este constructor, el <xref:System.Net.Sockets.UdpClient> instancia se establece con la familia de direcciones especificada por el `family` parámetro que no se cambiaron o se sobrescriben con una llamada de método de conectar con una familia de direcciones diferentes.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 El <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> no es adecuado para unirse a un grupo de multidifusión porque no se realiza el enlace de socket.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="family" /> no es <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ni <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (int port, System.Net.Sockets.AddressFamily family);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port, valuetype System.Net.Sockets.AddressFamily family) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer, family As AddressFamily)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(int port, System::Net::Sockets::AddressFamily family);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : int * System.Net.Sockets.AddressFamily -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (port, family)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
      </Parameters>
      <Docs>
        <param name="port">Puerto en el cual se escucharán los intentos de conexión entrantes.</param>
        <param name="family">Uno de los valores <see cref="T:System.Net.Sockets.AddressFamily" /> que especifica el esquema de direccionamiento del socket.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.Sockets.UdpClient" /> y la enlaza con el número de puerto local especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor crea una subyacente <xref:System.Net.Sockets.Socket> y la enlaza con el número de puerto desde el que desea comunicarse.  
  
 El `family` parámetro determina si el agente de escucha utiliza una dirección IP versión 4 (IPv4) o una IP versión 6 (IPv6) dirección. Para usar una dirección IPv4, pase el <xref:System.Net.Sockets.AddressFamily.InterNetwork> valor. Para usar una dirección IPv6, pase el <xref:System.Net.Sockets.AddressFamily.InterNetworkV6> valor. Pasar cualquier otro valor hará que el método se producirá una <xref:System.ArgumentException>.  
  
 Si se utiliza este constructor, el <xref:System.Net.Sockets.UdpClient> instancia se establece con la familia de direcciones especificada por el `family` parámetro que no se cambiaron o se sobrescriben con una llamada de método de conectar con una familia de direcciones diferentes.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, consulte en MSDN la documentación de códigos de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un cliente UDP para utilizar en un grupo de multidifusión.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#3)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="family" /> no es <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ni <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> es mayor que <see cref="F:System.Net.IPEndPoint.MaxPort" /> o menor que <see cref="F:System.Net.IPEndPoint.MinPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UdpClient (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UdpClient(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.UdpClient : string * int -&gt; System.Net.Sockets.UdpClient" Usage="new System.Net.Sockets.UdpClient (hostname, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname">Nombre del host DNS (Sistema de nombres de dominio) remoto al que se desea conectar.</param>
        <param name="port">Número de puerto remoto al que se desea conectar.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.Sockets.UdpClient" /> y establece un host remoto predeterminado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa un nuevo <xref:System.Net.Sockets.UdpClient> y establece un host remoto mediante el `hostname` y `port` parámetros. Establecer un host remoto predeterminado es opcional. Si utiliza este constructor, no es necesario especificar un host remoto en cada llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método. Especificar un host remoto predeterminado, limita a solo ese host. Puede cambiar el host remoto predeterminado en cualquier momento mediante una llamada a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método. Si desea especificar un host remoto en la llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método, no utilice este constructor.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear una instancia de la <xref:System.Net.Sockets.UdpClient> clase usando un nombre de host y número de puerto.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostname" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> no se encuentra en el intervalo definido por <see cref="F:System.Net.IPEndPoint.MinPort" /> y <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Active" />
      <MemberSignature Language="VB.NET" Value="Protected Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="System.Net.Sockets.UdpClient.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se ha establecido un host remoto predeterminado.</summary>
        <value>Es <see langword="true" /> si hay una conexión activa; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Clases derivadas de <xref:System.Net.Sockets.UdpClient> puede utilizar esta propiedad para determinar si se ha establecido un host remoto predeterminado. Puede establecer un host remoto predeterminado mediante el constructor correspondiente o mediante una llamada a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método. Si establece un host remoto predeterminado, no puede especificar un host remoto en la llamada a <xref:System.Net.Sockets.UdpClient.Send%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.UdpClient" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="udpClient.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">Valor booleano que especifica si se va a habilitar o deshabilitar NAT transversal.</param>
        <summary>Habilita o deshabilita NAT (Traducción de direcciones de red) transversal en una instancia de <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.AllowNatTraversal%2A> método se utiliza para habilitar o deshabilitar la exploración transversal de NAT para una <xref:System.Net.Sockets.UdpClient> instancia. Puede proporcionarse cruce seguro de NAT mediante Teredo, 6to4 o un túnel ISATAP.  
  
 Cuando el `allowed` parámetro es false, el <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> opción en el socket asociado se establece en <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>. Esto deshabilita explícitamente NAT transversal para una <xref:System.Net.Sockets.UdpClient> instancia.  
  
 Cuando el `allowed` del parámetro es true, el <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> opción en el socket asociado se establece en <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>. Esto puede permitir cruce seguro de NAT para una <xref:System.Net.Sockets.UdpClient> según las reglas de firewall en su lugar en el sistema.  
  
 Una dirección Teredo es una dirección IPv6 con el prefijo de 2001:: / 32. Direcciones de Teredo se devuelve a través de la resolución de nombres DNS normal o enumerar como una dirección IPv6 que se asigna a una interfaz local.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Available">
      <MemberSignature Language="C#" Value="public int Available { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Available" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Available" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Available As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Available { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Available : int" Usage="System.Net.Sockets.UdpClient.Available" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la cantidad de datos recibidos de la red que se pueden leer.</summary>
        <value>El número de bytes de datos recibido de la red.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.Available%2A> propiedad se utiliza para determinar la cantidad de datos en la cola en el búfer de red para su lectura. Si hay datos disponibles, llame a <xref:System.Net.Sockets.NetworkStream.Read%2A> para obtener los datos. Si no hay datos disponibles, el <xref:System.Net.Sockets.UdpClient.Available%2A> propiedad devuelve 0.  
  
 Si el host remoto se apaga o cierra la conexión, el <xref:System.Net.Sockets.UdpClient.Available%2A> propiedad produce un <xref:System.Net.Sockets.SocketException>.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error concreto y consulte la documentación de código de error de la API de Windows Sockets, versión 2, en la biblioteca MSDN en [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library)/ para obtener una descripción detallada de la error.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Net.Sockets.UdpClient.Available%2A> propiedad.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al intentar obtener acceso al socket.</exception>
        <exception cref="T:System.ObjectDisposedException">Se ha cerrado <see cref="T:System.Net.Sockets.Socket" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginReceive(class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginReceive (requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="requestCallback">Delegado de <see cref="T:System.AsyncCallback" /> que hace referencia al método que se invocará cuando la operación se complete.</param>
        <param name="state">Objeto definido por el usuario que contiene información sobre la operación de recepción. Este objeto se pasa al delegado <c>requestCallback</c> cuando finaliza la operación.</param>
        <summary>Recibe un datagrama de un host remoto de forma asincrónica.</summary>
        <returns>Objeto <see cref="T:System.IAsyncResult" /> que hace referencia a la recepción asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrónico <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> operación debe realizarse mediante una llamada a la <xref:System.Net.Sockets.UdpClient.EndReceive%2A> método. Normalmente, se invoca el método por el `requestCallback` delegar.  
  
 Este método no se bloquea hasta que finaliza la operación. Para bloquear hasta que la operación se complete, use la <xref:System.Net.Sockets.UdpClient.Receive%2A> método.  
  
 Para obtener información detallada acerca de cómo utilizar el modelo de programación asincrónico, vea [al llamar a métodos sincrónicos asincrónicamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 El siguiente ejemplo de código usa <xref:System.Net.Sockets.UdpClient.BeginReceive%2A> para recibir una respuesta del servidor de forma asincrónica.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginSend">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envía un datagrama a un host remoto de forma asincrónica.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">Matriz <see cref="T:System.Byte" /> que contiene los datos que se desea enviar.</param>
        <param name="bytes">Número de bytes que se van a enviar.</param>
        <param name="requestCallback">Delegado de <see cref="T:System.AsyncCallback" /> que hace referencia al método que se invocará cuando la operación se complete.</param>
        <param name="state">Objeto definido por el usuario que contiene información sobre la operación. Este objeto se pasa al delegado <c>requestCallback</c> cuando finaliza la operación.</param>
        <summary>Envía un datagrama a un host remoto de forma asincrónica. El destino se especificó anteriormente mediante una llamada a <see cref="Overload:System.Net.Sockets.UdpClient.Connect" />.</summary>
        <returns>Objeto <see cref="T:System.IAsyncResult" /> que hace referencia al envío asincrónico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrónico <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operación debe realizarse mediante una llamada a la <xref:System.Net.Sockets.UdpClient.EndSend%2A> método. Normalmente, se invoca el método por el `requestCallback` delegar.  
  
 Este método no se bloquea hasta que se complete la operación. Para bloquear hasta que finaliza la operación, use uno de los <xref:System.Net.Sockets.UdpClient.Send%2A> sobrecargas del método.  
  
 Para obtener información detallada acerca de cómo utilizar el modelo de programación asincrónico, vea [al llamar a métodos sincrónicos asincrónicamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 El siguiente ejemplo de código usa <xref:System.Net.Sockets.UdpClient.BeginSend%2A> para enviar de forma asincrónica una solicitud de servidor.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * System.Net.IPEndPoint * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, endPoint, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">Matriz <see cref="T:System.Byte" /> que contiene los datos que se desea enviar.</param>
        <param name="bytes">Número de bytes que se van a enviar.</param>
        <param name="endPoint">
          <see cref="T:System.Net.EndPoint" /> que representa el destino de los datos.</param>
        <param name="requestCallback">Delegado de <see cref="T:System.AsyncCallback" /> que hace referencia al método que se invocará cuando la operación se complete.</param>
        <param name="state">Objeto definido por el usuario que contiene información sobre la operación. Este objeto se pasa al delegado <c>requestCallback</c> cuando finaliza la operación.</param>
        <summary>Envía un datagrama a un destino de forma asincrónica. <see cref="T:System.Net.EndPoint" /> especifica el destino.</summary>
        <returns>Objeto <see cref="T:System.IAsyncResult" /> que hace referencia al envío asincrónico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrónico <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operación debe realizarse mediante una llamada a la <xref:System.Net.Sockets.UdpClient.EndSend%2A> método. Normalmente, se invoca el método por el `requestCallback` delegar.  
  
 Este método no se bloquea hasta que finaliza la operación. Para bloquear hasta que finaliza la operación, use uno de los <xref:System.Net.Sockets.UdpClient.Send%2A> sobrecargas del método.  
  
 Para obtener información detallada acerca de cómo utilizar el modelo de programación asincrónico, vea [al llamar a métodos sincrónicos asincrónicamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 El siguiente ejemplo de código usa <xref:System.Net.Sockets.UdpClient.BeginSend%2A> para enviar de forma asincrónica una solicitud de servidor.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginSend">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginSend(unsigned int8[] datagram, int32 bytes, string hostname, int32 port, class System.AsyncCallback requestCallback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginSend (datagram As Byte(), bytes As Integer, hostname As String, port As Integer, requestCallback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginSend(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port, AsyncCallback ^ requestCallback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginSend : byte[] * int * string * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="udpClient.BeginSend (datagram, bytes, hostname, port, requestCallback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="requestCallback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="datagram">Matriz <see cref="T:System.Byte" /> que contiene los datos que se desea enviar.</param>
        <param name="bytes">Número de bytes que se van a enviar.</param>
        <param name="hostname">Host de destino.</param>
        <param name="port">Número de puerto de destino.</param>
        <param name="requestCallback">Delegado de <see cref="T:System.AsyncCallback" /> que hace referencia al método que se invocará cuando la operación se complete.</param>
        <param name="state">Objeto definido por el usuario que contiene información sobre la operación. Este objeto se pasa al delegado <c>requestCallback</c> cuando finaliza la operación.</param>
        <summary>Envía un datagrama a un destino de forma asincrónica. El nombre de host y el número de puerto especifican el destino.</summary>
        <returns>Objeto <see cref="T:System.IAsyncResult" /> que hace referencia al envío asincrónico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asincrónico <xref:System.Net.Sockets.UdpClient.BeginSend%2A> operación debe realizarse mediante una llamada a la <xref:System.Net.Sockets.UdpClient.EndSend%2A> método. Normalmente, se invoca el método por el `requestCallback` delegar.  
  
 Este método no se bloquea hasta que finaliza la operación. Para bloquear hasta que finaliza la operación, use uno de los <xref:System.Net.Sockets.UdpClient.Send%2A> sobrecargas del método.  
  
 Para obtener información detallada acerca de cómo utilizar el modelo de programación asincrónico, vea [al llamar a métodos sincrónicos asincrónicamente](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
   
  
## Examples  
 El siguiente ejemplo de código usa <xref:System.Net.Sockets.UdpClient.BeginSend%2A> para enviar de forma asincrónica una solicitud de servidor.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Client">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Client { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Client" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Client" />
      <MemberSignature Language="VB.NET" Value="Public Property Client As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Client { System::Net::Sockets::Socket ^ get(); void set(System::Net::Sockets::Socket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Client : System.Net.Sockets.Socket with get, set" Usage="System.Net.Sockets.UdpClient.Client" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el <see cref="T:System.Net.Sockets.Socket" /> de red subyacente.</summary>
        <value>
          <see cref="T:System.Net.Sockets.Socket" /> de red subyacente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.UdpClient> crea un <xref:System.Net.Sockets.Socket> utiliza para enviar y recibir datos a través de una red. Clases derivadas de <xref:System.Net.Sockets.UdpClient> puede utilizar esta propiedad para obtener o establecer esto <xref:System.Net.Sockets.Socket>. Usar subyacente <xref:System.Net.Sockets.Socket> devuelto desde <xref:System.Net.Sockets.UdpClient.Client%2A> si necesita tener acceso a más allá de lo que <xref:System.Net.Sockets.UdpClient> proporciona. También puede usar <xref:System.Net.Sockets.UdpClient.Client%2A> establecer subyacente <xref:System.Net.Sockets.Socket> a un archivo <xref:System.Net.Sockets.Socket>. Esto es útil si desea aprovechar la simplicidad de <xref:System.Net.Sockets.UdpClient> mediante preexistente <xref:System.Net.Sockets.Socket>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de la <xref:System.Net.Sockets.UdpClient.Client%2A> propiedad. En este ejemplo, la transmisión está activada para subyacente <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.ProtectedMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="udpClient.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra la conexión UDP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.Close%2A> deshabilita subyacente <xref:System.Net.Sockets.Socket> y libera todos los recursos administrados y no administrados asociados con la <xref:System.Net.Sockets.UdpClient>.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo cerrar una <xref:System.Net.Sockets.UdpClient> mediante una llamada a la <xref:System.Net.Sockets.UdpClient.Close%2A> método.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#15)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#15)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Connect">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Establece un host remoto predeterminado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (endPoint As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPEndPoint -&gt; unit" Usage="udpClient.Connect endPoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="endPoint">
          <see cref="T:System.Net.IPEndPoint" /> que especifica el extremo de red al que desea enviar datos.</param>
        <summary>Establece un host remoto predeterminado mediante el extremo de red especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.Connect%2A> método establece un host remoto predeterminado utilizando el valor especificado en el `endPoint` parámetro. Una vez establecida, no es necesario especificar un host remoto en cada llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método.  
  
 Establecer un host remoto predeterminado es opcional. Especificar un host remoto predeterminado, limita a solo ese host. Si desea enviar datagramas a un host remoto diferente, debe realizar otra llamada a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método o crear otro <xref:System.Net.Sockets.UdpClient> sin un host remoto predeterminado. Si ha establecido el valor predeterminado es remoto host y proporciona un host remoto en la llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método <xref:System.Net.Sockets.UdpClient.Send%2A> producirá un <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 Si se llama a la  <xref:System.Net.Sockets.Socket.Connect%2A> /método siguiente, todos los datagramas que procedan de una dirección distinta a se descartará el valor predeterminado especificado. No se puede establecer el host remoto predeterminado para una dirección de difusión con este método, a menos que heredan de <xref:System.Net.Sockets.UdpClient>, utilice el método de cliente para obtener subyacente <xref:System.Net.Sockets.Socket>y establezca la opción de socket en <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.  
  
 Sin embargo, puede, difusión de datos con el valor predeterminado dirección de difusión, 255.255.255.255, si especifica <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> en la llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método. Si la aplicación requiere un mayor control sobre las direcciones de difusión, también puede volver a usar la <xref:System.Net.Sockets.Socket> clase.  
  
> [!NOTE]
>  Dado que el protocolo UDP es sin conexión, la <xref:System.Net.Sockets.UdpClient.Connect%2A> método no se bloquea. No llame a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método si tiene previsto recibir datagramas de multidifusión.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa un <xref:System.Net.IPEndPoint> para establecer un host remoto predeterminado.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#7)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#7)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endPoint" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.UdpClient" /> está cerrado.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress addr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress addr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (addr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::Net::IPAddress ^ addr, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.Connect (addr, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="addr">
          <see cref="T:System.Net.IPAddress" /> del host remoto al que desea enviar datos.</param>
        <param name="port">Número de puerto al que desea enviar datos.</param>
        <summary>Establece un host remoto predeterminado mediante la dirección IP y el número de puerto especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.Connect%2A> método establece un host remoto predeterminado mediante los valores especificados en la `addr` y `port` parámetros. Una vez establecida, no es necesario especificar un host remoto en cada llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método.  
  
 Establecer un host remoto predeterminado es opcional. Especificar un host remoto predeterminado, limita a solo ese host. Si desea enviar datagramas a un host remoto diferente, debe realizar otra llamada a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método o crear otro <xref:System.Net.Sockets.UdpClient> sin un host remoto predeterminado. Si ha establecido el valor predeterminado es remoto host y proporciona un host remoto en la llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método <xref:System.Net.Sockets.UdpClient.Send%2A> producirá un <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 Si se llama a la  <xref:System.Net.Sockets.Socket.Connect%2A> /método siguiente, todos los datagramas que procedan de una dirección distinta a se descartará el valor predeterminado especificado. No se puede establecer el host remoto predeterminado para una dirección de difusión con este método, a menos que heredan de <xref:System.Net.Sockets.UdpClient>, utilice el método de cliente para obtener subyacente <xref:System.Net.Sockets.Socket>y establezca la opción de socket en <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.  
  
 Sin embargo, puede, difusión de datos con el valor predeterminado dirección de difusión, 255.255.255.255, si especifica <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> en la llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método. Si la aplicación requiere un mayor control sobre las direcciones de difusión, también puede volver a usar la <xref:System.Net.Sockets.Socket> clase.  
  
> [!NOTE]
>  Dado que el protocolo UDP es sin conexión, la <xref:System.Net.Sockets.UdpClient.Connect%2A> método no se bloquea. No llame a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método si tiene previsto recibir datagramas de multidifusión.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa un número de puerto y la dirección IP para conectar con un host remoto.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#6)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#6)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Se cierra <see cref="T:System.Net.Sockets.UdpClient" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="addr" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> no se encuentra en el intervalo definido por <see cref="F:System.Net.IPEndPoint.MinPort" /> y <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Connect (hostname As String, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Connect(System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Connect : string * int -&gt; unit" Usage="udpClient.Connect (hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostname">Nombre DNS del host remoto al que desea enviar datos.</param>
        <param name="port">Número de puerto del host remoto al que desea enviar datos.</param>
        <summary>Establece un host remoto predeterminado mediante el nombre de host y el número de puerto especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.Connect%2A> método establece un host remoto predeterminado mediante los valores especificados en la `port` y `hostname` parámetros. Una vez establecida, no es necesario especificar un host remoto en cada llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método.  
  
 Establecer un host remoto predeterminado es opcional. Especificar un host remoto predeterminado, limita a solo ese host. Si desea enviar datagramas a un host remoto diferente, debe realizar otra llamada a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método o crear otro <xref:System.Net.Sockets.UdpClient> sin un host remoto predeterminado.  
  
 Si ha establecido el valor predeterminado es remoto host y proporciona un host remoto en la llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método <xref:System.Net.Sockets.UdpClient.Send%2A> producirá un <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 Si se llama a la  <xref:System.Net.Sockets.Socket.Connect%2A> /método siguiente, todos los datagramas que procedan de una dirección distinta a se descartará el valor predeterminado especificado. No se puede establecer el host remoto predeterminado para una dirección de difusión con este método, a menos que heredan de <xref:System.Net.Sockets.UdpClient>, utilice el método de cliente para obtener subyacente <xref:System.Net.Sockets.Socket>y establezca la opción de socket en <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>.  
  
 Sin embargo, puede, difusión de datos con el valor predeterminado dirección de difusión, 255.255.255.255, si especifica <xref:System.Net.IPAddress.Broadcast?displayProperty=nameWithType> en la llamada a la <xref:System.Net.Sockets.UdpClient.Send%2A> método. Si la aplicación requiere un mayor control sobre las direcciones de difusión, también puede volver a usar la <xref:System.Net.Sockets.Socket> clase.  
  
> [!NOTE]
>  Dado que el protocolo UDP es sin conexión, la <xref:System.Net.Sockets.UdpClient.Connect%2A> método no se bloquea. No llame a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método si tiene previsto recibir datagramas de multidifusión.  
  
   
  
## Examples  
 El siguiente ejemplo se utiliza el nombre de host y número de puerto para conectarse a un host remoto.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#5)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#5)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.UdpClient" /> está cerrado.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> no se encuentra en el intervalo definido por <see cref="F:System.Net.IPEndPoint.MinPort" /> y <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="udpClient.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera los recursos administrados y no administrados que utiliza el objeto <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="udpClient.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos no administrados que utiliza <see cref="T:System.Net.Sockets.UdpClient" /> y libera los recursos administrados de forma opcional.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se llama a este método público `Dispose()` método y <xref:System.Object.Finalize%2A> método. `Dispose()` se invoca el protegido `Dispose(Boolean)` método con el `disposing` parámetro establecido en `true`. <xref:System.Object.Finalize%2A> invoca `Dispose` con `disposing` establecido en `false`.  
  
 Cuando el `disposing` del parámetro es true, este método libera todos los recursos retenidos por los objetos administrados que este <xref:System.Net.Sockets.UdpClient> referencias. Este método invoca al método `Dispose()` de cada uno de los objetos a los que se hace referencia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> puede recibir varias llamadas de otros objetos. Al reemplazar <see langword="Dispose(Boolean)" /> tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />. Para obtener más información sobre cómo implementar <see langword="Dispose(Boolean)" />, vea [implementar un Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Para obtener más información acerca de <see langword="Dispose" /> y <see cref="M:System.Object.Finalize" />, consulte [limpieza seguridad Resources](~/docs/standard/garbage-collection/unmanaged.md) no administrado y [invalidación del método Finalize] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DontFragment">
      <MemberSignature Language="C#" Value="public bool DontFragment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DontFragment" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.DontFragment" />
      <MemberSignature Language="VB.NET" Value="Public Property DontFragment As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DontFragment { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DontFragment : bool with get, set" Usage="System.Net.Sockets.UdpClient.DontFragment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor de <see cref="T:System.Boolean" /> que especifica si <see cref="T:System.Net.Sockets.UdpClient" /> permite fragmentar los datagramas de protocolo Internet (IP).</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Net.Sockets.UdpClient" /> permite la fragmentación de datagramas; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Necesario fragmentar los datagramas cuando su tamaño supera la unidad de transmisión máxima (MTU) del medio de transmisión. El host de envío o un enrutador intermedio pueden fragmentar datagramas. Si un datagrama debe fragmentarse y el <xref:System.Net.Sockets.Socket.DontFragment%2A> opción está establecida, se descarta el datagrama y se envía un mensaje de error de protocolo de mensajes de Control de Internet (ICMP) al remitente del datagrama.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Net.Sockets.Socket.DontFragment%2A> propiedad.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Esta propiedad sólo se puede establecer para sockets que utilicen el marcador <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> o <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DropMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Abandona un grupo de multidifusión.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.DropMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">
          <see cref="T:System.Net.IPAddress" /> del grupo de multidifusión que se va a abandonar.</param>
        <summary>Abandona un grupo de multidifusión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> método retire el <xref:System.Net.Sockets.UdpClient> del grupo de multidifusión identificado por el objeto <xref:System.Net.IPAddress>. Después de llamar a la <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> método, subyacente <xref:System.Net.Sockets.Socket> envía un paquete de protocolo de administración de grupos de Internet (IGMP) al enrutador, quitando el enrutador del grupo de multidifusión. Después de un <xref:System.Net.Sockets.UdpClient> retire del grupo, ya no podrá recibir datagramas enviados a ese grupo.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo quitar un grupo de multidifusión proporcionando una dirección de multidifusión.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <exception cref="T:System.ArgumentException">La dirección IP no es compatible con el valor de <see cref="T:System.Net.Sockets.AddressFamily" /> que define el esquema de direcciones del socket.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multicastAddr" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="DropMulticastGroup">
      <MemberSignature Language="C#" Value="public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DropMulticastGroup(class System.Net.IPAddress multicastAddr, int32 ifindex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DropMulticastGroup (multicastAddr As IPAddress, ifindex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DropMulticastGroup(System::Net::IPAddress ^ multicastAddr, int ifindex);" />
      <MemberSignature Language="F#" Value="member this.DropMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.DropMulticastGroup (multicastAddr, ifindex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="ifindex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">
          <see cref="T:System.Net.IPAddress" /> del grupo de multidifusión que se va a abandonar.</param>
        <param name="ifindex">La dirección local del grupo de multidifusión que se va a abandonar.</param>
        <summary>Abandona un grupo de multidifusión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> método retire el <xref:System.Net.Sockets.UdpClient> del grupo de multidifusión identificado por el objeto <xref:System.Net.IPAddress>. Después de llamar a la <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> método, subyacente <xref:System.Net.Sockets.Socket> envía un paquete de protocolo de administración de grupos de Internet (IGMP) al enrutador, quitando el enrutador del grupo de multidifusión. Después de un <xref:System.Net.Sockets.UdpClient> retire del grupo, ya no podrá recibir datagramas enviados a ese grupo.  
  
> [!NOTE]
>  Si recibe un <xref:System.Net.Sockets.SocketException>, use el <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> propiedad que se va a obtener el código de error específico. Después de haber obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo quitar un grupo de multidifusión proporcionando una dirección de multidifusión.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#2)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <exception cref="T:System.ArgumentException">La dirección IP no es compatible con el valor de <see cref="T:System.Net.Sockets.AddressFamily" /> que define el esquema de direcciones del socket.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multicastAddr" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="EnableBroadcast">
      <MemberSignature Language="C#" Value="public bool EnableBroadcast { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableBroadcast" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableBroadcast As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableBroadcast { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableBroadcast : bool with get, set" Usage="System.Net.Sockets.UdpClient.EnableBroadcast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor de <see cref="T:System.Boolean" /> que especifica si <see cref="T:System.Net.Sockets.UdpClient" /> puede enviar o recibir paquetes de difusión.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Net.Sockets.UdpClient" /> permite la difusión de paquetes; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Difusión se limita a una subred específica. Puede transmitir a la subred local enviando un paquete a 255.255.255.255; o bien, puede usar la dirección de difusión dirigida, que es la parte de la red de una dirección de protocolo de Internet (IP) con todos los bits establecidos en la parte del host. Por ejemplo, si su dirección IP es 192.168.1.40 (una dirección de clase C, con la parte de la red como los tres primeros octetos y la parte del host es el último octeto), la dirección de difusión dirigida será 192.168.1.255.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Net.Sockets.UdpClient.EnableBroadcast%2A> propiedad.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#3)]
 [!code-csharp[System.Net.Sockets.UdpClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] EndReceive(class System.IAsyncResult asyncResult, class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (asyncResult As IAsyncResult, ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ EndReceive(IAsyncResult ^ asyncResult, System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.EndReceive : IAsyncResult *  -&gt; byte[]" Usage="udpClient.EndReceive (asyncResult, remoteEP)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Objeto <see cref="T:System.IAsyncResult" /> devuelto por una llamada a <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</param>
        <param name="remoteEP">Extremo remoto especificado.</param>
        <summary>Finaliza una recepción asincrónica pendiente.</summary>
        <returns>Si se completa correctamente, una matriz de bytes que contiene los datos del datagrama.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se bloquea hasta que la operación se complete.  
  
 Para realizar esta operación sincrónicamente, utilice el <xref:System.Net.Sockets.UdpClient.Receive%2A> método.  
  
   
  
## Examples  
 El siguiente ejemplo de código usa <xref:System.Net.Sockets.UdpClient.BeginSend%2A> para completar una recepción asincrónica de una respuesta del servidor.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> no se devolvió mediante una llamada al método <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">Se llamó previamente a <see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> para la lectura asincrónica.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Ocurrió un error al intentar obtener acceso al <see cref="T:System.Net.Sockets.Socket" /> subyacente.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndSend">
      <MemberSignature Language="C#" Value="public int EndSend (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 EndSend(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndSend (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int EndSend(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndSend : IAsyncResult -&gt; int" Usage="udpClient.EndSend asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">Objeto <see cref="T:System.IAsyncResult" /> devuelto por una llamada a <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" />.</param>
        <summary>Finaliza un envío asincrónico pendiente.</summary>
        <returns>Si se realiza correctamente, el número de bytes enviados a <see cref="T:System.Net.Sockets.UdpClient" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se bloquea hasta que la operación se complete.  
  
 Para realizar esta operación sincrónicamente, utilice el <xref:System.Net.Sockets.UdpClient.Send%2A> método.  
  
   
  
## Examples  
 El siguiente ejemplo de código usa <xref:System.Net.Sockets.UdpClient.BeginSend%2A> para completar un envío asincrónico de una solicitud del servidor.  
  
 [!code-cpp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/cpp/asyncudp.cpp#2)]
 [!code-csharp[System.Net.Sockets.UdpClient1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient1/CS/asyncudp.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> no se devolvió mediante una llamada al método <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />.</exception>
        <exception cref="T:System.InvalidOperationException">Se llamó previamente a <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> para la lectura asincrónica.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al intentar obtener acceso al socket subyacente.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.UdpClient.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor <see cref="T:System.Boolean" /> que especifica si el objeto <see cref="T:System.Net.Sockets.UdpClient" /> permite a un único cliente utilizar un puerto.</summary>
        <value>
          <see langword="true" /> si el objeto <see cref="T:System.Net.Sockets.UdpClient" /> permite a un único cliente usar un puerto específico; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="true" /> para Windows Server 2003 y el Service Pack 2 y posteriores de Windows XP, y <see langword="false" /> para el resto de versiones.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, varios clientes pueden utilizar un puerto específico; Sin embargo, solo uno de los clientes puede realizar operaciones en el tráfico de red enviado al puerto. Puede usar el <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> propiedad para impedir que varios clientes utilicen un puerto específico.  
  
 Esta propiedad debe establecerse antes de que el socket subyacente se enlaza a un puerto de cliente. Si se llama a <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=nameWithType>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType>, o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>, el puerto de cliente se enlaza como un efecto secundario del constructor y posteriormente no se puede establecer el <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> propiedad  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Net.Sockets.UdpClient>y obtiene y establece el <xref:System.Net.Sockets.UdpClient.ExclusiveAddressUse%2A> propiedad.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#4)]
 [!code-csharp[System.Net.Sockets.UdpClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al intentar obtener acceso al socket subyacente.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~UdpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!UdpClient ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="udpClient.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="JoinMulticastGroup">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega una clase <see cref="T:System.Net.Sockets.UdpClient" /> a un grupo de multidifusión.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup multicastAddr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">Clase <see cref="T:System.Net.IPAddress" /> de multidifusión del grupo al que se piensa incorporar.</param>
        <summary>Agrega una clase <see cref="T:System.Net.Sockets.UdpClient" /> a un grupo de multidifusión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> método se suscribe el <xref:System.Net.Sockets.UdpClient> a un grupo de multidifusión mediante especificado <xref:System.Net.IPAddress>. Después de llamar a la <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> método, subyacente <xref:System.Net.Sockets.Socket> envía un paquete de protocolo de administración de grupos de Internet (IGMP) en el enrutador que solicita la inscripción al grupo de multidifusión. El intervalo de direcciones de multidifusión es de 224.0.0.0 a 239.255.255.255. Si especifica una dirección fuera de este intervalo o si el enrutador al que se realiza la solicitud no está habilitado, para la multidifusión <xref:System.Net.Sockets.UdpClient> producirá un <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error. Una vez el <xref:System.Net.Sockets.UdpClient> aparece con el enrutador como miembro del grupo de multidifusión, podrá recibir datagramas de multidifusión enviados a los especificados <xref:System.Net.IPAddress>.  
  
> [!NOTE]
>  Debe crear el <xref:System.Net.Sockets.UdpClient> con el número de puerto de multidifusión; en caso contrario, no podrá recibir los datagramas de multidifusión. No llame a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método antes de llamar a la <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> método, o la <xref:System.Net.Sockets.UdpClient.Receive%2A> método no funcionará. No es necesario pertenecer a un grupo de multidifusión para enviar datagramas a una dirección IP de multidifusión.  
  
 Antes de unirse a un grupo de multidifusión, asegúrese de que el socket esté enlazado al puerto o extremo. Hacerlo llamando a uno de los constructores que aceptan un puerto o un extremo como un parámetro.  
  
 Para dejar de recibir datagramas de multidifusión, llame a la <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> método y proporcione el <xref:System.Net.IPAddress> del grupo desde el que desea abandonar.  
  
> [!NOTE]
>  En el caso de IPv6, hay varios intervalos de direcciones de multidifusión que puede elegir. Por favor, consulte la especificación de IETF RFC 2375.  
  
> [!NOTE]
>  No se puede llamar <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> en un <xref:System.Net.Sockets.UdpClient> construidas sin un puerto local específico (es decir, usando la <xref:System.Net.Sockets.UdpClient.%23ctor> o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo unirse a un grupo de multidifusión proporcionando una dirección de multidifusión.  
  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#1)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#1)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <exception cref="T:System.ArgumentException">La dirección IP no es compatible con el valor de <see cref="T:System.Net.Sockets.AddressFamily" /> que define el esquema de direcciones del socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(int32 ifindex, class System.Net.IPAddress multicastAddr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (ifindex As Integer, multicastAddr As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(int ifindex, System::Net::IPAddress ^ multicastAddr);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : int * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (ifindex, multicastAddr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ifindex" Type="System.Int32" />
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="ifindex">Índice de interfaz asociado a la dirección IP local donde se va unir al grupo de multidifusión.</param>
        <param name="multicastAddr">Clase <see cref="T:System.Net.IPAddress" /> de multidifusión del grupo al que se piensa incorporar.</param>
        <summary>Agrega una clase <see cref="T:System.Net.Sockets.UdpClient" /> a un grupo de multidifusión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de unirse a un grupo de multidifusión, asegúrese de que el socket esté enlazado al puerto o extremo. Puede hacerlo llamando a uno de los constructores que acepta un puerto o un punto de conexión como parámetro.  
  
 El `infindex` parámetro se utiliza para identificar una interfaz de hardware en el mismo vínculo.  
  
> [!NOTE]
>  Hay varios intervalos de direcciones de multidifusión para elegir. Consulte la RFC de IETF 2375.  
  
> [!NOTE]
>  No se puede llamar <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> en un <xref:System.Net.Sockets.UdpClient> construidas sin un puerto local específico (es decir, usando la <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=nameWithType> o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=nameWithType> constructor).  
  
   
  
## Examples  
 [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CPP/joinmulticastgroup.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/CS/joinmulticastgroup.cs#5)]
 [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.UdpClient.JoinMulticastGroup/VB/joinmulticastgroup.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, int32 timeToLive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, timeToLive As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, int timeToLive);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * int -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, timeToLive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="timeToLive" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">Clase <see cref="T:System.Net.IPAddress" /> del grupo de multidifusión que se piensa incorporar.</param>
        <param name="timeToLive">Período de vida, medido en saltos del enrutador.</param>
        <summary>Agrega una clase <see cref="T:System.Net.Sockets.UdpClient" /> a un grupo de multidifusión con el período de vida (TTL) especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> método se suscribe el <xref:System.Net.Sockets.UdpClient> a un grupo de multidifusión mediante especificado <xref:System.Net.IPAddress>. Después de llamar a la <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> método, subyacente <xref:System.Net.Sockets.Socket> envía un paquete de protocolo de administración de grupos de Internet (IGMP) en el enrutador que solicita la inscripción al grupo de multidifusión. El intervalo de direcciones de multidifusión es de 224.0.0.0 a 239.255.255.255. Si especifica una dirección fuera de este intervalo o si el enrutador al que se realiza la solicitud no está habilitado, para la multidifusión <xref:System.Net.Sockets.UdpClient> producirá un <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error. El `timeToLive` parámetro especifica el número de saltos de enrutador se permitirá en un datagrama de multidifusión antes de descartarse. Una vez el <xref:System.Net.Sockets.UdpClient> aparece con el enrutador como miembro del grupo de multidifusión, podrá recibir datagramas de multidifusión enviados a los especificados <xref:System.Net.IPAddress>.  
  
> [!NOTE]
>  Debe crear el <xref:System.Net.Sockets.UdpClient> con el número de puerto de multidifusión en caso contrario, no podrá recibir los datagramas de multidifusión. No llame a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método antes de llamar a la <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> método o el método de recepción no funcionará. No es necesario pertenecer a un grupo de multidifusión para enviar datagramas a una dirección IP de multidifusión.  
  
 Antes de unirse a un grupo de multidifusión Asegúrese de que el socket esté enlazado al puerto o extremo. Hacerlo llamando a uno de los constructores que aceptan como parámetro un puerto o un punto de conexión.  
  
 Para dejar de recibir datagramas de multidifusión, llame a la <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> método y proporcione el <xref:System.Net.IPAddress> del grupo desde el que desea abandonar.  
  
> [!NOTE]
>  No se puede llamar <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> en un <xref:System.Net.Sockets.UdpClient> construidas sin un puerto local específico (es decir, usando la <xref:System.Net.Sockets.UdpClient.%23ctor> o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo unirse a un grupo de multidifusión proporcionando dos parámetros, una dirección de multidifusión y un número que representa el TTL.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#13)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#13)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El TTL proporcionado no se encuentra entre 0 y 255.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="multicastAddr" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La dirección IP no es compatible con el valor de <see cref="T:System.Net.Sockets.AddressFamily" /> que define el esquema de direcciones del socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)" />
      </Docs>
    </Member>
    <Member MemberName="JoinMulticastGroup">
      <MemberSignature Language="C#" Value="public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void JoinMulticastGroup(class System.Net.IPAddress multicastAddr, class System.Net.IPAddress localAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Sub JoinMulticastGroup (multicastAddr As IPAddress, localAddress As IPAddress)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void JoinMulticastGroup(System::Net::IPAddress ^ multicastAddr, System::Net::IPAddress ^ localAddress);" />
      <MemberSignature Language="F#" Value="member this.JoinMulticastGroup : System.Net.IPAddress * System.Net.IPAddress -&gt; unit" Usage="udpClient.JoinMulticastGroup (multicastAddr, localAddress)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="multicastAddr" Type="System.Net.IPAddress" />
        <Parameter Name="localAddress" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="multicastAddr">Clase <see cref="T:System.Net.IPAddress" /> de multidifusión del grupo al que se piensa incorporar.</param>
        <param name="localAddress">
          <see cref="T:System.Net.IPAddress" /> local.</param>
        <summary>Agrega una clase <see cref="T:System.Net.Sockets.UdpClient" /> a un grupo de multidifusión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de unirse a un grupo de multidifusión, asegúrese de que el socket esté enlazado al puerto o extremo. Puede hacerlo llamando a uno de los constructores que acepta un puerto o un punto de conexión como parámetro.  
  
> [!NOTE]
>  Hay varios intervalos de direcciones de multidifusión para elegir. Puede encontrarlos en la especificación de IETF RFC 2375.  
  
> [!NOTE]
>  No se puede llamar <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> en un <xref:System.Net.Sockets.UdpClient> construidas sin un puerto local específico (es decir, usando la <xref:System.Net.Sockets.UdpClient.%23ctor> o <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> constructor).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> método.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#6)]
 [!code-csharp[System.Net.Sockets.UdpClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="MulticastLoopback">
      <MemberSignature Language="C#" Value="public bool MulticastLoopback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MulticastLoopback" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastLoopback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MulticastLoopback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastLoopback : bool with get, set" Usage="System.Net.Sockets.UdpClient.MulticastLoopback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor <see cref="T:System.Boolean" /> que especifica si se entregan paquetes de multidifusión saliente a la aplicación emisora.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Net.Sockets.UdpClient" /> recibe paquetes de multidifusión saliente; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Multidifusión es un método escalable para la comunicación de varios a varios en Internet. Si un proceso se suscribe a una dirección de multidifusión, todos los paquetes envían por los que el proceso son recibidos por todos los procesos que se ha suscrito a la dirección de multidifusión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Net.Sockets.UdpClient.MulticastLoopback%2A> propiedad.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#7)]
 [!code-csharp[System.Net.Sockets.UdpClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public byte[] Receive (ref System.Net.IPEndPoint remoteEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Receive(class System.Net.IPEndPoint&amp; remoteEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (ByRef remoteEP As IPEndPoint) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Receive(System::Net::IPEndPoint ^ % remoteEP);" />
      <MemberSignature Language="F#" Value="member this.Receive :  -&gt; byte[]" Usage="udpClient.Receive remoteEP" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="remoteEP" Type="System.Net.IPEndPoint&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="remoteEP">
          <see cref="T:System.Net.IPEndPoint" /> que representa el host remoto desde el que se enviaron los datos.</param>
        <summary>Devuelve un datagrama UDP enviado por un host remoto.</summary>
        <returns>Matriz de tipo <see cref="T:System.Byte" /> que contiene datos de datagramas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.Receive%2A> método se bloqueará hasta que llegue un datagrama de un host remoto. Cuando los datos están disponibles, el <xref:System.Net.Sockets.UdpClient.Receive%2A> método leerá el primer datagrama en cola y devolver la parte de datos como una matriz de bytes. Este método rellena los `remoteEP` parámetro con el <xref:System.Net.IPAddress> y número de puerto del remitente.  
  
 Si especifica un host remoto predeterminado en el <xref:System.Net.Sockets.UdpClient.Connect%2A> método, el <xref:System.Net.Sockets.UdpClient.Receive%2A> método aceptará datagramas desde sólo dicho host. Todos los demás datagramas se descartarán.  
  
 Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
> [!NOTE]
>  Si desea recibir datagramas de multidifusión, no llame a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método antes de llamar a la <xref:System.Net.Sockets.UdpClient.Receive%2A> método. El <xref:System.Net.Sockets.UdpClient> se utiliza para recibir datagramas deben crearse con el número de puerto de multidifusión.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.Net.Sockets.UdpClient.Receive%2A> método. El <xref:System.Net.Sockets.UdpClient.Receive%2A> método bloquea la ejecución hasta que reciba un mensaje. Mediante el <xref:System.Net.IPEndPoint> pasado a <xref:System.Net.Sockets.UdpClient.Receive%2A>, se revela la identidad del host responde.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#11)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#11)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.IPAddress" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;valuetype System.Net.Sockets.UdpReceiveResult&gt; ReceiveAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.ReceiveAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveAsync () As Task(Of UdpReceiveResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::UdpReceiveResult&gt; ^ ReceiveAsync();" />
      <MemberSignature Language="F#" Value="member this.ReceiveAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;" Usage="udpClient.ReceiveAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.UdpReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve de forma asincrónica un datagrama UDP enviado por un host remoto.</summary>
        <returns>Devuelva <see cref="T:System.Threading.Tasks.Task`1" />.  Objeto de tarea que representa la operación asincrónica.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta operación no se bloqueará. El valor devuelto <xref:System.Threading.Tasks.Task%601>> objeto se completará después de que se ha recibido el paquete UDP.  
  
 Si especifica un host remoto predeterminado en el <xref:System.Net.Sockets.UdpClient.Connect%2A> método, este método aceptará datagramas desde sólo dicho host. Todos los demás datagramas se descartarán.  
  
 Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
> [!WARNING]
>  Si desea recibir datagramas de multidifusión, no llame a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método antes de llamar a este método. El <xref:System.Net.Sockets.UdpClient> se utiliza para recibir datagramas deben crearse con el número de puerto de multidifusión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.Socket" /> subyacente se ha cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envía un datagrama UDP a un host remoto.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int -&gt; int" Usage="udpClient.Send (dgram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dgram">Matriz de tipo <see cref="T:System.Byte" /> que especifica el datagrama UDP que desea enviar, representado como matriz de bytes.</param>
        <param name="bytes">Número de bytes del datagrama.</param>
        <summary>Envía un datagrama UDP a un host remoto.</summary>
        <returns>Número de bytes enviados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga envía datagramas al host remoto establecido en el <xref:System.Net.Sockets.UdpClient.Connect%2A> método y devuelve el número de bytes enviados. Si no se llama <xref:System.Net.Sockets.UdpClient.Connect%2A> antes de llamar a esta sobrecarga, el <xref:System.Net.Sockets.UdpClient.Send%2A> método producirá una <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 Si desea enviar datagramas a un host remoto diferente, debe llamar a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método y especificar el host remoto deseado. Utilice uno de los otros <xref:System.Net.Sockets.UdpClient.Send%2A> sobrecargas del método para enviar datagramas a una dirección de difusión.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.Net.Sockets.UdpClient.Send%2A> método. Debe establecer un host remoto predeterminado antes de utilizar esta sobrecarga.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#10)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#10)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Net.Sockets.UdpClient" /> ya ha establecido un host remoto predeterminado.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.UdpClient" /> está cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * System.Net.IPEndPoint -&gt; int" Usage="udpClient.Send (dgram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="dgram">Matriz de tipo <see cref="T:System.Byte" /> que especifica el datagrama UDP que desea enviar, representado como matriz de bytes.</param>
        <param name="bytes">Número de bytes del datagrama.</param>
        <param name="endPoint">
          <see cref="T:System.Net.IPEndPoint" /> que representa el host y el puerto al que se va a enviar el datagrama.</param>
        <summary>Envía un datagrama UDP al host en el extremo remoto especificado.</summary>
        <returns>Número de bytes enviados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.Send%2A> método envía datagramas al extremo especificado y devuelve el número de bytes enviados correctamente. Antes de llamar a esta sobrecarga, primero debe crear un <xref:System.Net.IPEndPoint> con el número de puerto y la dirección IP del host remoto al que se entregarán los datagramas. Puede enviar datagramas a la difusión de forma predeterminada de direcciones, 255.255.255.255, especificando <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> para el <xref:System.Net.IPAddress.Address%2A> propiedad de la <xref:System.Net.IPEndPoint>. Después de haber creado esta <xref:System.Net.IPEndPoint>, páselo a la <xref:System.Net.Sockets.UdpClient.Send%2A> método como el `endPoint` parámetro.  
  
 Si desea enviar datagramas a cualquier otra dirección de difusión, use la <xref:System.Net.Sockets.UdpClient.Client%2A> método obtener subyacente <xref:System.Net.Sockets.Socket>y establezca la opción de socket en <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. También puede volver a usar la <xref:System.Net.Sockets.Socket> clase.  
  
> [!NOTE]
>  No se proporciona un `endPoint` parámetro a este método si ya ha establecido un host remoto con el <xref:System.Net.Sockets.UdpClient.Connect%2A> método. Si lo hace, el <xref:System.Net.Sockets.UdpClient.Send%2A> método producirá una <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.Net.Sockets.UdpClient.Send%2A> método. Este ejemplo se utiliza un <xref:System.Net.IPEndPoint> para especificar el host de destino.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#8)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#8)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.UdpClient" /> ya ha establecido un host remoto predeterminado.</exception>
        <exception cref="T:System.ObjectDisposedException">Se cierra <see cref="T:System.Net.Sockets.UdpClient" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.IPEndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public int Send (byte[] dgram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Send(unsigned int8[] dgram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (dgram As Byte(), bytes As Integer, hostname As String, port As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Send(cli::array &lt;System::Byte&gt; ^ dgram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.Send : byte[] * int * string * int -&gt; int" Usage="udpClient.Send (dgram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dgram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dgram">Matriz de tipo <see cref="T:System.Byte" /> que especifica el datagrama UDP que desea enviar, representado como matriz de bytes.</param>
        <param name="bytes">Número de bytes del datagrama.</param>
        <param name="hostname">Nombre del host remoto al que pretende enviar el datagrama.</param>
        <param name="port">Número de puerto remoto con el que se desea establecer comunicación.</param>
        <summary>Envía un datagrama UDP a un puerto especificado, en un host remoto especificado.</summary>
        <returns>Número de bytes enviados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Net.Sockets.UdpClient.Send%2A> método envía datagramas a los valores especificados por el `hostname` y `port` parámetros y devuelve el número de bytes enviados correctamente. Puede enviar datagramas a la dirección de difusión predeterminada especificando "255.255.255.255" para el `hostname` el valor del parámetro.  
  
 Si desea enviar datagramas a cualquier otra dirección de difusión, use la <xref:System.Net.Sockets.UdpClient.Client%2A> método obtener subyacente <xref:System.Net.Sockets.Socket>y establezca la opción de socket en <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. También puede volver a usar la <xref:System.Net.Sockets.Socket> clase.  
  
> [!NOTE]
>  No proporcione un nombre de host o número de puerto a este método si ya ha establecido un host remoto con el <xref:System.Net.Sockets.UdpClient.Connect%2A> método. Si lo hace, el <xref:System.Net.Sockets.UdpClient.Send%2A> método producirá una <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el <xref:System.Net.Sockets.UdpClient.Send%2A> método. En este ejemplo se utiliza un nombre de host y un número de puerto para identificar el host de destino.  
  
 [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CPP/source.cpp#9)]
 [!code-csharp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/CS/source.cs#9)]
 [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic UdpClient.PublicMethodsAndPropertiesExample/VB/source.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Net.Sockets.UdpClient" /> ya ha establecido un host remoto predeterminado.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.UdpClient" /> está cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
        <altmember cref="F:System.Net.Sockets.SocketOptionName.Broadcast" />
        <altmember cref="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)" />
        <altmember cref="T:System.Net.Sockets.Socket" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envía un datagrama UDP a un host remoto de forma asincrónica.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="datagram">Matriz de tipo <see cref="T:System.Byte" /> que especifica el datagrama UDP que desea enviar, representado como matriz de bytes.</param>
        <param name="bytes">Número de bytes del datagrama.</param>
        <summary>Envía un datagrama UDP a un host remoto de forma asincrónica.</summary>
        <returns>Devuelva <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga envía datagramas al host remoto establecido en el <xref:System.Net.Sockets.UdpClient.Connect%2A> método. Si no se llama <xref:System.Net.Sockets.UdpClient.Connect%2A> antes de llamar a esta sobrecarga, el método producirá una <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 Si desea enviar datagramas a un host remoto diferente, debe llamar a la <xref:System.Net.Sockets.UdpClient.Connect%2A> método y especificar el host remoto deseado. Utilice uno de los otros <xref:System.Net.Sockets.UdpClient.SendAsync%2A> sobrecargas del método para enviar datagramas a una dirección de difusión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Net.Sockets.UdpClient" /> ya ha establecido un host remoto predeterminado.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.UdpClient" /> está cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, class System.Net.IPEndPoint endPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::Net::IPEndPoint ^ endPoint);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * System.Net.IPEndPoint -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, endPoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="endPoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="datagram">Matriz de tipo <see cref="T:System.Byte" /> que especifica el datagrama UDP que desea enviar, representado como matriz de bytes.</param>
        <param name="bytes">Número de bytes del datagrama.</param>
        <param name="endPoint">
          <see cref="T:System.Net.IPEndPoint" /> que representa el host y el puerto al que se va a enviar el datagrama.</param>
        <summary>Envía un datagrama UDP a un host remoto de forma asincrónica.</summary>
        <returns>Devuelva <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método envía datagramas al extremo especificado. Antes de llamar a esta sobrecarga, primero debe crear un <xref:System.Net.IPEndPoint> con el número de puerto y la dirección IP del host remoto al que se entregarán los datagramas. Puede enviar datagramas a la difusión de forma predeterminada de direcciones, 255.255.255.255, especificando <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType> para el <xref:System.Net.IPAddress.Address%2A> propiedad de la <xref:System.Net.IPEndPoint>. Después de haber creado esta <xref:System.Net.IPEndPoint>, pasar a este método como el `endPoint` parámetro.  
  
 Si desea enviar datagramas a cualquier otra dirección de difusión, use la <xref:System.Net.Sockets.UdpClient.Client%2A> método obtener subyacente <xref:System.Net.Sockets.Socket>y establezca la opción de socket en <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. También puede volver a usar la <xref:System.Net.Sockets.Socket> clase.  
  
> [!WARNING]
>  No se proporciona un `endPoint` parámetro a este método si ya ha establecido un host remoto con el <xref:System.Net.Sockets.UdpClient.Connect%2A> método. Si lo hace, este método producirá una <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.UdpClient" /> ya ha establecido un host remoto predeterminado.</exception>
        <exception cref="T:System.ObjectDisposedException">Se cierra <see cref="T:System.Net.Sockets.UdpClient" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; SendAsync (byte[] datagram, int bytes, string hostname, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; SendAsync(unsigned int8[] datagram, int32 bytes, string hostname, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendAsync (datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ SendAsync(cli::array &lt;System::Byte&gt; ^ datagram, int bytes, System::String ^ hostname, int port);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : byte[] * int * string * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="udpClient.SendAsync (datagram, bytes, hostname, port)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="datagram" Type="System.Byte[]" />
        <Parameter Name="bytes" Type="System.Int32" />
        <Parameter Name="hostname" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="datagram">Matriz de tipo <see cref="T:System.Byte" /> que especifica el datagrama UDP que desea enviar, representado como matriz de bytes.</param>
        <param name="bytes">Número de bytes del datagrama.</param>
        <param name="hostname">Nombre del host remoto al que pretende enviar el datagrama.</param>
        <param name="port">Número de puerto remoto con el que se desea establecer comunicación.</param>
        <summary>Envía un datagrama UDP a un host remoto de forma asincrónica.</summary>
        <returns>Devuelva <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método envía datagramas a los valores especificados por el `hostname` y `port` parámetros. Puede enviar datagramas a la dirección de difusión predeterminada especificando "255.255.255.255" para el `hostname` el valor del parámetro.  
  
 Si desea enviar datagramas a cualquier otra dirección de difusión, use la <xref:System.Net.Sockets.UdpClient.Client%2A> método obtener subyacente <xref:System.Net.Sockets.Socket>y establezca la opción de socket en <xref:System.Net.Sockets.SocketOptionName.Broadcast?displayProperty=nameWithType>. También puede volver a usar la <xref:System.Net.Sockets.Socket> clase.  
  
> [!WARNING]
>  No proporcione un nombre de host o número de puerto a este método si ya ha establecido un host remoto con el <xref:System.Net.Sockets.UdpClient.Connect%2A> método. Si lo hace, este método producirá una <xref:System.Net.Sockets.SocketException>. Si recibe un <xref:System.Net.Sockets.SocketException>, use <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> para obtener el código de error específico. Una vez que ha obtenido este código, puede hacer referencia en MSDN la documentación de código de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dgram" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Net.Sockets.UdpClient" /> ya ha establecido un host remoto predeterminado.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto <see cref="T:System.Net.Sockets.UdpClient" /> está cerrado.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Se ha producido un error al obtener acceso al socket.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.UdpClient.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ttl">
      <MemberSignature Language="C#" Value="public short Ttl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 Ttl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.UdpClient.Ttl" />
      <MemberSignature Language="VB.NET" Value="Public Property Ttl As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short Ttl { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.Ttl : int16 with get, set" Usage="System.Net.Sockets.UdpClient.Ttl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica el valor de período de vida (TTL) de los paquetes de protocolo de Internet (IP) enviados por <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
        <value>Valor TTL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor TTL indica el número máximo de enrutadores que puede atravesar un paquete antes de que el enrutador descarta el paquete y un protocolo de mensajes de Internet Control "TTL excedido" (ICMP) el mensaje de error se devuelve al remitente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.Net.Sockets.UdpClient.Ttl%2A> propiedad.  
  
 [!code-cpp[System.Net.Sockets.UdpClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CPP/newudpclient.cpp#5)]
 [!code-csharp[System.Net.Sockets.UdpClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.UdpClient/CS/newudpclient.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>