<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NetworkStream.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0f9b3287ea8eafb8d3d2d9f207429a0f3d86eb49</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.NetworkStream">
          <source>Provides the underlying stream of data for network access.</source>
          <target state="translated">Proporciona el flujo de datos subyacente para el acceso a través de la red.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class provides methods for sending and receiving data over <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> sockets in blocking mode.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> clase proporciona métodos para enviar y recibir datos a través de <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> sockets en modo de bloqueo.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>For more information about blocking versus nonblocking <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>s, see <bpt id="p1">[</bpt>Using an Asynchronous Client Socket<ept id="p1">](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca del bloqueo y sin bloqueo <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph>s, consulte <bpt id="p1">[</bpt>con un Socket de cliente asincrónico<ept id="p1">](~/docs/framework/network-programming/using-an-asynchronous-client-socket.md)</ept>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>You can use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class for both synchronous and asynchronous data transfer.</source>
          <target state="translated">Puede usar el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> clase para la transferencia de datos sincrónica y asincrónica.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>For more information about synchronous and asynchronous communication, see <bpt id="p1">[</bpt>Sockets<ept id="p1">](~/docs/framework/network-programming/sockets.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de la comunicación sincrónica y asincrónica, vea <bpt id="p1">[</bpt>Sockets<ept id="p1">](~/docs/framework/network-programming/sockets.md)</ept>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>To create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, you must provide a connected <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Para crear un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, debe proporcionar un conectado <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>You can also specify what <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> permission the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> has over the provided <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">También puede especificar qué <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> permiso la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> tiene sobre proporcionado <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>By default, closing the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not close the provided <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">De forma predeterminada, cerrar la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> no cierra proporcionado <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>If you want the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> to have permission to close the provided <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, you must specify <ph id="ph3">`true`</ph> for the value of the <ph id="ph4">`ownsSocket`</ph> parameter.</source>
          <target state="translated">Si desea que la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> tenga permiso para cerrar proporcionado <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, debe especificar <ph id="ph3">`true`</ph> para el valor de la <ph id="ph4">`ownsSocket`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> methods for simple single thread synchronous blocking I/O.</source>
          <target state="translated">Use la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> métodos para sencilla con un solo subproceso E/S sincrónica de bloqueo.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>If you want to process your I/O using separate threads, consider using the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> methods, or the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> methods for communication.</source>
          <target state="translated">Si desea procesar la E/S mediante subprocesos independientes, considere el uso de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> métodos, o la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> y <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> métodos para la comunicación.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not support random access to the network data stream.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> no admite el acceso aleatorio a la secuencia de datos de la red.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The value of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> property, which indicates whether the stream supports seeking, is always <ph id="ph2">`false`</ph>; reading the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> property, reading the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt;</ph> property, or calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> method will throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">El valor de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanSeek%2A&gt;</ph> propiedad, lo que indica si la secuencia admite búsquedas, es siempre <ph id="ph2">`false`</ph>; cuando se lee el <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Position%2A&gt;</ph> propiedad, leer el <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Length%2A&gt;</ph> propiedad o llamar a la <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Seek%2A&gt;</ph> método producirá una <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">Leer y escribir las operaciones se pueden realizar simultáneamente en una instancia de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> clase sin la necesidad de sincronización.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">Siempre que hay un subproceso único para las operaciones de escritura y un subproceso único para las operaciones de lectura, no habrá ninguna interferencia cruzada entre lectura y se requiere ninguna sincronización y subprocesos de escritura.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Net.Sockets.NetworkStream">
          <source>The following code example demonstrates how to create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> from a connected <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph><ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> and perform basic synchronous blocking I/O.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo crear un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> desde una conexión <ph id="ph2">&lt;xref:System.Net.Sockets.SocketType.Stream&gt;</ph> <ph id="ph3">&lt;xref:System.Net.Sockets.Socket&gt;</ph> y realizar operaciones básicas E/S sincrónica de bloqueo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="T:System.Net.Sockets.NetworkStream">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class.</source>
          <target state="translated">Crea una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> utilizará para enviar y recibir datos.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Crea una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> para el <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se crea con acceso de lectura/escritura a los especificados <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not own the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, so calling the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method does not close the <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> no posee subyacente <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, por lo que si se llama el <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> método no cierra el <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The following code example illustrates how to create a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with a <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo crear un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> con un <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> no está conectado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> del parámetro <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> no es <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> está en un estado de no bloqueo.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> utilizará para enviar y recibir datos.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will take ownership of the <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se establece en <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> tomará posesión de <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; en caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ownership.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> para el <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> especificado con la propiedad del <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se crea con acceso de lectura/escritura a los especificados <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>If the value of <ph id="ph1">`ownsSocket`</ph> parameter is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> takes ownership of the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method also closes the underlying <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Si el valor de <ph id="ph1">`ownsSocket`</ph> parámetro es <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> toma posesión del subyacente <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>y llamar a la <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> método también cierra subyacente <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with ownership of the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> con la propiedad de la <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> no está conectado.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>the value of the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated">El valor de la propiedad <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> del parámetro <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> no es <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
          <source>the <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> está en un estado de no bloqueo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> utilizará para enviar y recibir datos.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values that specify the type of access given to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> over the provided <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Combinación bit a bit de los valores de <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> que especifican el tipo de acceso dado a <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> en el elemento <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> proporcionado.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified access rights.</source>
          <target state="translated">Crea una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> para el <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> especificado con los derechos de acceso indicados.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with the specified access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se crea con el acceso especificado a los especificados <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>With this constructor, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> does not own the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, so calling the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method does not close the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Con este constructor, el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> no posee subyacente <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, por lo que si se llama el <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> método no cierra subyacente <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">`access`</ph> conjuntos de parámetros del <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propiedades de la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Si especifica <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> permite las llamadas a la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Si especifica <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> permite las llamadas a la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, both method calls are allowed.</source>
          <target state="translated">Si especifica <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, se permiten llamadas a ambos métodos.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with the ability to read and write to the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> con la capacidad de leer y escribir en el <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> no está conectado.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> del parámetro <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> no es <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
          <source>the <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> está en un estado de no bloqueo.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will use to send and receive data.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> utilizará para enviar y recibir datos.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values that specifies the type of access given to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> over the provided <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Combinación bit a bit de los valores de <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> que especifican el tipo de acceso dado a <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> en el elemento <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> proporcionado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Set to <ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> will take ownership of the <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se establece en <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> asumirá la propiedad del <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>; en caso contrario, se establece en <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Creates a new instance of the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> class for the specified <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> with the specified access rights and the specified <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> ownership.</source>
          <target state="translated">Crea una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> para el <ph id="ph2">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> especificado con los derechos de acceso y la propiedad del <ph id="ph3">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> indicados.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is created with read/write access to the specified <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se crea con acceso de lectura/escritura a los especificados <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If the value of the <ph id="ph1">`ownsSocket`</ph> parameter is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> takes ownership of the underlying <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, and calling the <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method also closes the underlying <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Si el valor de la <ph id="ph1">`ownsSocket`</ph> parámetro es <ph id="ph2">`true`</ph>, el <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> toma posesión del subyacente <ph id="ph4">&lt;xref:System.Net.Sockets.Socket&gt;</ph>y llamar a la <ph id="ph5">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> método también cierra subyacente <ph id="ph6">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> properties of the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">`access`</ph> conjuntos de parámetros del <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propiedades de la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Si especifica <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph>, la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> permite las llamadas a la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, then the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Si especifica <ph id="ph1">&lt;xref:System.IO.FileAccess.Read&gt;</ph>, la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> permite las llamadas a la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>If you specify <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, both method calls are allowed.</source>
          <target state="translated">Si especifica <ph id="ph1">&lt;xref:System.IO.FileAccess.ReadWrite&gt;</ph>, se permiten llamadas a ambos métodos.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> with the ability to read and write to the <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> con la capacidad de leer y escribir en el <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>Ownership of the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> is given to this <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> by specifying <ph id="ph3">`true`</ph> for the <ph id="ph4">`ownsSocket`</ph> parameter.</source>
          <target state="translated">La propiedad de la <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> se asigna a este <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> especificando <ph id="ph3">`true`</ph> para el <ph id="ph4">`ownsSocket`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is not connected.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> no está conectado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> property of the <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> parameter is not <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.Net.Sockets.Socket.SocketType" /&gt;</ph> del parámetro <ph id="ph2">&lt;paramref name="socket" /&gt;</ph> no es <ph id="ph3">&lt;see cref="F:System.Net.Sockets.SocketType.Stream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> parameter is in a nonblocking state.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="socket" /&gt;</ph> está en un estado de no bloqueo.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that is the location in memory to store data read from the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> que corresponde a la ubicación de la memoria donde se almacenan los datos leídos de <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin storing the data.</source>
          <target state="translated">La ubicación en el <bpt id="p1">&lt;c&gt;</bpt>búfer<ept id="p1">&lt;/c&gt;</ept> donde comenzar a almacenar los datos.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The number of bytes to read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Número de bytes que se va a leer de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that is executed when <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> completes.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que se ejecuta al finalizar <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that contains any additional user-defined data.</source>
          <target state="translated">Objeto que contiene los datos adicionales definidos por el usuario.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Comienza una lectura asincrónica de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa la llamada asincrónica.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method starts asynchronously reading data from the incoming network buffers.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método comienza a leer asincrónicamente los datos de los búferes de red entrantes.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method gives you the ability to receive data within a separate execution thread.</source>
          <target state="translated">Llamar a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método ofrece la posibilidad de recibir datos en un subproceso de ejecución independiente.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">Debe crear un método de devolución de llamada que implementa el <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegar y pasar su nombre a la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>At the very minimum, your <ph id="ph1">`state`</ph> parameter must contain the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Como mínimo, el <ph id="ph1">`state`</ph> parámetro debe contener el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Because you will want to obtain the received data within your callback method, you should create a small class or structure to hold a read buffer and any other useful information.</source>
          <target state="translated">Dado que desea obtener los datos recibidos dentro del método de devolución de llamada, debe crear una pequeña clase o estructura que contenga un búfer de lectura y cualquier otra información útil.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the structure or class instance to the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method through the <ph id="ph2">`state`</ph> parameter.</source>
          <target state="translated">Pasar la instancia de clase o estructura a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método a través de la <ph id="ph2">`state`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Your callback method should call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method.</source>
          <target state="translated">El método de devolución de llamada debe llamar a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>When your application calls <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, the system will wait until data is received or an error occurs, and then the system will use a separate thread to execute the specified callback method, and blocks on <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> until the provided <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> reads data or throws an exception.</source>
          <target state="translated">Cuando la aplicación llama <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, el sistema esperará hasta que se reciben datos o se produce un error y, a continuación, el sistema usará un subproceso independiente para ejecutar el método de devolución de llamada especificado y los bloques en <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> hasta proporcionado <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> lee los datos o produce una excepción.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you want the original thread to block after you call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Si desea que el subproceso original se bloquee después de llamar a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método, use la <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> in the callback method when you want the original thread to continue executing.</source>
          <target state="translated">Llamar a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> en el método de devolución de llamada cuando desee que el subproceso original continúe ejecutándose.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information about writing callback methods, see <bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre cómo escribir métodos de devolución de llamada, vea <bpt id="p1">[</bpt>serialización de un delegado como un método de devolución de llamada<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method reads as much data as is available, up to the number of bytes specified by the <ph id="ph2">`size`</ph> parameter.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método lee tantos datos como haya disponibles, hasta el número de bytes especificado por el <ph id="ph2">`size`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si recibe un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, compruebe la <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propiedad para determinar si se ha provocado por un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Si es así, utilice el <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propiedad para obtener el código de error concreto y consulte en MSDN la documentación de códigos de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">Leer y escribir las operaciones se pueden realizar simultáneamente en una instancia de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> clase sin la necesidad de sincronización.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">Siempre que hay un subproceso único para las operaciones de escritura y un subproceso único para las operaciones de lectura, no habrá ninguna interferencia cruzada entre lectura y se requiere ninguna sincronización y subprocesos de escritura.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> to read data asynchronously from the network stream.</source>
          <target state="translated">El siguiente ejemplo de código usa <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> para leer los datos de forma asincrónica de la secuencia de red.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`myReadCallBack`</ph> method implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate and is called by the system when <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> returns.</source>
          <target state="translated">El <ph id="ph1">`myReadCallBack`</ph> método implementa el <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegar y es llamado por el sistema cuando <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> devuelve.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> paramater.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es mayor que la longitud del parámetro <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="size" /&gt;</ph> es mayor que la longitud de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> menos el valor del parámetro <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> subyacente está cerrado.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>There was a failure while reading from the network.</source>
          <target state="translated">Se produce un error al leer de la red.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Se ha producido un error al obtener acceso al socket.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> está cerrado.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the data to write to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> que contiene los datos que se van a escribir en <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin sending the data.</source>
          <target state="translated">La ubicación en el <bpt id="p1">&lt;c&gt;</bpt>búfer<ept id="p1">&lt;/c&gt;</ept> donde comenzar a almacenar los datos.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The number of bytes to write to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Número de bytes que se van a escribir en <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> delegate that is executed when <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> completes.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.AsyncCallback" /&gt;</ph> que se ejecuta al finalizar <ph id="ph2">&lt;see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that contains any additional user-defined data.</source>
          <target state="translated">Objeto que contiene los datos adicionales definidos por el usuario.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write to a stream.</source>
          <target state="translated">Inicia una escritura asincrónica en una secuencia.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa la llamada asincrónica.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method starts an asynchronous send operation to the remote host.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> método inicia una operación de envío asincrónica al host remoto.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method gives you the ability to send data within a separate execution thread.</source>
          <target state="translated">Llamar a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> método ofrece la posibilidad de enviar datos en un subproceso de ejecución independiente.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>You must create a callback method that implements the <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegate and pass its name to the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method.</source>
          <target state="translated">Debe crear un método de devolución de llamada que implementa el <ph id="ph1">&lt;xref:System.AsyncCallback&gt;</ph> delegar y pasar su nombre a la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>At the very minimum, your <ph id="ph1">`state`</ph> parameter must contain the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Como mínimo, el <ph id="ph1">`state`</ph> parámetro debe contener el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If your callback needs more information, you can create a small class or structure to hold the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> and the other required information.</source>
          <target state="translated">Si la devolución de llamada necesita más información, puede crear una pequeña clase o estructura que contenga el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> y otra información necesaria.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Pass the structure or class instance to the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method through the <ph id="ph2">`state`</ph> parameter.</source>
          <target state="translated">Pasar la instancia de clase o estructura a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> método a través de la <ph id="ph2">`state`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Your callback method should implement the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method.</source>
          <target state="translated">El método de devolución de llamada debe implementar el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>When your application calls <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, the system uses a separate thread to execute the specified callback method, and blocks on <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> until the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> sends the number of bytes requested or throws an exception.</source>
          <target state="translated">Cuando la aplicación llama <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, el sistema utiliza un subproceso independiente para ejecutar el método de devolución de llamada especificado y se bloquea en <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> hasta que el <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> envía el número de bytes solicitados o produce una excepción.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you want the original thread to block after you call the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method, use the <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> method.</source>
          <target state="translated">Si desea que el subproceso original se bloquee después de llamar a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> método, use la <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Call <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> in the callback method when you want the original thread to continue executing.</source>
          <target state="translated">Llamar a <ph id="ph1">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> en el método de devolución de llamada cuando desee que el subproceso original continúe ejecutándose.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>For additional information about writing callback methods, see <bpt id="p1">[</bpt>Marshaling a Delegate as a Callback Method<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre cómo escribir métodos de devolución de llamada, vea <bpt id="p1">[</bpt>serialización de un delegado como un método de devolución de llamada<ept id="p1">](~/docs/framework/interop/marshaling-a-delegate-as-a-callback-method.md)</ept>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si recibe un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, compruebe la <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propiedad para determinar si se ha provocado por un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Si es así, utilice el <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propiedad para obtener el código de error concreto y consulte en MSDN la documentación de códigos de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Read and write operations can be performed simultaneously on an instance of the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class without the need for synchronization.</source>
          <target state="translated">Leer y escribir las operaciones se pueden realizar simultáneamente en una instancia de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> clase sin la necesidad de sincronización.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required.</source>
          <target state="translated">Siempre que hay un subproceso único para las operaciones de escritura y un subproceso único para las operaciones de lectura, no habrá ninguna interferencia cruzada entre lectura y se requiere ninguna sincronización y subprocesos de escritura.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> to write data asynchronously to a network stream.</source>
          <target state="translated">El siguiente ejemplo de código usa <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> para escribir datos de forma asincrónica en una secuencia de red.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">`myWriteCallBack`</ph> method implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate and is called by the system when <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> returns.</source>
          <target state="translated">El <ph id="ph1">`myWriteCallBack`</ph> método implementa el <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegar y es llamado por el sistema cuando <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> devuelve.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es mayor que la longitud de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="size" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="size" /&gt;</ph> es mayor que la longitud de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> menos el valor del parámetro <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> subyacente está cerrado.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>There was a failure while writing to the network.</source>
          <target state="translated">Se produjo un error al escribir en la red.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Se ha producido un error al obtener acceso al socket.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> está cerrado.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> supports reading.</source>
          <target state="translated">Obtiene un valor que indica si <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> admite la lectura.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be read from the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se pueden leer los datos de la secuencia; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> es <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> permite las llamadas a la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>Provide the appropriate <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerated value in the constructor to set the readability and writability of the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Proporcionar la correspondiente <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerado valor en el constructor para establecer la lectura y escritura de la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> propiedad se establece cuando el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se inicializa.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>The following code example checks <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> to verify that the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable.</source>
          <target state="translated">El siguiente código de ejemplo comprueba <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> para comprobar que la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es legible.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanRead">
          <source>It then performs a read operation on the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">A continuación, realiza una operación de lectura en el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source>Gets a value that indicates whether the stream supports seeking.</source>
          <target state="translated">Obtiene un valor que indica si la secuencia admite búsquedas.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source>This property is not currently supported.This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Esta propiedad no se admite actualmente. Esta propiedad devuelve siempre <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> in all cases to indicate that <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> cannot seek a specific location in the stream.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> en todos los casos para indicar que <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> no puede buscar una ubicación específica en la secuencia.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source>Indicates whether timeout properties are usable for <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Indica si las propiedades de tiempo de espera pueden utilizarse para <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> in all cases.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> en todos los casos.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanTimeout">
          <source>This property is present because it is inherited from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>.</source>
          <target state="translated">Esta propiedad está presente porque se hereda de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> supports writing.</source>
          <target state="translated">Obtiene un valor que indica si <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> admite la escritura.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be written to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si se pueden escribir datos en <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> es <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> permite las llamadas a la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>Provide the appropriate <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerated value in the constructor to set the readability and writability of the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Proporcionar la correspondiente <ph id="ph1">&lt;xref:System.IO.FileAccess&gt;</ph> enumerado valor en el constructor para establecer la lectura y escritura de la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propiedad se establece cuando el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se inicializa.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>The following code example checks <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> to verify that the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">El siguiente código de ejemplo comprueba <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> para comprobar que la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es grabable.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.CanWrite">
          <source>It then performs a write operation on the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">A continuación, realiza una operación de escritura en el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>A 32-bit signed integer that specifies the number of milliseconds to wait to send any remaining data before closing.</source>
          <target state="translated">Un entero con signo de 32 bits que especifica el número de milisegundos que se debe esperar para enviar los datos restantes antes de salir.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>Closes the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> after waiting the specified time to allow data to be sent.</source>
          <target state="translated">Cierra <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> después de esperar el tiempo especificado para permitir que se envíen los datos.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method frees both unmanaged and managed resources associated with the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> método libera los recursos administrados y no asociados con la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>If the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> owns the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, it is closed as well.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> posee subyacente <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>, también se cierra.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>If a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> was associated with a <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> method will close the TCP connection, but not dispose of the associated <ph id="ph4">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</source>
          <target state="translated">Si un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se asoció una <ph id="ph2">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>, el <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Close%2A&gt;</ph> método cierra la conexión TCP, pero no deseche asociado <ph id="ph4">&lt;xref:System.Net.Sockets.TcpClient&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> es menor que -1.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Gets a value that indicates whether data is available on the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> to be read.</source>
          <target state="translated">Obtiene un valor que indica si hay datos disponibles en <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> para su lectura.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data is available on the stream to be read; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si hay datos que leer en la secuencia; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Use the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> property to determine if data is ready to be read.</source>
          <target state="translated">Use la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> propiedad para determinar si éstos están listos para ser leídos.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, a call to <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> returns immediately.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> es <ph id="ph2">`true`</ph>, una llamada a <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> devuelve inmediatamente.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>If the remote host shuts down or closes the connection, <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> may throw a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si el host remoto se apaga o cierra la conexión, <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> puede producir un <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The following code example reads from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> as long as data is available.</source>
          <target state="translated">En el ejemplo de código siguiente se lee desde el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> siempre que los datos están disponibles.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> está cerrado.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> subyacente está cerrado.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.DataAvailable">
          <source>Use the <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Use la propiedad <ph id="ph1">&lt;see cref="P:System.Net.Sockets.SocketException.ErrorCode" /&gt;</ph> para obtener el código de error concreto y consulte en MSDN la documentación de códigos de error de la API de Windows Sockets, versión 2, para ver una descripción detallada del error.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar tanto recursos administrados como no administrados; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar únicamente recursos no administrados.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Libera los recursos no administrados que utiliza <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> y libera los recursos administrados de forma opcional.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">`Dispose`</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Se llama a este método público <ph id="ph1">`Dispose`</ph> método y <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">`Dispose`</ph> invokes the protected <ph id="ph2">`Dispose(Boolean)`</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`Dispose`</ph> se invoca el protegido <ph id="ph2">`Dispose(Boolean)`</ph> método con el <ph id="ph3">`disposing`</ph> parámetro establecido en <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">`Dispose`</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invoca <ph id="ph2">`Dispose`</ph> con <ph id="ph3">`disposing`</ph> establecido en <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> references.</source>
          <target state="translated">Cuando el parámetro <ph id="ph1">`disposing`</ph> es <ph id="ph2">`true`</ph>, este método libera todos los recursos retenidos por los objetos administrados a los que el control <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> hace referencia.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">`Dispose`</ph> method of each referenced object.</source>
          <target state="translated">Este método invoca al método <ph id="ph1">`Dispose`</ph> de cada uno de los objetos a los que se hace referencia.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> puede recibir varias llamadas de otros objetos.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</source>
          <target state="translated">Al invalidar <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <ph id="ph2">&lt;see langword="Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre cómo implementar <ph id="ph1">&lt;see langword="Dispose(Boolean)" /&gt;</ph>, consulte <bpt id="p1">[</bpt>implementa un método Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Overriding the Finalize Method<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Para obtener más información acerca de <ph id="ph1">&lt;see langword="Dispose" /&gt;</ph> y <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, consulte <bpt id="p1">[</bpt>limpiar recursos no administrados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> y <bpt id="p2">[</bpt>reemplazar el método Finalize<ept id="p2">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents an asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa la llamada asincrónica.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Handles the end of an asynchronous read.</source>
          <target state="translated">Controla el final de una lectura asincrónica.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Número de bytes leídos de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method completes the asynchronous read operation started in the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> método completa la operación de lectura asincrónica iniciada el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Before calling <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, you need to create a callback method that implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated">Antes de llamar a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>, debe crear un método de devolución de llamada que implementa el <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegar.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>This callback method executes in a separate thread and is called by the system after <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> returns.</source>
          <target state="translated">Este método de devolución de llamada se ejecuta en un subproceso independiente y es llamado por el sistema después de <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> devuelve.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The callback method must accept the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method as a parameter.</source>
          <target state="translated">El método de devolución de llamada debe aceptar el <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> devuelto desde el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método como parámetro.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Within the callback method, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to obtain the state object passed to the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">Dentro del método de devolución de llamada, llame a la <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> propiedad de la <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> para obtener el objeto de estado pasado a la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>Extract the receiving <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> from this state object.</source>
          <target state="translated">Extraer la recepción <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> de este objeto de estado.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>After obtaining the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, call the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method to successfully complete the read operation and return the number of bytes read.</source>
          <target state="translated">Después de obtener la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, llame a la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> método para completar la operación de lectura y devolver el número de bytes leídos correctamente.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method blocks until data is available.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> método se bloquea hasta que haya datos disponibles.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method reads as much data as is available up to the number of bytes specified in the <ph id="ph2">`size`</ph> parameter of the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> método lee tantos datos como está disponible hasta el número de bytes especificado en el <ph id="ph2">`size`</ph> parámetro de la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If the remote host shuts down the <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> connection and all available data has been received, the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> method completes immediately and returns zero bytes.</source>
          <target state="translated">Si el host remoto se apaga el <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> se ha recibido la conexión y todos los datos disponibles, el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> método se completa inmediatamente y devuelve cero bytes.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>To obtain the received data, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>, and extract the buffer contained in the resulting state object.</source>
          <target state="translated">Para obtener los datos recibidos, llame a la <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> propiedad de la <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph>y extraiga el búfer que contiene el objeto de estado resultante.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si recibe un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, compruebe la <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propiedad para determinar si se ha provocado por un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Si es así, utilice el <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propiedad para obtener el código de error concreto y consulte en MSDN la documentación de códigos de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>In the following code example, <ph id="ph1">`myReadCallback`</ph> is provided to <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> as the callback method.</source>
          <target state="translated">En el ejemplo de código siguiente, <ph id="ph1">`myReadCallback`</ph> se proporciona para <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> como método de devolución de llamada.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> is implemented in <ph id="ph2">`myReadCallback`</ph> to complete the asynchronous read call started by <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndRead%2A&gt;</ph> se implementa en <ph id="ph2">`myReadCallback`</ph> completar la asincrónica de lectura llamada iniciada por <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> subyacente está cerrado.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Se ha producido un error al obtener acceso al socket.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> está cerrado.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> that represents the asynchronous call.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> que representa la llamada asincrónica.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Handles the end of an asynchronous write.</source>
          <target state="translated">Controla el final de una escritura asincrónica.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> completes the asynchronous send operation started in <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> finaliza la operación de envío asincrónico iniciada <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Before calling <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, you need to create a callback method that implements the <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegate.</source>
          <target state="translated">Antes de llamar a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>, debe crear un método de devolución de llamada que implementa el <ph id="ph2">&lt;xref:System.AsyncCallback&gt;</ph> delegar.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>This callback method executes in a separate thread and is called by the system after <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> returns.</source>
          <target state="translated">Este método de devolución de llamada se ejecuta en un subproceso independiente y es llamado por el sistema después de <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> devuelve.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The callback method must accept the <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method as a parameter.</source>
          <target state="translated">El método de devolución de llamada debe aceptar el <ph id="ph1">&lt;xref:System.IAsyncResult&gt;</ph> devuelto desde el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> método como parámetro.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>Within the callback method, call the <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> property of the <ph id="ph2">`IAsyncResult`</ph> parameter to obtain the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">El método de devolución de llamada, se debe llamar a la <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncState%2A&gt;</ph> propiedad de la <ph id="ph2">`IAsyncResult`</ph> parámetro para obtener el <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>After obtaining the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, you can call the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method to successfully complete the send operation and return the number of bytes sent.</source>
          <target state="translated">Después de obtener la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>, puede llamar a la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> método para completar la operación de envío y devolver el número de bytes enviados correctamente.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> method blocks until the requested number of bytes are sent.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> método se bloquea hasta que se envíe el número solicitado de bytes.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si recibe un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, compruebe la <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propiedad para determinar si se ha provocado por un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Si es así, utilice el <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propiedad para obtener el código de error concreto y consulte en MSDN la documentación de códigos de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>In the following code example, <ph id="ph1">`myWriteCallback`</ph> is provided to <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> as the callback method.</source>
          <target state="translated">En el ejemplo de código siguiente, <ph id="ph1">`myWriteCallback`</ph> se proporciona para <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> como método de devolución de llamada.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> is implemented in <ph id="ph2">`myWriteCallback`</ph> to complete the asynchronous write call started by <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.EndWrite%2A&gt;</ph> se implementa en <ph id="ph2">`myWriteCallback`</ph> para completar la llamada de escritura asincrónica iniciada por <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> subyacente está cerrado.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>An error occurred while writing to the network.</source>
          <target state="translated">Se produjo un error al escribir en la red.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Se ha producido un error al obtener acceso al socket.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> está cerrado.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>Releases all resources used by the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Libera todos los recursos utilizados por <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>This method overrides <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este método invalida <ph id="ph1">&lt;xref:System.Object.Finalize%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>Application code should not call this method; an object's <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Código de la aplicación no debe llamar a este método; un objeto <ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> método se invoca automáticamente durante la recolección de elementos no utilizados, a menos que se ha deshabilitado la finalización por el recolector de elementos no utilizados mediante una llamada a la <ph id="ph2">&lt;xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Finalize">
          <source>For more information about using the Finalize method, see <bpt id="p1">[</bpt>Finalize Methods and Destructors<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>Cleaning Up Unmanaged Resources<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, and <bpt id="p3">[</bpt>Overriding the Finalize Method<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</source>
          <target state="translated">Para obtener más información acerca de cómo utilizar el método Finalize, vea <bpt id="p1">[</bpt>métodos de finalización y destructores<ept id="p1">](http://msdn.microsoft.com/library/fd376774-1643-499b-869e-9546a3aeea70)</ept>, <bpt id="p2">[</bpt>limpiar recursos no administrados<ept id="p2">](~/docs/standard/garbage-collection/unmanaged.md)</ept>, y <bpt id="p3">[</bpt>reemplazar el método Finalize<ept id="p3">](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)</ept>.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>Flushes data from the stream.</source>
          <target state="translated">Vacía los datos de la secuencia.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>This method is reserved for future use.</source>
          <target state="translated">Este método está reservado para un uso futuro.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> method implements the <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> method; however, because <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is not buffered, it has no affect on network streams.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> método implementa el <ph id="ph2">&lt;xref:System.IO.Stream.Flush%2A?displayProperty=nameWithType&gt;</ph> método; sin embargo, dado que <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> no es almacenado en búfer, no tiene ningún efecto en las secuencias de red.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Flush">
          <source>Calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> method does not throw an exception.</source>
          <target state="translated">Llamar a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Flush%2A&gt;</ph> método no produce una excepción.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A cancellation token used to propagate notification that this  operation should be canceled.</source>
          <target state="translated">Un token de cancelación que se puede usar para propagar la notificación de que esta operación debe cancelarse.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Flushes data from the stream as an asynchronous operation.</source>
          <target state="translated">Vacía los datos de la secuencia como una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Returns <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</source>
          <target state="translated">Devuelva <ph id="ph1">&lt;see cref="T:System.Threading.Tasks.Task" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The task object representing the asynchronous operation.</source>
          <target state="translated">Objeto de tarea que representa la operación asincrónica.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>This operation will not block.</source>
          <target state="translated">Esta operación no se bloqueará.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The returned <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> object will complete after data has been flushed from the stream for the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> instance.</source>
          <target state="translated">El valor devuelto <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> objeto se completará después de que se han vaciado los datos de la secuencia de la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> instancia.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>Gets the length of the data available on the stream.</source>
          <target state="translated">Obtiene la longitud de los datos disponibles en la secuencia.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>This property is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">Esta propiedad no se admite actualmente y siempre produce <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>The length of the data available on the stream.</source>
          <target state="translated">Longitud de los datos disponibles en la secuencia.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Length">
          <source>Any use of this property.</source>
          <target state="translated">Cualquier uso de esta propiedad.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>Gets or sets the current position in the stream.</source>
          <target state="translated">Obtiene o establece la posición actual en la secuencia.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>This property is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">Esta propiedad no se admite actualmente y siempre produce <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>The current position in the stream.</source>
          <target state="translated">La posición actual en la secuencia.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Position">
          <source>Any use of this property.</source>
          <target state="translated">Cualquier uso de esta propiedad.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that is the location in memory to store data read from the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> que corresponde a la ubicación de la memoria donde se almacenan los datos leídos de <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> to begin storing the data to.</source>
          <target state="translated">La ubicación en el <bpt id="p1">&lt;c&gt;</bpt>búfer<ept id="p1">&lt;/c&gt;</ept> donde comenzar a almacenar los datos.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Número de bytes que se va a leer de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads data from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Lee datos de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes read from the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>, or 0 if the socket is closed.</source>
          <target state="translated">Número de bytes leídos de <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>, o 0 si el socket está cerrado.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This method reads data into the <ph id="ph1">`buffer`</ph> parameter and returns the number of bytes successfully read.</source>
          <target state="translated">Este método lee los datos en el <ph id="ph1">`buffer`</ph> parámetro y devuelve el número de bytes leído correctamente.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the socket is closed, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method returns 0.</source>
          <target state="translated">Si se cierra el socket, el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> método devuelve 0.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> operation reads as much data as is available, up to the number of bytes specified by the <ph id="ph2">`size`</ph> parameter.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> operación lee tantos datos como haya disponibles, hasta el número de bytes especificado por el <ph id="ph2">`size`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the remote host shuts down the connection, and all available data has been received, the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method completes immediately and return zero bytes.</source>
          <target state="translated">Si el host remoto se cierra la conexión y se haya recibido todos los datos disponibles, el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> método se completa inmediatamente y devolverá cero bytes.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Check to see if the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable by calling the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property.</source>
          <target state="translated">Compruebe si el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es legible mediante una llamada a la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If you attempt to read from a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is not readable, you will get an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">Si se intenta leer de un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> que no es legible, obtendrá un <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si recibe un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, compruebe la <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propiedad para determinar si se ha provocado por un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If so, use the <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Si es así, utilice el <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A&gt;</ph> propiedad para obtener el código de error concreto y consulte en MSDN la documentación de códigos de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example uses <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> to determine if data is available to be read.</source>
          <target state="translated">El siguiente ejemplo de código utiliza <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.DataAvailable%2A&gt;</ph> para determinar si están disponibles para leer datos.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If data is available, it reads from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</source>
          <target state="translated">Si hay datos disponibles, lee desde el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es mayor que la longitud de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="size" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="size" /&gt;</ph> es mayor que la longitud de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> menos el valor del parámetro <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Se ha producido un error al obtener acceso al socket.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> is closed.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> subyacente está cerrado.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> está cerrado.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>There is a failure reading from the network.</source>
          <target state="translated">Se ha producido un error al leer de la red.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>Gets or sets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> can be read.</source>
          <target state="translated">Obtiene o establece un valor que indica si <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> admite la lectura.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> can be read; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que se puede leer <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>You must derive from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class to use the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property.</source>
          <target state="translated">Debe derivar de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> clase se debe utilizar el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> es <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> permite las llamadas a la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>You can also determine whether a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable by checking the publicly accessible <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> property.</source>
          <target state="translated">También puede determinar si un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es legible mediante la comprobación de acceso público <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanRead%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> propiedad se establece cuando el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se inicializa.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Readable">
          <source>In the following code example, the <ph id="ph1">`CanCommunicate`</ph> property checks the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> property to determine if the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is readable.</source>
          <target state="translated">En el ejemplo de código siguiente, la <ph id="ph1">`CanCommunicate`</ph> propiedad comprobaciones la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Readable%2A&gt;</ph> propiedad para determinar si la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es legible.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>Gets or sets the amount of time that a read operation blocks waiting for data.</source>
          <target state="translated">Obtiene o establece la cantidad de tiempo que una operación de lectura se bloquea en espera de los datos.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> que especifica la cantidad de tiempo, en milisegundos, que pasará antes de que se produzca un error en la operación de lectura.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The default value, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, specifies that the read operation does not time out.</source>
          <target state="translated">El valor predeterminado, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, especifica que no se agota el tiempo de espera de la operación de lectura.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>If the read operation does not complete within the time specified by this property, the read operation throws an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">Si la operación de lectura no finaliza dentro del tiempo especificado por esta propiedad, se inicia la operación de lectura un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>This property affects only synchronous reads performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> method.</source>
          <target state="translated">Esta propiedad afecta sólo sincrónicas lecturas realizadas mediante una llamada a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Read%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>This property does not affect asynchronous reads performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> method.</source>
          <target state="translated">Esta propiedad no afecta a las lecturas asincrónicas realizadas mediante una llamada a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginRead%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The following code example sets the read time-out for a network stream to 10 milliseconds.</source>
          <target state="translated">En el ejemplo de código siguiente se establece el tiempo de espera de lectura para una secuencia de red en 10 milisegundos.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.ReadTimeout">
          <source>The value specified is less than or equal to zero and is not <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">El valor especificado es menor o igual que cero y distinto de <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This parameter is not used.</source>
          <target state="translated">Este parámetro no se utiliza.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This parameter is not used.</source>
          <target state="translated">Este parámetro no se utiliza.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the stream to the given value.</source>
          <target state="translated">Establece la posición actual de la secuencia en el valor especificado.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>This method is not currently supported and always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">Este método no se admite actualmente y siempre produce <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The position in the stream.</source>
          <target state="translated">La posición en la secuencia.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Any use of this property.</source>
          <target state="translated">Cualquier uso de esta propiedad.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>This parameter is not used.</source>
          <target state="translated">Este parámetro no se utiliza.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>Sets the length of the stream.</source>
          <target state="translated">Establece la longitud de la secuencia.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>This method always throws a <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</source>
          <target state="translated">Este método produce siempre una excepción <ph id="ph1">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
          <source>Any use of this property.</source>
          <target state="translated">Cualquier uso de esta propiedad.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Gets the underlying <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph>.</source>
          <target state="translated">Obtiene el <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> subyacente.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>A <ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> that represents the underlying network connection.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Net.Sockets.Socket" /&gt;</ph> que representa la conexión de red subyacente.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Classes deriving from <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> can use this property to get the underlying <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</source>
          <target state="translated">Clases derivadas de <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> puede utilizar esta propiedad para obtener subyacente <ph id="ph2">&lt;xref:System.Net.Sockets.Socket&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>Use the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> returned from the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Socket%2A&gt;</ph> property if you require access beyond that which <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> provides.</source>
          <target state="translated">Usar subyacente <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> devuelto desde el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Socket%2A&gt;</ph> propiedad si necesita tener acceso a más allá de lo que <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> proporciona.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>This property is accessible only through this class or a derived class.</source>
          <target state="translated">Esta propiedad es accesible a través de esta clase o una clase derivada.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Socket">
          <source>The following code example retrieves the underlying <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> to verify an active connection.</source>
          <target state="translated">En el ejemplo de código siguiente se recupera subyacente <ph id="ph1">&lt;xref:System.Net.Sockets.Socket&gt;</ph> para comprobar una conexión activa.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> that contains the data to write to the <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Matriz de tipo <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph> que contiene los datos que se van a escribir en <ph id="ph2">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The location in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to start writing data.</source>
          <target state="translated">Ubicación del <bpt id="p1">&lt;c&gt;</bpt>búfer<ept id="p1">&lt;/c&gt;</ept> desde donde comenzar a escribir los datos.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Número de bytes que se van a escribir en <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes data to the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</source>
          <target state="translated">Escribe datos en <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method starts at the specified <ph id="ph2">`offset`</ph> and sends <ph id="ph3">`size`</ph> bytes from the contents of <ph id="ph4">`buffer`</ph> to the network.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> método comienza en el índice especificado <ph id="ph2">`offset`</ph> y envía <ph id="ph3">`size`</ph> bytes desde el contenido de <ph id="ph4">`buffer`</ph> a la red.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method blocks until the requested number of bytes is sent or a <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> is thrown.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> método se bloquea hasta que se envíe el número solicitado de bytes o una <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> se produce.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive a <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</source>
          <target state="translated">Si recibe un <ph id="ph1">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>, use el <ph id="ph2">&lt;xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType&gt;</ph> propiedad para obtener el código de error concreto y consulte en MSDN la documentación de códigos de error de la API de Windows Sockets, versión 2 para obtener una descripción detallada del error.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Check to see if the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable by accessing the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">Compruebe si el <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es grabable mediante el acceso a la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you attempt to write to a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> that is not writable, you will get an <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">Si se intenta escribir en un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> que no es grabable, obtendrá un <ph id="ph2">&lt;xref:System.IO.IOException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If you receive an <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, check the <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property to determine if it was caused by a <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</source>
          <target state="translated">Si recibe un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>, compruebe la <ph id="ph2">&lt;xref:System.Exception.InnerException%2A&gt;</ph> propiedad para determinar si se ha provocado por un <ph id="ph3">&lt;xref:System.Net.Sockets.SocketException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example checks to see whether the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">El siguiente código de ejemplo se comprueba para ver si la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es grabable.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>If it is, then <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> is used to write a small message.</source>
          <target state="translated">Si es así, a continuación, <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> se usa para escribir un mensaje pequeño.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es mayor que la longitud de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is less than 0.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="size" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="size" /&gt;</ph> parameter is greater than the length of <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> minus the value of the <ph id="ph3">&lt;paramref name="offset" /&gt;</ph> parameter.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="size" /&gt;</ph> es mayor que la longitud de <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> menos el valor del parámetro <ph id="ph3">&lt;paramref name="offset" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>There was a failure while writing to the network.</source>
          <target state="translated">Se produjo un error al escribir en la red.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An error occurred when accessing the socket.</source>
          <target state="translated">Se ha producido un error al obtener acceso al socket.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is closed.</source>
          <target state="translated">El objeto <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> está cerrado.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>There was a failure reading from the network.</source>
          <target state="translated">Se ha producido un error al leer de la red.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>Gets a value that indicates whether the <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> is writable.</source>
          <target state="translated">Obtiene un valor que indica si <ph id="ph1">&lt;see cref="T:System.Net.Sockets.NetworkStream" /&gt;</ph> admite la escritura.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if data can be written to the stream; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se pueden escribir datos en la secuencia; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>The default value is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>You must derive from the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> class to use the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property.</source>
          <target state="translated">Debe derivar de la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> clase se debe utilizar el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>If <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> is <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> allows calls to the <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> es <ph id="ph2">`true`</ph>, <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> permite las llamadas a la <ph id="ph4">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>You can also determine whether a <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable by checking the publicly accessible <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> property.</source>
          <target state="translated">También puede determinar si un <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es grabable mediante la comprobación de acceso público <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.CanWrite%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>The <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property is set when the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is initialized.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> propiedad se establece cuando el <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> se inicializa.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.Writeable">
          <source>In the following code example, the <ph id="ph1">`CanCommunicate`</ph> property checks the <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> property to determine if the <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> is writable.</source>
          <target state="translated">En el ejemplo de código siguiente, la <ph id="ph1">`CanCommunicate`</ph> propiedad comprobaciones la <ph id="ph2">&lt;xref:System.Net.Sockets.NetworkStream.Writeable%2A&gt;</ph> propiedad para determinar si la <ph id="ph3">&lt;xref:System.Net.Sockets.NetworkStream&gt;</ph> es grabable.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>Gets or sets the amount of time that a write operation blocks waiting for data.</source>
          <target state="translated">Obtiene o establece la cantidad de tiempo que una operación de escritura se bloquea en espera de los datos.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>A <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> que especifica la cantidad de tiempo, en milisegundos, que pasará antes de que se produzca un error en la operación de escritura.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The default value, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, specifies that the write operation does not time out.</source>
          <target state="translated">El valor predeterminado, <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>, especifica que no se agota el tiempo de espera de la operación de escritura.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>If the write operation does not complete within the time specified by this property, the write operation throws a <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</source>
          <target state="translated">Si la operación de escritura no se completa dentro del tiempo especificado por esta propiedad, la operación de escritura inicia un <ph id="ph1">&lt;xref:System.IO.IOException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>This property affects only synchronous write operations performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> method.</source>
          <target state="translated">Esta propiedad afecta a las operaciones de escritura sincrónica solo realizadas mediante una llamada a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.Write%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>This property does not affect asynchronous writes performed by calling the <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> method.</source>
          <target state="translated">Esta propiedad no afecta a las escrituras asincrónicas realizadas mediante una llamada a la <ph id="ph1">&lt;xref:System.Net.Sockets.NetworkStream.BeginWrite%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The following code example sets the write time-out for a network stream to 10 milliseconds.</source>
          <target state="translated">En el ejemplo de código siguiente se establece el tiempo de espera de escritura para una secuencia de red en 10 milisegundos.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Net.Sockets.NetworkStream.WriteTimeout">
          <source>The value specified is less than or equal to zero and is not <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</source>
          <target state="translated">El valor especificado es menor o igual que cero y distinto de <ph id="ph1">&lt;see cref="F:System.Threading.Timeout.Infinite" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>