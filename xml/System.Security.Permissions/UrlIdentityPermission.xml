<Type Name="UrlIdentityPermission" FullName="System.Security.Permissions.UrlIdentityPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a3dbdc951282baa57d11b4722638b92d50e5192d" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52360439" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class UrlIdentityPermission : System.Security.CodeAccessPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit UrlIdentityPermission extends System.Security.CodeAccessPermission" />
  <TypeSignature Language="DocId" Value="T:System.Security.Permissions.UrlIdentityPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class UrlIdentityPermission&#xA;Inherits CodeAccessPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class UrlIdentityPermission sealed : System::Security::CodeAccessPermission" />
  <TypeSignature Language="F#" Value="type UrlIdentityPermission = class&#xA;    inherit CodeAccessPermission" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Define el permiso de identidad para la dirección URL desde la que se origina el código. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se considera la dirección URL completa, incluido el protocolo (HTTP, HTTPS y FTP) y el archivo. Por ejemplo, http://www.fourthcoffee.com/process/grind.htm es una dirección URL completa.  
  
 Las direcciones URL coinciden exactamente o un carácter comodín en la posición final, por ejemplo: http://www.fourthcoffee.com/process/*. Las direcciones URL también pueden contener un carácter comodín ("\*") el prefijo en el delimitador de punto. Por ejemplo, la cadena de nombre de la dirección URL http://www.fourthcoffee.com/process/grind.htm/ es un subconjunto de http://\*.fourthcoffee.com/process/grind.htm/ y http://\*.com/process/grind.htm/.  
  
> [!IMPORTANT]
>  A partir de la [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], no se utilizan los permisos de identidad.  
>   
>  En las versiones 1.0 y 1.1 de .NET Framework, las demandas de los permisos de identidad son eficaces incluso cuando el ensamblado de llamada es de plena confianza. Es decir, aunque el ensamblado de llamada no tiene plena confianza, una petición para un permiso de identidad se produce un error si el ensamblado no cumple los criterios requeridos. A partir de la versión 2.0 de .NET Framework, las solicitudes de permisos de identidad son efectivas si el ensamblado que realiza la llamada no tiene plena confianza. Es decir, una solicitud de una identidad siempre se realiza correctamente, independientemente de la identidad del ensamblado, si se ha concedido al ensamblado de plena confianza. Esto garantiza la coherencia para todos los permisos, lo que elimina el tratamiento de los permisos de identidad como un caso especial.  
  
> [!NOTE]
>  En las versiones de .NET Framework anteriores a la [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], podría usar la <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=nameWithType> método para impedir el acceso involuntario a recursos del sistema por código de confianza. <xref:System.Security.CodeAccessPermission.Deny%2A> Ahora está obsoleto, y ahora se determina el acceso a los recursos únicamente por el permiso concedido establecido para un ensamblado. Para limitar el acceso a archivos, debe ejecutar el código de confianza parcial en un espacio aislado y asignarle permisos solo a los recursos que el código tiene permiso para acceder. Para obtener información acerca de cómo ejecutar una aplicación en un espacio aislado, consulte [Cómo: ejecutar código de confianza parcial en un espacio aislado](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, los permisos de identidad no pueden tener un <xref:System.Security.Permissions.PermissionState.Unrestricted> valor de estado de permiso. A partir de la versión 2.0 de .NET Framework, los permisos de identidad pueden tener cualquier valor de estado de permiso. Esto significa que en las versiones 2.0 y versiones posteriores, los permisos de identidad tienen el mismo comportamiento que los permisos que implementan la <xref:System.Security.Permissions.IUnrestrictedPermission> interfaz.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.Permissions.UrlIdentityPermissionAttribute" />
    <altmember cref="T:System.Security.Policy.Url" />
    <altmember cref="T:System.Security.Policy.UrlMembershipCondition" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.Permissions.UrlIdentityPermission" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UrlIdentityPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.Security.Permissions.PermissionState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As PermissionState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UrlIdentityPermission(System::Security::Permissions::PermissionState state);" />
      <MemberSignature Language="F#" Value="new System.Security.Permissions.UrlIdentityPermission : System.Security.Permissions.PermissionState -&gt; System.Security.Permissions.UrlIdentityPermission" Usage="new System.Security.Permissions.UrlIdentityPermission state" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">Uno de los valores de <see cref="T:System.Security.Permissions.PermissionState" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> con el objeto <see cref="T:System.Security.Permissions.PermissionState" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Crea un totalmente restringido (`None`) o `Unrestricted` permiso.  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, los permisos de identidad no pueden tener un <xref:System.Security.Permissions.PermissionState.Unrestricted> valor de estado de permiso. A partir de la versión 2.0 de .NET Framework, los permisos de identidad pueden tener cualquier valor de estado de permiso. Esto significa que en las versiones 2.0 y versiones posteriores, los permisos de identidad tienen el mismo comportamiento que los permisos que implementan la <xref:System.Security.Permissions.IUnrestrictedPermission> interfaz. Es decir, una solicitud de una identidad siempre se realiza correctamente, independientemente de la identidad del ensamblado, si se ha concedido al ensamblado de plena confianza.  
  
 En las versiones 1.0 y 1.1 de .NET Framework, las demandas de los permisos de identidad son eficaces, incluso cuando el ensamblado de llamada es de plena confianza. Es decir, aunque el ensamblado de llamada no tiene plena confianza, una petición para un permiso de identidad se produce un error si el ensamblado no cumple los criterios requeridos. A partir de la versión 2.0 de .NET Framework, las solicitudes de permisos de identidad son efectivas si el ensamblado que realiza la llamada no tiene plena confianza. Esto garantiza la coherencia para todos los permisos, lo que elimina el tratamiento de los permisos de identidad como un caso especial.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el uso de la <xref:System.Security.Permissions.UrlIdentityPermission.%23ctor%28System.Security.Permissions.PermissionState%29?displayProperty=nameWithType> constructor.  
  
 [!code-cpp[System.Security.Permissions.UrlIdentityPermission#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/CPP/urlidentity.cpp#7)]
 [!code-csharp[System.Security.Permissions.UrlIdentityPermission#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/CS/urlidentity.cs#7)]
 [!code-vb[System.Security.Permissions.UrlIdentityPermission#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/VB/urlidentity.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="state" /> no es un valor válido de <see cref="T:System.Security.Permissions.PermissionState" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UrlIdentityPermission (string site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (site As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; UrlIdentityPermission(System::String ^ site);" />
      <MemberSignature Language="F#" Value="new System.Security.Permissions.UrlIdentityPermission : string -&gt; System.Security.Permissions.UrlIdentityPermission" Usage="new System.Security.Permissions.UrlIdentityPermission site" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="site" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="site">Dirección URL o expresión de caracteres comodín.</param>
        <summary>Inicializa un nueva instancia de la clase <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> para representar la identidad de URL descrita por <paramref name="site" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se considera la dirección URL completa, incluido el protocolo (HTTP, HTTPS y FTP) y el archivo, por ejemplo: http://www.fourthcoffee.com/process/grind.htm/.  
  
 Las direcciones URL coinciden exactamente o un carácter comodín en la posición final, por ejemplo: http://www.fourthcoffee.com/process/*. Las direcciones URL también pueden contener un carácter comodín ("\*") el prefijo en el delimitador de punto. Por ejemplo, la cadena de nombre de la dirección URL http://www.fourthcoffee.com/process/grind.htm/ es un subconjunto de http://\*.fourthcoffee.com/process/grind.htm/ y http://\*.com/process/grind.htm/.  
  
> [!NOTE]
>  A partir de .NET Framework versión 2.0, por motivos de rendimiento, no es válido dirección URL no produce una excepción de argumento en el momento en que se crea la nueva instancia de clase.  Cuando se ejecuta una de las operaciones de conjunto (Union, Intersect o IsSubsetOf), se producirá la excepción de argumento.  Una demanda de las causas de permiso <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A> para ser llamado por la infraestructura de seguridad. La demanda se producirá un error debido a la excepción de argumento, lo que resulta en una <xref:System.Security.SecurityException> producida. En este caso, el original <xref:System.ArgumentException> no se verán la excepción.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el uso de la <xref:System.Security.Permissions.UrlIdentityPermission.%23ctor%28System.String%29?displayProperty=nameWithType> constructor.  
  
 [!code-cpp[System.Security.Permissions.UrlIdentityPermission#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/CPP/urlidentity.cpp#8)]
 [!code-csharp[System.Security.Permissions.UrlIdentityPermission#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/CS/urlidentity.cs#8)]
 [!code-vb[System.Security.Permissions.UrlIdentityPermission#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.UrlIdentityPermission/VB/urlidentity.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="site" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">La longitud del parámetro <paramref name="site" /> es cero.</exception>
        <exception cref="T:System.ArgumentException">La dirección URL, la parte de sitio o el directorio del parámetro <paramref name="site" /> no es válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.UrlIdentityPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="override this.Copy : unit -&gt; System.Security.IPermission" Usage="urlIdentityPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea y devuelve una copia idéntica del permiso actual.</summary>
        <returns>Copia del permiso actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una copia de un permiso representa el mismo acceso a los recursos que el permiso original.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement esd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement esd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXml (esd As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXml(System::Security::SecurityElement ^ esd);" />
      <MemberSignature Language="F#" Value="override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="urlIdentityPermission.FromXml esd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="esd" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="esd">Codificación XML que se usa para reconstruir el permiso.</param>
        <summary>Reconstruye un permiso con un estado especificado a partir de una codificación XML.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="esd" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="esd" /> no es un elemento de permiso válido.  
  
O bien 
El número de la versión del parámetro <paramref name="esd" /> no es válido.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="urlIdentityPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso para formar intersección con el permiso actual. Debe ser del mismo tipo que el permiso actual.</param>
        <summary>Crea y devuelve un permiso que es la intersección del permiso actual y el permiso especificado.</summary>
        <returns>Nuevo permiso que representa la intersección del permiso actual y del permiso especificado. Este nuevo permiso es <see langword="null" /> si la intersección está vacía.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La intersección de dos permisos es un permiso que describe el acceso a las direcciones URL descritas en ambos. Sólo una petición que pase ambos permisos originales pasará la intersección. Por ejemplo, la intersección de un permiso que representa el acceso a http://www.fourthcoffee.com/process/grind.htm y un permiso que representa el acceso a http://www.fourthcoffee.com/* es un permiso que representa el acceso a http://www.fourthcoffee.com/process/grind.htm.  
  
 <xref:System.Security.Permissions.UrlIdentityPermission> admite operaciones de conjunto (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, y <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) solo cuando el permiso actual es igual que el objeto de permiso especificado o uno de los permisos cuando utiliza el operador comodín ("*").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="target" /> no es <see langword="null" /> y no es del mismo tipo que el permiso actual.  
  
O bien 
La propiedad Url no es una dirección URL válida.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="urlIdentityPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso que se va a probar para la relación de subconjunto. Este permiso debe ser del mismo tipo que el permiso actual.</param>
        <summary>Determina si el permiso actual es un subconjunto del permiso especificado.</summary>
        <returns>
          <see langword="true" /> si el permiso actual es un subconjunto del permiso especificado; si no, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El permiso actual es un subconjunto del permiso especificado si el permiso actual identifica el acceso a una dirección URL que está incluido completamente por el permiso especificado. Por ejemplo, un permiso que representa el acceso a http://www.fourthcoffee.com/process/grind.htm es un subconjunto de un permiso que representa el acceso a http://www.fourthcoffee.com/*. Si este método devuelve `true`, el permiso actual no representa ningún más acceso al recurso protegido que tiene el permiso especificado.  
  
 <xref:System.Security.Permissions.UrlIdentityPermission> admite operaciones de conjunto (<xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, y <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) solo cuando el permiso actual es igual al permiso especificado o uno de los permisos cuando utiliza el operador comodín ("*").  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="target" /> no es <see langword="null" /> y no es del mismo tipo que el permiso actual.  
  
O bien 
La propiedad Url no es una dirección URL válida.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.UrlIdentityPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="urlIdentityPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una codificación XML del permiso y su estado actual.</summary>
        <returns>Codificación XML del permiso, incluida cualquier información de estado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="urlIdentityPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso para combinar con el permiso actual. Debe ser del mismo tipo que el permiso actual.</param>
        <summary>Crea un permiso que es la unión del permiso actual y el permiso especificado.</summary>
        <returns>Nuevo permiso que representa la unión del permiso actual y el especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El resultado de una llamada a la <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A> método es un permiso que representa el acceso a la dirección URL tal como está representada por el permiso actual, así como acceso a la dirección URL tal como está representada por el permiso especificado.  
  
 El <xref:System.Security.Permissions.UrlIdentityPermission> clase admite operaciones de conjunto <xref:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf%2A>, <xref:System.Security.Permissions.UrlIdentityPermission.Intersect%2A>, y <xref:System.Security.Permissions.UrlIdentityPermission.Union%2A>) solo cuando el permiso actual es igual al permiso especificado o cuando uno de los permisos utiliza el operador comodín ("*") y uno es un subconjunto de la otros.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="target" /> no es <see langword="null" /> y no es del mismo tipo que el permiso actual.  
  
O bien 
La propiedad <see cref="P:System.Security.Permissions.UrlIdentityPermission.Url" /> no es una dirección URL válida.  
  
O bien 
Los dos permisos no son iguales y uno no es un subconjunto del otro.</exception>
        <exception cref="T:System.NotSupportedException">La operación es ambigua porque el permiso representa varias identidades.</exception>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public string Url { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Url" />
      <MemberSignature Language="DocId" Value="P:System.Security.Permissions.UrlIdentityPermission.Url" />
      <MemberSignature Language="VB.NET" Value="Public Property Url As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Url { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Url : string with get, set" Usage="System.Security.Permissions.UrlIdentityPermission.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una dirección URL que representa la identidad del código de Internet.</summary>
        <value>Dirección URL que representa la identidad del código de Internet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se considera la dirección URL completa, incluido el protocolo (HTTP, HTTPS y FTP) y el archivo, por ejemplo: http://www.fourthcoffee.com/process/grind.htm/.  
  
 Las direcciones URL coinciden exactamente o un carácter comodín en la posición final, por ejemplo: http://www.fourthcoffee.com/process/*.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">No se puede recuperar la dirección URL porque tiene una identidad ambigua.</exception>
      </Docs>
    </Member>
  </Members>
</Type>