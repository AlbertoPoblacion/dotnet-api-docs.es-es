<Type Name="ExpressionBuilder" FullName="System.Web.Compilation.ExpressionBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2fdfaba358c803078ed8f887cd2d70b7a32d185d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529399" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ExpressionBuilder" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionBuilder abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Evalúa las expresiones durante el análisis de páginas.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Compilation.ExpressionBuilder> clase es la clase base para los generadores de expresiones, como la <xref:System.Web.Compilation.AppSettingsExpressionBuilder> (clase), que crea expresiones de código durante el análisis de la página.  
  
 Los generadores de expresiones analizan las expresiones declarativas y crean código para recuperar los valores enlazados a una propiedad de control. En escenarios sin compilación, un generador de expresiones que admite una característica sin compilación evalúa la expresión en tiempo de ejecución.  
  
 Cuando el analizador de páginas encuentra una expresión delimitada con la cadena `<%$ %>`, crea un generador de expresiones para la expresión basándose en el prefijo de la cadena. El prefijo es la parte de la cadena que está a la izquierda de los dos puntos (:). Por ejemplo, cuando el analizador encuentra la cadena `<%$ ConnectionStrings:MessageDB %>`, crea un <xref:System.Web.Compilation.ConnectionStringsExpressionBuilder> objeto. Los prefijos se asocian con los generadores de expresiones en el archivo Web.config en la <xref:System.Web.Configuration.CompilationSection.ExpressionBuilders%2A> sección.  
  
 El lado derecho de la expresión declarativa se pasa al generador de expresiones para su evaluación. Invalidar el <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> método para generar el código que se va a compilar con la página.  
  
 Si desea que el generador de expresiones personalizado esté activo en páginas que no se compilan, también debe invalidar el <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> método para devolver un objeto que representa los resultados de la expresión. También debe invalidar el <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propiedad para indicar que el generador de expresiones personalizado admite páginas sin compilación.  
  
 Puede definir un conjunto de propiedades y métodos para seleccionar y evaluar una expresión que está asociada a una propiedad de control en tiempo de diseño mediante la implementación de un editor de expresiones. El editor se marca en el generador de expresiones a través de los metadatos de nivel de clase. Para obtener más información, vea <xref:System.Web.UI.Design.ExpressionEditor>.  
  
   
  
## Examples  
 Ejemplos de código siguientes muestran cómo compilar un generador de expresiones personalizado implementando la <xref:System.Web.Compilation.ExpressionBuilder> clase abstracta. Esta implementación de <xref:System.Web.Compilation.ExpressionBuilder> devuelve una instrucción evaluada que se pasa a la expresión. Para ejecutar este ejemplo, primero debe registrar el generador de expresiones personalizado en el archivo Web.config. El primer ejemplo de código muestra cómo registrar el generador de expresiones personalizado en el archivo Web.config.  
  
```  
<configuration>  
    <system.web>  
       <compilation>  
          <expressionBuilders>  
              <add expressionPrefix="MyCustomExpression"  
               type="MyCustomExpressionBuilder"/>  
          </expressionBuilders>  
       </compilation>  
    </system.web>  
</configuration>  
```  
  
 El segundo ejemplo de código muestra cómo hacer referencia a la expresión en un archivo .aspx.  
  
```  
<asp:Label ID="Label1" runat="server"   
Text="<%$ MyCustomExpression:Hello, world! %>" />  
```  
  
 El tercer ejemplo de código muestra cómo desarrollar un generador de expresiones personalizado derivando de <xref:System.Web.Compilation.ExpressionBuilder>. Para ejecutar este ejemplo de código, debe colocar la clase en la carpeta App_Code.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#1)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#1)]   
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Al heredar de la <see cref="T:System.Web.Compilation.ExpressionBuilder" /> (clase), es necesario reemplazar el <see cref="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> método.</para>
    </block>
    <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
    <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
    <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Compilation.ExpressionBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la <xref:System.Web.Compilation.ExpressionBuilder> clase es abstracta, no se puede crear una instancia de <xref:System.Web.Compilation.ExpressionBuilder> directamente mediante el <xref:System.Web.Compilation.ExpressionBuilder.%23ctor%2A> constructor.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al derivar desde la <see cref="T:System.Web.Compilation.ExpressionBuilder" /> clase, invalide el <see cref="M:System.Web.Compilation.ExpressionBuilder.#ctor" /> constructor para implementar acciones de inicialización personalizadas para la implementación del generador de expresiones.</para>
        </block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilderContext" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
        <altmember cref="T:System.Web.Configuration.ExpressionBuilderCollection" />
        <altmember cref="T:System.Web.Compilation.AppSettingsExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ConnectionStringsExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public virtual object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(object target, class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EvaluateExpression (target As Object, entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EvaluateExpression(System::Object ^ target, System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="target">Objeto que contiene la expresión.</param>
        <param name="entry">Objeto que representa la información sobre la propiedad con la que se establece el enlace mediante la expresión.</param>
        <param name="parsedData">Objeto que contiene los datos analizados devuelto por <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Información de contexto para la evaluación de la expresión.</param>
        <summary>Cuando se reemplaza en una clase derivada, devuelve un objeto que representa una expresión evaluada.</summary>
        <returns>Es un objeto que representa la expresión evaluada; de lo contrario, es <see langword="null" /> si el heredero no implementa <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si desea que su <xref:System.Web.Compilation.ExpressionBuilder> objeto que se va a estar activo en una página que admite la característica sin compilación, puede invalidar la <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> método y <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propiedad. El <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> método debe devolver la evaluación de la expresión actual.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el invalidado <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> método para devolver una expresión evaluada.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#3)]    
 [!code-vb[System.Web.Compilation.ExpressionBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#3)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si invalida el <see cref="M:System.Web.Compilation.ExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" /> método, también debe invalidar el <see cref="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" /> propiedad.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetCodeExpression">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression GetCodeExpression(class System.Web.UI.BoundPropertyEntry entry, object parsedData, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCodeExpression (entry As BoundPropertyEntry, parsedData As Object, context As ExpressionBuilderContext) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::CodeExpression ^ GetCodeExpression(System::Web::UI::BoundPropertyEntry ^ entry, System::Object ^ parsedData, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Web.UI.BoundPropertyEntry" />
        <Parameter Name="parsedData" Type="System.Object" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="entry">Objeto que representa la información sobre la propiedad con la que se establece el enlace mediante la expresión.</param>
        <param name="parsedData">Objeto que contiene los datos analizados devuelto por <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</param>
        <param name="context">Información de contexto para la evaluación de la expresión.</param>
        <summary>Cuando se reemplaza en una clase derivada, devuelve código que se utiliza durante la ejecución de la página para obtener la expresión evaluada.</summary>
        <returns>
          <see cref="T:System.CodeDom.CodeExpression" /> utilizado para la asignación de propiedad.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las clases que heredan de la <xref:System.Web.Compilation.ExpressionBuilder> clase debe implementar la <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> método abstracto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo devolver un <xref:System.CodeDom.CodeExpression> objeto invalidando el <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> método.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#4)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#4)]   
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si implementa un generador de expresiones personalizado, debe realizar la conversión de tipo adecuado para la propiedad de control y devolver la operación de conversión en el <see cref="T:System.CodeDom.CodeExpression" /> objeto.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParseExpression">
      <MemberSignature Language="C#" Value="public virtual object ParseExpression (string expression, Type propertyType, System.Web.Compilation.ExpressionBuilderContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseExpression(string expression, class System.Type propertyType, class System.Web.Compilation.ExpressionBuilderContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ParseExpression (expression As String, propertyType As Type, context As ExpressionBuilderContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ParseExpression(System::String ^ expression, Type ^ propertyType, System::Web::Compilation::ExpressionBuilderContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="context" Type="System.Web.Compilation.ExpressionBuilderContext" />
      </Parameters>
      <Docs>
        <param name="expression">Valor de la expresión declarativa.</param>
        <param name="propertyType">Tipo de la propiedad a la que se establece un enlace mediante la expresión.</param>
        <param name="context">Información de contexto para la evaluación de la expresión.</param>
        <summary>Cuando se reemplaza en una clase derivada, devuelve un objeto que representa una expresión analizada.</summary>
        <returns>Es un objeto <see cref="T:System.Object" /> que contiene la representación analizada de la expresión; de lo contrario, es <see langword="null" /> si no se implementa <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se invalida en una clase derivada, este método analiza la expresión y lo devuelve como un objeto que puede utilizarse como el `parsedData` parámetro en un <xref:System.Web.Compilation.ExpressionBuilder.GetCodeExpression%2A> o <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsEvaluate">
      <MemberSignature Language="C#" Value="public virtual bool SupportsEvaluate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsEvaluate" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SupportsEvaluate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SupportsEvaluate { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, devuelve un valor que indica si el objeto <see cref="T:System.Web.Compilation.ExpressionBuilder" /> actual admite páginas sin compilación.</summary>
        <value>
          Es <see langword="true" /> si <see cref="T:System.Web.Compilation.ExpressionBuilder" /> admite la evaluación de expresiones; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor predeterminado para la <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propiedad es `false`. Para admitir páginas sin compilación, debe invalidar el <xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> método y <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.Compilation.ExpressionBuilder.SupportsEvaluate%2A> propiedad.  
  
 [!code-csharp[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/CS/MyExpressionBuilder.cs#2)] 
 [!code-vb[System.Web.Compilation.ExpressionBuilder#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ExpressionBuilder/VB/MyExpressionBuilder.vb#2)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>