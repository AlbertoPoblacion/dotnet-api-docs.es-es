<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d0252eeffff662891a4fb72718c963444a8ee8c6" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37607975" /></Metadata><TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Define el método que una clase implementa para procesar un ensamblado después de que éste se haya compilado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una clase que implementa esta interfaz puede tener acceso a un ensamblado después de que se ha compilado. El <xref:System.Web.Compilation.AssemblyBuilder> clase compila los ensamblados y, a continuación, comprueba si un <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaz se ha registrado en el archivo de configuración Web. Si es así, el <xref:System.Web.Compilation.AssemblyBuilder> llama a la instancia del <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> método para el <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaz para realizar cualquier acción después de la compilación y antes de cargar el ensamblado. Por ejemplo, una herramienta de generador de perfiles podría implementar esta interfaz para establecer los sondeos en el ensamblado.  
  
 Cuando un <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaz está registrada, la aplicación de ASP.NET y sus ensamblados siempre se compilarán en modo de depuración.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una implementación de la <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaz y la registra en el archivo Web.config de una aplicación Web.  
  
 La primera parte del ejemplo de código crea una clase denominada `Samples.Process.postProcessTest` que implementa el <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaz. Esta clase realiza la acción sencilla de escribir en un archivo cuando el <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> se llama al método.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Compile la clase en un archivo .dll con el comando `csc /target:library postProcessTest.cs`. Agregue el archivo .dll resultante a la carpeta Bin de una aplicación ASP.NET y registrar el archivo .dll en el archivo Web.config, tal como se muestra en el código siguiente.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Cuando un usuario visita el sitio Web, la aplicación Web está compilada dinámicamente y el archivo MyTest.txt se escribirán en C:\compile.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Ruta de acceso al ensamblado.</param>
        <summary>Se le llama antes de que el ensamblado se cargue para permitir que la clase que efectúa la implementación modifique el ensamblado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.Compilation.AssemblyBuilder> clase llama a este método después de que se ha compilado el ensamblado. En este método se deben incluir las acciones que deben realizarse antes de cargar el ensamblado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una implementación de la <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaz y la registra en el archivo Web.config de una aplicación Web.  
  
 La primera parte del ejemplo de código crea una clase denominada `Samples.Process.postProcessTest` que implementa el <xref:System.Web.Compilation.IAssemblyPostProcessor> interfaz. Esta clase realiza la acción sencilla de escribir en un archivo cuando el <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> se llama al método.  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 Compile la clase en un archivo .dll con el comando `csc /target:library postProcessTest.cs`. Agregue el archivo .dll resultante a la carpeta Bin de una aplicación ASP.NET y registrar el archivo .dll en el archivo Web.config, tal como se muestra en el código siguiente.  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 Cuando un usuario visita el sitio Web, la aplicación Web está compilada dinámicamente y el archivo MyTest.txt se escribirán en C:\compile.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>