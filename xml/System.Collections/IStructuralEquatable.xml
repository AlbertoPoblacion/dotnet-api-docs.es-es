<Type Name="IStructuralEquatable" FullName="System.Collections.IStructuralEquatable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24f9f86b4e1994a1305d34f6917275d03ae43de0" />
    <Meta Name="ms.sourcegitcommit" Value="6ee2e6b2c5d7c5bd66feeb362d29e65fdf858836" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/15/2018" />
    <Meta Name="ms.locfileid" Value="51689889" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStructuralEquatable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IStructuralEquatable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type IStructuralEquatable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define los métodos para admitir la comparación de objetos de igualdad estructural.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Igualdad estructural significa que dos objetos son iguales porque tienen los mismos valores. Difiere de la igualdad de referencia, que indica que dos referencias de objeto son iguales porque hacen referencia al mismo objeto físico. El <xref:System.Collections.IStructuralEquatable> interfaz le permite implementar comparaciones personalizadas para comprobar la igualdad estructural de objetos de colección. Es decir, puede crear su propia definición de igualdad estructural y especificar que esta definición se usa con un tipo de colección que acepta el <xref:System.Collections.IStructuralEquatable> interfaz. La interfaz tiene dos miembros: <xref:System.Collections.IStructuralEquatable.Equals%2A>, que comprueba la igualdad mediante el uso de un determinado <xref:System.Collections.IEqualityComparer> implementación, y <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>, que devuelve los códigos hash idénticos para los objetos que son iguales.  
  
> [!NOTE]
>  El <xref:System.Collections.IStructuralEquatable> interfaz admite solo las comparaciones personalizadas para comprobar su igualdad estructural. El <xref:System.Collections.IStructuralComparable> interfaz admite comparaciones estructurales personalizadas para ordenar y clasificar.  
  
 .NET Framework también proporciona predeterminada comparadores de igualdad, que son devueltos por la <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> y <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType> propiedades. Para obtener más información, vea el ejemplo.  
  
 Las clases de tupla genéricas (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, etc.) y la <xref:System.Array> clase proporcione implementaciones explícitas de la <xref:System.Collections.IStructuralEquatable> interfaz. Conversión (en C#) o convirtiendo (en Visual Basic) de la instancia actual de una matriz o una tupla a un <xref:System.Collections.IStructuralEquatable> valor de la interfaz y proporcionar su <xref:System.Collections.IEqualityComparer> implementación como argumento a la <xref:System.Collections.IStructuralEquatable.Equals%2A> método, puede definir una igualdad personalizada comparación de la matriz o colección.  
  
   
  
## Examples  
 El comparador de igualdad predeterminado `EqualityComparer<Object>.Default.Equals`, considera que dos `NaN` valores son iguales. Sin embargo, en algunos casos, es posible que desee que la comparación de `NaN` los valores de igualdad devolviera el valor `false`, lo que indica que no se pueden comparar los valores. En el ejemplo siguiente se define una clase `NanComparer` que implementa la interfaz <xref:System.Collections.IStructuralEquatable> . Compara dos objetos <xref:System.Double> o dos <xref:System.Single> valores mediante el operador de igualdad. Pasa los valores de cualquier otro tipo al comparador de igualdad predeterminado.  
  
 [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]
 [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  
  
 El ejemplo siguiente crea dos objetos de tupla de 3 idénticos que se componen de tres <xref:System.Double> valores. El valor del segundo componente es <xref:System.Double.NaN?displayProperty=nameWithType>. El ejemplo llama a la <xref:System.Tuple%603.Equals%2A?displayProperty=nameWithType> llama al método y el <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> método tres veces. La primera vez, pasa el comparador de igualdad predeterminado devuelto por la <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> propiedad. La segunda vez, pasa el comparador de igualdad predeterminado devuelto por la <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType> propiedad. La tercera vez, pasa personalizado `NanComparer` objeto. Como se muestra el resultado del ejemplo, el método tres primeros llama devuelto `true`, mientras que devuelve la llamada cuarta `false`.  
  
 [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]
 [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.IEqualityComparer" />
    <altmember cref="T:System.Collections.IStructuralComparable" />
    <altmember cref="P:System.Collections.StructuralComparisons.StructuralEqualityComparer" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object, comparer As IEqualityComparer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj * System.Collections.IEqualityComparer -&gt; bool" Usage="iStructuralEquatable.Equals (other, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Objeto que se va a comparar con la instancia actual.</param>
        <param name="comparer">Un objeto que determina si la instancia actual y <paramref name="other" /> son iguales.</param>
        <summary>Determina si un objeto es estructuralmente igual que la instancia actual.</summary>
        <returns>Es <see langword="true" /> si los dos objetos son iguales; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Collections.IStructuralEquatable.Equals%2A> método admite la comparación estructural personalizada de matriz y objetos de tupla. Este método llama a su vez la `comparer` del objeto <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> método para comparar elementos de matriz individuales o componentes de tupla, empezando por el primer elemento o componente. Las llamadas individuales a <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> final y el <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> método devuelve un valor o una llamada al método que devuelve `false` o después de todos los elementos de la matriz o se han comparado los componentes de la tupla.  
  
   
  
## Examples  
 El comparador de igualdad predeterminado `EqualityComparer<Object>.Default.Equals`, considera que dos `NaN` valores son iguales. Sin embargo, en algunos casos, es posible que desee que la comparación de `NaN` los valores de igualdad devolviera el valor `false`, lo que indica que no se pueden comparar los valores. En el ejemplo siguiente se define una clase `NanComparer` que implementa la interfaz <xref:System.Collections.IStructuralEquatable> . Compara dos objetos <xref:System.Double> o dos <xref:System.Single> valores mediante el operador de igualdad. Pasa los valores de cualquier otro tipo al comparador de igualdad predeterminado.  
  
 [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]
 [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  
  
 El ejemplo siguiente crea dos objetos de tupla de 3 idénticos que se componen de tres <xref:System.Double> valores. El valor del segundo componente es <xref:System.Double.NaN?displayProperty=nameWithType>. El ejemplo llama a la <xref:System.Tuple%603.Equals%2A?displayProperty=nameWithType> llama al método y el <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType> método tres veces. La primera vez, pasa el comparador de igualdad predeterminado devuelto por la <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> propiedad. La segunda vez, pasa el comparador de igualdad predeterminado devuelto por la <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=nameWithType> propiedad. La tercera vez, pasa personalizado `NanComparer` objeto. Como se muestra el resultado del ejemplo, el método tres primeros llama devuelto `true`, mientras que devuelve la llamada cuarta `false`.  
  
 [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]
 [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.StructuralComparisons.StructuralEqualityComparer" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (comparer As IEqualityComparer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(System::Collections::IEqualityComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : System.Collections.IEqualityComparer -&gt; int" Usage="iStructuralEquatable.GetHashCode comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Objeto que calcula el código hash del objeto actual.</param>
        <summary>Devuelve un código hash de la instancia actual.</summary>
        <returns>Código hash de la instancia actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente este método para devolver los códigos hash personalizado para objetos de colección que corresponden a la comparación personalizada de igualdad estructural proporcionado por el <xref:System.Collections.IStructuralEquatable.Equals%2A> método.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si el <see cref="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)" /> devuelve del método <see langword="true" /> para dos objetos, los valores devueltos por la <see cref="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)" /> método para los dos objetos también debe ser igual.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>