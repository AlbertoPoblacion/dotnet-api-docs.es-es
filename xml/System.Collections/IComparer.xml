<Type Name="IComparer" FullName="System.Collections.IComparer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f36e56e5d4ace359c40e1d2b99391c411ff3949b" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48683902" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IComparer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IComparer" />
  <TypeSignature Language="DocId" Value="T:System.Collections.IComparer" />
  <TypeSignature Language="VB.NET" Value="Public Interface IComparer" />
  <TypeSignature Language="C++ CLI" Value="public interface class IComparer" />
  <TypeSignature Language="F#" Value="type IComparer = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Expone un método que compara dos objetos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta interfaz se usa junto con el <xref:System.Array.Sort%2A?displayProperty=nameWithType> y <xref:System.Array.BinarySearch%2A?displayProperty=nameWithType> métodos. Proporciona una manera de personalizar el criterio de ordenación de una colección. Consulte la <xref:System.Collections.IComparer.Compare%2A> método para las notas de los parámetros y el valor devuelto.  
  
 La implementación predeterminada de esta interfaz es la <xref:System.Collections.Comparer> clase. Para obtener la versión genérica de esta interfaz, vea <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>.  
  
   
  
## Examples  

En el ejemplo siguiente se usa el <xref:System.Collections.IComparer> interfaz para ordenar una matriz de cadenas. En este ejemplo, el <xref:System.Collections.IComparer.Compare%2A> método se implementa mediante el <xref:System.Collections.CaseInsensitiveComparer> clase para invertir el orden del contenido de la matriz.  
  
[!code-csharp[sorting-an-array](~/samples/snippets/csharp/api/system.collections/icomparer/reverse.cs)]
[!code-vb[sorting-an-array](~/samples/snippets/visualbasic/api/system.collections/icomparer/reverse.vb)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Comparer" />
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
    <altmember cref="T:System.Globalization.CompareInfo" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.IComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberSignature Language="F#" Value="abstract member Compare : obj * obj -&gt; int" Usage="iComparer.Compare (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">Primer objeto que se va a comparar.</param>
        <param name="y">Segundo objeto que se va a comparar.</param>
        <summary>Compara dos objetos y devuelve un valor que indica si uno de ellos es menor, igual o mayor que el otro.</summary>
        <returns>Entero con signo que indica los valores relativos de <paramref name="x" /> y <paramref name="y" />:<br />   - Si es menor que 0, <paramref name="x" /> es menor que <paramref name="y" />.<br />   - Si es 0, <paramref name="x" /> es igual que <paramref name="y" />.<br />   - Si es mayor que 0, <paramref name="x" /> es mayor que <paramref name="y" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación preferida es utilizar el <xref:System.IComparable.CompareTo%2A> método de uno de los parámetros.  
  
 Comparar `null` se permite con cualquier tipo y no genera una excepción cuando se usa <xref:System.IComparable>. Al ordenar, `null` se considera menor que cualquier otro objeto.  
  
   
  
## Examples  

En el ejemplo siguiente se usa el <xref:System.Collections.IComparer> interfaz para ordenar una matriz de cadenas. En este ejemplo, el <xref:System.Collections.IComparer.Compare%2A> método se implementa mediante el <xref:System.Collections.CaseInsensitiveComparer> clase para invertir el orden del contenido de la matriz.  
  
[!code-csharp[sorting-an-array](~/samples/snippets/csharp/api/system.collections/icomparer/reverse.cs)]
[!code-vb[sorting-an-array](~/samples/snippets/visualbasic/api/system.collections/icomparer/reverse.vb)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ni <paramref name="x" /> ni <paramref name="y" /> implementan la interfaz <see cref="T:System.IComparable" />.  
  
O bien 
 <paramref name="x" /> y <paramref name="y" /> son de tipos diferentes y ninguno puede controlar comparaciones con el otro.</exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="T:System.Globalization.CompareInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>