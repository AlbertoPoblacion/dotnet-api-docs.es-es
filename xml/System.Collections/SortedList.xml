<Type Name="SortedList" FullName="System.Collections.SortedList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e66558bdc698f370e66b85bb6de8f74d6987d633" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36713557" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SortedList : ICloneable, System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList extends System.Object implements class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.SortedList" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList&#xA;Implements ICloneable, IDictionary" />
  <TypeSignature Language="C++ CLI" Value="public ref class SortedList : ICloneable, System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type SortedList = class&#xA;    interface IDictionary&#xA;    interface ICloneable&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.NonGeneric</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a2ae1-101">Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2ae1-101">Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-102">Para obtener la versión genérica de esta colección, consulte <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-102">For the generic version of this collection, see <xref:System.Collections.Generic.SortedList%602?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="a2ae1-103">A <xref:System.Collections.SortedList> elemento puede tener acceso a su clave, como un elemento en cualquier <xref:System.Collections.IDictionary> implementación, o por su índice, como un elemento en cualquier <xref:System.Collections.IList> implementación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-103">A <xref:System.Collections.SortedList> element can be accessed by its key, like an element in any <xref:System.Collections.IDictionary> implementation, or by its index, like an element in any <xref:System.Collections.IList> implementation.</span></span>  
  
 <span data-ttu-id="a2ae1-104">Un <xref:System.Collections.SortedList> objeto mantiene internamente dos matrices para almacenar los elementos de la lista; es decir, una matriz para las claves y otra matriz de los valores asociados.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-104">A <xref:System.Collections.SortedList> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values.</span></span> <span data-ttu-id="a2ae1-105">Cada elemento es un par de clave/valor que se puede tener acceso como una <xref:System.Collections.DictionaryEntry> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-105">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span> <span data-ttu-id="a2ae1-106">No puede ser una clave `null`, pero puede ser un valor.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-106">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="a2ae1-107">La capacidad de un <xref:System.Collections.SortedList> objeto es el número de elementos de la <xref:System.Collections.SortedList> puede contener.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-107">The capacity of a <xref:System.Collections.SortedList> object is the number of elements the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="a2ae1-108">Cuando se agregan elementos a un <xref:System.Collections.SortedList>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-108">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required through reallocation.</span></span> <span data-ttu-id="a2ae1-109">La capacidad puede reducirse mediante una llamada a <xref:System.Collections.SortedList.TrimToSize%2A> o estableciendo la <xref:System.Collections.SortedList.Capacity%2A> propiedad explícitamente.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-109">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span>  
  
 <span data-ttu-id="a2ae1-110">Para un gran <xref:System.Collections.SortedList> objetos, puede aumentar la capacidad máxima de 2 millones de elementos en un sistema de 64 bits estableciendo la `enabled` atributo del elemento de configuración para `true` en el entorno de tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-110">For very large <xref:System.Collections.SortedList> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="a2ae1-111">Los elementos de un <xref:System.Collections.SortedList> objeto se ordenan por claves en función de un determinado <xref:System.Collections.IComparer> implementación especificado cuando la <xref:System.Collections.SortedList> es creado o según la <xref:System.IComparable> implementación proporcionada por las propias claves.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-111">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span> <span data-ttu-id="a2ae1-112">En cualquier caso, un <xref:System.Collections.SortedList> no se admiten claves duplicadas.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-112">In either case, a <xref:System.Collections.SortedList> does not allow duplicate keys.</span></span>  
  
 <span data-ttu-id="a2ae1-113">La secuencia de índice se basa en la secuencia de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-113">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="a2ae1-114">Cuando se agrega un elemento, se inserta en <xref:System.Collections.SortedList> en el orden correcto orden y la indización se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-114">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-115">Cuando se quita un elemento, la indización también se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-115">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-116">Por lo tanto, el índice de un par de clave y valor específico podría cambiar tal y como se agregan o quitan elementos de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-116">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-117">Operaciones en un <xref:System.Collections.SortedList> objeto tienden a ser más lentas que las operaciones en un <xref:System.Collections.Hashtable> objeto debido a la ordenación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-117">Operations on a <xref:System.Collections.SortedList> object tend to be slower than operations on a <xref:System.Collections.Hashtable> object because of the sorting.</span></span> <span data-ttu-id="a2ae1-118">Sin embargo, el <xref:System.Collections.SortedList> ofrece una mayor flexibilidad al permitir el acceso a los valores a través de las claves asociadas o mediante los índices.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-118">However, the <xref:System.Collections.SortedList> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.</span></span>  
  
 <span data-ttu-id="a2ae1-119">Pueden tener acceso a los elementos de esta colección utilizando un índice entero.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-119">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="a2ae1-120">Índices de esta colección son de base cero.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-120">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="a2ae1-121">El `foreach` instrucción del lenguaje C# (`for each` en Visual Basic) devuelve un objeto del tipo de los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-121">The `foreach` statement of the C# language (`for each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="a2ae1-122">Puesto que cada elemento de la <xref:System.Collections.SortedList> objeto es un par de clave/valor, el tipo de elemento no es el tipo de la clave o el tipo del valor.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-122">Since each element of the <xref:System.Collections.SortedList> object is a key/value pair, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="a2ae1-123">En su lugar, el tipo de elemento es <xref:System.Collections.DictionaryEntry>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-123">Rather, the element type is <xref:System.Collections.DictionaryEntry>.</span></span> <span data-ttu-id="a2ae1-124">Por ejemplo:</span><span class="sxs-lookup"><span data-stu-id="a2ae1-124">For example:</span></span>  
  
 [!code-cpp[Classic SortedList Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/remarks.cpp#2)]
 [!code-csharp[Classic SortedList Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/remarks.cs#2)]
 [!code-vb[Classic SortedList Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/remarks.vb#2)]  
  
 <span data-ttu-id="a2ae1-125">El `foreach` instrucción es un contenedor del enumerador, que permite a solo lectura pero no escribir en la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-125">The `foreach` statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-126">En el ejemplo de código siguiente se muestra cómo crear e inicializar un <xref:System.Collections.SortedList> objeto y cómo imprimir sus claves y valores.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-126">The following code example shows how to create and initialize a <xref:System.Collections.SortedList> object and how to print out its keys and values.</span></span>  
  
 [!code-cpp[Classic SortedList Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="a2ae1-127">Estático público (<see langword="Shared" /> en Visual Basic) miembros de este tipo son seguros para subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2ae1-127">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="a2ae1-128">No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2ae1-128">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="a2ae1-129">Un <see cref="T:System.Collections.SortedList" /> objeto puede admitir varios lectores al mismo tiempo, siempre y cuando no se modifica la colección.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2ae1-129">A <see cref="T:System.Collections.SortedList" /> object can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="a2ae1-130">Para garantizar la seguridad para subprocesos de la <see cref="T:System.Collections.SortedList" />, todas las operaciones deben realizarse a través del contenedor devuelto por el <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> método.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2ae1-130">To guarantee the thread safety of the <see cref="T:System.Collections.SortedList" />, all operations must be done through the wrapper returned by the <see cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" /> method.</span>
      </span>
      <span data-ttu-id="a2ae1-131">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2ae1-131">Enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="a2ae1-132">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2ae1-132">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span>
      </span>
      <span data-ttu-id="a2ae1-133">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2ae1-133">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.Collections.IComparer" />
    <altmember cref="T:System.Collections.IDictionary" />
    <altmember cref="T:System.Collections.Hashtable" />
    <altmember cref="T:System.Collections.Generic.SortedList`2" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-134">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-134">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-135">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-135">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-136">Cada clave debe implementar la <xref:System.IComparable> interfaz para poder realizar comparaciones con todas las claves de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-136">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="a2ae1-137">Los elementos se ordenan según la <xref:System.IComparable> implementación de cada clave agregada a la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-137">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-138">La capacidad de un <xref:System.Collections.SortedList> objeto es el número de elementos que la <xref:System.Collections.SortedList> puede contener.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-138">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="a2ae1-139">Cuando se agregan elementos a un <xref:System.Collections.SortedList>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-139">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a2ae1-140">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-140">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-141">Este constructor es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-141">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-142">En el ejemplo de código siguiente se crea colecciones utilizando diferentes <xref:System.Collections.SortedList> constructores y muestra las diferencias en el comportamiento de las colecciones.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-142">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IComparer -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="a2ae1-143">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-143">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="a2ae1-144">-or-  <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-144">-or-  <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-145">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-145">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the default initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-146">Los elementos se ordenan según la condición especificada <xref:System.Collections.IComparer> implementación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-146">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="a2ae1-147">Si el `comparer` parámetro es `null`, <xref:System.IComparable> se utiliza la implementación de cada clave; por lo tanto, cada clave debe implementar la <xref:System.IComparable> interfaz para poder realizar comparaciones con todas las claves de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-147">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-148">La capacidad de un <xref:System.Collections.SortedList> objeto es el número de elementos que la <xref:System.Collections.SortedList> puede contener.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-148">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="a2ae1-149">Cuando se agregan elementos a un <xref:System.Collections.SortedList>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-149">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a2ae1-150">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-150">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-151">Este constructor es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-151">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-152">En el ejemplo de código siguiente se crea colecciones utilizando diferentes <xref:System.Collections.SortedList> constructores y muestra las diferencias en el comportamiento de las colecciones.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-152">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CPP/sortedlist_ctor.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/CS/sortedlist_ctor.cs#1)]
 [!code-vb[System.Collections.SortedList_ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctor/VB/sortedlist_ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IDictionary -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList d" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="a2ae1-153">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-153">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-154">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-154">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-155">Cada clave debe implementar la <xref:System.IComparable> interfaz para poder realizar comparaciones con todas las claves de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-155">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="a2ae1-156">Los elementos se ordenan según la <xref:System.IComparable> implementación de cada clave agregada a la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-156">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-157">A <xref:System.Collections.Hashtable> objeto es un ejemplo de un <xref:System.Collections.IDictionary> implementación que se puede pasar a este constructor.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-157">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="a2ae1-158">El nuevo <xref:System.Collections.SortedList> objeto contiene una copia de las claves y los valores almacenados en el <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-158">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="a2ae1-159">La capacidad de un <xref:System.Collections.SortedList> objeto es el número de elementos que la <xref:System.Collections.SortedList> puede contener.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-159">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="a2ae1-160">Cuando se agregan elementos a un <xref:System.Collections.SortedList>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-160">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a2ae1-161">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-161">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-162">Este constructor es una O (`n`) operación, donde `n` es el número de elementos de `d`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-162">This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-163">En el ejemplo de código siguiente se crea colecciones utilizando diferentes <xref:System.Collections.SortedList> constructores y muestra las diferencias en el comportamiento de las colecciones.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-163">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-164">
            <paramref name="d" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-164">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="a2ae1-165">One or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-165">One or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int initialCapacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 initialCapacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialCapacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int initialCapacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : int -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList initialCapacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialCapacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="initialCapacity">
          <span data-ttu-id="a2ae1-166">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-166">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-167">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-167">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the <see cref="T:System.IComparable" /> interface implemented by each key added to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-168">Cada clave debe implementar la <xref:System.IComparable> interfaz para poder realizar comparaciones con todas las claves de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-168">Each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="a2ae1-169">Los elementos se ordenan según la <xref:System.IComparable> implementación de cada clave agregada a la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-169">The elements are sorted according to the <xref:System.IComparable> implementation of each key added to the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-170">La capacidad de un <xref:System.Collections.SortedList> objeto es el número de elementos que la <xref:System.Collections.SortedList> puede contener.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-170">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="a2ae1-171">Cuando se agregan elementos a un <xref:System.Collections.SortedList>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-171">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a2ae1-172">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-172">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-173">Este constructor es una O (`n`) operación, donde `n` es `initialCapacity`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-173">This constructor is an O(`n`) operation, where `n` is `initialCapacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-174">En el ejemplo de código siguiente se crea colecciones utilizando diferentes <xref:System.Collections.SortedList> constructores y muestra las diferencias en el comportamiento de las colecciones.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-174">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2ae1-175">
            <paramref name="initialCapacity" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-175">
              <paramref name="initialCapacity" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="a2ae1-176">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="initialCapacity" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-176">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="initialCapacity" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IComparer comparer, int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IComparer comparer, int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer, capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IComparer ^ comparer, int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IComparer * int -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList (comparer, capacity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="a2ae1-177">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-177">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="a2ae1-178">-or-  <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-178">-or-  <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <param name="capacity">
          <span data-ttu-id="a2ae1-179">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-179">The initial number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-180">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-180">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that is empty, has the specified initial capacity, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-181">Los elementos se ordenan según la condición especificada <xref:System.Collections.IComparer> implementación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-181">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="a2ae1-182">Si el `comparer` parámetro es `null`, <xref:System.IComparable> se utiliza la implementación de cada clave; por lo tanto, cada clave debe implementar la <xref:System.IComparable> interfaz para poder realizar comparaciones con todas las claves de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-182">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-183">La capacidad de un <xref:System.Collections.SortedList> objeto es el número de elementos que la <xref:System.Collections.SortedList> puede contener.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-183">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="a2ae1-184">Cuando se agregan elementos a un <xref:System.Collections.SortedList>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-184">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a2ae1-185">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-185">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-186">Este constructor es una O (`n`) operación, donde `n` es `capacity`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-186">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-187">En el ejemplo de código siguiente se crea colecciones utilizando diferentes <xref:System.Collections.SortedList> constructores y muestra las diferencias en el comportamiento de las colecciones.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-187">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CPP/sortedlist_ctorint.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/CS/sortedlist_ctorint.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorInt/VB/sortedlist_ctorint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2ae1-188">
            <paramref name="capacity" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-188">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="a2ae1-189">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="capacity" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-189">There is not enough available memory to create a <see cref="T:System.Collections.SortedList" /> object with the specified <paramref name="capacity" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary d, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (d As IDictionary, comparer As IComparer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::IDictionary ^ d, System::Collections::IComparer ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.SortedList : System.Collections.IDictionary * System.Collections.IComparer -&gt; System.Collections.SortedList" Usage="new System.Collections.SortedList (d, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="d" Type="System.Collections.IDictionary" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="a2ae1-190">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-190">The <see cref="T:System.Collections.IDictionary" /> implementation to copy to a new <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="a2ae1-191">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-191">The <see cref="T:System.Collections.IComparer" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="a2ae1-192">-or-  <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-192">-or-  <see langword="null" /> to use the <see cref="T:System.IComparable" /> implementation of each key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-193">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-193">Initializes a new instance of the <see cref="T:System.Collections.SortedList" /> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <see cref="T:System.Collections.IComparer" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-194">Los elementos se ordenan según la condición especificada <xref:System.Collections.IComparer> implementación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-194">The elements are sorted according to the specified <xref:System.Collections.IComparer> implementation.</span></span> <span data-ttu-id="a2ae1-195">Si el `comparer` parámetro es `null`, <xref:System.IComparable> se utiliza la implementación de cada clave; por lo tanto, cada clave debe implementar la <xref:System.IComparable> interfaz para poder realizar comparaciones con todas las claves de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-195">If the `comparer` parameter is `null`, the <xref:System.IComparable> implementation of each key is used; therefore, each key must implement the <xref:System.IComparable> interface to be capable of comparisons with every other key in the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-196">A <xref:System.Collections.Hashtable> objeto es un ejemplo de un <xref:System.Collections.IDictionary> implementación que se puede pasar a este constructor.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-196">A <xref:System.Collections.Hashtable> object is an example of an <xref:System.Collections.IDictionary> implementation that can be passed to this constructor.</span></span> <span data-ttu-id="a2ae1-197">El nuevo <xref:System.Collections.SortedList> objeto contiene una copia de las claves y los valores almacenados en el <xref:System.Collections.Hashtable>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-197">The new <xref:System.Collections.SortedList> object contains a copy of the keys and values stored in the <xref:System.Collections.Hashtable>.</span></span>  
  
 <span data-ttu-id="a2ae1-198">La capacidad de un <xref:System.Collections.SortedList> objeto es el número de elementos que la <xref:System.Collections.SortedList> puede contener.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-198">The capacity of a <xref:System.Collections.SortedList> object is the number of elements that the <xref:System.Collections.SortedList> can hold.</span></span> <span data-ttu-id="a2ae1-199">Cuando se agregan elementos a un <xref:System.Collections.SortedList>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-199">As elements are added to a <xref:System.Collections.SortedList>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="a2ae1-200">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-200">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-201">Este constructor es una O (`n`) operación, donde `n` es el número de elementos de `d`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-201">This constructor is an O(`n`) operation, where `n` is the number of elements in `d`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-202">En el ejemplo de código siguiente se crea colecciones utilizando diferentes <xref:System.Collections.SortedList> constructores y muestra las diferencias en el comportamiento de las colecciones.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-202">The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.</span></span>  
  
 [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CPP/sortedlist_ctordictionary.cpp#1)]
 [!code-csharp[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/CS/sortedlist_ctordictionary.cs#1)]
 [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.SortedList_ctorDictionary/VB/sortedlist_ctordictionary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-203">
            <paramref name="d" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-203">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="a2ae1-204">
            <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-204">
              <paramref name="comparer" /> is <see langword="null" />, and one or more elements in <paramref name="d" /> do not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (key As Object, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Object ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Add : obj * obj -&gt; unit&#xA;override this.Add : obj * obj -&gt; unit" Usage="sortedList.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2ae1-205">The key of the element to add.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-205">The key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a2ae1-206">The value of the element to add.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-206">The value of the element to add.</span>
          </span>
          <span data-ttu-id="a2ae1-207">The value can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-207">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-208">Adds an element with the specified key and value to a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-208">Adds an element with the specified key and value to a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-209">El punto de inserción se determina según el comparador seleccionado, ya sea explícitamente o de forma predeterminada, cuando el <xref:System.Collections.SortedList> se creó el objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-209">The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref:System.Collections.SortedList> object was created.</span></span>  
  
 <span data-ttu-id="a2ae1-210">Si <xref:System.Collections.SortedList.Count%2A> ya es igual a <xref:System.Collections.SortedList.Capacity%2A>, la capacidad de la <xref:System.Collections.SortedList> objeto se incrementa mediante la reasignación automática de la matriz interna y se copian los elementos existentes en la nueva matriz antes de agrega el nuevo elemento.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-210">If <xref:System.Collections.SortedList.Count%2A> already equals <xref:System.Collections.SortedList.Capacity%2A>, the capacity of the <xref:System.Collections.SortedList> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="a2ae1-211">También puede usar el <xref:System.Collections.SortedList.Item%2A> propiedad para agregar nuevos elementos estableciendo el valor de una clave que no existe en el <xref:System.Collections.SortedList> objeto (por ejemplo, `myCollection["myNonexistentKey"] = myValue`).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-211">You can also use the <xref:System.Collections.SortedList.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue`).</span></span> <span data-ttu-id="a2ae1-212">Sin embargo, si la clave especificada ya existe en el <xref:System.Collections.SortedList>, y establece el <xref:System.Collections.SortedList.Item%2A> propiedad sobrescribe el valor anterior.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-212">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="a2ae1-213">En cambio, la <xref:System.Collections.SortedList.Add%2A> método no modifica los elementos existentes.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-213">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="a2ae1-214">Los elementos de un <xref:System.Collections.SortedList> objeto se ordenan por claves en función de un determinado <xref:System.Collections.IComparer> implementación especificado cuando la <xref:System.Collections.SortedList> es creado o según la <xref:System.IComparable> implementación proporcionada por las propias claves.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-214">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="a2ae1-215">No puede ser una clave `null`, pero puede ser un valor.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-215">A key cannot be `null`, but a value can be.</span></span>  
  
 <span data-ttu-id="a2ae1-216">Este método es una O (`n`) operación para datos sin ordenar, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-216">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="a2ae1-217">Es una O (registro `n`) operación si el nuevo elemento se agrega al final de la lista.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-217">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="a2ae1-218">Si la inserción provoca un cambio de tamaño, la operación es O (`n`).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-218">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-219">En el ejemplo de código siguiente se muestra cómo agregar elementos a un <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-219">The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.Add Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Add Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Add Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-220">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-220">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2ae1-221">An element with the specified <paramref name="key" /> already exists in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-221">An element with the specified <paramref name="key" /> already exists in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="a2ae1-222">-or-  The <see cref="T:System.Collections.SortedList" /> is set to use the <see cref="T:System.IComparable" /> interface, and <paramref name="key" /> does not implement the <see cref="T:System.IComparable" /> interface.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-222">-or-  The <see cref="T:System.Collections.SortedList" /> is set to use the <see cref="T:System.IComparable" /> interface, and <paramref name="key" /> does not implement the <see cref="T:System.IComparable" /> interface.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2ae1-223">The <see cref="T:System.Collections.SortedList" /> is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-223">The <see cref="T:System.Collections.SortedList" /> is read-only.</span>
          </span>
          <span data-ttu-id="a2ae1-224">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-224">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="a2ae1-225">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-225">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a2ae1-226">The comparer throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-226">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.SortedList.Item(System.Object)" />
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public virtual int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.SortedList.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-227">Gets or sets the capacity of a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-227">Gets or sets the capacity of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-228">Número de elementos que el objeto <see cref="T:System.Collections.SortedList" /> puede contener.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-228">The number of elements that the <see cref="T:System.Collections.SortedList" /> object can contain.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-229"><xref:System.Collections.SortedList.Capacity%2A> es el número de elementos que la <xref:System.Collections.SortedList> puede almacenar el objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-229"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="a2ae1-230"><xref:System.Collections.SortedList.Count%2A> es el número de elementos que están realmente en la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-230"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-231"><xref:System.Collections.SortedList.Capacity%2A> es siempre mayor o igual que <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-231"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="a2ae1-232">Si <xref:System.Collections.SortedList.Count%2A> supera <xref:System.Collections.SortedList.Capacity%2A> al agregar elementos, la capacidad aumenta automáticamente mediante la reasignación de la matriz interna antes de copiar los elementos antiguos y agregar los nuevos elementos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-232">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="a2ae1-233">La capacidad puede reducirse mediante una llamada a <xref:System.Collections.SortedList.TrimToSize%2A> o estableciendo la <xref:System.Collections.SortedList.Capacity%2A> propiedad explícitamente.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-233">The capacity can be decreased by calling <xref:System.Collections.SortedList.TrimToSize%2A> or by setting the <xref:System.Collections.SortedList.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="a2ae1-234">Cuando el valor de <xref:System.Collections.SortedList.Capacity%2A> se establece explícitamente, la matriz interna se reasigna para alojar la capacidad especificada.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-234">When the value of <xref:System.Collections.SortedList.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="a2ae1-235">La recuperación del valor de esta propiedad es una operación o (1); establecer la propiedad es una O (`n`) operación, donde `n` es la capacidad de nuevo.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-235">Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2ae1-236">The value assigned is less than the current number of elements in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-236">The value assigned is less than the current number of elements in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="a2ae1-237">There is not enough memory available on the system.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-237">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="sortedList.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-238">Removes all elements from a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-238">Removes all elements from a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-239"><xref:System.Collections.SortedList.Count%2A> se establece en cero y también se liberan las referencias a otros objetos desde los elementos de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-239"><xref:System.Collections.SortedList.Count%2A> is set to zero and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="a2ae1-240"><xref:System.Collections.SortedList.Capacity%2A> No cambie.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-240"><xref:System.Collections.SortedList.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="a2ae1-241">Para restablecer la capacidad de la <xref:System.Collections.SortedList> objeto, llame a <xref:System.Collections.SortedList.TrimToSize%2A> o establecer el <xref:System.Collections.SortedList.Capacity%2A> propiedad directamente.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-241">To reset the capacity of the <xref:System.Collections.SortedList> object, call <xref:System.Collections.SortedList.TrimToSize%2A> or set the <xref:System.Collections.SortedList.Capacity%2A> property directly.</span></span> <span data-ttu-id="a2ae1-242">Recortar vacío <xref:System.Collections.SortedList> establece la capacidad de la <xref:System.Collections.SortedList> en la capacidad predeterminada.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-242">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="a2ae1-243">Este método es una O (`n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-243">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-244">En el ejemplo de código siguiente se muestra cómo se recortan las partes no utilizadas de una <xref:System.Collections.SortedList> objeto y cómo se borran los valores de la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-244">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2ae1-245">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-245">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="a2ae1-246">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-246">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.TrimToSize" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="sortedList.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-247">Creates a shallow copy of a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-247">Creates a shallow copy of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-248">A shallow copy of the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-248">A shallow copy of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-249">Una copia superficial de una colección copia únicamente los elementos de la colección, si son tipos de referencia o tipos de valor, pero no copia los objetos que hacen referencia las referencias.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-249">A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to.</span></span> <span data-ttu-id="a2ae1-250">Las referencias de la nueva colección apuntan a los mismos objetos que apuntan las referencias de la colección original.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-250">The references in the new collection point to the same objects that the references in the original collection point to.</span></span>  
  
 <span data-ttu-id="a2ae1-251">En cambio, una copia en profundidad de una colección copia los elementos y todo lo que hacen referencia directa o indirectamente el elementos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-251">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="a2ae1-252">Este método es una O (`n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-252">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="sortedList.Contains key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2ae1-253">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-253">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-254">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-254">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-255">
            <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-255">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-256">Los elementos de un <xref:System.Collections.SortedList> objeto se ordenan por claves en función de un determinado <xref:System.Collections.IComparer> implementación especificado cuando la <xref:System.Collections.SortedList> es creado o según la <xref:System.IComparable> implementación proporcionada por las propias claves.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-256">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="a2ae1-257"><xref:System.Collections.SortedList.Contains%2A> implementa <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-257"><xref:System.Collections.SortedList.Contains%2A> implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="a2ae1-258">Se comporta exactamente igual que <xref:System.Collections.SortedList.ContainsKey%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-258">It behaves exactly as <xref:System.Collections.SortedList.ContainsKey%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-259">Este método utiliza un algoritmo de búsqueda binaria; por lo tanto, este método es una O (registro `n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-259">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-260">A partir de .NET Framework 2.0, este método usa los objetos de la colección <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos en `item` para determinar si existe cualquier elemento.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-260">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="a2ae1-261">En las versiones anteriores de .NET Framework, esta determinación se realizó utilizando el <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos de la `item` parámetro en los objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-261">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-262">En el ejemplo de código siguiente se muestra cómo determinar si un <xref:System.Collections.SortedList> objeto contiene un elemento específico.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-262">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-263">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-263">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a2ae1-264">The comparer throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-264">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : obj -&gt; bool&#xA;override this.ContainsKey : obj -&gt; bool" Usage="sortedList.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2ae1-265">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-265">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-266">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-266">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-267">
            <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-267">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="key" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-268">Los elementos de un <xref:System.Collections.SortedList> objeto se ordenan por claves en función de un determinado <xref:System.Collections.IComparer> implementación especificado cuando la <xref:System.Collections.SortedList> es creado o según la <xref:System.IComparable> implementación proporcionada por las propias claves.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-268">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="a2ae1-269">Este método se comporta exactamente igual que el <xref:System.Collections.SortedList.Contains%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-269">This method behaves exactly as the <xref:System.Collections.SortedList.Contains%2A> method.</span></span>  
  
 <span data-ttu-id="a2ae1-270">Este método utiliza un algoritmo de búsqueda binaria; por lo tanto, este método es una O (registro `n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-270">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-271">A partir de .NET Framework 2.0, este método usa los objetos de la colección <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos en `item` para determinar si existe cualquier elemento.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-271">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="a2ae1-272">En las versiones anteriores de .NET Framework, esta determinación se realizó utilizando el <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos de la `item` parámetro en los objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-272">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-273">En el ejemplo de código siguiente se muestra cómo determinar si un <xref:System.Collections.SortedList> objeto contiene un elemento específico.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-273">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-274">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-274">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a2ae1-275">The comparer throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-275">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public virtual bool ContainsValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.ContainsValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member ContainsValue : obj -&gt; bool&#xA;override this.ContainsValue : obj -&gt; bool" Usage="sortedList.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a2ae1-276">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-276">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="a2ae1-277">The value can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-277">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-278">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific value.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-278">Determines whether a <see cref="T:System.Collections.SortedList" /> object contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-279">
            <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="value" />; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-279">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object contains an element with the specified <paramref name="value" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-280">Los valores de los elementos de la <xref:System.Collections.SortedList> objeto se comparan con el valor especificado mediante el <xref:System.Object.Equals%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-280">The values of the elements of the <xref:System.Collections.SortedList> object are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="a2ae1-281">Este método realiza una búsqueda lineal; por lo tanto, el tiempo medio de ejecución es proporcional al <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-281">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="a2ae1-282">Es decir, este método es una O (`n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-282">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-283">A partir de .NET Framework 2.0, este método usa los objetos de la colección <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos en `item` para determinar si existe cualquier elemento.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-283">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="a2ae1-284">En las versiones anteriores de .NET Framework, esta determinación se realizó utilizando el <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos de la `item` parámetro en los objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-284">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-285">En el ejemplo de código siguiente se muestra cómo determinar si un <xref:System.Collections.SortedList> objeto contiene un elemento específico.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-285">The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.</span></span>  
  
 [!code-cpp[Classic SortedList.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="sortedList.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="a2ae1-286">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-286">The one-dimensional <see cref="T:System.Array" /> object that is the destination of the <see cref="T:System.Collections.DictionaryEntry" /> objects copied from <see cref="T:System.Collections.SortedList" />.</span>
          </span>
          <span data-ttu-id="a2ae1-287">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-287">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="a2ae1-288">The zero-based index in <c>array</c> at which copying begins.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-288">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-289">Copies <see cref="T:System.Collections.SortedList" /> elements to a one-dimensional <see cref="T:System.Array" /> object, starting at the specified index in the array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-289">Copies <see cref="T:System.Collections.SortedList" /> elements to a one-dimensional <see cref="T:System.Array" /> object, starting at the specified index in the array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-290">Los pares clave/valor se copian en el <xref:System.Array> objeto en el mismo orden en el que el enumerador recorre en iteración la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-290">The key/value pairs are copied to the <xref:System.Array> object in the same order in which the enumerator iterates through the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-291">Para copiar sólo las claves de la <xref:System.Collections.SortedList>, utilice `SortedList.Keys.CopyTo`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-291">To copy only the keys in the <xref:System.Collections.SortedList>, use `SortedList.Keys.CopyTo`.</span></span>  
  
 <span data-ttu-id="a2ae1-292">Para copiar sólo los valores de la <xref:System.Collections.SortedList>, utilice `SortedList.Values.CopyTo`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-292">To copy only the values in the <xref:System.Collections.SortedList>, use `SortedList.Values.CopyTo`.</span></span>  
  
 <span data-ttu-id="a2ae1-293">Este método es una O (`n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-293">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-294">En el ejemplo de código siguiente se muestra cómo copiar los valores de un <xref:System.Collections.SortedList> objeto en un unidimensional <xref:System.Array> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-294">The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.</span></span>  
  
 [!code-cpp[Classic SortedList.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-295">
            <paramref name="array" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-295">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2ae1-296">
            <paramref name="arrayIndex" /> is less than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-296">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="a2ae1-297">
            <paramref name="array" /> is multidimensional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-297">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="a2ae1-298">-or-  The number of elements in the source <see cref="T:System.Collections.SortedList" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-298">-or-  The number of elements in the source <see cref="T:System.Collections.SortedList" /> object is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="a2ae1-299">The type of the source <see cref="T:System.Collections.SortedList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-299">The type of the source <see cref="T:System.Collections.SortedList" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Collections.DictionaryEntry" />
        <altmember cref="M:System.Collections.SortedList.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.SortedList.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-300">Gets the number of elements contained in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-300">Gets the number of elements contained in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-301">Número de elementos incluidos en el objeto <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-301">The number of elements contained in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-302">Cada elemento es un par de clave/valor que se puede tener acceso como una <xref:System.Collections.DictionaryEntry> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-302">Each element is a key/value pair that can be accessed as a <xref:System.Collections.DictionaryEntry> object.</span></span>  
  
 <span data-ttu-id="a2ae1-303"><xref:System.Collections.SortedList.Capacity%2A> es el número de elementos que la <xref:System.Collections.SortedList> puede almacenar el objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-303"><xref:System.Collections.SortedList.Capacity%2A> is the number of elements that the <xref:System.Collections.SortedList> object can store.</span></span> <span data-ttu-id="a2ae1-304"><xref:System.Collections.SortedList.Count%2A> es el número de elementos que están realmente en la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-304"><xref:System.Collections.SortedList.Count%2A> is the number of elements that are actually in the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-305"><xref:System.Collections.SortedList.Capacity%2A> es siempre mayor o igual que <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-305"><xref:System.Collections.SortedList.Capacity%2A> is always greater than or equal to <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="a2ae1-306">Si <xref:System.Collections.SortedList.Count%2A> supera <xref:System.Collections.SortedList.Capacity%2A> al agregar elementos, la capacidad aumenta automáticamente mediante la reasignación de la matriz interna antes de copiar los elementos antiguos y agregar los nuevos elementos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-306">If <xref:System.Collections.SortedList.Count%2A> exceeds <xref:System.Collections.SortedList.Capacity%2A> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="a2ae1-307">La recuperación del valor de esta propiedad es una operación O(1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-307">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="GetByIndex">
      <MemberSignature Language="C#" Value="public virtual object GetByIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetByIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetByIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetByIndex (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetByIndex(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetByIndex : int -&gt; obj&#xA;override this.GetByIndex : int -&gt; obj" Usage="sortedList.GetByIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a2ae1-308">The zero-based index of the value to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-308">The zero-based index of the value to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-309">Gets the value at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-309">Gets the value at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-310">The value at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-310">The value at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-311">La secuencia de índice se basa en la secuencia de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-311">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="a2ae1-312">Cuando se agrega un elemento, se inserta en <xref:System.Collections.SortedList> en el orden correcto orden y la indización se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-312">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-313">Cuando se quita un elemento, la indización también se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-313">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-314">Por lo tanto, el índice de un par de clave y valor específico podría cambiar tal y como se agregan o quitan elementos de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-314">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-315">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-315">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-316">En el ejemplo de código siguiente se muestra cómo obtener una o todas las claves o valores en una <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-316">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2ae1-317">
            <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-317">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="sortedList.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-318">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object that iterates through a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-318">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object that iterates through a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-319">An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-319">An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-320">La instrucción `foreach` del lenguaje C# (`for each` en Visual Basic) oculta la complejidad de los enumeradores.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-320">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="a2ae1-321">Por lo tanto, se recomienda el uso de `foreach`, en lugar de manipular directamente el enumerador.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-321">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a2ae1-322">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-322">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a2ae1-323">En principio, el enumerador se coloca antes del primer elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-323">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a2ae1-324"><xref:System.Collections.IEnumerator.Reset%2A> también devuelve el enumerador a esta posición.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-324"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="a2ae1-325">En esta posición, el valor de propiedad <xref:System.Collections.IEnumerator.Current%2A> está sin definir.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-325">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a2ae1-326">Por lo tanto, debe llamar a <xref:System.Collections.IEnumerator.MoveNext%2A> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-326">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-327"><xref:System.Collections.IEnumerator.Current%2A> devuelve el mismo objeto hasta que se llama a <xref:System.Collections.IEnumerator.MoveNext%2A> o a <xref:System.Collections.IEnumerator.Reset%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-327"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="a2ae1-328"><xref:System.Collections.IEnumerator.MoveNext%2A> establece <xref:System.Collections.IEnumerator.Current%2A> en el siguiente elemento.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-328"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a2ae1-329">Si <xref:System.Collections.IEnumerator.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-329">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a2ae1-330">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <xref:System.Collections.IEnumerator.MoveNext%2A> también devolver `false`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-330">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a2ae1-331">Si la última llamada a <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`, <xref:System.Collections.IEnumerator.Current%2A> no está definido.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-331">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="a2ae1-332">Para volver a establecer el valor de <xref:System.Collections.IEnumerator.Current%2A> en el primer elemento de la colección, se puede llamar primero a <xref:System.Collections.IEnumerator.Reset%2A> y después a <xref:System.Collections.IEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-332">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-333">Un enumerador es válido mientras la colección no cambie.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-333">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a2ae1-334">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-334">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="a2ae1-335">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-335">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="a2ae1-336">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-336">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="a2ae1-337">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-337">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="a2ae1-338">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-338">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="public virtual object GetKey (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetKey(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKey(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKey (index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetKey(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetKey : int -&gt; obj&#xA;override this.GetKey : int -&gt; obj" Usage="sortedList.GetKey index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a2ae1-339">The zero-based index of the key to get.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-339">The zero-based index of the key to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-340">Gets the key at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-340">Gets the key at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-341">The key at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-341">The key at the specified index of the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-342">La secuencia de índice se basa en la secuencia de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-342">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="a2ae1-343">Cuando se agrega un elemento, se inserta en <xref:System.Collections.SortedList> en el orden correcto orden y la indización se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-343">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-344">Cuando se quita un elemento, la indización también se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-344">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-345">Por lo tanto, el índice de un par de clave y valor específico podría cambiar tal y como se agregan o quitan elementos de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-345">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-346">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-346">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-347">En el ejemplo de código siguiente se muestra cómo obtener una o todas las claves o valores en una <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-347">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2ae1-348">
            <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-348">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetKeyList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetKeyList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetKeyList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetKeyList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetKeyList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetKeyList();" />
      <MemberSignature Language="F#" Value="abstract member GetKeyList : unit -&gt; System.Collections.IList&#xA;override this.GetKeyList : unit -&gt; System.Collections.IList" Usage="sortedList.GetKeyList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-349">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-349">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-350">An <see cref="T:System.Collections.IList" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-350">An <see cref="T:System.Collections.IList" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-351">El valor devuelto <xref:System.Collections.IList> objeto es una vista de solo lectura de las claves de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-351">The returned <xref:System.Collections.IList> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="a2ae1-352">Las modificaciones realizadas en subyacente <xref:System.Collections.SortedList> se reflejan inmediatamente en el <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-352">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="a2ae1-353">Los elementos de devuelto <xref:System.Collections.IList> se ordenan en el mismo orden que las claves de la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-353">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-354">Este método es similar a la <xref:System.Collections.SortedList.Keys%2A> propiedad, pero devuelve un <xref:System.Collections.IList> en lugar del objeto un <xref:System.Collections.ICollection> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-354">This method is similar to the <xref:System.Collections.SortedList.Keys%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="a2ae1-355">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-355">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-356">En el ejemplo de código siguiente se muestra cómo obtener una o todas las claves o valores en una <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-356">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
      </Docs>
    </Member>
    <Member MemberName="GetValueList">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IList GetValueList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IList GetValueList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.GetValueList" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValueList () As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IList ^ GetValueList();" />
      <MemberSignature Language="F#" Value="abstract member GetValueList : unit -&gt; System.Collections.IList&#xA;override this.GetValueList : unit -&gt; System.Collections.IList" Usage="sortedList.GetValueList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-357">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-357">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-358">An <see cref="T:System.Collections.IList" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-358">An <see cref="T:System.Collections.IList" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-359">El valor devuelto <xref:System.Collections.IList> objeto es una vista de solo lectura de los valores de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-359">The returned <xref:System.Collections.IList> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="a2ae1-360">Las modificaciones realizadas en subyacente <xref:System.Collections.SortedList> se reflejan inmediatamente en el <xref:System.Collections.IList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-360">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.IList>.</span></span>  
  
 <span data-ttu-id="a2ae1-361">Los elementos de devuelto <xref:System.Collections.IList> se ordenan en el mismo orden que los valores de la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-361">The elements of the returned <xref:System.Collections.IList> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-362">Este método es similar a la <xref:System.Collections.SortedList.Values%2A> propiedad, pero devuelve un <xref:System.Collections.IList> en lugar del objeto un <xref:System.Collections.ICollection> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-362">This method is similar to the <xref:System.Collections.SortedList.Values%2A> property, but returns an <xref:System.Collections.IList> object instead of an <xref:System.Collections.ICollection> object.</span></span>  
  
 <span data-ttu-id="a2ae1-363">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-363">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-364">En el ejemplo de código siguiente se muestra cómo obtener una o todas las claves o valores en una <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-364">The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.GetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.GetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.GetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
        <altmember cref="P:System.Collections.SortedList.Values" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : obj -&gt; int&#xA;override this.IndexOfKey : obj -&gt; int" Usage="sortedList.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2ae1-365">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-365">The key to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-366">Returns the zero-based index of the specified key in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-366">Returns the zero-based index of the specified key in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-367">The zero-based index of the <paramref name="key" /> parameter, if <paramref name="key" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-367">The zero-based index of the <paramref name="key" /> parameter, if <paramref name="key" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-368">Los elementos de un <xref:System.Collections.SortedList> objeto se ordenan por claves en función de un determinado <xref:System.Collections.IComparer> implementación especificado cuando la <xref:System.Collections.SortedList> está creada, o según el <xref:System.IComparable> implementación proporcionada por las propias claves.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-368">The elements of a <xref:System.Collections.SortedList> object are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created, or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="a2ae1-369">La secuencia de índice se basa en la secuencia de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-369">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="a2ae1-370">Cuando se agrega un elemento, se inserta en <xref:System.Collections.SortedList> en el orden correcto orden y la indización se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-370">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-371">Cuando se quita un elemento, la indización también se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-371">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-372">Por lo tanto, el índice de un par de clave y valor específico podría cambiar tal y como se agregan o quitan elementos de la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-372">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-373">Este método utiliza un algoritmo de búsqueda binaria; por lo tanto, este método es una O (registro `n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-373">This method uses a binary search algorithm; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-374">A partir de .NET Framework 2.0, este método usa los objetos de la colección <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos en `item` para determinar si existe cualquier elemento.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-374">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="a2ae1-375">En las versiones anteriores de .NET Framework, esta determinación se realizó utilizando el <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos de la `item` parámetro en los objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-375">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-376">En el ejemplo de código siguiente se muestra cómo determinar el índice de una clave o un valor en un <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-376">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-377">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-377">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a2ae1-378">The comparer throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-378">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfValue">
      <MemberSignature Language="C#" Value="public virtual int IndexOfValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfValue (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfValue : obj -&gt; int&#xA;override this.IndexOfValue : obj -&gt; int" Usage="sortedList.IndexOfValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="a2ae1-379">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-379">The value to locate in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="a2ae1-380">The value can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-380">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-381">Returns the zero-based index of the first occurrence of the specified value in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-381">Returns the zero-based index of the first occurrence of the specified value in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-382">The zero-based index of the first occurrence of the <paramref name="value" /> parameter, if <paramref name="value" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-382">The zero-based index of the first occurrence of the <paramref name="value" /> parameter, if <paramref name="value" /> is found in the <see cref="T:System.Collections.SortedList" /> object; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-383">La secuencia de índice se basa en la secuencia de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-383">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="a2ae1-384">Cuando se agrega un elemento, se inserta en <xref:System.Collections.SortedList> en el orden correcto orden y la indización se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-384">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-385">Cuando se quita un elemento, la indización también se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-385">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-386">Por lo tanto, el índice de un par de clave y valor específico podría cambiar tal y como se agregan o quitan elementos de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-386">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-387">Los valores de los elementos de la <xref:System.Collections.SortedList> se comparan con el valor especificado mediante el <xref:System.Object.Equals%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-387">The values of the elements of the <xref:System.Collections.SortedList> are compared to the specified value using the <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="a2ae1-388">Este método utiliza una búsqueda lineal; por lo tanto, este método es una O (`n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-388">This method uses a linear search; therefore, this method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-389">A partir de .NET Framework 2.0, este método usa los objetos de la colección <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos en `item` para determinar si existe cualquier elemento.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-389">Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods on `item` to determine whether item exists.</span></span> <span data-ttu-id="a2ae1-390">En las versiones anteriores de .NET Framework, esta determinación se realizó utilizando el <xref:System.Object.Equals%2A> y <xref:System.IComparable.CompareTo%2A> métodos de la `item` parámetro en los objetos de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-390">In the earlier versions of the .NET Framework, this determination was made by using the <xref:System.Object.Equals%2A> and <xref:System.IComparable.CompareTo%2A> methods of the `item` parameter on the objects in the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-391">En el ejemplo de código siguiente se muestra cómo determinar el índice de una clave o un valor en un <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-391">The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IndexOfKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IndexOfKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.SortedList.ContainsValue(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsFixedSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsFixedSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFixedSize : bool" Usage="System.Collections.SortedList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-392">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object has a fixed size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-392">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-393">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.SortedList" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-393">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a2ae1-394">De manera predeterminada, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-394">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-395">Una colección con un tamaño fijo no permite la adición o eliminación de elementos después de crea la colección, pero sí permite modificar los elementos existentes.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-395">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</span></span>  
  
 <span data-ttu-id="a2ae1-396">Una colección con un tamaño fijo es simplemente una colección con un contenedor que impide agregar y quitar elementos; por lo tanto, si se realizan cambios en la colección subyacente, incluida la adición o eliminación de elementos, la colección de tamaño fijo refleja esos cambios.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-396">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="a2ae1-397">La recuperación del valor de esta propiedad es una operación O(1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-397">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Collections.SortedList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-398">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-398">Gets a value indicating whether a <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-399">Es <see langword="true" /> si el objeto <see cref="T:System.Collections.SortedList" /> es de solo lectura; en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-399">
              <see langword="true" /> if the <see cref="T:System.Collections.SortedList" /> object is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a2ae1-400">De manera predeterminada, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-400">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-401">Una colección de solo lectura no permite que se agreguen, quiten o modifiquen elementos una vez que se ha creado.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-401">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="a2ae1-402">Una colección que es de solo lectura es simplemente una colección con un contenedor que impide modificar la colección; por lo tanto, si se realizan cambios en la colección subyacente, la colección de solo lectura refleja esos cambios.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-402">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="a2ae1-403">La recuperación del valor de esta propiedad es una operación O(1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-403">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public virtual bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Collections.SortedList.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-404">Gets a value indicating whether access to a <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe).</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-404">Gets a value indicating whether access to a <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-405">Es <see langword="true" /> si el acceso al objeto <see cref="T:System.Collections.SortedList" /> está sincronizado (es seguro para subprocesos); en caso contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-405">
              <see langword="true" /> if access to the <see cref="T:System.Collections.SortedList" /> object is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="a2ae1-406">De manera predeterminada, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-406">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-407">Para garantizar la seguridad para subprocesos de un <xref:System.Collections.SortedList> objeto, todas las operaciones deben realizarse a través del contenedor devuelto por el <xref:System.Collections.SortedList.Synchronized%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-407">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through the wrapper returned by the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span>  
  
 <span data-ttu-id="a2ae1-408">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-408">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a2ae1-409">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-409">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="a2ae1-410">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-410">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-411">En el ejemplo de código siguiente se muestra cómo bloquear una colección utilizando la <xref:System.Collections.SortedList.SyncRoot%2A> propiedad durante toda la enumeración.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-411">The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="a2ae1-412">La recuperación del valor de esta propiedad es una operación O(1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-412">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 <span data-ttu-id="a2ae1-413">En el ejemplo de código siguiente se muestra cómo sincronizar un <xref:System.Collections.SortedList> de objetos, determinar si un <xref:System.Collections.SortedList> se sincronizan y usar un sincronizada <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-413">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(key As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Collections.SortedList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2ae1-414">The key associated with the value to get or set.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-414">The key associated with the value to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-415">Gets and sets the value associated with a specific key in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-415">Gets and sets the value associated with a specific key in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-416">Valor asociado al parámetro <paramref name="key" /> del objeto <see cref="T:System.Collections.SortedList" /> si se encuentra <paramref name="key" />; en caso contrario, <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-416">The value associated with the <paramref name="key" /> parameter in the <see cref="T:System.Collections.SortedList" /> object, if <paramref name="key" /> is found; otherwise, <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-417">Puede usar el <xref:System.Collections.SortedList.Item%2A> propiedad para tener acceso a un elemento específico de una colección especificando la sintaxis siguiente: `myCollection[key]`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-417">You can use the <xref:System.Collections.SortedList.Item%2A> property to access a specific element in a collection by specifying the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="a2ae1-418">También puede utilizar esta propiedad para agregar nuevos elementos estableciendo el valor de una clave que no existe en el <xref:System.Collections.SortedList> objeto (por ejemplo, `myCollection["myNonexistentKey"] = myValue)`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-418">You can also use this property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.SortedList> object (for example, `myCollection["myNonexistentKey"] = myValue)`.</span></span> <span data-ttu-id="a2ae1-419">Sin embargo, si la clave especificada ya existe en el <xref:System.Collections.SortedList>, y establece el <xref:System.Collections.SortedList.Item%2A> propiedad sobrescribe el valor anterior.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-419">However, if the specified key already exists in the <xref:System.Collections.SortedList>, setting the <xref:System.Collections.SortedList.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="a2ae1-420">En cambio, la <xref:System.Collections.SortedList.Add%2A> método no modifica los elementos existentes.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-420">In contrast, the <xref:System.Collections.SortedList.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="a2ae1-421">No puede ser una clave `null`, pero puede ser un valor.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-421">A key cannot be `null`, but a value can be.</span></span> <span data-ttu-id="a2ae1-422">Para distinguir entre `null` que se devuelve porque no se encuentra la clave especificada y `null` que se devuelve porque el valor de la clave especificada es `null`, use la <xref:System.Collections.SortedList.Contains%2A> método o la <xref:System.Collections.SortedList.ContainsKey%2A> método para determinar si la clave existe en la lista.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-422">To distinguish between `null` that is returned because the specified key is not found and `null` that is returned because the value of the specified key is `null`, use the <xref:System.Collections.SortedList.Contains%2A> method or the <xref:System.Collections.SortedList.ContainsKey%2A> method to determine if the key exists in the list.</span></span>  
  
 <span data-ttu-id="a2ae1-423">Los elementos de un <xref:System.Collections.SortedList> se ordenan por claves en función de un determinado <xref:System.Collections.IComparer> implementación especificado cuando la <xref:System.Collections.SortedList> es creado o según la <xref:System.IComparable> implementación proporcionada por las propias claves.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-423">The elements of a <xref:System.Collections.SortedList> are sorted by the keys either according to a specific <xref:System.Collections.IComparer> implementation specified when the <xref:System.Collections.SortedList> is created or according to the <xref:System.IComparable> implementation provided by the keys themselves.</span></span>  
  
 <span data-ttu-id="a2ae1-424">El lenguaje C# utiliza la palabra clave para definir los indizadores en lugar de implementar la <xref:System.Collections.SortedList.Keys%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-424">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.SortedList.Keys%2A> property.</span></span> <span data-ttu-id="a2ae1-425">Visual Basic implementa <xref:System.Collections.SortedList.Item%2A> como propiedad predeterminada, lo que proporciona la misma funcionalidad de indización.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-425">Visual Basic implements <xref:System.Collections.SortedList.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="a2ae1-426">Recuperación del valor de esta propiedad es una O (registro `n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-426">Retrieving the value of this property is an O(log `n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span> <span data-ttu-id="a2ae1-427">Establecer la propiedad es una O (registro `n`) operación si la clave ya está en el <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-427">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="a2ae1-428">Si la clave no está en la lista, establecer la propiedad es una O (`n`) operación para datos no ordenados, u O (registro `n`) si el nuevo elemento se agrega al final de la lista.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-428">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="a2ae1-429">Si la inserción provoca un cambio de tamaño, la operación es O (`n`).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-429">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-430">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-430">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2ae1-431">The property is set and the <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-431">The property is set and the <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="a2ae1-432">-or-  The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-432">-or-  The property is set, <paramref name="key" /> does not exist in the collection, and the <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="a2ae1-433">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-433">There is not enough available memory to add the element to the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="a2ae1-434">The comparer throws an exception.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-434">The comparer throws an exception.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Add(System.Object,System.Object)" />
        <altmember cref="M:System.Collections.SortedList.Contains(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.ContainsKey(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Keys" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Keys As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.ICollection" Usage="System.Collections.SortedList.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-435">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-435">Gets the keys in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-436">Objeto <see cref="T:System.Collections.ICollection" /> que contiene las claves del objeto <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-436">An <see cref="T:System.Collections.ICollection" /> object containing the keys in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-437">El <xref:System.Collections.ICollection> objeto es una vista de solo lectura de las claves de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-437">The <xref:System.Collections.ICollection> object is a read-only view of the keys of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="a2ae1-438">Las modificaciones realizadas en subyacente <xref:System.Collections.SortedList> se reflejan inmediatamente en el <xref:System.Collections.ICollection>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-438">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="a2ae1-439">Los elementos de la <xref:System.Collections.ICollection> se ordenan en el mismo orden que las claves de la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-439">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the keys of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-440">Esta propiedad es similar a la <xref:System.Collections.SortedList.GetKeyList%2A> método, pero devuelve un <xref:System.Collections.ICollection> en lugar del objeto un <xref:System.Collections.IList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-440">This property is similar to the <xref:System.Collections.SortedList.GetKeyList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-441">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-441">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Values" />
        <altmember cref="M:System.Collections.SortedList.GetKeyList" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (key As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="sortedList.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="a2ae1-442">The key of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-442">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-443">Removes the element with the specified key from a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-443">Removes the element with the specified key from a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-444">Si el objeto <xref:System.Collections.SortedList> no contiene ningún elemento con la clave especificada, la interfaz <xref:System.Collections.SortedList> no sufre ningún cambio.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-444">If the <xref:System.Collections.SortedList> object does not contain an element with the specified key, the <xref:System.Collections.SortedList> remains unchanged.</span></span> <span data-ttu-id="a2ae1-445">No se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-445">No exception is thrown.</span></span>  
  
 <span data-ttu-id="a2ae1-446">En colecciones de elementos contiguos, como listas, los elementos que van a continuación del elemento eliminado se desplazan hacia arriba para ocupar el espacio libre.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-446">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="a2ae1-447">Si la colección está indizada, también se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-447">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="a2ae1-448">Este comportamiento no se aplica a las colecciones cuyos elementos se agrupan conceptualmente en sectores de almacenamiento, como una tabla hash.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-448">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="a2ae1-449">Este método es una O (`n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-449">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-450">En el ejemplo de código siguiente se muestra cómo quitar elementos de un <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-450">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-451">
            <paramref name="key" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-451">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2ae1-452">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-452">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="a2ae1-453">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-453">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="sortedList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a2ae1-454">The zero-based index of the element to remove.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-454">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-455">Removes the element at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-455">Removes the element at the specified index of a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-456">La secuencia de índice se basa en la secuencia de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-456">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="a2ae1-457">Cuando se agrega un elemento, se inserta en <xref:System.Collections.SortedList> en el orden correcto orden y la indización se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-457">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-458">Cuando se quita un elemento, la indización también se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-458">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-459">Por lo tanto, el índice de un par de clave y valor específico podría cambiar tal y como se agregan o quitan elementos de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-459">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-460">En colecciones de elementos contiguos, como listas, los elementos que van a continuación del elemento eliminado se desplazan hacia arriba para ocupar el espacio libre.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-460">In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot.</span></span> <span data-ttu-id="a2ae1-461">Si la colección está indizada, también se actualizan los índices de los elementos que se han movido.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-461">If the collection is indexed, the indexes of the elements that are moved are also updated.</span></span> <span data-ttu-id="a2ae1-462">Este comportamiento no se aplica a las colecciones cuyos elementos se agrupan conceptualmente en sectores de almacenamiento, como una tabla hash.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-462">This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</span></span>  
  
 <span data-ttu-id="a2ae1-463">Este método es una O (`n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-463">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-464">En el ejemplo de código siguiente se muestra cómo quitar elementos de un <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-464">The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2ae1-465">
            <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-465">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2ae1-466">The <see cref="T:System.Collections.SortedList" /> is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-466">The <see cref="T:System.Collections.SortedList" /> is read-only.</span>
          </span>
          <span data-ttu-id="a2ae1-467">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-467">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetByIndex">
      <MemberSignature Language="C#" Value="public virtual void SetByIndex (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetByIndex(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetByIndex (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetByIndex(int index, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member SetByIndex : int * obj -&gt; unit&#xA;override this.SetByIndex : int * obj -&gt; unit" Usage="sortedList.SetByIndex (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="a2ae1-468">The zero-based index at which to save <c>value</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-468">The zero-based index at which to save <c>value</c>.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="a2ae1-469">The <see cref="T:System.Object" /> to save into the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-469">The <see cref="T:System.Object" /> to save into the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
          <span data-ttu-id="a2ae1-470">The value can be <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-470">The value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-471">Replaces the value at a specific index in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-471">Replaces the value at a specific index in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-472">La secuencia de índice se basa en la secuencia de ordenación.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-472">The index sequence is based on the sort sequence.</span></span> <span data-ttu-id="a2ae1-473">Cuando se agrega un elemento, se inserta en <xref:System.Collections.SortedList> en el orden correcto orden y la indización se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-473">When an element is added, it is inserted into <xref:System.Collections.SortedList> in the correct sort order, and the indexing adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-474">Cuando se quita un elemento, la indización también se ajusta en consecuencia.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-474">When an element is removed, the indexing also adjusts accordingly.</span></span> <span data-ttu-id="a2ae1-475">Por lo tanto, el índice de un par de clave y valor específico podría cambiar tal y como se agregan o quitan elementos de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-475">Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-476">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-476">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-477">En el ejemplo de código siguiente se muestra cómo reemplazar el valor de un elemento en un <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-477">The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.</span></span>  
  
 [!code-cpp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.SetByIndex Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.SetByIndex Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.SetByIndex Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="a2ae1-478">
            <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-478">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.IndexOfKey(System.Object)" />
        <altmember cref="M:System.Collections.SortedList.IndexOfValue(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.SortedList Synchronized(class System.Collections.SortedList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (list As SortedList) As SortedList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::SortedList ^ Synchronized(System::Collections::SortedList ^ list);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.Collections.SortedList -&gt; System.Collections.SortedList" Usage="System.Collections.SortedList.Synchronized list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.SortedList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.SortedList" />
      </Parameters>
      <Docs>
        <param name="list">
          <span data-ttu-id="a2ae1-479">The <see cref="T:System.Collections.SortedList" /> object to synchronize.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-479">The <see cref="T:System.Collections.SortedList" /> object to synchronize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2ae1-480">Returns a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-480">Returns a synchronized (thread-safe) wrapper for a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-481">A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-481">A synchronized (thread-safe) wrapper for the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-482">Para garantizar la seguridad para subprocesos de un <xref:System.Collections.SortedList> de objeto, todas las operaciones deben realizarse a través de este contenedor solo.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-482">To guarantee the thread safety of a <xref:System.Collections.SortedList> object, all operations must be done through this wrapper only.</span></span>  
  
 <span data-ttu-id="a2ae1-483">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-483">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a2ae1-484">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-484">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="a2ae1-485">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-485">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-486">En el ejemplo de código siguiente se muestra cómo bloquear la colección utilizando la <xref:System.Collections.SortedList.SyncRoot%2A> propiedad durante toda la enumeración.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-486">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="a2ae1-487">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-487">This method is an O(1) operation.</span></span>  
  
 <span data-ttu-id="a2ae1-488">En el ejemplo de código siguiente se muestra cómo sincronizar un <xref:System.Collections.SortedList> de objetos, determinar si un <xref:System.Collections.SortedList> se sincronizan y usar un sincronizada <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-488">The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.IsSynchronized Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="a2ae1-489">
            <paramref name="list" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-489">
              <paramref name="list" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="P:System.Collections.SortedList.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public virtual object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Collections.SortedList.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-490">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-490">Gets an object that can be used to synchronize access to a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-491">Objeto que puede utilizarse para sincronizar el acceso al objeto <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-491">An object that can be used to synchronize access to the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-492">Para crear una versión sincronizada de la <xref:System.Collections.SortedList> objeto, utilice el <xref:System.Collections.SortedList.Synchronized%2A> método.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-492">To create a synchronized version of the <xref:System.Collections.SortedList> object, use the <xref:System.Collections.SortedList.Synchronized%2A> method.</span></span> <span data-ttu-id="a2ae1-493">Sin embargo, las clases derivadas pueden proporcionar su propia versión sincronizada de la <xref:System.Collections.SortedList> mediante el <xref:System.Collections.SortedList.SyncRoot%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-493">However, derived classes can provide their own synchronized version of the <xref:System.Collections.SortedList> using the <xref:System.Collections.SortedList.SyncRoot%2A> property.</span></span> <span data-ttu-id="a2ae1-494">El código de sincronización debe realizar las operaciones en el <xref:System.Collections.SortedList.SyncRoot%2A> de la <xref:System.Collections.SortedList>y no directamente en el <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-494">The synchronizing code must perform operations on the <xref:System.Collections.SortedList.SyncRoot%2A> of the <xref:System.Collections.SortedList>, not directly on the <xref:System.Collections.SortedList>.</span></span> <span data-ttu-id="a2ae1-495">De este modo, se garantiza el funcionamiento correcto de las colecciones derivadas de otros objetos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-495">This ensures proper operation of collections that are derived from other objects.</span></span> <span data-ttu-id="a2ae1-496">En concreto, mantiene la sincronización correcta con otros subprocesos que podrían modificar al mismo tiempo la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-496">Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref:System.Collections.SortedList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-497">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-497">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a2ae1-498">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-498">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="a2ae1-499">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-499">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-500">En el ejemplo de código siguiente se muestra cómo bloquear la colección utilizando la <xref:System.Collections.SortedList.SyncRoot%2A> propiedad durante toda la enumeración.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-500">The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.</span></span>  
  
 [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/CS/source2.cs#2)]
 [!code-vb[Classic SortedList.IsSynchronized Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.IsSynchronized Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="a2ae1-501">La recuperación del valor de esta propiedad es una operación O(1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-501">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.SortedList.IsSynchronized" />
        <altmember cref="M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-502">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-502">Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2ae1-503">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-503">An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.SortedList" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-504">[Visual Basic, C#]</span><span class="sxs-lookup"><span data-stu-id="a2ae1-504">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="a2ae1-505">La instrucción `foreach` del lenguaje C# (`for each` en Visual Basic) oculta la complejidad de los enumeradores.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-505">The `foreach` statement of the C# language (`for each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="a2ae1-506">Por lo tanto, se recomienda el uso de `foreach`, en lugar de manipular directamente el enumerador.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-506">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="a2ae1-507">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-507">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="a2ae1-508">En principio, el enumerador se coloca antes del primer elemento de la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-508">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="a2ae1-509"><xref:System.Collections.IEnumerator.Reset%2A> también devuelve el enumerador a esta posición.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-509"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span> <span data-ttu-id="a2ae1-510">En esta posición, al llamar a <xref:System.Collections.IEnumerator.Current%2A> produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-510">At this position, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="a2ae1-511">Por lo tanto, debe llamar a <xref:System.Collections.IEnumerator.MoveNext%2A> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <xref:System.Collections.IEnumerator.Current%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-511">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-512"><xref:System.Collections.IEnumerator.Current%2A> devuelve el mismo objeto hasta que se llama a <xref:System.Collections.IEnumerator.MoveNext%2A> o a <xref:System.Collections.IEnumerator.Reset%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-512"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="a2ae1-513"><xref:System.Collections.IEnumerator.MoveNext%2A> establece <xref:System.Collections.IEnumerator.Current%2A> en el siguiente elemento.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-513"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="a2ae1-514">Si <xref:System.Collections.IEnumerator.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-514">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="a2ae1-515">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <xref:System.Collections.IEnumerator.MoveNext%2A> también devolver `false`.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-515">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="a2ae1-516">Si la última llamada a <xref:System.Collections.IEnumerator.MoveNext%2A> devuelve `false`, si se llama <xref:System.Collections.IEnumerator.Current%2A> produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-516">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, calling <xref:System.Collections.IEnumerator.Current%2A> throws an exception.</span></span> <span data-ttu-id="a2ae1-517">Para volver a establecer el valor de <xref:System.Collections.IEnumerator.Current%2A> en el primer elemento de la colección, se puede llamar primero a <xref:System.Collections.IEnumerator.Reset%2A> y después a <xref:System.Collections.IEnumerator.MoveNext%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-517">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="a2ae1-518">Un enumerador es válido mientras la colección no cambie.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-518">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="a2ae1-519">Si se realizan cambios en la colección, como agregar, modificar, o eliminar elementos, el enumerador queda permanentemente invalidado y la siguiente llamada a <xref:System.Collections.IEnumerator.MoveNext%2A> o <xref:System.Collections.IEnumerator.Reset%2A> produce una <xref:System.InvalidOperationException>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-519">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="a2ae1-520">Si la colección se modifica entre <xref:System.Collections.IEnumerator.MoveNext%2A> y <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> devuelve el elemento que está establecido, aunque el enumerador ya haya quedado invalidado.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-520">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 <span data-ttu-id="a2ae1-521">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-521">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="a2ae1-522">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-522">Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</span></span> <span data-ttu-id="a2ae1-523">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-523">To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</span></span>  
  
 <span data-ttu-id="a2ae1-524">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-524">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimToSize">
      <MemberSignature Language="C#" Value="public virtual void TrimToSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrimToSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.SortedList.TrimToSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub TrimToSize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void TrimToSize();" />
      <MemberSignature Language="F#" Value="abstract member TrimToSize : unit -&gt; unit&#xA;override this.TrimToSize : unit -&gt; unit" Usage="sortedList.TrimToSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-525">Sets the capacity to the actual number of elements in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-525">Sets the capacity to the actual number of elements in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-526">Este método se puede utilizar para minimizar la sobrecarga de memoria de la colección si ningún elemento nuevo se agregará a la colección.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-526">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span>  
  
 <span data-ttu-id="a2ae1-527">Para restablecer un <xref:System.Collections.SortedList> objeto a su estado inicial, llamada la <xref:System.Collections.SortedList.Clear%2A> método antes de llamar a <xref:System.Collections.SortedList.TrimToSize%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-527">To reset a <xref:System.Collections.SortedList> object to its initial state, call the <xref:System.Collections.SortedList.Clear%2A> method before calling <xref:System.Collections.SortedList.TrimToSize%2A>.</span></span> <span data-ttu-id="a2ae1-528">Recortar vacío <xref:System.Collections.SortedList> establece la capacidad de la <xref:System.Collections.SortedList> en la capacidad predeterminada.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-528">Trimming an empty <xref:System.Collections.SortedList> sets the capacity of the <xref:System.Collections.SortedList> to the default capacity.</span></span>  
  
 <span data-ttu-id="a2ae1-529">Este método es una O (`n`) operación, donde `n` es <xref:System.Collections.SortedList.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-529">This method is an O(`n`) operation, where `n` is <xref:System.Collections.SortedList.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2ae1-530">En el ejemplo de código siguiente se muestra cómo se recortan las partes no utilizadas de una <xref:System.Collections.SortedList> objeto y cómo borrar sus valores.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-530">The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.</span></span>  
  
 [!code-cpp[Classic SortedList.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SortedList.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic SortedList.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic SortedList.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="a2ae1-531">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-531">The <see cref="T:System.Collections.SortedList" /> object is read-only.</span>
          </span>
          <span data-ttu-id="a2ae1-532">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-532">-or-  The <see cref="T:System.Collections.SortedList" /> has a fixed size.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.SortedList.Clear" />
        <altmember cref="P:System.Collections.SortedList.Capacity" />
        <altmember cref="P:System.Collections.SortedList.Count" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.SortedList.Values" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Values As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.ICollection" Usage="System.Collections.SortedList.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections.NonGeneric</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="a2ae1-533">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-533">Gets the values in a <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="a2ae1-534">Objeto <see cref="T:System.Collections.ICollection" /> que contiene los valores del objeto <see cref="T:System.Collections.SortedList" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2ae1-534">An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.SortedList" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2ae1-535">El <xref:System.Collections.ICollection> objeto es una vista de solo lectura de los valores de la <xref:System.Collections.SortedList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-535">The <xref:System.Collections.ICollection> object is a read-only view of the values of the <xref:System.Collections.SortedList> object.</span></span> <span data-ttu-id="a2ae1-536">Las modificaciones realizadas en subyacente <xref:System.Collections.SortedList> se reflejan inmediatamente en el <xref:System.Collections.ICollection>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-536">Modifications made to the underlying <xref:System.Collections.SortedList> are immediately reflected in the <xref:System.Collections.ICollection>.</span></span>  
  
 <span data-ttu-id="a2ae1-537">Los elementos de la <xref:System.Collections.ICollection> se ordenan en el mismo orden que los valores de la <xref:System.Collections.SortedList>.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-537">The elements of the <xref:System.Collections.ICollection> are sorted in the same order as the values of the <xref:System.Collections.SortedList>.</span></span>  
  
 <span data-ttu-id="a2ae1-538">Esta propiedad es similar a la <xref:System.Collections.SortedList.GetValueList%2A> método, pero devuelve un <xref:System.Collections.ICollection> en lugar del objeto un <xref:System.Collections.IList> objeto.</span><span class="sxs-lookup"><span data-stu-id="a2ae1-538">This property is similar to the <xref:System.Collections.SortedList.GetValueList%2A> method, but returns an <xref:System.Collections.ICollection> object instead of an <xref:System.Collections.IList> object.</span></span>  
  
 <span data-ttu-id="a2ae1-539">Este método es una operación o (1).</span><span class="sxs-lookup"><span data-stu-id="a2ae1-539">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.SortedList.Keys" />
        <altmember cref="M:System.Collections.SortedList.GetValueList" />
      </Docs>
    </Member>
  </Members>
</Type>