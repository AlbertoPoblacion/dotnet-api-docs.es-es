<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stack.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b364bfdec5920f343b57c572dbfbe97d9389647b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b364bfdec5920f343b57c572dbfbe97d9389647b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Collections.Stack">
          <source>Represents a simple last-in-first-out (LIFO) non-generic collection of objects.</source>
          <target state="translated">Representa una colección de objetos no genérica de último en entrar es el primero en salir (LIFO).</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>For the generic version of this collection, see <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Para obtener la versión genérica de esta colección, consulte <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> es el número de elementos de la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required through reallocation.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> es menor que la capacidad de la pila, <ph id="ph2">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> es una operación o (1).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Si la capacidad debe aumentarse para alojar el nuevo elemento, <ph id="ph1">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> se convierte en una O (<ph id="ph2">`n`</ph>) operación, donde <ph id="ph3">`n`</ph> es <ph id="ph4">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source><ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> es una operación o (1).</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source><ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> acepta <ph id="ph2">`null`</ph> como un valor válido y permite elementos duplicados.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>The following example shows how to create and add values to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> and how to display its values.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo crear y agregar valores a un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> y cómo mostrar sus valores.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Estático público (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> en Visual Basic) miembros de este tipo son seguros para subprocesos.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>, all operations must be done through the wrapper returned by the <ph id="ph2">&lt;see cref="M:System.Collections.Stack.Synchronized(System.Collections.Stack)" /&gt;</ph> method.</source>
          <target state="translated">Para garantizar la seguridad para subprocesos de la <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>, todas las operaciones deben realizarse a través del contenedor devuelto por el <ph id="ph2">&lt;see cref="M:System.Collections.Stack.Synchronized(System.Collections.Stack)" /&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Stack">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="T:System.Collections.Stack">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> que está vacía y tiene la capacidad inicial predeterminada.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Este constructor es una operación o (1).</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to copy elements from.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> de donde se van a copiar elementos.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> que contiene elementos copiados de la colección especificada y tiene la misma capacidad inicial que el número de elementos copiados.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> of the <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated">Los elementos se copian en el <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> en el mismo orden que los lee la <ph id="ph2">&lt;xref:System.Collections.IEnumerator&gt;</ph> de la <ph id="ph3">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`col`</ph>.</source>
          <target state="translated">Este constructor es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es el número de elementos de <ph id="ph3">`col`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Collections.ICollection)">
          <source><ph id="ph1">&lt;paramref name="col" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="col" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> can contain.</source>
          <target state="translated">Número inicial de elementos que puede contener la colección <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> que está vacía y tiene la capacidad inicial especificada o la capacidad inicial predeterminada, la que sea mayor.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> can hold.</source>
          <target state="translated">La capacidad de un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> es el número de elementos que la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> puede contener.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">Cuando se agregan elementos a un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, la capacidad aumenta automáticamente según sea necesario mediante la reasignación de la matriz interna.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Si se puede estimar el tamaño de la colección, al especificar la capacidad inicial elimina la necesidad de realizar una serie de operaciones de cambio de tamaño al agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`initialCapacity`</ph>.</source>
          <target state="translated">Este constructor es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">`initialCapacity`</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="initialCapacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="initialCapacity" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Clear">
          <source>Removes all objects from the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Quita todos los objetos de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> está establecido en cero, y también se liberan las referencias a otros objetos desde los elementos de la colección.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clear">
          <source>The following example shows how to clear the values of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo borrar los valores de la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Clone">
          <source>Creates a shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Crea una copia superficial de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Clone">
          <source>A shallow copy of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Copia superficial de la colección <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clone">
          <source>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to.</source>
          <target state="translated">Una copia superficial de una colección copia únicamente los elementos de la colección, si son tipos de referencia o tipos de valor, pero no copia los objetos que hacen referencia las referencias.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clone">
          <source>The references in the new collection point to the same objects that the references in the original collection point to.</source>
          <target state="translated">Las referencias de la nueva colección apuntan a los mismos objetos que apuntan las referencias de la colección original.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clone">
          <source>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</source>
          <target state="translated">En cambio, una copia en profundidad de una colección copia los elementos y todo lo que hacen referencia directa o indirectamente el elementos.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Clone">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Objeto que se va a buscar en <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Determina si un elemento se encuentra en <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> se encuentra en la matriz <ph id="ph3">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>; en caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>This method determines equality by calling the <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este método determina la igualdad llamando a la <ph id="ph1">&lt;xref:System.Object.Equals%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método realiza una búsqueda lineal; por lo tanto, este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>Starting with the .NET Framework 2.0, this method tests for equality by passing the <ph id="ph1">`obj`</ph> argument to the <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> method of individual objects in the collection.</source>
          <target state="translated">A partir de .NET Framework 2.0, este método comprueba la igualdad pasando el <ph id="ph1">`obj`</ph> argumento pasado a la <ph id="ph2">&lt;xref:System.Object.Equals%2A&gt;</ph> método de los objetos individuales de la colección.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Contains(System.Object)">
          <source>In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> method of the <ph id="ph2">`obj`</ph> argument.</source>
          <target state="translated">En las versiones anteriores de .NET Framework, esta determinación se realiza mediante el uso de pasar los elementos individuales de la colección a la <ph id="ph1">&lt;xref:System.Object.Equals%2A&gt;</ph> método de la <ph id="ph2">`obj`</ph> argumento.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional que constituye el destino de los elementos copiados de <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">La matriz <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> debe tener una indización de base cero.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Índice de base cero de <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> donde comienza la copia.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">Copia <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> en una <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> unidimensional existente, a partir del índice especificado de la matriz.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.</source>
          <target state="translated">Los elementos se copian en la matriz en orden de último en primero en salir (LIFO), que equivale al orden de los elementos devueltos por una serie de llamadas a <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The following example shows how to copy a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> into a one-dimensional array.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo copiar un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> en una matriz unidimensional.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es multidimensional.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El número de elementos de la <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> de origen es mayor que el espacio disponible desde <ph id="ph2">&lt;paramref name="index" /&gt;</ph> hasta el final de la <ph id="ph3">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">El tipo de la <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> de origen no puede convertirse automáticamente al tipo de la <ph id="ph2">&lt;paramref name="array" /&gt;</ph> de destino.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Collections.Stack.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Obtiene el número de elementos incluidos en <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Número de elementos contenidos en <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>The capacity is the number of elements that the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> can store.</source>
          <target state="translated">La capacidad es el número de elementos que la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> puede almacenar.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> es el número de elementos que están realmente en la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>The capacity is always greater than or equal to <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">La capacidad siempre es mayor o igual que <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> supera la capacidad al agregar elementos, la capacidad aumenta automáticamente mediante la reasignación de la matriz interna antes de copiar los elementos antiguos y agregar los nuevos elementos.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Returns an <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Devuelve una interfaz <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> para la interfaz <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Estructura <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> para la colección <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>[Visual Basic, C#]</source>
          <target state="translated">[Visual Basic, C#]</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated">La instrucción <ph id="ph1">`foreach`</ph> del lenguaje C# (<ph id="ph2">`for each`</ph> en Visual Basic) oculta la complejidad de los enumeradores.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Por lo tanto, se recomienda el uso de <ph id="ph1">`foreach`</ph>, en lugar de manipular directamente el enumerador.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Los enumeradores pueden usarse para leer los datos de la colección, pero no para modificar la colección subyacente.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">En principio, el enumerador se coloca antes del primer elemento de la colección.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> también devuelve el enumerador a esta posición.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">En esta posición, el valor de propiedad <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> está sin definir.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Por lo tanto, debe llamar a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> para adelantar el enumerador hasta el primer elemento de la colección antes de leer el valor de <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> devuelve el mismo objeto hasta que se llama a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> o a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> establece <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> en el siguiente elemento.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Mientras el enumerador permanezca en esta posición, las llamadas subsiguientes a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> también devolver <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Si la última llamada a <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> devuelve <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> no está definido.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Para volver a establecer el valor de <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> en el primer elemento de la colección, se puede llamar primero a <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> y después a <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Un enumerador es válido mientras la colección no cambie.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">El enumerador no tiene acceso exclusivo a la colección y, por tanto, la enumeración en una colección no es intrínsicamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">A fin de garantizar la seguridad de los subprocesos, se puede bloquear la colección durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Para permitir que varios subprocesos obtengan acceso de lectura y escritura a la colección, debe implementar su propia sincronización.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="P:System.Collections.Stack.IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Obtiene un valor que indica si el acceso a la interfaz <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> está sincronizado (es seguro para subprocesos).</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph>, if access to the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el acceso a <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> está sincronizado (es seguro para la ejecución de subprocesos); en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, all operations must be done through the wrapper returned by the <ph id="ph2">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> method.</source>
          <target state="translated">Para garantizar la seguridad para subprocesos de la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, todas las operaciones deben realizarse a través del contenedor devuelto por el <ph id="ph2">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo bloquear la colección utilizando el <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.IsSynchronized">
          <source>The following example shows how to synchronize a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, determine if a <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> is synchronized, and use a synchronized <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo sincronizar un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, determinar si un <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> se sincronizan y usar un sincronizada <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Peek">
          <source>Returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> without removing it.</source>
          <target state="translated">Devuelve el objeto situado al principio de <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> sin eliminarlo.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> at the top of the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> situado al principio de <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Este método es similar al método <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>, pero <ph id="ph2">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> no modifica la colección <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source><ph id="ph1">`null`</ph> can be pushed onto the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph> Puede forzarse la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> como un marcador de posición, si es necesario.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source>To distinguish between a null value and the end of the stack, check the <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> property or catch the <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>, which is thrown when the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph> is empty.</source>
          <target state="translated">Para distinguir entre un valor null y el final de la pila, compruebe la <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> propiedad o catch la <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>, que se produce cuando el <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph> está vacía.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Peek">
          <source>The following example shows how to add elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remove elements from the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, or view the element at the top of the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, quitar elementos de la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, o ver el elemento situado al principio de la <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is empty.</source>
          <target state="translated">La colección <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> está vacía.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Pop">
          <source>Removes and returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Quita y devuelve el objeto situado al principio de <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Pop">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> removed from the top of the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> eliminado del principio de <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">Este método es similar al método <ph id="ph1">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph>, pero <ph id="ph2">&lt;xref:System.Collections.Stack.Peek%2A&gt;</ph> no modifica la colección <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source><ph id="ph1">`null`</ph> can be pushed onto the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph> Puede forzarse la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> como un marcador de posición, si es necesario.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source>To distinguish between a null value and the end of the stack, check the <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> property or catch the <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>, which is thrown when the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph> is empty.</source>
          <target state="translated">Para distinguir entre un valor null y el final de la pila, compruebe la <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> propiedad o catch la <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>, que se produce cuando el <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph> está vacía.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Pop">
          <source>The following example shows how to add elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remove elements from the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, or view the element at the top of the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, quitar elementos de la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, o ver el elemento situado al principio de la <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Pop">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> is empty.</source>
          <target state="translated">La colección <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> está vacía.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> to push onto the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que se va a insertar en <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>Inserts an object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Inserta un objeto al principio de <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> already equals the capacity, the capacity of the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> ya es igual a la capacidad, la capacidad de la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> se incrementa mediante la reasignación automática de la matriz interna, y se copian los elementos existentes en la nueva matriz antes de agrega el nuevo elemento.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source><ph id="ph1">`null`</ph> can be pushed onto the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated"><ph id="ph1">`null`</ph> Puede forzarse la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> como un marcador de posición, si es necesario.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>It occupies a slot in the stack and is treated like any object.</source>
          <target state="translated">Ocupa una posición en la pila y se tratan como cualquier objeto.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph> es menor que la capacidad de la pila, <ph id="ph2">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> es una operación o (1).</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Si la capacidad debe aumentarse para alojar el nuevo elemento, <ph id="ph1">&lt;xref:System.Collections.Stack.Push%2A&gt;</ph> se convierte en una O (<ph id="ph2">`n`</ph>) operación, donde <ph id="ph3">`n`</ph> es <ph id="ph4">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Push(System.Object)">
          <source>The following example shows how to add elements to the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, remove elements from the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, or view the element at the top of the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo agregar elementos a la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, quitar elementos de la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, o ver el elemento situado al principio de la <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> to synchronize.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> que se va a sincronizar.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>Returns a synchronized (thread safe) wrapper for the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Devuelve un contenedor sincronizado (seguro para subprocesos) para la clase <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>A synchronized wrapper around the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Contenedor sincronizado de <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>To guarantee the thread safety of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, all operations must be done through this wrapper.</source>
          <target state="translated">Para garantizar la seguridad para subprocesos de la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, todas las operaciones deben realizarse a través de este contenedor.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo bloquear la colección utilizando el <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Este método es una operación o (1).</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source>The following example shows how to synchronize a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, determine if a <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> is synchronized, and use a synchronized <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo sincronizar un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, determinar si un <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph> se sincronizan y usar un sincronizada <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.Synchronized(System.Collections.Stack)">
          <source><ph id="ph1">&lt;paramref name="stack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stack" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.Collections.Stack.SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Obtiene un objeto que se puede usar para sincronizar el acceso a <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>An <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> that can be used to synchronize access to the <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que se puede utilizar para sincronizar el acceso a la colección <ph id="ph2">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>To create a synchronized version of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, use the <ph id="ph2">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> method.</source>
          <target state="translated">Para crear una versión sincronizada de la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph>, use el <ph id="ph2">&lt;xref:System.Collections.Stack.Synchronized%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>However, derived classes can provide their own synchronized version of the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> using the <ph id="ph2">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> property.</source>
          <target state="translated">Sin embargo, las clases derivadas pueden proporcionar su propia versión sincronizada de la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> mediante el <ph id="ph2">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>The synchronizing code must perform operations on the <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> of the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>, not directly on the <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated">El código de sincronización debe realizar las operaciones en el <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> de la <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>y no directamente en el <ph id="ph3">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>This ensures proper operation of collections that are derived from other objects.</source>
          <target state="translated">De este modo, se garantiza el funcionamiento correcto de las colecciones derivadas de otros objetos.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> object.</source>
          <target state="translated">En concreto, mantiene la sincronización correcta con otros subprocesos que podrían modificar al mismo tiempo la <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Enumerar una colección no es intrínsecamente un procedimiento seguro para subprocesos.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception.</source>
          <target state="translated">Incluso cuando una colección está sincronizada, otros subprocesos todavía pueden modificarla, lo que hace que el enumerador produzca una excepción.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</source>
          <target state="translated">Con el fin de garantizar la seguridad para la ejecución de subprocesos durante la enumeración, se puede bloquear la colección durante toda la enumeración o detectar las excepciones resultantes de los cambios realizados por otros subprocesos.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>The following code example shows how to lock the collection using the <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> during the entire enumeration.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo bloquear la colección utilizando el <ph id="ph1">&lt;xref:System.Collections.Stack.SyncRoot%2A&gt;</ph> durante toda la enumeración.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Stack.SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">La recuperación del valor de esta propiedad es una operación O(1).</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.ToArray">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> to a new array.</source>
          <target state="translated">Copia <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph> en una nueva matriz.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Collections.Stack.ToArray">
          <source>A new array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</source>
          <target state="translated">Nueva matriz que contiene copias de los elementos de <ph id="ph1">&lt;see cref="T:System.Collections.Stack" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.ToArray">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.</source>
          <target state="translated">Los elementos se copian en la matriz en orden de último en primero en salir (LIFO), que equivale al orden de los elementos devueltos por una serie de llamadas a <ph id="ph1">&lt;xref:System.Collections.Stack.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.ToArray">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</source>
          <target state="translated">Este método es una O (<ph id="ph1">`n`</ph>) operación, donde <ph id="ph2">`n`</ph> es <ph id="ph3">&lt;xref:System.Collections.Stack.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Stack.ToArray">
          <source>The following example shows how to copy a <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> into a one-dimensional array.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo copiar un <ph id="ph1">&lt;xref:System.Collections.Stack&gt;</ph> en una matriz unidimensional.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>