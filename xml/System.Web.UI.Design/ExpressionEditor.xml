<Type Name="ExpressionEditor" FullName="System.Web.UI.Design.ExpressionEditor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6029f291d01ac72d8aad54c46a381e25a236c1c7" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36390602" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditor extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditor" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditor abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditor = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Define un conjunto de propiedades y métodos para evaluar una expresión asociada a la propiedad de un control en tiempo de diseño y para proporcionar una hoja de editor de expresiones al host de diseño visual para su uso en el cuadro de diálogo del editor de expresiones. Esta clase es abstracta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Host de un diseñador visual, como [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)], usa la <xref:System.Web.UI.Design.ExpressionEditor> clase para presentar expresión personalizada hojas del editor para el usuario y, a continuación, evalúa la expresión seleccionada para la representación en tiempo de diseño.  
  
 Cuando se examina el <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> propiedad para un control en la cuadrícula de propiedades de tiempo de diseño, el diseñador visual muestra un cuadro de diálogo para establecer las expresiones de una propiedad de control. Puede seleccionar el tipo de expresión basándose en una lista de prefijos de expresión. Cuando selecciona un prefijo de expresión de la lista, el diseñador visual utiliza asociado <xref:System.Web.UI.Design.ExpressionEditor> y <xref:System.Web.UI.Design.ExpressionEditorSheet> objetos que se va a establecer, evaluar y convertir la cadena de expresión basándose en la sintaxis de ese tipo de expresión. El diseñador visual establece la expresión de la propiedad de control asociada y, a continuación, usa el resultado de la expresión evaluada para asignar valores de propiedad que se representan en la superficie de diseño del control.  
  
 El método estático <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> métodos reciben el editor de expresiones que está asociado con un prefijo de expresión determinado o el generador de expresiones. El <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> propiedad para un <xref:System.Web.UI.Design.ExpressionEditor> objeto devuelve el prefijo de expresión configurado. El <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> método se evalúa como una cadena de expresión de entrada. El <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método devuelve el <xref:System.Web.UI.Design.ExpressionEditorSheet> implementación que se utiliza para solicitar las propiedades de expresiones personalizado en el cuadro de diálogo de expresiones.  
  
 Normalmente, para admitir un nuevo tipo de expresión en tiempo de diseño, se define un prefijo de expresión único y proporcionar personalizado <xref:System.Web.Compilation.ExpressionBuilder> y <xref:System.Web.UI.Design.ExpressionEditor> las implementaciones. Si lo desea, puede proporcionar un personalizado <xref:System.Web.UI.Design.ExpressionEditorSheet> implementación que define las propiedades que se usan para formar la expresión en el cuadro de diálogo de expresiones.  
  
 El prefijo de expresión identifica el tipo de expresión personalizado y asocia una expresión con el generador de expresiones y el editor de expresiones. Cuando las expresiones personalizadas se analizan en una página, el prefijo de expresión se utiliza para crear instancias de asociado <xref:System.Web.Compilation.ExpressionBuilder> y <xref:System.Web.UI.Design.ExpressionEditor> clases. Para asociar un prefijo de expresión a un generador de expresiones y el editor de expresiones, aplique el <xref:System.Web.Compilation.ExpressionEditorAttribute> y <xref:System.Web.Compilation.ExpressionPrefixAttribute> atributos personalizado <xref:System.Web.Compilation.ExpressionBuilder> clase y configure el prefijo de expresión para un generador de expresiones en el `expressionBuilders` elemento en el archivo de configuración Web. El prefijo no es necesario, pero se recomienda encarecidamente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo se deriva de la <xref:System.Web.UI.Design.ExpressionEditor> clase para definir un editor de expresiones personalizadas.  
  
 [!code-csharp[CustomExpressionEditor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/customexpressioneditor/cs/CustomAppSettingsExpression.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Los siguientes pasos son necesarios para derivar un personalizado <see cref="T:System.Web.UI.Design.ExpressionEditor" /> clase:-invalidar la <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> método para evaluar el tipo de expresión personalizado en tiempo de diseño.  -Opcionalmente, invalide el <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> método para devolver una clase personalizada que define las propiedades que se combinan para formar la expresión personalizada.  -Aplicar el <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> del atributo en el <see cref="T:System.Web.Compilation.ExpressionBuilder" /> declaración para asociar el generador de expresiones personalizado a la clase de editor de expresiones derivada de la clase.  Por ejemplo, el <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> clase se deriva de la <see cref="T:System.Web.UI.Design.ExpressionEditor" /> clase y proporciona una implementación para evaluar y asociar una referencia de la cadena de recurso a una propiedad de control en tiempo de diseño. El <see cref="T:System.Web.Compilation.ResourceExpressionBuilder" /> clase está asociada con el prefijo de expresión <see langword="Resources" /> y <see cref="T:System.Web.UI.Design.ResourceExpressionEditor" /> implementación. El <see cref="M:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> método devuelve un <see cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />, que define las propiedades individuales que forman una expresión de referencia de recurso.</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
    <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
    <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
    <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
    <altmember cref="T:System.Web.Configuration.ExpressionBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la <xref:System.Web.UI.Design.ExpressionEditor> clase es abstracta, no se puede crear una instancia de la <xref:System.Web.UI.Design.ExpressionEditor> clase directamente mediante el <xref:System.Web.UI.Design.ExpressionEditor.%23ctor%2A> constructor.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al derivar desde la <see cref="T:System.Web.UI.Design.ExpressionEditor" /> clase, invalide el <see cref="M:System.Web.UI.Design.ExpressionEditor.#ctor" /> constructor para implementar acciones de inicialización personalizadas para la implementación del editor de expresiones.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EvaluateExpression">
      <MemberSignature Language="C#" Value="public abstract object EvaluateExpression (string expression, object parseTimeData, Type propertyType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EvaluateExpression(string expression, object parseTimeData, class System.Type propertyType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EvaluateExpression (expression As String, parseTimeData As Object, propertyType As Type, serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EvaluateExpression(System::String ^ expression, System::Object ^ parseTimeData, Type ^ propertyType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member EvaluateExpression : string * obj * Type * IServiceProvider -&gt; obj" Usage="expressionEditor.EvaluateExpression (expression, parseTimeData, propertyType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="parseTimeData" Type="System.Object" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">Cadena de expresión que se va a evaluar. La expresión no incluye el prefijo de expresión.</param>
        <param name="parseTimeData">Objeto que contiene información de análisis adicional para evaluar <c>expression</c>. Normalmente, lo proporciona el generador de expresiones.</param>
        <param name="propertyType">Tipo de la propiedad de control a la que <c>expression</c> está enlazado.</param>
        <param name="serviceProvider">Implementación del proveedor de servicios proporcionada por el host del diseñador, que se utiliza para obtener servicios en tiempo de diseño adicionales.</param>
        <summary>Evalúa una cadena de expresión y proporciona el valor en tiempo de diseño de una propiedad de control.</summary>
        <returns>Objeto al que hace referencia la cadena de expresión evaluada si la evaluación de la expresión se realizó correctamente; en caso contrario, es <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El host del diseñador visual utiliza el <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> método para evaluar una expresión y proporcionar el valor de tiempo de diseño de una propiedad del control asociado.  
  
 El diseñador visual utiliza el <xref:System.Web.Compilation.ExpressionBuilder.ParseExpression%2A?displayProperty=nameWithType> método para analizar la cadena de expresión en tiempo de diseño y, a continuación, llama el <xref:System.Web.UI.Design.ExpressionEditor.EvaluateExpression%2A> método con los datos de la expresión analizada. El diseñador visual utiliza el resultado de la expresión evaluada para asignar valores de propiedad que se representan en la superficie de diseño del control.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Las clases que derivan de la <see cref="T:System.Web.UI.Design.ExpressionEditor" /> clase debe reemplazar el <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> método para evaluar el tipo de expresión personalizado en tiempo de diseño.  Como mínimo, un <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> implementación debe utilizar los siguientes pasos: 1.  Evaluar la cadena de expresión y determinar el objeto que hace referencia la expresión.  2.  Devolver <see langword="null" />, si no se puede evaluar la cadena de expresión.  3.  Use la <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> método en <paramref name="propertyType" /> para determinar si el objeto que se hace referencia puede asignarse directamente en el tipo de propiedad de control y, a continuación, dependiendo del resultado, realice una de las siguientes acciones: - si se puede asignar el objeto de referencia directamente a la propiedad de control, devolver el objeto que se hace referencia para la expresión.  -Si el objeto que se hace referencia es un tipo simple, como una cadena, devolver el objeto que se hace referencia.  -En caso contrario, determine si el objeto que se hace referencia puede asignarse a o convertir al tipo de propiedad.  4.  Use la <see cref="Overload:System.ComponentModel.TypeConverter.CanConvertFrom" /> método en el <see cref="T:System.ComponentModel.TypeConverter" /> objeto <paramref name="propertyType" /> para determinar si el objeto de referencia puede convertir al tipo de propiedad de control y, a continuación, dependiendo del resultado, realice una de las siguientes acciones:: si el objeto puede ser convertir el tipo de propiedad de control, devolver el objeto convertido mediante el <see cref="Overload:System.ComponentModel.TypeConverter.ConvertFrom" /> método.  -Si el objeto que se hace referencia no se puede asignar o convertir en <paramref name="propertyType" />, devolver el objeto que se hace referencia.  Si lo desea, el <see cref="M:System.Web.UI.Design.ExpressionEditor.EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" /> implementación puede utilizar el <paramref name="parseTimeData" /> objeto proporcionado por el <see cref="M:System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" /> implementación para optimizar o ayudar en la evaluación de la cadena de expresión de entrada.</para>
        </block>
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ExpressionPrefix">
      <MemberSignature Language="C#" Value="public string ExpressionPrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ExpressionPrefix" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpressionPrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ExpressionPrefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExpressionPrefix : string" Usage="System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el prefijo de expresión que identifica las cadenas de expresión admitidas por la implementación del editor de expresiones.</summary>
        <value>Una cadena que representa el prefijo de las expresiones admitidas por la clase derivada de <see cref="T:System.Web.UI.Design.ExpressionEditor" />; de lo contrario, una cadena vacía ("") si el editor de expresiones no tiene un prefijo de expresión asociado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El prefijo de expresión identifica el tipo de expresión personalizado y asocia una expresión con el generador de expresiones y el editor de expresiones. Cuando las expresiones personalizadas se analizan en una página, el prefijo de expresión se utiliza para crear instancias de asociado <xref:System.Web.Compilation.ExpressionBuilder> y <xref:System.Web.UI.Design.ExpressionEditor> clases. Para asociar un prefijo de expresión a un generador de expresiones y el editor de expresiones, aplique el <xref:System.Web.Compilation.ExpressionEditorAttribute> y <xref:System.Web.Compilation.ExpressionPrefixAttribute> atributos personalizado <xref:System.Web.Compilation.ExpressionBuilder> clase y configure el prefijo de expresión para un generador de expresiones en el `expressionBuilders` elemento en el archivo de configuración Web.  
  
 Normalmente, las clases derivadas no invalidar el <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> propiedad. La base de <xref:System.Web.UI.Design.ExpressionEditor> clase conjuntos el <xref:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix%2A> valor basado en el <xref:System.Web.Compilation.ExpressionPrefixAttribute> atributo asociado <xref:System.Web.Compilation.ExpressionBuilder> objeto.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExpressionEditor">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Devuelve una implementación de <see cref="T:System.Web.UI.Design.ExpressionEditor" /> que está asociada a un prefijo de expresión o un generador de expresiones.</summary>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="P:System.Web.UI.Design.HtmlControlDesigner.Expressions" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (string expressionPrefix, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(string expressionPrefix, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionPrefix As String, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(System::String ^ expressionPrefix, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionPrefix, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionPrefix" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionPrefix">Prefijo de expresión utilizado para buscar el editor de expresiones asociado.</param>
        <param name="serviceProvider">Implementación del proveedor de servicios proporcionada por el host del diseñador, que se utiliza para obtener servicios en tiempo de diseño adicionales.</param>
        <summary>Devuelve una implementación de <see cref="T:System.Web.UI.Design.ExpressionEditor" /> que está asociada al prefijo de expresión especificado.</summary>
        <returns>Implementación de <see cref="T:System.Web.UI.Design.ExpressionEditor" /> asociada a <paramref name="expressionPrefix" />; de lo contrario, <see langword="null" />, si <paramref name="expressionPrefix" /> no está definido o no está asociado a un <see cref="T:System.Web.UI.Design.ExpressionEditor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice el método estático <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> sobrecargas del método para buscar el <xref:System.Web.UI.Design.ExpressionEditor> objeto que está asociado con un prefijo de expresión determinada o un tipo de generador de expresiones.  
  
 Para cada tipo de expresión personalizado, un prefijo de expresión identifica el generador de expresiones asociado y el editor de expresiones. Cuando las expresiones personalizadas se analizan en una página, el prefijo de expresión se utiliza para crear instancias de asociado <xref:System.Web.Compilation.ExpressionBuilder> y <xref:System.Web.UI.Design.ExpressionEditor> clases.  
  
 Para asociar un prefijo de expresión a un generador de expresiones y el editor de expresiones, aplique el <xref:System.Web.Compilation.ExpressionEditorAttribute> y <xref:System.Web.Compilation.ExpressionPrefixAttribute> atributos personalizado <xref:System.Web.Compilation.ExpressionBuilder> clase y configure el prefijo de expresión para un generador de expresiones en el `expressionBuilders` elemento en el archivo de configuración Web.  
  
 Para buscar la expresión asociada editor para un prefijo de expresión, el <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> método enumera los contadores <xref:System.Web.Compilation.ExpressionBuilder> implementaciones para un prefijo coincidente. El <xref:System.Web.Compilation.ExpressionBuilder> implementaciones pueden configurarse en la `expressionBuilders` sección del archivo de configuración Web. Si un <xref:System.Web.Compilation.ExpressionBuilder> implementación define el prefijo de expresión, el <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> método devuelve el tipo que se especifica en el <xref:System.Web.Compilation.ExpressionEditorAttribute> atributo de la <xref:System.Web.Compilation.ExpressionBuilder> metadatos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceProvider" /> es <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditor">
      <MemberSignature Language="C#" Value="public static System.Web.UI.Design.ExpressionEditor GetExpressionEditor (Type expressionBuilderType, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.Design.ExpressionEditor GetExpressionEditor(class System.Type expressionBuilderType, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor(System.Type,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExpressionEditor (expressionBuilderType As Type, serviceProvider As IServiceProvider) As ExpressionEditor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::Design::ExpressionEditor ^ GetExpressionEditor(Type ^ expressionBuilderType, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="static member GetExpressionEditor : Type * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditor" Usage="System.Web.UI.Design.ExpressionEditor.GetExpressionEditor (expressionBuilderType, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionBuilderType" Type="System.Type" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expressionBuilderType">Tipo de la clase de generador de expresiones derivada, que se utiliza para buscar el editor de expresiones asociado.</param>
        <param name="serviceProvider">Implementación del proveedor de servicios proporcionada por el host del diseñador, que se utiliza para obtener servicios en tiempo de diseño adicionales.</param>
        <summary>Devuelve una implementación de <see cref="T:System.Web.UI.Design.ExpressionEditor" /> que está asociada al tipo de generador de expresiones especificado.</summary>
        <returns>Implementación de <see cref="T:System.Web.UI.Design.ExpressionEditor" /> asociada a <paramref name="expressionBuilderType" />; de lo contrario, <see langword="null" />, si <paramref name="expressionBuilderType" /> no se encuentra o no tiene un <see cref="T:System.Web.UI.Design.ExpressionEditor" /> asociado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice el método estático <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> sobrecargas para encontrar el <xref:System.Web.UI.Design.ExpressionEditor> objeto que está asociado con un prefijo de expresión determinada o un tipo de generador de expresiones.  
  
 Para cada tipo de expresión personalizado, un prefijo de expresión identifica el generador de expresiones asociado y el editor de expresiones. Cuando las expresiones personalizadas se analizan en una página, el prefijo de expresión se utiliza para crear instancias de asociado <xref:System.Web.Compilation.ExpressionBuilder> y <xref:System.Web.UI.Design.ExpressionEditor> clases.  
  
 Para asociar un prefijo de expresión a un generador de expresiones y el editor de expresiones, aplique el <xref:System.Web.Compilation.ExpressionEditorAttribute> y <xref:System.Web.Compilation.ExpressionPrefixAttribute> atributos personalizado <xref:System.Web.Compilation.ExpressionBuilder> clase y configure el prefijo de expresión para un generador de expresiones en el `expressionBuilders` elemento en el archivo de configuración Web.  
  
 El <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> método enumera los contadores <xref:System.Web.Compilation.ExpressionBuilder> implementaciones para localizar `expressionBuilderType`. El <xref:System.Web.Compilation.ExpressionBuilder> implementaciones pueden configurarse en la `expressionBuilders` sección del archivo de configuración Web. Si `expressionBuilderType` se encuentra en el conjunto de elementos disponibles <xref:System.Web.Compilation.ExpressionBuilder> implementaciones, el <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor%2A> método devuelve el tipo que se especifica en el <xref:System.Web.Compilation.ExpressionEditorAttribute> atributo de la <xref:System.Web.Compilation.ExpressionBuilder> metadatos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="expressionBuilderType" /> es <see langword="null" />.  \- o bien - <paramref name="serviceProvider" /> es <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Design.ExpressionEditor.ExpressionPrefix" />
        <altmember cref="T:System.Web.Compilation.ExpressionBuilder" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetExpressionEditorSheet">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet (string expression, IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.Design.ExpressionEditorSheet GetExpressionEditorSheet(string expression, class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExpressionEditorSheet (expression As String, serviceProvider As IServiceProvider) As ExpressionEditorSheet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::Design::ExpressionEditorSheet ^ GetExpressionEditorSheet(System::String ^ expression, IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet&#xA;override this.GetExpressionEditorSheet : string * IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="expressionEditor.GetExpressionEditorSheet (expression, serviceProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Design.ExpressionEditorSheet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="expression">La cadena de expresión establecida para una propiedad de control, utilizada para inicializar la hoja del editor de expresiones.</param>
        <param name="serviceProvider">Implementación del proveedor de servicios proporcionada por el host del diseñador, que se utiliza para obtener servicios en tiempo de diseño adicionales.</param>
        <summary>Devuelve una hoja del editor de expresiones que está asociada al actual editor de expresiones.</summary>
        <returns>Una hoja <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> que define las propiedades de expresión personalizadas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método devuelve un <xref:System.Web.UI.Design.ExpressionEditorSheet> implementación que define las cadenas que se combinan para formar una expresión personalizada. El diseñador visual utiliza una hoja de editor de expresiones para solicitar una o varias cadenas que se combinan en una expresión personalizada. El método de clase base devuelve una hoja de editor de expresiones de valor predeterminado, que utiliza una sola cadena de entrada para formar la expresión. La hoja de editor de expresiones define la cuadrícula de propiedades para la expresión. Por lo tanto, las propiedades que expone el editor de expresiones se convierten en propiedades que se pueden definir para la expresión en el cuadro de diálogo.  
  
 Las clases que derivan de la <xref:System.Web.UI.Design.ExpressionEditor> clase opcionalmente, puede invalidar el <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método para proporcionar una hoja de editor de expresiones personalizado. Una hoja de editor de expresiones personalizada puede permitir que la entrada en tiempo de diseño de varias propiedades, que se combinan para formar la cadena de expresión.  
  
 Por ejemplo, el <xref:System.Web.UI.Design.ResourceExpressionEditor> clase se deriva de la <xref:System.Web.UI.Design.ExpressionEditor> clase y proporciona una implementación para evaluar y asociar una referencia de la cadena de recurso a una propiedad de control en tiempo de diseño. El <xref:System.Web.Compilation.ResourceExpressionBuilder> clase está asociada con el prefijo de expresión `Resources` y <xref:System.Web.UI.Design.ResourceExpressionEditor> implementación. El <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A?displayProperty=nameWithType> método devuelve un <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, que define las propiedades individuales que forman una expresión de referencia de recurso.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Normalmente, para proporcionar un nuevo tipo de expresión en tiempo de diseño, se define un prefijo de expresión único y proporcionar personalizado <see cref="T:System.Web.Compilation.ExpressionBuilder" /> y <see cref="T:System.Web.UI.Design.ExpressionEditor" /> las implementaciones. Si lo desea, puede proporcionar un personalizado <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> implementación que define las propiedades que se usan para formar la expresión. Aunque el archivo de configuración define el prefijo, también deberá aplicar un <see cref="T:System.Web.Compilation.ExpressionPrefixAttribute" /> objeto y un <see cref="T:System.Web.Compilation.ExpressionEditorAttribute" /> objeto.  Invalidar el <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> método para devolver una hoja de editor de expresiones que define la entrada en tiempo de diseño de varias propiedades en una expresión personalizada. Cuando se selecciona una propiedad de control y el tipo de editor de expresiones, el diseñador visual llama el <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> método y, a continuación, fuentes de cadena que es la expresión actual establecen para la propiedad de control. Use <paramref name="expression" /> para establecer los valores iniciales de las propiedades de expresión. Use <paramref name="serviceProvider" /> para inicializar un constructor de hoja de expresión personalizada y para acceder a los servicios proporcionados por el host del diseñador. Por ejemplo, llamar a la <see cref="M:System.IServiceProvider.GetService(System.Type)" /> método con el <see cref="T:System.Web.UI.Design.IWebApplication" /> tipo para acceder a los elementos de proyecto, documentos o detalles del archivo de configuración que se proporcionan a través del diseñador visual.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditorSheet" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
        <altmember cref="T:System.Web.Compilation.ExpressionPrefixAttribute" />
        <altmember cref="T:System.Web.Compilation.ExpressionEditorAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>