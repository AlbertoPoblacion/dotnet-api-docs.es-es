<Type Name="ExpressionEditorSheet" FullName="System.Web.UI.Design.ExpressionEditorSheet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3d03571457cd704c114939358e83035b77f58fcd" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39978613" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExpressionEditorSheet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExpressionEditorSheet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.Design.ExpressionEditorSheet" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExpressionEditorSheet" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpressionEditorSheet abstract" />
  <TypeSignature Language="F#" Value="type ExpressionEditorSheet = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa una hoja de editor en tiempo de diseño para una expresión personalizada. Se debe heredar esta clase.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una hoja de editor de expresiones personalizado permite al desarrollador establecer las propiedades de una expresión personalizada en tiempo de diseño. Los valores de propiedad de control se pueden establecer utilizando cadenas de expresión; las cadenas de expresión se evalúan en tiempo de ejecución mediante un generador de expresiones y en tiempo de diseño por un editor de expresiones.  
  
 Cuando se examina el <xref:System.Web.UI.Design.HtmlControlDesigner.Expressions%2A> propiedad de un control en la cuadrícula de propiedades de tiempo de diseño, el diseñador visual muestra un cuadro de diálogo para establecer expresiones que proporcionan el valor de una propiedad de control. Puede seleccionar el tipo de expresión basándose en una lista de prefijos de expresión. Cuando se selecciona un prefijo de expresión en la lista, el diseñador visual utiliza asociado <xref:System.Web.UI.Design.ExpressionEditor> y <xref:System.Web.UI.Design.ExpressionEditorSheet> objetos para evaluar y convertir la cadena de expresión basan en la sintaxis de ese tipo de expresión. El diseñador visual utiliza las propiedades de hoja de editor de expresiones para solicitar una o varias cadenas que se combinan en la cadena de expresión personalizada.  
  
 Normalmente, para proporcionar un nuevo tipo de expresión en tiempo de diseño, se define un prefijo de expresión único y proporcionar una personalizada <xref:System.Web.Compilation.ExpressionBuilder> y <xref:System.Web.UI.Design.ExpressionEditor> implementaciones. Si lo desea, puede proporcionar una personalizada <xref:System.Web.UI.Design.ExpressionEditorSheet> implementación que define las propiedades que se usan para formar la expresión. Para asociar un prefijo de expresión a un generador de expresiones y un editor de expresiones, aplique el <xref:System.Web.Compilation.ExpressionEditorAttribute> atributo y un <xref:System.Web.Compilation.ExpressionPrefixAttribute> atributo personalizado <xref:System.Web.Configuration.ExpressionBuilder> clase y, a continuación, configure el prefijo de expresión para un generador de expresiones en el `expressionBuilders` elemento en el archivo de configuración Web.  
  
 La implementación predeterminada de la <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método devuelve una hoja de editor básico, que utiliza una sola cadena de entrada para formar la expresión. Editores de expresiones personalizados que se derivan los <xref:System.Web.UI.Design.ExpressionEditor> puede invalidar el <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método devuelva un editor personalizado de implementación de la hoja. Normalmente, una hoja de editor personalizado contiene varias propiedades que se usan para generar la cadena de expresión. El <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> método devuelve la cadena de expresión resultante basándose en las propiedades de la expresión actual.  
  
 Por ejemplo, el <xref:System.Web.UI.Design.ResourceExpressionEditor> clase se deriva de la <xref:System.Web.UI.Design.ExpressionEditor> clase y proporciona una implementación para evaluar y asociar una referencia de cadena de recurso con una propiedad de control en tiempo de diseño. El <xref:System.Web.Compilation.ResourceExpressionBuilder> clase está asociada con el prefijo de expresión `Resources` y <xref:System.Web.UI.Design.ResourceExpressionEditor> implementación. El <xref:System.Web.UI.Design.ResourceExpressionEditor.GetExpressionEditorSheet%2A> método devuelve un <xref:System.Web.UI.Design.ResourceExpressionEditorSheet>, que define las propiedades individuales que forman una expresión de referencia de recurso.  
  
 Al heredar de la <xref:System.Web.UI.Design.ExpressionEditorSheet> (clase), debe reemplazar los miembros siguientes:  
  
-   El <xref:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet%2A> método devuelva un editor personalizado de implementación de la hoja.  
  
-   El <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor para implementar acciones de inicialización personalizadas para la implementación de hoja de editor de expresiones.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Derivar una hoja de editor de expresiones personalizado desde la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> (clase), si está definiendo un nuevo tipo de expresión para los valores de propiedad de control y desea generar la cadena de expresión en función de varios valores de propiedad de expresión. Implementación de una clase derivada debe contener lo siguiente:-una propiedad pública para cada valor distinto de la cadena de expresión que se puede establecer en tiempo de diseño.  -Una implementación de la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> método que constituye la cadena de expresión personalizada de los valores de propiedad de la hoja de editor.  -Si lo desea, una implementación de constructor que establece los valores iniciales del editor de la hoja de propiedades.  La clase de editor de expresiones personalizado asociado crea una instancia de la hoja de editor derivada en el <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> método, inicializa con la cadena de expresión actual establecida para la propiedad de control y devuelve la instancia al diseñador visual. El diseñador visual le permite establecer la expresión en la hoja de propiedades y, a continuación, llama a la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> método para formar la cadena de expresión de los valores de propiedad de la hoja de expresión de entrada.</para>
    </block>
    <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
    <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
    <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExpressionEditorSheet (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (serviceProvider As IServiceProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExpressionEditorSheet(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.Design.ExpressionEditorSheet : IServiceProvider -&gt; System.Web.UI.Design.ExpressionEditorSheet" Usage="new System.Web.UI.Design.ExpressionEditorSheet serviceProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Implementación del proveedor de servicios proporcionada por el host del diseñador, que se utiliza para obtener servicios en tiempo de diseño adicionales.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que el <xref:System.Web.UI.Design.ExpressionEditorSheet> clase es abstracta y no se puede crear una instancia de un <xref:System.Web.UI.Design.ExpressionEditorSheet> directamente mediante el <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al derivar de la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> clase, invalide el <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor para implementar acciones de inicialización personalizadas para la implementación de hoja de editor de expresiones.  Por ejemplo, una clase de hoja de editor de expresiones personalizado que implementa las propiedades de expresión adicionales puede definir los valores predeterminados para las propiedades de expresión en el <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" /> constructor. Una clase de hoja de editor de expresiones personalizado puede definir sobrecargas de constructor público adicional que usan valores de parámetro de entrada para establecer los valores iniciales de las propiedades de expresión.</para>
        </block>
        <altmember cref="Overload:System.Web.UI.Design.ExpressionEditor.GetExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="GetExpression">
      <MemberSignature Language="C#" Value="public abstract string GetExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetExpression() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetExpression () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::String ^ GetExpression();" />
      <MemberSignature Language="F#" Value="abstract member GetExpression : unit -&gt; string" Usage="expressionEditorSheet.GetExpression " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, devuelve la cadena de expresión formada por los valores de propiedades de la hoja del editor de expresiones.</summary>
        <returns>La cadena de expresión personalizada para los valores de propiedad actuales.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una hoja de editor de expresiones personalizado contiene la configuración de tiempo de diseño de varias propiedades de expresión, que se combinan para formar una cadena de expresión. Los valores de propiedad de control se pueden establecer utilizando cadenas de expresión; las cadenas de expresión se evalúan en tiempo de ejecución mediante un generador de expresiones.  
  
 El <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> método devuelve una cadena de expresión que se basa en las propiedades de la expresión actual. El diseñador visual le permite establecer la expresión en la hoja de propiedades y, a continuación, llama a la <xref:System.Web.UI.Design.ExpressionEditorSheet.GetExpression%2A> método para obtener la cadena de expresión y establecer el valor de propiedad de control.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Derivar una hoja de editor de expresiones personalizado desde la <see cref="T:System.Web.UI.Design.ExpressionEditorSheet" /> (clase), si está definiendo un nuevo tipo de expresión para los valores de propiedad de control y desea generar la cadena de expresión en función de varios valores de propiedad de expresión. Implementación de una clase derivada debe contener lo siguiente:-una propiedad pública para cada valor distinto de la cadena de expresión que se puede establecer en tiempo de diseño.  -Una implementación de la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> método que constituye la cadena de expresión personalizada de los valores de propiedad de la hoja de editor.  -Si lo desea, una implementación de constructor que establece los valores iniciales del editor de la hoja de propiedades.  La clase de editor de expresiones personalizado asociado crea una instancia de la hoja de editor derivada en el <see cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" /> método, inicializa con la cadena de expresión actual establecida para la propiedad de control y, a continuación, se devuelve la instancia para el objeto visual diseñador. El diseñador visual le permite establecer la expresión en la hoja de propiedades y, a continuación, llama a la <see cref="M:System.Web.UI.Design.ExpressionEditorSheet.GetExpression" /> método para formar la cadena de expresión de los valores de propiedad de la hoja de expresión de entrada.</para>
        </block>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValid : bool" Usage="System.Web.UI.Design.ExpressionEditorSheet.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la cadena de expresión es válida.</summary>
        <value>Es <see langword="true" /> si la cadena de expresión es válida; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta implementación base siempre devuelve `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.Design.ExpressionEditor" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="T:System.Web.UI.Design.ResourceExpressionEditorSheet" />
      </Docs>
    </Member>
    <Member MemberName="ServiceProvider">
      <MemberSignature Language="C#" Value="public IServiceProvider ServiceProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IServiceProvider ServiceProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServiceProvider As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IServiceProvider ^ ServiceProvider { IServiceProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServiceProvider : IServiceProvider" Usage="System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la implementación del proveedor de servicios que utiliza la hoja de editor de expresiones.</summary>
        <value>Un <see cref="T:System.IServiceProvider" />, que normalmente proporciona el host de diseño, y que se puede utilizar para obtener servicios en tiempo de diseño adicionales.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.Design.ExpressionEditorSheet.%23ctor%2A> constructor para establecer el <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> implementación para una hoja de editor de expresiones personalizadas.  
  
 El <xref:System.Web.UI.Design.ExpressionEditorSheet.ServiceProvider%2A> propiedad puede utilizarse para acceder a los servicios proporcionados por el host del diseñador. Por ejemplo, llamar a la <xref:System.IServiceProvider.GetService%2A> método con el <xref:System.Web.UI.Design.IWebApplication> interfaz para acceder a los elementos de proyecto, documentos o detalles de archivo de configuración que se proporcionan a través del diseñador visual.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Design.ExpressionEditor.GetExpressionEditorSheet(System.String,System.IServiceProvider)" />
        <altmember cref="M:System.Web.UI.Design.ExpressionEditorSheet.#ctor(System.IServiceProvider)" />
      </Docs>
    </Member>
  </Members>
</Type>