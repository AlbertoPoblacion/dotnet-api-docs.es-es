<Type Name="PnrpPermission" FullName="System.Net.PeerToPeer.PnrpPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa800ff1deb4f0174a3bd9adba3f0d6d9db0f90d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460119" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PnrpPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit PnrpPermission extends System.Security.CodeAccessPermission implements class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.Net.PeerToPeer.PnrpPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PnrpPermission&#xA;Inherits CodeAccessPermission&#xA;Implements IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class PnrpPermission sealed : System::Security::CodeAccessPermission, System::Security::Permissions::IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.CodeAccessPermission</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Especifica los valores que se usan en los permisos del objeto <see cref="N:System.Net.PeerToPeer" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los permisos predeterminados permiten todas las locales y aplicaciones de la zona de Intranet para tener acceso a servicios PNRP. Si no se cambian los permisos predeterminados, todas las aplicaciones locales del vínculo y local del sitio tienen acceso a los servicios de punto a punto, pero las aplicaciones globales (internet) no tienen acceso.  
  
 Instancias de este tipo tienen dos Estados de permiso: no tienen ningún acceso a los recursos protegidos por el permiso o tienen acceso completo sin restricciones a esos recursos.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Copy" />
    <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)" />
    <altmember cref="T:System.Net.PeerToPeer.PnrpPermissionAttribute" />
    <altmember cref="N:System.Security.Permissions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PnrpPermission (System.Security.Permissions.PermissionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Security.Permissions.PermissionState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (state As PermissionState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PnrpPermission(System::Security::Permissions::PermissionState state);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Security.Permissions.PermissionState" />
      </Parameters>
      <Docs>
        <param name="state">Uno de los valores de la enumeración <see cref="T:System.Security.Permissions.PermissionState" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> con el estado del permiso inicial proporcionado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Instancias de este tipo tienen dos Estados de permiso: no tienen ningún acceso a los recursos protegidos por el permiso o tienen acceso completo sin restricciones a esos recursos.  
  
 Si `state` es sin restricciones, la instancia de PnrpPermission pasa todas las peticiones. Si `state` contiene cualquier otro valor, la instancia de PnrpPermission desaprueba todas las solicitudes.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Copy" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.IsUnrestricted" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.ToXml" />
        <altmember cref="T:System.Net.PeerToPeer.PnrpPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PnrpPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea y devuelve una copia idéntica del objeto <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> actual.</summary>
        <returns>Objeto con una interfaz IPermission cuya instancia contiene una copia de la instancia actual de <see cref="T:System.Net.PeerToPeer.PnrpPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una copia de un permiso representa el mismo acceso a los recursos que el permiso original.  
  
 Instancias de este tipo tienen dos Estados de permiso: no tienen ningún acceso a los recursos protegidos por el permiso o tienen acceso completo sin restricciones a esos recursos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   El parámetro no es un elemento <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> válido.  
  
-   No se admite el número de la versión del parámetro.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro es una referencia <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).</exception>
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.ToXml" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)" />
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public override void FromXml (System.Security.SecurityElement e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void FromXml(class System.Security.SecurityElement e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub FromXml (e As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void FromXml(System::Security::SecurityElement ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="e">Codificación XML que se va a usar para reconstruir el permiso.</param>
        <summary>Reconstruye un objeto de seguridad con un estado especificado a partir de codificación XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Representa el modelo de objetos XML para codificar objetos de seguridad. Esta clase no puede heredarse.  
  
 Esta clase está diseñada para ser una implementación ligera de un modelo de objetos XML simple para su uso en el sistema de seguridad y no para su uso como un modelo de objetos XML general.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   El parámetro no es un elemento <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> válido.  
  
-   No se admite el número de la versión del parámetro.</exception>
        <exception cref="T:System.ArgumentNullException">El parámetro es una referencia <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).</exception>
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Copy" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.ToXml" />
        <altmember cref="T:System.Security.SecurityElement" />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso para el método <see cref="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)" /> con el permiso actual. Debe ser del mismo tipo que el permiso actual.</param>
        <summary>Crea y devuelve un permiso que es la intersección entre el objeto <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> actual y el permiso especificado.</summary>
        <returns>Nuevo permiso que representa la intersección entre el objeto <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> actual y el permiso especificado. Este nuevo permiso es una referencia <see langword="null" /> (<see langword="Nothing" /> en Visual Basic) si la intersección está vacía.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La intersección de dos permisos es un permiso que describe el conjunto de operaciones descritas en ambos. Solo una petición que pase ambos permisos originales aprobará la intersección.  
  
 Las instrucciones siguientes tienen que ser `true` para todas las implementaciones del método Intersect. X e Y representan <xref:System.Security.IPermission> referencias de objeto que no sean un `null` referencia (Nothing en Visual Basic).  
  
-   X.Intersect (x) devuelve un valor igual a X.  
  
-   X.Intersect (y) devuelve el mismo valor que y.Intersect (x).  
  
-   X.Intersect (una `null` referencia (`Nothing` en Visual Basic)) devuelve un `null` referencia (`Nothing` en Visual Basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro de destino no es una referencia <see langword="null" /> (<see langword="Nothing" /> en Visual Basic) y no es una instancia de la misma clase que el permiso actual.</exception>
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)" />
        <altmember cref="T:System.Net.PeerToPeer.PnrpPermissionAttribute" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)" />
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public override bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso que se va a probar para la relación del subconjunto. Este permiso debe ser del mismo tipo que el permiso actual.</param>
        <summary>Determina si el objeto <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> actual es un subconjunto del permiso especificado.</summary>
        <returns>
          <see langword="True" /> si el objeto <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> actual es un subconjunto del permiso especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Actual <xref:System.Net.PeerToPeer.PnrpPermission> es un subconjunto del permiso especificado si el permiso actual especifica un conjunto de operaciones que se encuentra totalmente por el permiso especificado. Por ejemplo, un permiso que representa el acceso a "*C:\example.txt*"es un subconjunto de un permiso que representa el acceso a"*C:\\*". Si este método devuelve `true`, el permiso actual no representa ningún grado de acceso al recurso protegido que el permiso especificado.  
  
 Las instrucciones siguientes tienen que ser `true` para todas las implementaciones del método IsSubsetOf. X, Y y Z representan <xref:System.Security.IPermission> objetos que no forman un `null` referencia (`Nothing` en Visual Basic).  
  
-   X.IsSubsetOf (x) devuelve `true`.  
  
-   X.IsSubsetOf devuelve el mismo valor que y.IsSubsetOf (x) si y solo si X e Y representan el mismo conjunto de permisos.  
  
-   Si X.IsSubsetOf y Y.IsSubsetOf ambos devuelven `true`, x.IsSubsetOf (z) devuelve `true`.  
  
-  
  
 Si X representa un objeto IPermission vacío con un estado de permiso *ninguno* y Y representa un objeto IPermission que es un `null` referencia (`Nothing` en Visual Basic), X.IsSubsetOf devuelve `true`. Si Z es también un permiso vacío, la conjunto compuesta x.Union (z) de la operación. También devuelve IsSubsetOf `true` porque el <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> de dos permisos vacíos es un permiso vacío.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">El parámetro de destino no es una referencia <see langword="null" /> (<see langword="Nothing" /> en Visual Basic) y no es una instancia de la misma clase que el permiso actual.</exception>
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.ToXml" />
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PnrpPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un valor que especifica si el objeto <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> actual no tiene restricciones.</summary>
        <returns>
          <see langword="True" /> si el permiso actual es no restringido; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un permiso no restringido representa el acceso a todos los recursos protegidos por el permiso.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Copy" />
        <altmember cref="T:System.Net.PeerToPeer.PnrpPermissionAttribute" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.ToXml" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)" />
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public override System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PnrpPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::SecurityElement ^ ToXml();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una codificación XML de <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> y de su estado actual.</summary>
        <returns>Objeto <see cref="T:System.Security.SecurityElement" /> que contiene una codificación XML del permiso, incluida la información de estado.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Copy" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public override System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso para combinar con el permiso actual. Debe ser del mismo tipo que el permiso actual.</param>
        <summary>Crea un permiso que consiste en la unión del objeto <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> actual y del permiso especificado.</summary>
        <returns>Nuevo permiso que representa el método <see cref="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)" /> del objeto <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> actual y del permiso especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El resultado de una llamada a <xref:System.Net.PeerToPeer.PnrpPermission.Union%2A> es un permiso que representa todas las operaciones representadas por actual <xref:System.Net.PeerToPeer.PnrpPermission> y el permiso especificado. Cualquier solicitud que pase alguno de estos permisos pasa también su unión.  
  
 Las instrucciones siguientes tienen que ser `true` para todas las implementaciones del método Union. X e Y representan <xref:System.Security.IPermission> objetos que no forman un `null` referencia (`Nothing` en Visual Basic).  
  
-   X.Union (x) devuelve un objeto que tiene el mismo valor que X.  
  
-   X.Union (y) devuelve un objeto que tiene el mismo valor que el objeto devuelto por y.Union (x).  
  
-   X.Union (una `null` referencia (`Nothing` en Visual Basic)) devuelve un objeto que tiene el mismo valor que X.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          El parámetro <paramref name="target" /> no es válido.</exception>
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)" />
        <altmember cref="M:System.Net.PeerToPeer.PnrpPermission.IsUnrestricted" />
      </Docs>
    </Member>
  </Members>
</Type>