<Type Name="IHttpHandlerFactory" FullName="System.Web.IHttpHandlerFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fd8377736f7467a8060fa4bd3cdba0f8509de4a1" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37585423" /></Metadata><TypeSignature Language="C#" Value="public interface IHttpHandlerFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandlerFactory" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandlerFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandlerFactory" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandlerFactory" />
  <TypeSignature Language="F#" Value="type IHttpHandlerFactory = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define el contrato que los generadores de clases deben implementar para crear nuevos objetos <see cref="T:System.Web.IHttpHandler" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una clase que implementa el <xref:System.Web.IHttpHandlerFactory> interfaz no tiene ningún comportamiento, excepto que fabrica dinámicamente instancias nuevas de las clases que implementan la <xref:System.Web.IHttpHandler> interfaz.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public System.Web.IHttpHandler GetHandler (System.Web.HttpContext context, string requestType, string url, string pathTranslated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.IHttpHandler GetHandler(class System.Web.HttpContext context, string requestType, string url, string pathTranslated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHandler (context As HttpContext, requestType As String, url As String, pathTranslated As String) As IHttpHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::IHttpHandler ^ GetHandler(System::Web::HttpContext ^ context, System::String ^ requestType, System::String ^ url, System::String ^ pathTranslated);" />
      <MemberSignature Language="F#" Value="abstract member GetHandler : System.Web.HttpContext * string * string * string -&gt; System.Web.IHttpHandler" Usage="iHttpHandlerFactory.GetHandler (context, requestType, url, pathTranslated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.IHttpHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="requestType" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="pathTranslated" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">Instancia de la clase <see cref="T:System.Web.HttpContext" /> que proporciona referencias a objetos de servidor intrínsecos (por ejemplo, <see langword="Request" />, <see langword="Response" />, <see langword="Session" /> y <see langword="Server" />) utilizados para atender las solicitudes HTTP.</param>
        <param name="requestType">Método de transferencia de datos HTTP (<see langword="GET" /> o <see langword="POST" />) que utiliza el cliente.</param>
        <param name="url"><see cref="P:System.Web.HttpRequest.RawUrl" /> del recurso solicitado.</param>
        <param name="pathTranslated"><see cref="P:System.Web.HttpRequest.PhysicalApplicationPath" /> del recurso solicitado.</param>
        <summary>Devuelve una instancia de una clase que implementa la interfaz <see cref="T:System.Web.IHttpHandler" />.</summary>
        <returns>Nuevo objeto <see cref="T:System.Web.IHttpHandler" /> que procesa la solicitud.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear objetos de controlador personalizado en respuesta a una solicitud de cliente. El ejemplo tiene dos partes:  
  
-   Una clase de generador del controlador.  
  
-   Un fragmento del archivo Web.config.  
  
 La primera parte del ejemplo muestra cómo crear objetos de controlador personalizado en respuesta a una solicitud de cliente de una página denominada abc.aspx o xyz.aspx. La clase de generador del controlador denominada `hwf` crea el objeto de controlador adecuado según la página solicitada.  
  
 [!code-csharp[Classic IHttpHandlerFactory.GetHandler Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandlerFactory.GetHandler Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandlerFactory.GetHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandlerFactory.GetHandler Example/VB/source.vb#1)]  
  
 La segunda parte del ejemplo muestra un fragmento del archivo Web.config. Para usar el generador de controladores anteriores, agregue las siguientes líneas al archivo Web.config.  
  
```  
<configuration>   
  <system.web>   
    <httpHandlers>   
      <add verb="*" path="abc.aspx" type="test.MyFactory,HandlerFactoryTest" />   
      <add verb="*" path="xyz.aspx" type="test.MyFactory,HandlerFactoryTest" />   
    </httpHandlers>   
  </system.web>  
</configuration>   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandler">
      <MemberSignature Language="C#" Value="public void ReleaseHandler (System.Web.IHttpHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandler(class System.Web.IHttpHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseHandler (handler As IHttpHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseHandler(System::Web::IHttpHandler ^ handler);" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandler : System.Web.IHttpHandler -&gt; unit" Usage="iHttpHandlerFactory.ReleaseHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" />
      </Parameters>
      <Docs>
        <param name="handler">Objeto <see cref="T:System.Web.IHttpHandler" /> que se va a volver a usar.</param>
        <summary>Permite a un generador volver a usar una instancia de controlador existente.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>