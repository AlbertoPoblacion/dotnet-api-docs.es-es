<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c0af3086a39a9ec32e66cb3393068e7b0233d4ac" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37528495" /></Metadata><TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <TypeSignature Language="F#" Value="type IHttpHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define el contrato que ASP.NET implementa para procesar de forma sincrónica las solicitudes Web HTTP mediante controladores HTTP personalizados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede escribir controladores HTTP personalizados para procesar tipos predefinidos específicos de solicitudes HTTP en cualquier lenguaje compatible con Common Language Specification (CLS). El código ejecutable definido en el `HttpHandler` clases, en lugar de las páginas ASP o ASP.NET Web convencionales, responde a estas solicitudes específicas. Los controladores HTTP ofrecen un medio de la interacción con la solicitud de bajo nivel y servicios de respuesta del servidor Web de IIS y proporcionan funciones muy similares a las extensiones ISAPI, pero con un modelo de programación más sencillo.  
  
 Si el controlador tendrá acceso a los valores de estado de sesión, se debe implementar la <xref:System.Web.SessionState.IRequiresSessionState> interfaz (una interfaz de marcador sin métodos).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si otra solicitud puede utilizar la instancia de <see cref="T:System.Web.IHttpHandler" />.</summary>
        <value><see langword="true" /> si se puede volver a utilizar la instancia de <see cref="T:System.Web.IHttpHandler" />; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer explícitamente el <xref:System.Web.IHttpHandler.IsReusable%2A> propiedad `true` o `false` mediante el código que invalida el <xref:System.Web.IHttpHandler.IsReusable%2A> descriptor de acceso (captador).  
  
   
  
## Examples  
 El ejemplo de código siguiente escribe cuatro líneas de texto en el flujo de salida HTTP en respuesta a una solicitud de cliente de una página denominada handler.aspx. Todas las solicitudes de handler.aspx son atendidas por el `MyHttpHandler` clase en el espacio de nombres `HandlerExample` incluido en el ensamblado HandlerTest.dll.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="iHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Objeto <see cref="T:System.Web.HttpContext" /> que proporciona referencias a los objetos de servidor intrínsecos (por ejemplo, <see langword="Request" />, <see langword="Response" />, <see langword="Session" /> y <see langword="Server" />) utilizados para atender las solicitudes HTTP.</param>
        <summary>Permite el procesamiento de solicitudes Web HTTP mediante un <see langword="HttpHandler" /> personalizado que implementa la interfaz <see cref="T:System.Web.IHttpHandler" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Coloque el personalizado `HttpHandler` de código en el <xref:System.Web.IHttpHandler.ProcessRequest%2A> método virtual, tal como se muestra en el ejemplo siguiente.  
  
   
  
## Examples  
 El ejemplo de código siguiente escribe cuatro líneas de texto en el flujo de salida HTTP en respuesta a una solicitud de cliente de una página denominada handler.aspx. Todas las solicitudes de handler.aspx son atendidas por el `MyHttpHandler` clase en el espacio de nombres `HandlerExample` incluido en el ensamblado HandlerTest.dll.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>