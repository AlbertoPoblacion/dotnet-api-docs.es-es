<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="98b2f8e81292b161daf8dee4c4562f466a977207" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30607369" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHttpHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f575a-101">Define el contrato que ASP.NET implementa para procesar de forma sincrónica las solicitudes Web HTTP mediante controladores HTTP personalizados.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f575a-101">Defines the contract that ASP.NET implements to synchronously process HTTP Web requests using custom HTTP handlers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f575a-102">Puede escribir controladores HTTP personalizados para procesar tipos predefinidos y específicos de solicitudes HTTP en cualquier lenguaje compatible con Common Language Specification (CLS).</span><span class="sxs-lookup"><span data-stu-id="f575a-102">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any Common Language Specification (CLS) compliant language.</span></span> <span data-ttu-id="f575a-103">El código ejecutable definido en el `HttpHandler` clases, en lugar de las páginas Web ASP o ASP.NET convencionales, responde a estas solicitudes específicas.</span><span class="sxs-lookup"><span data-stu-id="f575a-103">Executable code defined in the `HttpHandler` classes, rather than conventional ASP or ASP.NET Web pages, responds to these specific requests.</span></span> <span data-ttu-id="f575a-104">Controladores HTTP ofrecen un medio de la interacción con la solicitud de bajo nivel y servicios de respuesta del servidor Web de IIS y proporcionan funciones muy similares a las extensiones ISAPI pero con un modelo de programación más simple.</span><span class="sxs-lookup"><span data-stu-id="f575a-104">HTTP handlers give you a means of interacting with the low-level request and response services of the IIS Web server and provide functionality much like ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="f575a-105">Si el controlador tendrá acceso a los valores de estado de sesión, debe implementar la <xref:System.Web.SessionState.IRequiresSessionState> interfaz (interfaz de marcador que no tiene ningún método).</span><span class="sxs-lookup"><span data-stu-id="f575a-105">If your handler will access session state values, it must implement the <xref:System.Web.SessionState.IRequiresSessionState> interface (a marker interface with no methods).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReusable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="f575a-106">Obtiene un valor que indica si otra solicitud puede utilizar la instancia de <see cref="T:System.Web.IHttpHandler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f575a-106">Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="f575a-107">
            <see langword="true" /> si se puede volver a utilizar la instancia de <see cref="T:System.Web.IHttpHandler" />; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f575a-107">
              <see langword="true" /> if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f575a-108">Se establece explícitamente el <xref:System.Web.IHttpHandler.IsReusable%2A> propiedad `true` o `false` mediante el código que invalida el <xref:System.Web.IHttpHandler.IsReusable%2A> descriptor de acceso de propiedad (captador).</span><span class="sxs-lookup"><span data-stu-id="f575a-108">You explicitly set the <xref:System.Web.IHttpHandler.IsReusable%2A> property to `true` or `false` by code you provide that overrides the <xref:System.Web.IHttpHandler.IsReusable%2A> property accessor (getter).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f575a-109">En el ejemplo de código siguiente se escribe cuatro líneas de texto al flujo de salida HTTP en respuesta a una solicitud de cliente de una página denominada handler.aspx.</span><span class="sxs-lookup"><span data-stu-id="f575a-109">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="f575a-110">Todas las solicitudes de handler.aspx son atendidas por el `MyHttpHandler` clase en el espacio de nombres `HandlerExample` incluido en el ensamblado HandlerTest.dll.</span><span class="sxs-lookup"><span data-stu-id="f575a-110">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="f575a-111">Objeto <see cref="T:System.Web.HttpContext" /> que proporciona referencias a los objetos de servidor intrínsecos (por ejemplo, <see langword="Request" />, <see langword="Response" />, <see langword="Session" /> y <see langword="Server" />) utilizados para atender las solicitudes HTTP.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f575a-111">An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects (for example, <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, and <see langword="Server" />) used to service HTTP requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f575a-112">Permite el procesamiento de solicitudes Web HTTP mediante un <see langword="HttpHandler" /> personalizado que implementa la interfaz <see cref="T:System.Web.IHttpHandler" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f575a-112">Enables processing of HTTP Web requests by a custom <see langword="HttpHandler" /> that implements the <see cref="T:System.Web.IHttpHandler" /> interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f575a-113">Coloque su personalizado `HttpHandler` de código en el <xref:System.Web.IHttpHandler.ProcessRequest%2A> método virtual, tal como se muestra en el ejemplo siguiente.</span><span class="sxs-lookup"><span data-stu-id="f575a-113">Place your custom `HttpHandler` code in the <xref:System.Web.IHttpHandler.ProcessRequest%2A> virtual method, as shown in the following example.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f575a-114">En el ejemplo de código siguiente se escribe cuatro líneas de texto al flujo de salida HTTP en respuesta a una solicitud de cliente de una página denominada handler.aspx.</span><span class="sxs-lookup"><span data-stu-id="f575a-114">The following code example writes four lines of text to the HTTP output stream in response to a client request for a page named handler.aspx.</span></span> <span data-ttu-id="f575a-115">Todas las solicitudes de handler.aspx son atendidas por el `MyHttpHandler` clase en el espacio de nombres `HandlerExample` incluido en el ensamblado HandlerTest.dll.</span><span class="sxs-lookup"><span data-stu-id="f575a-115">All requests for handler.aspx are serviced by the `MyHttpHandler` class in the namespace `HandlerExample` contained in the assembly HandlerTest.dll.</span></span>  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>