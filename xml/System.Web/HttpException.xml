<Type Name="HttpException" FullName="System.Web.HttpException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1864e8fe52f0eb87b7c23fbfe505d15cf9681ede" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30610029" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HttpException : System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit HttpException extends System.Runtime.InteropServices.ExternalException" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpException" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpException&#xA;Inherits ExternalException" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpException : System::Runtime::InteropServices::ExternalException" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.InteropServices.ExternalException</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Describe una excepción que apareció durante el procesamiento de solicitudes HTTP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.HttpException> clase es una clase de excepción específica de HTTP que permite a ASP.NET generar información de excepción. Para obtener más información acerca de cómo iniciar y controlar las excepciones, vea [excepciones](http://msdn.microsoft.com/library/f99a1d29-a2a8-47af-9707-9909f9010735).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar la <xref:System.Web.HttpException> clase para generar excepciones personalizadas. El `Button_Click` método determina qué botón se hizo clic y, a continuación, llama a la `CheckNumber` o `CheckBoolean` método. Si el valor escrito por el usuario en el cuadro de texto no se corresponde con el tipo esperado, un <xref:System.Web.HttpException> excepción se crea y se produce un mensaje personalizado en función del tipo de error.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException/cs/httpexceptioncs.aspx#1)]
 [!code-aspx-vb[HttpException#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException/vb/httpexceptionvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" /> y crea un objeto <see cref="T:System.Web.HttpException" /> vacío.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al controlar excepciones, puede ser útil capturar una serie de excepciones relacionadas con la excepción externa que se producen en respuesta a una excepción interna.  
  
 Una referencia a la excepción interna que produjo la excepción externa está disponible en la <xref:System.Exception.InnerException%2A> propiedades de la excepción externa. Este mecanismo conserva la información de error que se llevan a las excepciones anteriores, incluidas las excepciones originales, al tiempo que permite crear excepciones externas más significativas. Para obtener más información, vea <xref:System.Exception.InnerException%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra la <xref:System.Web.HttpException.%23ctor%2A> constructor de la <xref:System.Web.HttpException> clase. El `CheckNumber` método acepta un valor escrito por el usuario a través de un cuadro de texto y comprueba si es un entero. Si el valor no es un entero, se produce una excepción y, a continuación, un nuevo <xref:System.Web.HttpException> objeto se crea y se produce. Detecta la excepción en el `Button_Click` controlador de eventos y el mensaje de error se muestra en el explorador.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException_Constructor1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor1/CS/httpexception_constructor1.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor1/VB/httpexception_constructor1.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que se muestra al cliente cuando se produce la excepción.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" /> utilizando el mensaje de error especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra la <xref:System.Web.HttpException.%23ctor%2A> constructor de la <xref:System.Web.HttpException> clase. Un <xref:System.Web.HttpException> se produce si un valor escrito por el usuario es 0.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[Classic HttpException.HttpException1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpException.HttpException1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpException.HttpException1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpException.HttpException1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="httpCode">Código de estado de respuesta HTTP enviado al cliente que corresponde a este error.</param>
        <param name="message">Mensaje de error que se muestra al cliente cuando se produce la excepción.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" /> utilizando un código de estado de respuesta HTTP y un mensaje de error.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; HttpException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene los datos serializados del objeto que hacen referencia a la excepción que se va a producir.</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene la información contextual sobre el origen o el destino.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" /> con datos serializados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.HttpException.%23ctor%2A> constructor se llama durante la deserialización para reconstituir el objeto de excepción transmitido en una secuencia. Para obtener más información, consulte [serialización XML y SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que se muestra al cliente cuando se produce la excepción.</param>
        <param name="innerException">Propiedad <see cref="P:System.Exception.InnerException" />, si hay alguna, que ha producido la excepción actual.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" /> utilizando un mensaje de error y la propiedad <see cref="P:System.Exception.InnerException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al controlar excepciones, puede ser útil capturar una serie de excepciones relacionadas con la excepción externa que se producen en respuesta a una excepción interna.  
  
 Una referencia a la excepción interna que produjo la excepción externa está disponible en la <xref:System.Exception.InnerException%2A> propiedades de la excepción externa. Este mecanismo conserva la información de error que se llevan a las excepciones anteriores, incluidas las excepciones originales, al tiempo que permite crear excepciones externas más significativas. Para obtener más información, vea <xref:System.Exception.InnerException%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra la <xref:System.Web.HttpException.%23ctor%2A> constructor de la <xref:System.Web.HttpException> clase. El `CheckNumber` método acepta un valor escrito por el usuario a través de un cuadro de texto y comprueba si es un entero. Si el valor no es un entero, se produce una excepción y, a continuación, en el bloque catch, un nuevo <xref:System.Web.HttpException> objeto se crea y se produce. Detecta la excepción en el `Button_Click` controlador de eventos y el mensaje de error se muestra en el explorador.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException_Constructor2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor2/CS/httpexception_constructor2.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor2/VB/httpexception_constructor2.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (string message, int hr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, int32 hr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, hr As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(System::String ^ message, int hr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="hr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que se muestra al cliente cuando se produce la excepción.</param>
        <param name="hr">Código de excepción que define el error.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" /> utilizando un mensaje de error y un código de excepción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra la <xref:System.Web.HttpException.%23ctor%2A> constructor de la <xref:System.Web.HttpException> clase. Un <xref:System.Web.HttpException> excepción se produce si un valor escrito por el usuario es 0.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-csharp[Classic HttpException.HttpException2 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpException.HttpException2 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpException.HttpException2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpException.HttpException2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="httpCode">Código de estado de respuesta HTTP que se muestra en el cliente.</param>
        <param name="message">Mensaje de error que se muestra al cliente cuando se produce la excepción.</param>
        <param name="innerException">Propiedad <see cref="P:System.Exception.InnerException" />, si hay alguna, que ha producido la excepción actual.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" /> utilizando un código de estado de respuesta HTTP, un mensaje de error y la propiedad <see cref="P:System.Exception.InnerException" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al controlar excepciones, puede ser útil capturar una serie de excepciones relacionadas con la excepción externa que se producen en respuesta a una excepción interna.  
  
 Una referencia a la excepción interna que produjo la excepción externa está disponible en la <xref:System.Exception.InnerException%2A> propiedades de la excepción externa. Este mecanismo conserva la información de error que se llevan a las excepciones anteriores, incluidas las excepciones originales, al tiempo que permite crear excepciones externas más significativas. Para obtener más información, vea <xref:System.Exception.InnerException%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra la <xref:System.Web.HttpException.%23ctor%2A> constructor de la <xref:System.Web.HttpException> clase. El `CheckNumber` método acepta un valor escrito por el usuario y comprueba si es un entero. Si el valor no es un entero, se produce una excepción y, a continuación, un nuevo <xref:System.Web.HttpException> se crea el objeto que contiene el código de estado de respuesta HTTP, mensaje de excepción y cualquier excepción interna. Detecta la excepción en el `Button_Click` se muestran el controlador de eventos y el mensaje de error, el código de error y la excepción interna.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException_Constructor3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor3/CS/httpexception_constructor3.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor3/VB/httpexception_constructor3.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpException (int httpCode, string message, int hr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 httpCode, string message, int32 hr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.#ctor(System.Int32,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (httpCode As Integer, message As String, hr As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpException(int httpCode, System::String ^ message, int hr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="httpCode" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="hr" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="httpCode">Código de estado de respuesta HTTP que se muestra en el cliente.</param>
        <param name="message">Mensaje de error que se muestra al cliente cuando se produce la excepción.</param>
        <param name="hr">Código de excepción que define el error.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.HttpException" /> utilizando un código de estado de respuesta HTTP, un mensaje de error y un código de excepción.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra la <xref:System.Web.HttpException.%23ctor%2A> constructor de la <xref:System.Web.HttpException> clase. La información de nombre y el correo electrónico de usuario son especificados por el usuario en los cuadros de texto proporcionado. Si cualquiera de los cuadros de texto se deja en blanco, un <xref:System.Web.HttpException> objeto se crea y se produce. El código de error de la <xref:System.Web.HttpException> se obtiene mediante la <xref:System.Web.HttpException.GetHttpCode%2A> método y se muestran en la página Web.  
  
> [!IMPORTANT]
>  Este ejemplo tiene un cuadro de texto que acepta datos proporcionados por el usuario, lo que puede suponer una amenaza para la seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpException_Constructor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpException_Constructor/CS/httpexception_constructor5.cs.aspx#1)]
 [!code-aspx-vb[HttpException_Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpException_Constructor/VB/httpexception_constructor5.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="CreateFromLastError">
      <MemberSignature Language="C#" Value="public static System.Web.HttpException CreateFromLastError (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpException CreateFromLastError(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.CreateFromLastError(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLastError (message As String) As HttpException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpException ^ CreateFromLastError(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpException</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Mensaje de error que se muestra al cliente cuando se produce la excepción.</param>
        <summary>Crea una nueva excepción <see cref="T:System.Web.HttpException" /> basada en el código de error devuelto por el método <see langword="GetLastError()" /> de la API Win32.</summary>
        <returns>
          <see cref="T:System.Web.HttpException" /> basada en el código de error que se devuelve a partir de una llamada al método <see langword="GetLastError()" /> de la API Win32.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetHtmlErrorMessage">
      <MemberSignature Language="C#" Value="public string GetHtmlErrorMessage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetHtmlErrorMessage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetHtmlErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHtmlErrorMessage () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetHtmlErrorMessage();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el mensaje de error HTML que se va a devolver al cliente.</summary>
        <returns>Mensaje de error HTML.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetHttpCode">
      <MemberSignature Language="C#" Value="public int GetHttpCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHttpCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetHttpCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHttpCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHttpCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el código de estado de respuesta HTTP que se va a devolver al cliente.</summary>
        <returns>Es el código HTTP distinto de cero que representa la excepción o el código <see cref="P:System.Exception.InnerException" />; de lo contrario, es el código de estado de respuesta HTTP 500.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si hay un código HTTP distinto de cero, se devuelve. En caso contrario, el <xref:System.Exception.InnerException%2A> se devuelve el código. Si no un <xref:System.Exception.InnerException%2A> hay código ni un código HTTP distinto de cero, se devuelve el código de estado de respuesta HTTP 500. Para obtener más información sobre códigos de estado de respuesta HTTP, vea las definiciones de código de estado del protocolo de transferencia de hipertexto - HTTP/1.1 en el mundo [sitio Web de Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Exception.InnerException" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que contiene los datos serializados del objeto que hacen referencia a la excepción que se va a producir.</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contiene la información contextual sobre el origen o el destino.</param>
        <summary>Obtiene información sobre la excepción y la agrega al objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.HttpException.GetObjectData%2A> método agrega información sobre la excepción a la <xref:System.Runtime.Serialization.SerializationInfo> objeto destinado para la serialización. Durante la deserialización, la excepción se reconstituye a partir del <xref:System.Runtime.Serialization.SerializationInfo> que se transmiten a través de la secuencia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="WebEventCode">
      <MemberSignature Language="C#" Value="public int WebEventCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WebEventCode" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpException.WebEventCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WebEventCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WebEventCode { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los códigos de evento asociados a la excepción HTTP.</summary>
        <value>Entero que representa un código de evento web.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>