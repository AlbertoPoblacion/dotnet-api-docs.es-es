<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ee90128d71b3a98d824adb5c39397403d059677" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51308056" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa las propiedades y los métodos de un controlador HTTP predeterminado.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Web.DefaultHttpHandler> objeto intercepta las solicitudes entrantes en la canalización HTTP cuando la interceptación de la solicitud se ha configurado a través de Internet Information Services (IIS) 6.0 y no hay enlaces explícitos se aplican a la extensión solicitada.  
  
 Interceptación de la solicitud se puede configurar a través de la característica de asignación de aplicación de comodines introducida en IIS 6.0. Para obtener más información, busque el [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118) para obtener información sobre el uso de mapas de aplicación de comodines para volver a asignar una dirección URL.  
  
 El <xref:System.Web.DefaultHttpHandler> la clase implementa la <xref:System.Web.IHttpAsyncHandler> interfaz para proporcionar procesamiento de solicitudes asincrónicas. Para obtener información general sobre los controladores HTTP, vea [Introducción a los módulos y controladores HTTP](http://msdn.microsoft.com/library/f540bdeb-d22e-4e1d-ba8a-fe6c9926283b). Además, para obtener más información, vea lo siguiente:  
  
-   Acerca de cómo crear controladores HTTP asincrónicos, vea [Tutorial: crear un controlador HTTP asincrónico](http://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9).  
  
-   Información sobre cómo registrar controladores HTTP, consulte [Cómo: registrar controladores HTTP](http://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60).  
  
 Pueden derivar clases desde el <xref:System.Web.DefaultHttpHandler> clase para proporcionar un control personalizado de solicitudes. Un controlador HTTP asincrónico que se deriva el <xref:System.Web.DefaultHttpHandler> podría invalidar la <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> método para cambiar cómo se procesan las solicitudes.  
  
 Un <xref:System.Web.DefaultHttpHandler> no utiliza los errores de ASP.NET. El contenido existente utiliza errores de IIS o un mecanismo de error personalizado decoro ISAPI funcionará sin cambios.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo implementar un controlador HTTP personalizado derivando de la <xref:System.Web.DefaultHttpHandler> clase.  
  
 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="http://msdn.microsoft.com/library/d5633f9a-03fb-4ccc-a799-dc67d656fa60">Cómo: registrar controladores HTTP</related>
    <related type="Article" href="http://msdn.microsoft.com/library/1b5c4a27-599b-44d0-8a06-72edc6765aa9">Cómo: crear un controlador HTTP asincrónico</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Objeto que proporciona referencias a los objetos de servidor intrínsecos que se usan para atender las solicitudes HTTP.</param>
        <param name="callback">Método al que se va a llamar cuando la llamada de método asincrónico se haya completado. Si <c>callback</c> es <see langword="null" />, no se llama al delegado.</param>
        <param name="state">Cualquier dato de estado necesario para procesar la solicitud.</param>
        <summary>Inicia una llamada asincrónica para el controlador HTTP.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> que contiene información sobre el estado del proceso.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al crear un controlador HTTP para uso asincrónico, el controlador debe implementar la asincrónica <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> y <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> métodos que se llaman de forma asincrónica por ASP.NET.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">No se han cumplido las condiciones previas para procesar una solicitud y, o bien el archivo solicitado tiene el sufijo .asp, o bien la solicitud se ha enviado mediante POST.</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el contexto asociado con el objeto <see cref="T:System.Web.DefaultHttpHandler" /> actual.</summary>
        <value>Un objeto <see cref="T:System.Web.HttpContext" /> que contiene el contexto actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.DefaultHttpHandler.Context%2A> propiedad proporciona acceso a la actual <xref:System.Web.HttpContext> objeto para las clases derivadas. Un <xref:System.Web.HttpContext> objeto proporciona acceso a la función intrínseca <xref:System.Web.HttpApplication.Request%2A>, <xref:System.Web.HttpApplication.Response%2A>, y <xref:System.Web.HttpApplication.Server%2A> propiedades de la solicitud. Para obtener más información sobre el acceso a información contextual, consulte <xref:System.Web.HttpContext>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Objeto que contiene información sobre el estado del proceso.</param>
        <summary>Proporciona un método de fin para un proceso asincrónico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> método para producir las excepciones que se detectan durante el proceso asincrónico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de encabezados y valores de solicitud para transferirlos junto con la solicitud.</summary>
        <value>
          <see cref="T:System.Collections.Specialized.NameValueCollection" /> que contiene encabezados y valores de solicitud.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> propiedad devuelve una colección vacía a menos que se rellena en una clase que se deriva el <xref:System.Web.DefaultHttpHandler> clase. Los encabezados que se agregan se anexan a la colección de encabezados de la solicitud antes de pasar la solicitud vuelve a Internet Information Services (IIS).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor booleano que indica que otra solicitud puede utilizar la instancia actual de la clase <see cref="T:System.Web.DefaultHttpHandler" />.</summary>
        <value>Es <see langword="true" /> si <see cref="T:System.Web.DefaultHttpHandler" /> se puede reutilizar; en caso contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para establecer explícitamente el <xref:System.Web.DefaultHttpHandler.IsReusable%2A> propiedad `true` o `false`, invalidar el <xref:System.Web.DefaultHttpHandler.IsReusable%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se llama cuando las condiciones previas evitan que el objeto <see cref="T:System.Web.DefaultHttpHandler" /> procese una solicitud.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las condiciones previas especificadas por el cliente en los campos de encabezado de solicitud y se evalúan en el servidor Web. Por ejemplo, mediante el uso de las condiciones previas, los clientes pueden impedir que un método solicitado (por ejemplo, GET) que se aplica a un recurso distinto del que se pretende. Para obtener más información, consulte la sección 14, "Definiciones de campo de encabezado", en el [Hypertext Transfer Protocol--HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) especificación en el sitio Web de World Wide Web Consortium (W3C).  
  
 El <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> se llama al método cuando las condiciones previas impide la <xref:System.Web.DefaultHttpHandler> objeto procese una solicitud. Una clase derivada puede invalidar el <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> método para producir una excepción cuando las condiciones previas producirá un error. El <xref:System.Web.DefaultHttpHandler> no produce una excepción el <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> método.  
  
 Cualquiera de las siguientes hará que las condiciones previas producir un error:  
  
-   Llamada a <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Llamada a <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Llamada a <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Cambiar la directiva de caché para la respuesta.  
  
-   Agregar un <xref:System.IO.Stream> objeto como un filtro para el <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reemplaza la dirección URL de destino correspondiente a la solicitud actual.</summary>
        <returns>Es la dirección URL reemplazada que se utilizará en la solicitud; de lo contrario, es <see langword="null" /> si no se proporciona una dirección URL reemplazada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> devuelve del método `null` a menos que se invalide en una clase que se deriva el <xref:System.Web.DefaultHttpHandler> clase.  
  
 El <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> se llama al método solo si se está ejecutando en modo de aislamiento de proceso de trabajo ASP.NET en IIS 6.0, y si la respuesta no se puede modificar antes de la <xref:System.Web.DefaultHttpHandler> se llamó al objeto. La respuesta se modifica mediante cualquiera de las siguientes acciones:  
  
-   Llamada a <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType>.  
  
-   Llamada a <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType>.  
  
-   Llamada a <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType>.  
  
-   Cambiar la directiva de caché para la respuesta.  
  
-   Agregar un <xref:System.IO.Stream> objeto como un filtro para el <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Objeto que proporciona referencias a los objetos de servidor intrínsecos que se usan para atender las solicitudes HTTP.</param>
        <summary>Permite que un objeto <see cref="T:System.Web.DefaultHttpHandler" /> procese solicitudes Web HTTP.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> método no se debe llamar sincrónicamente. Las clases que se derivan de la <xref:System.Web.DefaultHttpHandler> clase puede invalidar el <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> para proporcionar procesamiento de solicitudes personalizado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se llama a <see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> de manera sincrónica.</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>