<Type Name="IEnumeratorContract&lt;T&gt;" FullName="System.AddIn.Contract.IEnumeratorContract&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="03a75f2a7180daea04a3cd94c66ec02688f2b013" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37705714" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEnumeratorContract&lt;T&gt; : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnumeratorContract`1&lt;T&gt; implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Contract.IEnumeratorContract`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEnumeratorContract(Of T)&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEnumeratorContract : IDisposable" />
  <TypeSignature Language="F#" Value="type IEnumeratorContract&lt;'T&gt; = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn.Contract</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Tipo de los objetos que están enumerándose.</typeparam>
    <summary>Enumera los elementos de una colección <see cref="T:System.AddIn.Contract.IListContract`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los enumeradores pueden utilizarse para leer los datos de la colección, pero no se puede usar para modificar la colección.  
  
 En principio, el enumerador se coloca antes del primer elemento de la colección. En esta posición, el valor devuelto de <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> es indefinido. Por lo tanto, debe llamar a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> para hacer avanzar el enumerador hasta el primer elemento de la colección antes de llamar a <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>.  
  
 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> devuelve el mismo objeto hasta que se llama a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A>. <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> establece el valor devuelto de <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> hasta el siguiente elemento.  
  
 Si <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> devuelve `false`. Cuando el enumerador está en esta posición, las llamadas subsiguientes a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> también devolver `false`. Si la última llamada a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> devuelve `false`, el valor devuelto de <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> es indefinido.  
  
 Un enumerador es válido mientras la colección no cambie. Si se hacen cambios en la colección (como agregar, modificar o eliminar elementos), el enumerador queda invalidado permanentemente y su comportamiento es indefinido.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public T GetCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T GetCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.GetCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrent () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T GetCurrent();" />
      <MemberSignature Language="F#" Value="abstract member GetCurrent : unit -&gt; 'T" Usage="iEnumeratorContract.GetCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el objeto de la colección situado en la posición actual del enumerador.</summary>
        <returns>
          <see cref="T:System.AddIn.Contract.IContract" /> de la colección situado en la posición actual del enumerador.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> no está definida en cualquiera de las condiciones siguientes:  
  
-   El enumerador se coloca antes del primer elemento de la colección, inmediatamente después de crea el enumerador o después de <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> se llama. <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> debe llamarse para hacer avanzar el enumerador hasta el primer elemento de la colección antes de llamar a <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A>.  
  
-   La última llamada a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> devuelve `false`, lo que indica el final de la colección.  
  
-   El enumerador queda invalidado debido a los cambios realizados en la colección, como agregar, modificar o eliminar elementos.  
  
 <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> devuelve el mismo objeto hasta que se llama a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A>. <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> establece el valor devuelto de <xref:System.AddIn.Contract.IEnumeratorContract%601.GetCurrent%2A> hasta el siguiente elemento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool" Usage="iEnumeratorContract.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Desplaza el enumerador al siguiente elemento de la colección.</summary>
        <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de crea un enumerador o después de la <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> se llama al método, un enumerador se coloca antes del primer elemento de la colección. La primera llamada a la <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> método mueve el enumerador al primer elemento de la colección.  
  
 Si <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> pasa el final de la colección, el enumerador se coloca después del último elemento de la colección y <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> devuelve `false`. Cuando el enumerador está en esta posición, las llamadas subsiguientes a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> también devolver `false` hasta <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> se llama.  
  
 Un enumerador es válido mientras la colección no cambie. Si se realizan cambios en la colección, como agregar, modificar, o eliminar elementos, el enumerador queda invalida invalidado y la siguiente llamada a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> o <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> produce una <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La colección se modificó después de que el enumerador se creara.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Contract.IEnumeratorContract`1.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit" Usage="iEnumeratorContract.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn.Contract</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la colección).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un enumerador es válido mientras la colección no cambie. Si se realizan cambios en la colección, como agregar, modificar, o eliminar elementos, el enumerador queda invalida invalidado y la siguiente llamada a <xref:System.AddIn.Contract.IEnumeratorContract%601.MoveNext%2A> o <xref:System.AddIn.Contract.IEnumeratorContract%601.Reset%2A> produce una <xref:System.InvalidOperationException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La colección se modificó después de que el enumerador se creara.</exception>
      </Docs>
    </Member>
  </Members>
</Type>