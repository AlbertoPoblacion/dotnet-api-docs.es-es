<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="02ffa3d80165d4caa3178d3b714320a67262d734" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52737001" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa el elemento de código que el motor de scripts va a compilar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
El elemento de código especificado puede contener clases, módulos u otro texto de origen.

No se requieren permisos para llamar a los miembros de la interfaz IVsaCodeItem.

El motor de scripts implementa esta interfaz para agregar elementos de código.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Nombre de programación del origen de eventos.</param>
        <param name="eventSourceType">Nombre de tipo del origen de eventos.</param>
        <summary>Agrega un origen de eventos al elemento de código. El elemento de código usa el origen de eventos para enlazar un evento al origen de eventos indicado; para ello, llama al método IVsaSite.GetEventSourceInstance implementado por el host.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
El motor de scripts utiliza la información proporcionada por el método AddEventSource para enlazar eventos al origen de eventos con nombre. Obtiene los orígenes de eventos llamando al método IVsaSite.GetEventSourceInstance, implementado por el host. El método AddEventSource crea una clase que controla los eventos provocados por un objeto proporcionado por el host.

> [!NOTE]
> El motor de scripts de JScript .NET no admite este método. En casos donde el motor de JScript .NET debe enlazar un evento, debe hacerlo utilizando un elemento global. En lugar de orígenes de eventos, el motor de JScript .NET utiliza tipos de elemento AppGlobal. Para obtener más información, vea VsaItemType.


Dentro del elemento de código, puede acceder el objeto de origen de eventos por nombre y, una vez que se tiene acceso a, puede escribir controladores de eventos para el objeto. El tipo de origen del evento se pasa como una cadena en lugar de un objeto de tipo para facilitar la implementación de los orígenes de eventos por hosts no administrados.

El compilador usa el parámetro eventSourceType para enlazar a los métodos proporcionados por el tipo. También se utiliza más adelante cuando el motor de secuencia de comandos llama al método IVsaSite.GetEventSourceInstance para solicitar una instancia del objeto de tipo.

Para obtener más información acerca de los mecanismos para enlazar eventos para el motor de scripts, vea el método IVsaSite.GetEventSourceInstance.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Texto que se va a anexar al elemento de código.</param>
        <summary>Anexa el texto especificado al final del elemento de código.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Texto de origen anexado no está sujeto a validación. Por este motivo, los errores, si los hay, se detectarán en la siguiente llamada al método IVsaEngine.Compile.

El texto de origen anexado se proporciona como una sola cadena. Si requiere la cadena de formato, debe proporcionar usted mismo.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el Code Document Object Model (CodeDOM) representado en el elemento de código.</summary>
        <value>Devuelve el modelo CodeDOM del elemento de código.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
La propiedad CodeDOM se genera normalmente como parte del paso de compilación del motor de secuencia de comandos, por lo que no está disponible hasta después de una llamada al método IVsaEngine.Compile. Es posible que algunas implementaciones de VSA pueda proporcionar CodeDOM dinámicamente, sin necesidad de un paso de compilación explícito, pero los hosts no pueden confiar en este comportamiento. Algunos motores de script, por ejemplo, el motor de scripts de JScript. NET, no admiten este comportamiento.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Nombre de programación del origen de eventos que se va a quitar.</param>
        <summary>Quita el origen de eventos especificado del elemento de código.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Quitar un origen de eventos no quita el controlador de eventos subyacente de texto de origen. En su lugar, los eventos ya no envían notificaciones al controlador de eventos. Por lo tanto, obtendrá un error del compilador si elimina un origen de eventos, pero deja la función subyacente en el código fuente.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto de un elemento de código especificado, incluido el código generado automáticamente, si lo hubiera.</summary>
        <value>Devuelve el texto de origen del elemento de código.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Al establecer esta propiedad, el texto no está sujeto a validación. Por este motivo, los errores, si los hay, se detectarán en la siguiente llamada al método IVsaEngine.Compile.

La propiedad SourceText devuelve el texto de origen en una cadena larga, incluidos los caracteres de formato como transporte.

Para obtener esta propiedad en el motor no debe estar cerrado. Para establecer esta propiedad en el motor no debe estar cerrado y no se debe ejecutar el motor.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>