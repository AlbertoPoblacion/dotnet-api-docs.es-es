<Type Name="ConflictOptions" FullName="System.Web.UI.ConflictOptions">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab3cd7d259dad0e74ecfbc9e7ed7d3f48beb26c7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30604969" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ConflictOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConflictOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ConflictOptions" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConflictOptions" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConflictOptions" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Determina el modo en que los controles de origen de datos de ASP.NET deben controlar los conflictos de datos al actualizar o eliminar datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Control de simultaneidad es una técnica que utilizan los almacenes de datos para controlar cómo se leen y cambian en el almacén cuando varios clientes obtienen acceso y manipulan los mismos datos. Por ejemplo, un cliente lee los datos y presenta a un usuario, mientras que otro cliente lee los mismos datos y presenta a un usuario diferente. Si ambos usuarios actualizarán los datos y los envían al almacenamiento de datos, podría producirse algún resultado inesperado, porque los clientes podrían actualizar distintos valores para los mismos datos. Esto se considera un conflicto.  
  
 El `ConflictDetection` propiedad que se define para los controles de origen de datos ASP.NET se utiliza para determinar cómo deben controlarse los conflictos de datos en el almacenamiento de datos subyacente cuando se está utilizando la simultaneidad optimista y una eliminación o se realiza la operación de actualización.  
  
 De forma predeterminada, la `ConflictDetection` propiedad está establecida en OverwriteChanges, lo que significa que el control de origen de datos, sobrescribirá cualquier cambio realizado en una fila de datos entre el momento en que el control de origen de datos en primer lugar lee datos de la fila y el tiempo que se actualiza la fila. La clave principal se utiliza para buscar la fila de datos que se pueden actualizar o eliminar, pero no se realiza ninguna otra comparación de los datos. Si el control de origen de datos está configurado para utilizar la opción CompareAllValues, sin embargo, el control transfiere los datos originales en el `oldValues` colecciones de la `Update` y `Delete` métodos para que pueda escribir una lógica para actualizar o eliminar datos solo si estos valores coinciden con los valores actualmente en el almacenamiento de datos. Los valores coincidentes indican que los datos no han cambiado desde el momento en que se leyó.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection" />
    <altmember cref="P:System.Web.UI.WebControls.SqlDataSource.ConflictDetection" />
  </Docs>
  <Members>
    <Member MemberName="CompareAllValues">
      <MemberSignature Language="C#" Value="CompareAllValues" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.UI.ConflictOptions CompareAllValues = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ConflictOptions.CompareAllValues" />
      <MemberSignature Language="VB.NET" Value="CompareAllValues" />
      <MemberSignature Language="C++ CLI" Value="CompareAllValues" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Un control de origen de datos utiliza la colección <paramref name="oldValues" /> de los métodos <see langword="Update" /> y <see langword="Delete" /> para determinar si otro proceso ha modificado los datos.</summary>
      </Docs>
    </Member>
    <Member MemberName="OverwriteChanges">
      <MemberSignature Language="C#" Value="OverwriteChanges" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Web.UI.ConflictOptions OverwriteChanges = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.ConflictOptions.OverwriteChanges" />
      <MemberSignature Language="VB.NET" Value="OverwriteChanges" />
      <MemberSignature Language="C++ CLI" Value="OverwriteChanges" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ConflictOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Un control de origen de datos sobrescribe todos los valores de una fila de datos por los suyos propios.</summary>
      </Docs>
    </Member>
  </Members>
</Type>