<Type Name="IPostBackEventHandler" FullName="System.Web.UI.IPostBackEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="74895afd3d877bfd2607636a11a815f62a72f90e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30605259" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPostBackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPostBackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.IPostBackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPostBackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPostBackEventHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define el método que los controles de servidor ASP.NET deben implementar para controlar los eventos de postback.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para crear un control de servidor que capture información de envío de formularios desde el explorador, debe implementar esta interfaz. Para obtener más información sobre cómo usar esta interfaz, vea [control de eventos de servidor en páginas de formularios Web de ASP.NET](http://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se define un control de servidor de botón personalizado que provoca la devolución de datos, captura el evento de postback mediante el <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> método y genera un `Click` eventos en el servidor.  
  
 [!code-csharp[Classic IPostBackEventHandler Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IPostBackEventHandler Example/CS/source.cs#1)]
 [!code-vb[Classic IPostBackEventHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IPostBackEventHandler Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="public void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">
          <see cref="T:System.String" /> que representa un argumento de evento opcional que se pasará al controlador de evento.</param>
        <summary>Cuando se implementa mediante una clase, permite que un control de servidor procese un evento provocado al enviar un formulario al servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La página pasa el valor de la `eventArgument` parámetro a la `RaisePostBackEvent` método del control que implementa el <xref:System.Web.UI.IPostBackEventHandler> interfaz. Este control también representa el elemento HTML que provoca la devolución de datos que se produzca. Si el control representa el script de cliente para la devolución, el argumento de la secuencia de comandos se pasa en el `eventArgument` parámetro. Si la devolución de datos está causado por un sencillo enviar la operación, el `eventArgument` parámetro es `null`.  
  
 Este método proporciona la funcionalidad para muchos eventos implementados por controles de servidor HTML y Web.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se define un control de servidor de botón personalizado que provoca la devolución de datos, captura el evento de postback mediante el <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> método y genera un `Click` eventos en el servidor.  
  
 [!code-csharp[Classic IPostBackEventHandler Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IPostBackEventHandler Example/CS/source.cs#1)]
 [!code-vb[Classic IPostBackEventHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IPostBackEventHandler Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>