<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34742187faa27ac641e9f0767654cb7c439dd1fc" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52249080" /></Metadata><TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Escribe una serie de caracteres específicos de cHTML y texto en el flujo de salida de un control de servidor ASP.NET. La clase <see cref="T:System.Web.UI.ChtmlTextWriter" /> proporciona funciones de aplicación de formato que los controles de servidor ASP.NET utilizan al representar contenido cHTML en los clientes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML o cHTML, es un subconjunto de HTML 2.0, HTML 3.2 y HTML 4.0 y está diseñado para representar en dispositivos con memoria limitada y potencia de CPU, junto con pantallas pequeñas, limitadas de dar formato a las capacidades y un número limitado de opciones de entrada (por ejemplo, un teléfono móvil pantalla táctil). Por lo tanto, cHTML no admite lo siguiente:  
  
-   Imágenes JPEG.  
  
-   Tablas.  
  
-   Mapas de imágenes.  
  
-   Varias fuentes de carácter y estilos.  
  
-   Los colores de fondo e imágenes.  
  
-   Marcos.  
  
-   Hojas de estilos.  
  
 El <xref:System.Web.UI.ChtmlTextWriter> clase se deriva de la <xref:System.Web.UI.Html32TextWriter> clase y gran parte de su funcionalidad se proporciona mediante el <xref:System.Web.UI.Html32TextWriter> y la clase base para todos los escritores de texto de marcado, que es el <xref:System.Web.UI.HtmlTextWriter> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una clase denominada `CustomChtmlTextWriter` que se deriva el <xref:System.Web.UI.ChtmlTextWriter> clase. Crea dos constructores y reemplaza el <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> método para impedir que el `bgcolor` atributo de estilo desde el que se escriben en el flujo de salida de la <xref:System.Web.UI.ChtmlTextWriter> objeto. También crea una clase denominada `ChtmlCustomPageAdapter` que define un método, `CreateCustomChtmlTextWriter`, que crea y devuelve una instancia de la `CustomChtmlTextWriter` clase. El `CustomChtmlTextWriter` , a continuación, representa el contenido de cHTML para una página a los dispositivos con los exploradores que utilizan el marcado de cHTML.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objeto <see cref="T:System.IO.TextWriter" /> que representa el contenido de marcado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.ChtmlTextWriter" /> que utiliza la constante <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> para aplicar sangría a las líneas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ChtmlTextWriter> clase tiene dos constructores, que es el estándar para todas las clases que derivan directa o indirectamente de la <xref:System.Web.UI.HtmlTextWriter> clase.  
  
 El <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> constructor, que toma una instancia de la <xref:System.IO.TextWriter> clase como un parámetro, se llama el segundo constructor y le pasa dos valores de parámetro:  
  
-   <xref:System.IO.TextWriter>.  
  
-   El valor de cadena que se especifica en el <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo, que define el espaciado de tabulación que se utiliza el Editor de texto XHTML.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una clase denominada `ChtmlCustomPageAdapter` y define un método, `CreateCustomChtmlTextWriter`, que crea y devuelve una instancia de la `CustomChtmlTextWriter` clase. El `CustomChtmlTextWriter` , a continuación, representa el contenido de cHTML páginas para dispositivos con los exploradores que utilizan el marcado de cHTML.  
  
 Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Web.UI.ChtmlTextWriter> clase.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Objeto <see cref="T:System.IO.TextWriter" /> que representa el contenido de marcado.</param>
        <param name="tabString">Número de espacios definidos en <see cref="P:System.Web.UI.HtmlTextWriter.Indent" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.ChtmlTextWriter" /> con la sangría de línea especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> constructor, que toma una instancia de la <xref:System.IO.TextWriter> clase y una cadena como parámetros, las llamadas del <xref:System.Web.UI.Html32TextWriter> constructor que toma los mismos parámetros cuando crea una instancia de la <xref:System.Web.UI.ChtmlTextWriter> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una clase personalizada denominada `CustomChtmlTextWriter` que se deriva el <xref:System.Web.UI.ChtmlTextWriter> clase. Crea dos constructores que puede usar para crear una instancia de la clase personalizada con el mismo patrón que todas las clases que derivan, directa o indirectamente, de la <xref:System.Web.UI.HtmlTextWriter> clase.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Elemento cHTML al que se va a agregar el atributo.</param>
        <param name="attributeName">Atributo que se va a agregar a <paramref name="elementName" />.</param>
        <summary>Agrega un atributo a un elemento cHTML del objeto <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> método agrega un atributo a un elemento cHTML. El atributo reconocido se almacena en los atributos reconocidos <xref:System.Collections.Hashtable> colección de la <xref:System.Web.UI.ChtmlTextWriter> objeto al que hace referencia el <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Collections.Hashtable" /> de atributos globalmente suprimidos que no se pueden representar en elementos cHTML.</summary>
        <value>Objeto <see cref="T:System.Collections.Hashtable" /> de atributos cHTML globalmente suprimidos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la lista siguiente se muestra los atributos globalmente suprimidos que se establecen cuando una nueva instancia de la <xref:System.Web.UI.ChtmlTextWriter> se crea la clase.  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Atributo cHTML que se va a representar.</param>
        <param name="value">Valor asignado a <paramref name="name" />.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> asociado a <paramref name="name" />.</param>
        <summary>Determina si el atributo cHTML especificado y su valor se van a representar en la página que realiza la solicitud. Puede reemplazar el método <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> en clases que se deriven de la clase <see cref="T:System.Web.UI.ChtmlTextWriter" /> para filtrar los atributos que no desee representar en dispositivos que admitan cHTML.</summary>
        <returns>Es <see langword="true" /> para escribir el atributo y su valor en el flujo de salida <see cref="T:System.Web.UI.ChtmlTextWriter" />; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, el <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> método evita que los atributos globalmente suprimidos que aparecen en la <xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A> propiedad y atributos específicos del elemento, suprimidos que aparecen en la <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A> propiedad desde que se escriben en el flujo de salida. Puede invalidar el comportamiento de la <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> método en las clases que se derivan los <xref:System.Web.UI.ChtmlTextWriter> clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar una clase personalizada que reemplaza el <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> método para impedir que el `bgcolor` atributo desde el que se escriben en el flujo de salida de cHTML. A continuación, llama a la funcionalidad proporcionada por la base de <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> método desde el <xref:System.Web.UI.ChtmlTextWriter> clase para garantizar que su comportamiento predeterminado también se usa.  
  
 Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Web.UI.ChtmlTextWriter> clase.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Cadena con el nombre del atributo de estilo que se va a representar.</param>
        <param name="value">Cadena que contiene el valor asignado a <paramref name="name" />.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterStyle" /> asociado a <paramref name="name" />.</param>
        <summary>Determina si el atributo del estilo de marcado de cHTML especificado y su valor se van a representar en el elemento de marcado actual.</summary>
        <returns>Es <see langword="true" /> si el estilo se puede representar; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> devuelve del método `false` cuando `key` es igual a la <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration> campo y el valor es `"line-through"`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">Cadena con el nombre del elemento de cHTML que se va a representar.</param>
        <param name="key"><see cref="T:System.Web.UI.HtmlTextWriterTag" /> asociado a <paramref name="name" />.</param>
        <summary>Determina si el elemento de marcado de cHTML especificado se va a representar en la página que realiza la solicitud.</summary>
        <returns>El valor es <see langword="true" /> si se puede representar el elemento de marcado de cHTML especificado; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el elemento de cHTML es un `span` elemento, el <xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A> devuelve del método `false`. Para todas las demás etiquetas, devuelve `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Collections.Hashtable" /> de atributos reconocidos que se pudieron representar en elementos cHTML.</summary>
        <value>Objeto <see cref="T:System.Collections.Hashtable" /> de atributos de cHTML reconocidos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A> atributos de método para agregar reconocido a la colección de atributos reconocidos.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Elemento cHTML del que se va a quitar un atributo.</param>
        <param name="attributeName">Atributo que se va a quitar de <paramref name="elementName" />.</param>
        <summary>Quita un atributo de un elemento cHTML del objeto <see cref="T:System.Web.UI.ChtmlTextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> método quita un atributo de un elemento cHTML. El atributo reconocido se quita de los atributos reconocidos <xref:System.Collections.Hashtable> colección de la <xref:System.Web.UI.ChtmlTextWriter> objeto al que hace referencia el <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Collections.Hashtable" /> de atributos suprimidos especificados por el usuario que no se representan en elementos cHTML.</summary>
        <value>Objeto <see cref="T:System.Collections.Hashtable" /> de atributos de cHTML suprimidos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A> método para agregar atributos a la colección de atributos suprimidos.  
  
 La lista siguiente muestra los atributos suprimidos predeterminados que se establecen para un `div` elemento cuando una nueva instancia de la <xref:System.Web.UI.ChtmlTextWriter> se crea la clase.  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 La lista siguiente muestra los atributos suprimidos predeterminados que se establecen para un `span` elemento cuando una nueva instancia de la <xref:System.Web.UI.ChtmlTextWriter> se crea la clase.  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Escribe un elemento <see langword="br" /> en el flujo de salida de cHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> método para insertar una línea interrumpir una secuencia de cHTML.  
  
   
  
## Examples  
 Esta sección contiene dos ejemplos de código. El primer ejemplo de código muestra cómo crear una clase cHTML y propiedades personalizadas. El segundo ejemplo de código muestra cómo usar una clase personalizada en una página Web.  
  
 Para usar personalizado `ChtmlSimplelabelAdapter` adaptador, agregue el siguiente código como el archivo adecuado de todo el equipo en el subdirectorio del directorio de configuración de .NET Framework o a un archivo de explorador personalizado en el directorio App_Browsers en la Web del explorador raíz de la aplicación.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 En el ejemplo de código siguiente se muestra cómo crear una clase de adaptadores de cHTML denominada `ChtmlSimpleLabelAdapter` para una clase denominada `SimpleLabel`. Crea un personalizado `Control` propiedad que permite el `ChtmlSimpleLabelAdapter` clase para tener acceso a los miembros de la `SimpleLabel` clase y, a continuación, invalidaciones el <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> método. En la invalidación, se producen las siguientes acciones:  
  
-   Crea una referencia a un <xref:System.Web.UI.ChtmlTextWriter> objeto, denominado `w`, que se deriva el <xref:System.Web.UI.HtmlTextWriter> objeto que se pasa como el `writer` parámetro para el <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A> método.  
  
-   Se crea una cadena y se establece igual que el `SimpleLabel.Text` valor.  
  
-   Lo llama el <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> método para aplicar los estilos definidos por el <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> flujo de salida de la propiedad de la etiqueta a la cHTML.  
  
-   Escribe el `Text` valor de propiedad a la secuencia y cierra el bloque de estilos mediante una llamada a la <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> método.  
  
-   Lo llama el <xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A> método para representar un `br` elemento en el flujo de salida después de la representación de texto y los estilos.  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 En el ejemplo siguiente se muestra cómo usar el `SimpleLabel` clase en una página Web.  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Cadena de texto que se debe codificar y escribir en el flujo de salida.</param>
        <summary>Codifica el texto especificado para el dispositivo solicitado y, a continuación, lo escribe en el flujo de salida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si pasa el parámetro de texto en el <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> método es `null` o tiene una longitud de cero, a continuación, se escribe nada.  
  
 Use la <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> método cuando una cadena contiene corchetes angulares (\< o >) o una y comercial (&) y desea asegurarse de que se representan correctamente en el dispositivo solicitante.  
  
 El <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A> método utiliza la clase base <xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>