<Type Name="ScriptManager" FullName="System.Web.UI.ScriptManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b82c646ee023f3228d9b6ef77146c12a2daf52d6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37588113" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ScriptManager : System.Web.UI.Control, System.Web.UI.IPostBackDataHandler, System.Web.UI.IPostBackEventHandler, System.Web.UI.IScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ScriptManager extends System.Web.UI.Control implements class System.Web.UI.IPostBackDataHandler, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.IScriptManager" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ScriptManager&#xA;Inherits Control&#xA;Implements IPostBackDataHandler, IPostBackEventHandler, IScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptManager : System::Web::UI::Control, System::Web::UI::IPostBackDataHandler, System::Web::UI::IPostBackEventHandler, System::Web::UI::IScriptManager" />
  <TypeSignature Language="F#" Value="type ScriptManager = class&#xA;    inherit Control&#xA;    interface IPostBackDataHandler&#xA;    interface IPostBackEventHandler&#xA;    interface IScriptManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IScriptManager</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Scripts")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.ScriptManagerDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(EmbeddedResourceFinder), "System.Web.Resources.ScriptManager.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.NonVisualControl</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Administra las bibliotecas de scripts y los archivos de script AJAX de ASP.NET, la representación parcial de página y la generación de la clase de proxy de cliente para los servicios web y de aplicación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En este tema:  
  
-   [Introducción](#introduction)  
  
-   [Representación parcial de página](#partial_page_rendering)  
  
-   [Usar el Control ScriptManager con páginas maestras, controles de usuario y otros componentes secundarios](#using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components)  
  
-   [Secuencia de comandos administración y registro](#script_management_and_registration)  
  
-   [Referencias de servicio Web](#web_service_references)  
  
-   [Localización](#localization)  
  
-   [Control de errores](#error_handling)  
  
-   [Sintaxis declarativa](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Introducción  
 El <xref:System.Web.UI.ScriptManager> control es fundamental para la funcionalidad de Ajax en ASP.NET. El control administra todos los recursos de ASP.NET Ajax en una página. Esto incluye la descarga de scripts de Microsoft Ajax Library en el explorador y coordinar las actualizaciones parciales de página que se habilitan empleando <xref:System.Web.UI.UpdatePanel> controles. Además, el <xref:System.Web.UI.ScriptManager> control le permite hacer lo siguiente:  
  
-   Script de registro que es compatible con las actualizaciones parciales de página. Para administrar las dependencias entre la secuencia de comandos y la biblioteca principal, cualquier script que registre se carga después de la secuencia de comandos de Microsoft Ajax Library.  
  
-   Especifique si la versión o scripts de depuración se envían al explorador.  
  
-   Proporcionar acceso a métodos de servicio Web desde el script mediante el registro de servicios Web con el <xref:System.Web.UI.ScriptManager> control.  
  
-   Proporcionar servicios de aplicaciones de script de cliente de acceso a la autenticación, roles y perfil ASP.NET mediante el registro de estos servicios con el <xref:System.Web.UI.ScriptManager> control.  
  
-   Habilitar la visualización de la referencia cultural específica de ECMAScript (JavaScript) y las funciones en el explorador.  
  
-   Obtener acceso a los recursos de localización para los archivos de script incrustados o para archivos de script independientes mediante la <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> propiedad de la <xref:System.Web.UI.ScriptReference> control.  
  
-   Registrar controles de servidor que implementan la <xref:System.Web.UI.IExtenderControl> o <xref:System.Web.UI.IScriptControl> interactúa con el <xref:System.Web.UI.ScriptManager> para que se represente el script requerido por los componentes de cliente y los comportamientos de control.  
  
<a name="partial_page_rendering"></a>   
## <a name="partial-page-rendering"></a>Representación parcial de página  
 La capacidad de una página ASP.NET para admitir la representación parcial de página se controla mediante los siguientes factores:  
  
-   El <xref:System.Web.UI.ScriptManager> del control <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> propiedad debe ser `true` (el valor predeterminado).  
  
-   Debe haber al menos una <xref:System.Web.UI.UpdatePanel> control en la página.  
  
-   El <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> propiedad debe ser `true` (el valor predeterminado). Si el <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> no se establece explícitamente la propiedad, su valor se basa en las capacidades del explorador.  
  
 Puede invalidar el valor de la <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> propiedad en tiempo de ejecución durante o antes de la página <xref:System.Web.UI.Control.Init> eventos. Si intenta cambiar esta propiedad después de la página <xref:System.Web.UI.Control.Init> se ha producido el evento, un <xref:System.InvalidOperationException> es una excepción.  
  
 Cuando se admite la representación parcial de página, el <xref:System.Web.UI.ScriptManager> control representa el script para habilitar los postbacks asincrónicos y las actualizaciones parciales de página. Las regiones de la página para actualizarse se designan mediante el uso de <xref:System.Web.UI.UpdatePanel> controles. El <xref:System.Web.UI.ScriptManager> control controla los postbacks asincrónicos y actualiza únicamente las regiones de la página que tengan que actualizarse. Para obtener más información acerca de la representación parcial de página, vea [Introducción a la representación parcial de página](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49). Para obtener más información acerca de las condiciones que provocan una actualización, consulte [información general del Control UpdatePanel](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a).  
  
<a name="using_the_scriptmanager_control_with_master_pages__user_controls__and_other_child_components"></a>   
## <a name="using-the-scriptmanager-control-with-master-pages-user-controls-and-other-child-components"></a>Usar el Control ScriptManager con páginas maestras, controles de usuario y otros componentes secundarios  
 Una página puede contener sólo un <xref:System.Web.UI.ScriptManager> control en su jerarquía. Para registrar los servicios y scripts de páginas anidadas, controles de usuario o componentes cuando la página primaria tiene ya un <xref:System.Web.UI.ScriptManager> controlar, use el <xref:System.Web.UI.ScriptManagerProxy> control. Para obtener más información, consulte [mediante el UpdatePanel Control con páginas maestras](http://msdn.microsoft.com/library/b1c974d5-a6b2-4bb3-a3cc-61dd9dc0e1d6)  
  
<a name="script_management_and_registration"></a>   
## <a name="script-management-and-registration"></a>Secuencia de comandos administración y registro  
 El <xref:System.Web.UI.ScriptManager> control permite registrar la secuencia de comandos que, a continuación, se representa como parte de la página. El <xref:System.Web.UI.ScriptManager> métodos de registro de control se pueden dividir en las tres categorías siguientes:  
  
-   Métodos de registro que garantizan que se mantienen las dependencias de secuencia de comandos de Microsoft Ajax Library.  
  
-   Los métodos de registro que no son dependientes de Microsoft Ajax Library, pero que son compatibles con <xref:System.Web.UI.UpdatePanel> controles.  
  
-   Los métodos de registro que permiten trabajar con <xref:System.Web.UI.UpdatePanel> controles.  
  
 Para obtener más información acerca de cómo crear y usar el script de Ajax en ASP.NET, vea [crear Script de cliente personalizado mediante el uso de Microsoft Ajax Library](http://msdn.microsoft.com/library/285e3a65-b42e-42c5-952d-baf184057899).  
  
### <a name="registering-script-that-is-dependent-on-the-microsoft-ajax-library"></a>Registra el Script que depende de la biblioteca de Microsoft Ajax  
 Puede usar los métodos siguientes para registrar los archivos de script de forma que garantiza que se mantienen las dependencias de Microsoft Ajax Library.  
  
|Método|de esquema JSON|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A>|Registra un control de servidor que implementa el <xref:System.Web.UI.IScriptControl> interfaz que se utiliza para definir un objeto de cliente. El <xref:System.Web.UI.ScriptManager> control procesa la secuencia de comandos que admite el objeto de cliente.|  
|<xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A>|Registra un control de servidor que implementa el <xref:System.Web.UI.IExtenderControl> interfaz que se utiliza para definir un objeto de cliente. El <xref:System.Web.UI.ScriptManager> control procesa la secuencia de comandos que admite el objeto de cliente.|  
  
### <a name="registering-partial-page-update-compatible-scripts"></a>Registrar scripts compatibles con las actualizaciones parciales de página  
 Puede usar los métodos siguientes para registrar los archivos de script que no dependen de Microsoft Ajax Library pero que son compatibles con <xref:System.Web.UI.UpdatePanel> controles. Estos métodos se corresponden con métodos similares de la <xref:System.Web.UI.ClientScriptManager> control. Si es un script de representación para su uso dentro de un <xref:System.Web.UI.UpdatePanel> control, asegúrese de que llama a los métodos de la <xref:System.Web.UI.ScriptManager> control.  
  
|Método|de esquema JSON|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A>|Agrega un valor a una matriz de JavaScript. Si la matriz no existe, se crea.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A>|Representa un `script` elemento después de abrir la página `<form>` etiqueta. El script se especifica como un parámetro de cadena.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A>|Representa un `script` elemento después de abrir la página `<form>` etiqueta. El contenido del script se especifica estableciendo el `src` atributo a una dirección URL que apunta a un archivo de script.|  
|<xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A>|Representa un `script` elemento después de abrir la página `<form>` etiqueta. El contenido del script se especifica con un nombre de recurso en un ensamblado. El `src` atributo se rellena automáticamente con una dirección URL mediante una llamada a un controlador HTTP que recupera la secuencia de comandos con nombre desde el ensamblado.|  
|<xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>|Representa un par de atributo de nombre/valor personalizado (expando) en el marcado para un control especificado.|  
|<xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A>|Representa un campo oculto.|  
|<xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>|Registra un script que se ejecuta en respuesta a la `form` del elemento `submit` eventos. El `onSubmit` atributo hace referencia a la secuencia de comandos especificado.|  
|<xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>|Representa un bloque de script de inicio justo antes de cerrar la página `</form>` etiqueta. Para representar la secuencia de comandos se especifica como un parámetro de cadena.|  
  
 Al registrar los métodos, especifique un par de clave del tipo para ese script. Si ya está registrado un script con el mismo par de clave del tipo, una nueva secuencia de comandos no está registrado. De forma similar, si registra un script con un par de nombre de tipo o recurso que ya existe, el `script` no se agrega el elemento que hace referencia al recurso nuevo. Al registrar un atributo expando de un atributo previamente registrado, se produce una excepción. Se permite el registro duplicado de valores de la matriz.  
  
 Cuando se llama a la <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> o <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> método, evite registrar script que ejecuta las funciones insertadas. En su lugar, registre un script que contiene las definiciones de función como controladores de eventos o definiciones de clase personalizada para su aplicación.  
  
### <a name="registration-methods-for-updatepanel-controls"></a>Métodos de registro para los controles UpdatePanel  
 Puede usar los métodos siguientes para personalizar las actualizaciones parciales de página cuando se usa <xref:System.Web.UI.UpdatePanel> controles.  
  
|Método|de esquema JSON|  
|------------|----------------|  
|<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>|Registra un control como desencadenador de postbacks asincrónicos.|  
|<xref:System.Web.UI.ScriptManager.RegisterDataItem%2A>|Envía datos personalizados a los controles durante la representación parcial de la página.|  
|<xref:System.Web.UI.ScriptManager.RegisterDispose%2A>|Registra un script de eliminación para un control que está dentro de un <xref:System.Web.UI.UpdatePanel> control. Se ejecuta el script cuando el control <xref:System.Web.UI.UpdatePanel> se actualiza o elimina. El método dispose se utiliza para los componentes que forman parte de Microsoft Ajax Library y que tienen que liberar recursos cuando ya no se utiliza un componente de cliente.|  
|<xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A>|Registra un control como desencadenador de una devolución completa. Este método se utiliza para los controles dentro de un <xref:System.Web.UI.UpdatePanel> control que en caso contrario, realizarían postbacks asincrónicos.|  
  
<a name="web_service_references"></a>   
## <a name="web-service-references"></a>Referencias de servicio Web  
 Puede registrar un servicio Web que se llame desde el script de cliente mediante la creación de un <xref:System.Web.UI.ServiceReference> objeto y agregarla a la <xref:System.Web.UI.ScriptManager.Services%2A> colección de los <xref:System.Web.UI.ScriptManager> control. ASP.NET genera un objeto de proxy de cliente para cada <xref:System.Web.UI.ServiceReference> objeto en el <xref:System.Web.UI.ScriptManager.Services%2A> colección. Se puede agregar mediante programación <xref:System.Web.UI.ServiceReference> objetos a la <xref:System.Web.UI.ScriptManager.Services%2A> colección para registrar los servicios Web en tiempo de ejecución.  
  
 Para obtener más información acerca de cómo obtener acceso a servicios Web en la secuencia de comandos, consulte [exponer servicios Web en el Script de cliente AJAX de ASP.NET](http://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8) y [llamar a servicios Web desde el Script de cliente de AJAX de ASP.NET](http://msdn.microsoft.com/library/fc06c224-f01a-45be-94af-bd71afbc07b0).  
  
<a name="localization"></a>   
## <a name="localization"></a>Localización  
 El <xref:System.Web.UI.ScriptManager> control genera referencias en la página representada que señalan a los archivos de script localizados adecuado, que son ambos archivos de script incrustados en ensamblados o archivos de script independientes.  
  
 Cuando el <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> propiedad está establecida en `true`, el <xref:System.Web.UI.ScriptManager> control recupera los recursos localizados (por ejemplo, las cadenas localizadas) para la referencia cultural actual, si existen. El <xref:System.Web.UI.ScriptManager> control proporciona la siguiente funcionalidad para el uso de recursos localizados:  
  
-   **Archivos de script que se incrustan en un ensamblado**. El <xref:System.Web.UI.ScriptManager> control determina qué archivo de script específicos de referencias culturales o cultural de reserva para enviar al explorador. Hace esto mediante el uso de la referencia cultural específica <xref:System.Resources.NeutralResourcesLanguageAttribute> atributo de ensamblado, los recursos empaquetados con el ensamblado y la referencia cultural de interfaz de usuario del explorador (si existe).  
  
-   **Archivos de script independientes**. El <xref:System.Web.UI.ScriptManager> control define la lista de referencias culturales de interfaz de usuario que se admiten mediante el <xref:System.Web.UI.ScriptReferenceBase.ResourceUICultures%2A> propiedad de la <xref:System.Web.UI.ScriptReference> objeto.  
  
-   **En modo de depuración**. El <xref:System.Web.UI.ScriptManager> control intenta procesar un archivo de script de la referencia cultural específica que contiene información de depuración. Por ejemplo, si la página está en modo de depuración y la referencia cultural actual se establece como en-MX, el control representa un archivo de script que tiene un nombre como `scriptname`.en-MX.debug.js, si existe el archivo. Si el archivo no existe, se procesa el archivo de depuración para la referencia cultural de reserva adecuada  
  
 Para obtener más información sobre cómo localizar recursos, consulte [localizar recursos de información general de las bibliotecas del componente](http://msdn.microsoft.com/library/e6b15435-57c1-4dd1-9bd3-5d4c509685bb).  
  
<a name="error_handling"></a>   
## <a name="error-handling"></a>Control de errores  
 Cuando se produce un error de página durante las devoluciones asincrónicas, el <xref:System.Web.UI.ScriptManager.AsyncPostBackError> provoca el evento. La manera en que se envían los errores en el servidor al cliente depende del <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> propiedad, el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad y la sección de errores personalizados del archivo Web.config. Para obtener más información, consulte [personalizar el control de errores para los controles UpdatePanel](http://msdn.microsoft.com/library/e15e7ffb-e4b2-4a89-b99e-16624a5861d0).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Sintaxis declarativa  
  
```  
<asp:ScriptManager  
    AllowCustomErrorsRedirect="True|False"  
    AsyncPostBackErrorMessage="string"  
    AsyncPostBackTimeout="integer"  
    AuthenticationService-Path="uri"  
    EnablePageMethods="True|False"  
    EnablePartialRendering="True|False"  
    EnableScriptGlobalization="True|False"  
    EnableScriptLocalization="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ID="string"  
    LoadScriptsBeforeUI="True|False"  
    OnAsyncPostBackError="AsyncPostBackError event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnResolveScriptReference="ResolveScriptReference event handler"  
    OnUnload="Unload event handler"  
    ProfileService-LoadProperties="string"  
    ProfileService-Path="uri"  
    RoleService-LoadRoles="True|False"  
    RoleService-Path="uri"  
    runat="server"  
    ScriptMode="Auto|Inherit|Debug|Release"  
    ScriptPath="string"  
    SkinID="string"  
    SupportsPartialRendering="True|False"  
    Visible="True|False"  
>  
        <AuthenticationService  
            Path="uri"  
        />  
        <ProfileService  
            LoadProperties="string"  
            Path="uri"  
        />  
        <RoleService  
            LoadRoles="True|False"  
            Path="uri"  
        />  
        <Scripts>  
            <asp:ScriptReference  
                Assembly="string"  
                IgnoreScriptPath="True|False"  
                Name="string"  
                NotifyScriptLoaded="True|False"  
                Path="string"  
                ResourceUICultures="string"  
                ScriptMode="Auto|Debug|Inherit|Release"  
            />  
        </Scripts>  
        <Services>  
            <asp:ServiceReference  
                InlineScript="True|False"  
                Path="string"  
            />  
        </Services>  
</asp:ScriptManager>  
```  
  
   
  
## Examples  
 Los ejemplos siguientes muestran distintos escenarios para usar el <xref:System.Web.UI.ScriptManager> control.  
  
 **Habilitar actualizaciones parciales de página**  
  
 El ejemplo siguiente muestra cómo usar el <xref:System.Web.UI.ScriptManager> control para habilitar las actualizaciones parciales de página. En este ejemplo, un <xref:System.Web.UI.WebControls.Calendar> y un <xref:System.Web.UI.WebControls.DropDownList> control están dentro de un <xref:System.Web.UI.UpdatePanel> control. De forma predeterminada, el valor de la <xref:System.Web.UI.UpdatePanel.UpdateMode%2A> propiedad es <xref:System.Web.UI.UpdatePanelUpdateMode.Always>y el valor de la <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> propiedad es `true`. Por lo tanto, los controles secundarios del panel de provocan un postback asincrónico.  
  
 [!code-aspx-csharp[System.Web.UI.UpdatePanel#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/CS/UpdatePanelExample1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.UpdatePanel#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.UpdatePanel/VB/UpdatePanelExample1VB.aspx#1)]  
  
 **Control de errores de actualización parcial de página y registrar el Script**  
  
 El ejemplo siguiente muestra cómo proporcionar control durante las actualizaciones parciales de página de errores personalizada. De forma predeterminada, cuando se produce un error durante las actualizaciones parciales de página, se muestra un cuadro de mensaje de JavaScript. Este ejemplo muestra cómo usar los errores personalizados proporcionando un controlador para el <xref:System.Web.UI.ScriptManager.AsyncPostBackError> eventos y estableciendo el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad en el controlador de eventos. También puede establecer el <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> propiedad para especificar cómo se usa la sección de errores personalizados del archivo Web.config cuando se produce un error durante las actualizaciones parciales de página. En este ejemplo, el valor predeterminado de la <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> se utiliza la propiedad. Esto significa que si el archivo Web.config contiene un elemento, ese elemento determina cómo se muestran los errores. Para obtener más información, consulte [customErrors Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/288c32e2-df1f-4548-abda-de6b4cb989a6).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.OnAsyncPostBackError#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.OnAsyncPostBackError/VB/default.aspx#1)]  
  
 **Globalizar la fecha y hora que se muestran en el explorador**  
  
 El ejemplo siguiente muestra cómo establecer el <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> propiedad para ese script de cliente pueda mostrar una fecha específica de la referencia cultural y la hora en el explorador. En el ejemplo, el `Culture` atributo de la directiva se establece en `auto`. Como resultado, el primer idioma que se especifica en la configuración actual del explorador determina la referencia cultural y la referencia cultural de interfaz de usuario para la página. Para obtener más información, consulte [Cómo: establecer la referencia cultural y la referencia cultural de interfaz de usuario para la globalización de páginas Web de ASP.NET](http://msdn.microsoft.com/library/76091f86-f967-4687-a40f-de87bd8cc9a0).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/CS/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.EnableScriptGlobalization#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.EnableScriptGlobalization/VB/default.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ScriptManagerProxy" />
    <altmember cref="T:System.Web.UI.UpdatePanel" />
    <altmember cref="T:System.Web.UI.ClientScriptManager" />
    <altmember cref="T:System.Web.UI.ScriptMode" />
    <altmember cref="T:System.Web.UI.ScriptReference" />
    <altmember cref="T:System.Web.UI.ServiceReference" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa los campos internos utilizados por el <xref:System.Web.UI.ScriptManager> control para realizar un seguimiento de página, el control y la información de implementación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddHistoryPoint">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea un punto del historial y lo agrega a la pila del historial del explorador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estas sobrecargas de método permiten definir el estado del servidor y, opcionalmente, el título de la entrada del historial en el explorador. Cuando se crea un punto del historial, los datos serializados y cifrados se anexan a la dirección URL de la página Web y se incluye una entrada en la pila del historial del explorador. Puede usar los datos de estado para volver a crear la página cuando se produce cualquier evento de navegación de servidor posteriores. Para obtener más información, consulte [administrar historial de explorador mediante controles de servidor](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (System.Collections.Specialized.NameValueCollection state, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(class System.Collections.Specialized.NameValueCollection state, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.Collections.Specialized.NameValueCollection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (state As NameValueCollection, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::Collections::Specialized::NameValueCollection ^ state, System::String ^ title);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : System.Collections.Specialized.NameValueCollection * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (state, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="state">Colección de pares clave-valor que contienen los datos para el estado.</param>
        <param name="title">Texto que se agregará a la pila del historial del explorador como el título de este estado.</param>
        <summary>Crea un punto del historial y lo agrega a la pila del historial del explorador mediante la recolección de datos de estado y el título de estado que se especificaron.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para crear un punto del historial cuando desee guardar más de un par clave/valor para los datos de estado. Cuando se crea un punto del historial, los datos serializados y cifrados se anexan a la dirección URL de la página Web y se incluye una entrada en la pila del historial del explorador. Si el `title` parámetro es `null`, el título de la página Web se usa como el título de la entrada de estado en la pila del historial.  
  
 Puede usar los datos de estado para volver a crear la página cuando se produce cualquier evento de navegación de servidor posteriores. Para obtener más información, consulte [administrar historial de explorador mediante controles de servidor](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : string * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Parte correspondiente a la clave del par clave-valor que identifica el estado de la página web.</param>
        <param name="value">Parte correspondiente al valor del par clave-valor que identifica el estado de la página web.</param>
        <summary>Crea un punto del historial y lo agrega a la pila del historial del explorador mediante la clave de estado y el valor de estado especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para crear un punto del historial cuando desee guardar un valor para identificar el estado. Cuando se crea un punto del historial, los datos serializados y cifrados se anexan a la dirección URL de la página Web y se incluye una entrada en la pila del historial del explorador. El título de la página Web se usa como el título de la entrada de estado en la pila del historial.  
  
 Puede usar los datos de estado para volver a crear la página cuando se produce cualquier evento de navegación de servidor posteriores. Para obtener más información, consulte [administrar historial de explorador mediante controles de servidor](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHistoryPoint">
      <MemberSignature Language="C#" Value="public void AddHistoryPoint (string key, string value, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHistoryPoint(string key, string value, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.AddHistoryPoint(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHistoryPoint (key As String, value As String, title As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHistoryPoint(System::String ^ key, System::String ^ value, System::String ^ title);" />
      <MemberSignature Language="F#" Value="member this.AddHistoryPoint : string * string * string -&gt; unit" Usage="scriptManager.AddHistoryPoint (key, value, title)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Parte correspondiente a la clave del par clave-valor que identifica el estado de la página web.</param>
        <param name="value">Parte correspondiente al valor del par clave-valor que identifica el estado de la página web.</param>
        <param name="title">Texto que se agregará a la pila del historial del explorador como el título de este estado.</param>
        <summary>Crea un punto del historial y lo agrega a la pila del historial del explorador mediante la clave de estado, el valor de estado y el título de estado especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para crear un punto del historial cuando desea guardar un valor para identificar el estado y un título para el estado. Cuando se crea un punto del historial, los datos serializados y cifrados se anexan a la dirección URL de la página Web y se incluye una entrada en la pila del historial del explorador. Si el `title` parámetro es `null`, el título de la página Web se usa como el título de la entrada de estado en la pila del historial.  
  
 Puede usar los datos de estado para volver a crear la página cuando se produce cualquier evento de navegación de servidor posteriores. Para obtener más información, consulte [administrar historial de explorador mediante controles de servidor](http://msdn.microsoft.com/library/bad617c8-f84c-4d94-8852-60af400810e9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkAssembly">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Assembly AjaxFrameworkAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly AjaxFrameworkAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AjaxFrameworkAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Assembly ^ AjaxFrameworkAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AjaxFrameworkAssembly : System.Reflection.Assembly" Usage="System.Web.UI.ScriptManager.AjaxFrameworkAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el ensamblado de marco de Ajax que usan los componentes de la página.</summary>
        <value>Ensamblado de marco de Ajax.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AjaxFrameworkMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.AjaxFrameworkMode AjaxFrameworkMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AjaxFrameworkMode As AjaxFrameworkMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AjaxFrameworkMode AjaxFrameworkMode { System::Web::UI::AjaxFrameworkMode get(); void set(System::Web::UI::AjaxFrameworkMode value); };" />
      <MemberSignature Language="F#" Value="member this.AjaxFrameworkMode : System.Web.UI.AjaxFrameworkMode with get, set" Usage="System.Web.UI.ScriptManager.AjaxFrameworkMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AjaxFrameworkMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica cómo se incluirán en el cliente los scripts de cliente de la biblioteca de cliente de Microsoft Ajax.</summary>
        <value>Valor de enumeración <see cref="T:System.Web.UI.AjaxFrameworkMode" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> propiedad para habilitar todos los archivos de script de Ajax en ASP.NET, para deshabilitar todos los archivos de script de Ajax en ASP.NET, o para incluir explícitamente los archivos de script individuales.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo establecer el <xref:System.Web.UI.ScriptManager.AjaxFrameworkMode%2A> propiedad `Explicit` con el fin de indicar que se pueden especificar explícitamente las secuencias de comandos.  
  
```  
<asp:ScriptManager ID="sm1" AjaxFrameworkMode="Explicit" runat="server">   
<Scripts>   
    <asp:ScriptReference Name="MicrosoftAjaxCore.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxComponentModel.js" />    
    <asp:ScriptReference Name="MicrosoftAjaxSerialization.js" />   
    <asp:ScriptReference Name="MicrosoftAjaxNetwork.js" />       
</Scripts>   
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.AjaxFrameworkMode" />
      </Docs>
    </Member>
    <Member MemberName="AllowCustomErrorsRedirect">
      <MemberSignature Language="C#" Value="public bool AllowCustomErrorsRedirect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowCustomErrorsRedirect" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowCustomErrorsRedirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowCustomErrorsRedirect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowCustomErrorsRedirect : bool with get, set" Usage="System.Web.UI.ScriptManager.AllowCustomErrorsRedirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina si se usa la sección de errores personalizados del archivo Web.config durante un error en un postback asincrónico.</summary>
        <value>
          <see langword="true" /> si se usa el valor de errores personalizados del archivo Web.config para determinar el comportamiento del error durante los postbacks asincrónicos; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento se desencadena cuando se produce un error de página durante los postbacks asincrónicos. ¿Cómo se envían los errores en el servidor al cliente depende de la <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> propiedad, el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad y la sección de errores personalizados del archivo Web.config.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.AsyncPostBackErrorEventArgs&gt; AsyncPostBackError" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AsyncPostBackError As EventHandler(Of AsyncPostBackErrorEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::AsyncPostBackErrorEventArgs ^&gt; ^ AsyncPostBackError;" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackError : EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; " Usage="member this.AsyncPostBackError : System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.AsyncPostBackErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando hay un error de página durante un postback asincrónico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento se desencadena cuando se produce un error de página durante los postbacks asincrónicos. ¿Cómo se envían los errores en el servidor al cliente depende de la <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> propiedad, el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad y la sección de errores personalizados del archivo Web.config.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo controlar el <xref:System.Web.UI.ScriptManager.AsyncPostBackError> eventos para establecer el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad al mensaje de error de excepción de servidor (que se envía al cliente).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackErrorMessage">
      <MemberSignature Language="C#" Value="public string AsyncPostBackErrorMessage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackErrorMessage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackErrorMessage As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackErrorMessage { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackErrorMessage : string with get, set" Usage="System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el mensaje de error que se envía al cliente cuando se produce una excepción de servidor no controlada durante un postback asincrónico.</summary>
        <value>Mensaje de error. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento se desencadena cuando se produce un error de página durante los postbacks asincrónicos. ¿Cómo se envían los errores en el servidor al cliente depende de la <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> propiedad, el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad y la sección de errores personalizados del archivo Web.config.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo controlar el <xref:System.Web.UI.ScriptManager.AsyncPostBackError> eventos para establecer el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad al mensaje de error de excepción de servidor (que se envía al cliente).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackSourceElementID">
      <MemberSignature Language="C#" Value="public string AsyncPostBackSourceElementID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AsyncPostBackSourceElementID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncPostBackSourceElementID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AsyncPostBackSourceElementID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackSourceElementID : string" Usage="System.Web.UI.ScriptManager.AsyncPostBackSourceElementID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.AsyncPostBackSourceElementID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el identificador único del control que produjo el postback asincrónico.</summary>
        <value>Identificador único de un control, si el control tiene un identificador; de lo contrario, es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.AsyncPostBackSourceElementID%2A> propiedad contiene el valor del identificador de control que provocó el postback asincrónico, que puede ser uno de los siguientes:  
  
-   Una devolución de datos de un control que está dentro de un <xref:System.Web.UI.UpdatePanel> control cuya <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> propiedad está establecida en `true` (valor predeterminado).  
  
-   Una devolución de datos de un control que es un desencadenador para un <xref:System.Web.UI.UpdatePanel> control.  
  
-   Una devolución de datos de un control que se registra mediante una llamada a la <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> método de la <xref:System.Web.UI.ScriptManager> control.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AsyncPostBackTimeout">
      <MemberSignature Language="C#" Value="public int AsyncPostBackTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AsyncPostBackTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPostBackTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AsyncPostBackTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPostBackTimeout : int with get, set" Usage="System.Web.UI.ScriptManager.AsyncPostBackTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(90)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica el tiempo, en segundos, que transcurrirá antes de que se agote el tiempo de espera de postbacks asincrónicos si no se recibe ninguna respuesta.</summary>
        <value>Entero que representa el tiempo de espera en segundos. El valor predeterminado es 90 segundos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationService">
      <MemberSignature Language="C#" Value="public System.Web.UI.AuthenticationServiceManager AuthenticationService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.AuthenticationServiceManager AuthenticationService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AuthenticationService As AuthenticationServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::AuthenticationServiceManager ^ AuthenticationService { System::Web::UI::AuthenticationServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationService : System.Web.UI.AuthenticationServiceManager" Usage="System.Web.UI.ScriptManager.AuthenticationService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.AuthenticationServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Web.UI.AuthenticationServiceManager" /> asociado a la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</summary>
        <value>Objeto <see cref="T:System.Web.UI.AuthenticationServiceManager" /> de la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.AuthenticationServiceManager> objeto devuelto por esta propiedad representa el servicio de autenticación que se registra con la página. El servicio de autenticación se puede definir en el <xref:System.Web.UI.ScriptManager> control o en un asociado <xref:System.Web.UI.ScriptManagerProxy> control.  
  
 Puede utilizar el servicio de autenticación de ASP.NET o usar un servicio de autenticación personalizada. Puede agregar el servicio personalizado en el marcado mediante la inclusión de un `AuthenticationService` elemento dentro de la `asp:ScriptManager` elemento en la página, tal como se muestra en el ejemplo siguiente.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <AuthenticationService Path="MyAuthenticationService.asmx" />  
</asp:ScriptManager>  
```  
  
 Puede configurar mediante programación el <xref:System.Web.UI.AuthenticationServiceManager> objeto. Los servicios se registran con el <xref:System.Web.UI.ScriptManager> control durante la página <xref:System.Web.UI.Control.PreRender> fase del ciclo de vida.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientNavigateHandler">
      <MemberSignature Language="C#" Value="public string ClientNavigateHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientNavigateHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientNavigateHandler As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ClientNavigateHandler { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ClientNavigateHandler : string with get, set" Usage="System.Web.UI.ScriptManager.ClientNavigateHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del método que controla el evento [Sys.Application.navigate](http://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) en el cliente.</summary>
        <value>El nombre del método que controla el [Sys.Application.navigate] (http://msdn.microsoft.com/library/79ac04af-18b4-4106-9ab7-9cb10fbd0b93) eventos en el cliente.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositeScript">
      <MemberSignature Language="C#" Value="public System.Web.UI.CompositeScriptReference CompositeScript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.CompositeScriptReference CompositeScript" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.CompositeScript" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompositeScript As CompositeScriptReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::CompositeScriptReference ^ CompositeScript { System::Web::UI::CompositeScriptReference ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompositeScript : System.Web.UI.CompositeScriptReference" Usage="System.Web.UI.ScriptManager.CompositeScript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.CompositeScriptReference</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una referencia al script compuesto que admite la página web.</summary>
        <value>Referencia al script compuesto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información, consulte [combinación de Scripts de cliente en un Script compuesto](http://msdn.microsoft.com/library/d0f608d0-b4c8-4795-990b-ede68c1239b3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyPageUrl">
      <MemberSignature Language="C#" Value="public virtual string EmptyPageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyPageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property EmptyPageUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EmptyPageUrl { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EmptyPageUrl : string with get, set" Usage="System.Web.UI.ScriptManager.EmptyPageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor(typeof(System.Web.UI.Design.UrlEditor), typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una dirección URL en una página web en blanco.</summary>
        <value>Dirección URL que se usará si la página web de destino está vacía.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.EmptyPageUrl%2A> propiedad es compatible con el historial del explorador de Ajax.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdn">
      <MemberSignature Language="C#" Value="public bool EnableCdn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdn" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdn" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCdn : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableCdn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determina si la página actual carga referencias de script de cliente desde rutas de acceso CDN (Content Delivery Network).</summary>
        <value>Es <see langword="true" /> si las referencias de script de cliente se cargan desde rutas de acceso CDN; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No establezca esta propiedad en `true` si establece <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> a `true` ya.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCdnFallback">
      <MemberSignature Language="C#" Value="public bool EnableCdnFallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableCdnFallback" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableCdnFallback As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableCdnFallback { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableCdnFallback : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableCdnFallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Habilita la copia local de un script para cargar en caso de que la CDN (Content Delivery Network) no esté disponible.</summary>
        <value>
          <see langword="true" /> si está habilitado el valor de la CDN de reserva; de lo contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableHistory">
      <MemberSignature Language="C#" Value="public bool EnableHistory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableHistory" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableHistory" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableHistory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableHistory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableHistory : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableHistory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si la página web admite la administración de los puntos de historial.</summary>
        <value>Es <see langword="true" /> si la página web permite agregar los puntos del historial a la pila del historial del explorador; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Web.UI.ScriptManager.EnableHistory%2A> propiedad para habilitar la administración del historial en una página Web.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePageMethods">
      <MemberSignature Language="C#" Value="public bool EnablePageMethods { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePageMethods" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePageMethods As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePageMethods { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePageMethods : bool with get, set" Usage="System.Web.UI.ScriptManager.EnablePageMethods" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se puede llamar desde script de cliente a los métodos de página estáticos públicos de una página ASP.NET.</summary>
        <value>
          <see langword="true" /> si se puede llamar a los métodos de página estáticos en una página ASP.NET desde script de cliente, como métodos web; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede agregar métodos de página estática a una página ASP.NET y marcarlos como métodos Web. Se pueden, a continuación, llamar a estos métodos desde el script como si formaran parte de un servicio Web, pero sin necesidad de crear un archivo .asmx independiente. Para crear los métodos Web en una página, importe el <xref:System.Web.Services> espacio de nombres y agregue un <xref:System.Web.Services.WebMethodAttribute> atributo a cada método estático que desea exponer. Los métodos deben marcarse como públicos.  
  
 Para obtener más información, consulte [exponer servicios Web en el Script de cliente AJAX de ASP.NET](http://msdn.microsoft.com/library/fe3f6e9e-0acd-44c9-bf0f-0a8598fc13b8).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablePartialRendering">
      <MemberSignature Language="C#" Value="public bool EnablePartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablePartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property EnablePartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnablePartialRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnablePartialRendering : bool with get, set" Usage="System.Web.UI.ScriptManager.EnablePartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que habilita la representación parcial de una página, lo que, a su vez, permite actualizar regiones de la página individualmente mediante el uso de controles <see cref="T:System.Web.UI.UpdatePanel" />.</summary>
        <value>
          <see langword="true" /> si la representación parcial está habilitada y se suprimen las actualizaciones completas de página; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Incluso si la <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> propiedad es `true`, representación parcial de página podría no producirse. El explorador puede que no admitan la representación parcial de página, o la <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> propiedad está establecida en `false`.  
  
 Puede invalidar el valor de la <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> propiedad en tiempo de ejecución durante o antes de la página <xref:System.Web.UI.Control.Init> eventos. Si intenta cambiar esta propiedad después de la página <xref:System.Web.UI.Control.Init> se ha producido el evento, un <xref:System.InvalidOperationException> es una excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> se establece después de que se produce el evento <see cref="E:System.Web.UI.Control.Init" /> de la página.</exception>
        <altmember cref="T:System.Web.UI.UpdatePanel" />
        <altmember cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="EnableScriptGlobalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptGlobalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptGlobalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptGlobalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptGlobalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableScriptGlobalization : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableScriptGlobalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Web.UI.ScriptManager" /> representa script que admite que se analice y se aplique formato a la información específica de la referencia cultural.</summary>
        <value>Es <see langword="true" /> si se puede mostrar la información específica de la referencia cultural; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Web.UI.ScriptManager.EnableScriptGlobalization%2A> propiedad está establecida en `true`, las funciones de ECMAScript (JavaScript) globalizadas, como el método mostrarán información específica de la referencia cultural. La referencia cultural se puede establecer en el explorador, en el código de servidor o en el archivo de configuración del sitio Web.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableScriptLocalization">
      <MemberSignature Language="C#" Value="public bool EnableScriptLocalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableScriptLocalization" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableScriptLocalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableScriptLocalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableScriptLocalization : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableScriptLocalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control <see cref="T:System.Web.UI.ScriptManager" /> representa versiones localizadas de archivos de script.</summary>
        <value>
          <see langword="true" /> si se van a representar archivos de script localizados; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> propiedad está establecida en `true`, el <xref:System.Web.UI.ScriptManager> objeto recuperará los archivos de script para la referencia cultural actual, si existen. Por ejemplo, una página puede especificar un archivo de script denominado CustomScript.js. Si la referencia cultural se establece en fr-CA, el <xref:System.Web.UI.ScriptManager> objeto intentará recuperar un archivo de script que se denomina CustomScript.fr-CA.js.  
  
> [!NOTE]
>  Para evitar que un archivo de script que se procesa dos veces el <xref:System.Web.UI.ScriptManager.EnableScriptLocalization%2A> propiedad no debe modificarse durante un postback asincrónico.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSecureHistoryState">
      <MemberSignature Language="C#" Value="public bool EnableSecureHistoryState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSecureHistoryState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableSecureHistoryState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableSecureHistoryState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableSecureHistoryState : bool with get, set" Usage="System.Web.UI.ScriptManager.EnableSecureHistoryState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se debe cifrar la cadena de estado del historial.</summary>
        <value>Es <see langword="true" /> si se debe cifrar la cadena de estado del historial; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!WARNING]
>  Esta propiedad debe ***nunca*** establecerse `false` en un sitio web de producción.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrent">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptManager GetCurrent (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.UI.ScriptManager GetCurrent(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetCurrent(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::UI::ScriptManager ^ GetCurrent(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="static member GetCurrent : System.Web.UI.Page -&gt; System.Web.UI.ScriptManager" Usage="System.Web.UI.ScriptManager.GetCurrent page" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Instancia de la página de la que se va a recuperar <see cref="T:System.Web.UI.ScriptManager" />.</param>
        <summary>Obtiene la instancia de <see cref="T:System.Web.UI.ScriptManager" /> para un objeto <see cref="T:System.Web.UI.Page" /> dado.</summary>
        <returns>Instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual para el objeto <see cref="T:System.Web.UI.Page" /> seleccionado o <see langword="null" /> si no se define ninguna instancia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método estático para determinar si un <xref:System.Web.UI.ScriptManager> control está en una página o para tener acceso a las propiedades y métodos de un <xref:System.Web.UI.ScriptManager> controlar cuando no conoce su identificador.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredArrayDeclarations">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredArrayDeclaration&gt; GetRegisteredArrayDeclarations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredArrayDeclarations" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredArrayDeclarations () As ReadOnlyCollection(Of RegisteredArrayDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredArrayDeclaration ^&gt; ^ GetRegisteredArrayDeclarations();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredArrayDeclarations : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;" Usage="scriptManager.GetRegisteredArrayDeclarations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredArrayDeclaration&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una colección de solo lectura de las declaraciones de matriz de ECMAScript (JavaScript) que se registraron anteriormente con el objeto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Colección genérica que contiene las declaraciones de matriz.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterArrayDeclaration" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredClientScriptBlocks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredClientScriptBlocks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredClientScriptBlocks" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredClientScriptBlocks () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredClientScriptBlocks();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredClientScriptBlocks : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredClientScriptBlocks " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una colección de solo lectura de los bloques de script de cliente que se registraron anteriormente con el control <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <returns>Colección genérica que contiene bloques de script de cliente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bloques de script de cliente se registran con el <xref:System.Web.UI.ScriptManager> control para su uso con un control que está dentro de un <xref:System.Web.UI.UpdatePanel> control.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredDisposeScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredDisposeScript&gt; GetRegisteredDisposeScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredDisposeScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredDisposeScripts () As ReadOnlyCollection(Of RegisteredDisposeScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredDisposeScript ^&gt; ^ GetRegisteredDisposeScripts();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredDisposeScripts : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;" Usage="scriptManager.GetRegisteredDisposeScripts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredDisposeScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una colección de solo lectura de los scripts <see langword="dispose" /> que se registraron anteriormente con el objeto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Colección genérica que contiene scripts <see langword="dispose" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `dispose` script ejecuta cuando el <xref:System.Web.UI.UpdatePanel> control se actualiza o elimina.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredExpandoAttributes">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredExpandoAttribute&gt; GetRegisteredExpandoAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredExpandoAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredExpandoAttributes () As ReadOnlyCollection(Of RegisteredExpandoAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredExpandoAttribute ^&gt; ^ GetRegisteredExpandoAttributes();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredExpandoAttributes : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;" Usage="scriptManager.GetRegisteredExpandoAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredExpandoAttribute&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una colección de solo lectura de atributos personalizados (expando) que se registraron anteriormente con el objeto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Colección genérica que contiene atributos personalizados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un atributo personalizado es un par nombre/valor que se puede leer y establecer por script de cliente.  
  
   
  
## Examples  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A>  
  
 <xref:System.Web.UI.RegisteredExpandoAttribute>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredHiddenFields">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredHiddenField&gt; GetRegisteredHiddenFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredHiddenFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredHiddenFields () As ReadOnlyCollection(Of RegisteredHiddenField)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredHiddenField ^&gt; ^ GetRegisteredHiddenFields();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredHiddenFields : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;" Usage="scriptManager.GetRegisteredHiddenFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredHiddenField&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una colección de solo lectura de los campos ocultos que se registraron anteriormente con el objeto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Colección genérica que contiene campos ocultos.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.RegisteredHiddenField" />
        <altmember cref="Overload:System.Web.UI.ScriptManager.RegisterHiddenField" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredOnSubmitStatements">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredOnSubmitStatements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredOnSubmitStatements" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredOnSubmitStatements () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredOnSubmitStatements();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredOnSubmitStatements : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredOnSubmitStatements " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una colección de solo lectura de las instrucciones <see langword="onsubmit" /> que se registraron anteriormente con el objeto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Colección genérica que contiene instrucciones <see langword="onsubmit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `onsubmit` instrucción es ECMAScript (JavaScript) que se ejecuta cuando se envía el formulario.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredStartupScripts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Web.UI.RegisteredScript&gt; GetRegisteredStartupScripts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetRegisteredStartupScripts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRegisteredStartupScripts () As ReadOnlyCollection(Of RegisteredScript)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Web::UI::RegisteredScript ^&gt; ^ GetRegisteredStartupScripts();" />
      <MemberSignature Language="F#" Value="member this.GetRegisteredStartupScripts : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;" Usage="scriptManager.GetRegisteredStartupScripts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Web.UI.RegisteredScript&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una colección de solo lectura de los scripts de inicio que se registraron anteriormente con el objeto <see cref="T:System.Web.UI.Page" />.</summary>
        <returns>Colección genérica que contiene scripts de inicio.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un script de inicio es el script de cliente que está asociado a un control que se ejecuta cuando se inicia el control.  
  
   
  
## Examples  
 <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>  
  
 <xref:System.Web.UI.ScriptManager.GetRegisteredStartupScripts%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStateString">
      <MemberSignature Language="C#" Value="public string GetStateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetStateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.GetStateString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetStateString();" />
      <MemberSignature Language="F#" Value="member this.GetStateString : unit -&gt; string" Usage="scriptManager.GetStateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera una cadena que contiene pares clave-valor que representan el estado de la página web.</summary>
        <returns>Cadena que contiene pares clave-valor que representan el estado de la página web.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDebuggingEnabled">
      <MemberSignature Language="C#" Value="public bool IsDebuggingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDebuggingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDebuggingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDebuggingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDebuggingEnabled : bool" Usage="System.Web.UI.ScriptManager.IsDebuggingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se representarán las versiones de depuración de las bibliotecas de scripts de cliente.</summary>
        <value>
          <see langword="true" /> si la solicitud actual se ejecuta en modo de depuración; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> propiedad devuelve `false` cuando cualquiera de las condiciones siguientes es verdadera:  
  
-   En el elemento del archivo de configuración, el `retail` atributo está establecido en `true`. Esto invalida todas las demás opciones.  
  
-   El <xref:System.Web.UI.ScriptManager.ScriptMode%2A> propiedad está establecida en `Auto` o a `Inherit`, y no está habilitada la depuración en el `compilation` sección del archivo Web.config raíz de la aplicación.  
  
-   La propiedad <xref:System.Web.UI.ScriptManager.ScriptMode%2A> se establece en `Release`.  
  
    > [!NOTE]
    >  El `debug` atributo de la directiva no afecta a aplicaciones habilitadas para Ajax ASP.NET. El <xref:System.Web.UI.ScriptManager> control sólo utiliza los valores en el archivo Web.config y en su <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> y <xref:System.Web.UI.ScriptManager.ScriptMode%2A> propiedades para determinar si se debe representar secuencias de comandos de depuración.  
  
 Para obtener más información, consulte [Tracing Ajax Applications Overview y depuración](http://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpContext.IsDebuggingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="IsInAsyncPostBack">
      <MemberSignature Language="C#" Value="public bool IsInAsyncPostBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInAsyncPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInAsyncPostBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInAsyncPostBack { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInAsyncPostBack : bool" Usage="System.Web.UI.ScriptManager.IsInAsyncPostBack" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.UI.IScriptManagerInternal.IsInAsyncPostBack</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el postback actual se ejecuta en modo de representación parcial.</summary>
        <value>
          <see langword="true" /> si el postback actual se ejecuta en modo de representación parcial; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> propiedad en combinación con la <xref:System.Web.UI.Page.IsPostBack%2A> propiedad para distinguir entre la carga de página inicial, una actualización parcial de página y una actualización de página completa en <xref:System.Web.UI.Control.Load>, <xref:System.Web.UI.Page.InitComplete>, o <xref:System.Web.UI.Control.PreRender> eventos.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
      </Docs>
    </Member>
    <Member MemberName="IsNavigating">
      <MemberSignature Language="C#" Value="public bool IsNavigating { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNavigating" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.IsNavigating" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNavigating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNavigating { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNavigating : bool" Usage="System.Web.UI.ScriptManager.IsNavigating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si actualmente se controla un evento <see cref="E:System.Web.UI.ScriptManager.Navigate" />.</summary>
        <value>
          <see langword="true" /> si se controla el evento <see cref="E:System.Web.UI.ScriptManager.Navigate" />; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.ScriptManager.IsNavigating%2A> propiedad para determinar si el <xref:System.Web.UI.ScriptManager.Navigate> ha generado el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection);" />
      <MemberSignature Language="F#" Value="abstract member LoadPostData : string * System.Collections.Specialized.NameValueCollection -&gt; bool&#xA;override this.LoadPostData : string * System.Collections.Specialized.NameValueCollection -&gt; bool" Usage="scriptManager.LoadPostData (postDataKey, postCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Identificador de clave del control.</param>
        <param name="postCollection">Colección de todos los datos entrantes que se van a exponer.</param>
        <summary>Lee los datos de formulario que se exponen en el servidor desde el explorador y determina el origen del postback asincrónico.</summary>
        <returns>Es <see langword="true" /> si el estado del control <see cref="T:System.Web.UI.ScriptManager" /> cambió a consecuencia del postback; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.LoadPostData%2A> método se utiliza principalmente los desarrolladores de controles para extender la funcionalidad de la <xref:System.Web.UI.ScriptManager> control.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <Member MemberName="LoadScriptsBeforeUI">
      <MemberSignature Language="C#" Value="public bool LoadScriptsBeforeUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LoadScriptsBeforeUI" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadScriptsBeforeUI As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LoadScriptsBeforeUI { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LoadScriptsBeforeUI : bool with get, set" Usage="System.Web.UI.ScriptManager.LoadScriptsBeforeUI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si los scripts se cargan antes o después de cargar el marcado de la interfaz de usuario de la página.</summary>
        <value>
          <see langword="true" /> si los scripts se cargan antes del marcado de la interfaz de usuario; <see langword="false" /> si los scripts se cargan después del marcado de la interfaz de usuario.  El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> propiedad determina cómo los scripts en el <xref:System.Web.UI.ScriptManager.Scripts%2A> recopilación se cargan en relación con el marcado de la página de la interfaz de usuario.  
  
 Cuando el <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> propiedad es `true`, un `script` elemento se representa antes de carga el marcado de la interfaz de usuario de la página. En este escenario, si los elementos de interfaz de usuario se definen en las secuencias de comandos, la interfaz de usuario será totalmente funcional cuando se carga. Sin embargo, si el script tiene acceso a los elementos de interfaz de usuario en el marcado para el que aún no se han creado instancias, podría producirse un error. Para asegurarse de que se cargan los elementos de interfaz de usuario para acceder a ellos, controle el evento de la clase.  
  
 Cuando el <xref:System.Web.UI.ScriptManager.LoadScriptsBeforeUI%2A> propiedad es `false`, un `script` se representa el elemento después de representa el marcado de la interfaz de usuario de la página. En este escenario, la interfaz de usuario se carga más rápidamente, pero podría no ser completamente funcional si las secuencias de comandos que definen los elementos de interfaz de usuario adicionales no han terminado de cargarse.  
  
 No establezca esta propiedad en `true` si establece <xref:System.Web.UI.ScriptManager.EnableCdn%2A> a `true` ya.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ScriptManager.Scripts" />
        <altmember cref="T:System.Web.UI.ScriptReference" />
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; Navigate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.HistoryEventArgs&gt; Navigate" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.Navigate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Navigate As EventHandler(Of HistoryEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::HistoryEventArgs ^&gt; ^ Navigate;" />
      <MemberSignature Language="F#" Value="member this.Navigate : EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; " Usage="member this.Navigate : System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.HistoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el usuario hace clic en el botón **Atrás** o **Adelante** del explorador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un usuario hace clic en el explorador **volver** botón, el explorador se desplaza a través de direcciones URL visitadas previamente, que pueden incluir direcciones URL que contienen datos de estado del punto del historial. Si el código de cliente en la página Web detecta que la dirección URL contiene datos de estado del historial, realiza una solicitud a la página del servidor. Esto actúa como un evento de postback y el <xref:System.Web.UI.ScriptManagerProxy> control de servidor provoca la `Navigate` eventos. Puede controlar este evento y volver a crear la página según sea necesario en la aplicación Web mediante el uso de los datos de estado que se pasan con el evento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAsyncPostBackError">
      <MemberSignature Language="C#" Value="protected internal virtual void OnAsyncPostBackError (System.Web.UI.AsyncPostBackErrorEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnAsyncPostBackError(class System.Web.UI.AsyncPostBackErrorEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnAsyncPostBackError(System.Web.UI.AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnAsyncPostBackError (e As AsyncPostBackErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnAsyncPostBackError(System::Web::UI::AsyncPostBackErrorEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAsyncPostBackError : System.Web.UI.AsyncPostBackErrorEventArgs -&gt; unit&#xA;override this.OnAsyncPostBackError : System.Web.UI.AsyncPostBackErrorEventArgs -&gt; unit" Usage="scriptManager.OnAsyncPostBackError e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.AsyncPostBackErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Datos del evento de error.</param>
        <summary>Genera el evento <see cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.AsyncPostBackError> evento se desencadena cuando se produce un error de página durante los postbacks asincrónicos. ¿Cómo se envían los errores en el servidor al cliente depende de la <xref:System.Web.UI.ScriptManager.AllowCustomErrorsRedirect%2A> propiedad, el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad y la sección de errores personalizados del archivo Web.config.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo controlar el <xref:System.Web.UI.ScriptManager.AsyncPostBackError> eventos para establecer el <xref:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage%2A> propiedad al mensaje de error de excepción de servidor (que se envía al cliente).  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/CS/ScriptManager_AsyncPostBackErrorMessageCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.AsyncPostBackErrorMessage#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.AsyncPostBackErrorMessage/VB/ScriptManager_AsyncPostBackErrorMessageVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.ScriptManager.AsyncPostBackError" />
        <altmember cref="P:System.Web.UI.ScriptManager.AsyncPostBackErrorMessage" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInit : EventArgs -&gt; unit&#xA;override this.OnInit : EventArgs -&gt; unit" Usage="scriptManager.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Datos del evento.</param>
        <summary>Provoca el evento <see cref="E:System.Web.UI.Control.Init" /> y comprueba que haya tan solo un control <see cref="T:System.Web.UI.ScriptManager" /> en la página.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Hay más de una instancia de <see cref="T:System.Web.UI.ScriptManager" /> en la página.</exception>
        <block subset="none" type="overrides">
          <para>Al reemplazar este método, llame a la base de <see cref="M:System.Web.UI.ScriptManager.OnInit(System.EventArgs)" /> método para que los archivos de script se controlan correctamente para la representación parcial de página.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreRender : EventArgs -&gt; unit&#xA;override this.OnPreRender : EventArgs -&gt; unit" Usage="scriptManager.OnPreRender e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Datos del evento.</param>
        <summary>Provoca el evento <see cref="E:System.Web.UI.Control.PreRender" /> y registra los archivos y servicios de script para las actualizaciones parciales de página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener información sobre DOM, vea la [Document Object Model (DOM) Level 1 Specification](http://go.microsoft.com/fwlink/?LinkId=73305) en el sitio Web de World Wide Web Consortium (W3C).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El explorador que realizó la solicitud de página parcial no admite como mínimo la especificación DOM Level 1.0.</exception>
        <block subset="none" type="overrides">
          <para>Al reemplazar este método, llame a la base de <see cref="M:System.Web.UI.ScriptManager.OnPreRender(System.EventArgs)" /> método por lo que de servicios y los bloques de script se controlan correctamente para la representación parcial de página.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveCompositeScriptReference (System.Web.UI.CompositeScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveCompositeScriptReference(class System.Web.UI.CompositeScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveCompositeScriptReference(System.Web.UI.CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveCompositeScriptReference (e As CompositeScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveCompositeScriptReference(System::Web::UI::CompositeScriptReferenceEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResolveCompositeScriptReference : System.Web.UI.CompositeScriptReferenceEventArgs -&gt; unit&#xA;override this.OnResolveCompositeScriptReference : System.Web.UI.CompositeScriptReferenceEventArgs -&gt; unit" Usage="scriptManager.OnResolveCompositeScriptReference e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.CompositeScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto que representa la referencia del script compuesto.</param>
        <summary>Genera el evento <see cref="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResolveScriptReference">
      <MemberSignature Language="C#" Value="protected virtual void OnResolveScriptReference (System.Web.UI.ScriptReferenceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResolveScriptReference(class System.Web.UI.ScriptReferenceEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.OnResolveScriptReference(System.Web.UI.ScriptReferenceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResolveScriptReference (e As ScriptReferenceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResolveScriptReference(System::Web::UI::ScriptReferenceEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResolveScriptReference : System.Web.UI.ScriptReferenceEventArgs -&gt; unit&#xA;override this.OnResolveScriptReference : System.Web.UI.ScriptReferenceEventArgs -&gt; unit" Usage="scriptManager.OnResolveScriptReference e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.ScriptReferenceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto que representa el script actual.</param>
        <summary>Provoca el evento <see cref="E:System.Web.UI.ScriptManager.ResolveScriptReference" /> para cada referencia de script administrada por el control <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es invocado por el <xref:System.Web.UI.ScriptManager.OnPreRender%2A> controlador de eventos, una vez por cada <xref:System.Web.UI.ScriptReference> en el <xref:System.Web.UI.ScriptManager.Scripts%2A> colección.  
  
 El <xref:System.Web.UI.ScriptManager.ResolveScriptReference> evento se desencadena después de que las entradas duplicadas de la secuencia de comandos se han resueltos.  
  
 Invalide este método para afectar al comportamiento de bloques de script individuales en la devolución de datos o durante las actualizaciones parciales de página.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProfileService">
      <MemberSignature Language="C#" Value="public System.Web.UI.ProfileServiceManager ProfileService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ProfileServiceManager ProfileService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ProfileService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProfileService As ProfileServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ProfileServiceManager ^ ProfileService { System::Web::UI::ProfileServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProfileService : System.Web.UI.ProfileServiceManager" Usage="System.Web.UI.ScriptManager.ProfileService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ProfileServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Web.UI.ProfileServiceManager" /> asociado a la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</summary>
        <value>Objeto <see cref="T:System.Web.UI.ProfileServiceManager" /> de la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.ProfileServiceManager> objeto devuelto por esta propiedad representa el servicio de perfil que se registra con la página. El servicio de perfil se puede definir en el <xref:System.Web.UI.ScriptManager> control o en un asociado <xref:System.Web.UI.ScriptManagerProxy> control.  
  
 Puede utilizar el servicio de perfil ASP.NET o usar un servicio de perfil personalizado. Puede agregar el servicio personalizado en el marcado mediante la inclusión de un `ProfileService` elemento dentro de la `asp:ScriptManager` elemento en la página, tal como se muestra en el ejemplo siguiente.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <ProfileService LoadProperties="propertyA,propertyB"  
    Path="MyProfileService.asmx" />  
</asp:ScriptManager>  
```  
  
 Puede configurar mediante programación el <xref:System.Web.UI.ProfileServiceManager> objeto. Los servicios se registran con el <xref:System.Web.UI.ScriptManager> control durante la página <xref:System.Web.UI.Control.PreRender> fase del ciclo de vida.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostBackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostBackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaisePostBackEvent : string -&gt; unit&#xA;override this.RaisePostBackEvent : string -&gt; unit" Usage="scriptManager.RaisePostBackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Cadena de pares clave-valor que representan el estado del historial de la página web.</param>
        <summary>Procesa un evento de postback que genera el control <see cref="T:System.Web.UI.ScriptManager" /> y carga el estado del historial de la página web.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RaisePostDataChangedEvent ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RaisePostDataChangedEvent();" />
      <MemberSignature Language="F#" Value="abstract member RaisePostDataChangedEvent : unit -&gt; unit&#xA;override this.RaisePostDataChangedEvent : unit -&gt; unit" Usage="scriptManager.RaisePostDataChangedEvent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Genera eventos para el control <see cref="T:System.Web.UI.ScriptManager" /> cuando devuelve datos al servidor.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.RaisePostDataChangedEvent%2A> método se utiliza principalmente los desarrolladores de controles para extender la funcionalidad de la <xref:System.Web.UI.ScriptManager> control. Para la implementación predeterminada de la <xref:System.Web.UI.ScriptManager> control, se genera ningún evento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterArrayDeclaration">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra una declaración de matriz de ECMAScript (JavaScript) con el control <see cref="T:System.Web.UI.ScriptManager" /> para usarlo con un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y, a continuación, agrega la matriz a la página.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="static member RegisterArrayDeclaration : System.Web.UI.Control * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterArrayDeclaration (control, arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra la matriz.</param>
        <param name="arrayName">Nombre de la matriz que se va a registrar.</param>
        <param name="arrayValue">Valor o valores de la matriz que se va a registrar.</param>
        <summary>Registra una declaración de matriz de ECMAScript (JavaScript) con el control <see cref="T:System.Web.UI.ScriptManager" /> para usarlo con un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y, a continuación, agrega la matriz a la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> método para registrar una matriz de script de cliente que sea compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library. Este método registra la matriz cuando `control` representa un control que está dentro de un <xref:System.Web.UI.UpdatePanel> control que se está actualizando. Para registrar una matriz cada vez que se produce un postback asincrónico, utilice el <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar una matriz que no pertenecen a las actualizaciones parciales de página y, si desea registrar la matriz solo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> método determina si una matriz con el nombre especificado en el `arrayName` parámetro ya está registrado. Si es así, el método agrega los valores especificados en `arrayValue`. Dado que la matriz que se registrarán se basa en el <xref:System.Collections.ArrayList> (clase), se permiten duplicados. Si una matriz registrada con el nombre en `arrayName` no existe, se crea la matriz y los valores de `arrayValue` se agregan a él.  
  
 Para incluir literales de cadena en la matriz, utilice comillas simples (') o comillas dobles de escape (\\") en `arrayValue`.  
  
 Tenga en cuenta que JavaScript trata la coma (,) como delimitador de una matriz. Puede especificar varios valores de matriz pasando una cadena delimitada por comas en `arrayValue`. Separar dos elementos con una coma en `arrayValue` equivale a llamar a la <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> método dos veces, una vez por cada elemento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public static void RegisterArrayDeclaration (System.Web.UI.Page page, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterArrayDeclaration(class System.Web.UI.Page page, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterArrayDeclaration(System::Web::UI::Page ^ page, System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="static member RegisterArrayDeclaration : System.Web.UI.Page * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterArrayDeclaration (page, arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Objeto de página que registra la matriz.</param>
        <param name="arrayName">Nombre de la matriz que se va a registrar.</param>
        <param name="arrayValue">Valor o valores de la matriz que se va a registrar.</param>
        <summary>Registra una declaración de matriz de ECMAScript (JavaScript) con el control <see cref="T:System.Web.UI.ScriptManager" /> para usarlo con un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y, a continuación, agrega la matriz a la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%2A> método para registrar una matriz de script de cliente que sea compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library. Este método registra cada vez que se produce un postback asincrónico de la matriz. Para registrar una matriz de un control que está dentro de un <xref:System.Web.UI.UpdatePanel> para que se registre la matriz solo cuando se actualiza el panel de control, use el <xref:System.Web.UI.ScriptManager.RegisterArrayDeclaration%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar una matriz que no pertenecen a las actualizaciones parciales de página y, si desea registrar la matriz solo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="arrayName" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAsyncPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterAsyncPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterAsyncPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterAsyncPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member RegisterAsyncPostBackControl : System.Web.UI.Control -&gt; unit&#xA;override this.RegisterAsyncPostBackControl : System.Web.UI.Control -&gt; unit" Usage="scriptManager.RegisterAsyncPostBackControl control" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterAsyncPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control que se va a registrar para los postbacks asincrónicos.</param>
        <summary>Registra un control como desencadenador de postbacks asincrónicos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> método le permite registrar controles de servidor Web como desencadenadores para que realicen un postback asincrónico en lugar de un postback sincrónico. Cuando el <xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A> propiedad de un <xref:System.Web.UI.UpdatePanel> control está establecido en `true` (que es el valor predeterminado), los controles dentro de la devolución de datos la <xref:System.Web.UI.UpdatePanel> control se registran automáticamente como controles de postback asincrónicos.  
  
 Use la <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> método para registrar los controles fuera de un <xref:System.Web.UI.UpdatePanel> control como desencadenadores para los postbacks asincrónicos y posiblemente actualizar el contenido de un panel de actualización. Para actualizar un <xref:System.Web.UI.UpdatePanel> controlar mediante programación, llame a la <xref:System.Web.UI.UpdatePanel.Update%2A> método.  
  
 Puede agregar el desencadenador mediante declaración con el `Triggers` elemento de la <xref:System.Web.UI.UpdatePanel> control. En Visual Studio, utilice el diseñador **UpdatePanelTrigger Editor de la colección** cuadro de diálogo.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo llamar a la <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> método para registrar un <xref:System.Web.UI.WebControls.Button> controlar de manera que produce una actualización de un <xref:System.Web.UI.UpdatePanel> contenido del control. El <xref:System.Web.UI.WebControls.Button> control no está dentro del <xref:System.Web.UI.UpdatePanel> control. Se muestran dos botones: `Button1` y `Button2`. `Button1` actualiza el contenido del panel, y `Button2` actualiza toda la página.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager1CS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager1VB.aspx#1)]  
  
 El ejemplo siguiente muestra cómo llamar a la <xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> controlar el método para registrar un usuario para que produce una actualización de un <xref:System.Web.UI.UpdatePanel> contenido del control. El primer ejemplo muestra una página con el control de usuario. El segundo ejemplo muestra el control de usuario.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/CS/ScriptManager2CS.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterAsyncPostBackControl#2](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterAsyncPostBackControl/VB/ScriptManager2VB.aspx#2)]  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El control registrado no implementa la interfaz <see cref="T:System.Web.UI.INamingContainer" />, <see cref="T:System.Web.UI.IPostBackDataHandler" /> o <see cref="T:System.Web.UI.IPostBackEventHandler" />.</exception>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
        <altmember cref="M:System.Web.UI.UpdatePanel.Update" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un bloque de script de cliente con el control <see cref="T:System.Web.UI.ScriptManager" /> para usarlo con un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y, a continuación, agrega el bloque de script a la página.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptBlock : System.Web.UI.Control * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptBlock (control, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra el bloque de script de cliente.</param>
        <param name="type">Tipo del bloque de script de cliente. Este parámetro se suele especificar mediante el uso del operador <see langword="typeof" /> (C#) o <see langword="GetType" /> (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="key">Identificador único del bloque de script.</param>
        <param name="script">Script.</param>
        <param name="addScriptTags">
          <see langword="true" /> para incluir el bloque de script entre etiquetas <see langword="&lt;script&gt;" /> y <see langword="&lt;/script&gt;" />; de lo contrario, <see langword="false" />.</param>
        <summary>Registra un bloque de script de cliente con el control <see cref="T:System.Web.UI.ScriptManager" /> para usarlo con un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y, a continuación, agrega el bloque de script a la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> método para registrar un bloque de script de cliente que sea compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library. Bloques de script de cliente que están registrados con este método se envían a la página solo cuando `control` representa un control que está dentro de un <xref:System.Web.UI.UpdatePanel> control que se está actualizando. Para registrar un bloque de script cada vez que se produce un postback asincrónico, utilice el <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga de este método.  
  
 Si desea registrar un bloque de script que no pertenecen a las actualizaciones parciales de página y, si desea registrar el bloque de script sólo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 Si `addScriptTags` es `true`, <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> método agrega `<script>` etiquetas a ambos lados del bloque de script. Pasar `false` si desea crear `<script>` etiquetas usted mismo, por ejemplo, si desea establecer los atributos de específico `<script>` etiquetas. Si `addScriptTags` es `false` y `script` parámetro contiene varios bloques de scripts, se produce una excepción.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%2A> método agrega un bloque de script a la página después de la apertura `<form>` etiqueta. No se garantiza que los bloques de script que se generan en el mismo orden en que se registran. Si es importante el orden de los bloques de script, concatenar los bloques de script en una sola cadena (por ejemplo, mediante el <xref:System.Text.StringBuilder> objeto) y, a continuación, registrarlos como un bloque de script de cliente único.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/CS/ScriptManager_RegisterClientScriptBlockCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterClientScriptBlock#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/vb/ScriptManager_RegisterClientScriptBlockVB.aspx#1)]  
  
 [!code-xml[System.Web.UI.ScriptManager.RegisterClientScriptBlock#2](~/samples/snippets/common/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptBlock/Common/App_Data/Contacts.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="type" /> para el bloque de script de cliente es <see langword="null" />.  \- o bien El control que registra el bloque de script es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El control que registra el bloque de script no está en el árbol de controles de la página.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptBlock (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptBlock(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptBlock(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptBlock : System.Web.UI.Page * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptBlock (page, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Objeto de página que registra el bloque de script de cliente.</param>
        <param name="type">Tipo del bloque de script de cliente. Este parámetro se suele especificar mediante el uso del operador <see langword="typeof" /> (C#) o <see langword="GetType" /> (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="key">Identificador único del bloque de script.</param>
        <param name="script">Script que se va a registrar.</param>
        <param name="addScriptTags">
          <see langword="true" /> para incluir el bloque de script entre etiquetas <see langword="&lt;script&gt;" /> y <see langword="&lt;/script&gt;" />; de lo contrario, <see langword="false" />.</param>
        <summary>Registra un bloque de script de cliente con el control <see cref="T:System.Web.UI.ScriptManager" /> para usarlo con un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y, a continuación, agrega el bloque de script a la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al registrar un bloque de script con este método, el script se representa cada vez que se produce un postback asincrónico. Para registrar un bloque de script para un control que está dentro de un <xref:System.Web.UI.UpdatePanel> controlar de manera que se registra el script solo cuando el <xref:System.Web.UI.UpdatePanel> control se actualiza, use el <xref:System.Web.UI.ScriptManager.RegisterClientScriptBlock%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga de este método.  
  
 Si desea registrar un bloque de script que no pertenecen a las actualizaciones parciales de página y, si desea registrar el bloque de script sólo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="type" /> para el bloque de script es <see langword="null" />.  \- o bien - La página que registra el bloque de script es <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un archivo script de cliente con el control <see cref="T:System.Web.UI.ScriptManager" /> para el uso con un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y, a continuación, agrega una referencia del archivo de script a la página.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptInclude : System.Web.UI.Control * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptInclude (control, type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra el archivo de script de cliente.</param>
        <param name="type">Tipo del archivo de script de cliente. Este parámetro se suele especificar mediante el uso del operador typeof (C#) o GetType (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="key">Identificador único del archivo de script.</param>
        <param name="url">Dirección URL del archivo de script.</param>
        <summary>Registra un archivo script de cliente con el control <see cref="T:System.Web.UI.ScriptManager" /> para el uso con un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y, a continuación, agrega una referencia del archivo de script a la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> método para registrar un archivo de script de cliente para una página o parte de una página que participa en actualizaciones parciales de página. Archivos de script de cliente que están registrados con este método se envían a la página solo cuando el `control` representa un control que está dentro de un <xref:System.Web.UI.UpdatePanel> control que se está actualizando. Para registrar un archivo de script cada vez que se produce un postback asincrónico, utilice el <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar un bloque de script que no pertenecen a las actualizaciones parciales de página y, si desea registrar el bloque de script sólo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> método registra un archivo de script de cliente en la página con la representación de un `script` elemento cuya etiqueta de apertura contiene un `src` atributo. El `url` parámetro se usa para establecer el `src` atributo. Para resolver las direcciones URL, use el <xref:System.Web.UI.Control.ResolveClientUrl%2A> método. Este método utiliza el contexto de la dirección URL se llama para resolver la ruta de acceso.  
  
 Tanto el <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> y <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> métodos representan archivos de script en el explorador. Si ya se ha presentado un script con el mismo tipo y la clave (para un archivo de script) o el mismo tipo y el nombre de recurso (para un recurso incrustado), el script no se procesa de nuevo.  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterClientScriptInclude#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/ScriptManager_RegisterClientScriptIncludeCS.aspx#1)]  
  
 [!code-javascript[System.Web.UI.ScriptManager.RegisterClientScriptInclude#2](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterClientScriptInclude/CS/scripts/script_alertdiv.js#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="type" /> del archivo de script de cliente es <see langword="null" />.  \- o bien - El control que registra el archivo de script es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El control que registra el archivo de script no está en el árbol de controles de la página.  \- o bien - <paramref name="url" /> es <see langword="null" />.  \- o bien - <paramref name="url" /> está vacío.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptInclude (System.Web.UI.Page page, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptInclude(class System.Web.UI.Page page, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptInclude(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptInclude(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptInclude : System.Web.UI.Page * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptInclude (page, type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Objeto de página que registra el archivo de script de cliente.</param>
        <param name="type">Tipo del archivo de script de cliente. Este parámetro se suele especificar mediante el uso del operador typeof (C#) o GetType (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="key">Identificador único del archivo de script.</param>
        <param name="url">Dirección URL del archivo de script.</param>
        <summary>Registra el script de cliente con el control <see cref="T:System.Web.UI.ScriptManager" /> cada vez que se produce un postback asincrónico y, a continuación, agrega una referencia del archivo de script a la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al registrar un archivo de script con este método, el script se representa cada vez que se produce un postback asincrónico. Para registrar un archivo de script para un control que está dentro de un <xref:System.Web.UI.UpdatePanel> controlar de manera que se registra el script solo cuando el <xref:System.Web.UI.UpdatePanel> control se actualiza, use el <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar un bloque de script que no pertenecen a las actualizaciones parciales de página y, si desea registrar el bloque de script sólo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="type" /> del archivo de script de cliente es <see langword="null" />.  \- o bien - La página que registra el archivo de script es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="url" /> es <see langword="null" />.  \- o bien - <paramref name="url" /> está vacío.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra scripts de cliente incrustados en ensamblados con el control <see cref="T:System.Web.UI.ScriptManager" /> para su uso con un control que participa en la representación parcial de página.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptResource : System.Web.UI.Control * Type * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptResource (control, type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra el script.</param>
        <param name="type">Tipo del script de cliente. Este parámetro se suele especificar mediante el uso del operador typeof (C#) o GetType (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="resourceName">Identificador del recurso.</param>
        <summary>Registra scripts de cliente incrustados en ensamblados con el control <see cref="T:System.Web.UI.ScriptManager" /> para su uso con un control que participa en la representación parcial de página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> método para registrar un script que es compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library. Se registran los recursos de script que se registran mediante este método solo cuando `control` representa un control que está dentro de un <xref:System.Web.UI.UpdatePanel> control que se actualiza. Para registrar un script cada vez que se produce un postback asincrónico, utilice el <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga de este método.  
  
 Si desea registrar un bloque de script que no pertenecen a las actualizaciones parciales de página y, si desea registrar el bloque de script sólo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> método se utiliza cuando se tiene acceso a recursos desde ensamblados a través de un controlador HTTP. Este método incluye el contenido de la dirección URL de recursos en un `script` elemento.  
  
 Tanto el <xref:System.Web.UI.ScriptManager.RegisterClientScriptInclude%2A> y <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%2A> archivos de script de carga de método en el explorador. Si ya está cargado un script con el mismo tipo y la clave (para un archivo de script) o el mismo tipo y el nombre de recurso (para un recurso incrustado), no se vuelve a cargar el script.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="type" /> del recurso de cliente es <see langword="null" />.  \- o bien - El control que registra el script es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">El control que registra el script no está en el árbol de controles de la página.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterClientScriptResource (System.Web.UI.Page page, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClientScriptResource(class System.Web.UI.Page page, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Page,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClientScriptResource(System::Web::UI::Page ^ page, Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterClientScriptResource : System.Web.UI.Page * Type * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterClientScriptResource (page, type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Objeto de página que registra el script.</param>
        <param name="type">Tipo del script de cliente. Este parámetro se suele especificar mediante el uso del operador typeof (C#) o GetType (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="resourceName">Identificador del recurso.</param>
        <summary>Registra un archivo de script de cliente que se incrusta en un ensamblado con el control <see cref="T:System.Web.UI.ScriptManager" /> cada vez que se produce un postback.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al registrar un archivo de script con este método, el script se representa cada vez que se produce un postback asincrónico. Para registrar un script para un control que está dentro de un <xref:System.Web.UI.UpdatePanel> controlar de manera que se registra el script solo cuando el <xref:System.Web.UI.UpdatePanel> control se actualiza, use el <xref:System.Web.UI.ScriptManager.RegisterClientScriptResource%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar un bloque de script que no pertenecen a las actualizaciones parciales de página y, si desea registrar el bloque de script sólo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor <paramref name="type" /> del recurso de cliente es <see langword="null" />.  \- o bien - La página que registra el script es <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterDataItem">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envía datos personalizados a los controles durante la representación parcial de la página.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem);" />
      <MemberSignature Language="F#" Value="member this.RegisterDataItem : System.Web.UI.Control * string -&gt; unit" Usage="scriptManager.RegisterDataItem (control, dataItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Control que recibe los datos.</param>
        <param name="dataItem">Datos que se envían al control.</param>
        <summary>Envía datos personalizados a un control durante la representación parcial de la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> método para enviar datos desde el servidor al cliente durante los postbacks asincrónicos, independientemente de si es el control que recibe los datos dentro de un <xref:System.Web.UI.UpdatePanel> control.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> se puede llamar el método solo durante un postback asincrónico. Para determinar si una devolución de datos es asincrónica, use la <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> propiedad. Este método invoca la sobrecarga que toma un parámetro denominado `isJsonSerialized` que se establece en `false`. Cuando el `isJsonSerialized` parámetro se establece en `false`, la cadena no se serializa como JavaScript Object Notation (JSON). Para obtener más información sobre el formato JSON, consulte el [Introducción a JSON](http://go.microsoft.com/fwlink/?LinkId=77297) sitio Web.  
  
 Los elementos de datos que están registrados con el <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> puede tener acceso a método en el script de cliente durante la,, y eventos del objeto. Al controlar estos eventos, los datos personalizados se pasan en un objeto de argumento de evento. Por ejemplo, si proporciona un controlador para el evento, los datos personalizados se pasan en la clase, que expone una propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo enviar datos a dos <xref:System.Web.UI.WebControls.Label> controles en una página durante un postback asincrónico. El <xref:System.Web.UI.WebControls.Label> controles no son dentro un <xref:System.Web.UI.UpdatePanel> control.  
  
> [!NOTE]
>  Los datos que se envían en este ejemplo tienen solo fines ilustrativos. En una aplicación real, se utilizaría el <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> método para enviar datos personalizados desde el servidor.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Durante un postback, se llama al método <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> ya se encuentra registrado para <paramref name="control" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDataItem">
      <MemberSignature Language="C#" Value="public void RegisterDataItem (System.Web.UI.Control control, string dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDataItem(class System.Web.UI.Control control, string dataItem, bool isJsonSerialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDataItem(System::Web::UI::Control ^ control, System::String ^ dataItem, bool isJsonSerialized);" />
      <MemberSignature Language="F#" Value="member this.RegisterDataItem : System.Web.UI.Control * string * bool -&gt; unit" Usage="scriptManager.RegisterDataItem (control, dataItem, isJsonSerialized)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="dataItem" Type="System.String" />
        <Parameter Name="isJsonSerialized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Control de página que recibe los datos.</param>
        <param name="dataItem">Datos que se envían al control.</param>
        <param name="isJsonSerialized">Es <see langword="true" /> para indicar que <c>dataItem</c> se serializa como JSON; en caso contrario, es <see langword="false" />.</param>
        <summary>Envía datos personalizados a un control durante la representación parcial de la página e indica si los datos están en formato de notación de objetos JavaScript (JSON).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> método para enviar datos desde el servidor al cliente durante los postbacks asincrónicos, independientemente de si es el control que recibe los datos dentro de un <xref:System.Web.UI.UpdatePanel> control.  
  
 Si el `dataItem` parámetro que se registra para `control` no se serializa como JSON, establezca el `isJsonSerialized` parámetro `false`. Esto evita la necesidad de usar la función para cada cadena que se envía al cliente. Para obtener más información sobre el formato JSON, consulte el [Introducción a JSON](http://go.microsoft.com/fwlink/?LinkId=77297) sitio Web.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> se puede llamar el método solo durante un postback asincrónico. Para determinar si una devolución de datos es asincrónica, use la <xref:System.Web.UI.ScriptManager.IsInAsyncPostBack%2A> propiedad.  
  
 Los elementos de datos que se registran mediante el <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> puede tener acceso a método en el script de cliente durante la,, y eventos del objeto. Al controlar estos eventos, los datos personalizados se pasan en un objeto de argumento de evento. Por ejemplo, si proporciona un controlador para el evento, los datos personalizados se pasan en la clase, que expone una propiedad.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo enviar datos a dos <xref:System.Web.UI.WebControls.Label> controles en una página durante un postback asincrónico. El <xref:System.Web.UI.WebControls.Label> controles no son dentro un <xref:System.Web.UI.UpdatePanel> control. En este ejemplo se muestra la sobrecarga que no tome el `isJsonSerialized` parámetro. En caso contrario, el procedimiento para recuperar la propiedad del objeto es el mismo como si no utilizó esa sobrecarga.  
  
> [!NOTE]
>  Los datos que se envían en este ejemplo tienen solo fines ilustrativos. En una aplicación real, se utilizaría el <xref:System.Web.UI.ScriptManager.RegisterDataItem%2A> método para enviar datos personalizados desde el servidor. Por ejemplo, podría utilizar el elemento de datos para enviar información sobre si se debe ocultar o mostrar elementos que no están dentro de cliente un <xref:System.Web.UI.UpdatePanel> control.  
  
 [!code-aspx-csharp[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/csharp/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/CS/ScriptManagerRegisterDataItemCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ScriptManager.RegisterDataItem#1](~/samples/snippets/visualbasic/VS_Snippets_Atlas/System.Web.UI.ScriptManager.RegisterDataItem/VB/ScriptManagerRegisterDataItemVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Durante un postback, se llama al método <see cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String,System.Boolean)" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dataItem" /> ya se encuentra registrado para <paramref name="control" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterDataItem(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDispose">
      <MemberSignature Language="C#" Value="public void RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript);" />
      <MemberSignature Language="F#" Value="member this.RegisterDispose : System.Web.UI.Control * string -&gt; unit" Usage="scriptManager.RegisterDispose (control, disposeScript)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Control al que va destinado el script <see langword="dispose" />.</param>
        <param name="disposeScript">Script <see langword="dispose" />.</param>
        <summary>Registra un script <see langword="dispose" /> para un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" />. Se ejecuta el script cuando el control <see cref="T:System.Web.UI.UpdatePanel" /> se actualiza o elimina.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> método para registrar `dispose` secuencias de comandos para los controles que están dentro de un <xref:System.Web.UI.UpdatePanel> control. Durante los postbacks asincrónicos, <xref:System.Web.UI.UpdatePanel> controles se pueden actualizar, eliminar o creados. Cuando un panel se actualiza o elimina, cualquier `dispose` scripts que se registran para los controles que están dentro de la <xref:System.Web.UI.UpdatePanel> se denominan. En escenarios de desarrollo de páginas normales, no es necesario llamar a la <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> método.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> método está pensado para su uso por los desarrolladores de controles para registrar scripts o crear controles que heredan de la <xref:System.Web.UI.IScriptControl> interfaz. Por ejemplo, podría usar un `dispose` si desarrolla un control de cliente utilizando la composición de secuencias de comandos. En el control, puede implementar <xref:System.Web.UI.IScriptControl> y representar los controles individuales. Registrar el `dispose` método de cualquier elemento que no corresponde a un componente de cliente definido como `Sys.TextBox`. Si el control personalizado compone elementos que corresponden a los componentes de cliente de Microsoft Ajax Library, es necesario registrar un `dispose` en el script, porque `dispose` se llama automáticamente. Por lo tanto, use el <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> método para los componentes que forman parte de Microsoft Ajax Library y que tienen que liberar recursos cuando ya no se utiliza un componente de cliente.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterDispose%2A> método puede llamarse varias veces para un control. Se agregan varias secuencias de comandos. El orden de los scripts de eliminación coincide con el orden en el que se registraron las secuencias de comandos.  
  
 Si registra un `dispose` script para un control que no está en un <xref:System.Web.UI.UpdatePanel> control, se produce una excepción. El `dispose` script se llama entre la y eventos de la clase.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.  \- o bien - <paramref name="disposeScript" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> no se encuentra en la página.  \- o bien - <paramref name="control" /> no está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" />.</exception>
        <altmember cref="T:System.Web.UI.IScriptControl" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public static void RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="static member RegisterExpandoAttribute : System.Web.UI.Control * string * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterExpandoAttribute (control, controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra el atributo expando.</param>
        <param name="controlId">Control que contiene el atributo personalizado en la página.</param>
        <param name="attributeName">Nombre del atributo personalizado que se va a registrar.</param>
        <param name="attributeValue">Valor del atributo personalizado.</param>
        <param name="encode">
          <see langword="true" /> para codificar el atributo personalizado que se registra; de lo contrario, <see langword="false" />.</param>
        <summary>Registra un par de nombre y valor con el control <see cref="T:System.Web.UI.ScriptManager" /> como atributo personalizado (expando) de un control especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> método para registrar una propiedad personalizado (expando) para un control que es compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterExpandoAttribute%2A> método registra un par nombre/valor como un atributo personalizado para el control especificado. La propiedad se establece dinámicamente de ECMAScript (JavaScript) para conservar la compatibilidad con XHTML marcado representado del control. Establecer `encode` a `true` si tiene que escape de caracteres en valor de la propiedad dinámica.  
  
 Si no se encuentra el control al que se agregará la propiedad dinámica, se produce un error de script.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> no está en el árbol de controles de la página.  \- o bien - <paramref name="controlId" /> es <see langword="null" />.  \- o bien - <paramref name="controlId" /> está vacío.  \- o bien - <paramref name="attributeName" /> es <see langword="null" />.  \- o bien - <paramref name="attributeName" /> está vacío.  \- o bien - <paramref name="attributeName" /> ya se ha registrado.</exception>
        <altmember cref="T:System.Web.UI.ClientScriptManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExtenderControl&lt;TExtenderControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterExtenderControl&lt;TExtenderControl&gt; (TExtenderControl extenderControl, System.Web.UI.Control targetControl) where TExtenderControl : System.Web.UI.Control, System.Web.UI.IExtenderControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterExtenderControl&lt;(class System.Web.UI.Control, class System.Web.UI.IExtenderControl) TExtenderControl&gt;(!!TExtenderControl extenderControl, class System.Web.UI.Control targetControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExtenderControl(Of TExtenderControl As {Control, IExtenderControl}) (extenderControl As TExtenderControl, targetControl As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExtenderControl&gt;&#xA; where TExtenderControl : System::Web::UI::Control, System::Web::UI::IExtenderControl virtual void RegisterExtenderControl(TExtenderControl extenderControl, System::Web::UI::Control ^ targetControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterExtenderControl : 'ExtenderControl * System.Web.UI.Control -&gt; unit (requires 'ExtenderControl :&gt; System.Web.UI.Control and 'ExtenderControl :&gt; System.Web.UI.IExtenderControl)&#xA;override this.RegisterExtenderControl : 'ExtenderControl * System.Web.UI.Control -&gt; unit (requires 'ExtenderControl :&gt; System.Web.UI.Control and 'ExtenderControl :&gt; System.Web.UI.IExtenderControl)" Usage="scriptManager.RegisterExtenderControl (extenderControl, targetControl)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterExtenderControl``1(``0,System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExtenderControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IExtenderControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="extenderControl" Type="TExtenderControl" />
        <Parameter Name="targetControl" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <typeparam name="TExtenderControl">Control que implementa la interfaz <see cref="T:System.Web.UI.IExtenderControl" />.</typeparam>
        <param name="extenderControl">Control extensor que se va a registrar.</param>
        <param name="targetControl">Control de script que extiende el control extensor.</param>
        <summary>Registra un control extensor con la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es principalmente para su uso por los desarrolladores de controles. Llame a la <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> método desde un control extensor de Ajax de ASP.NET personalizado durante su `onInit` controlador de eventos para registrar ese control con la página. Un control extensor de Ajax de ASP.NET debe registrarse para participar en la representación parcial de página.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterExtenderControl%2A> método agrega el control extensor especificado a una lista interna de controles del extensor y los controles de script de destino que extienden. Esta lista se procesa durante la <xref:System.Web.UI.Control.PreRender> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extenderControl" /> es <see langword="null" />.  \- o bien - <paramref name="targetControl" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterHiddenField">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un campo oculto.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="static member RegisterHiddenField : System.Web.UI.Control * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterHiddenField (control, hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra el campo oculto.</param>
        <param name="hiddenFieldName">Nombre del campo oculto que se va a registrar.</param>
        <param name="hiddenFieldInitialValue">Valor inicial del campo oculto.</param>
        <summary>Registra un campo oculto con el control <see cref="T:System.Web.UI.ScriptManager" /> para un control que está dentro de un control <see cref="T:System.Web.UI.UpdatePanel" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> método para registrar un campo oculto que es compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library. Este método registra el campo oculto cuando el control que registra el campo está dentro de un <xref:System.Web.UI.UpdatePanel> control que se está actualizando. Para registrar un campo oculto cada vez que se produce un postback asincrónico, utilice el <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Page%2CSystem.String%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar un campo oculto que no pertenecen a las actualizaciones parciales de página y, si desea registrar el campo oculto solo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> método crea un oculto `input` elemento en la página HTML representada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.  \- o bien - <paramref name="hiddenFieldName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> no está en el árbol de controles de la página.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public static void RegisterHiddenField (System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterHiddenField(class System.Web.UI.Page page, string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Page,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterHiddenField(System::Web::UI::Page ^ page, System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="static member RegisterHiddenField : System.Web.UI.Page * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterHiddenField (page, hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Objeto de página que registra el campo oculto.</param>
        <param name="hiddenFieldName">Nombre del campo oculto que se va a registrar.</param>
        <param name="hiddenFieldInitialValue">Valor inicial del campo oculto.</param>
        <summary>Registra un campo oculto con el control <see cref="T:System.Web.UI.ScriptManager" /> durante cada postback asincrónico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterHiddenField%2A> método para registrar un campo oculto que es compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library. Este método registra el campo oculto cada vez que se produce un postback asincrónico. Para registrar un campo oculto para un control que está dentro de un <xref:System.Web.UI.UpdatePanel> para que se registra el campo solo cuando se actualiza el panel de control, use el <xref:System.Web.UI.ScriptManager.RegisterHiddenField%28System.Web.UI.Control%2CSystem.String%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar un campo oculto que no pertenecen a las actualizaciones parciales de página y, si desea registrar el campo oculto solo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> es <see langword="null" />.  \- o bien - <paramref name="hiddenFieldName" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterNamedClientScriptResource">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra scripts por nombre de recurso de cliente incrustados en ensamblados con el control <see cref="T:System.Web.UI.ScriptManager" /> para su uso con un control que participa en la representación parcial de página.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Control control, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Control control, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Control ^ control, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterNamedClientScriptResource : System.Web.UI.Control * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterNamedClientScriptResource (control, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra el script.</param>
        <param name="resourceName">Identificador del recurso.</param>
        <summary>Registra scripts por nombre de recurso de cliente incrustados en ensamblados con el control <see cref="T:System.Web.UI.ScriptManager" /> para su uso con un control que participa en la representación parcial de página.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNamedClientScriptResource">
      <MemberSignature Language="C#" Value="public static void RegisterNamedClientScriptResource (System.Web.UI.Page page, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterNamedClientScriptResource(class System.Web.UI.Page page, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterNamedClientScriptResource(System.Web.UI.Page,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterNamedClientScriptResource(System::Web::UI::Page ^ page, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="static member RegisterNamedClientScriptResource : System.Web.UI.Page * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterNamedClientScriptResource (page, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Objeto de página que registra el script.</param>
        <param name="resourceName">Identificador del recurso.</param>
        <summary>Registra scripts por nombre de recurso de cliente incrustados en ensamblados con el control <see cref="T:System.Web.UI.ScriptManager" /> para su uso con un control que participa en la representación parcial de página.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterOnSubmitStatement">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra código ECMAScript (JavaScript) que se ejecuta cuando se envía el formulario.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="static member RegisterOnSubmitStatement : System.Web.UI.Control * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterOnSubmitStatement (control, type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra la instrucción <see langword="onsubmit" />.</param>
        <param name="type">Tipo de la instrucción de script de cliente. Este parámetro se suele especificar mediante el uso del operador typeof (C#) o GetType (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="key">Identificador único para la instrucción de script.</param>
        <param name="script">Script que se va a registrar.</param>
        <summary>Registra código ECMAScript (JavaScript) con el control <see cref="T:System.Web.UI.ScriptManager" /> para un control que se usa con un control <see cref="T:System.Web.UI.UpdatePanel" /> que se ejecuta cuando se envía el formulario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> agrega la secuencia de comandos que se ejecuta antes de que se envía el formulario, que le permite modificar el envío o cancelarlo.  
  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> método para representar un `onsubmit` instrucción que es compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library. El código JavaScript que está registrado con este método se envía a la página solo cuando el control que registra la instrucción está dentro de un <xref:System.Web.UI.UpdatePanel> control que se está actualizando. Para registrar el código con cada postback asincrónico, utilice el <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar código JavaScript que no pertenecen a las actualizaciones parciales de página y, si desea registrar el código solo una vez durante la representación de página inicial, use el <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 El *script* parámetro de la <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%2A> el método puede contener varias secuencias de comandos que se delimitan con punto y coma (;).  
  
 Para obtener más información acerca de los formularios HTML y el `onsubmit` eventos, consulte el [sitio Web de World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.  \- o bien - <paramref name="type" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> no está en el árbol de controles de la página.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public static void RegisterOnSubmitStatement (System.Web.UI.Page page, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterOnSubmitStatement(class System.Web.UI.Page page, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Page,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterOnSubmitStatement(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="static member RegisterOnSubmitStatement : System.Web.UI.Page * Type * string * string -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterOnSubmitStatement (page, type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="page">Objeto de página que registra la instrucción <see langword="onsubmit" />.</param>
        <param name="type">Tipo de la instrucción de script de cliente. Este parámetro se suele especificar mediante el uso del operador typeof (C#) o GetType (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="key">Identificador único para la instrucción de script.</param>
        <param name="script">Script que se va a registrar.</param>
        <summary>Registra código ECMAScript (JavaScript) con el control <see cref="T:System.Web.UI.ScriptManager" /> para un control que se usa con un control <see cref="T:System.Web.UI.UpdatePanel" /> que se ejecuta cuando se envía el formulario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Registrar código JavaScript con este método hace que el script se incluye cada vez que se produce un postback asincrónico.  
  
> [!NOTE]
>  No se quita el código desde cualquier postbacks asincrónicos anteriormente. Nuevo postbacks asincrónicos anexe el código para código existente para el `onsubmit` instrucción.  
  
 Para registrar el código para un control que está dentro de un <xref:System.Web.UI.UpdatePanel> controlar de manera que se registra el código solo cuando el <xref:System.Web.UI.UpdatePanel> control se actualiza, use el <xref:System.Web.UI.ScriptManager.RegisterOnSubmitStatement%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%29> sobrecarga de este método.  
  
 Si desea registrar código JavaScript que no pertenecen a las actualizaciones parciales de página y, si desea registrar el código solo una vez durante la representación de página inicial, use el <xref:System.Web.UI.Page.RegisterOnSubmitStatement%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="page" /> es <see langword="null" />.  \- o bien - <paramref name="type" /> es <see langword="null" />.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterPostBackControl">
      <MemberSignature Language="C#" Value="public void RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterPostBackControl(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member RegisterPostBackControl : System.Web.UI.Control -&gt; unit&#xA;override this.RegisterPostBackControl : System.Web.UI.Control -&gt; unit" Usage="scriptManager.RegisterPostBackControl control" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control que se va a registrar para el postback.</param>
        <summary>Registra un control como desencadenador de un postback. Este método se usa para configurar controles de postback que se encuentran dentro de un control <see cref="T:System.Web.UI.UpdatePanel" /> y que, de otro modo, realizarían postbacks asincrónicos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.ScriptManager.RegisterPostBackControl%2A> método para registrar la devolución de datos de los controles dentro de un <xref:System.Web.UI.UpdatePanel> control como desencadenadores. Los controles que están registrados con este método actualizan una página entera en lugar de actualizar solo la <xref:System.Web.UI.UpdatePanel> contenido del control. Registro de un control de devolución de datos con este método fuera de un <xref:System.Web.UI.UpdatePanel> control no tiene ningún efecto porque de forma predeterminada, estos controles no realizan postbacks asincrónicos.  
  
 Puede agregar el desencadenador mediante declaración con el `Triggers` elemento de la <xref:System.Web.UI.UpdatePanel> control. En Visual Studio, utilice el diseñador **UpdatePanelTrigger Editor de la colección** cuadro de diálogo.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.UpdatePanel.Triggers" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptControl&lt;TScriptControl&gt;">
      <MemberSignature Language="C#" Value="public void RegisterScriptControl&lt;TScriptControl&gt; (TScriptControl scriptControl) where TScriptControl : System.Web.UI.Control, System.Web.UI.IScriptControl;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptControl&lt;(class System.Web.UI.Control, class System.Web.UI.IScriptControl) TScriptControl&gt;(!!TScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptControl(Of TScriptControl As {Control, IScriptControl}) (scriptControl As TScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TScriptControl&gt;&#xA; where TScriptControl : System::Web::UI::Control, System::Web::UI::IScriptControl virtual void RegisterScriptControl(TScriptControl scriptControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptControl : 'ScriptControl -&gt; unit (requires 'ScriptControl :&gt; System.Web.UI.Control and 'ScriptControl :&gt; System.Web.UI.IScriptControl)&#xA;override this.RegisterScriptControl : 'ScriptControl -&gt; unit (requires 'ScriptControl :&gt; System.Web.UI.Control and 'ScriptControl :&gt; System.Web.UI.IScriptControl)" Usage="scriptManager.RegisterScriptControl scriptControl" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptControl``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TScriptControl">
          <Constraints>
            <BaseTypeName>System.Web.UI.Control</BaseTypeName>
            <InterfaceName>System.Web.UI.IScriptControl</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="scriptControl" Type="TScriptControl" />
      </Parameters>
      <Docs>
        <typeparam name="TScriptControl">Control que implementa la interfaz <see cref="T:System.Web.UI.IScriptControl" />.</typeparam>
        <param name="scriptControl">Control de script que se va a registrar.</param>
        <summary>Registra un control de script con la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es principalmente para su uso por los desarrolladores de controles. Llame a la <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> método desde un control de script Ajax de ASP.NET personalizado durante su `onInit` controlador de eventos para registrar ese control con la página. Un control de script Ajax de ASP.NET debe registrarse para participar en la representación parcial de página.  
  
 El <xref:System.Web.UI.ScriptManager.RegisterScriptControl%2A> método agrega el control extensor especificado a una lista interna de los controles de script que se procesan durante la <xref:System.Web.UI.Control.PreRender> eventos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="scriptControl" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterScriptDescriptors">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Indica al control <see cref="T:System.Web.UI.ScriptManager" /> que vuelva a llamar a las clases <see cref="T:System.Web.UI.ScriptControl" /> o <see cref="T:System.Web.UI.ExtenderControl" /> para devolver los scripts que admiten el objeto de cliente que representa un componente, comportamiento o control de cliente.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IExtenderControl extenderControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IExtenderControl extenderControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (extenderControl As IExtenderControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IExtenderControl ^ extenderControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptDescriptors : System.Web.UI.IExtenderControl -&gt; unit&#xA;override this.RegisterScriptDescriptors : System.Web.UI.IExtenderControl -&gt; unit" Usage="scriptManager.RegisterScriptDescriptors extenderControl" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extenderControl" Type="System.Web.UI.IExtenderControl" />
      </Parameters>
      <Docs>
        <param name="extenderControl">Control extensor para el que se registrarán descriptores de script.</param>
        <summary>Vuelve a llamar a una clase <see cref="T:System.Web.UI.ExtenderControl" /> para que se devuelvan los scripts de instancia que se deben representar para admitir el objeto de cliente que representa un componente, comportamiento o control de cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ExtenderControl> clase llama a la <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> método en su <xref:System.Web.UI.Control.Render%2A> método.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si deriva de la <see cref="T:System.Web.UI.ExtenderControl" /> clase e invalidar la <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> método, pero no llame a método de clase base, debe llamar a la <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IExtenderControl)" /> método. Esto permite la <see cref="T:System.Web.UI.ScriptManager" /> control para representar los scripts de instancia que admiten el objeto de cliente que representa el control.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterExtenderControl``1(``0,System.Web.UI.Control)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <Member MemberName="RegisterScriptDescriptors">
      <MemberSignature Language="C#" Value="public void RegisterScriptDescriptors (System.Web.UI.IScriptControl scriptControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterScriptDescriptors(class System.Web.UI.IScriptControl scriptControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterScriptDescriptors (scriptControl As IScriptControl)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterScriptDescriptors(System::Web::UI::IScriptControl ^ scriptControl);" />
      <MemberSignature Language="F#" Value="abstract member RegisterScriptDescriptors : System.Web.UI.IScriptControl -&gt; unit&#xA;override this.RegisterScriptDescriptors : System.Web.UI.IScriptControl -&gt; unit" Usage="scriptManager.RegisterScriptDescriptors scriptControl" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterScriptDescriptors(System.Web.UI.IScriptControl)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptControl" Type="System.Web.UI.IScriptControl" />
      </Parameters>
      <Docs>
        <param name="scriptControl">Control de script para el que se registrarán descriptores de script.</param>
        <summary>Llama a una clase <see cref="T:System.Web.UI.ScriptControl" /> para que se devuelvan los scripts de instancia que se deben representar para admitir el objeto de cliente que representa un componente, comportamiento o control de cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptControl> clase llama a la <xref:System.Web.UI.ScriptManager.RegisterScriptDescriptors%2A> método durante su <xref:System.Web.UI.Control.Render%2A> eventos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si deriva de la <see cref="T:System.Web.UI.ScriptControl" /> clase e invalidar la <see cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" /> método, pero no llame a método de clase base, debe llamar a la <see cref="M:System.Web.UI.ScriptManager.RegisterScriptDescriptors(System.Web.UI.IScriptControl)" /> método. Esto permite la <see cref="T:System.Web.UI.ScriptManager" /> control para representar los scripts de instancia que admiten el objeto de cliente que representa el control.</para>
        </block>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterScriptControl``1(``0)" />
        <altmember cref="T:System.Web.UI.ScriptDescriptor" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un bloque de script de inicio con el control <see cref="T:System.Web.UI.ScriptManager" /> y agrega el bloque de script a la página.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterStartupScript : System.Web.UI.Control * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterStartupScript (control, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">Control que registra el bloque de script de cliente.</param>
        <param name="type">Tipo del bloque de script de cliente. Este parámetro se suele especificar mediante el uso del operador typeof (C#) o GetType (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="key">Identificador único del bloque de script.</param>
        <param name="script">Script que se va a registrar.</param>
        <param name="addScriptTags">
          <see langword="true" /> para incluir el bloque de script entre etiquetas <see langword="&lt;script&gt;" /> y <see langword="&lt;/script&gt;" />; de lo contrario, <see langword="false" />.</param>
        <summary>Registra un bloque de script de inicio para un control que está dentro de <see cref="T:System.Web.UI.UpdatePanel" /> con el control <see cref="T:System.Web.UI.ScriptManager" /> y agrega el bloque de script a la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Usa el <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> método para registrar un bloque de script de inicio para una página que es compatible con la representación parcial de página y que no tiene ninguna dependencia de Microsoft Ajax Library. Bloques de script de inicio que se registran mediante este método se envían a la página solo cuando el control que registra el bloque está dentro de un <xref:System.Web.UI.UpdatePanel> control que se está actualizando. Para registrar un bloque de script de inicio cada vez que se produce un postback asincrónico, utilice el <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Page%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga de este método.  
  
 Si desea registrar un script de inicio que no pertenecen a las actualizaciones parciales de página y, si desea registrar el script sólo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 El bloque de script que se representa mediante el <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> método se ejecuta cuando la página termine de cargarse, pero antes de que el cliente de la página `onload` provoca el evento. Bloques de script de inicio se encuentra en la parte inferior de la página ASP.NET representada justo antes del `</form>` etiqueta.  
  
 Bloques de script de inicio que se registran mediante <xref:System.Web.UI.ScriptManager.RegisterStartupScript%2A> no se garantiza que se generan en el mismo orden en que se registran. Si es importante el orden de los bloques de script de inicio, use un <xref:System.Text.StringBuilder> para recopilar los bloques de script en una sola cadena de objetos y, a continuación, registrarlos todos como un script de inicio único.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="control" /> es <see langword="null" />.  \- o bien - <paramref name="type" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="control" /> no está en el árbol de controles de la página.</exception>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public static void RegisterStartupScript (System.Web.UI.Page page, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterStartupScript(class System.Web.UI.Page page, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Page,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterStartupScript(System::Web::UI::Page ^ page, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="static member RegisterStartupScript : System.Web.UI.Page * Type * string * string * bool -&gt; unit" Usage="System.Web.UI.ScriptManager.RegisterStartupScript (page, type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="page">Objeto de página que registra el bloque de script de cliente.</param>
        <param name="type">Tipo del bloque de script de cliente. Este parámetro se suele especificar mediante el uso del operador typeof (C#) o GetType (Visual Basic) para recuperar el tipo del control que registra el script.</param>
        <param name="key">Identificador único del bloque de script.</param>
        <param name="script">Script que se va a registrar.</param>
        <param name="addScriptTags">
          <see langword="true" /> para incluir el bloque de script entre etiquetas <see langword="&lt;script&gt;" /> y <see langword="&lt;/script&gt;" />; de lo contrario, <see langword="false" />.</param>
        <summary>Registra un bloque de script de inicio para cada postback asincrónico con el control <see cref="T:System.Web.UI.ScriptManager" /> y agrega el bloque de script a la página.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para registrar un bloque de script de inicio que se incluye cada vez que se produce un postback asincrónico. Para registrar un bloque de script para un control que está dentro de un <xref:System.Web.UI.UpdatePanel> controlar de manera que se registra el bloque de script solo cuando el <xref:System.Web.UI.UpdatePanel> control se actualiza, use el <xref:System.Web.UI.ScriptManager.RegisterStartupScript%28System.Web.UI.Control%2CSystem.Type%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> sobrecarga de este método.  
  
 Si desea registrar un script de inicio que no pertenecen a las actualizaciones parciales de página y, si desea registrar el script sólo una vez durante la representación de página inicial, utilice el <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> método de la <xref:System.Web.UI.ClientScriptManager> clase. Puede obtener una referencia a la <xref:System.Web.UI.ClientScriptManager> objeto desde el <xref:System.Web.UI.Page.ClientScript%2A> propiedad de la página.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ScriptManager.RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="abstract member Render : System.Web.UI.HtmlTextWriter -&gt; unit&#xA;override this.Render : System.Web.UI.HtmlTextWriter -&gt; unit" Usage="scriptManager.Render writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Objeto que recibe el contenido del control que se va a escribir en la página.</param>
        <summary>Representa el contenido del control <see cref="T:System.Web.UI.ScriptManager" /> en el explorador con el objeto <see cref="T:System.Web.UI.HtmlTextWriter" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se usa por los desarrolladores de controles para extender el <xref:System.Web.UI.ScriptManager> control.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar este método, llame a la base de <see cref="M:System.Web.UI.ScriptManager.Render(System.Web.UI.HtmlTextWriter)" /> método para que el script de cliente que define la clase se representa en la página.</para>
        </block>
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ResolveCompositeScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.CompositeScriptReferenceEventArgs&gt; ResolveCompositeScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveCompositeScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveCompositeScriptReference As EventHandler(Of CompositeScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::CompositeScriptReferenceEventArgs ^&gt; ^ ResolveCompositeScriptReference;" />
      <MemberSignature Language="F#" Value="member this.ResolveCompositeScriptReference : EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; " Usage="member this.ResolveCompositeScriptReference : System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.CompositeScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un script compuesto se registra con el control <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveScriptReference">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.ScriptReferenceEventArgs&gt; ResolveScriptReference" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.ScriptManager.ResolveScriptReference" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResolveScriptReference As EventHandler(Of ScriptReferenceEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::ScriptReferenceEventArgs ^&gt; ^ ResolveScriptReference;" />
      <MemberSignature Language="F#" Value="member this.ResolveScriptReference : EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; " Usage="member this.ResolveScriptReference : System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Action")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.ScriptReferenceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un miembro de la colección <see cref="P:System.Web.UI.ScriptManager.Scripts" /> se registra con el control <see cref="T:System.Web.UI.ScriptManager" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este evento se desencadena una vez por cada miembro de la <xref:System.Web.UI.ScriptManager.Scripts%2A> colección durante la página <xref:System.Web.UI.Control.PreRender> eventos. Use este evento para realizar actualizaciones antes de la secuencia de comandos se representa en la página.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RoleService">
      <MemberSignature Language="C#" Value="public System.Web.UI.RoleServiceManager RoleService { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.RoleServiceManager RoleService" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.RoleService" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoleService As RoleServiceManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::RoleServiceManager ^ RoleService { System::Web::UI::RoleServiceManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RoleService : System.Web.UI.RoleServiceManager" Usage="System.Web.UI.ScriptManager.RoleService" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.RoleServiceManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Web.UI.RoleServiceManager" /> asociado a la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</summary>
        <value>Objeto <see cref="T:System.Web.UI.RoleServiceManager" /> de la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.RoleServiceManager> objeto devuelto por esta propiedad representa el servicio de rol que está registrado en la página. El servicio de rol se puede definir en el <xref:System.Web.UI.ScriptManager> control o en un asociado <xref:System.Web.UI.ScriptManagerProxy> control. Puede usar el servicio de rol ASP.NET o usar un servicio de rol personalizado. Puede agregar el servicio personalizado en el marcado mediante la inclusión de un `RoleService` elemento dentro de la `asp:ScriptManager` elemento en la página, tal como se muestra en el ejemplo siguiente:  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <RoleService Path="MyRoleService.asmx" LoadRoles="True" />  
</asp:ScriptManager>  
```  
  
 Puede configurar mediante programación el <xref:System.Web.UI.RoleServiceManager> objeto. Los servicios se registran con el <xref:System.Web.UI.ScriptManager> control durante la página <xref:System.Web.UI.Control.PreRender> fase del ciclo de vida.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptMode ScriptMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.ScriptMode ScriptMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptMode As ScriptMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptMode ScriptMode { System::Web::UI::ScriptMode get(); void set(System::Web::UI::ScriptMode value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptMode : System.Web.UI.ScriptMode with get, set" Usage="System.Web.UI.ScriptManager.ScriptMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica si se representan las versiones de depuración o lanzamiento de las bibliotecas de scripts de cliente.</summary>
        <value>Valor de enumeración que indica el modo actual. El valor predeterminado es <see cref="F:System.Web.UI.ScriptMode.Auto" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.ScriptMode%2A> propiedad especifica si el <xref:System.Web.UI.ScriptManager> control debe representar la depuración o versiones de lanzamiento de las bibliotecas de scripts de cliente. Este valor se puede sustituir por los valores que se establecen en el archivo de configuración y en la directiva de página.  
  
 En la tabla siguiente se enumera los valores válidos para esta propiedad.  
  
|Valor|de esquema JSON|  
|-----------|----------------|  
|<xref:System.Web.UI.ScriptMode.Auto>|Versiones de depuración de script de cliente se usan las bibliotecas en la página Web cuando el `retail` atributo del elemento de configuración se establece en `false`. En caso contrario, se usan las versiones de lanzamiento de las bibliotecas de scripts de cliente.|  
|<xref:System.Web.UI.ScriptMode.Inherit>|Cuando se aplica a la <xref:System.Web.UI.ScriptManager.ScriptMode%2A> propiedad de la <xref:System.Web.UI.ScriptManager> objeto, este valor es igual a <xref:System.Web.UI.ScriptMode.Auto>.|  
|<xref:System.Web.UI.ScriptMode.Debug>|Versiones de depuración de script de cliente se usan las bibliotecas en la página Web a menos que el `retail` atributo del elemento de configuración se establece en `true`.|  
|<xref:System.Web.UI.ScriptMode.Release>|Versiones de lanzamiento de las bibliotecas de scripts de cliente se usan en la página Web a menos que el `retail` atributo del elemento de configuración se establece en `false`.|  
  
> [!NOTE]
>  El `debug` atributo de la directiva no afecta a aplicaciones habilitadas para Ajax ASP.NET. El <xref:System.Web.UI.ScriptManager> control sólo utiliza los valores en el archivo Web.config y en su <xref:System.Web.UI.ScriptManager.IsDebuggingEnabled%2A> y <xref:System.Web.UI.ScriptManager.ScriptMode%2A> propiedades para determinar si se debe representar secuencias de comandos de depuración.  
  
 Para obtener más información, consulte [Tracing Ajax Applications Overview y depuración](http://msdn.microsoft.com/library/92684ea0-7bb4-4a34-9203-3aa6394ce375).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">La propiedad <see cref="P:System.Web.UI.ScriptManager.ScriptMode" /> no es ninguno de los valores de <see cref="T:System.Web.UI.ScriptMode" />.</exception>
        <altmember cref="T:System.Web.UI.ScriptMode" />
      </Docs>
    </Member>
    <Member MemberName="ScriptPath">
      <MemberSignature Language="C#" Value="public string ScriptPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptPath : string with get, set" Usage="System.Web.UI.ScriptManager.ScriptPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Set the Path property on each individual ScriptReference instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso raíz de la ubicación que se usa para compilar las rutas de acceso a los archivos de script personalizados y archivos de script Ajax de ASP.NET.</summary>
        <value>Ubicación donde se almacenan los archivos de script. El valor predeterminado es una cadena vacía (""), que se interpreta como una ruta de acceso relativa.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.ScriptPath%2A> propiedad le permite especificar un absoluto, relativo, o la dirección URL relativa a la aplicación para todo el script se bloquea en la página. Esto incluye bloques de script personalizadas y de terceros que están registrados con el actual <xref:System.Web.UI.ScriptManager> instancia. El <xref:System.Web.UI.ScriptManager.ScriptPath%2A> propiedad se establece normalmente de forma declarativa como un atributo de un `ScriptManager` elemento en la página, pero se puede establecer en el código también.  
  
 Si el `path` atributo o la <xref:System.Web.UI.ScriptReferenceBase.Path%2A> propiedad está establecida para una <xref:System.Web.UI.ScriptReference> objeto en el <xref:System.Web.UI.ScriptManager.Scripts%2A> invalida el valor de ruta de acceso de colección, el <xref:System.Web.UI.ScriptManager.ScriptPath%2A> valor para el que <xref:System.Web.UI.ScriptReference> instancia.  
  
 Si no hay ningún <xref:System.Web.UI.ScriptReferenceBase.Path%2A> se expresa el <xref:System.Web.UI.ScriptManager> control busca en el directorio que está definido por el <xref:System.Web.UI.ScriptManager.ScriptPath%2A> hace referencia un script de la propiedad y se resuelve por sus <xref:System.Web.UI.ScriptReference.Name%2A> o <xref:System.Web.UI.ScriptReference.Assembly%2A> propiedades.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceMapping">
      <MemberSignature Language="C#" Value="public static System.Web.UI.ScriptResourceMapping ScriptResourceMapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.UI.ScriptResourceMapping ScriptResourceMapping" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ScriptResourceMapping As ScriptResourceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::UI::ScriptResourceMapping ^ ScriptResourceMapping { System::Web::UI::ScriptResourceMapping ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ScriptResourceMapping : System.Web.UI.ScriptResourceMapping" Usage="System.Web.UI.ScriptManager.ScriptResourceMapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptResourceMapping</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Web.UI.ScriptResourceMapping" />.</summary>
        <value>Un objeto <see cref="T:System.Web.UI.ScriptResourceMapping" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estático <xref:System.Web.UI.ScriptManager.ScriptResourceMapping%2A> propiedad devuelve un <xref:System.Web.UI.ScriptResourceMapping> objeto que puede contener una colección de asignaciones que representan la ubicación del recurso de script (redirección del script). Esta colección de asignaciones se puede asignar en función de los nombres o los pares de nombre y ensamblado, y puede señalar a un <xref:System.Web.UI.ScriptResourceDefinition> objeto.  
  
   
  
## Examples  
 Los ejemplos siguientes se muestra cómo agregar un <xref:System.Web.UI.ScriptResourceDefinition> objetos que pueden hacer referencia a un <xref:System.Web.UI.ScriptManager> objeto. Agregue el código siguiente al archivo Global.asax en el `Application_Start` eventos.  
  
```csharp  
ScriptResourceDefinition myScriptResDef = new ScriptResourceDefinition();  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js";  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js";  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js";  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js";  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", null, myScriptResDef);  
```  
  
```vb  
Dim myScriptResDef As New ScriptResourceDefinition()  
myScriptResDef.Path = "~/Scripts/jquery-1.4.2.min.js"  
myScriptResDef.DebugPath = "~/Scripts/jquery-1.4.2.js"  
myScriptResDef.CdnPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.min.js"  
myScriptResDef.CdnDebugPath = "http://ajax.microsoft.com/ajax/jQuery/jquery-1.4.2.js"  
ScriptManager.ScriptResourceMapping.AddDefinition("jquery", Nothing, myScriptResDef)  
```  
  
 En el marcado de una página de formularios Web Forms de ASP.NET (archivo .aspx), agregue el siguiente marcado dentro del `form` elemento y antes de cualquier código que usa un script de jQuery o elementos.  
  
```  
<asp:ScriptManager ID="sm1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="jquery"/>  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scripts">
      <MemberSignature Language="C#" Value="public System.Web.UI.ScriptReferenceCollection Scripts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ScriptReferenceCollection Scripts" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Scripts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Scripts As ScriptReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ScriptReferenceCollection ^ Scripts { System::Web::UI::ScriptReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Scripts : System.Web.UI.ScriptReferenceCollection" Usage="System.Web.UI.ScriptManager.Scripts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.CollectionEditorBase, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ScriptReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Web.UI.ScriptReferenceCollection" /> que contiene los objetos <see cref="T:System.Web.UI.ScriptReference" />, cada uno de los cuales representa un archivo de script representado en el cliente.</summary>
        <value>Objeto <see cref="T:System.Web.UI.ScriptReferenceCollection" /> de la instancia de <see cref="T:System.Web.UI.ScriptManager" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptReferenceCollection> objeto devuelto por esta propiedad es una colección de <xref:System.Web.UI.ScriptReference> objetos, cada uno de los cuales representa un archivo de script. La colección incluye referencias a todos los archivos de script que ASP.NET necesita para la funcionalidad de Ajax y a los archivos de script personalizado. Se pueden definir los archivos de script personalizado para representar en el <xref:System.Web.UI.ScriptManager> control o en un asociado <xref:System.Web.UI.ScriptManagerProxy> control.  
  
 Puede agregar archivos de script a la colección en el marcado mediante la adición de `asp:ScriptReference` elementos a un `Scripts` nodo dentro de la `asp:ScriptManager` elemento en la página, tal como se muestra en el ejemplo siguiente.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Scripts>  
    <asp:ScriptReference Name="Script.js" />  
  </Scripts>  
</asp:ScriptManager>  
```  
  
 También puede agregar un <xref:System.Web.UI.ScriptReference> de objeto para el <xref:System.Web.UI.ScriptManager.Scripts%2A> colección mediante programación usando el <xref:System.Collections.ObjectModel.Collection%601.Add%2A> método de la <xref:System.Web.UI.ScriptReferenceCollection> clase.  
  
 El <xref:System.Web.UI.ScriptManager> control registra los archivos de script durante el control <xref:System.Web.UI.Control.PreRender> eventos.  
  
 El <xref:System.Web.UI.ScriptManager.Scripts%2A> colección no contiene los scripts de Microsoft Ajax Library core. Las secuencias de comandos en la biblioteca principal se representan automáticamente; no tiene que registrar con el <xref:System.Web.UI.ScriptManager> control. Sin embargo, si desea invalidar un script de core o cualquier control y sustituir una versión diferente de la secuencia de comandos, puede agregar su versión a la <xref:System.Web.UI.ScriptManager.Scripts%2A> colección.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Services">
      <MemberSignature Language="C#" Value="public System.Web.UI.ServiceReferenceCollection Services { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ServiceReferenceCollection Services" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Services" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Services As ServiceReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::ServiceReferenceCollection ^ Services { System::Web::UI::ServiceReferenceCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Services : System.Web.UI.ServiceReferenceCollection" Usage="System.Web.UI.ScriptManager.Services" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ServiceReferenceCollectionEditor, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ServiceReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Web.UI.ServiceReferenceCollection" /> que contiene un objeto <see cref="T:System.Web.UI.ServiceReference" /> para cada servicio Web que ASP.NET expone en el cliente para la funcionalidad de Ajax.</summary>
        <value>Objeto <see cref="T:System.Web.UI.ServiceReferenceCollection" /> de la instancia de <see cref="T:System.Web.UI.ScriptManager" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ServiceReferenceCollection> objeto devuelto por esta propiedad es una colección de <xref:System.Web.UI.ServiceReference> objetos, cada uno de los cuales representa un servicio Web que está registrado con el <xref:System.Web.UI.ScriptManager> control. Puede definir los servicios en la <xref:System.Web.UI.ScriptManager> control o en un asociado <xref:System.Web.UI.ScriptManagerProxy> control.  
  
 Puede agregar servicios a la colección en el marcado mediante la adición de un `asp:ServiceReference` elemento a una `Services` elemento dentro de la `asp:ScriptManager` de instancia en la página, tal como se muestra en el ejemplo siguiente.  
  
```  
<asp:ScriptManager ID="SM1" runat="server">  
  <Services>  
    <asp:ServiceReference Path="Service.asmx" />  
  </Services>  
</asp:ScriptManager>  
```  
  
 Puede agregar mediante programación un <xref:System.Web.UI.ServiceReference> de objeto para el <xref:System.Web.UI.ScriptManager.Services%2A> colección mediante el <xref:System.Collections.ObjectModel.Collection%601.Add%2A> método de la <xref:System.Web.UI.ServiceReferenceCollection> clase.  
  
 Los servicios se registran con el <xref:System.Web.UI.ScriptManager> durante la página <xref:System.Web.UI.Control.PreRender> fase del ciclo de vida.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetFocus">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Establece el foco del explorador en el control especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFocus (clientID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::String ^ clientID);" />
      <MemberSignature Language="F#" Value="member this.SetFocus : string -&gt; unit" Usage="scriptManager.SetFocus clientID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">Identificador del control que recibe el foco.</param>
        <summary>Establece el foco del explorador en el control especificado mediante identificador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.SetFocus%2A> método funciona igual que el <xref:System.Web.UI.Page.SetFocus%2A> método para el <xref:System.Web.UI.Page> clase. Ambos métodos convierten el control con el identificador especificado en el control activo en la página Web. El <xref:System.Web.UI.ScriptManager.SetFocus%2A> método de la <xref:System.Web.UI.ScriptManager> clase se utiliza para establecer el foco durante un postback asincrónico. Durante las devoluciones de datos y cuando la página se representa por primera vez, el <xref:System.Web.UI.ScriptManager.SetFocus%2A> llamadas al método el <xref:System.Web.UI.Page.SetFocus%2A> método de la <xref:System.Web.UI.Page> clase.  
  
 Si hay varias llamadas a la <xref:System.Web.UI.ScriptManager.SetFocus%2A> método, el control en la última llamada recibe el foco.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.String)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SetFocus">
      <MemberSignature Language="C#" Value="public void SetFocus (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFocus(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.SetFocus(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFocus(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="member this.SetFocus : System.Web.UI.Control -&gt; unit" Usage="scriptManager.SetFocus control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Control que recibirá el foco.</param>
        <summary>Establece el foco del explorador en el control especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.ScriptManager.SetFocus%2A> método funciona igual que el <xref:System.Web.UI.Page.SetFocus%2A> método para el <xref:System.Web.UI.Page> clase. Ambos métodos convierten el control especificado en el control activo en la página Web. El <xref:System.Web.UI.ScriptManager.SetFocus%2A> método de la <xref:System.Web.UI.ScriptManager> clase se utiliza para establecer el foco durante un postback asincrónico. Durante las devoluciones de datos y cuando la página se representa por primera vez, el <xref:System.Web.UI.ScriptManager.SetFocus%2A> llamadas al método el <xref:System.Web.UI.Page.SetFocus%2A> método de la <xref:System.Web.UI.Page> clase.  
  
 Si hay varias llamadas a la <xref:System.Web.UI.ScriptManager.SetFocus%2A> método, el control especificado en la última llamada recibe el foco.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.ScriptManager.SetFocus(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SupportsPartialRendering">
      <MemberSignature Language="C#" Value="public bool SupportsPartialRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsPartialRendering" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportsPartialRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsPartialRendering { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportsPartialRendering : bool with get, set" Usage="System.Web.UI.ScriptManager.SupportsPartialRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el cliente admite la representación parcial de página.</summary>
        <value>
          <see langword="true" /> si el cliente admite la representación parcial de página; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Web.UI.ScriptManager.EnablePartialRendering%2A> propiedad está establecida en `false`, <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> propiedad devuelve `false`.  
  
 La comprobación para determinar si se admite la representación parcial de página predeterminado devuelve `true` cuando las condiciones siguientes son verdaderas:  
  
-   El <xref:System.Web.Configuration.HttpCapabilitiesBase.W3CDomVersion%2A> valor de propiedad debe ser mayor o igual a 1,0.  
  
-   El <xref:System.Web.Configuration.HttpCapabilitiesBase.EcmaScriptVersion%2A> valor de propiedad debe ser mayor o igual a 1,0.  
  
-   El <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> valor de propiedad debe establecerse en `true`.  
  
 Cuando el <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> propiedad se establece explícitamente, no se utilizan estas comprobaciones.  
  
 Los desarrolladores de controles deben usar el <xref:System.Web.UI.ScriptManager.SupportsPartialRendering%2A> propiedad para determinar si debe admitir la representación parcial de página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" /> es <see langword="false" /> y la propiedad <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> se estableció en <see langword="true" />.  \- o bien - La propiedad <see cref="P:System.Web.UI.ScriptManager.SupportsPartialRendering" /> se estableció después del evento <see cref="E:System.Web.UI.Control.Init" />.</exception>
        <altmember cref="P:System.Web.UI.ScriptManager.EnablePartialRendering" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Function LoadPostData (postDataKey As String, postCollection As NameValueCollection) As Boolean Implements IPostBackDataHandler.LoadPostData" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Web.UI.IPostBackDataHandler.LoadPostData(System::String ^ postDataKey, System::Collections::Specialized::NameValueCollection ^ postCollection) = System::Web::UI::IPostBackDataHandler::LoadPostData;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Identificador de clave del control.</param>
        <param name="postCollection">Colección de todos los datos entrantes que se van a exponer.</param>
        <summary>Para una descripción de este miembro, vea <see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />.</summary>
        <returns>Es <see langword="true" /> si el estado del control <see cref="T:System.Web.UI.ScriptManager" /> cambió a consecuencia del postback; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Web.UI.ScriptManager> se convierte en una interfaz <xref:System.Web.UI.IPostBackDataHandler>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostDataChangedEvent () Implements IPostBackDataHandler.RaisePostDataChangedEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() = System::Web::UI::IPostBackDataHandler::RaisePostDataChangedEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Para una descripción de este miembro, vea <see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Web.UI.ScriptManager> se convierte en una interfaz <xref:System.Web.UI.IPostBackDataHandler>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.IPostBackDataHandler" />
        <altmember cref="M:System.Web.UI.ScriptManager.RaisePostDataChangedEvent" />
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub RaisePostBackEvent (eventArgument As String) Implements IPostBackEventHandler.RaisePostBackEvent" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System::String ^ eventArgument) = System::Web::UI::IPostBackEventHandler::RaisePostBackEvent;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Cadena de pares clave-valor que representan el estado del historial de la página web.</param>
        <summary>Habilita el control <see cref="T:System.Web.UI.ScriptManager" /> para procesar un evento de postback y cargar el estado del historial de la página web.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.IsSecureConnection">
      <MemberSignature Language="C#" Value="bool System.Web.UI.IScriptManager.IsSecureConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#IsSecureConnection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSecureConnection As Boolean Implements IScriptManager.IsSecureConnection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Web.UI.IScriptManager.IsSecureConnection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Web.UI.ScriptManager.System.Web.UI.IScriptManager.IsSecureConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterArrayDeclaration (System.Web.UI.Control control, string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterArrayDeclaration(class System.Web.UI.Control control, string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterArrayDeclaration(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterArrayDeclaration(System::Web::UI::Control ^ control, System::String ^ arrayName, System::String ^ arrayValue) = System::Web::UI::IScriptManager::RegisterArrayDeclaration;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="arrayName">To be added.</param>
        <param name="arrayValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptBlock (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptBlock(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptBlock(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptBlock(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterClientScriptBlock;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptInclude (System.Web.UI.Control control, Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptInclude(class System.Web.UI.Control control, class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptInclude(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptInclude(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ url) = System::Web::UI::IScriptManager::RegisterClientScriptInclude;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterClientScriptResource (System.Web.UI.Control control, Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterClientScriptResource(class System.Web.UI.Control control, class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterClientScriptResource(System.Web.UI.Control,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterClientScriptResource(System::Web::UI::Control ^ control, Type ^ type, System::String ^ resourceName) = System::Web::UI::IScriptManager::RegisterClientScriptResource;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="resourceName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterDispose">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterDispose (System.Web.UI.Control control, string disposeScript);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterDispose(class System.Web.UI.Control control, string disposeScript) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterDispose(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterDispose(System::Web::UI::Control ^ control, System::String ^ disposeScript) = System::Web::UI::IScriptManager::RegisterDispose;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="disposeScript" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="disposeScript">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterExpandoAttribute (System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterExpandoAttribute(class System.Web.UI.Control control, string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterExpandoAttribute(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterExpandoAttribute(System::Web::UI::Control ^ control, System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode) = System::Web::UI::IScriptManager::RegisterExpandoAttribute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="controlId">To be added.</param>
        <param name="attributeName">To be added.</param>
        <param name="attributeValue">To be added.</param>
        <param name="encode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterHiddenField">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterHiddenField (System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterHiddenField(class System.Web.UI.Control control, string hiddenFieldName, string hiddenFieldValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterHiddenField(System.Web.UI.Control,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterHiddenField(System::Web::UI::Control ^ control, System::String ^ hiddenFieldName, System::String ^ hiddenFieldValue) = System::Web::UI::IScriptManager::RegisterHiddenField;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="hiddenFieldName">To be added.</param>
        <param name="hiddenFieldValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterOnSubmitStatement (System.Web.UI.Control control, Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(class System.Web.UI.Control control, class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterOnSubmitStatement(System.Web.UI.Control,System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterOnSubmitStatement(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script) = System::Web::UI::IScriptManager::RegisterOnSubmitStatement;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterPostBackControl">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterPostBackControl (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterPostBackControl(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterPostBackControl(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterPostBackControl(System::Web::UI::Control ^ control) = System::Web::UI::IScriptManager::RegisterPostBackControl;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IScriptManagerInternal.RegisterPostBackControl(System.Web.UI.Control)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.RegisterStartupScript">
      <MemberSignature Language="C#" Value="void IScriptManager.RegisterStartupScript (System.Web.UI.Control control, Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.RegisterStartupScript(class System.Web.UI.Control control, class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#RegisterStartupScript(System.Web.UI.Control,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.RegisterStartupScript(System::Web::UI::Control ^ control, Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags) = System::Web::UI::IScriptManager::RegisterStartupScript;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">To be added.</param>
        <param name="type">To be added.</param>
        <param name="key">To be added.</param>
        <param name="script">To be added.</param>
        <param name="addScriptTags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IScriptManager.SetFocusInternal">
      <MemberSignature Language="C#" Value="void IScriptManager.SetFocusInternal (string clientID);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IScriptManager.SetFocusInternal(string clientID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptManager.System#Web#UI#IScriptManager#SetFocusInternal(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub SetFocusInternal (clientID As String) Implements IScriptManager.SetFocusInternal" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Web.UI.IScriptManager.SetFocusInternal(System::String ^ clientID) = System::Web::UI::IScriptManager::SetFocusInternal;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clientID">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public override bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptManager.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Web.UI.ScriptManager.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Invalida la propiedad <see cref="P:System.Web.UI.Control.Visible" /> heredada de la clase <see cref="T:System.Web.UI.Control" /> base para evitar establecer este valor.</summary>
        <value>
          <see langword="true" /> en todos los casos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.Control.Visible%2A> propiedad se reemplaza en la <xref:System.Web.UI.ScriptManager> clase para evitar establecer este valor. Un <xref:System.NotImplementedException> se produce un error si se asigna un valor a esta propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Se asigna un valor a la propiedad <see cref="P:System.Web.UI.ScriptManager.Visible" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>