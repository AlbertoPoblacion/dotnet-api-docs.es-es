<Type Name="XhtmlTextWriter" FullName="System.Web.UI.XhtmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="121aef5639a0a7b428d318ebbe3011384ac4ec67" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36375606" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XhtmlTextWriter : System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XhtmlTextWriter extends System.Web.UI.HtmlTextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.XhtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XhtmlTextWriter&#xA;Inherits HtmlTextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XhtmlTextWriter : System::Web::UI::HtmlTextWriter" />
  <TypeSignature Language="F#" Value="type XhtmlTextWriter = class&#xA;    inherit HtmlTextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlTextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Escribe los caracteres específicos del lenguaje de marcado de hipertexto extensible (XHTML), incluyendo todas las variaciones de módulos XHTML que derivan de XTHML, en el flujo de salida para un control de servidor ASP.NET para los dispositivos móviles. Reemplace la clase <see cref="T:System.Web.UI.XhtmlTextWriter" /> para proporcionar una representación XHTML personalizada para las páginas ASP.NET y controles de servidor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XHTML es un lenguaje de marcado compatible con XML, basado en HTML 4.1, que le permite crear sitios Web que son adecuados para varios tipos de dispositivo. Combina la facilidad de uso del HTML con las instrucciones de elemento estrictas proporcionadas por XML para generar un lenguaje de marcado con una amplia gama de opciones de formato y estilo y ambigüedad de la etiqueta de marcado reducida. La <xref:System.Web.UI.XhtmlTextWriter> clase proporciona funciones de formato que los controles de servidor ASP.NET utilizan al representar el contenido XHTML a los clientes. Puede usar el <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> método para especificar qué tipo de XHTML que representa el escritor de texto. Tipos de documentos admitidos se definen en el <xref:System.Web.UI.XhtmlMobileDocType> enumeración.  
  
 La <xref:System.Web.UI.XhtmlTextWriter> clase presenta dos conjuntos de atributos para los elementos. Un conjunto es una colección de atributos comunes, como se hace referencia en el <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> propiedad. El segundo conjunto es una colección de atributos específicos del elemento, como se hace referencia en el <xref:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes%2A> propiedad. Para obtener más información sobre los elementos y los estilos que se representan, vea la especificación de modularización XHTML en el [sitio Web de World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 Puede utilizar los miembros de la <xref:System.Web.UI.XhtmlTextWriter> clase y las clases derivadas para crear escritores de texto personalizado para usar en XHTML personalizada página adaptadores o adaptadores de clase. También puede crear clases derivadas que reemplazan el comportamiento estándar de la <xref:System.Web.UI.XhtmlTextWriter> clase.  
  
 De forma predeterminada, cuando se trabaja con exploradores que admiten HTML 4.0, páginas y controles ASP.NET representan el marcado que es compatible con el estándar XHTML 1.1. Para obtener más información, consulte [estándares de XHTML en Visual Studio y ASP.NET](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97).  
  
 El <xref:System.Web.UI.HtmlTextWriter> envía XHTML a menos que configure específicamente ASP.NET para no representar el marcado XHTML. Para obtener más información, consulte [NIB: Cómo: configurar la representación XHTML en sitios Web de ASP.NET](http://msdn.microsoft.com/library/42483a54-f1ae-44e1-88e6-4370f8690149).  
  
   
  
## Examples  
 El ejemplo de código en esta sección contiene cuatro partes. El primer ejemplo muestra cómo crear una clase derivada. El segundo ejemplo de código muestra cómo crear un control personalizado. El tercer ejemplo de código muestra cómo utilizar el control personalizado. El cuarto ejemplo de código proporciona el código que se requiere para ejecutar el control personalizado.  
  
 En el ejemplo de código siguiente se muestra cómo crear una clase personalizada que se deriva de la <xref:System.Web.UI.XhtmlTextWriter> clase. Tiene dos constructores, que es el estándar para todas las clases que heredan directa o indirectamente de la <xref:System.Web.UI.HtmlTextWriter> clase. El primer constructor toma un <xref:System.IO.TextWriter> objeto como parámetro y llama el segundo constructor y le pasa los dos valores de parámetro siguientes:  
  
-   Instancia de <xref:System.IO.TextWriter>.  
  
-   El valor de la <xref:System.Web.UI.HtmlTextWriter.DefaultTabString?displayProperty=nameWithType> propiedad, que define la sangría de línea predeterminado utilizado por el escritor de texto XHTML.  
  
 Este ejemplo de código también muestra cómo invalidar el <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> y <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> métodos para filtrar por texto, tamaño y estilo de color, respectivamente. Además, reemplaza el <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A> y <xref:System.Web.UI.HtmlTextWriter.EndRender%2A> métodos para escribir un texto de cadena antes y después de que se procesa un control.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#1)]  
  
 En el ejemplo de código siguiente se muestra cómo crear una personalizada <xref:System.Web.UI.WebControls.Label> control denominado `TestLabel` y un adaptador personalizado denominado `XhtmlTestLabelAdapter` que presenta el contenido del control en XHTML.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#1)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#1)]  
  
 En el ejemplo de código siguiente se muestra cómo utilizar el control personalizado `TestLabel` en una página Web ASP.NET.  
  
 [!code-aspx-csharp[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.aspx#4)]
 [!code-aspx-vb[System.Web.UI.XhtmlTextWriter_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.aspx#4)]  
  
 Para usar el control personalizado en el ejemplo de código anterior, agregue el siguiente `<controlAdapters>` elemento a uno de los dos archivos. Puede agregarlo al archivo de todo el equipo adecuado en el subdirectorio de un explorador específico, como una subcarpeta del directorio de configuración de .NET Framework. Como alternativa, puede agregarlo a un archivo de explorador personalizado en el directorio App_Browsers bajo la raíz de la aplicación Web.  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.TestLabel"  
   adapterType="AspNet.Samples.XhtmlTestLabelAdapter" />  
</controlAdapters>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ChtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.XhtmlTextWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Instancia de <see cref="T:System.IO.TextWriter" /> que representa el contenido XHTML.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.XhtmlTextWriter" /> que utiliza la sangría de línea especificada en el campo <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" />. Utilice el constructor <see cref="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter)" /> si no desea cambiar la sangría de línea predeterminada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.XhtmlTextWriter.%23ctor%2A> constructor que toma un <xref:System.IO.TextWriter> como un parámetro llama el segundo constructor y le pasa dos valores de parámetro de objeto:  
  
-   Instancia de <xref:System.IO.TextWriter>.  
  
-   El valor de cadena que se especifica en el <xref:System.Web.UI.HtmlTextWriter.DefaultTabString> campo, que define el espaciado de tabulación utilizado por el escritor de texto XHTML.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear los dos constructores, que es estándar para todas las clases que derivan directa o indirectamente de la <xref:System.Web.UI.HtmlTextWriter> (clase), para una clase personalizada que se deriva de la <xref:System.Web.UI.XhtmlTextWriter> clase.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XhtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XhtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.XhtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.XhtmlTextWriter" Usage="new System.Web.UI.XhtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">Instancia de <see cref="T:System.IO.TextWriter" /> que representa el contenido XHTML.</param>
        <param name="tabString">Cadena que se debe usar para representar la sangría de una línea.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.XhtmlTextWriter" /> con la sangría de línea especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear los dos constructores, que es estándar para todas las clases que derivan directa o indirectamente de la <xref:System.Web.UI.HtmlTextWriter> (clase), para una clase personalizada que se deriva de la <xref:System.Web.UI.XhtmlTextWriter> clase.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#5)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Elemento XHTML al que se va a agregar el atributo.</param>
        <param name="attributeName">Atributo que se va a agregar.</param>
        <summary>Agrega un atributo a un elemento XHTML. La propiedad <see cref="T:System.Web.UI.XhtmlTextWriter" /> hace referencia a la colección de atributos específicos del elemento para el objeto <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> método para agregar un atributo a un elemento XHTML. El atributo agregado, a continuación, se reconocen y se representa mediante el <xref:System.Web.UI.XhtmlTextWriter> objeto. Para evitar que el sistema de escritura represente un atributo común de un elemento XHTML, utilice el <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> método.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable CommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable CommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ CommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.CommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Collections.Hashtable" /> que contiene los atributos comunes de etiquetas de marcado para el objeto <see cref="T:System.Web.UI.XhtmlTextWriter" />.</summary>
        <value>Un objeto <see cref="T:System.Collections.Hashtable" /> que contiene los atributos comunes.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> colección contiene atributos que se permiten en elementos XHTML y que no se suprimen en el <xref:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes%2A> propiedad. Para obtener más información sobre los atributos comunes, consulte la [sitio Web de World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 Cuando una nueva instancia de la <xref:System.Web.UI.XhtmlTextWriter> se crea la clase, los atributos comunes que se inicializan son:  
  
-   `class`  
  
-   `id`  
  
-   `title`  
  
-   `xml:lang`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="ElementSpecificAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable ElementSpecificAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable ElementSpecificAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ElementSpecificAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ ElementSpecificAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementSpecificAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Collections.Hashtable" /> que contiene atributos específicos del elemento.</summary>
        <value>Un objeto <see cref="T:System.Collections.Hashtable" /> que contiene atributos específicos del elemento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute%2A> agregando atributos de método para agregar reconocido a un elemento XHTML. Para quitar atributos comunes en un elemento XHTML, utilice el <xref:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute%2A> método.  
  
 Cuando una nueva instancia de la <xref:System.Web.UI.XhtmlTextWriter> se crea la clase, el <xref:System.Collections.Hashtable> objeto de atributos específicos del elemento se rellena con los atributos mostrados en la tabla siguiente.  
  
|Elemento|Atributos|  
|-------------|----------------|  
|`<a>`|`accesskey`, `href`, `charset`, `hreflang`, `rel`, `type`, `rev`, `title`, `tabindex`|  
|`<base>`|`href`|  
|`<blockquote>`|`cite`|  
|`<br>`|`id`, `class`, `title`|  
|`<form>`|`action`, `method`, `enctype`|  
|`<head>`|`xml:lang`|  
|`<html>`|`version`, `xml:lang`, `xmlns`|  
|`<img>`|`src`, `alt`, `width`, `longdesc`, `height`|  
|`<input>`|`size`, `accesskey`, `title`, `name`, `type`, `disabled`, `value`, `src`, `checked`, `maxlength`, `tabindex`|  
|`<label>`|`accesskey`, `for`|  
|`<li>`|`value`|  
|`<link>`|`hreflang`, `rev`, `type`, `charset`, `rel`, `href`, `media`|  
|`<meta>`|`content`, `name`, `xml:lang`, `http-equiv`, `scheme`|  
|`<object>`|`codebase`, `classid`, `data`, `standby`, `name`, `type`, `height`, `archive`, `declare`, `width`, `tabindex`, `codetype`|  
|`<ol>`|`start`|  
|`<optgroup>`|`label`, `disabled`|  
|`<option>`|`selected`, `value`|  
|`<param>`|`id`, `name`, `valuetype`, `value`, `type`|  
|`<pre>`|`xml:space`|  
|`<q>`|`cite`|  
|`<select>`|`name`, `tabindex`, `disabled`, `multiple`, `size`|  
|`<style>`|`xml:lang`, `xml:space`, `type`, `title`, `media`|  
|`<table>`|`width`, `summary`|  
|`<textarea>`|`name`, `cols`, `accesskey`, `tabindex`, `rows`|  
|`<td>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<th>`|`headers`, `align`, `rowspan`, `colspan`, `axis`, `scope`, `abbr`, `valign`|  
|`<title>`|`xml:lang`|  
|`<tr>`|`align`, `valign`|  
  
 Para obtener más información sobre los elementos y los estilos que se representan, vea la especificación de modularización XHTML en el [sitio Web de World Wide Web Consortium (W3C)](http://go.microsoft.com/fwlink/?linkid=37125).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidFormAttribute">
      <MemberSignature Language="C#" Value="public override bool IsValidFormAttribute (string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsValidFormAttribute(string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsValidFormAttribute (attributeName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsValidFormAttribute(System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="override this.IsValidFormAttribute : string -&gt; bool" Usage="xhtmlTextWriter.IsValidFormAttribute attributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributeName">Nombre del atributo que se va a comprobar.</param>
        <summary>Comprueba un atributo XHTML para garantizar que se puede representar en la etiqueta de apertura de un elemento <see langword="&lt;form&gt;" />.</summary>
        <returns>Es <see langword="true" /> si el atributo se puede aplicar a un elemento <see langword="&lt;form&gt;" />; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es útil para representar condicionalmente un atributo en función de si es compatible con el tipo de documento XHTML del dispositivo que lo solicitado.  
  
   
  
## Examples  
 El siguiente ejemplo de código forma parte de un ejemplo más extenso que crea un personalizado <xref:System.Web.UI.WebControls.Label> control y un adaptador que representa el contenido del control en XHTML.  
  
 Este ejemplo de código muestra cómo crear una variable booleana denominada `attTest` y establézcalo en el valor devuelto que es el resultado de llamar al método el <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> método con el valor del parámetro "style". Si el <xref:System.Web.UI.XhtmlTextWriter.IsValidFormAttribute%2A> método `true`, los estilos que están asociados con el control se representan con el <xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A?displayProperty=nameWithType> y <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A?displayProperty=nameWithType> métodos. Si el `attTest` valor es `false`, no se representan los estilos. En su lugar, la página muestra el texto del control, una `<br/>` elemento presentado por el <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> método y una cadena de texto que informa al usuario que se ha representado condicionalmente el contenido XHTML del control.  
  
 Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.UI.XhtmlTextWriter> clase.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/cs/xhtmltextlabel.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.XhtmlTextWriter_Sample1/VB/xhtmltestlabel.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="xhtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">Atributo XHTML que se va a representar.</param>
        <param name="value">Valor asignado al atributo XHTML.</param>
        <param name="key">Valor de la enumeración <see cref="T:System.Web.UI.HtmlTextWriterAttribute" /> asociado al atributo XHTML.</param>
        <summary>Determina si el atributo XHTML especificado y su valor se pueden representar en el elemento de marcado actual.</summary>
        <returns>Es <see langword="true" /> si el atributo se va a representar en la página; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método para comprobar si un `size` atributo se representa para cualquiera de los elementos que están representados por este escritor de texto. Si un `size` se representa el atributo, el código comprueba si su valor es de 8 puntos. Si es así, el <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método `true`, lo que permite el atributo y su valor para representar. Si el valor es distinto de 8 puntos, el <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método `false`, y no se representan el atributo y su valor. Si el parámetro de clave de la <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método no coincide con el <xref:System.Web.UI.HtmlTextWriterAttribute.Size> atributo, la funcionalidad básica de la <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método se llama, tal como se define en el <xref:System.Web.UI.XhtmlTextWriter> clase.  
  
 Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.UI.XhtmlTextWriter> clase.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="xhtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">Atributo de estilo XHTML que se va a representar.</param>
        <param name="value">Valor asignado al atributo de estilo XHTML.</param>
        <param name="key">Valor de la enumeración <see cref="T:System.Web.UI.HtmlTextWriterStyle" /> asociado al atributo de estilo XHTML.</param>
        <summary>Determina si el atributo XHTML especificado "style" y su valor se pueden representar en el elemento de marcado actual.</summary>
        <returns>Es <see langword="true" /> si se debe representar el atributo de estilo; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> método para comprobar si un <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo que se va a representar para cualquiera de los elementos que están representados por este escritor de texto. Si un <xref:System.Web.UI.HtmlTextWriterStyle.Color> se representa el atributo, el código comprueba si su valor es púrpura. Si el valor es púrpura, el <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> método `false` y no se representan el atributo y su valor. Si el <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo está establecido en cualquier otro valor, la <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> método `true` y se representan el atributo y su valor. Si el parámetro de clave de la <xref:System.Web.UI.XhtmlTextWriter.OnAttributeRender%2A> método no coincide con el <xref:System.Web.UI.HtmlTextWriterStyle.Color> atributo, la funcionalidad básica de la <xref:System.Web.UI.XhtmlTextWriter.OnStyleAttributeRender%2A> método se llama, tal como se define en el <xref:System.Web.UI.XhtmlTextWriter> clase.  
  
 Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.UI.XhtmlTextWriter> clase.  
  
 [!code-csharp[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.XhtmlTextWriter_Sample2#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="xhtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">Elemento XHTML del que se va a quitar un atributo.</param>
        <param name="attributeName">Atributo que se va a quitar del elemento XHTML especificado.</param>
        <summary>Quita un atributo de la colección <see cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" /> de un elemento.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
        <altmember cref="M:System.Web.UI.XhtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetDocType">
      <MemberSignature Language="C#" Value="public virtual void SetDocType (System.Web.UI.XhtmlMobileDocType docType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDocType(valuetype System.Web.UI.XhtmlMobileDocType docType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.SetDocType(System.Web.UI.XhtmlMobileDocType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SetDocType (docType As XhtmlMobileDocType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetDocType(System::Web::UI::XhtmlMobileDocType docType);" />
      <MemberSignature Language="F#" Value="abstract member SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit&#xA;override this.SetDocType : System.Web.UI.XhtmlMobileDocType -&gt; unit" Usage="xhtmlTextWriter.SetDocType docType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="docType" Type="System.Web.UI.XhtmlMobileDocType" />
      </Parameters>
      <Docs>
        <param name="docType">Uno de los valores de enumeración de <see cref="T:System.Web.UI.XhtmlMobileDocType" />.</param>
        <summary>Especifica el tipo de documento de XHTML que el escritor de texto debe representar en la página o control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Web.UI.XhtmlTextWriter.SetDocType%2A> método en un adaptador de página personalizado para definir el tipo de XHTML que desee representar en el dispositivo solicitado. Tipos de documentos admitidos se definen en el <xref:System.Web.UI.XhtmlMobileDocType> enumeración.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.XhtmlMobileDocType" />
      </Docs>
    </Member>
    <Member MemberName="SuppressCommonAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressCommonAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressCommonAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressCommonAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressCommonAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressCommonAttributes : System.Collections.Hashtable" Usage="System.Web.UI.XhtmlTextWriter.SuppressCommonAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Collections.Hashtable" /> de elementos para el cual se suprimen los atributos <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />.</summary>
        <value>Un objeto <see cref="T:System.Collections.Hashtable" /> de elementos que contienen una colección de atributos <see cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" /> que no se representan.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La colección de atributos suprimidos incluye una lista de elementos XHTML para los que <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> no se representan los atributos.  
  
 Cuando una nueva instancia de la <xref:System.Web.UI.XhtmlTextWriter> se crea la clase, el <xref:System.Collections.Hashtable> objeto de elementos para los que <xref:System.Web.UI.XhtmlTextWriter.CommonAttributes%2A> se suprimen los atributos incluye:  
  
-   `base`  
  
-   `meta`  
  
-   `br`  
  
-   `head`  
  
-   `title`  
  
-   `html`  
  
-   `style`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.CommonAttributes" />
        <altmember cref="P:System.Web.UI.XhtmlTextWriter.ElementSpecificAttributes" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.XhtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="xhtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Escribe un elemento <see langword="&lt;br/&gt;" /> en el flujo de salida XHTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo invalidar el heredados <xref:System.Web.UI.HtmlTextWriter.BeginRender%2A?displayProperty=nameWithType> método para escribir una cadena de texto con el <xref:System.Web.UI.HtmlTextWriter.Write%2A?displayProperty=nameWithType> método y un `<br/>` elemento con la <xref:System.Web.UI.XhtmlTextWriter.WriteBreak%2A> método.  
  
 [!code-csharp[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/CS/customxhtmltextwriter.cs#4)]
 [!code-vb[system.web.ui.xhtmltextwriter_sample2#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.xhtmltextwriter_Sample2/VB/customxhtmltextwriter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>