<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9200f0d5a36d7d9b1c59b031ca32d0e2c5500b69" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36376656" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Contiene información sobre una tarea asincrónica registrada en una página. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Versión 2.0 de ASP.NET permite registrar varias tareas en una página y ejecutarlas de forma asincrónica antes de procesar la página. Puede especificar que una tarea se ejecute de forma asincrónica si es un proceso lento y no desea que otros procesos se detengan mientras se ejecuta. Las tareas asincrónicas se pueden ejecutar en paralelo o secuencialmente.  
  
 A <xref:System.Web.UI.PageAsyncTask> objeto debe estar registrado en la página a través de la <xref:System.Web.UI.Page.RegisterAsyncTask%2A> método. No es necesario que la propia página procesarse de forma asincrónica para ejecutar tareas asincrónicas. Puede establecer la `Async` atributo como `true` (como se muestra en el ejemplo de código siguiente) o `false` en la página de directiva y las tareas asincrónicas se seguirán procesando asincrónicamente:  
  
 `<%@ Page Async="true" %>`  
  
 Cuando el `Async` atributo está establecido en `false`, el subproceso que se ejecuta la página se bloqueará hasta que se completen todas las tareas asincrónicas.  
  
 Todas las tareas asincrónicas registran antes de la <xref:System.Web.UI.Page.PreRenderComplete> evento se ejecutará automáticamente por la página si no se han ejecutado. Las tareas asincrónicas registradas después de la <xref:System.Web.UI.Page.PreRenderComplete> evento necesario ejecutarlos explícitamente mediante el <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> método. El <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> método puede utilizarse también para iniciar tareas antes de la <xref:System.Web.UI.Page.PreRenderComplete> eventos. El <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> método ejecuta todas las tareas asincrónicas registradas en la página que no se han ejecutado.  
  
 De forma predeterminada, una tarea asincrónica superará el tiempo de espera si no se ha completado dentro de 45 segundos. Puede especificar un valor de tiempo de espera diferentes en el archivo Web.config o la directiva de página. El `<pages>` sección del archivo Web.config contiene un `asyncTimeout` atributo, tal y como se muestra a continuación.  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 La directiva de página contiene un `AsyncTimeout` atributo.  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 En el ejemplo de código siguiente se registra tres tareas asincrónicas en una página y las ejecuta en paralelo. Cada tarea llama a un método que simplemente hace que el subproceso en modo de suspensión durante 5 segundos.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.PageAsyncTask" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Un controlador de eventos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.PageAsyncTask" /> mediante un controlador de eventos que habilita la tarea que se va a cancelar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor se ajusta un <xref:System.Web.TaskEventHandler> delegar para que el <xref:System.Web.UI.PageAsyncTask> objeto puede integrar código asincrónico (tomando como base <xref:System.Threading.Tasks.Task> objetos) con la característica de las páginas asincrónicas de formularios Web Forms de ASP.NET existente. ASP.NET señalará el <xref:System.Threading.CancellationToken> objeto que se pasa a un <xref:System.Web.TaskEventHandler> delegar cancelación tomando como base la <xref:System.Web.UI.Page.AsyncTimeout%2A> atributo establecido el `@ Page` la directiva de la página Web. Cuando el <xref:System.Web.UI.Page.AsyncTimeout%2A> se ha alcanzado el valor, el <xref:System.Threading.CancellationToken> se señalará el objeto. El `CancellationToken` parámetro debe pasarse a cualquier API asincrónicas que se llama a la implementación de la <xref:System.Web.TaskEventHandler> clase.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Un controlador de eventos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.PageAsyncTask" /> mediante un controlador de eventos que habilita la tarea que se va a controlar.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Controlador al que se debe llamar al iniciar una tarea asincrónica.</param>
        <param name="endHandler">Controlador al que se debe llamar cuando la tarea se lleva a cabo correctamente en el período del tiempo de espera.</param>
        <param name="timeoutHandler">Controlador al que se debe llamar cuando la tarea no se lleva a cabo correctamente en el período del tiempo de espera.</param>
        <param name="state">Objeto que representa el estado de la tarea.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.PageAsyncTask" /> con el valor predeterminado para la ejecución simultánea.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta implementación del constructor establece la <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> propiedad `false` para la tarea asincrónica no se procesa en paralelo con otras tareas en la página.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="beginHandler" /> o <paramref name="endHandler" /> no se ha especificado.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler">Controlador al que se debe llamar al iniciar una tarea asincrónica.</param>
        <param name="endHandler">Controlador al que se debe llamar cuando la tarea se lleva a cabo correctamente en el período del tiempo de espera.</param>
        <param name="timeoutHandler">Controlador al que se debe llamar cuando la tarea no se lleva a cabo correctamente en el período del tiempo de espera.</param>
        <param name="state">Objeto que representa el estado de la tarea.</param>
        <param name="executeInParallel">Valor que indica si la tarea se puede procesar a la vez que otras tareas o no.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.PageAsyncTask" /> con el valor especificado para la ejecución simultánea.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta implementación del constructor permite definir si la tarea asincrónica se procesará en paralelo con otras tareas en la página.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea tres tareas asincrónicas que se procesan en paralelo entre sí. Este ejemplo forma parte de un ejemplo más extenso que se encuentra en la <xref:System.Web.UI.PageAsyncTask> general sobre la clase.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="beginHandler" /> o <paramref name="endHandler" /> no se ha especificado.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el método al que se debe llamar al iniciar una tarea asincrónica.</summary>
        <value>Delegado de <see cref="T:System.Web.BeginEventHandler" /> que representa el método al que se debe llamar al iniciar la tarea asincrónica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegado está establecido en el constructor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se registra tres tareas asincrónicas en una página y las ejecuta en paralelo. Cada tarea llama a un método que simplemente hace que el subproceso en modo de suspensión durante 5 segundos. Un <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegado se especifica para cada tarea.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el método al que se debe llamar cuando la tarea se lleva a cabo correctamente en el período del tiempo de espera.</summary>
        <value>Delegado de <see cref="T:System.Web.EndEventHandler" /> que representa el método al que se debe llamar cuando la tarea se lleva a cabo correctamente en el período del tiempo de espera.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegado está establecido en el constructor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se registra tres tareas asincrónicas en una página y las ejecuta en paralelo. Cada tarea llama a un método que simplemente hace que el subproceso en modo de suspensión durante 5 segundos. Un <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegado se especifica para cada tarea.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la tarea se puede procesar a la vez que otras tareas o no.</summary>
        <value>
          <see langword="true" /> si la tarea se debe procesar a la vez que otras tareas; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> propiedad se establece en el constructor. Cuando varias tareas están registradas en una página y la <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> propiedad está establecida en `true`, a continuación, las tareas se procesan simultáneamente. Sin embargo, si la <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> propiedad está establecida en `false`, a continuación, las tareas se procesan secuencialmente. Por ejemplo, si una página contenida dos asincrónica las tareas que cada uno de ellos tardó 5 segundos en completarse y <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> se establece en `true`, ambas tareas se completen en 5 segundos. Si <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> está establecido en `false` para estos mismos dos tareas, a continuación, la primera tarea se completará en 5 segundos y la segunda tarea completará 5 segundos después de la finalización de la primera tarea.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se define tres tareas asincrónicas que están establecida para que se procesan en paralelo. Este ejemplo forma parte de un ejemplo más extenso que se encuentra en la <xref:System.Web.UI.PageAsyncTask> general sobre la clase.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que representa el estado de la tarea.</summary>
        <value>Objeto <see cref="T:System.Object" /> que representa el estado de la tarea.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.PageAsyncTask.State%2A> propiedad se establece en el constructor y no se puede modificar durante la ejecución de la tarea asincrónica. Puede diferenciar las tareas asincrónicas en una página mediante la asignación de valores de cadena únicos a sus respectivas <xref:System.Web.UI.PageAsyncTask.State%2A> propiedades.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crean tres tareas asincrónicas y les proporciona valores únicos para sus <xref:System.Web.UI.PageAsyncTask.State%2A> propiedades. Este ejemplo forma parte de un ejemplo más extenso que se encuentra en la <xref:System.Web.UI.PageAsyncTask> general sobre la clase.  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el método al que se debe llamar cuando la tarea no se lleva a cabo correctamente en el período del tiempo de espera.</summary>
        <value>Delegado de <see cref="T:System.Web.EndEventHandler" /> que representa el método al que se debe llamar cuando la tarea no se lleva a cabo correctamente en el período del tiempo de espera.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegado está establecido en el constructor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se registra tres tareas asincrónicas en una página y las ejecuta en paralelo. Cada tarea llama a un método que simplemente hace que el subproceso en modo de suspensión durante 5 segundos. Un <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegado se especifica para cada tarea.  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>