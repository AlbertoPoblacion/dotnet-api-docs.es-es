<Type Name="ICallbackEventHandler" FullName="System.Web.UI.ICallbackEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f2497c33eaf27f68789628a3955254edac82843" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37588607" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICallbackEventHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICallbackEventHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ICallbackEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICallbackEventHandler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICallbackEventHandler" />
  <TypeSignature Language="F#" Value="type ICallbackEventHandler = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Se utiliza para indicar que un control puede ser el destino de un evento de devolución de llamada en el servidor.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el <xref:System.Web.UI.ICallbackEventHandler> interfaz para cualquier control personalizado que deba recibir eventos de devolución de llamada. Para obtener más información, consulte [Implementing devoluciones de llamada de cliente sin Postbacks](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).  
  
 Ejemplos de controles que implementan el <xref:System.Web.UI.ICallbackEventHandler> interfaz incluye el <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, y <xref:System.Web.UI.WebControls.TreeView> controles. Cuando un evento de devolución de llamada tiene como destino un control que implementa el <xref:System.Web.UI.ICallbackEventHandler> interfaz, el <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> método se llama para controlar el evento pasando el argumento de evento como un parámetro y el <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> método devuelve el resultado de la devolución de llamada.  
  
 Los controles que recuperan datos de un control de origen de datos durante la devolución de llamada pueden hacerlo de forma sincrónica o asincrónica. Controles de ASP.NET como <xref:System.Web.UI.WebControls.GridView>, <xref:System.Web.UI.WebControls.DetailsView>, y <xref:System.Web.UI.WebControls.TreeView> se implementan de forma sincrónica. Las devoluciones de llamada sincrónicas no impiden que el usuario trabaja en el explorador. En modo sincrónico, puede ejecutar solo una devolución de llamada a la vez, con la devolución de llamada última tiene prioridad. Cuando se implementa un control Web para admitir el comportamiento asincrónico, se pueden generar simultáneamente varias devoluciones de llamada. Para obtener más información sobre la programación asincrónica, vea [patrón asincrónico basado en eventos (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).  
  
 Puede especificar si los eventos de devolución de llamada que se origina en la interfaz de usuario representan un control que implementa el <xref:System.Web.UI.ICallbackEventHandler> interfaz se validan. Validación de eventos es una buena práctica de seguridad. Sin embargo, por motivos de rendimiento se puede deshabilitar. Para controlar si se realiza la validación de eventos en los eventos de devolución de llamada, establezca el `enableEventValidation` atributo de la [@ Page](http://msdn.microsoft.com/library/f06cf9e5-22bb-461d-8b8f-549e53ff40a4) directiva o la `enableEventValidation` atributo de la [páginas Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/library/4123bb66-3fe4-4d62-b70e-33758656b458) del archivo Web.config. Si establece la <xref:System.Web.UI.Page.EnableEventValidation%2A> propiedad en el código, establézcalo el `Page_Init` fase de procesamiento de la página. Para obtener más información sobre el equilibrio de la ventaja de seguridad de la validación de eventos con el costo de rendimiento, consulte [información general sobre el rendimiento de ASP.NET](http://msdn.microsoft.com/library/f882bf1b-a009-4312-ac06-74370ffabc0b).  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
    <altmember cref="M:System.Web.UI.WebControls.DetailsView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
    <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
  </Docs>
  <Members>
    <Member MemberName="GetCallbackResult">
      <MemberSignature Language="C#" Value="public string GetCallbackResult ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCallbackResult() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackResult () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackResult();" />
      <MemberSignature Language="F#" Value="abstract member GetCallbackResult : unit -&gt; string" Usage="iCallbackEventHandler.GetCallbackResult " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve los resultados de un evento de devolución de llamada que tiene como destino un control.</summary>
        <returns>Resultado de la devolución de llamada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las excepciones producidas <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> no impedirá que <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> desde que se llama y devolver un resultado. Para evitar <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> devuelvan un resultado, establecer una marca, cuando se produce una excepción <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> y devuelve una cadena vacía desde <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.DetailsView.GetCallbackResult" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.GetCallbackResult" />
      </Docs>
    </Member>
    <Member MemberName="RaiseCallbackEvent">
      <MemberSignature Language="C#" Value="public void RaiseCallbackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RaiseCallbackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseCallbackEvent (eventArgument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseCallbackEvent(System::String ^ eventArgument);" />
      <MemberSignature Language="F#" Value="abstract member RaiseCallbackEvent : string -&gt; unit" Usage="iCallbackEventHandler.RaiseCallbackEvent eventArgument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Cadena que representa un argumento del evento que se pasará al controlador de eventos.</param>
        <summary>Procesa un evento de devolución de llamada que tiene como destino un control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando `null` se utiliza como parámetro del argumento de evento, la cadena se serializa a back "null" y se envía al servidor. Porque no hay ninguna manera de distinguir entre `null` y "null", debe evitar usar `null` parámetros de argumento con devoluciones de llamada.  
  
 Las excepciones producidas <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> no impedirá que <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> desde que se llama y devolver un resultado. Para evitar <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> devuelvan un resultado, establecer una marca, cuando se produce una excepción <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> y devuelve una cadena vacía desde <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetCallbackEventReference" />
        <altmember cref="M:System.Web.UI.WebControls.GridView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.WebControls.TreeView.System#Web#UI#ICallbackEventHandler#RaiseCallbackEvent(System.String)" />
        <altmember cref="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult" />
      </Docs>
    </Member>
  </Members>
</Type>