<Type Name="ControlCollection" FullName="System.Web.UI.ControlCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="39310eccb6e299c2073453ba53be3d2b750c716e" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52214431" /></Metadata><TypeSignature Language="C#" Value="public class ControlCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ControlCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlCollection : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type ControlCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona un contenedor de colecciones que permite a los controles de servidor ASP.NET mantener una lista de los controles secundarios.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede tener acceso a cualquiera de las propiedades y métodos de la <xref:System.Web.UI.ControlCollection> clase a través de la <xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType> propiedad. Puesto que la <xref:System.Web.UI.Control> clase es la clase base para todos los controles de servidor ASP.NET, todos los controles de servidor heredan esta propiedad.  
  
 Para obtener más información acerca de las colecciones, vea [colecciones y estructuras de datos](~/docs/standard/collections/index.md).  
  
   
  
## Examples  
 El siguiente código de ejemplo invalida el <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> método para crear dos controles, ambas instancias de la clase personalizada denominada `ChildControl`, que tiene una propiedad de cadena denominada `Message`. Cuando crea, los dos controles se agregan a la <xref:System.Web.UI.ControlCollection>. El <xref:System.Web.UI.ControlCollection.Add%2A> se llama al método en cada uno de estos controles para agregarlos a la clase que contiene esta versión de <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType>. El <xref:System.Web.UI.Control.ChildControlsCreated%2A> propiedad está establecida en `true` para que estos controles no se crearán nuevo innecesariamente.  
  
 [!code-csharp[Control_Sample_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Control_Sample_1/CS/control_sample.cs#1)]
 [!code-vb[Control_Sample_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Control_Sample_1/VB/control_sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.UI.Control.Controls" />
    <related type="Article" href="~/docs/standard/collections/index.md">Colecciones y estructuras de datos</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlCollection (System.Web.UI.Control owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Control owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.#ctor(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlCollection(System::Web::UI::Control ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ControlCollection : System.Web.UI.Control -&gt; System.Web.UI.ControlCollection" Usage="new System.Web.UI.ControlCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="owner">Control de servidor ASP.NET para el que se crea la colección de controles.</param>
        <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Web.UI.ControlCollection" /> para el control de servidor principal especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente es un personalizado <xref:System.Web.UI.ControlCollection> clase que reemplaza el constructor para escribir mensajes (que incluyen el nombre de la <xref:System.Web.UI.ControlCollection.Owner%2A> propiedad) en el registro de seguimiento cuando se crea una instancia de la colección. Debe habilitar el seguimiento de la página o una aplicación para que funcione este ejemplo.  
  
 [!code-csharp[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Se produce si el parámetro <paramref name="owner" /> es <see langword="null" />.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (child As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Web::UI::Control ^ child);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Web.UI.Control -&gt; unit&#xA;override this.Add : System.Web.UI.Control -&gt; unit" Usage="controlCollection.Add child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="child"><see cref="T:System.Web.UI.Control" /> que se agrega a la colección.</param>
        <summary>Agrega a la colección el objeto <see cref="T:System.Web.UI.Control" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El nuevo control se agrega al final de una matriz de índice ordinal. El control puede ser una instancia de cualquier control de servidor ASP.NET, crea un control de servidor personalizado o un control literal.  
  
 Para agregar un control a la colección en una ubicación de índice específica, utilice el <xref:System.Web.UI.ControlCollection.AddAt%2A> método.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.UI.ControlCollection.Add%2A> método para agregar una serie de elementos de la plantilla, el número de los cuales se toma de estado de vista del control de servidor, a un control con plantilla personalizado.  
  
 [!code-csharp[TemplatedDataBoundControl#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Se produce si el parámetro <paramref name="child" /> no especifica un control.</exception>
        <exception cref="T:System.Web.HttpException">Se produce si <see cref="T:System.Web.UI.ControlCollection" /> es de sólo lectura.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public virtual void AddAt (int index, System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAt(int32 index, class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAt (index As Integer, child As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAt(int index, System::Web::UI::Control ^ child);" />
      <MemberSignature Language="F#" Value="abstract member AddAt : int * System.Web.UI.Control -&gt; unit&#xA;override this.AddAt : int * System.Web.UI.Control -&gt; unit" Usage="controlCollection.AddAt (index, child)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación en la matriz en la que se debe agregar el control secundario.</param>
        <param name="child"><see cref="T:System.Web.UI.Control" /> que se agrega a la colección.</param>
        <summary>Agrega el objeto <see cref="T:System.Web.UI.Control" /> especificado a la colección en la ubicación de índice especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El control agregado puede ser una instancia de cualquier control de servidor ASP.NET, crea un control de servidor personalizado o un control literal.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.UI.ControlCollection.AddAt%2A> método para crear un nuevo <xref:System.Web.UI.LiteralControl> denominado `ChildControl2` y agréguelo a la `myButton` del control <xref:System.Web.UI.ControlCollection> colección en la ubicación de índice de 1.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="child" /> no especifica un control.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que cero o mayor que la propiedad <see cref="P:System.Web.UI.ControlCollection.Count" />.</exception>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.UI.ControlCollection" /> es de solo lectura.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="controlCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita todos los controles del objeto <see cref="T:System.Web.UI.ControlCollection" /> del control de servidor actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice este método para vaciar un control personalizado <xref:System.Web.UI.ControlCollection> al invalidar el <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> y <xref:System.Web.UI.Control.DataBind%2A> métodos. Haga esto cuando desarrolle controles compuestos con plantilla o controles enlazados a datos con plantilla.  
  
   
  
## Examples  
 El ejemplo de código siguiente se muestra cómo reemplazar el <xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType> método y el uso de la <xref:System.Web.UI.ControlCollection.Clear%2A> método para eliminar todos los controles secundarios previamente el <xref:System.Web.UI.ControlCollection> objeto. En este caso, debe hacerlo para que los objetos en el control obsoletos <xref:System.Web.UI.ControlCollection> no se muestran incorrectamente.  
  
 [!code-csharp[TemplatedDataBoundControl#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (System.Web.UI.Control c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Web.UI.Control c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Contains(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (c As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Web::UI::Control ^ c);" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Web.UI.Control -&gt; bool&#xA;override this.Contains : System.Web.UI.Control -&gt; bool" Usage="controlCollection.Contains c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="c">Control de servidor que se va a buscar en la colección.</param>
        <summary>Determina si el control de servidor especificado está en el objeto <see cref="T:System.Web.UI.ControlCollection" /> del control de servidor principal.</summary>
        <returns>Es <see langword="true" /> si el control de servidor especificado existe en la colección; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[System.Web.UI.ctrlCollection_Contains#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/CS/ctrlcollection_contains.cs.aspx#1)]
 [!code-vb[System.Web.UI.ctrlCollection_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/VB/ctrlcollection_contains.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="controlCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><see cref="T:System.Array" /> donde se van a copiar los controles secundarios.</param>
        <param name="index">Índice relativo de base cero de <paramref name="array" /> donde se comienza a copiar.</param>
        <summary>Copia los controles secundarios almacenados en el objeto <see cref="T:System.Web.UI.ControlCollection" /> en un objeto <see cref="T:System.Array" />, comenzando por la ubicación de índice especificada en <see cref="T:System.Array" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException"><paramref name="array" /> no es <see langword="null" /> y no es unidimensional.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.UI.ControlCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de controles de servidor que hay en el objeto <see cref="T:System.Web.UI.ControlCollection" /> para el control de servidor ASP.NET especificado.</summary>
        <value>El número de controles de servidor de <see cref="T:System.Web.UI.ControlCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Web.UI.ControlCollection.Count%2A> propiedad para iterar por un control <xref:System.Web.UI.ControlCollection> objeto. El uso de la <xref:System.Web.UI.Control.HasControls%2A?displayProperty=nameWithType> propiedad verifica que el control tiene controles secundarios. Si <xref:System.Web.UI.Control.HasControls%2A?displayProperty=nameWithType> devuelve `false`, el código restante no se ejecuta.  
  
 [!code-csharp[Classic Control.HasControls Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Control.HasControls Example/CS/source.cs#1)]
 [!code-vb[Classic Control.HasControls Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Control.HasControls Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="controlCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera un enumerador que puede recorrer en iteración el objeto <see cref="T:System.Web.UI.ControlCollection" />.</summary>
        <returns>Enumerador que se va a utilizar para recorrer en iteración la colección.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un método que se enumera a través de la <xref:System.Web.UI.ControlCollection> colección de un <xref:System.Web.UI.WebControls.Button> control, `myButton`. Cuando se crea el enumerador, el <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> propiedad se comprueba para ver si la operación es segura para subprocesos, y si no lo es, el <xref:System.Web.UI.ControlCollection.SyncRoot%2A> propiedad se utiliza para obtener un objeto para que el subproceso de la operación sea segura. Cuando se completa la enumeración, el valor de la <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> propiedad se escribe como el <xref:System.Web.UI.WebControls.Label.Text%2A> propiedad de un <xref:System.Web.UI.WebControls.Label> control en la página contenedora.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.IndexOf(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (value As Control) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Web::UI::Control ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : System.Web.UI.Control -&gt; int&#xA;override this.IndexOf : System.Web.UI.Control -&gt; int" Usage="controlCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">El objeto <see cref="T:System.Web.UI.Control" /> para el que se devuelve el índice.</param>
        <summary>Recupera el índice de un objeto <see cref="T:System.Web.UI.Control" /> especificado en la colección.</summary>
        <returns>Índice del control de servidor especificado. Si el control de servidor no es en la actualidad un miembro de la colección, devuelve -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use este método para determinar la ubicación de índice del control de servidor especificado en el <xref:System.Web.UI.ControlCollection> objeto.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.UI.ControlCollection.IndexOf%2A> método para escribir la ubicación de índice de un control, `myLiteralControl`, en el <xref:System.Web.UI.ControlCollection> colección de un <xref:System.Web.UI.WebControls.Button> control denominado `myButton`.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Web.UI.ControlCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Web.UI.ControlCollection" /> es de solo lectura.</summary>
        <value>Es <see langword="true" /> si el control es de solo lectura; en caso contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un método que se enumera a través de la <xref:System.Web.UI.ControlCollection> colección de un <xref:System.Web.UI.WebControls.Button> control, `myButton`. Cuando se crea el enumerador, el <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> propiedad se comprueba para ver si la operación es segura para subprocesos, y si no lo es, el <xref:System.Web.UI.ControlCollection.SyncRoot%2A> propiedad se utiliza para obtener un objeto para que el subproceso de la operación sea segura. Cuando la enumeración está completa, el valor de la <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> propiedad se escribe como el <xref:System.Web.UI.WebControls.Label.Text%2A> propiedad de un <xref:System.Web.UI.WebControls.Label> control en la página contenedora.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Web.UI.ControlCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Web.UI.ControlCollection" /> está sincronizado.</summary>
        <value>Esta propiedad es siempre <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un método que se enumera a través de la <xref:System.Web.UI.ControlCollection> colección de un <xref:System.Web.UI.WebControls.Button> control, `myButton`. Cuando se crea el enumerador, el <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> propiedad se comprueba para ver si la operación es segura para subprocesos, y si no lo es, el <xref:System.Web.UI.ControlCollection.SyncRoot%2A> propiedad se utiliza para obtener un objeto para que el subproceso de la operación sea segura. Cuando la enumeración está completa, el valor de la <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> propiedad se escribe como el <xref:System.Web.UI.WebControls.Label.Text%2A> propiedad de un <xref:System.Web.UI.WebControls.Label> control en la página contenedora.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Control this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(index As Integer) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::Control ^ default[int] { System::Web::UI::Control ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Web.UI.Control" Usage="System.Web.UI.ControlCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Ubicación del control de servidor en <see cref="T:System.Web.UI.ControlCollection" />.</param>
        <summary>Obtiene una referencia al control de servidor en la ubicación de índice especificada en el objeto <see cref="T:System.Web.UI.ControlCollection" />.</summary>
        <value>Referencia al control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.UI.ControlCollection.Item%2A> propiedad para especificar la ubicación de índice de un elemento secundario de control que se ha quitado de un <xref:System.Web.UI.ControlCollection.Remove%2A> llamada al método. Esto se realiza mediante el `myButton.Controls.Remove` sintaxis.  
  
 [!code-aspx-csharp[ControlCollection_ReSubmit_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/CS/controlcollection_copyto.cs.aspx#1)]
 [!code-aspx-vb[ControlCollection_ReSubmit_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/VB/controlcollection_copyto.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que cero o mayor o igual que <see cref="P:System.Web.UI.ControlCollection.Count" />.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Control Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Owner" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Owner" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Owner As Control" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Control ^ Owner { System::Web::UI::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Web.UI.Control" Usage="System.Web.UI.ControlCollection.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el control de servidor ASP.NET al que pertenece el objeto <see cref="T:System.Web.UI.ControlCollection" />.</summary>
        <value>El objeto <see cref="T:System.Web.UI.Control" /> al que pertenece <see cref="T:System.Web.UI.ControlCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente es un personalizado <xref:System.Web.UI.ControlCollection> clase que invalide la <xref:System.Web.UI.ControlCollection.%23ctor%2A> método para escribir mensajes (que incluyen el nombre de la <xref:System.Web.UI.ControlCollection.Owner%2A> propiedad) en el registro de seguimiento cuando se crea una instancia de la colección. Debe habilitar el seguimiento de la página o una aplicación para que funcione este ejemplo.  
  
 [!code-csharp[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (value As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Web::UI::Control ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Web.UI.Control -&gt; unit&#xA;override this.Remove : System.Web.UI.Control -&gt; unit" Usage="controlCollection.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">Control de servidor que se va a quitar.</param>
        <summary>Quita el control de servidor especificado del objeto <see cref="T:System.Web.UI.ControlCollection" /> del control de servidor principal.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para quitar un control en una ubicación de índice, utilice la <xref:System.Web.UI.ControlCollection.RemoveAt%2A> método.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.UI.ControlCollection.Remove%2A> método para eliminar un control secundario desde el `myButton` control de servidor. En primer lugar, el código usa el <xref:System.Web.UI.ControlCollection.Contains%2A> método para determinar si el `myChildControl` se encuentra en el <xref:System.Web.UI.ControlCollection> de objeto y, si es así, lo elimina.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#4)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="controlCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice ordinal del control de servidor que se va a quitar de la colección.</param>
        <summary>Quita un control secundario, situado en la ubicación de índice especificada, del objeto <see cref="T:System.Web.UI.ControlCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para quitar un control de la colección según su valor, use la <xref:System.Web.UI.ControlCollection.Remove%2A> método.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.UI.ControlCollection.RemoveAt%2A> método para eliminar un control secundario desde el `myButton` control de servidor. En primer lugar, la llamada al método especifica una ubicación de índice 1 desde el que se elimine el control. El ejemplo se escribe en el que contiene un mensaje de texto que indica que se ha eliminado el control en esa ubicación de la página el <xref:System.Web.UI.ControlCollection> colección.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#5)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">Se produce si <see cref="T:System.Web.UI.ControlCollection" /> es de sólo lectura.</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Web.UI.ControlCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que puede utilizarse para sincronizar el acceso a la colección de controles.</summary>
        <value>Objeto <see cref="T:System.Object" /> que se utiliza para sincronizar la colección.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se crea un método que se enumera a través de la <xref:System.Web.UI.ControlCollection> colección de un <xref:System.Web.UI.WebControls.Button> control, `myButton`. Cuando se crea el enumerador, el <xref:System.Web.UI.ControlCollection.IsSynchronized%2A> propiedad se comprueba para ver si la operación es segura para subprocesos, y si no lo es, el <xref:System.Web.UI.ControlCollection.SyncRoot%2A> propiedad se utiliza para obtener un objeto para que el subproceso de la operación sea segura. Cuando la enumeración está completa, el valor de la <xref:System.Web.UI.ControlCollection.IsReadOnly%2A> propiedad se escribe como el <xref:System.Web.UI.WebControls.Label.Text%2A> propiedad de un <xref:System.Web.UI.WebControls.Label> control en la página contenedora.  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
  </Members>
</Type>