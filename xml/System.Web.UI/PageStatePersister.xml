<Type Name="PageStatePersister" FullName="System.Web.UI.PageStatePersister">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0281a61e3dd268dd9a9a917b22d7857cea78924b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36376568" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PageStatePersister" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PageStatePersister extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageStatePersister" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PageStatePersister" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageStatePersister abstract" />
  <TypeSignature Language="F#" Value="type PageStatePersister = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona la funcionalidad básica para los mecanismos de persistencia del estado de vista de ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las solicitudes y respuestas HTTP son inherentemente sin estado. Para mantener la información de estado entre las solicitudes HTTP, pueden almacenar las páginas de servidor ASP.NET <xref:System.Web.UI.Page> estado. Este estado, denominado estado de vista, consta de página y configuración del control y los datos que hacen que la página y los controles aparecen como si fuesen iguales que el usuario vio e interactuar con ellos en su última ida y vuelta al servidor. Existen varios mecanismos para almacenar el estado de vista entre las solicitudes sucesivas a la misma página. Abstracto <xref:System.Web.UI.PageStatePersister> clase representa la clase base para estos mecanismos de almacenamiento de información de estado.  
  
 El mecanismo de persistencia de estado de vista predeterminada en ASP.NET consiste en mantener la información de estado como una cadena codificada en Base64 en un elemento HTML oculto (un elemento con la `type` atributo establecido en `"hidden"`) en la página. Una página ASP.NET usa un <xref:System.Web.UI.HiddenFieldPageStatePersister> objeto que se va a realizar esta operación funcione, con un <xref:System.Web.UI.IStateFormatter> instancia para serializar y deserializar la información de estado de objeto. Como alternativa, puede almacenar el estado de vista de las páginas en el <xref:System.Web.HttpContext.Session%2A> objeto en el servidor mediante el <xref:System.Web.UI.SessionPageStatePersister> clase para clientes móviles con recursos y ancho de banda limitado. En algunos casos, puede deshabilitar por completo la persistencia del estado de vista. Si lo hace, el resultado es que a veces páginas y controles que se basan en la persistencia de estado no funcione correctamente. Para obtener más información acerca del estado de administración y la vista de estado de página, vea [ASP.NET State Management Overview](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 Si está escribiendo controles, puede almacenar información de estado para los controles en el <xref:System.Web.UI.Control.ViewState%2A> diccionario, que es un <xref:System.Web.UI.StateBag> objeto. Los desarrolladores podrían recuperar el estado del control a través de la <xref:System.Web.UI.PageStatePersister.ControlState%2A> propiedad. Asignar claves y valores para la <xref:System.Web.UI.Control.ViewState%2A> propiedad y el <xref:System.Web.UI.Page> objeto serializa la información de estado entre las solicitudes. Para llevar a cabo en el control de estado personalizado, invalide el <xref:System.Web.UI.Control.LoadViewState%2A> y <xref:System.Web.UI.Control.SaveViewState%2A> métodos. Cualquier información de estado que se almacena en este diccionario se pierde cuando el estado de vista está deshabilitado por un desarrollador de la página. Para mitigar esto, en la versión 2.0, puede almacenar información de estado crítico en un objeto independiente, denominado estado de control de ASP.NET. El objeto de estado de control no afecta al estado de vista está deshabilitado por un desarrollador de la página. Almacenar información de estado en el objeto de estado de control requiere que el control reemplace la <xref:System.Web.UI.Control.LoadControlState%2A> y <xref:System.Web.UI.Control.SaveControlState%2A> métodos y que el control se registre para almacenar información de estado en controlan el estado de cada vez que se inicializa el control. Puede registrar un control para utilizar el estado de control invalidando el <xref:System.Web.UI.Control.OnInit%2A> método y llamar a la <xref:System.Web.UI.Page.RegisterRequiresControlState%2A> método. Para obtener más información sobre el uso de la <xref:System.Web.UI.Control.ViewState%2A> estado de propiedad y el control al desarrollar controles, vea [desarrollar controles de servidor ASP.NET personalizado](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
 Para mantener el estado de vista en los clientes que no son compatibles con las existentes ver los mecanismos de persistencia de estado, puede ampliar el <xref:System.Web.UI.PageStatePersister> para introducir sus propios métodos de persistencia de estado de vista de clases, y puede usar adaptadores de página para configurar la aplicación ASP.NET Para usar los mecanismos de persistencia de estado de vista diferentes según el tipo de cliente a la que se sirve una página. Las clases que derivan de la <xref:System.Web.UI.PageStatePersister> clase debe reemplazar abstracto <xref:System.Web.UI.PageStatePersister.Save%2A> método para almacenar el estado de vista y el estado de control en el medio de persistencia e invalidar el <xref:System.Web.UI.PageStatePersister.Load%2A> método extraerlo. Si necesita serializar el estado de vista y el estado del control en una cadena, puede usar el <xref:System.Web.UI.IStateFormatter> objeto que se tiene acceso a la <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> propiedad. Eficazmente serializa y deserializa información de estado de objeto a una cadena codificada en Base64. También puede invalidar el <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> propiedad para proporcionar su propio mecanismo de serialización del estado de objeto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un <xref:System.Web.UI.PageStatePersister> objeto que guarda el estado de vista y el control en el servidor Web. El `StreamPageStatePersister` muestra cómo invalidar el <xref:System.Web.UI.PageStatePersister.Load%2A> y <xref:System.Web.UI.PageStatePersister.Save%2A> métodos para extraer y Guardar vista de información de estado. Dado que los mecanismos de persistencia de estado están relacionados con la representación adaptable y capacidades de cliente, el `MyPageAdapter` clase se proporciona para activar el `StreamPageStatePersister` para una aplicación ASP.NET. Por último, se proporciona un archivo de capacidades (Browser) del explorador para permitir el `MyPageAdapter` el adaptador para una clase específica de clientes (en este caso, el explorador Web predeterminado).  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#1)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#1)]  
  
 En el ejemplo de código siguiente se muestra cómo crear un <xref:System.Web.UI.Adapters.PageAdapter> clase que devuelve una instancia de `StreamPageStatePersister`, que se usa para conservar el estado de vista y control de una página Web ASP.NET.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#5)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#5)]  
  
 Compile estas dos clases en un ensamblado que puede usar para ejecutar un ejemplo, mediante la siguiente línea de comandos del compilador. Compruebe que el ensamblado compilado se encuentra en el directorio \Bin bajo la raíz de la aplicación de ASP.NET.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/mypageadapter.cs#6)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/mypageadapter.vb#6)]  
  
 Por último, para habilitar el `MyPageAdapter` adaptador, debe crear un directorio denominado exploradores bajo la raíz de la aplicación de ASP.NET e incluir un archivo Browser con información de configuración. El `<refid>` elemento en el archivo de configuración indica que la configuración reemplaza los valores especificados para el explorador predeterminado en el archivo de configuración Default.browser. En este ejemplo, `MyPageAdapter` se utiliza para las páginas Web ASP.NET (donde normalmente se utiliza ningún adaptador).  
  
```  
<browsers>  
    <browser refid="Default" >  
        <controlAdapters>  
            <adapter   
                controlType="System.Web.UI.Page"                              
                adapterType="Samples.AspNet.CS.MyPageAdapter" />  
        </controlAdapters>  
    </browser>  
</browsers>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.ObjectStateFormatter" />
    <altmember cref="T:System.Web.UI.LosFormatter" />
    <altmember cref="T:System.Web.UI.Pair" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PageStatePersister (System.Web.UI.Page page);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Page page) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.#ctor(System.Web.UI.Page)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PageStatePersister(System::Web::UI::Page ^ page);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageStatePersister : System.Web.UI.Page -&gt; System.Web.UI.PageStatePersister" Usage="new System.Web.UI.PageStatePersister page" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="page" Type="System.Web.UI.Page" />
      </Parameters>
      <Docs>
        <param name="page">Objeto <see cref="T:System.Web.UI.Page" /> para el que se crea el mecanismo de persistencia del estado de vista.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.PageStatePersister" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="page" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ControlState">
      <MemberSignature Language="C#" Value="public object ControlState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ControlState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ControlState" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ControlState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ControlState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ControlState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un objeto que representa los datos que los controles incluidos en el objeto <see cref="T:System.Web.UI.Page" /> actual utilizan para conservarse a lo largo de las distintas solicitudes HTTP al servidor Web.</summary>
        <value>Objeto que contiene los datos del estado de vista.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estado del control es un objeto formado por datos de estado de vista crítico que Web server controles necesarios para el funcionamiento y se encuentra en un objeto independiente de la información de estado de la vista normal. Datos de estado de control no se ve afectados cuando se deshabilita el estado de vista en el <xref:System.Web.UI.Page> de nivel, pero requiere pasos de implementación adicionales para usar. Para obtener más información sobre el uso de la <xref:System.Web.UI.Control.ViewState%2A> estado de propiedad y el control al desarrollar controles, vea [desarrollar controles de servidor ASP.NET personalizado](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo una clase que deriva de la <xref:System.Web.UI.PageStatePersister> clase inicializa el <xref:System.Web.UI.PageStatePersister.ControlState%2A> propiedad. En este ejemplo, el <xref:System.Web.UI.PageStatePersister.ControlState%2A> propiedad se ha asignado a la <xref:System.Web.UI.Pair.Second> campo de un <xref:System.Web.UI.Pair> de objetos y serializa utilizando el <xref:System.Web.UI.ObjectStateFormatter> clase. Cuando el <xref:System.Web.UI.PageStatePersister.Load%2A> método se llama, el <xref:System.Web.UI.ObjectStateFormatter> clase se utiliza para deserializar la información de estado de control y de estado de vista y el <xref:System.Web.UI.PageStatePersister.ControlState%2A> propiedad se inicializa desde resultante <xref:System.Web.UI.Pair> del objeto <xref:System.Web.UI.Pair.Second> campo. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.UI.PageStatePersister> clase.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract void Load ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Load" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Load ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Load();" />
      <MemberSignature Language="F#" Value="abstract member Load : unit -&gt; unit" Usage="pageStatePersister.Load " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Este miembro se reemplaza por clases derivadas para deserializar y cargar la información de estado guardada cuando un objeto <see cref="T:System.Web.UI.Page" /> inicializa su jerarquía de controles.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las clases que derivan de la <xref:System.Web.UI.PageStatePersister> clase implemente la <xref:System.Web.UI.PageStatePersister.Load%2A> método para inicializar el <xref:System.Web.UI.PageStatePersister.ViewState%2A> y <xref:System.Web.UI.PageStatePersister.ControlState%2A> propiedades desde algún formato persistente.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo una clase que deriva de la <xref:System.Web.UI.PageStatePersister> la clase implementa la <xref:System.Web.UI.PageStatePersister.Load%2A> método para cargar el estado de vista desde un medio de persistencia. El `StreamPageStatePersister` intenta leer datos de una secuencia. Usa un <xref:System.Web.UI.IStateFormatter> objeto para deserializar los datos de estado de vista e inicializar el <xref:System.Web.UI.PageStatePersister.ViewState%2A> propiedad y el <xref:System.Web.UI.PageStatePersister.ControlState%2A> propiedad, que una página se utiliza para inicializar los controles. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.UI.PageStatePersister> clase.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Page">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Page Page { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Page Page" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.Page" />
      <MemberSignature Language="VB.NET" Value="Protected Property Page As Page" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Page ^ Page { System::Web::UI::Page ^ get(); void set(System::Web::UI::Page ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Page : System.Web.UI.Page with get, set" Usage="System.Web.UI.PageStatePersister.Page" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Page</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Web.UI.Page" /> para el que se crea el mecanismo de persistencia del estado de vista.</summary>
        <value>La clase <see cref="T:System.Web.UI.Page" /> a la que está asociada la clase <see cref="T:System.Web.UI.PageStatePersister" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar el <xref:System.Web.UI.PageStatePersister.Page%2A> propiedad para tener acceso a la actual <xref:System.Web.HttpContext> objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract void Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageStatePersister.Save" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Save ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Save();" />
      <MemberSignature Language="F#" Value="abstract member Save : unit -&gt; unit" Usage="pageStatePersister.Save " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Este miembro se reemplaza por clases derivadas para serializar la información de estado guardada cuando un objeto <see cref="T:System.Web.UI.Page" /> se descarga de la memoria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las clases que derivan de la <xref:System.Web.UI.PageStatePersister> clase implemente la <xref:System.Web.UI.PageStatePersister.Save%2A> método para conservar el contenido de la <xref:System.Web.UI.PageStatePersister.ViewState%2A> y <xref:System.Web.UI.PageStatePersister.ControlState%2A> propiedades en un medio de persistencia.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo una clase que deriva de la <xref:System.Web.UI.PageStatePersister> la clase implementa la <xref:System.Web.UI.PageStatePersister.Save%2A> método para conservar el estado de vista en un medio de persistencia. El `StreamPageStatePersister` utiliza un <xref:System.Web.UI.IStateFormatter> objeto para serializar el contenido de la <xref:System.Web.UI.PageStatePersister.ViewState%2A> propiedad y <xref:System.Web.UI.PageStatePersister.ControlState%2A> propiedad. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.UI.PageStatePersister> clase.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StateFormatter">
      <MemberSignature Language="C#" Value="protected System.Web.UI.IStateFormatter StateFormatter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IStateFormatter StateFormatter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property StateFormatter As IStateFormatter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::IStateFormatter ^ StateFormatter { System::Web::UI::IStateFormatter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StateFormatter : System.Web.UI.IStateFormatter" Usage="System.Web.UI.PageStatePersister.StateFormatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IStateFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto <see cref="T:System.Web.UI.IStateFormatter" /> que se utiliza para serializar y deserializar la información de estado incluida en las propiedades <see cref="P:System.Web.UI.PageStatePersister.ViewState" /> y <see cref="P:System.Web.UI.PageStatePersister.ControlState" /> durante las llamadas a los métodos <see cref="M:System.Web.UI.PageStatePersister.Save" /> y <see cref="M:System.Web.UI.PageStatePersister.Load" />.</summary>
        <value>Instancia de <see cref="T:System.Web.UI.IStateFormatter" /> que se utiliza para serializar y deserializar el estado del objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede invalidar el <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> propiedad para proporcionar su propio formateador de estado de vista.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo una clase que deriva de la <xref:System.Web.UI.PageStatePersister> clase tiene acceso a la <xref:System.Web.UI.PageStatePersister.StateFormatter%2A> propiedad que recupere un <xref:System.Web.UI.ObjectStateFormatter> objeto, que es la implementación predeterminada de la <xref:System.Web.UI.IStateFormatter> interfaz para serializar la vista estado de control y estado en una secuencia. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.UI.PageStatePersister> clase.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#3)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewState">
      <MemberSignature Language="C#" Value="public object ViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageStatePersister.ViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property ViewState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ViewState { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ViewState : obj with get, set" Usage="System.Web.UI.PageStatePersister.ViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un objeto que representa los datos que los controles incluidos en el objeto <see cref="T:System.Web.UI.Page" /> actual utilizan para conservarse a lo largo de las distintas solicitudes HTTP al servidor Web.</summary>
        <value>Objeto que contiene los datos del estado de vista.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Estado de vista es un diccionario de datos de estado que tenga controles de servidor Web en funcionamiento y la representación. Los programadores de controles normalmente tienen acceso a los objetos de estado de vista mediante el <xref:System.Web.UI.Control.ViewState%2A> propiedad. Estado de vista se ve afectado cuando se deshabilita el estado de vista en el <xref:System.Web.UI.Page> nivel y así controles podrían no se comporten correctamente en estos escenarios. Para obtener más información sobre el uso de <xref:System.Web.UI.Control.ViewState%2A> y controlar el estado al desarrollar controles, vea [desarrollar controles de servidor ASP.NET personalizado](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo una clase que deriva de la <xref:System.Web.UI.PageStatePersister> clase inicializa el <xref:System.Web.UI.PageStatePersister.ViewState%2A> propiedad. En este ejemplo, el <xref:System.Web.UI.PageStatePersister.ViewState%2A> propiedad se ha asignado a la <xref:System.Web.UI.Pair.First> campo de un <xref:System.Web.UI.Pair> de objetos y serializa utilizando el <xref:System.Web.UI.ObjectStateFormatter> objeto, que es una instancia de la <xref:System.Web.UI.IStateFormatter> interfaz. Cuando el <xref:System.Web.UI.PageStatePersister.Load%2A> método se llama, el <xref:System.Web.UI.ObjectStateFormatter> interfaz se usa para deserializar la información de estado de vista y el <xref:System.Web.UI.PageStatePersister.ViewState%2A> propiedad se inicializa desde resultante <xref:System.Web.UI.Pair> del objeto <xref:System.Web.UI.Pair.First> campo. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.UI.PageStatePersister> clase.  
  
 [!code-csharp[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/CS/textfilepagestatepersister.cs#2)]
 [!code-vb[Samples.AspNet.Alexkr.TextFilePageStatePersister_1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Samples.AspNet.Alexkr.TextFilePageStatePersister_1/VB/textfilepagestatepersister.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>