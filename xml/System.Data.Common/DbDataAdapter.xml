<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="332e7bf7ba0f9c35c1455cd28bcf8d4bd18ca3f3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36692816" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Aids implementation of the <see cref="T:System.Data.IDbDataAdapter" /> interface. Inheritors of <see cref="T:System.Data.Common.DbDataAdapter" /> implement a set of functions to provide strong typing, but inherit most of the functionality needed to fully implement a **DataAdapter**.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter> clase hereda de la <xref:System.Data.Common.DataAdapter> clase e implementa el <xref:System.Data.IDbDataAdapter> interfaz. Ayuda a una clase implementar un **DataAdapter** diseñado para su uso con una base de datos relacional.  
  
 Una aplicación no crea una instancia de la <xref:System.Data.Common.DbDataAdapter> clase directamente, sino que crea una instancia de una clase que hereda de ella.  
  
 Las clases que heredan <xref:System.Data.Common.DbDataAdapter> deben implementar los miembros heredados y suelen definir miembros adicionales para agregar la funcionalidad específica del proveedor. Por ejemplo, el <xref:System.Data.Common.DbDataAdapter> clase define la <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad y el <xref:System.Data.Common.DbDataAdapter> clase define ocho sobrecargas de la <xref:System.Data.IDataAdapter.Fill%2A> método. A su vez, el <xref:System.Data.OleDb.OleDbDataAdapter> clase hereda el <xref:System.Data.Common.DbDataAdapter.Fill%2A> método y también define dos sobrecargas adicionales de <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> que toma un objeto ADO Recordset como parámetro.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Al heredar de la <see cref="T:System.Data.Common.DbDataAdapter" /> (clase), es recomendable que implemente los siguientes constructores: <list type="table"><listheader><term> elemento </term><description> descripción </description></listheader><item><term> *Prv*DataAdapter() </term><description> Inicializa una nueva instancia de la * Prv * DataAdapter (clase).  </description></item><item><term> * Prv * DataAdapter (* Prv * comando * selectCommand *) </term><description> Inicializa una nueva instancia de la * Prv * clase DataAdapter con la instrucción SQL SELECT especificada instrucción.  </description></item><item><term> * Prv * DataAdapter (cadena * selectCommandText *, cadena * selectConnectionString *) </term><description> Inicializa una nueva instancia de la * Prv * DataAdapter (clase) con una instrucción SELECT de SQL y una cadena de conexión.  </description></item><item><term> * Prv * DataAdapter (cadena * selectCommandText *, * Prv * conexión * selectConnection *) </term><description> Inicializa una nueva instancia de la * Prv * DataAdapter clase con una instrucción SELECT de SQL y un * Prv * objeto de conexión.  </description></item></list>  Para promover la coherencia entre los proveedores de datos de .NET Framework, debe nombrar la clase heredera con el formato * Prv * DataAdapter, donde * Prv * es el prefijo uniforme que se asigna a todas las clases en un espacio de nombres del proveedor de datos de .NET Framework específico. Por ejemplo, "Sql" es el prefijo de la <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> clase en el espacio de nombres **System.Data.SqlClient**.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of a <see langword="DataAdapter" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of a **DataAdapter** class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se crea una instancia de <xref:System.Data.Common.DbDataAdapter>, las siguientes propiedades de lectura y escritura se establecen en los siguientes valores iniciales.  
  
|Propiedades|Valor inicial|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|Un nuevo objeto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|Un nuevo objeto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|Un nuevo objeto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|Un nuevo objeto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Puede cambiar el valor de cualquiera de estas propiedades mediante una llamada independiente a la propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">A <see langword="DataAdapter" /> object used to create the new <see langword="DataAdapter" />.</param>
        <summary>Initializes a new instance of a <see langword="DataAdapter" /> class from an existing object of the same type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.Data.Common.DbDataAdapter> constructor está diseñado para su uso por un proveedor de datos de .NET Framework cuando se implementa un constructor similar para utilizarlo en una implementación de clonación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" />
      </Parameters>
      <Docs>
        <param name="command">The <see cref="T:System.Data.IDbCommand" /> to add to the batch.</param>
        <summary>Adds a <see cref="T:System.Data.IDbCommand" /> to the current batch.</summary>
        <returns>The number of commands in the batch before adding the <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método para permitir a los usuarios agregar un comando a un lote.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:System.Data.IDbCommand" /> objects from the batch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método para permitir a los usuarios quitar todos los comandos de un lote.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">The <see cref="T:System.Data.DataRow" /> used to update the data source.</param>
        <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
        <param name="tableMapping">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</summary>
        <returns>A new instance of the <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> class.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">The <see cref="T:System.Data.DataRow" /> that updates the data source.</param>
        <param name="command">The <see cref="T:System.Data.IDbCommand" /> to execute during the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Whether the command is an UPDATE, INSERT, DELETE, or SELECT statement.</param>
        <param name="tableMapping">A <see cref="T:System.Data.Common.DataTableMapping" /> object.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</summary>
        <returns>A new instance of the <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> class.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default name used by the <see cref="T:System.Data.Common.DataAdapter" /> object for table mappings.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table" es el nombre predeterminado utilizado por la <xref:System.Data.Common.DataAdapter> objeto para las asignaciones de tabla.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> es cuando una aplicación agrega una asignación de tabla para su uso con <xref:System.Data.Common.DbDataAdapter.Fill%2A>, pero no especifica un <xref:System.Data.DataTable> nombre.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a command for deleting records from the data set.</summary>
        <value>Un <see cref="T:System.Data.IDbCommand" /> utilizado durante <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> para eliminar registros en el origen de datos para las filas eliminadas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, si no se establece esta propiedad y la información de clave principal está presente en el <xref:System.Data.DataSet>, el <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> se genera automáticamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea la clase derivada <xref:System.Data.OleDb.OleDbDataAdapter> y establece algunas de sus propiedades.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Data.Common.DbDataAdapter" /> and optionally releases the managed resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Executes the current batch.</summary>
        <returns>The return value from the last command in the batch.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método para permitir a los usuarios ejecutar un lote. Una implementación de este método combina los comandos en el adaptador en un lote, a continuación, ejecuta el lote y devuelve el valor devuelto del lote.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Fills a <see cref="T:System.Data.DataSet" /> or a <see cref="T:System.Data.DataTable" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</param>
        <summary>Adds or refreshes rows in the <see cref="T:System.Data.DataSet" />.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera los datos de origen de datos con una instrucción SELECT. La <xref:System.Data.IDbConnection> objeto asociado con el comando select debe ser válido, pero no es necesario que esté abierto. Si el <xref:System.Data.IDbConnection> se cerró antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, que se abrió para recuperar datos y, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, permanece abierta.  
  
 Si se encuentra un error o una excepción al rellenar las tablas de datos, las filas agregadas antes de producirse el error mantienen en las tablas de datos. El resto de la operación se ha anulado.  
  
 Si un comando no devuelve ninguna fila, ninguna de las tablas se agrega a la <xref:System.Data.DataSet>, y no se genera ninguna excepción.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes utilizando el modelo "*columnname*1","*columnname*2", " *columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 Cuando la consulta especificada devuelve varios resultados, el conjunto de resultados para cada consulta que devuelve filas se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Dado que no hay ninguna tabla se crea para una consulta que no devuelve filas, si se procesa una consulta insert seguida de una consulta select, la tabla creada para la consulta select se denomina "Table" porque es la primera tabla creada. Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como instrucciones SQL por lotes, si uno de los resultados contiene un error, todos los resultados posteriores se omiten y no se agregan a la <xref:System.Data.DataSet>.  
  
 Cuando se usa posteriores <xref:System.Data.Common.DbDataAdapter.Fill%2A> llamadas para actualizar el contenido de la <xref:System.Data.DataSet>, se deben cumplir dos condiciones:  
  
1.  La instrucción SQL debe coincidir con la que se usó inicialmente para rellenar el <xref:System.Data.DataSet>.  
  
2.  El **clave** información de la columna debe estar presente.  
  
 Si hay información de clave principal, las filas duplicadas se reconcilian y sólo aparecen una vez en el <xref:System.Data.DataTable> que corresponde a la <xref:System.Data.DataSet>. Información de clave principal puede establecerse a través de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando la <xref:System.Data.DataTable.PrimaryKey%2A> propiedad de la <xref:System.Data.DataTable>, o estableciendo la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> propiedad `AddWithKey`.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para asegurarse de que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">The name of the <see cref="T:System.Data.DataTable" /> to use for table mapping.</param>
        <summary>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataTable" /> name.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado a la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, permanece abierta.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación, a continuación, agrega las filas al destino <xref:System.Data.DataTable> objetos en el <xref:System.Data.DataSet>, creando la <xref:System.Data.DataTable> objetos si aún no existen. Al crear <xref:System.Data.DataTable> objetos, la <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación suele crear únicamente metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente.  
  
 La sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A> que toma `DataTable` como un parámetro sólo obtiene el primer resultado. Use una sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A> que toma `DataSet` como un parámetro para obtener varios resultados.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde la <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres se diferencien solo por el uso de mayúsculas o minúsculas. En estas situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una tabla nueva si no existe ninguna coincidencia exacta. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre difiere sólo por mayúsculas, o que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Puede usar el <xref:System.Data.Common.DbDataAdapter.Fill%2A> método varias veces en la misma <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para asegurarse de que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.Fill%2A> y <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para datos de .NET Framework proveedor recupera información de esquema para sólo el primer resultado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <block subset="none" type="overrides">
          <para>Esta sobrecarga de la <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <summary>Adds or refreshes rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera los datos de origen de datos con una instrucción SELECT. La <xref:System.Data.IDbConnection> objeto asociado con el comando select debe ser válido, pero no es necesario que esté abierto. Si el <xref:System.Data.IDbConnection> se cerró antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, permanece abierta.  
  
 Si un comando no devuelve ninguna fila, ninguna de las tablas se agrega a la <xref:System.Data.DataSet>, y no se genera ninguna excepción.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, generará nombres para las columnas siguientes, utilizando el patrón "columnname1", "columnname2", "nombredecolumna3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 Cuando la consulta especificada devuelve varios resultados, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Puesto que no se crean tablas para una consulta que no devuelve filas, si tuviera que procesar una consulta insert seguida de una consulta select, la tabla creada para la consulta select se denominaría "Tabla", porque es la primera tabla creada. Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde la <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres se diferencien solo por el uso de mayúsculas o minúsculas. En estas situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una tabla nueva si no existe ninguna coincidencia exacta. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre difiere sólo por mayúsculas, o que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Si se encuentra un error o una excepción al rellenar las tablas de datos, las filas agregadas antes de producirse el error mantienen en las tablas de datos. El resto de la operación se ha anulado.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como un lote de instrucciones SQL, tener en cuenta lo siguiente:  
  
-   Si uno de los resultados contiene un error, todos los resultados posteriores se omiten y no se agregan a la <xref:System.Data.DataSet>.  
  
 Cuando se usa posteriores <xref:System.Data.Common.DbDataAdapter.Fill%2A> llamadas para actualizar el contenido de la <xref:System.Data.DataSet>, se deben cumplir dos condiciones:  
  
1.  La instrucción SQL debe coincidir con la que se usó inicialmente para rellenar el <xref:System.Data.DataSet>.  
  
2.  El **clave** información de la columna debe estar presente. Si hay información de clave principal, las filas duplicadas se reconcilian y sólo aparecen una vez en el <xref:System.Data.DataTable> que corresponde a la <xref:System.Data.DataSet>. Información de clave principal puede establecerse a través de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando la <xref:System.Data.DataTable.PrimaryKey%2A> propiedad de la <xref:System.Data.DataTable>, o estableciendo la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> propiedad `AddWithKey`.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para asegurarse de que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>, para rellenar un <xref:System.Data.DataSet> con filas de la tabla categories. En este ejemplo se da por supuesto que ha creado un <xref:System.Data.OleDb.OleDbDataAdapter> y <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">The source table is invalid.</exception>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">A <see cref="T:System.Data.DataTable" /> to fill with records and, if necessary, schema.</param>
        <param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Adds or refreshes rows in a <see cref="T:System.Data.DataTable" /> to match those in the data source using the specified <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> and <see cref="T:System.Data.CommandBehavior" />.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataTable" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado a la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, que se abrió para recuperar datos y, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, permanece abierta.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación, a continuación, agrega las filas en el destino especificado <xref:System.Data.DataTable> objeto en el <xref:System.Data.DataSet>, creando la <xref:System.Data.DataTable> objeto si aún no existe. Al crear un <xref:System.Data.DataTable> objeto, la <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación suele crear únicamente metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, generará nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2 ","*columnname*3 ", y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 La sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A> que toma `DataTable` como un parámetro sólo obtiene el primer resultado. Use una sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A> que toma `DataSet` como un parámetro para obtener varios resultados.  
  
 Puede usar el <xref:System.Data.Common.DbDataAdapter.Fill%2A> método varias veces en la misma <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para asegurarse de que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Esta sobrecarga de la <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">The zero-based record number to start with.</param>
        <param name="maxRecords">The maximum number of records to retrieve.</param>
        <param name="dataTables">The <see cref="T:System.Data.DataTable" /> objects to fill from the data source.</param>
        <summary>Adds or refreshes rows in a <see cref="T:System.Data.DataTable" /> to match those in the data source starting at the specified record and retrieving up to the specified maximum number of records.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataTable" />. This value does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DataAdapter.Fill%2A> método recupera filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado a la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.Common.DataAdapter.Fill%2A> es llama, se abre para recuperar datos y, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DataAdapter.Fill%2A> es llama, permanece abierta.  
  
 El <xref:System.Data.Common.DataAdapter.Fill%2A> operación, a continuación, agrega las filas al destino <xref:System.Data.DataTable> objetos en el <xref:System.Data.DataSet>, creando la <xref:System.Data.DataTable> objetos si aún no existen. Al crear <xref:System.Data.DataTable> objetos, la <xref:System.Data.Common.DataAdapter.Fill%2A> operación suele crear únicamente metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para asegurarse de que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Si el adaptador de datos detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "columnname1", "columnname2", "nombredecolumna3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet>, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como un lote de instrucciones SQL, si uno de los resultados contiene un error, todos los resultados posteriores se omiten y no se agrega a la <xref:System.Data.DataSet>.  
  
 Puede usar el <xref:System.Data.Common.DataAdapter.Fill%2A> método varias veces en la misma <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</param>
        <param name="startRecord">The zero-based record number to start with.</param>
        <param name="maxRecords">The maximum number of records to retrieve.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <summary>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `maxRecords` el valor 0 obtiene todos los registros encontrados después del registro inicial. Si `maxRecords` es mayor que el número de filas restantes, sólo se devuelven las filas restantes y se emite ningún error.  
  
 Si el comando select correspondiente es una instrucción devuelve varios resultados, <xref:System.Data.Common.DbDataAdapter.Fill%2A> solo se aplica `maxRecords` al primer resultado.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera los datos de origen de datos con una instrucción SELECT. La <xref:System.Data.IDbConnection> objeto asociado a la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si el <xref:System.Data.IDbConnection> se cerró antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, que se abrió para recuperar datos y, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, permanece abierta.  
  
 Si un comando no devuelve ninguna fila, ninguna de las tablas se agrega a la <xref:System.Data.DataSet>, pero no se produce ninguna excepción.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, generará nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2 ","*columnname*3 ", y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 Cuando la consulta especificada devuelve varios resultados, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Dado que no hay ninguna tabla se crea para una consulta que no devuelve filas, si se procesa una consulta insert seguida de una consulta select, la tabla creada para la consulta select se denomina "Table", porque es la primera tabla creada. Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde la <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres se diferencien solo por el uso de mayúsculas o minúsculas. En estas situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una tabla nueva si no existe ninguna coincidencia exacta. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre difiere sólo por mayúsculas, o que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Si se encuentra un error o una excepción al rellenar las tablas de datos, las filas agregadas antes de producirse el error mantienen en las tablas de datos. El resto de la operación se ha anulado.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como instrucciones SQL por lotes, sea consciente de las acciones siguientes:  
  
-   Cuando se procesan varios resultados de una instrucción SQL, por lotes `maxRecords` solo se aplica al primer resultado. Lo mismo puede decirse de filas que contienen resultados divididos en segmentos (proveedor de datos de .NET Framework para OLE DB solo). El resultado de nivel superior está limitado por `maxRecords`, pero se agregan todas las filas secundarias.  
  
-   Si uno de los resultados contiene un error, todos los resultados posteriores se omiten y no se agregan a la <xref:System.Data.DataSet>.  
  
 Cuando se usa posteriores <xref:System.Data.Common.DbDataAdapter.Fill%2A> llamadas para actualizar el contenido de la <xref:System.Data.DataSet>, se deben cumplir dos condiciones:  
  
1.  La instrucción SQL debe coincidir con la que se usó inicialmente para rellenar el <xref:System.Data.DataSet>.  
  
2.  El **clave** información de la columna debe estar presente.  
  
 Si hay información de clave principal, las filas duplicadas se reconciliarán y sólo aparecerán una vez en el <xref:System.Data.DataTable> que corresponde a la <xref:System.Data.DataSet>. Información de clave principal puede establecerse a través de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando la <xref:System.Data.DataTable.PrimaryKey%2A> propiedad de la <xref:System.Data.DataTable>, o estableciendo la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> propiedad `AddWithKey`.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para asegurarse de que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
> [!NOTE]
>  El `DataSet` no contendrá más del número de registros indicado por `maxRecords`. Sin embargo, el conjunto de resultados completo generado por la consulta aún se devuelve desde el servidor.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>, para rellenar un <xref:System.Data.DataSet> con 15 filas, comenzando en la fila 10, desde el **categorías** tabla. En este ejemplo se da por supuesto que ha creado un <xref:System.Data.OleDb.OleDbDataAdapter> y <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.  -or-  The connection is invalid.</exception>
        <exception cref="T:System.InvalidCastException">The connection could not be found.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="startRecord" /> parameter is less than 0.  -or-  The <paramref name="maxRecords" /> parameter is less than 0.</exception>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTables">The <see cref="T:System.Data.DataTable" /> objects to fill from the data source.</param>
        <param name="startRecord">The zero-based record number to start with.</param>
        <param name="maxRecords">The maximum number of records to retrieve.</param>
        <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed to fill the <see cref="T:System.Data.DataTable" /> objects.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and <see cref="T:System.Data.DataTable" /> names.</summary>
        <returns>The number of rows added to or refreshed in the data tables.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `maxRecords` el valor 0 obtiene todos los registros encontrados después del registro inicial. Si `maxRecords` es mayor que el número de filas restantes, sólo se devuelven las filas restantes y se emite ningún error.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera los datos de origen de datos con una instrucción SELECT. La <xref:System.Data.IDbConnection> objeto asociado a la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si el <xref:System.Data.IDbConnection> se cerró antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, permanece abierta.  
  
 Si un comando no devuelve ninguna fila, ninguna de las tablas se agrega a la <xref:System.Data.DataSet>, pero no se produce ninguna excepción.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, generará nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2 ","*columnname*3 ", y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 Cuando la consulta especificada devuelve varios resultados, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Puesto que no se crean tablas para una consulta que no devuelve filas, si tuviera que procesar una consulta insert seguida de una consulta select, la tabla creada para la consulta select se denominaría "Tabla", porque es la primera tabla creada. Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde la <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres se diferencien solo por el uso de mayúsculas o minúsculas. En estas situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una tabla nueva si no existe ninguna coincidencia exacta. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre difiere sólo por mayúsculas, o que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Si se encuentra un error o una excepción al rellenar las tablas de datos, las filas agregadas antes de producirse el error mantienen en las tablas de datos. El resto de la operación se ha anulado.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataTable> objetos devuelve varios resultados, como un lote de instrucciones SQL, tener en cuenta lo siguiente:  
  
-   Cuando se procesan varios resultados de una instrucción SQL, por lotes `maxRecords` solo se aplica al primer resultado. Lo mismo puede decirse de filas que contienen resultados divididos en segmentos (proveedor de datos de .NET Framework para OLE DB solo). El resultado de nivel superior está limitado por `maxRecords`, pero se agregan todas las filas secundarias.  
  
-   Si uno de los resultados contiene un error, se omiten todos los resultados siguientes.  
  
> [!NOTE]
>  El `DataSet` no contendrá más del número de registros indicado por `maxRecords`. Sin embargo, todo el conjunto de resultados generado por la consulta aún se devuelve desde el servidor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.  -or-  The connection is invalid.</exception>
        <exception cref="T:System.InvalidCastException">The connection could not be found.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="startRecord" /> parameter is less than 0.  -or-  The <paramref name="maxRecords" /> parameter is less than 0.</exception>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</param>
        <param name="startRecord">The zero-based record number to start with.</param>
        <param name="maxRecords">The maximum number of records to retrieve.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Adds or refreshes rows in a specified range in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> and source table names, command string, and command behavior.</summary>
        <returns>The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />. This does not include rows affected by statements that do not return rows.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado a la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, permanece abierta.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación, a continuación, agrega las filas al destino <xref:System.Data.DataTable> objetos en el <xref:System.Data.DataSet>, creando la <xref:System.Data.DataTable> objetos si aún no existen. Al crear <xref:System.Data.DataTable> objetos, la <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación suele crear únicamente metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde la <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres se diferencien solo por el uso de mayúsculas o minúsculas. En estas situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una tabla nueva si no existe ninguna coincidencia exacta. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre difiere sólo por mayúsculas, o que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Puede usar el <xref:System.Data.Common.DbDataAdapter.Fill%2A> método varias veces en la misma <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para asegurarse de que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.Fill%2A> y <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para datos de .NET Framework proveedor recupera información de esquema para sólo el primer resultado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="startRecord" /> parameter is less than 0.  -or-  The <paramref name="maxRecords" /> parameter is less than 0.</exception>
        <block subset="none" type="overrides">
          <para>Esta sobrecarga de la <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the behavior of the command used to fill the data adapter.</summary>
        <value>El <see cref="T:System.Data.CommandBehavior" /> del comando utilizado para rellenar el adaptador de datos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Adds a <see cref="T:System.Data.DataTable" /> to a <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to insert the schema in.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values that specify how to insert the schema.</param>
        <summary>Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>A reference to a collection of <see cref="T:System.Data.DataTable" /> objects that were added to the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método recupera la información del esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si una o varias columnas de clave principal no se devuelve el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se utilizan como columnas de clave principales para el <xref:System.Data.DataTable>.  
  
-   Si no se devuelve ninguna columna de clave principal pero sí columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas únicas son no admiten valores NULL. Si hay alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y las restricciones únicas se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un clúster un único índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Información de clave principal se utiliza durante la <xref:System.Data.Common.DbDataAdapter.Fill%2A> para buscar y reemplazar todas las filas cuyas columnas de clave coincidan. Si esto no es el comportamiento deseado, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> sin solicitar la información de esquema.  
  
 Si el <xref:System.Data.IDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 La <xref:System.Data.IDbConnection> objeto asociado con el comando select debe ser válido, pero no es necesario abrir. Si el <xref:System.Data.IDbConnection> se cerró antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, se deja abierto.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe ser consciente de los posibles efectos secundarios, como las interferencias con el uso de instrucciones SET FMTONLY ON. Para obtener más información, vea los libros en pantalla de SQL Server.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.SqlClient.SqlDataAdapter>, para rellenar un <xref:System.Data.DataSet> con el esquema y devuelve un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">The <see cref="T:System.Data.DataTable" /> to be filled with the schema from the data source.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values.</param>
        <summary>Configures the schema of the specified <see cref="T:System.Data.DataTable" /> based on the specified <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information returned from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método recupera el esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. El objeto de conexión asociado con el <xref:System.Data.IDbDataAdapter.SelectCommand%2A> debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, permanece abierta.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación devuelve un <xref:System.Data.DataTable>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si un <xref:System.Data.DataTable.PrimaryKey%2A> ya se ha definido para el `DataTable`, o la `DataTable` contiene datos, la `PrimaryKey` no se establecerá la propiedad.  
  
-   Si una o varias columnas de clave principal no se devuelve el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se utilizan como columnas de clave principales para el `DataTable`.  
  
-   Si no se devuelve ninguna columna de clave principal pero sí columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas únicas son no admiten valores NULL. Si hay alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la `PrimaryKey` no se establece la propiedad.  
  
-   Si se devuelven columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el `DataTable`.  
  
 Tenga en cuenta que las claves principales y las restricciones únicas se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan. Este proceso puede requerir varios ida y vuelta al servidor.  
  
 Si un clúster un único índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Si el <xref:System.Data.Common.DbDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> no devuelve ninguna fila. Use la <xref:System.Data.Common.DbDataAdapter.Fill%2A> método para agregar filas a una <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe ser consciente de los posibles efectos secundarios, como las interferencias con el uso de instrucciones SET FMTONLY ON. Para obtener más información, vea los libros en pantalla de SQL Server.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.SqlClient.SqlDataAdapter>, para rellenar un <xref:System.Data.DataSet> con el esquema y devuelve un <xref:System.Data.DataTable>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> to insert the schema in.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values that specify how to insert the schema.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <summary>Adds a <see cref="T:System.Data.DataTable" /> to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based upon the specified <see cref="T:System.Data.SchemaType" /> and <see cref="T:System.Data.DataTable" />.</summary>
        <returns>A reference to a collection of <see cref="T:System.Data.DataTable" /> objects that were added to the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método recupera la información del esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si una o varias columnas de clave principal no se devuelve el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se utilizan como columnas de clave principales para el <xref:System.Data.DataTable>.  
  
-   Si no se devuelve ninguna columna de clave principal pero sí columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas únicas son no admiten valores NULL. Si hay alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y las restricciones únicas se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un clúster un único índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Información de clave principal se utiliza durante la <xref:System.Data.Common.DbDataAdapter.Fill%2A> para buscar y reemplazar todas las filas cuyas columnas de clave coincidan. Si esto no es el comportamiento deseado, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> sin solicitar la información de esquema.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método es compatible con escenarios donde la <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres se diferencien solo por el uso de mayúsculas o minúsculas. En estas situaciones, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una tabla nueva si no existe ninguna coincidencia exacta. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> se llama y <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre difiere sólo por mayúsculas, o que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 La <xref:System.Data.IDbConnection> objeto asociado con el comando select debe ser válido, pero no es necesario abrir. Si el <xref:System.Data.IDbConnection> se cerró antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, se deja abierto.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe ser consciente de los posibles efectos secundarios, como las interferencias con el uso de instrucciones SET FMTONLY ON. Para obtener más información, vea los libros en pantalla de SQL Server.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.SqlClient.SqlDataAdapter>, para rellenar un <xref:System.Data.DataSet> con el esquema y devuelve un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">A source table from which to get the schema could not be found.</exception>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">The <see cref="T:System.Data.DataTable" /> to be filled with the schema from the data source.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values.</param>
        <param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Configures the schema of the specified <see cref="T:System.Data.DataTable" /> based on the specified <see cref="T:System.Data.SchemaType" />, command string, and <see cref="T:System.Data.CommandBehavior" /> values.</summary>
        <returns>A of <see cref="T:System.Data.DataTable" /> object that contains schema information returned from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método recupera el esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. El objeto de conexión asociado con el <xref:System.Data.IDbDataAdapter.SelectCommand%2A> debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, permanece abierta.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si una o varias columnas de clave principal no se devuelve el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se utilizan como columnas de clave principales para el <xref:System.Data.DataTable>.  
  
-   Si no se devuelve ninguna columna de clave principal pero sí columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas únicas son no admiten valores NULL. Si hay alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y las restricciones únicas se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un clúster un único índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Si el <xref:System.Data.IDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> no devuelve ninguna fila. Use la <xref:System.Data.Common.DbDataAdapter.Fill%2A> método para agregar filas a una <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe ser consciente de los posibles efectos secundarios, como las interferencias con el uso de instrucciones SET FMTONLY ON. Para obtener más información, vea los libros en pantalla de SQL Server.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Esta implementación de la <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</param>
        <param name="schemaType">One of the <see cref="T:System.Data.SchemaType" /> values.</param>
        <param name="command">The SQL SELECT statement used to retrieve rows from the data source.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values.</param>
        <summary>Adds a <see cref="T:System.Data.DataTable" /> to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método recupera el esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. El objeto de conexión asociado con el <xref:System.Data.IDbDataAdapter.SelectCommand%2A> debe ser válido, pero no es necesario que esté abierto. Si la conexión se cerró antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llama, permanece abierta.  
  
 A <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si una o varias columnas de clave principal no se devuelve el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se utilizan como columnas de clave principales para el <xref:System.Data.DataTable>.  
  
-   Si no se devuelve ninguna columna de clave principal pero sí columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas únicas son no admiten valores NULL. Si hay alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y las restricciones únicas se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un clúster un único índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Si el <xref:System.Data.IDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en la <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no haya conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método es compatible con escenarios donde la <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres se diferencien solo por el uso de mayúsculas o minúsculas. En estas situaciones, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una tabla nueva si no existe ninguna coincidencia exacta. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> se llama y <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre difiere sólo por mayúsculas, o que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> no devuelve ninguna fila. Use la <xref:System.Data.Common.DbDataAdapter.Fill%2A> método para agregar filas a una <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema para sólo el primer resultado. Para recuperar información de esquema de varios resultados, utilice <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe ser consciente de los posibles efectos secundarios, como las interferencias con el uso de instrucciones SET FMTONLY ON. Para obtener más información, vea los libros en pantalla de SQL Server.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Esta implementación de la <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="parameterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">The index of the command to retrieve the parameter from.</param>
        <param name="parameterIndex">The index of the parameter within the command.</param>
        <summary>Returns a <see cref="T:System.Data.IDataParameter" /> from one of the commands in the current batch.</summary>
        <returns>The <see cref="T:System.Data.IDataParameter" /> specified.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método para permitir a los usuarios ejecutar un lote. Una implementación usa la <paramref name="commandIdentifier" /> proporcionado para buscar el comando solicitado, a continuación, usa el <paramref name="parameterIndex" /> proporcionado para buscar el parámetro solicitado. Por ejemplo, un <paramref name="commandIdentifier" /> de 0 y un <paramref name="parameterIndex" /> de 0 devuelve el primer parámetro del primer comando del lote.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int *  *  -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int *  *  -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="recordsAffected" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="error" Type="System.Exception&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">The zero-based column ordinal of the individual command within the batch.</param>
        <param name="recordsAffected">The number of rows affected in the data store by the specified command within the batch.</param>
        <param name="error">An <see cref="T:System.Exception" /> thrown during execution of the specified command. Returns <see langword="null" /> (<see langword="Nothing" /> in Visual Basic) if no exception is thrown.</param>
        <summary>Returns information about an individual update attempt within a larger batched update.</summary>
        <returns>Information about an individual update attempt within a larger batched update.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proveedores de datos que admiten la lógica de actualización por lotes deben invalidar una serie de métodos virtuales en la <xref:System.Data.Common.DbDataAdapter> clase. `GetBatchedRecordsAffected` representa uno de los métodos virtuales. El `DbDataAdapter` depende de la clase `GetBatchedRecordsAffected` para determinar el éxito o fracaso de intentos de actualización individual dentro de un lote de modo que pueda marcar cada correspondiente <xref:System.Data.DataRow> en consecuencia.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the parameters set by the user when executing an SQL SELECT statement.</summary>
        <returns>An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes batching for the <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método. Este método ofrece la oportunidad de inicializar los recursos necesarios para admitir el procesamiento por lotes de la clase. Por ejemplo, una clase puede asignar una estructura de datos para contener el conjunto de comandos en el lote.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a command used to insert new records into the data source.</summary>
        <value>A <see cref="T:System.Data.IDbCommand" /> utilizado durante <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> para insertar registros en el origen de datos para nuevas filas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, si no se establece esta propiedad y la información de clave principal está presente en el <xref:System.Data.DataSet>, el <xref:System.Data.IDbDataAdapter.InsertCommand%2A> se generará automáticamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea la clase derivada <xref:System.Data.OleDb.OleDbDataAdapter> y establece algunas de sus propiedades.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see langword="RowUpdated" /> event of a .NET Framework data provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener información general, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">An <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> that contains the event data.</param>
        <summary>Raises the <see langword="RowUpdating" /> event of a .NET Framework data provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener información general, vea [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> método.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a command used to select records in the data source.</summary>
        <value>A <see cref="T:System.Data.IDbCommand" /> que se usa durante <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> para seleccionar los registros de origen de datos para su colocación en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea la clase derivada <xref:System.Data.OleDb.OleDbDataAdapter> y establece algunas de sus propiedades.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement for deleting records from the data set.</summary>
        <value>Un <see cref="T:System.Data.IDbCommand" /> utilizado durante <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> para eliminar registros en el origen de datos para las filas eliminadas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.Data.IDbDataAdapter>.  
  
 Para obtener más información, consulta <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to insert new records into the data source.</summary>
        <value>Un <see cref="T:System.Data.IDbCommand" /> utilizado durante <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> para insertar registros en el origen de datos para nuevas filas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.Data.IDbDataAdapter>.  
  
 Para obtener más información, consulta <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to select records in the data source.</summary>
        <value>Un <see cref="T:System.Data.IDbCommand" /> que se usa durante <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> para seleccionar los registros de origen de datos para su colocación en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.Data.IDbDataAdapter>.  
  
 Para obtener más información, consulta <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an SQL statement used to update records in the data source.</summary>
        <value>Un <see cref="T:System.Data.IDbCommand" /> utilizado durante <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> para actualizar registros en el origen de datos para filas modificadas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.Data.IDbDataAdapter>.  
  
 Para obtener más información, consulta <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new object that is a copy of the current instance.</summary>
        <returns>A new object that is a copy of this instance.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.ICloneable>.  
  
 Para obtener más información, consulta <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ends batching for the <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">The adapter does not support batches.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método. Este método proporciona la clase la oportunidad de eliminar todos los recursos asignados para admitir el procesamiento por lotes. Por ejemplo, la clase puede desasignar la estructura de datos que contiene los comandos en el lote.</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">An array of <see cref="T:System.Data.DataRow" /> objects used to update the data source.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array in the <see cref="T:System.Data.DataSet" />.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina la <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza individualmente. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, las instrucciones INSERT antes de las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no ha especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto que se va a generar automáticamente las instrucciones SQL para las actualizaciones de tabla única si se establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establecen mediante el **CommandBuilder**. Esta lógica de generación requiere información de columna de clave debe estar presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omite cualquier fila adicional devuelta.  
  
 Después de que los datos se vuelve a cargar en el <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliarse <xref:System.Data.DataSet> fila y cualquier parámetro de salida devuelto por el comando. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es el siguiente:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si no hay parámetros de salida, se colocan en la <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> normalmente tiene una colección de parámetros asociada a él. Parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener los valores de parámetro de la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se aplicaron las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilice los nombres de columna de origen y los nombres de tabla en el <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se utiliza para asignar el valor de salida o parámetros de entrada/salida de nuevo a la `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, actual o propuesta de valor de la columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para reanudar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de un objeto DataAdapter. Para continuar la operación de actualización sin que se genere una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>para actualizar el origen de datos.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.SystemException">No <see cref="T:System.Data.DataRow" /> exists to update.  -or-  No <see cref="T:System.Data.DataTable" /> exists to update.  -or-  No <see cref="T:System.Data.DataSet" /> exists to use as a source.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">The <see cref="T:System.Data.DataSet" /> used to update the data source.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" />.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina la <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza individualmente. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, las instrucciones INSERT antes de las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no ha especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto que se va a generar automáticamente las instrucciones SQL para las actualizaciones de tabla única si se establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establecen mediante el **CommandBuilder**. Esta lógica de generación requiere información de columna de clave debe estar presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omite cualquier fila adicional devuelta.  
  
 Después de que los datos se vuelve a cargar en el <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliarse <xref:System.Data.DataSet> fila y cualquier parámetro de salida devuelto por el comando. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es el siguiente:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, a continuación, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si no hay parámetros de salida, se colocan en la <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> normalmente tiene una colección de parámetros asociada a él. Parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener los valores de parámetro de la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se aplicaron las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilice los nombres de columna de origen y los nombres de tabla en el <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se utiliza para asignar el valor de salida o parámetros de entrada/salida de nuevo a la `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, actual o propuesta de valor de la columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para reanudar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de un objeto DataAdapter. Para continuar la operación de actualización sin que se genere una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>para actualizar el origen de datos.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">The <see cref="T:System.Data.DataTable" /> used to update the data source.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataTable" />.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataTable" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina la <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza individualmente. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, las instrucciones INSERT antes de las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no ha especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto que se va a generar automáticamente las instrucciones SQL para las actualizaciones de tabla única si se establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establecen mediante el **CommandBuilder**. Esta lógica de generación requiere información de columna de clave debe estar presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omite cualquier fila adicional devuelta.  
  
 Después de que los datos se vuelve a cargar en el <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliarse <xref:System.Data.DataSet> fila y cualquier parámetro de salida devuelto por el comando. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es el siguiente:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, a continuación, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si no hay parámetros de salida, se colocan en la <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> normalmente tiene una colección de parámetros asociada a él. Parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener los valores de parámetro de la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se aplicaron las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilice los nombres de columna de origen y los nombres de tabla en el <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se utiliza para asignar el valor de salida o parámetros de entrada/salida de nuevo a la `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, actual o propuesta de valor de la columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para reanudar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de un objeto DataAdapter. Para continuar la operación de actualización sin que se genere una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>para actualizar el origen de datos.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.SystemException">No <see cref="T:System.Data.DataRow" /> exists to update.  -or-  No <see cref="T:System.Data.DataTable" /> exists to update.  -or-  No <see cref="T:System.Data.DataSet" /> exists to use as a source.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">An array of <see cref="T:System.Data.DataRow" /> objects used to update the data source.</param>
        <param name="tableMapping">The <see cref="P:System.Data.IDataAdapter.TableMappings" /> collection to use.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified array of <see cref="T:System.Data.DataSet" /> objects.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina la <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza individualmente. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, las instrucciones INSERT antes de las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no ha especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto que se va a generar automáticamente las instrucciones SQL para las actualizaciones de tabla única si se establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establecen mediante el **CommandBuilder**. Esta lógica de generación requiere información de columna de clave debe estar presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omite cualquier fila adicional devuelta.  
  
 Después de que los datos se vuelve a cargar en el <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliarse <xref:System.Data.DataSet> fila y cualquier parámetro de salida devuelto por el comando. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es el siguiente:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, a continuación, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si no hay parámetros de salida, se colocan en la <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> normalmente tiene una colección de parámetros asociada a él. Parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener los valores de parámetro de la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se aplicaron las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilice los nombres de columna de origen y los nombres de tabla en el <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se utiliza para asignar el valor de salida o parámetros de entrada/salida de nuevo a la `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, actual o propuesta de valor de la columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para reanudar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de un objeto DataAdapter. Para continuar la operación de actualización sin que se genere una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.SystemException">No <see cref="T:System.Data.DataRow" /> exists to update.  -or-  No <see cref="T:System.Data.DataTable" /> exists to update.  -or-  No <see cref="T:System.Data.DataSet" /> exists to use as a source.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">The <see cref="T:System.Data.DataSet" /> to use to update the data source.</param>
        <param name="srcTable">The name of the source table to use for table mapping.</param>
        <summary>Updates the values in the database by executing the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the <see cref="T:System.Data.DataSet" /> with the specified <see cref="T:System.Data.DataTable" /> name.</summary>
        <returns>The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina la <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza individualmente. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, insertar antes de la actualización). Para obtener más información, consulte [actualizar orígenes de datos con DataAdapters](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no ha especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto que se va a generar automáticamente las instrucciones SQL para las actualizaciones de tabla única si se establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establecen mediante el **CommandBuilder**. Esta lógica de generación requiere información de columna de clave debe estar presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método es compatible con escenarios donde la <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres se diferencien solo por el uso de mayúsculas o minúsculas. Cuando existen varias tablas con el mismo nombre, pero con mayúsculas o minúsculas, en un `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y genera una excepción si no hay ninguna coincidencia exacta. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Update%2A> se llama y <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre difiere sólo por mayúsculas, o que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El siguiente código C# ilustra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omite cualquier fila adicional devuelta.  
  
 Después de que los datos se vuelve a cargar en el <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliarse <xref:System.Data.DataSet> fila y cualquier parámetro de salida devuelto por el comando. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es el siguiente:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, a continuación, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si no hay parámetros de salida, se colocan en la <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> normalmente tiene una colección de parámetros asociada a él. Parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener los valores de parámetro de la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se aplicaron las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Utilice los nombres de columna de origen y los nombres de tabla en el <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se utiliza para asignar el valor de salida o parámetros de entrada/salida de nuevo a la `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, actual o propuesta de valor de la columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para reanudar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de un objeto DataAdapter. Para continuar la operación de actualización sin que se genere una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>para actualizar el origen de datos.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.DataSet" /> is invalid.</exception>
        <exception cref="T:System.InvalidOperationException">The source table is invalid.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.</summary>
        <value>El número de filas que se va a procesar por lote.  
  
 <list type="table"><listheader><term> Valor es </term><description> efecto </description></listheader><item><term> 0 </term><description> no hay ningún límite en el tamaño del lote.  </description></item><item><term> 1 </term><description> deshabilita la actualización por lotes.  </description></item><item><term> &gt; 1 </term><description> los cambios se envían utilizando los lotes de <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> operaciones a la vez.  </description></item></list>  Si se establece en un valor distinto de 1, todos los comandos asociados a la <see cref="T:System.Data.Common.DbDataAdapter" /> debe tener su <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> propiedad establecida en ** ninguno ** o ** OutputParameters **. En caso contrario, se producirá una excepción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> propiedad que se va a actualizar un origen de datos con los cambios de un <xref:System.Data.DataSet>. Si el proveedor de datos admite el procesamiento por lotes, esto puede aumentar el rendimiento de la aplicación reduciendo el número de ida y vuelta al servidor. En ADO.NET 2.0, esta propiedad se admite para los proveedores de datos .NET para SQL Server (SqlClient) y Oracle (OracleClient).  
  
 Si se ejecuta un lote demasiado grande, el rendimiento podría verse afectado. Por tanto, es conveniente realizar pruebas a fin de determinar el valor óptimo del tamaño del lote antes de implementar la aplicación.  
  
 Un <xref:System.ArgumentOutOfRangeException> se producirá si el valor se establece en un número menor que cero.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a command used to update records in the data source.</summary>
        <value>A <see cref="T:System.Data.IDbCommand" /> utilizado durante <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> para actualizar registros en el origen de datos para filas modificadas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, si no se establece esta propiedad y la información de clave principal está presente en el <xref:System.Data.DataSet>, el <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> se generará automáticamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea la clase derivada <xref:System.Data.OleDb.OleDbDataAdapter> y establece algunas de sus propiedades.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>