<Type Name="DbDataAdapter" FullName="System.Data.Common.DbDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="105fc0925a09f45e3f892d335191091e18f999a2" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48757378" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbDataAdapter extends System.Data.Common.DataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.DbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbDataAdapter&#xA;Inherits DataAdapter&#xA;Implements ICloneable, IDbDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbDataAdapter abstract : System::Data::Common::DataAdapter, ICloneable, System::Data::IDbDataAdapter" />
  <TypeSignature Language="F#" Value="type DbDataAdapter = class&#xA;    inherit DataAdapter&#xA;    interface IDbDataAdapter&#xA;    interface ICloneable&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDbDataAdapter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Facilita la implementación de la interfaz <see cref="T:System.Data.IDbDataAdapter" />. Los herederos de <see cref="T:System.Data.Common.DbDataAdapter" /> implementan un conjunto de funciones para proporcionar un tipado fuerte, pero heredan la mayoría de las funciones necesarias para implementar completamente un elemento **DataAdapter**.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter> clase hereda de la <xref:System.Data.Common.DataAdapter> clase e implementa el <xref:System.Data.IDbDataAdapter> interfaz. Ayuda a una clase a implementar un **DataAdapter** diseñado para su uso con una base de datos relacional.  
  
 Una aplicación no crea una instancia de la <xref:System.Data.Common.DbDataAdapter> directamente la clase, sino que crea una instancia de una clase que hereda de ella.  
  
 Las clases que heredan <xref:System.Data.Common.DbDataAdapter> debe implementar los miembros heredados y suelen definir miembros adicionales para agregar funcionalidad específica del proveedor. Por ejemplo, el <xref:System.Data.Common.DbDataAdapter> clase define la <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad y el <xref:System.Data.Common.DbDataAdapter> clase define ocho sobrecargas de la <xref:System.Data.IDataAdapter.Fill%2A> método. A su vez, el <xref:System.Data.OleDb.OleDbDataAdapter> clase hereda la <xref:System.Data.Common.DbDataAdapter.Fill%2A> método y también define dos sobrecargas adicionales de <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> que toman un objeto de conjunto de registros ADO como un parámetro.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Al heredar de la <see cref="T:System.Data.Common.DbDataAdapter" /> (clase), es recomendable que implemente los constructores siguientes: 
 <list type="table"><listheader><term> Elemento 
 </term><description> Descripción 
 </description></listheader><item><term> *Prv*DataAdapter() 
 </term><description> Inicializa una nueva instancia de la *Prv*DataAdapter (clase).  
  
 </description></item><item><term> *Prv*DataAdapter (*Prv*comando *selectCommand*) 
 </term><description> Inicializa una nueva instancia de la *Prv*DataAdapter (clase) con la instrucción SELECT de SQL especificada.  
  
 </description></item><item><term> *Prv*DataAdapter (cadena *selectCommandText*, cadena *selectConnectionString*) 
 </term><description> Inicializa una nueva instancia de la *Prv*DataAdapter (clase) con una instrucción SELECT de SQL y una cadena de conexión.  
  
 </description></item><item><term> *Prv*DataAdapter (cadena *selectCommandText*, *Prv*conexión *selectConnection*) 
 </term><description> Inicializa una nueva instancia de la *Prv*DataAdapter (clase) con una instrucción SELECT de SQL y un *Prv*objeto de conexión.  
  
 </description></item></list>  
  
 Para promover la coherencia entre los proveedores de datos de .NET Framework, debe asigne el nombre de la clase heredada en el formulario *Prv*DataAdapter, donde *Prv* es el prefijo uniforme dado todas las clases de .NET específicas Espacio de nombres de proveedor de datos de Framework. Por ejemplo, "Sql" es el prefijo de la <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> clase en el **System.Data.SqlClient** espacio de nombres.</para>
    </block>
    <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
    <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de una clase <see langword="DataAdapter" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de una clase **DataAdapter**.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se crea una instancia de <xref:System.Data.Common.DbDataAdapter>, las siguientes propiedades de lectura y escritura se establecen en los siguientes valores iniciales.  
  
|Propiedades|Valor inicial|  
|----------------|-------------------|  
|<xref:System.Data.IDbDataAdapter.SelectCommand%2A>|Un nuevo objeto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.InsertCommand%2A>|Un nuevo objeto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.DeleteCommand%2A>|Un nuevo objeto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.IDbDataAdapter.UpdateCommand%2A>|Un nuevo objeto <xref:System.Data.IDbCommand>.|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Puede cambiar el valor de cualquiera de estas propiedades mediante una llamada independiente a la propiedad.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DbDataAdapter(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.Common.DbDataAdapter : System.Data.Common.DbDataAdapter -&gt; System.Data.Common.DbDataAdapter" Usage="new System.Data.Common.DbDataAdapter adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Objeto <see langword="DataAdapter" /> utilizado para crear el nuevo <see langword="DataAdapter" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see langword="DataAdapter" /> a partir de un objeto existente del mismo tipo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga de la <xref:System.Data.Common.DbDataAdapter> constructor está diseñado para su uso por un proveedor de datos .NET Framework al implementar un constructor similar para su uso en una implementación de clone.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddToBatch">
      <MemberSignature Language="C#" Value="protected virtual int AddToBatch (System.Data.IDbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 AddToBatch(class System.Data.IDbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function AddToBatch (command As IDbCommand) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int AddToBatch(System::Data::IDbCommand ^ command);" />
      <MemberSignature Language="F#" Value="abstract member AddToBatch : System.Data.IDbCommand -&gt; int&#xA;override this.AddToBatch : System.Data.IDbCommand -&gt; int" Usage="dbDataAdapter.AddToBatch command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.IDbCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.Data.IDbCommand" /> que se va a agregar al lote.</param>
        <summary>Agrega una interfaz <see cref="T:System.Data.IDbCommand" /> al lote actual.</summary>
        <returns>Número de comandos en el lote antes de agregar <see cref="T:System.Data.IDbCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">El adaptador no admite el procesamiento por lotes.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  
  
Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método para permitir a los usuarios agregar un comando a un lote.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ClearBatch">
      <MemberSignature Language="C#" Value="protected virtual void ClearBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ClearBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearBatch ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearBatch();" />
      <MemberSignature Language="F#" Value="abstract member ClearBatch : unit -&gt; unit&#xA;override this.ClearBatch : unit -&gt; unit" Usage="dbDataAdapter.ClearBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita todos los objetos <see cref="T:System.Data.IDbCommand" /> del lote.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">El adaptador no admite el procesamiento por lotes.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  
  
Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método para permitir que los usuarios quitar todos los comandos de un lote.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs&#xA;override this.CreateRowUpdatedEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatedEventArgs" Usage="dbDataAdapter.CreateRowUpdatedEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">Clase <see cref="T:System.Data.DataRow" /> que se utiliza para actualizar el origen de datos.</param>
        <param name="command">
          <see cref="T:System.Data.IDbCommand" /> ejecutado durante <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Si el comando es una instrucción UPDATE, INSERT, DELETE o SELECT.</param>
        <param name="tableMapping">Un objeto <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Common.RowUpdatedEventArgs" />.</summary>
        <returns>Nueva instancia de la clase <see cref="T:System.Data.Common.RowUpdatedEventArgs" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> método.</para>
        </block>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="abstract member CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs&#xA;override this.CreateRowUpdatingEvent : System.Data.DataRow * System.Data.IDbCommand * System.Data.StatementType * System.Data.Common.DataTableMapping -&gt; System.Data.Common.RowUpdatingEventArgs" Usage="dbDataAdapter.CreateRowUpdatingEvent (dataRow, command, statementType, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">
          <see cref="T:System.Data.DataRow" /> que actualiza el origen de datos.</param>
        <param name="command">
          <see cref="T:System.Data.IDbCommand" /> que se va a ejecutar durante <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />.</param>
        <param name="statementType">Si el comando es una instrucción UPDATE, INSERT, DELETE o SELECT.</param>
        <param name="tableMapping">Un objeto <see cref="T:System.Data.Common.DataTableMapping" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Data.Common.RowUpdatingEventArgs" />.</summary>
        <returns>Nueva instancia de la clase <see cref="T:System.Data.Common.RowUpdatingEventArgs" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" /> método.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultSourceTableName">
      <MemberSignature Language="C#" Value="public const string DefaultSourceTableName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DefaultSourceTableName" />
      <MemberSignature Language="DocId" Value="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultSourceTableName As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ DefaultSourceTableName;" />
      <MemberSignature Language="F#" Value="val mutable DefaultSourceTableName : string" Usage="System.Data.Common.DbDataAdapter.DefaultSourceTableName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nombre predeterminado que el objeto <see cref="T:System.Data.Common.DataAdapter" /> utiliza para las asignaciones de tabla.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Table" es el nombre predeterminado usado por el <xref:System.Data.Common.DataAdapter> objeto para las asignaciones de tabla.  
  
 <xref:System.Data.Common.DbDataAdapter.DefaultSourceTableName> es cuando una aplicación agrega una asignación de tabla para su uso con <xref:System.Data.Common.DbDataAdapter.Fill%2A>, pero no especifica un <xref:System.Data.DataTable> nombre.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ DeleteCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un comando para eliminar registros del conjunto de datos.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> utilizado mientras opera <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> para eliminar registros del origen de datos para filas eliminadas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, si no se establece esta propiedad y la información de clave principal está presente en el <xref:System.Data.DataSet>, el <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> se genera automáticamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea la clase derivada <xref:System.Data.OleDb.OleDbDataAdapter> y se establecen algunas de sus propiedades.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="dbDataAdapter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.Data.Common.DbDataAdapter" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteBatch">
      <MemberSignature Language="C#" Value="protected virtual int ExecuteBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 ExecuteBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.ExecuteBatch" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ExecuteBatch () As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int ExecuteBatch();" />
      <MemberSignature Language="F#" Value="abstract member ExecuteBatch : unit -&gt; int&#xA;override this.ExecuteBatch : unit -&gt; int" Usage="dbDataAdapter.ExecuteBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ejecuta el lote actual.</summary>
        <returns>Valor devuelto del último comando del lote.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  
  
Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método para permitir a los usuarios ejecutar un lote. Una implementación de este método combina los comandos en el adaptador en un lote, a continuación, ejecuta el lote y devuelve el valor devuelto del lote.</para>
        </block>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rellena un objeto <see cref="T:System.Data.DataSet" /> o un objeto <see cref="T:System.Data.DataTable" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public override int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Fill(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se va a rellenar con registros y, si es necesario, con un esquema.</param>
        <summary>Agrega o actualiza filas en <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Número de filas agregadas o actualizadas correctamente en la clase <see cref="T:System.Data.DataSet" />. No se incluyen las filas afectadas por instrucciones que no devuelven filas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera los datos de origen de datos mediante una instrucción SELECT. La <xref:System.Data.IDbConnection> objeto asociado con el comando select debe ser válido, pero no es necesario que esté abierto. Si el <xref:System.Data.IDbConnection> está cerrado antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, se abre para recuperar datos y se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, permanece abierta.  
  
 Si se encuentra un error o una excepción al rellenar las tablas de datos, las filas agregadas antes de la aparición del error permanecen en las tablas de datos. El resto de la operación se ha anulado.  
  
 Si un comando no devuelve ninguna fila, no hay tablas se agregan a la <xref:System.Data.DataSet>, y no se genera ninguna excepción.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta las columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes con el patrón "*columnname*1","*columnname*2", " *columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 Si la consulta especificada devuelve varios resultados, el conjunto de resultados para cada consulta que devuelve filas se colocan en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Porque no hay ninguna tabla se crea para una consulta que no devuelve filas, si se procesa una consulta insert seguida de una consulta select, la tabla creada para la consulta select se denomina 'Table' porque es la primera tabla creada. Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como instrucciones SQL por lotes, si uno de los resultados contiene un error, todos los resultados posteriores se omiten y no se agregan a la <xref:System.Data.DataSet>.  
  
 Cuando se usa posteriores <xref:System.Data.Common.DbDataAdapter.Fill%2A> llamadas para actualizar el contenido de la <xref:System.Data.DataSet>, se deben cumplir dos condiciones:  
  
1.  La instrucción SQL debe coincidir con lo que inicialmente se usa para rellenar el <xref:System.Data.DataSet>.  
  
2.  El **clave** información de la columna debe estar presente.  
  
 Si está presente la información de clave principal, las filas duplicadas se reconcilian y solo aparecen una vez en el <xref:System.Data.DataTable> que corresponde a la <xref:System.Data.DataSet>. Información de clave principal puede establecerse a través de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando el <xref:System.Data.DataTable.PrimaryKey%2A> propiedad de la <xref:System.Data.DataTable>, o estableciendo la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> propiedad `AddWithKey`.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para garantizar que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Fill dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Nombre de <see cref="T:System.Data.DataTable" /> que se va a utilizar para la asignación de tabla.</param>
        <summary>Agrega filas en un intervalo especificado de <see cref="T:System.Data.DataSet" /> o las actualiza para hacerlas coincidir con las filas del origen de datos utilizando el nombre de <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Número de filas agregadas o actualizadas correctamente en la clase <see cref="T:System.Data.DataSet" />. No se incluyen las filas afectadas por instrucciones que no devuelven filas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera las filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado con la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si se cierra la conexión antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, permanece abierta.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación, a continuación, agrega las filas al destino <xref:System.Data.DataTable> objetos en el <xref:System.Data.DataSet>, creando el <xref:System.Data.DataTable> objetos si aún no existen. Al crear <xref:System.Data.DataTable> objetos, el <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación normalmente crea únicamente los metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente.  
  
 La sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A> que toma `DataTable` como un parámetro sólo obtiene el primer resultado. Use una sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A> que toma `DataSet` como un parámetro para obtener varios resultados.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde el <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres difieren solo por caso. En tales situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una nueva tabla si no existe ninguna coincidencia exacta. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
 dataset.Tables.Add("AAA");  
 adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
    adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y el <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre se diferencia sólo por caso de que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Puede usar el <xref:System.Data.Common.DbDataAdapter.Fill%2A> método varias veces en el mismo <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con las filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para garantizar que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.Fill%2A> y <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> de datos .NET Framework proveedor recupera información de esquema para que solo el primer resultado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.</exception>
        <block subset="none" type="overrides">
          <para>Esta sobrecarga de la <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se va a rellenar con registros y, si es necesario, con un esquema.</param>
        <param name="srcTable">Nombre de la tabla de origen que se utilizará para la asignación de tabla.</param>
        <summary>Agrega filas a <see cref="T:System.Data.DataSet" /> o las actualiza para hacerlas coincidir con las filas del origen de datos utilizando los nombres de <see cref="T:System.Data.DataSet" /> y <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Número de filas agregadas o actualizadas correctamente en la clase <see cref="T:System.Data.DataSet" />. No se incluyen las filas afectadas por instrucciones que no devuelven filas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera los datos de origen de datos mediante una instrucción SELECT. La <xref:System.Data.IDbConnection> objeto asociado con el comando select debe ser válido, pero no es necesario que esté abierto. Si el <xref:System.Data.IDbConnection> está cerrado antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, permanece abierta.  
  
 Si un comando no devuelve ninguna fila, no hay tablas se agregan a la <xref:System.Data.DataSet>, y no se genera ninguna excepción.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta las columnas duplicadas al rellenar un <xref:System.Data.DataTable>, generará nombres para las columnas siguientes, utilizando el patrón "columnname1", "columnname2", "nombredecolumna3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 Si la consulta especificada devuelve varios resultados, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Puesto que no hay ninguna tabla se crea para una consulta que no devuelve filas, si tuviera que procesar una consulta insert seguida de una consulta select, la tabla creada para la consulta select se denominará "Table", porque es la primera tabla creada. Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde el <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres difieren solo por caso. En tales situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una nueva tabla si no existe ninguna coincidencia exacta. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y el <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre se diferencia sólo por caso de que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Si se encuentra un error o una excepción al rellenar las tablas de datos, las filas agregadas antes de la aparición del error permanecen en las tablas de datos. El resto de la operación se ha anulado.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como un lote de instrucciones SQL, tener en cuenta lo siguiente:  
  
-   Si uno de los resultados contiene un error, todos los resultados posteriores se omiten y no se agregan a la <xref:System.Data.DataSet>.  
  
 Cuando se usa posteriores <xref:System.Data.Common.DbDataAdapter.Fill%2A> llamadas para actualizar el contenido de la <xref:System.Data.DataSet>, se deben cumplir dos condiciones:  
  
1.  La instrucción SQL debe coincidir con lo que inicialmente se usa para rellenar el <xref:System.Data.DataSet>.  
  
2.  El **clave** información de la columna debe estar presente. Si está presente la información de clave principal, las filas duplicadas se reconcilian y solo aparecen una vez en el <xref:System.Data.DataTable> que corresponde a la <xref:System.Data.DataSet>. Información de clave principal puede establecerse a través de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando el <xref:System.Data.DataTable.PrimaryKey%2A> propiedad de la <xref:System.Data.DataTable>, o estableciendo la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> propiedad `AddWithKey`.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para garantizar que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>para rellenar un <xref:System.Data.DataSet> con filas de la tabla categories. En este ejemplo se da por supuesto que ha creado un <xref:System.Data.OleDb.OleDbDataAdapter> y un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">La tabla de origen no es válida.</exception>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> método.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDataReader dataReader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDataReader dataReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDataReader ^ dataReader);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDataReader -&gt; int" Usage="dbDataAdapter.Fill (dataTable, dataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="dataTable">To be added.</param>
        <param name="dataReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable dataTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataTable ^ dataTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Clase <see cref="T:System.Data.DataTable" /> que se va a rellenar con registros y, si es necesario, con un esquema.</param>
        <param name="command">Instrucción SELECT de SQL utilizada para recuperar las filas del origen de datos.</param>
        <param name="behavior">Uno de los valores de <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Agrega filas a un objeto <see cref="T:System.Data.DataTable" /> o las actualiza para hacerlas coincidir con las del origen de datos, utilizando los objetos <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.IDbCommand" /> y <see cref="T:System.Data.CommandBehavior" /> especificados.</summary>
        <returns>Número de filas agregadas o actualizadas correctamente en la clase <see cref="T:System.Data.DataTable" />. No se incluyen las filas afectadas por instrucciones que no devuelven filas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera las filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado con la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si se cierra la conexión antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, se abre para recuperar datos y se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, permanece abierta.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación, a continuación, agrega las filas en el destino especificado <xref:System.Data.DataTable> objeto en el <xref:System.Data.DataSet>, creando el <xref:System.Data.DataTable> objeto si aún no existe. Al crear un <xref:System.Data.DataTable> objeto, el <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación normalmente crea únicamente los metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta las columnas duplicadas al rellenar un <xref:System.Data.DataTable>, generará nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2 ","*columnname*3 ", y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 La sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A> que toma `DataTable` como un parámetro sólo obtiene el primer resultado. Use una sobrecarga de <xref:System.Data.Common.DbDataAdapter.Fill%2A> que toma `DataSet` como un parámetro para obtener varios resultados.  
  
 Puede usar el <xref:System.Data.Common.DbDataAdapter.Fill%2A> método varias veces en el mismo <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con las filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para garantizar que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Esta sobrecarga de la <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (int startRecord, int maxRecords, params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(int32 startRecord, int32 maxRecords, class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (startRecord As Integer, maxRecords As Integer, ParamArray dataTables As DataTable()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(int startRecord, int maxRecords, ... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="override this.Fill : int * int * System.Data.DataTable[] -&gt; int" Usage="dbDataAdapter.Fill (startRecord, maxRecords, dataTables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="dataTables" Type="System.Data.DataTable[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="startRecord">Número de registro de base cero inicial.</param>
        <param name="maxRecords">Número máximo de registros que se van a recuperar.</param>
        <param name="dataTables">Objetos <see cref="T:System.Data.DataTable" /> que se van a rellenar a partir del origen de datos.</param>
        <summary>Agrega filas a <see cref="T:System.Data.DataTable" /> o las actualiza para hacerlas coincidir con las del origen de datos, empezando en el registro especificado y recuperando hasta el número máximo de registros especificado.</summary>
        <returns>Número de filas agregadas o actualizadas correctamente en la clase <see cref="T:System.Data.DataTable" />. Este valor no incluye las filas afectadas por instrucciones que no devuelven filas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DataAdapter.Fill%2A> método recupera las filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado con la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si se cierra la conexión antes de <xref:System.Data.Common.DataAdapter.Fill%2A> es llamado, se abre para recuperar datos y, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DataAdapter.Fill%2A> es llamado, permanece abierta.  
  
 El <xref:System.Data.Common.DataAdapter.Fill%2A> operación, a continuación, agrega las filas al destino <xref:System.Data.DataTable> objetos en el <xref:System.Data.DataSet>, creando el <xref:System.Data.DataTable> objetos si aún no existen. Al crear <xref:System.Data.DataTable> objetos, el <xref:System.Data.Common.DataAdapter.Fill%2A> operación normalmente crea únicamente los metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para garantizar que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Si el adaptador de datos detecta las columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, utilizando el patrón "columnname1", "columnname2", "nombredecolumna3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet>, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como un lote de instrucciones SQL, si uno de los resultados contiene un error, todos los resultados posteriores se omiten y no agrega a la <xref:System.Data.DataSet>.  
  
 Puede usar el <xref:System.Data.Common.DataAdapter.Fill%2A> método varias veces en el mismo <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con las filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se va a rellenar con registros y, si es necesario, con un esquema.</param>
        <param name="startRecord">Número de registro de base cero inicial.</param>
        <param name="maxRecords">Número máximo de registros que se van a recuperar.</param>
        <param name="srcTable">Nombre de la tabla de origen que se utilizará para la asignación de tabla.</param>
        <summary>Agrega filas en un intervalo especificado de <see cref="T:System.Data.DataSet" /> o las actualiza para hacerlas coincidir con las filas del origen de datos utilizando los nombres de <see cref="T:System.Data.DataSet" /> y <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Número de filas agregadas o actualizadas correctamente en la clase <see cref="T:System.Data.DataSet" />. No se incluyen las filas afectadas por instrucciones que no devuelven filas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `maxRecords` el valor 0 obtiene todos los registros encontrados después del registro inicial. Si `maxRecords` es mayor que el número de filas restantes, sólo se devuelven las filas restantes y se emite ningún error.  
  
 Si el comando select correspondiente es una instrucción que devuelve varios resultados, <xref:System.Data.Common.DbDataAdapter.Fill%2A> solo se aplica `maxRecords` al primer resultado.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera los datos de origen de datos mediante una instrucción SELECT. La <xref:System.Data.IDbConnection> objeto asociado con la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si el <xref:System.Data.IDbConnection> está cerrado antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llama, se abre para recuperar datos y se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, permanece abierta.  
  
 Si un comando no devuelve ninguna fila, no hay tablas se agregan a la <xref:System.Data.DataSet>, pero no se produce ninguna excepción.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta las columnas duplicadas al rellenar un <xref:System.Data.DataTable>, generará nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2 ","*columnname*3 ", y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 Si la consulta especificada devuelve varios resultados, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Dado que no se crea ninguna tabla para una consulta que no devuelve filas, si se procesa una consulta insert seguida de una consulta select, la tabla creada para la consulta select se denomina "Table", porque es la primera tabla creada. Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde el <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres difieren solo por caso. En tales situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una nueva tabla si no existe ninguna coincidencia exacta. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y el <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre se diferencia sólo por caso de que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Si se encuentra un error o una excepción al rellenar las tablas de datos, las filas agregadas antes de la aparición del error permanecen en las tablas de datos. El resto de la operación se ha anulado.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataSet> devuelve varios resultados, como instrucciones SQL por lotes, sea consciente de las acciones siguientes:  
  
-   Cuando se procesan varios resultados de una instrucción SQL, por lotes `maxRecords` solo se aplica al primer resultado. Lo mismo puede decirse de las filas que contienen resultados divididos en segmentos (proveedor de datos de .NET Framework para OLE DB solo). El resultado de nivel superior está limitado por `maxRecords`, pero se agregan todas las filas secundarias.  
  
-   Si uno de los resultados contiene un error, todos los resultados posteriores se omiten y no se agregan a la <xref:System.Data.DataSet>.  
  
 Cuando se usa posteriores <xref:System.Data.Common.DbDataAdapter.Fill%2A> llamadas para actualizar el contenido de la <xref:System.Data.DataSet>, se deben cumplir dos condiciones:  
  
1.  La instrucción SQL debe coincidir con lo que inicialmente se usa para rellenar el <xref:System.Data.DataSet>.  
  
2.  El **clave** información de la columna debe estar presente.  
  
 Si está presente la información de clave principal, las filas duplicadas se reconciliarán y solo aparecen una vez en el <xref:System.Data.DataTable> que corresponde a la <xref:System.Data.DataSet>. Información de clave principal puede establecerse a través de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, especificando el <xref:System.Data.DataTable.PrimaryKey%2A> propiedad de la <xref:System.Data.DataTable>, o estableciendo la <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> propiedad `AddWithKey`.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para garantizar que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
> [!NOTE]
>  El `DataSet` no contendrá más del número de registros indicado por `maxRecords`. Sin embargo, todavía se devuelve el conjunto completo de resultados generado por la consulta desde el servidor.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>para rellenar un <xref:System.Data.DataSet> con 15 filas, comenzando en la fila 10, desde el **categorías** tabla. En este ejemplo se da por supuesto que ha creado un <xref:System.Data.OleDb.OleDbDataAdapter> y un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Fill3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <see cref="T:System.Data.DataSet" /> no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.  
  
O bien 
La conexión no es válida.</exception>
        <exception cref="T:System.InvalidCastException">No se encontró la conexión.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="startRecord" /> es menor que 0.  
  
O bien 
El parámetro <paramref name="maxRecords" /> es menor que 0.</exception>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> método.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, string srcTable, System.Data.IDataReader dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, string srcTable, class System.Data.IDataReader dataReader, int32 startRecord, int32 maxRecords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, System::String ^ srcTable, System::Data::IDataReader ^ dataReader, int startRecord, int maxRecords);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * string * System.Data.IDataReader * int * int -&gt; int" Usage="dbDataAdapter.Fill (dataSet, srcTable, dataReader, startRecord, maxRecords)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="dataReader" Type="System.Data.IDataReader" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dataSet">To be added.</param>
        <param name="srcTable">To be added.</param>
        <param name="dataReader">To be added.</param>
        <param name="startRecord">To be added.</param>
        <param name="maxRecords">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataTable[] dataTables, int32 startRecord, int32 maxRecords, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Fill (dataTables As DataTable(), startRecord As Integer, maxRecords As Integer, command As IDbCommand, behavior As CommandBehavior) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables, int startRecord, int maxRecords, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataTable[] * int * int * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataTables, startRecord, maxRecords, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTables">Objetos <see cref="T:System.Data.DataTable" /> que se van a rellenar a partir del origen de datos.</param>
        <param name="startRecord">Número de registro de base cero inicial.</param>
        <param name="maxRecords">Número máximo de registros que se van a recuperar.</param>
        <param name="command">Interfaz <see cref="T:System.Data.IDbCommand" /> ejecutada para rellenar los objetos <see cref="T:System.Data.DataTable" />.</param>
        <param name="behavior">Uno de los valores de <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Agrega filas en un intervalo especificado de <see cref="T:System.Data.DataSet" /> o las actualiza para hacerlas coincidir con las filas del origen de datos utilizando los nombres de <see cref="T:System.Data.DataSet" /> y <see cref="T:System.Data.DataTable" />.</summary>
        <returns>Número de filas agregadas o actualizadas en las tablas de datos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `maxRecords` el valor 0 obtiene todos los registros encontrados después del registro inicial. Si `maxRecords` es mayor que el número de filas restantes, sólo se devuelven las filas restantes y se emite ningún error.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera los datos de origen de datos mediante una instrucción SELECT. La <xref:System.Data.IDbConnection> objeto asociado con la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si el <xref:System.Data.IDbConnection> está cerrado antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, permanece abierta.  
  
 Si un comando no devuelve ninguna fila, no hay tablas se agregan a la <xref:System.Data.DataSet>, pero no se produce ninguna excepción.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> objeto detecta las columnas duplicadas al rellenar un <xref:System.Data.DataTable>, generará nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2 ","*columnname*3 ", y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente.  
  
 Si la consulta especificada devuelve varios resultados, cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Puesto que no hay ninguna tabla se crea para una consulta que no devuelve filas, si tuviera que procesar una consulta insert seguida de una consulta select, la tabla creada para la consulta select se denominará "Table", porque es la primera tabla creada. Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde el <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres difieren solo por caso. En tales situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una nueva tabla si no existe ninguna coincidencia exacta. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y el <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre se diferencia sólo por caso de que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Si se encuentra un error o una excepción al rellenar las tablas de datos, las filas agregadas antes de la aparición del error permanecen en las tablas de datos. El resto de la operación se ha anulado.  
  
 Si la instrucción SELECT utilizada para rellenar el <xref:System.Data.DataTable> objetos devuelve varios resultados, como un lote de instrucciones SQL, tener en cuenta lo siguiente:  
  
-   Cuando se procesan varios resultados de una instrucción SQL, por lotes `maxRecords` solo se aplica al primer resultado. Lo mismo puede decirse de las filas que contienen resultados divididos en segmentos (proveedor de datos de .NET Framework para OLE DB solo). El resultado de nivel superior está limitado por `maxRecords`, pero se agregan todas las filas secundarias.  
  
-   Si uno de los resultados contiene un error, se omiten todos los resultados siguientes.  
  
> [!NOTE]
>  El `DataSet` no contendrá más del número de registros indicado por `maxRecords`. Sin embargo, todo el conjunto de resultados generado por la consulta se devuelve desde el servidor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <see cref="T:System.Data.DataSet" /> no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.  
  
O bien 
La conexión no es válida.</exception>
        <exception cref="T:System.InvalidCastException">No se encontró la conexión.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="startRecord" /> es menor que 0.  
  
O bien 
El parámetro <paramref name="maxRecords" /> es menor que 0.</exception>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> método.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet, int32 startRecord, int32 maxRecords, string srcTable, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Fill(System::Data::DataSet ^ dataSet, int startRecord, int maxRecords, System::String ^ srcTable, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.Fill : System.Data.DataSet * int * int * string * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; int" Usage="dbDataAdapter.Fill (dataSet, startRecord, maxRecords, srcTable, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="startRecord" Type="System.Int32" />
        <Parameter Name="maxRecords" Type="System.Int32" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se va a rellenar con registros y, si es necesario, con un esquema.</param>
        <param name="startRecord">Número de registro de base cero inicial.</param>
        <param name="maxRecords">Número máximo de registros que se van a recuperar.</param>
        <param name="srcTable">Nombre de la tabla de origen que se utilizará para la asignación de tabla.</param>
        <param name="command">Instrucción SELECT de SQL utilizada para recuperar las filas del origen de datos.</param>
        <param name="behavior">Uno de los valores de <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Agrega filas en un intervalo especificado de <see cref="T:System.Data.DataSet" /> o las actualiza para hacerlas coincidir con las filas del origen de datos utilizando los nombres de <see cref="T:System.Data.DataSet" /> y los nombres de tabla de origen, la cadena de comando y el comportamiento de comando.</summary>
        <returns>Número de filas agregadas o actualizadas correctamente en la clase <see cref="T:System.Data.DataSet" />. No se incluyen las filas afectadas por instrucciones que no devuelven filas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método recupera las filas del origen de datos mediante la instrucción SELECT especificada por un asociado <xref:System.Data.IDbDataAdapter.SelectCommand%2A> propiedad. El objeto de conexión asociado con la instrucción SELECT debe ser válido, pero no es necesario que esté abierto. Si se cierra la conexión antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.Fill%2A> es llamado, permanece abierta.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación, a continuación, agrega las filas al destino <xref:System.Data.DataTable> objetos en el <xref:System.Data.DataSet>, creando el <xref:System.Data.DataTable> objetos si aún no existen. Al crear <xref:System.Data.DataTable> objetos, el <xref:System.Data.Common.DbDataAdapter.Fill%2A> operación normalmente crea únicamente los metadatos de nombre de columna. Sin embargo, si la <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> propiedad está establecida en `AddWithKey`, también se crean claves principales adecuadas y restricciones.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" y así sucesivamente). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.Fill%2A> método es compatible con escenarios donde el <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres difieren solo por caso. En tales situaciones, <xref:System.Data.Common.DbDataAdapter.Fill%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una nueva tabla si no existe ninguna coincidencia exacta. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.Fill(dataset, "aaa"); // Fills "aaa", which already exists in the DataSet.  
adapter.Fill(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Fill%2A> se llama y el <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre se diferencia sólo por caso de que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.Fill(dataset, "AAA"); // Fills table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 Puede usar el <xref:System.Data.Common.DbDataAdapter.Fill%2A> método varias veces en el mismo <xref:System.Data.DataTable>. Si existe una clave principal, las filas entrantes se combinan con las filas coincidentes que ya existen. Si no existe ninguna clave principal, las filas entrantes se anexan a la <xref:System.Data.DataTable>.  
  
 Si `SelectCommand` devuelve los resultados de OUTER JOIN, `DataAdapter` no establece un valor <xref:System.Data.DataTable.PrimaryKey%2A> para el objeto <xref:System.Data.DataTable> resultante. Debe definir explícitamente la clave principal para garantizar que las filas duplicadas se resuelven correctamente. Para obtener más información, consulte [definir claves principales](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.Fill%2A> y <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> de datos .NET Framework proveedor recupera información de esquema para que solo el primer resultado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="startRecord" /> es menor que 0.  
  
O bien 
El parámetro <paramref name="maxRecords" /> es menor que 0.</exception>
        <block subset="none" type="overrides">
          <para>Esta sobrecarga de la <see cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillCommandBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Data.CommandBehavior FillCommandBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.CommandBehavior FillCommandBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property FillCommandBehavior As CommandBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Data::CommandBehavior FillCommandBehavior { System::Data::CommandBehavior get(); void set(System::Data::CommandBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.FillCommandBehavior : System.Data.CommandBehavior with get, set" Usage="System.Data.Common.DbDataAdapter.FillCommandBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.CommandBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el comportamiento del comando utilizado para rellenar el adaptador de datos.</summary>
        <value>
          <see cref="T:System.Data.CommandBehavior" /> del comando utilizado para rellenar el adaptador de datos.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillError">
      <MemberSignature Language="C#" Value="public event System.Data.FillErrorEventHandler FillError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.FillErrorEventHandler FillError" />
      <MemberSignature Language="DocId" Value="E:System.Data.Common.DbDataAdapter.FillError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FillError As FillErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::FillErrorEventHandler ^ FillError;" />
      <MemberSignature Language="F#" Value="member this.FillError : System.Data.FillErrorEventHandler " Usage="member this.FillError : System.Data.FillErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Data.DataSysDescription("DbDataAdapter_FillError")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.FillErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FillSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega <see cref="T:System.Data.DataTable" /> a <see cref="T:System.Data.DataSet" /> y configura el esquema para hacerlo coincidir con el del origen de datos.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> donde se va a insertar el esquema.</param>
        <param name="schemaType">Uno de los valores de <see cref="T:System.Data.SchemaType" /> que especifica cómo insertar el esquema.</param>
        <summary>Agrega un objeto <see cref="T:System.Data.DataTable" /> denominado "Table" a la interfaz <see cref="T:System.Data.DataSet" /> que se ha especificado y configura el esquema para que coincida con el del origen de datos en función de la <see cref="T:System.Data.SchemaType" /> especificada.</summary>
        <returns>Referencia a una colección de objetos <see cref="T:System.Data.DataTable" /> que se agregaron a <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método recupera la información del esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Un <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si se devuelven uno o más columnas de clave principal por la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se usan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
-   Si no hay columnas de clave principal se devuelven, pero columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas no admiten valores NULL. Si alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven las columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y restricciones unique se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un único clúster índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Información de clave principal se usa durante <xref:System.Data.Common.DbDataAdapter.Fill%2A> para buscar y reemplazar todas las filas cuyas columnas de clave coincidan. Si esto no es el comportamiento deseado, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> sin solicitar la información de esquema.  
  
 Si el <xref:System.Data.IDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" etc.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 La <xref:System.Data.IDbConnection> objeto asociado con el comando select debe ser válido, pero no es necesario abrir. Si el <xref:System.Data.IDbConnection> está cerrado antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, se deja abierto.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se utiliza el método <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe tener en cuenta los posibles efectos secundarios, como las interferencias con el uso de las instrucciones SET FMTONLY ON. Para obtener más información, vea [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.SqlClient.SqlDataAdapter>para rellenar un <xref:System.Data.DataSet> con el esquema y devuelve un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataTable">Clase <see cref="T:System.Data.DataTable" /> que se va a rellenar con el esquema a partir del origen de datos.</param>
        <param name="schemaType">Uno de los valores de <see cref="T:System.Data.SchemaType" />.</param>
        <summary>Configura el esquema de la tabla <see cref="T:System.Data.DataTable" /> especificada en función del tipo <see cref="T:System.Data.SchemaType" /> especificado.</summary>
        <returns>
          <see cref="T:System.Data.DataTable" /> que contiene la información de esquema devuelta desde el origen de datos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método recupera el esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. El objeto de conexión asociado con el <xref:System.Data.IDbDataAdapter.SelectCommand%2A> debe ser válido, pero no es necesario que esté abierto. Si se cierra la conexión antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, permanece abierta.  
  
 Un <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación devuelve un <xref:System.Data.DataTable>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si un <xref:System.Data.DataTable.PrimaryKey%2A> ya se ha definido para el `DataTable`, o el `DataTable` contiene datos, la `PrimaryKey` no se puede establecer la propiedad.  
  
-   Si se devuelven uno o más columnas de clave principal por la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se usan como columnas de clave principal para el `DataTable`.  
  
-   Si no hay columnas de clave principal se devuelven, pero columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas no admiten valores NULL. Si alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la `PrimaryKey` no se establece la propiedad.  
  
-   Si se devuelven las columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el `DataTable`.  
  
 Tenga en cuenta que las claves principales y restricciones unique se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan. Este proceso puede requerir varias ida y vuelta al servidor.  
  
 Si un único clúster índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Si el <xref:System.Data.Common.DbDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" etc.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> no se devuelve ninguna fila. Use la <xref:System.Data.Common.DbDataAdapter.Fill%2A> método para agregar filas a una <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se utiliza el método <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe tener en cuenta los posibles efectos secundarios, como las interferencias con el uso de las instrucciones SET FMTONLY ON. Para obtener más información, vea [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.SqlClient.SqlDataAdapter>para rellenar un <xref:System.Data.DataSet> con el esquema y devuelve un <xref:System.Data.DataTable>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * string -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> donde se va a insertar el esquema.</param>
        <param name="schemaType">Uno de los valores de <see cref="T:System.Data.SchemaType" /> que especifica cómo insertar el esquema.</param>
        <param name="srcTable">Nombre de la tabla de origen que se utilizará para la asignación de tabla.</param>
        <summary>Agrega <see cref="T:System.Data.DataTable" /> al <see cref="T:System.Data.DataSet" /> especificado y configura el esquema para hacerlo coincidir con el del origen de datos en función del tipo <see cref="T:System.Data.SchemaType" /> y la tabla <see cref="T:System.Data.DataTable" /> especificados.</summary>
        <returns>Referencia a una colección de objetos <see cref="T:System.Data.DataTable" /> que se agregaron a <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método recupera la información del esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 Un <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si se devuelven uno o más columnas de clave principal por la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se usan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
-   Si no hay columnas de clave principal se devuelven, pero columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas no admiten valores NULL. Si alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven las columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y restricciones unique se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un único clúster índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Información de clave principal se usa durante <xref:System.Data.Common.DbDataAdapter.Fill%2A> para buscar y reemplazar todas las filas cuyas columnas de clave coincidan. Si esto no es el comportamiento deseado, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> sin solicitar la información de esquema.  
  
 Si el <xref:System.Data.Common.DbDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" etc.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método es compatible con escenarios donde el <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres difieren solo por caso. En tales situaciones, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una nueva tabla si no existe ninguna coincidencia exacta. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> se llama y el <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre se diferencia sólo por caso de que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 La <xref:System.Data.IDbConnection> objeto asociado con el comando select debe ser válido, pero no es necesario abrir. Si el <xref:System.Data.IDbConnection> está cerrado antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, se deja abierto.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se utiliza el método <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe tener en cuenta los posibles efectos secundarios, como las interferencias con el uso de las instrucciones SET FMTONLY ON. Para obtener más información, vea [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.SqlClient.SqlDataAdapter>para rellenar un <xref:System.Data.DataSet> con el esquema y devuelve un <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.FillSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">No se encontró una tabla de origen desde la que se pueda obtener el esquema.</exception>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable FillSchema(class System.Data.DataTable dataTable, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::DataTable ^ FillSchema(System::Data::DataTable ^ dataTable, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataTable * System.Data.SchemaType * System.Data.IDbCommand * System.Data.CommandBehavior -&gt; System.Data.DataTable" Usage="dbDataAdapter.FillSchema (dataTable, schemaType, command, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataTable">Clase <see cref="T:System.Data.DataTable" /> que se va a rellenar con el esquema a partir del origen de datos.</param>
        <param name="schemaType">Uno de los valores de <see cref="T:System.Data.SchemaType" />.</param>
        <param name="command">Instrucción SELECT de SQL utilizada para recuperar las filas del origen de datos.</param>
        <param name="behavior">Uno de los valores de <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Configura el esquema de la tabla <see cref="T:System.Data.DataTable" /> especificada en función del <see cref="T:System.Data.SchemaType" />, la cadena de comando y los valores de <see cref="T:System.Data.CommandBehavior" /> especificados.</summary>
        <returns>Objeto <see cref="T:System.Data.DataTable" /> que contiene la información de esquema devuelta desde el origen de datos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método recupera el esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. El objeto de conexión asociado con el <xref:System.Data.IDbDataAdapter.SelectCommand%2A> debe ser válido, pero no es necesario que esté abierto. Si se cierra la conexión antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, permanece abierta.  
  
 Un <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si se devuelven uno o más columnas de clave principal por la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se usan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
-   Si no hay columnas de clave principal se devuelven, pero columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas no admiten valores NULL. Si alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven las columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y restricciones unique se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un único clúster índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Si el <xref:System.Data.IDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" etc.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> no se devuelve ninguna fila. Use la <xref:System.Data.Common.DbDataAdapter.Fill%2A> método para agregar filas a una <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se utiliza el método <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe tener en cuenta los posibles efectos secundarios, como las interferencias con el uso de las instrucciones SET FMTONLY ON. Para obtener más información, vea [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Esta implementación de la <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType, class System.Data.IDbCommand command, string srcTable, valuetype System.Data.CommandBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType, System::Data::IDbCommand ^ command, System::String ^ srcTable, System::Data::CommandBehavior behavior);" />
      <MemberSignature Language="F#" Value="override this.FillSchema : System.Data.DataSet * System.Data.SchemaType * System.Data.IDbCommand * string * System.Data.CommandBehavior -&gt; System.Data.DataTable[]" Usage="dbDataAdapter.FillSchema (dataSet, schemaType, command, srcTable, behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="srcTable" Type="System.String" />
        <Parameter Name="behavior" Type="System.Data.CommandBehavior" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se va a rellenar con el esquema a partir del origen de datos.</param>
        <param name="schemaType">Uno de los valores de <see cref="T:System.Data.SchemaType" />.</param>
        <param name="command">Instrucción SELECT de SQL utilizada para recuperar las filas del origen de datos.</param>
        <param name="srcTable">Nombre de la tabla de origen que se utilizará para la asignación de tabla.</param>
        <param name="behavior">Uno de los valores de <see cref="T:System.Data.CommandBehavior" />.</param>
        <summary>Agrega <see cref="T:System.Data.DataTable" /> al <see cref="T:System.Data.DataSet" /> especificado y configura el esquema para hacerlo coincidir con el del origen de datos en función del tipo <see cref="T:System.Data.SchemaType" /> especificado.</summary>
        <returns>Matriz de objetos <see cref="T:System.Data.DataTable" /> que contienen la información de esquema devuelta a partir del origen de datos.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método recupera el esquema de origen de datos mediante el <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. El objeto de conexión asociado con el <xref:System.Data.IDbDataAdapter.SelectCommand%2A> debe ser válido, pero no es necesario que esté abierto. Si se cierra la conexión antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, se abre para recuperar datos, a continuación, se cierra. Si la conexión está abierta antes de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> es llamado, permanece abierta.  
  
 Un <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> operación agrega un <xref:System.Data.DataTable> al destino <xref:System.Data.DataSet>. A continuación, agrega columnas a la <xref:System.Data.DataColumnCollection> de la <xref:System.Data.DataTable>y configura las siguientes <xref:System.Data.DataColumn> propiedades si existen en el origen de datos:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Debe establecer <xref:System.Data.DataColumn.AutoIncrementStep%2A> y <xref:System.Data.DataColumn.AutoIncrementSeed%2A> por separado.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> también configura el <xref:System.Data.DataTable.PrimaryKey%2A> y <xref:System.Data.DataTable.Constraints%2A> propiedades según las reglas siguientes:  
  
-   Si se devuelven uno o más columnas de clave principal por la <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, se usan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
-   Si no hay columnas de clave principal se devuelven, pero columnas únicas, las columnas únicas se usan como clave principal si y solo si todas las columnas no admiten valores NULL. Si alguna de las columnas que aceptan valores NULL, un <xref:System.Data.UniqueConstraint> se agrega a la <xref:System.Data.ConstraintCollection>, pero la <xref:System.Data.DataTable.PrimaryKey%2A> no se establece la propiedad.  
  
-   Si se devuelven las columnas de clave principal y columnas únicas, las columnas de clave principales se utilizan como columnas de clave principal para el <xref:System.Data.DataTable>.  
  
 Tenga en cuenta que las claves principales y restricciones unique se agregan a la <xref:System.Data.ConstraintCollection> según las reglas anteriores, pero otra restricción de tipos no se agregan.  
  
 Si un único clúster índice está definido en una o varias columnas en una tabla de SQL Server y la restricción de clave principal se define en un conjunto diferente de columnas, se devolverá los nombres de las columnas en el índice clúster. Para devolver el nombre o nombres de las columnas de clave principal, use una sugerencia de consulta con la instrucción SELECT que especifica el nombre del índice de clave principal. Para obtener más información acerca de cómo especificar sugerencias de consulta, vea [sugerencia de consulta (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Si el <xref:System.Data.IDataAdapter> detecta columnas duplicadas al rellenar un <xref:System.Data.DataTable>, genera nombres para las columnas siguientes, con el patrón "*columnname*1", "*columnname*2", "*columnname*3" y así sucesivamente. Si los datos entrantes contienen columnas sin nombre, se colocan en el <xref:System.Data.DataSet> según el modelo "Columna1", "Columna2" y así sucesivamente. Cuando se agregan varios conjuntos de resultados a la <xref:System.Data.DataSet> cada conjunto de resultados se coloca en una tabla independiente. Conjuntos de resultados adicionales se denominan agregando valores enteros al nombre de tabla especificado (por ejemplo, "Table", "Tabla1", "Tabla2" etc.). Las aplicaciones que usan nombres de tabla y columna deben asegurarse de que no se producen conflictos con estos modelos de nomenclatura.  
  
 El <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> método es compatible con escenarios donde el <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres difieren solo por caso. En tales situaciones, <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y crea una nueva tabla si no existe ninguna coincidencia exacta. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
dataset.Tables.Add("AAA");  
adapter.FillSchema(dataset, "aaa"); // Fills the schema of "aaa", which already exists in the DataSet.  
adapter.FillSchema(dataset, "Aaa"); // Adds a new table called "Aaa".  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> se llama y el <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre se diferencia sólo por caso de que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
dataset.Tables.Add("aaa");  
adapter.FillSchema(dataset, "AAA"); // Fills the schema of table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> no se devuelve ninguna fila. Use la <xref:System.Data.Common.DbDataAdapter.Fill%2A> método para agregar filas a una <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  Al controlar instrucciones SQL por lotes que devuelven varios resultados, la implementación de <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> para el proveedor de datos de .NET Framework para OLE DB recupera información de esquema solo el primer resultado. Para recuperar información de esquema para varios resultados, use <xref:System.Data.Common.DbDataAdapter.Fill%2A> con el <xref:System.Data.MissingSchemaAction> establecido en `AddWithKey`.  
  
 Cuando se utiliza el método <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, el proveedor de datos de .NET Framework para SQL Server agrega una cláusula FOR BROWSE a la instrucción que se está ejecutando. El usuario debe tener en cuenta los posibles efectos secundarios, como las interferencias con el uso de las instrucciones SET FMTONLY ON. Para obtener más información, vea [SET FMTONLY (Transact-SQL)](/sql/t-sql/statements/set-fmtonly-transact-sql).
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Esta implementación de la <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedParameter">
      <MemberSignature Language="C#" Value="protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.IDataParameter GetBatchedParameter(int32 commandIdentifier, int32 parameterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedParameter (commandIdentifier As Integer, parameterIndex As Integer) As IDataParameter" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Data::IDataParameter ^ GetBatchedParameter(int commandIdentifier, int parameterIndex);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedParameter : int * int -&gt; System.Data.IDataParameter&#xA;override this.GetBatchedParameter : int * int -&gt; System.Data.IDataParameter" Usage="dbDataAdapter.GetBatchedParameter (commandIdentifier, parameterIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="parameterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Índice del comando del que se va a recuperar el parámetro.</param>
        <param name="parameterIndex">Índice del parámetro incluido en el comando.</param>
        <summary>Devuelve una interfaz <see cref="T:System.Data.IDataParameter" /> de uno de los comandos del lote actual.</summary>
        <returns>Objeto <see cref="T:System.Data.IDataParameter" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">El adaptador no admite el procesamiento por lotes.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  
  
Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método para permitir a los usuarios ejecutar un lote. Usa una implementación de la <paramref name="commandIdentifier" /> proporcionado para buscar el comando solicitado, a continuación, usa el <paramref name="parameterIndex" /> proporcionado para buscar el parámetro solicitado. Por ejemplo, un <paramref name="commandIdentifier" /> 0 y un <paramref name="parameterIndex" /> de 0 devuelve el primer parámetro desde el primer comando del lote.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetBatchedRecordsAffected">
      <MemberSignature Language="C#" Value="protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetBatchedRecordsAffected(int32 commandIdentifier, [out] int32&amp; recordsAffected, [out] class System.Exception&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetBatchedRecordsAffected (commandIdentifier As Integer, ByRef recordsAffected As Integer, ByRef error As Exception) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetBatchedRecordsAffected(int commandIdentifier, [Runtime::InteropServices::Out] int % recordsAffected, [Runtime::InteropServices::Out] Exception ^ % error);" />
      <MemberSignature Language="F#" Value="abstract member GetBatchedRecordsAffected : int *  *  -&gt; bool&#xA;override this.GetBatchedRecordsAffected : int *  *  -&gt; bool" Usage="dbDataAdapter.GetBatchedRecordsAffected (commandIdentifier, recordsAffected, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandIdentifier" Type="System.Int32" />
        <Parameter Name="recordsAffected" Type="System.Int32" RefType="out" />
        <Parameter Name="error" Type="System.Exception" RefType="out" />
      </Parameters>
      <Docs>
        <param name="commandIdentifier">Índice de columna de base cero del comando individual dentro del lote.</param>
        <param name="recordsAffected">Número de filas del almacén de datos que se ven afectadas por el comando especificado dentro del lote.</param>
        <param name="error">
          <see cref="T:System.Exception" /> que se ha producido durante la ejecución del comando especificado. Devuelve <see langword="null" /> (<see langword="Nothing" /> en Visual Basic) si no se ha producido ninguna excepción.</param>
        <summary>Devuelve información sobre un intento de actualización dentro de una actualización más amplia por lotes.</summary>
        <returns>Información sobre un intento de actualización individual dentro de una actualización por lotes más amplia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proveedores de datos que admiten la lógica de actualización por lotes deben reemplazar una serie de métodos virtuales en el <xref:System.Data.Common.DbDataAdapter> clase. `GetBatchedRecordsAffected` representa uno de esos métodos virtuales. El `DbDataAdapter` depende de la clase `GetBatchedRecordsAffected` para determinar el éxito o fracaso de intentos de actualización individual dentro de un lote de modo que pueda marcar cada correspondiente <xref:System.Data.DataRow> en consecuencia.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public override System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="override this.GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="dbDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.GetFillParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene los parámetros establecidos por el usuario al ejecutar una instrucción SELECT de SQL.</summary>
        <returns>Matriz de objetos <see cref="T:System.Data.IDataParameter" /> que contienen los parámetros establecidos por el usuario.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InitializeBatching">
      <MemberSignature Language="C#" Value="protected virtual void InitializeBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.InitializeBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeBatching();" />
      <MemberSignature Language="F#" Value="abstract member InitializeBatching : unit -&gt; unit&#xA;override this.InitializeBatching : unit -&gt; unit" Usage="dbDataAdapter.InitializeBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicializa el procesamiento por lotes de <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">El adaptador no admite el procesamiento por lotes.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  
  
Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método. Este método ofrece la oportunidad de inicializar todos los recursos necesarios para admitir el procesamiento por lotes de la clase. Por ejemplo, una clase puede asignar una estructura de datos para almacenar el conjunto de comandos del lote.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ InsertCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un comando que se utiliza para insertar nuevos registros en el origen de datos.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> que se utiliza mientras opera <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> para insertar registros en el origen de datos para nuevas filas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, si no se establece esta propiedad y la información de clave principal está presente en el <xref:System.Data.DataSet>, el <xref:System.Data.IDbDataAdapter.InsertCommand%2A> se generará automáticamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea la clase derivada <xref:System.Data.OleDb.OleDbDataAdapter> y se establecen algunas de sus propiedades.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnFillError">
      <MemberSignature Language="C#" Value="protected virtual void OnFillError (System.Data.FillErrorEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFillError(class System.Data.FillErrorEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnFillError(System.Data.FillErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFillError (value As FillErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFillError(System::Data::FillErrorEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnFillError : System.Data.FillErrorEventArgs -&gt; unit&#xA;override this.OnFillError : System.Data.FillErrorEventArgs -&gt; unit" Usage="dbDataAdapter.OnFillError value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.FillErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit&#xA;override this.OnRowUpdated : System.Data.Common.RowUpdatedEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdated value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Provoca el evento <see langword="RowUpdated" /> de un proveedor de datos de .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener información general, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase base <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" /> método.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit&#xA;override this.OnRowUpdating : System.Data.Common.RowUpdatingEventArgs -&gt; unit" Usage="dbDataAdapter.OnRowUpdating value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">Objeto <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> que contiene los datos del evento.</param>
        <summary>Provoca el evento <see langword="RowUpdating" /> de un proveedor de datos de .NET Framework.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado. Para obtener información general, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Cuando se reemplaza <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> en una clase derivada, asegúrese de llamar a la clase bases <see cref="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" /> método.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ SelectCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un comando que se utiliza para seleccionar registros en el origen de datos.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> que se utiliza mientras opera <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> para seleccionar registros del origen de datos y colocarlos en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea la clase derivada <xref:System.Data.OleDb.OleDbDataAdapter> y se establecen algunas de sus propiedades.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una instrucción SQL para eliminar registros del conjunto de datos.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> utilizado mientras opera <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> para eliminar registros del origen de datos para filas eliminadas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.Data.IDbDataAdapter>.  
  
 Para obtener más información, vea <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una instrucción SQL utilizada para insertar nuevos registros en el origen de datos.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> utilizado mientras opera <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> para insertar registros en el origen de datos para nuevas filas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.Data.IDbDataAdapter>.  
  
 Para obtener más información, vea <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una instrucción SQL utilizada para seleccionar registros en el origen de datos.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> que se utiliza mientras opera <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> para seleccionar registros del origen de datos para su colocación en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.Data.IDbDataAdapter>.  
  
 Para obtener más información, vea <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System::Data::IDbDataAdapter::UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una instrucción SQL utilizada para actualizar registros en el origen de datos.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> utilizado mientras opera <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> para actualizar registros del origen de datos para filas modificadas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.Data.IDbDataAdapter>.  
  
 Para obtener más información, vea <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("use 'protected DbDataAdapter(DbDataAdapter)' ctor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un nuevo objeto copiado de la instancia actual.</summary>
        <returns>Nuevo objeto que es copia de esta instancia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este miembro es una implementación explícita de un miembro de interfaz. Solo se puede utilizar cuando la instancia de <xref:System.Data.Common.DbDataAdapter> se convierte en una interfaz <xref:System.ICloneable>.  
  
 Para obtener más información, vea <xref:System.ICloneable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="TerminateBatching">
      <MemberSignature Language="C#" Value="protected virtual void TerminateBatching ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void TerminateBatching() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.TerminateBatching" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub TerminateBatching ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void TerminateBatching();" />
      <MemberSignature Language="F#" Value="abstract member TerminateBatching : unit -&gt; unit&#xA;override this.TerminateBatching : unit -&gt; unit" Usage="dbDataAdapter.TerminateBatching " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finaliza el procesamiento por lotes para <see cref="T:System.Data.Common.DbDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En <xref:System.Data.Common.DbDataAdapter>, este método produce <xref:System.NotSupportedException>. Las clases que heredan de <xref:System.Data.Common.DbDataAdapter> invalide este método para proporcionar compatibilidad con lotes.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">El adaptador no admite el procesamiento por lotes.</exception>
        <block subset="none" type="overrides">
          <para>Este método está protegido y está diseñado para su uso por un proveedor de datos de .NET Framework.  
  
Si una clase que hereda de <see cref="T:System.Data.Common.DbDataAdapter" /> es compatible con lotes, que la clase invalida este método. Este método ofrece la oportunidad de desechar todos los recursos asignados para admitir el procesamiento por lotes de la clase. Por ejemplo, la clase puede desasignar la estructura de datos que contiene los comandos del lote.</para>
        </block>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Update">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Actualiza los valores de la base de datos ejecutando las instrucciones INSERT, UPDATE o DELETE respectivas para cada fila insertada, actualizada o eliminada en <see cref="T:System.Data.DataSet" />.</summary>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataRow[] dataRows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataRow[] dataRows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataRows As DataRow()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] -&gt; int" Usage="dbDataAdapter.Update dataRows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="dataRows">Matriz de objetos <see cref="T:System.Data.DataRow" /> utilizada para actualizar el origen de datos.</param>
        <summary>Actualiza los valores de la base de datos ejecutando las instrucciones INSERT, UPDATE o DELETE respectivas para cada fila insertada, actualizada o eliminada en la matriz especificada en <see cref="T:System.Data.DataSet" />.</summary>
        <returns>Número de filas del <see cref="T:System.Data.DataSet" /> actualizadas correctamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina el <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza de forma individual. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, INSERT antes que las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con objetos DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no se han especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto para generar automáticamente instrucciones SQL para las actualizaciones de tabla única, si establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establece mediante la **CommandBuilder**. Esta lógica de generación requiere información de columna de clave esté presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omiten todas las filas adicionales devueltas.  
  
 Después de que todos los datos se vuelve a cargar en el <xref:System.Data.DataSet>, el <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliar <xref:System.Data.DataSet> fila y los parámetros devueltos por el comando de salida. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es como sigue:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si hay parámetros de salida, se colocan en el <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> suele tener una colección de parámetros asociada con él. Los parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener valores de parámetro para la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se han aplicado las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Use los nombres de columna de origen y los nombres de tabla en la <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se usa para asignar el valor de salida o realizar una copia de los parámetros de entrada/salida para el `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, Current nebo Proposed del valor de columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para continuar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de DataAdapter. Para continuar la operación de actualización sin generar una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>, para actualizar el origen de datos.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.</exception>
        <exception cref="T:System.SystemException">No existe ningún objeto <see cref="T:System.Data.DataRow" /> que actualizar.  
  
O bien 
No existe ningún objeto <see cref="T:System.Data.DataTable" /> que actualizar.  
  
O bien 
No existe ninguna clase <see cref="T:System.Data.DataSet" /> que se vaya a utilizar como origen.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">El hecho de intentar ejecutar una instrucción INSERT, UPDATE o DELETE no ha afectado a ningún registro.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public override int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet -&gt; int" Usage="dbDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDataAdapter.Update(System.Data.DataSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Clase <see cref="T:System.Data.DataSet" /> que se utiliza para actualizar el origen de datos.</param>
        <summary>Actualiza los valores de la base de datos ejecutando las instrucciones INSERT, UPDATE o DELETE respectivas para cada fila insertada, actualizada o eliminada en los objetos <see cref="T:System.Data.DataSet" /> especificados.</summary>
        <returns>Número de filas del <see cref="T:System.Data.DataSet" /> actualizadas correctamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina el <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza de forma individual. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, INSERT antes que las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con objetos DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no se han especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto para generar automáticamente instrucciones SQL para las actualizaciones de tabla única, si establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establece mediante la **CommandBuilder**. Esta lógica de generación requiere información de columna de clave esté presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omiten todas las filas adicionales devueltas.  
  
 Después de que todos los datos se vuelve a cargar en el <xref:System.Data.DataSet>, el <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliar <xref:System.Data.DataSet> fila y los parámetros devueltos por el comando de salida. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es como sigue:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, a continuación, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si hay parámetros de salida, se colocan en el <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> suele tener una colección de parámetros asociada con él. Los parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener valores de parámetro para la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se han aplicado las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Use los nombres de columna de origen y los nombres de tabla en la <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se usa para asignar el valor de salida o realizar una copia de los parámetros de entrada/salida para el `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, Current nebo Proposed del valor de columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para continuar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de DataAdapter. Para continuar la operación de actualización sin generar una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>, para actualizar el origen de datos.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">El hecho de intentar ejecutar una instrucción INSERT, UPDATE o DELETE no ha afectado a ningún registro.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataTable dataTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataTable dataTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataTable ^ dataTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataTable -&gt; int" Usage="dbDataAdapter.Update dataTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="dataTable">Clase <see cref="T:System.Data.DataTable" /> que se utiliza para actualizar el origen de datos.</param>
        <summary>Actualiza los valores de la base de datos ejecutando las instrucciones INSERT, UPDATE o DELETE respectivas para cada fila insertada, actualizada o eliminada en los objetos <see cref="T:System.Data.DataTable" /> especificados.</summary>
        <returns>Número de filas del <see cref="T:System.Data.DataTable" /> actualizadas correctamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina el <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza de forma individual. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, INSERT antes que las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con objetos DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no se han especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto para generar automáticamente instrucciones SQL para las actualizaciones de tabla única, si establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establece mediante la **CommandBuilder**. Esta lógica de generación requiere información de columna de clave esté presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omiten todas las filas adicionales devueltas.  
  
 Después de que todos los datos se vuelve a cargar en el <xref:System.Data.DataSet>, el <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliar <xref:System.Data.DataSet> fila y los parámetros devueltos por el comando de salida. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es como sigue:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, a continuación, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si hay parámetros de salida, se colocan en el <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> suele tener una colección de parámetros asociada con él. Los parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener valores de parámetro para la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se han aplicado las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Use los nombres de columna de origen y los nombres de tabla en la <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se usa para asignar el valor de salida o realizar una copia de los parámetros de entrada/salida para el `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, Current nebo Proposed del valor de columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para continuar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de DataAdapter. Para continuar la operación de actualización sin generar una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>, para actualizar el origen de datos.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.</exception>
        <exception cref="T:System.SystemException">No existe ningún objeto <see cref="T:System.Data.DataRow" /> que actualizar.  
  
O bien 
No existe ningún objeto <see cref="T:System.Data.DataTable" /> que actualizar.  
  
O bien 
No existe ninguna clase <see cref="T:System.Data.DataSet" /> que se vaya a utilizar como origen.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">El hecho de intentar ejecutar una instrucción INSERT, UPDATE o DELETE no ha afectado a ningún registro.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance int32 Update(class System.Data.DataRow[] dataRows, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Update (dataRows As DataRow(), tableMapping As DataTableMapping) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual int Update(cli::array &lt;System::Data::DataRow ^&gt; ^ dataRows, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataRow[] * System.Data.Common.DataTableMapping -&gt; int" Usage="dbDataAdapter.Update (dataRows, tableMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRows" Type="System.Data.DataRow[]" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRows">Matriz de objetos <see cref="T:System.Data.DataRow" /> utilizada para actualizar el origen de datos.</param>
        <param name="tableMapping">Colección <see cref="P:System.Data.IDataAdapter.TableMappings" /> que se va a utilizar.</param>
        <summary>Actualiza los valores de la base de datos ejecutando las instrucciones INSERT, UPDATE o DELETE respectivas para cada fila insertada, actualizada o eliminada en la matriz de objetos <see cref="T:System.Data.DataSet" /> especificada.</summary>
        <returns>Número de filas del <see cref="T:System.Data.DataSet" /> actualizadas correctamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina el <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza de forma individual. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, INSERT antes que las actualizaciones). Para obtener más información, consulte [actualizar orígenes de datos con objetos DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no se han especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto para generar automáticamente instrucciones SQL para las actualizaciones de tabla única, si establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establece mediante la **CommandBuilder**. Esta lógica de generación requiere información de columna de clave esté presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omiten todas las filas adicionales devueltas.  
  
 Después de que todos los datos se vuelve a cargar en el <xref:System.Data.DataSet>, el <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliar <xref:System.Data.DataSet> fila y los parámetros devueltos por el comando de salida. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es como sigue:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, a continuación, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si hay parámetros de salida, se colocan en el <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> suele tener una colección de parámetros asociada con él. Los parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener valores de parámetro para la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se han aplicado las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Use los nombres de columna de origen y los nombres de tabla en la <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se usa para asignar el valor de salida o realizar una copia de los parámetros de entrada/salida para el `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, Current nebo Proposed del valor de columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para continuar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de DataAdapter. Para continuar la operación de actualización sin generar una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.</exception>
        <exception cref="T:System.SystemException">No existe ningún objeto <see cref="T:System.Data.DataRow" /> que actualizar.  
  
O bien 
No existe ningún objeto <see cref="T:System.Data.DataTable" /> que actualizar.  
  
O bien 
No existe ninguna clase <see cref="T:System.Data.DataSet" /> que se vaya a utilizar como origen.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">El hecho de intentar ejecutar una instrucción INSERT, UPDATE o DELETE no ha afectado a ningún registro.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Data.DataSet dataSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet, System::String ^ srcTable);" />
      <MemberSignature Language="F#" Value="override this.Update : System.Data.DataSet * string -&gt; int" Usage="dbDataAdapter.Update (dataSet, srcTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">
          <see cref="T:System.Data.DataSet" /> que se va a utilizar para actualizar el origen de datos.</param>
        <param name="srcTable">Nombre de la tabla de origen que se utilizará para la asignación de tabla.</param>
        <summary>Actualiza los valores de la base de datos al ejecutar las instrucciones INSERT, UPDATE o DELETE respectivas para cada fila insertada, actualizada o eliminada en los objetos <see cref="T:System.Data.DataSet" /> con el nombre de <see cref="T:System.Data.DataTable" /> especificado.</summary>
        <returns>Número de filas del <see cref="T:System.Data.DataSet" /> actualizadas correctamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando una aplicación llama el <xref:System.Data.Common.DbDataAdapter.Update%2A> método, el <xref:System.Data.Common.DbDataAdapter> examina el <xref:System.Data.DataRow.RowState%2A> propiedad y ejecuta las instrucciones INSERT, UPDATE o DELETE necesarias forma iterativa para cada fila, según el orden de los índices configurados en el <xref:System.Data.DataSet>. Por ejemplo, <xref:System.Data.Common.DbDataAdapter.Update%2A> podría ejecutar una instrucción DELETE, seguida de una instrucción INSERT y, a continuación, otra instrucción DELETE, debido al orden de las filas de la <xref:System.Data.DataTable>.  
  
 Se debe tener en cuenta que estas instrucciones no se realizan como un proceso por lotes; cada fila se actualiza de forma individual. Una aplicación puede llamar a la <xref:System.Data.DataSet.GetChanges%2A> método en situaciones donde se debe controlar la secuencia de tipos de instrucciones (por ejemplo, insertar antes de la actualización). Para obtener más información, consulte [actualizar orígenes de datos con objetos DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Si no se han especificado las instrucciones INSERT, UPDATE o DELETE, la <xref:System.Data.Common.DbDataAdapter.Update%2A> método genera una excepción. Sin embargo, puede crear un <xref:System.Data.SqlClient.SqlCommandBuilder> o <xref:System.Data.OleDb.OleDbCommandBuilder> objeto para generar automáticamente instrucciones SQL para las actualizaciones de tabla única, si establece la `SelectCommand` propiedad de un proveedor de datos de .NET Framework. A continuación, se generan las instrucciones SQL que no se establece mediante la **CommandBuilder**. Esta lógica de generación requiere información de columna de clave esté presente en el <xref:System.Data.DataSet>. Para obtener más información, consulte [generar comandos con objetos CommandBuilder](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método es compatible con escenarios donde el <xref:System.Data.DataSet> contiene varias <xref:System.Data.DataTable> objetos cuyos nombres difieren solo por caso. Cuando varias tablas con el mismo nombre, pero otro caso, existen en un `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A> realiza una comparación entre mayúsculas y minúsculas para encontrar la tabla correspondiente y genera una excepción si no hay ninguna coincidencia exacta. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet ds = new DataSet();  
 ds.Tables.Add("aaa");  
 ds.Tables.Add("AAA");  
 adapter.Update(ds, "aaa"); // Updates "aaa", which already exists in the DataSet.  
 adapter.Update(ds, "AAA"); // Updates "AAA", which already exists in the DataSet.  
    adapter.Update(ds, "Aaa"); // Results in an exception.  
```  
  
 Si <xref:System.Data.Common.DbDataAdapter.Update%2A> se llama y el <xref:System.Data.DataSet> contiene solamente un <xref:System.Data.DataTable> cuyo nombre se diferencia sólo por caso de que <xref:System.Data.DataTable> se actualiza. En este escenario, la comparación distingue entre mayúsculas y minúsculas. El código de C# siguiente muestra este comportamiento.  
  
```  
DataSet dataset = new DataSet();  
 dataset.Tables.Add("aaa");  
    adapter.Update(dataset, "AAA"); // Updates table "aaa" because only one similarly named table is in the DataSet.  
```  
  
 El <xref:System.Data.Common.DbDataAdapter.Update%2A> método recupera filas de la tabla que aparece en la primera asignación antes de realizar una actualización. El <xref:System.Data.Common.DbDataAdapter.Update%2A> , a continuación, actualiza la fila con el valor de la <xref:System.Data.IDbCommand.UpdatedRowSource%2A> propiedad. Se omiten todas las filas adicionales devueltas.  
  
 Después de que todos los datos se vuelve a cargar en el <xref:System.Data.DataSet>, el <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> se genera el evento, que permite al usuario inspeccionar el reconciliar <xref:System.Data.DataSet> fila y los parámetros devueltos por el comando de salida. Después de una fila se actualiza correctamente, se aceptan los cambios en esa fila.  
  
 Cuando se usa <xref:System.Data.Common.DbDataAdapter.Update%2A>, el orden de ejecución es como sigue:  
  
1.  Los valores de la <xref:System.Data.DataRow> se mueven a los valores de parámetro.  
  
2.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Ejecuta el comando.  
  
4.  Si el comando se establece en `FirstReturnedRecord`, a continuación, el primer resultado devuelto se coloca en el <xref:System.Data.DataRow>.  
  
5.  Si hay parámetros de salida, se colocan en el <xref:System.Data.DataRow>.  
  
6.  Se genera el evento <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  Se llama a <xref:System.Data.DataRow.AcceptChanges%2A>.  
  
 Cada comando asociado a la <xref:System.Data.Common.DbDataAdapter> suele tener una colección de parámetros asociada con él. Los parámetros se asignan a la fila actual a través de la `SourceColumn` y `SourceVersion` propiedades de un proveedor de datos de .NET Framework `Parameter` clase. `SourceColumn` hace referencia a un <xref:System.Data.DataTable> columna que el <xref:System.Data.Common.DbDataAdapter> referencias para obtener valores de parámetro para la fila actual.  
  
 `SourceColumn` hace referencia al nombre de columna no asignada antes de que se han aplicado las asignaciones de tabla. Si `SourceColumn` hace referencia a una columna que no existe, la acción realizada depende de uno de los siguientes <xref:System.Data.MissingMappingAction> valores.  
  
|Valor de enumeración|Acción realizada|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Use los nombres de columna de origen y los nombres de tabla en la <xref:System.Data.DataSet> si no hay ninguna asignación.|  
|`MissingMappingAction.Ignore`|Un <xref:System.SystemException> se genera. Cuando las asignaciones se establecen explícitamente, falta de una asignación para un parámetro de entrada suele ser el resultado de un error.|  
|`MissingMappingAction.Error`|Un <xref:System.SystemException> se genera.|  
  
 El `SourceColumn` propiedad también se usa para asignar el valor de salida o realizar una copia de los parámetros de entrada/salida para el `DataSet`. Si hace referencia a una columna que no existe, se genera una excepción.  
  
 El `SourceVersion` propiedad de un proveedor de datos de .NET Framework `Parameter` clase determina si se utiliza la versión Original, Current nebo Proposed del valor de columna. Esta capacidad se utiliza a menudo para incluir valores originales en la cláusula WHERE de una instrucción UPDATE para comprobar las infracciones de simultaneidad optimista.  
  
> [!NOTE]
>  Si se produce un error al actualizar una fila, se produce una excepción y se interrumpe la ejecución de la actualización. Para continuar la operación de actualización sin generar excepciones cuando se produce un error, establezca el <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> propiedad `true` antes de llamar a <xref:System.Data.Common.DbDataAdapter.Update%2A>. También puede responder a los errores según una fila por fila dentro de la `RowUpdated` eventos de DataAdapter. Para continuar la operación de actualización sin generar una excepción dentro de la `RowUpdated` conjunto de eventos, el <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> propiedad de la <xref:System.Data.Common.RowUpdatedEventArgs> a <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa la clase derivada, <xref:System.Data.OleDb.OleDbDataAdapter>, para actualizar el origen de datos.  
  
 [!code-csharp[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.Update3/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="T:System.Data.DataSet" /> no es válido.</exception>
        <exception cref="T:System.InvalidOperationException">La tabla de origen no es válida.</exception>
        <exception cref="T:System.Data.DBConcurrencyException">El hecho de intentar ejecutar una instrucción INSERT, UPDATE o DELETE no ha afectado a ningún registro.</exception>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateBatchSize">
      <MemberSignature Language="C#" Value="public virtual int UpdateBatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UpdateBatchSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UpdateBatchSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UpdateBatchSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateBatchSize : int with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateBatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que habilita o deshabilita la compatibilidad con el procesamiento por lotes, y especifica el número de comandos que se pueden ejecutar en un lote.</summary>
        <value>Número de filas que se van a procesar por lote.  
  
 <list type="table"><listheader><term> Valor 
 </term><description> Efecto 
 </description></listheader><item><term> 0 
 </term><description> No hay límite para el tamaño de lotes.  
  
 </description></item><item><term> 1 
 </term><description> Deshabilita la actualización por lotes.  
  
 </description></item><item><term> &gt; 1 
 </term><description> Los cambios se envían utilizando los lotes de las operaciones <see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" /> a la vez.  
  
 </description></item></list>  
  
 Si se establece en un valor distinto de 1, todos los comandos asociados con el <see cref="T:System.Data.Common.DbDataAdapter" /> debe tener su <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> propiedad establecida en **ninguno** o **OutputParameters**. De lo contrario, se producirá una excepción.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Data.Common.DbDataAdapter.UpdateBatchSize%2A> propiedad para actualizar un origen de datos con los cambios de un <xref:System.Data.DataSet>. Si el proveedor de datos admite el procesamiento por lotes, esto puede aumentar el rendimiento de la aplicación al reducir el número de idas y vueltas al servidor. En ADO.NET 2.0, esta propiedad se admite para los proveedores de datos .NET para SQL Server (SqlClient) y Oracle (OracleClient).  
  
 Si se ejecuta un lote demasiado grande, el rendimiento podría verse afectado. Por tanto, es conveniente realizar pruebas a fin de determinar el valor óptimo del tamaño del lote antes de implementar la aplicación.  
  
 Un <xref:System.ArgumentOutOfRangeException> se producirá si el valor se establece en un número menor que cero.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbCommand ^ UpdateCommand { System::Data::Common::DbCommand ^ get(); void set(System::Data::Common::DbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.Common.DbCommand with get, set" Usage="System.Data.Common.DbDataAdapter.UpdateCommand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un comando que se utiliza para actualizar registros en el origen de datos.</summary>
        <value>Interfaz <see cref="T:System.Data.IDbCommand" /> utilizada mientras opera <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> para actualizar registros del origen de datos para filas modificadas en el conjunto de datos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durante la <xref:System.Data.Common.DbDataAdapter.Update%2A>, si no se establece esta propiedad y la información de clave principal está presente en el <xref:System.Data.DataSet>, el <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> se generará automáticamente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea la clase derivada <xref:System.Data.OleDb.OleDbDataAdapter> y se establecen algunas de sus propiedades.  
  
 [!code-csharp[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/retrieving-and-modifying-data.md">Manipular datos (ADO.NET)</related>
        <related type="Article" href="http://msdn.microsoft.com/library/2a8e2640-3a49-42a1-a3a9-b43026907ae1">Objetos DbProviderFactory (ADO.NET)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ado-net-overview.md">Información general sobre ADO.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>