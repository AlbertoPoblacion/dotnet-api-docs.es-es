<Type Name="WebServiceHost" FullName="System.ServiceModel.Web.WebServiceHost">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="935e6487c5f10f2176cd18ef5933e974be8d8e51" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32690270" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebServiceHost : System.ServiceModel.ServiceHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebServiceHost extends System.ServiceModel.ServiceHost" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Web.WebServiceHost" />
  <TypeSignature Language="VB.NET" Value="Public Class WebServiceHost&#xA;Inherits ServiceHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebServiceHost : System::ServiceModel::ServiceHost" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.ServiceHost</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Clase derivada de <see cref="T:System.ServiceModel.ServiceHost" /> que complementa el modelo de programación de REST de Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.ServiceModel.Web.WebServiceHost> no encuentra extremos en la descripción del servicio, crea automáticamente un extremo predeterminado en la dirección base del servicio para direcciones base HTTP y HTTPS. No crea automáticamente un extremo si el usuario ha configurado explícitamente un extremo en la dirección base. <xref:System.ServiceModel.Web.WebServiceHost> configura automáticamente el enlace del extremo para que funcione con la configuración de seguridad de Internet Information Services (IIS) cuando se utilice en un directorio virtual seguro.  
  
 Al crear un extremo HTTP predeterminado, el <xref:System.ServiceModel.Web.WebServiceHost> también deshabilita la página de ayuda de HTTP y la funcionalidad GET del lenguaje de descripción de servicios Web (WSDL) para que el extremo de metadatos no interfiera con el extremo HTTP predeterminado.  
  
 Además, la clase <xref:System.ServiceModel.Web.WebServiceHost> agrega el <xref:System.ServiceModel.Description.WebHttpBehavior> a todos los extremos que aún no tienen el comportamiento y que tienen un <xref:System.ServiceModel.Configuration.WebMessageEncodingElement>. Si todas las operaciones del servicio tienen cuerpos de solicitud HTTP vacíos o tratan con el cuerpo de solicitud HTTP como una secuencia, <xref:System.ServiceModel.Web.WebServiceHost> configura automáticamente el asignador del tipo de contenido adecuado para el enlace.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar la <xref:System.ServiceModel.Web.WebServiceHost> clase para hospedar un servicio que utiliza el modelo de programación de REST de WCF.  
  
 [!code-csharp[WebServiceHost#0](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/program.cs#0)]
 [!code-vb[WebServiceHost#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/program.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.Web.WebServiceHost" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.Web.WebServiceHost" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost (object singletonInstance, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object singletonInstance, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (singletonInstance As Object, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost(System::Object ^ singletonInstance, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="singletonInstance" Type="System.Object" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="singletonInstance">Una instancia del servicio que se va a utilizar como la instancia de singleton.</param>
        <param name="baseAddresses">La dirección base del servicio.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.Web.WebServiceHost" /> con la instancia del servidor singleton y la dirección base especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El parámetro `baseAddresses` puede estar compuesto de una o más direcciones base.  
  
   
  
## Examples  
 El siguiente ejemplo muestra cómo llamar a este constructor.  
  
 [!code-csharp[WebServiceHost#1](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/snippets.cs#1)]
 [!code-vb[WebServiceHost#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/snippets.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHost (Type serviceType, params Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type serviceType, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceType As Type, ParamArray baseAddresses As Uri())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebServiceHost(Type ^ serviceType, ... cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.Uri[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceType">El tipo de servicio.</param>
        <param name="baseAddresses">La dirección base del servicio.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.ServiceModel.Web.WebServiceHost" /> con el tipo de servicio y dirección base especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El parámetro `baseAddresses` puede estar compuesto de una o más direcciones base.  
  
   
  
## Examples  
 El siguiente ejemplo muestra cómo llamar a este constructor.  
  
 [!code-csharp[WebServiceHost#2](~/samples/snippets/csharp/VS_Snippets_CFX/webservicehost/cs/snippets.cs#2)]
 [!code-vb[WebServiceHost#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/webservicehost/vb/snippets.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOpening">
      <MemberSignature Language="C#" Value="protected override void OnOpening ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnOpening() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Web.WebServiceHost.OnOpening" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnOpening ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnOpening();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se llama cuando la instancia <see cref="T:System.ServiceModel.Web.WebServiceHost" /> se abre.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se llama al método, ocurre lo siguiente:  
  
1.  Si <xref:System.ServiceModel.Web.WebServiceHost> no encuentra ningún extremo en la descripción del servicio, crea un extremo predeterminado en la dirección base del servicio. <xref:System.ServiceModel.Web.WebServiceHost> deshabilita automáticamente la página de ayuda de HTTP y la funcionalidad GET del WSDL para que el extremo de metadatos no interfiera con el extremo HTTP predeterminado.  
  
2.  <xref:System.ServiceModel.Web.WebServiceHost> comprueba todos los extremos que utilizan el <xref:System.ServiceModel.WebHttpBinding> para ver si disponen del <xref:System.ServiceModel.Description.WebHttpBehavior>necesario. Si no está presente, <xref:System.ServiceModel.Web.WebServiceHost> agrega el <xref:System.ServiceModel.Description.WebHttpBehavior> para el extremo.  
  
3.  <xref:System.ServiceModel.Web.WebServiceHost> configura el enlace del extremo para que funcione con la configuración de seguridad de los IIS asociados cuando se utiliza en un directorio virtual seguro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>