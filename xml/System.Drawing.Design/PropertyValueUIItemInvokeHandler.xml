<Type Name="PropertyValueUIItemInvokeHandler" FullName="System.Drawing.Design.PropertyValueUIItemInvokeHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="896954d144cb81b939ae9a959a7bff7791d3924e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37658784" /></Metadata><TypeSignature Language="C#" Value="public delegate void PropertyValueUIItemInvokeHandler(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed PropertyValueUIItemInvokeHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Design.PropertyValueUIItemInvokeHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub PropertyValueUIItemInvokeHandler(context As ITypeDescriptorContext, descriptor As PropertyDescriptor, invokedItem As PropertyValueUIItem)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void PropertyValueUIItemInvokeHandler(ITypeDescriptorContext ^ context, PropertyDescriptor ^ descriptor, PropertyValueUIItem ^ invokedItem);" />
  <TypeSignature Language="F#" Value="type PropertyValueUIItemInvokeHandler = delegate of ITypeDescriptorContext * PropertyDescriptor * PropertyValueUIItem -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
    <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
    <Parameter Name="invokedItem" Type="System.Drawing.Design.PropertyValueUIItem" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" /> de la propiedad asociada al icono en el que se ha hecho doble clic.</param>
    <param name="descriptor">Propiedad asociada al icono en el que se ha hecho doble clic.</param>
    <param name="invokedItem"><see cref="T:System.Drawing.Design.PropertyValueUIItem" /> asociado al icono en el que se ha hecho doble clic.</param>
    <summary>Representa el método que controlará el evento <see cref="P:System.Drawing.Design.PropertyValueUIItem.InvokeHandler" /> de <see cref="T:System.Drawing.Design.PropertyValueUIItem" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Haga doble clic en un icono en la ventana Propiedades, se producirá la <xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A> eventos de la <xref:System.Drawing.Design.PropertyValueUIItem> que está asociado el icono. El <xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A> evento inicia normalmente una interfaz de usuario (UI) para editar el valor de propiedad. Agregar un <xref:System.Drawing.Design.PropertyValueUIItemInvokeHandler> a la <xref:System.Drawing.Design.PropertyValueUIItem.InvokeHandler%2A> propiedad de un <xref:System.Drawing.Design.PropertyValueUIItem> para asignar un controlador de eventos para realizar el comportamiento adecuado cuando se hace doble clic en el icono que aparece junto al nombre de propiedad.  
  
 Cuando se crea un delegado <xref:System.Drawing.Design.PropertyValueUIItemInvokeHandler>, se identifica el método que controlará el evento. Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento. Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado. Para obtener más información sobre los delegados de controlador de eventos, consulte [controlar y provocar eventos](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se proporciona un <xref:System.Drawing.Design.PropertyValueUIItem> objeto para las propiedades del componente denominado `HorizontalMargin` o `VerticalMargin`. El <xref:System.Drawing.Design.PropertyValueUIItem> para estas propiedades proporciona una imagen, una información sobre herramientas y un controlador de eventos que se muestra un cuadro de mensaje cuando se hace clic en la imagen para la propiedad. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.Drawing.Design.IPropertyValueUIService> interfaz.  
  
 [!code-cpp[IPropertyValueUIServiceExample#2](~/samples/snippets/cpp/VS_Snippets_Winforms/IPropertyValueUIServiceExample/CPP/propertyuicomponent.cpp#2)]
 [!code-csharp[IPropertyValueUIServiceExample#2](~/samples/snippets/csharp/VS_Snippets_Winforms/IPropertyValueUIServiceExample/CS/propertyuicomponent.cs#2)]
 [!code-vb[IPropertyValueUIServiceExample#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IPropertyValueUIServiceExample/VB/propertyuicomponent.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.ITypeDescriptorContext" />
    <altmember cref="T:System.Drawing.Design.PropertyValueUIItem" />
    <altmember cref="T:System.Drawing.Design.IPropertyValueUIService" />
  </Docs>
</Type>