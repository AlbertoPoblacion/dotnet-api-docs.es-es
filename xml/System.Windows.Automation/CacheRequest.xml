<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba79b367856f83c772f8c7971dde04e0ee956e6d" />
    <Meta Name="ms.sourcegitcommit" Value="f9e3295b6cc303a611a73a84c4b27f9da792ad0d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/26/2018" />
    <Meta Name="ms.locfileid" Value="31909951" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CacheRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheRequest sealed" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Especifica las propiedades y modelos que el marco de automatización de la interfaz de usuario almacena en caché cuando se obtiene un objeto <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Recuperar propiedades y patrones a través de [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] requiere llamadas entre procesos que pueden ralentizar el rendimiento. Almacenando en memoria caché los valores de propiedades y modelos en una operación por lotes, puede mejorar el rendimiento de la aplicación.  
  
 Crear una nueva solicitud de caché mediante una llamada al constructor de clase. La solicitud se rellena con las llamadas repetidas a la <xref:System.Windows.Automation.CacheRequest.Add%2A> método.  
  
 Solo una <xref:System.Windows.Automation.CacheRequest> pueden estar activas. Hay dos formas de activar una solicitud:  
  
-   Llamar a <xref:System.Windows.Automation.CacheRequest.Activate%2A> en la solicitud. Esto inserta la solicitud en la pila y la solicitud se extrae cuando se elimina el objeto. Para garantizar la eliminación incluso si se produce una excepción, use el valor devuelto de <xref:System.Windows.Automation.CacheRequest.Activate%2A> dentro de un `using` bloque (`Using` en Visual Basic).  
  
-   Coloca la solicitud en la pila interna mediante una llamada a <xref:System.Windows.Automation.CacheRequest.Push%2A>. Solo la solicitud superior de la pila está activa y debe ser el siguiente se quita de la pila por <xref:System.Windows.Automation.CacheRequest.Pop%2A>. Retirar la solicitud, desactiva.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] elementos obtenidos mientras la solicitud está activa habrá almacenado en memoria caché los valores para las propiedades y los patrones especificados.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar <xref:System.Windows.Automation.CacheRequest.Activate%2A> a propiedades y los patrones de la memoria caché.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 En el ejemplo siguiente se muestra cómo usar <xref:System.Windows.Automation.CacheRequest.Push%2A> y <xref:System.Windows.Automation.CacheRequest.Pop%2A> a propiedades y los patrones de la memoria caché.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheRequest();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Automation.CacheRequest> se crea, el <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identificador se agrega como una propiedad predeterminada en memoria caché.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece <see cref="T:System.Windows.Automation.CacheRequest" /> como especificación activa para los elementos devueltos cuando se solicita <see cref="T:System.Windows.Automation.AutomationElement" /> en el mismo subproceso.</summary>
        <returns>Objeto que puede utilizarse para eliminar <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Con este método es preferible al uso de <xref:System.Windows.Automation.CacheRequest.Push%2A> y <xref:System.Windows.Automation.CacheRequest.Pop%2A> como medio para activar el <xref:System.Windows.Automation.CacheRequest>. El objeto se inserta en la pila cuando <xref:System.Windows.Automation.CacheRequest.Activate%2A> se llama y, a continuación, extrae cuando se elimina. Para garantizar la eliminación, coloque el valor devuelto en un `using` bloque (`Using` en Visual Basic).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar <xref:System.Windows.Automation.CacheRequest.Activate%2A> a propiedades y los patrones de la memoria caché.  
  
 [!code-csharp[UIAClient_snip#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient_snip#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega un identificador de propiedad o modelo a <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Automation.CacheRequest> se crea el objeto, el <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identificador se agrega como una propiedad predeterminada en memoria caché.  
  
 Agregar un objeto que ya está en la solicitud de caché no tiene ningún efecto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (pattern As AutomationPattern)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationPattern ^ pattern);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">Identificador que especifica un modelo para almacenar en memoria caché.</param>
        <summary>Agrega el identificador de <see cref="T:System.Windows.Automation.AutomationPattern" /> especificado a <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Agregar un modelo que ya está en la solicitud de caché no tiene ningún efecto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo construir un <xref:System.Windows.Automation.CacheRequest> y agregar un modelo en la memoria caché.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.Windows.Automation.CacheRequest" /> está activo.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (property As AutomationProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::Automation::AutomationProperty ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">Identificador que especifica un valor de propiedad para almacenar en memoria caché.</param>
        <summary>Agrega el identificador de <see cref="T:System.Windows.Automation.AutomationProperty" /> especificado a <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Automation.CacheRequest> se crea, el <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> identificador se agrega como una propiedad predeterminada en memoria caché.  
  
 Agregar una propiedad que ya está en la solicitud de caché no tiene ningún efecto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo construir un <xref:System.Windows.Automation.CacheRequest> y agregar una propiedad que se va a almacenar en caché.  
  
 [!code-csharp[UIAClient_snip#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient_snip#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El objeto <see cref="T:System.Windows.Automation.CacheRequest" /> está activo.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutomationElementMode As AutomationElementMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::AutomationElementMode AutomationElementMode { System::Windows::Automation::AutomationElementMode get(); void set(System::Windows::Automation::AutomationElementMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica si los elementos devueltos deben contener referencias completas a la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] subyacente o sólo información almacenada en caché.</summary>
        <value>
          <see cref="F:System.Windows.Automation.AutomationElementMode.Full" /> si los elementos devueltos tienen una referencia completa a la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] subyacente; en caso contrario, <see cref="F:System.Windows.Automation.AutomationElementMode.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.AutomationElementMode.Full> es el valor predeterminado y especifica que los elementos devueltos contienen una referencia completa a subyacente [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. <xref:System.Windows.Automation.AutomationElementMode.None> Especifica que los elementos devueltos no tienen ninguna referencia a subyacente [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]y contienen solo información almacenada en caché.  
  
 Ciertas operaciones en los elementos, incluidos los <xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>, <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>, y <xref:System.Windows.Automation.AutomationElement.SetFocus%2A>, requieren una referencia completa; al intentar realizar estas operaciones en un elemento que no tiene ninguno da como resultado un <xref:System.InvalidOperationException>.  
  
 Con <xref:System.Windows.Automation.AutomationElementMode.None> puede ser más eficaz cuando sólo se necesitan propiedades, ya que evita la sobrecarga implicada en la configuración de referencias completas.  
  
   
  
## Examples  
 En el ejemplo siguiente, <xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A> se establece en <xref:System.Windows.Automation.AutomationElementMode.None>, con lo que solo propiedades almacenadas en caché y patrones están disponibles para el objeto recuperado.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::CacheRequest ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia de <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
        <returns>Copia modificable del objeto actual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Current As CacheRequest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Automation::CacheRequest ^ Current { System::Windows::Automation::CacheRequest ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Windows.Automation.CacheRequest" /> activo en el subproceso actual.</summary>
        <value>Objeto <see cref="T:System.Windows.Automation.CacheRequest" /> activo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Pop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Pop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita el objeto <see cref="T:System.Windows.Automation.CacheRequest" /> activo de la pila interna para el subproceso actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo la solicitud actualmente activa se puede quitar mediante el <xref:System.Windows.Automation.CacheRequest.Pop%2A> método. Intento de quitar una solicitud que es no la actual tiene como resultado una excepción.  
  
 A menos que se aniden las solicitudes de caché, es preferible utilizar <xref:System.Windows.Automation.CacheRequest.Activate%2A> para colocar la solicitud en la pila. La razón es que puede usar <xref:System.Windows.Automation.CacheRequest.Activate%2A> dentro de un `using` bloque (`Using` en Visual Basic), asegurándose de que la solicitud se extrae de la pila, incluso si se produce una excepción.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo desactivar un <xref:System.Windows.Automation.CacheRequest> utilizando <xref:System.Windows.Automation.CacheRequest.Pop%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Se realizó un intento de quitar una solicitud de caché que no era la última insertada en la pila.</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberSignature Language="VB.NET" Value="Public Sub Push ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Push();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Coloca <see cref="T:System.Windows.Automation.CacheRequest" /> en la pila de estado interna, que lo convierte en la solicitud activa en el subproceso actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Varios <xref:System.Windows.Automation.CacheRequest> objetos pueden colocarse en la pila de estado. Solicitudes de caché deben quitarse de la pila en el orden en que se insertaron; en caso contrario, un <xref:System.InvalidOperationException> se produce la excepción.  
  
 A menos que se aniden las solicitudes de caché, es preferible utilizar <xref:System.Windows.Automation.CacheRequest.Activate%2A> para colocar la solicitud en la pila. La razón es que puede usar <xref:System.Windows.Automation.CacheRequest.Activate%2A> dentro de un `using` bloque (`Using` en Visual Basic), asegurándose de que la solicitud se extrae de la pila, incluso si se produce una excepción.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo activar un <xref:System.Windows.Automation.CacheRequest> utilizando <xref:System.Windows.Automation.CacheRequest.Push%2A>.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeFilter As Condition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::Condition ^ TreeFilter { System::Windows::Automation::Condition ^ get(); void set(System::Windows::Automation::Condition ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica la vista del árbol de elementos de [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] que se utiliza para almacenar en memoria caché.</summary>
        <value>Vista del árbol de elementos de [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]. La vista predeterminada es <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre las vistas de la [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] árbol de elementos, vea [información general sobre el árbol de automatización de interfaz de usuario](~/docs/framework/ui-automation/ui-automation-tree-overview.md).  
  
   
  
## Examples  
 En el ejemplo siguiente, <xref:System.Windows.Automation.CacheRequest.TreeFilter%2A> está establecido en <xref:System.Windows.Automation.Automation.RawViewCondition> para que el almacenamiento en caché se realiza para todos los elementos, independientemente de si forman parte de la vista de contenido o la vista de control.  
  
 [!code-csharp[UIAClient_snip#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient_snip#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberSignature Language="VB.NET" Value="Public Property TreeScope As TreeScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::TreeScope TreeScope { System::Windows::Automation::TreeScope get(); void set(System::Windows::Automation::TreeScope value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que especifica si el almacenamiento en caché sólo se realiza para la raíz del subárbol o también para sus elementos secundarios o descendientes.</summary>
        <value>Uno o varios de los miembros siguientes: <see cref="F:System.Windows.Automation.TreeScope.Element" />, <see cref="F:System.Windows.Automation.TreeScope.Children" />, <see cref="F:System.Windows.Automation.TreeScope.Descendants" /> o <see cref="F:System.Windows.Automation.TreeScope.Subtree" />. El valor predeterminado es <see cref="F:System.Windows.Automation.TreeScope.Element" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El ámbito del almacenamiento en caché está en relación con el objeto u objetos que se capturan, no en relación con el objeto en el que <xref:System.Windows.Automation.AutomationElement.FindFirst%2A> o <xref:System.Windows.Automation.AutomationElement.FindAll%2A> se llama. Vea el ejemplo.  
  
   
  
## Examples  
 En el ejemplo siguiente, se obtiene un elemento de cuadro de lista desde el elemento de la ventana principal mientras un <xref:System.Windows.Automation.CacheRequest> está activo y <xref:System.Windows.Automation.CacheRequest.TreeScope%2A> es <xref:System.Windows.Automation.TreeScope.Children>. Las propiedades especificadas de los elementos secundarios (es decir, los elementos de lista) se almacenan en la memoria caché y se pueden recuperar desde el <xref:System.Windows.Automation.AutomationElement.CachedChildren%2A> del cuadro de lista.  
  
 [!code-csharp[UIAClient_snip#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient_snip#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Se ha intentado establecer la propiedad en <see cref="F:System.Windows.Automation.TreeScope.Parent" /> o <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>