<Type Name="InvokePattern" FullName="System.Windows.Automation.InvokePattern">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e6159d647660e3bb63f3227880e80fcd4efcfbc8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30615989" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class InvokePattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InvokePattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.InvokePattern" />
  <TypeSignature Language="VB.NET" Value="Public Class InvokePattern&#xA;Inherits BasePattern" />
  <TypeSignature Language="C++ CLI" Value="public ref class InvokePattern : System::Windows::Automation::BasePattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa los controles que inician o realizan una única acción inequívoca y que no mantienen el estado cuando se activan.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los controles admiten <xref:System.Windows.Automation.InvokePattern> si el mismo comportamiento no se expone mediante otro patrón de control. Por ejemplo, si la <xref:System.Windows.Automation.InvokePattern.Invoke%2A> método en un control realiza la misma acción que el <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> o <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> método, el control no admitirá <xref:System.Windows.Automation.InvokePattern>.  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] en su lugar, los elementos que representan controles como casillas y botones de radio, que mantienen un estado, admiten <xref:System.Windows.Automation.TogglePattern> o <xref:System.Windows.Automation.SelectionItemPattern>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.Provider.IInvokeProvider" />
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.InvokePattern.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Envía una solicitud para activar un control e iniciar su acción única e inequívoca.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las llamadas a <xref:System.Windows.Automation.InvokePattern.Invoke%2A> debe volver inmediatamente sin bloquearse. Sin embargo, este comportamiento es totalmente dependiente de la [!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)] implementación del proveedor. En escenarios donde una llamada a <xref:System.Windows.Automation.InvokePattern.Invoke%2A> hace que un problema de bloqueo (por ejemplo, un cuadro de diálogo modal) otro subproceso de aplicación auxiliar que deba llamar al método.  
  
   
  
## Examples  
 En el ejemplo siguiente una <xref:System.Windows.Automation.InvokePattern> se obtiene el patrón de control de un control y la <xref:System.Windows.Automation.InvokePattern.Invoke%2A> se llama al método.  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El elemento no admite el patrón de control <see cref="T:System.Windows.Automation.InvokePattern" />, o está oculto o bloqueado.</exception>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">El elemento no está habilitado. Se puede generar si un proveedor de UI Automation implementó su propio control de la propiedad <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationEvent InvokedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationEvent InvokedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.InvokedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InvokedEvent As AutomationEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationEvent ^ InvokedEvent;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el evento que se genera cuando se invoca o activa un control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este identificador se usa por aplicaciones cliente de automatización de interfaz de usuario. Proveedores de automatización de interfaz de usuario deben usar el campo equivalente en <xref:System.Windows.Automation.InvokePatternIdentifiers>.  
  
 El <xref:System.Windows.Automation.InvokePattern.InvokedEvent> identificador se pasa como un parámetro para <xref:System.Windows.Automation.Automation.AddAutomationEventHandler%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente, el controlador de eventos identifica el evento como un evento Invoked comparando el <xref:System.Windows.Automation.AutomationEventArgs.EventId%2A> en los argumentos de evento con el <xref:System.Windows.Automation.InvokePattern.InvokedEvent> campo identificador.  
  
 [!code-csharp[UIAClient_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#101)]
 [!code-vb[UIAClient_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.InvokePattern.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pattern As AutomationPattern " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Automation::AutomationPattern ^ Pattern;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica el patrón de control <see cref="T:System.Windows.Automation.InvokePattern" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este identificador se usa por aplicaciones cliente de automatización de interfaz de usuario. Proveedores de automatización de interfaz de usuario deben usar el campo equivalente en <xref:System.Windows.Automation.InvokePatternIdentifiers>.  
  
 El identificador del patrón se pasa a métodos como <xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A> para recuperar el patrón de control de interés de los especificados <xref:System.Windows.Automation.AutomationElement>.  
  
   
  
## Examples  
 En el ejemplo siguiente una <xref:System.Windows.Automation.InvokePattern> se obtiene el patrón de control de un control y la <xref:System.Windows.Automation.InvokePattern.Invoke%2A> se llama al método.  
  
 [!code-csharp[UIAInvokePattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAInvokePattern_snip/CSharp/UIAInvokePattern_snippets.cs#101)]
 [!code-vb[UIAInvokePattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAInvokePattern_snip/VisualBasic/UIAInvokePattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>