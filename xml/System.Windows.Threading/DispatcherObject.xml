<Type Name="DispatcherObject" FullName="System.Windows.Threading.DispatcherObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="262891732b8650e2cd00efa4df066604527f40f6" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53509139" /></Metadata><TypeSignature Language="C#" Value="public abstract class DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DispatcherObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherObject abstract" />
  <TypeSignature Language="F#" Value="type DispatcherObject = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un objeto asociado a <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sólo el subproceso que la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en pueden tener acceso a la <xref:System.Windows.Threading.DispatcherObject> directamente.  Para tener acceso a un <xref:System.Windows.Threading.DispatcherObject> desde un subproceso distinto del subproceso de la <xref:System.Windows.Threading.DispatcherObject> se creó, llame a <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> en el <xref:System.Windows.Threading.Dispatcher> el <xref:System.Windows.Threading.DispatcherObject> está asociado.  
  
 Las subclases de <xref:System.Windows.Threading.DispatcherObject> que necesita para aplicar el subproceso de seguridad puede hacerlo mediante una llamada a <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> en todos los métodos públicos.  Esto garantiza que el subproceso que realiza la llamada es el subproceso que la <xref:System.Windows.Threading.DispatcherObject> se creó.  
  
 Un <xref:System.Windows.Threading.DispatcherObject> no pueden crearse instancias por separado; es decir, se protegen todos los constructores.  
  
 Objetos que derivan de <xref:System.Windows.Threading.DispatcherObject> tienen afinidad de subprocesos.  
  
 Objetos que derivan de <xref:System.Windows.Freezable> quedan libres del subproceso cuando se inmovilizan.  Para más información, consulte [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md) (Información general sobre objetos Freezable).  
  
 ]]></format>
    </remarks>
    <threadsafe>Todos los miembros públicos <see langword="static" /> miembros de este tipo son seguros para subprocesos. No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.  
  
Este objeto puede tener acceso solo desde el subproceso donde se creó. Intenta acceder a él desde otros subprocesos se iniciará un <see cref="T:System.InvalidOperationException" />. <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> o <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> proporcionan compatibilidad para serializar el trabajo en el subproceso correcto.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DispatcherObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DispatcherObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcherObject.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina si el subproceso de la llamada tiene acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <returns><see langword="true" /> si el subproceso de la llamada tiene acceso a este objeto; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo el subproceso de la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en pueden tener acceso a la <xref:System.Windows.Threading.DispatcherObject>.  
  
 Cualquier subproceso puede comprobar para ver si tiene acceso a este <xref:System.Windows.Threading.DispatcherObject>.  
  
 La diferencia entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> es que <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> devuelve un valor booleano que especifica si el subproceso de llamada tiene acceso a este <xref:System.Windows.Threading.DispatcherObject> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> produce una excepción si el subproceso de llamada no tiene acceso a la Esto <xref:System.Windows.Threading.DispatcherObject>.  
  
 Llamar a este método es idéntico a llamar a <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> en asociado <xref:System.Windows.Threading.Dispatcher> objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> para determinar si un subproceso tiene acceso al subproceso que un <xref:System.Windows.Controls.Button> se creó.  El <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> método en el <xref:System.Windows.Controls.Button> se llama para comprobar el acceso al subproceso.  Si el subproceso de llamada tiene acceso, el <xref:System.Windows.Controls.Button> se actualiza mediante el acceso solo a los miembros de la <xref:System.Windows.Controls.Button>; en caso contrario, un delegado, que acepta un <xref:System.Windows.Controls.Button> como argumento, se registra en el <xref:System.Windows.Threading.Dispatcher> de la <xref:System.Windows.Controls.Button>.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> al que está asociado <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <value>El distribuidor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sólo el subproceso que la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en pueden tener acceso a la <xref:System.Windows.Threading.DispatcherObject> directamente.  Para tener acceso a un <xref:System.Windows.Threading.DispatcherObject> desde un subproceso distinto del subproceso de la <xref:System.Windows.Threading.DispatcherObject> se creó, llame a <xref:System.Windows.Threading.Dispatcher.Invoke%2A> y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> en el <xref:System.Windows.Threading.Dispatcher> el <xref:System.Windows.Threading.DispatcherObject> está asociado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcherObject.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exige que el subproceso de la llamada tenga acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo el subproceso de la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en pueden tener acceso a la <xref:System.Windows.Threading.DispatcherObject>.  
  
 Cualquier subproceso puede comprobar para ver si tiene acceso a este <xref:System.Windows.Threading.DispatcherObject>.  
  
 La diferencia entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> es que <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> devuelve un valor booleano que especifica si el subproceso de llamada tiene acceso a este <xref:System.Windows.Threading.DispatcherObject> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> produce una excepción si el subproceso de llamada no tiene acceso a la Esto <xref:System.Windows.Threading.DispatcherObject>.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> para determinar si un subproceso tiene acceso al subproceso que un <xref:System.Windows.Controls.Button> se creó.  Si el subproceso de llamada no tiene acceso, un <xref:System.InvalidOperationException> se produce.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El subproceso de la llamada no tiene acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>