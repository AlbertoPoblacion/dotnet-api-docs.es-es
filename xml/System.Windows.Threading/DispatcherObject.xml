<Type Name="DispatcherObject" FullName="System.Windows.Threading.DispatcherObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a940ab9e8bca976429db39edb2ab477f770dde6b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30668549" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DispatcherObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherObject abstract" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un objeto asociado a <see cref="T:System.Windows.Threading.Dispatcher" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sólo el subproceso que la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en puede tener acceso a la <xref:System.Windows.Threading.DispatcherObject> directamente.  Para tener acceso a un <xref:System.Windows.Threading.DispatcherObject> desde un subproceso distinto del subproceso de la <xref:System.Windows.Threading.DispatcherObject> se creó, llame a <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> en el <xref:System.Windows.Threading.Dispatcher> la <xref:System.Windows.Threading.DispatcherObject> está asociado.  
  
 Las subclases de <xref:System.Windows.Threading.DispatcherObject> que necesita para aplicar el subproceso de seguridad puede hacerlo mediante una llamada a <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> en todos los métodos públicos.  Esto garantiza que el subproceso que realiza la llamada es el subproceso que la <xref:System.Windows.Threading.DispatcherObject> se ha creado.  
  
 Un <xref:System.Windows.Threading.DispatcherObject> no pueden crearse instancias independientemente; es decir, se protegen todos los constructores.  
  
 Objetos que derivan de <xref:System.Windows.Threading.DispatcherObject> tienen afinidad de subprocesos.  
  
 Objetos que derivan de <xref:System.Windows.Freezable> quedan libres del subproceso cuando se inmovilizan.  Para más información, consulte [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md) (Información general sobre objetos Freezable).  
  
 ]]></format>
    </remarks>
    <threadsafe>Cualquier público <see langword="static" /> miembros de este tipo son seguros para subprocesos. No se garantiza que los miembros de instancias sean seguros para la ejecución de subprocesos.  
  
 Puede obtener acceso a este objeto solo desde el subproceso en el que se creó. Intenta obtener acceso a él desde otros subprocesos se iniciará un <see cref="T:System.InvalidOperationException" />. <see cref="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> o <see cref="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" /> proporcionan compatibilidad con cálculo de referencias de trabajo para el subproceso correcto.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DispatcherObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DispatcherObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Determina si el subproceso de la llamada tiene acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <returns>
          <see langword="true" /> si el subproceso de la llamada tiene acceso a este objeto; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo el subproceso de la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en puede tener acceso a la <xref:System.Windows.Threading.DispatcherObject>.  
  
 Cualquier subproceso puede comprobar para ver si tiene acceso a este <xref:System.Windows.Threading.DispatcherObject>.  
  
 La diferencia entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> es que <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> devuelve un valor booleano que especifica si el subproceso que realiza la llamada tiene acceso a este <xref:System.Windows.Threading.DispatcherObject> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> produce una excepción si el subproceso que realiza la llamada no tiene acceso a esta <xref:System.Windows.Threading.DispatcherObject>.  
  
 Llamar a este método equivale a llamar a <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> en asociado <xref:System.Windows.Threading.Dispatcher> objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> para determinar si un subproceso tiene acceso al subproceso que un <xref:System.Windows.Controls.Button> se ha creado.  El <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> método en el <xref:System.Windows.Controls.Button> se llama para comprobar el acceso al subproceso.  Si el subproceso que realiza la llamada tiene acceso, la <xref:System.Windows.Controls.Button> se actualiza mediante el acceso solo a los miembros de la <xref:System.Windows.Controls.Button>; en caso contrario, un delegado, que acepta un <xref:System.Windows.Controls.Button> como argumento, se registra en el <xref:System.Windows.Threading.Dispatcher> de la <xref:System.Windows.Controls.Button>.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherObject.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> al que está asociado <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <value>El distribuidor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sólo el subproceso que la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en puede tener acceso a la <xref:System.Windows.Threading.DispatcherObject> directamente.  Para tener acceso a un <xref:System.Windows.Threading.DispatcherObject> desde un subproceso distinto del subproceso de la <xref:System.Windows.Threading.DispatcherObject> se creó, llame a <xref:System.Windows.Threading.Dispatcher.Invoke%2A> y <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> en el <xref:System.Windows.Threading.Dispatcher> la <xref:System.Windows.Threading.DispatcherObject> está asociado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherObject.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Exige que el subproceso de la llamada tenga acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Solo el subproceso de la <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A> se creó en puede tener acceso a la <xref:System.Windows.Threading.DispatcherObject>.  
  
 Cualquier subproceso puede comprobar para ver si tiene acceso a este <xref:System.Windows.Threading.DispatcherObject>.  
  
 La diferencia entre <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> es que <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> devuelve un valor booleano que especifica si el subproceso que realiza la llamada tiene acceso a este <xref:System.Windows.Threading.DispatcherObject> y <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> produce una excepción si el subproceso que realiza la llamada no tiene acceso a esta <xref:System.Windows.Threading.DispatcherObject>.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> para determinar si un subproceso tiene acceso al subproceso que un <xref:System.Windows.Controls.Button> se ha creado.  Si el subproceso que realiza la llamada no tiene acceso, un <xref:System.InvalidOperationException> se produce.  
  
 [!code-csharp[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherObjectAccessSample/CSharp/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]
 [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherObjectAccessSample/visualbasic/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">El subproceso de la llamada no tiene acceso a <see cref="T:System.Windows.Threading.DispatcherObject" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>