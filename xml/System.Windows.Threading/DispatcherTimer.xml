<Type Name="DispatcherTimer" FullName="System.Windows.Threading.DispatcherTimer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a9d009098a7d8eaa53affce0dc2ed5c47170486" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36463694" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DispatcherTimer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatcherTimer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.DispatcherTimer" />
  <TypeSignature Language="VB.NET" Value="Public Class DispatcherTimer" />
  <TypeSignature Language="C++ CLI" Value="public ref class DispatcherTimer" />
  <TypeSignature Language="F#" Value="type DispatcherTimer = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Temporizador integrado en la cola de <see cref="T:System.Windows.Threading.Dispatcher" /> que se procesa en un intervalo de tiempo especificado con una prioridad especificada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Threading.DispatcherTimer> se vuelve a evaluar en la parte superior de cada <xref:System.Windows.Threading.Dispatcher> bucle.  
  
 No se garantiza que los temporizadores ejecutar exactamente cuándo se produce el intervalo de tiempo, pero se garantiza que no se ejecuten antes de que se produce el intervalo de tiempo.  Esto es porque <xref:System.Windows.Threading.DispatcherTimer> operaciones se colocan en la <xref:System.Windows.Threading.Dispatcher> cola como otras operaciones.  Cuando el <xref:System.Windows.Threading.DispatcherTimer> operación se ejecuta depende de los otros trabajos en la cola y sus prioridades.  
  
 Si un <xref:System.Timers.Timer?displayProperty=nameWithType> se utiliza en una [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] aplicación, merece la pena mencionar que los <xref:System.Timers.Timer?displayProperty=nameWithType> se ejecuta en un subproceso diferente la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] subproceso.  Para tener acceso a objetos en el [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] subprocesos, es necesario exponer la operación en el <xref:System.Windows.Threading.Dispatcher> de la [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] subprocesos mediante <xref:System.Windows.Threading.Dispatcher.Invoke%2A> o <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>. Motivos para utilizar un <xref:System.Windows.Threading.DispatcherTimer> frente a un <xref:System.Timers.Timer?displayProperty=nameWithType> son que el <xref:System.Windows.Threading.DispatcherTimer> se ejecuta en el mismo subproceso que el <xref:System.Windows.Threading.Dispatcher> y un <xref:System.Windows.Threading.DispatcherPriority> puede establecerse en el <xref:System.Windows.Threading.DispatcherTimer>.  
  
 Un <xref:System.Windows.Threading.DispatcherTimer> mantendrá un objeto activo cada vez que los métodos del objeto se enlazan al temporizador.  
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Threading.DispatcherTimer> que actualiza el contenido de un <xref:System.Windows.Controls.Label> y llama a la <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> método en el <xref:System.Windows.Input.CommandManager>.  
  
 A <xref:System.Windows.Threading.DispatcherTimer> objeto denominado `dispatcherTimer` se crea.  El controlador de eventos `dispatcherTimer_Tick` se agrega a la <xref:System.Windows.Threading.DispatcherTimer.Tick> eventos de `dispatcherTimer`.  El <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> está establecido en 1 segundo mediante una <xref:System.Windows.Duration.TimeSpan%2A> objeto y el temporizador se inició.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 El <xref:System.Windows.Threading.DispatcherTimer.Tick> actualizaciones del controlador de eventos un <xref:System.Windows.Controls.Label> que muestra actual en segundo lugar, y llama <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> en el <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> se ejecuta en el <xref:System.Windows.Threading.Dispatcher> del subproceso actual en <xref:System.Windows.Threading.DispatcherPriority.Background> prioridad.  Para especificar otro <xref:System.Windows.Threading.Dispatcher>, use el constructor siguiente: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer priority" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority">Prioridad con la que se invoca el temporizador.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" /> que procesa los eventos del temporizador con la prioridad especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer> se ejecuta en el <xref:System.Windows.Threading.Dispatcher> del subproceso actual.  Para especificar otro <xref:System.Windows.Threading.Dispatcher>, use el constructor siguiente: <xref:System.Windows.Threading.DispatcherTimer.%23ctor%28System.Windows.Threading.DispatcherPriority%2CSystem.Windows.Threading.Dispatcher%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (System.Windows.Threading.DispatcherPriority priority, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(System::Windows::Threading::DispatcherPriority priority, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : System.Windows.Threading.DispatcherPriority * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (priority, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="priority">Prioridad con la que se invoca el temporizador.</param>
        <param name="dispatcher">Distribuidor al que está asociado el temporizador.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" /> que se ejecuta en el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> especificado con la prioridad especificada.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dispatcher" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DispatcherTimer (TimeSpan interval, System.Windows.Threading.DispatcherPriority priority, EventHandler callback, System.Windows.Threading.Dispatcher dispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan interval, valuetype System.Windows.Threading.DispatcherPriority priority, class System.EventHandler callback, class System.Windows.Threading.Dispatcher dispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DispatcherTimer(TimeSpan interval, System::Windows::Threading::DispatcherPriority priority, EventHandler ^ callback, System::Windows::Threading::Dispatcher ^ dispatcher);" />
      <MemberSignature Language="F#" Value="new System.Windows.Threading.DispatcherTimer : TimeSpan * System.Windows.Threading.DispatcherPriority * EventHandler * System.Windows.Threading.Dispatcher -&gt; System.Windows.Threading.DispatcherTimer" Usage="new System.Windows.Threading.DispatcherTimer (interval, priority, callback, dispatcher)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="interval" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="callback" Type="System.EventHandler" />
        <Parameter Name="dispatcher" Type="System.Windows.Threading.Dispatcher" />
      </Parameters>
      <Docs>
        <param name="interval">Período de tiempo entre los pasos.</param>
        <param name="priority">Prioridad con la que se invoca el temporizador.</param>
        <param name="callback">Controlador de eventos al que se llama cuando se produce el evento <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" />.</param>
        <param name="dispatcher">Distribuidor al que está asociado el temporizador.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Threading.DispatcherTimer" /> que usa el intervalo de tiempo, prioridad, controlador de eventos y <see cref="T:System.Windows.Threading.Dispatcher" /> especificados.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="interval" /> es menor que 0 o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::Dispatcher ^ Dispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.DispatcherTimer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Windows.Threading.Dispatcher" /> asociado a <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <value>El distribuidor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Threading.DispatcherTimer.Dispatcher%2A> propiedad se determina en la creación de la <xref:System.Windows.Threading.DispatcherTimer> objeto.  El <xref:System.Windows.Threading.Dispatcher> propiedad está establecida en actual <xref:System.Windows.Threading.Dispatcher> en el momento de creación a menos que otro <xref:System.Windows.Threading.Dispatcher> se especifica.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public TimeSpan Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Interval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : TimeSpan with get, set" Usage="System.Windows.Threading.DispatcherTimer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el período de tiempo entre los pasos del temporizador.</summary>
        <value>Período de tiempo entre los pasos. El valor predeterminado es 00:00:00.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se garantiza que los temporizadores ejecutar exactamente cuándo se produce el intervalo de tiempo, pero se garantiza que no se ejecuten antes de que se produce el intervalo de tiempo.  Esto es porque <xref:System.Windows.Threading.DispatcherTimer> operaciones se colocan en la <xref:System.Windows.Threading.Dispatcher> cola como otras operaciones.  Cuando el <xref:System.Windows.Threading.DispatcherTimer> operación se ejecuta depende de los otros trabajos en la cola y sus prioridades.  
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Threading.DispatcherTimer>.  Un nuevo <xref:System.Windows.Threading.DispatcherTimer> objeto denominado `dispatcherTimer` se crea.  El controlador de eventos `dispatcherTimer_Tick` se agrega a la <xref:System.Windows.Threading.DispatcherTimer.Tick> eventos.  El <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> está establecido en 1 segundo mediante una <xref:System.TimeSpan> objeto.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="interval" /> es menor que 0 o mayor que <see cref="F:System.Int32.MaxValue" /> milisegundos.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Threading.DispatcherTimer.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el temporizador está en ejecución.</summary>
        <value>
          <see langword="true" /> si el temporizador está habilitado; en caso contrario, <see langword="false" />.  El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> debe establecerse en `true` para el <xref:System.Windows.Threading.DispatcherTimer.Tick> evento.  
  
 Al llamar a <xref:System.Windows.Threading.DispatcherTimer.Start%2A> establece <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `true`.  
  
 Al llamar a <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> establece <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `false`.  
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Threading.DispatcherTimer>.  Un nuevo <xref:System.Windows.Threading.DispatcherTimer> objeto denominado `dispatcherTimer` se crea.  El controlador de eventos `dispatcherTimer_Tick` se agrega a la <xref:System.Windows.Threading.DispatcherTimer.Tick> eventos.  El <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> está establecido en 1 segundo mediante una <xref:System.TimeSpan> objeto.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="dispatcherTimer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `false` cuando se inicia el temporizador detiene el temporizador.  
  
 Establecer <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `true` cuando se detiene el temporizador inicia el temporizador.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> establece <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `true`.  
  
 <xref:System.Windows.Threading.DispatcherTimer.Start%2A> Restablece el temporizador de <xref:System.Windows.Threading.DispatcherTimer.Interval%2A>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Threading.DispatcherTimer>.  Un nuevo <xref:System.Windows.Threading.DispatcherTimer> objeto denominado `dispatcherTimer` se crea.  El controlador de eventos `dispatcherTimer_Tick` se agrega a la <xref:System.Windows.Threading.DispatcherTimer.Tick> eventos.  El <xref:System.Windows.Threading.DispatcherTimer.Interval%2A> está establecido en 1 segundo mediante una <xref:System.Windows.Duration.TimeSpan%2A> objeto.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimerinit)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimerInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimerinit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.DispatcherTimer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="dispatcherTimer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detiene <see cref="T:System.Windows.Threading.DispatcherTimer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `false` cuando se inicia el temporizador detiene el temporizador.  
  
 Establecer <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `true` cuando se detiene el temporizador inicia el temporizador.  
  
 Al llamar a <xref:System.Windows.Threading.DispatcherTimer.Stop%2A> establece <xref:System.Windows.Threading.DispatcherTimer.IsEnabled%2A> a `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Threading.DispatcherTimer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un objeto de datos definido por el usuario.</summary>
        <value>Los datos definidos por el usuario.  El valor predeterminado es <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.DispatcherTimer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando ha transcurrido el intervalo del temporizador.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Windows.Threading.DispatcherTimer.Tick> controlador de eventos.  Las actualizaciones de controlador de eventos un <xref:System.Windows.Controls.Label> que muestra actual en segundo lugar, y llama <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> en el <xref:System.Windows.Input.CommandManager>.  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampledispatchertimer)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleDispatcherTimer](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampledispatchertimer)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>