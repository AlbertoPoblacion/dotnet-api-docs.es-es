<Type Name="DrawingAttributes" FullName="System.Windows.Ink.DrawingAttributes">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="083fe4763417420c7258b32aab8515e52b095a8c" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30650589" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DrawingAttributes : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawingAttributes extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Ink.DrawingAttributes" />
  <TypeSignature Language="VB.NET" Value="Public Class DrawingAttributes&#xA;Implements INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class DrawingAttributes : System::ComponentModel::INotifyPropertyChanged" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Especifica el aspecto de un elemento <see cref="T:System.Windows.Ink.Stroke" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A> propiedad para especificar la configuración como el color, ancho, transparencia y la forma de la punta del lápiz para una <xref:System.Windows.Ink.Stroke>.  
  
 Use la <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> propiedad para especificar los atributos de dibujo de los trazos agregados a un <xref:System.Windows.Controls.InkCanvas>. Sólo los trazos que se agregan después de la <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> someterse a cambio de mostrar los atributos actualizados. La apariencia de los trazos que ya están en el <xref:System.Windows.Controls.InkCanvas> no cambia.  
  
 Para obtener una lista con los valores de propiedad iniciales de una instancia de la clase <xref:System.Windows.Ink.DrawingAttributes>, vea el constructor <xref:System.Windows.Ink.DrawingAttributes>.  
  
<a name="xamlTextUsage_DrawingAttributes"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta clase no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar dos <xref:System.Windows.Ink.DrawingAttributes> objetos para simular el uso de un lápiz y un marcador de resaltado en la misma <xref:System.Windows.Controls.InkCanvas>. En el ejemplo se da por supuesto que el elemento raíz en el archivo XAML es un <xref:System.Windows.Controls.DockPanel> denominado `root`. También se supone que hay un <xref:System.Windows.Controls.Button> llama `switchHighlighter` y que la <xref:System.Windows.Controls.Primitives.ButtonBase.Click> evento está conectado al controlador de eventos definido en este ejemplo.  
  
 [!code-csharp[DrawingAttributes#3](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#3)]
 [!code-vb[DrawingAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawingAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DrawingAttributes();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la siguiente tabla se muestran los valores iniciales de las propiedades de una instancia de la clase <xref:System.Windows.Ink.DrawingAttributes>.  
  
|Propiedad.|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Windows.Ink.DrawingAttributes.Color%2A>|Negro|  
|<xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.Height%2A>|2 píxeles independientes del dispositivo (DIP)|  
|<xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>|<xref:System.Windows.Ink.StylusTip.Ellipse?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>|<xref:System.Windows.Media.Matrix.Identity%2A?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.Width%2A>|2 DIP|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPropertyData">
      <MemberSignature Language="C#" Value="public void AddPropertyData (Guid propertyDataId, object propertyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPropertyData(valuetype System.Guid propertyDataId, object propertyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddPropertyData (propertyDataId As Guid, propertyData As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddPropertyData(Guid propertyDataId, System::Object ^ propertyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
        <Parameter Name="propertyData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">
          <see cref="T:System.Guid" /> que se va a asociar a la propiedad personalizada.</param>
        <param name="propertyData">Valor de la propiedad personalizada. <c>propertyData</c> debe ser de tipo <see cref="T:System.Char" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> o una matriz de estos tipos de datos, aunque no puede ser una matriz de tipo <see cref="T:System.String" />.</param>
        <summary>Agrega una propiedad personalizada al objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Ink.DrawingAttributes.AddPropertyData%2A> método le permite agregar propiedades personalizadas a un <xref:System.Windows.Ink.DrawingAttributes> objeto. Esto es útil cuando representan sus propios trazos y desea proporcionar información adicional.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo agregar y recuperar una propiedad personalizada de la <xref:System.Windows.Ink.DrawingAttributes> objeto. En el ejemplo se agrega una propiedad que indica si la <xref:System.Windows.Ink.DrawingAttributes> objeto es un lápiz o un marcador de resaltado. El código en el `ChangeColors_Click` controlador de eventos representa un nuevo color para los trazos en el <xref:System.Windows.Controls.InkCanvas> que utilizan el <xref:System.Windows.Ink.DrawingAttributes> objeto, `inkDA`. En este ejemplo se supone que hay un <xref:System.Windows.Controls.InkCanvas> denominado `inkCanvas1`, y que hay dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA`, y `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyData" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" /> es un <see cref="T:System.Guid" /> vacío.  
  
 O bien  
  
 <paramref name="propertyData" /> no es ninguno de los tipos de datos permitidos que se muestran en la sección <see langword="Parameters" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AttributeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event AttributeChanged As PropertyDataChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Ink::PropertyDataChangedEventHandler ^ AttributeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando cambia una propiedad en el objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo se controla el <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> eventos. En este ejemplo se supone que hay un <xref:System.Windows.Ink.DrawingAttributes> objeto denominado `inkDA` y que la <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> evento está conectado al controlador de eventos definido en este ejemplo.  
  
 [!code-csharp[DrawingAttributes#6](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#6)]
 [!code-vb[DrawingAttributes#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Ink.DrawingAttributes Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Ink.DrawingAttributes Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DrawingAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Ink::DrawingAttributes ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.DrawingAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Copia el objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
        <returns>Copia del objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Ink.DrawingAttributes.Clone%2A> método crea un nuevo <xref:System.Windows.Ink.DrawingAttributes> objeto y lo rellena con los mismos valores que el objeto actual. También se copian todas las propiedades personalizadas.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo copiar un <xref:System.Windows.Ink.DrawingAttributes> objeto.  
  
 [!code-csharp[DrawingAttributes#8](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#8)]
 [!code-vb[DrawingAttributes#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Color Color { System::Windows::Media::Color get(); void set(System::Windows::Media::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de un objeto <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Color de un objeto <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_Color"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Windows.Ink.DrawingAttributes.Color%2A> propiedad. En el ejemplo se supone que la aplicación tiene un <xref:System.Windows.Controls.InkCanvas> llama `inkCanvas1`y dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA` y `highlighterDA`. Para obtener un ejemplo completo, vea el <xref:System.Windows.Ink.DrawingAttributes> general sobre la clase.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsPropertyData">
      <MemberSignature Language="C#" Value="public bool ContainsPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsPropertyData (propertyDataId As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsPropertyData(Guid propertyDataId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">
          <see cref="T:System.Guid" /> que se va a buscar en el objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />.</param>
        <summary>Devuelve un valor que indica si el identificador de datos de propiedad especificado está definido en el objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
        <returns>
          Es <see langword="true" /> si el identificador de datos de propiedad especificado está en el objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo agregar y recuperar una propiedad personalizada de la <xref:System.Windows.Ink.DrawingAttributes> objeto. En el ejemplo se agrega una propiedad que indica si la <xref:System.Windows.Ink.DrawingAttributes> objeto es un lápiz o un marcador de resaltado. El `ChangeColors_Click` controlador de eventos cambia todos los trazos que se colocaron en el <xref:System.Windows.Controls.InkCanvas> con un <xref:System.Windows.Ink.DrawingAttributes> denominado `inkDA` en un nuevo color. En este ejemplo se supone que hay un <xref:System.Windows.Controls.InkCanvas> denominado `inkCanvas1`, y que hay dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA`, y `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">Objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> que se va a comparar con el objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> actual.</param>
        <summary>Determina si el objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> especificado es igual al objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> actual.</summary>
        <returns>
          <see langword="true" /> si los objetos son iguales; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dos <xref:System.Windows.Ink.DrawingAttributes> objetos son iguales si son iguales las siguientes propiedades:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
> [!NOTE]
>  El <xref:System.Windows.Ink.DrawingAttributes.Equals%2A> método no comprueba las propiedades personalizadas para la igualdad.  
  
   
  
## Examples  
 En el ejemplo siguiente se comparan dos <xref:System.Windows.Ink.DrawingAttributes> objetos de igualdad. Dado que la <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, y <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedades `attributes1` y `attributes2` se establecen en los mismos valores, aparece el mensaje "DrawingAttributes son iguales".  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#12](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#12)]
[!code-vb[DrawingAttributes#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FitToCurve">
      <MemberSignature Language="C#" Value="public bool FitToCurve { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FitToCurve" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.FitToCurve" />
      <MemberSignature Language="VB.NET" Value="Public Property FitToCurve As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FitToCurve { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si se utiliza el suavizado Bézier para representar el objeto <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>
          Es <see langword="true" /> si se va a utilizar el suavizado Bézier para representar el objeto <see cref="T:System.Windows.Ink.Stroke" />; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_FitToCurve"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A> propiedad. En el ejemplo se supone que la aplicación tiene un <xref:System.Windows.Controls.InkCanvas> llama `inkCanvas1`y dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA` y `highlighterDA`. Para obtener un ejemplo completo, vea el <xref:System.Windows.Ink.DrawingAttributes> general sobre la clase.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actúa como función hash para un tipo concreto.</summary>
        <returns>Código hash para el objeto <see cref="T:System.Object" /> actual.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyData">
      <MemberSignature Language="C#" Value="public object GetPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyData (propertyDataId As Guid) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetPropertyData(Guid propertyDataId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">
          <see cref="T:System.Guid" /> asociado a la propiedad personalizada que se va a obtener.</param>
        <summary>Obtiene el valor de la propiedad personalizada asociada al <see cref="T:System.Guid" /> especificado.</summary>
        <returns>Valor de la propiedad personalizada asociada al <see cref="T:System.Guid" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A> método para tener acceso a propiedades personalizadas agregadas a un <xref:System.Windows.Ink.DrawingAttributes> objeto. <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A> Devuelve el valor predeterminado de la propiedad integrada si no se ha establecido un valor.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo agregar y recuperar una propiedad personalizada de la <xref:System.Windows.Ink.DrawingAttributes> objeto. En el ejemplo se agrega una propiedad que indica si la <xref:System.Windows.Ink.DrawingAttributes> objeto es un lápiz o un marcador de resaltado. El código en el `ChangeColors_Click` controlador de eventos representa un nuevo color para los trazos en el <xref:System.Windows.Controls.InkCanvas> que utilizan el <xref:System.Windows.Ink.DrawingAttributes> objeto, `inkDA`. En este ejemplo se supone que hay un <xref:System.Windows.Controls.InkCanvas> denominado `inkCanvas1`, y que hay dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA`, y `highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          El parámetro <paramref name="propertyDataId" /> no está asociado a una propiedad personalizada del objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />.</exception>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyDataIds">
      <MemberSignature Language="C#" Value="public Guid[] GetPropertyDataIds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid[] GetPropertyDataIds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPropertyDataIds () As Guid()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Guid&gt; ^ GetPropertyDataIds();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve los GUID de todas las propiedades personalizadas asociadas a <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
        <returns>Matriz de tipo <see cref="T:System.Guid" /> que representa los identificadores de los datos de la propiedad.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los GUID para las propiedades integradas de la <xref:System.Windows.Ink.DrawingAttributes> clase están en la <xref:System.Windows.Ink.DrawingAttributeIds> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo obtener los identificadores de datos de la propiedad de la <xref:System.Windows.Ink.DrawingAttributes> objeto. En este ejemplo se da por supuesto que una <xref:System.Windows.Ink.DrawingAttributes> llama `inkDA` se ha declarado.  
  
 [!code-csharp[DrawingAttributes#7](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#7)]
 [!code-vb[DrawingAttributes#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el alto del lápiz óptico utilizado para dibujar el objeto <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Valor que indica el alto del lápiz óptico utilizado para dibujar el objeto <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes factores afectan el alto y ancho de un <xref:System.Windows.Ink.Stroke> cuando se representa, pero no el valor de la <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propiedad.  
  
-   La cantidad de presión aplicada al lápiz óptico cuando el <xref:System.Windows.Ink.Stroke> se dibuja.  
  
-   Valor de propiedad <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>.  
  
 Si establece la <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propiedad en 0 píxeles independientes del dispositivo (DIP), se cambia a 2 DIP.  
  
<a name="xamlTextUsage_Height"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propiedad. En el ejemplo se supone que la aplicación tiene un <xref:System.Windows.Controls.InkCanvas> llama `inkCanvas1`y dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA` y `highlighterDA`. Para obtener un ejemplo completo, vea el <xref:System.Windows.Ink.DrawingAttributes> general sobre la clase.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de la propiedad <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> es menor que <see cref="F:System.Double.Epsilon" /> o tiene el valor <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnorePressure">
      <MemberSignature Language="C#" Value="public bool IgnorePressure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePressure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IgnorePressure" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnorePressure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnorePressure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el grosor de un objeto <see cref="T:System.Windows.Ink.Stroke" /> representado cambia según la presión aplicada.</summary>
        <value>
          Es <see langword="true" /> para indicar que el grosor del trazo es uniforme; es <see langword="false" /> para indicar que el grosor de un objeto <see cref="T:System.Windows.Ink.Stroke" /> representado aumenta cuando aumenta la presión. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_IgnorePressure"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A> propiedad. En el ejemplo se supone que la aplicación tiene un <xref:System.Windows.Controls.InkCanvas> llama `inkCanvas1`y dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA` y `highlighterDA`. Para obtener un ejemplo completo, vea el <xref:System.Windows.Ink.DrawingAttributes> general sobre la clase.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighlighter">
      <MemberSignature Language="C#" Value="public bool IsHighlighter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHighlighter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IsHighlighter" />
      <MemberSignature Language="VB.NET" Value="Public Property IsHighlighter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHighlighter { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el objeto <see cref="T:System.Windows.Ink.Stroke" /> se parece a un marcador de resaltado.</summary>
        <value>
          Es <see langword="true" /> para representar el objeto <see cref="T:System.Windows.Ink.Stroke" /> como un marcador de resaltado; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> propiedad está establecida en `true`, el <xref:System.Windows.Ink.Stroke> es ligeramente transparente, lo que permite los trazos debajo que aparezcan.  
  
<a name="xamlTextUsage_IsHighlighter"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> propiedad. En el ejemplo se supone que la aplicación tiene un <xref:System.Windows.Controls.InkCanvas> llama `inkCanvas1`y dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA` y `highlighterDA`. Para obtener un ejemplo completo, vea el <xref:System.Windows.Ink.DrawingAttributes> general sobre la clase.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public static readonly double MaxHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeight As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MaxHeight;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el mayor valor permitido para la propiedad <see cref="P:System.Windows.Ink.DrawingAttributes.Height" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Ink.DrawingAttributes.MaxHeight> campo para comprobar si un valor está dentro de los límites permitidos para el <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propiedad. Haga esto cuando el valor procede de un origen desconocido, como los proporcionados por el usuario sin restricciones.  
  
   
  
## Examples  
 En el ejemplo siguiente se asegura la <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propiedad de la <xref:System.Windows.Ink.DrawingAttributes> se establece en un valor válido. En este ejemplo se supone que hay un <xref:System.Windows.Controls.InkCanvas> denominado `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public static readonly double MaxWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidth As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MaxWidth;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el mayor valor permitido para la propiedad <see cref="P:System.Windows.Ink.DrawingAttributes.Width" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Ink.DrawingAttributes.MaxWidth> campo para comprobar si un valor está dentro de los límites permitidos para el <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedad. Haga esto cuando el valor procede de un origen desconocido, como los proporcionados por el usuario sin restricciones.  
  
   
  
## Examples  
 En el ejemplo siguiente se asegura la <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedad de la <xref:System.Windows.Ink.DrawingAttributes> se establece en un valor válido. En este ejemplo se supone que hay un <xref:System.Windows.Controls.InkCanvas> denominado `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public static readonly double MinHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeight As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MinHeight;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el menor valor permitido para la propiedad <see cref="P:System.Windows.Ink.DrawingAttributes.Height" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Ink.DrawingAttributes.MinHeight> campo para comprobar si un valor está dentro de los límites permitidos para el <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propiedad. Haga esto cuando el valor procede de un origen desconocido, como los proporcionados por el usuario sin restricciones.  
  
   
  
## Examples  
 En el ejemplo siguiente se asegura la <xref:System.Windows.Ink.DrawingAttributes.Height%2A> propiedad de la <xref:System.Windows.Ink.DrawingAttributes> se establece en un valor válido. En este ejemplo se supone que hay un <xref:System.Windows.Controls.InkCanvas> denominado `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public static readonly double MinWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidth As Double " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly double MinWidth;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el menor valor permitido para la propiedad <see cref="P:System.Windows.Ink.DrawingAttributes.Width" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Ink.DrawingAttributes.MinWidth> campo para comprobar si un valor está dentro de los límites permitidos para el <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedad. Haga esto cuando el valor procede de un origen desconocido, como los proporcionados por el usuario sin restricciones.  
  
   
  
## Examples  
 En el ejemplo siguiente se asegura la <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedad de la <xref:System.Windows.Ink.DrawingAttributes> se establece en un valor válido. En este ejemplo se supone que hay un <xref:System.Windows.Controls.InkCanvas> denominado `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAttributeChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAttributeChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAttributeChanged (e As PropertyDataChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAttributeChanged(System::Windows::Ink::PropertyDataChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado.  
  
 El método <xref:System.Windows.Ink.DrawingAttributes.OnAttributeChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento en una clase derivada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> en una clase derivada, llame a la <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> método de la clase base para asegurarse de que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::ComponentModel::PropertyChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">EventArgs</param>
        <summary>Se produce cuando cambia alguna propiedad de <see cref="T:System.Windows.Ink.DrawingAttributes" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyDataChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyDataChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyDataChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyDataChanged (e As PropertyDataChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyDataChanged(System::Windows::Ink::PropertyDataChangedEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Objeto <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" /> que contiene los datos del evento.</param>
        <summary>Genera el evento <see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se genera un evento, se invoca el controlador de eventos a través de un delegado.  
  
 El método <xref:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged%2A> también permite que las clases derivadas controlen el evento sin adjuntar ningún delegado. Ésta es la técnica preferida para controlar el evento.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Al reemplazar <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> en una clase derivada, llame a la <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> método de la clase base para asegurarse de que los delegados registrados reciban el evento.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (first As DrawingAttributes, second As DrawingAttributes) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Ink::DrawingAttributes ^ first, System::Windows::Ink::DrawingAttributes ^ second);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">Primer objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> que se va a comparar.</param>
        <param name="second">Segundo objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> que se va a comparar.</param>
        <summary>Determina si los objetos <see cref="T:System.Windows.Ink.DrawingAttributes" /> especificados son iguales.</summary>
        <returns>
          <see langword="true" /> si los objetos son iguales; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dos <xref:System.Windows.Ink.DrawingAttributes> objetos son iguales si son iguales las siguientes propiedades:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  El <xref:System.Windows.Ink.DrawingAttributes.op_Equality%2A> método no comprueba las propiedades personalizadas para la igualdad.  
  
 El método equivalente para este operador es <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>.  
  
## Examples  
 En el ejemplo siguiente se comparan dos <xref:System.Windows.Ink.DrawingAttributes> objetos de igualdad. Dado que la <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, y <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedades `attributes1` y `attributes2` se establecen en los mismos valores, aparece el mensaje "DrawingAttributes son iguales".  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#11](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#11)]
[!code-vb[DrawingAttributes#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (first As DrawingAttributes, second As DrawingAttributes) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Ink::DrawingAttributes ^ first, System::Windows::Ink::DrawingAttributes ^ second);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">Primer objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> que se va a comparar.</param>
        <param name="second">Segundo objeto <see cref="T:System.Windows.Ink.DrawingAttributes" /> que se va a comparar.</param>
        <summary>Determina si los objetos <see cref="T:System.Windows.Ink.DrawingAttributes" /> especificados no son iguales.</summary>
        <returns>
          Es <see langword="true" /> si los objetos no son iguales; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dos <xref:System.Windows.Ink.DrawingAttributes> objetos no son iguales si no son iguales las siguientes propiedades:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  El <xref:System.Windows.Ink.DrawingAttributes.op_Inequality%2A> método no comprueba las propiedades personalizadas para la igualdad.  
  
 El método equivalente para este operador es la negación de <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>.  
  
## Examples  
 En el ejemplo siguiente se comparan dos <xref:System.Windows.Ink.DrawingAttributes> objetos no son iguales. Dado que la <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, y <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedades `attributes1` y `attributes2` se establecen en los mismos valores, aparece el mensaje "DrawingAttributes son iguales".  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#13](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#13)]
[!code-vb[DrawingAttributes#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDataChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event PropertyDataChanged As PropertyDataChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Ink::PropertyDataChangedEventHandler ^ PropertyDataChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se agregan o se quitan datos de propiedad de la colección <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo es parte de un trazo personalizado que puede dibujar un efecto tridimensional. El trazo define y almacena una propiedad personalizada denominada `Shadowed`, que pertenece a <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A>. Cuando el `Shadowed` cambios de propiedades, el <xref:System.Windows.Ink.DrawingAttributes.PropertyDataChanged> llamadas del controlador de eventos el <xref:System.Windows.Ink.Stroke.OnInvalidated%2A> método, que hace que el trazo se vuelva a dibujar.  
  
 [!code-csharp[StrokeCollectionShadow#1](~/samples/snippets/csharp/VS_Snippets_Wpf/StrokeCollectionShadow/CSharp/CustomRenderedStroke.cs#1)]
 [!code-vb[StrokeCollectionShadow#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StrokeCollectionShadow/VisualBasic/CustomRenderedStroke.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyData">
      <MemberSignature Language="C#" Value="public void RemovePropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemovePropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemovePropertyData (propertyDataId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemovePropertyData(Guid propertyDataId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">
          <see cref="T:System.Guid" /> asociado a la propiedad personalizada que se va a quitar.</param>
        <summary>Quita la propiedad personalizada asociada al <see cref="T:System.Guid" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo quitar una propiedad personalizada de una <xref:System.Windows.Ink.DrawingAttributes> objeto.  
  
 [!code-csharp[DrawingAttributes#9](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#9)]
 [!code-vb[DrawingAttributes#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          El parámetro <paramref name="propertyDataId" /> no está asociado a una propiedad personalizada del objeto <see cref="T:System.Windows.Ink.DrawingAttributes" />.</exception>
        <altmember cref="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="StylusTip">
      <MemberSignature Language="C#" Value="public System.Windows.Ink.StylusTip StylusTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Ink.StylusTip StylusTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTip" />
      <MemberSignature Language="VB.NET" Value="Public Property StylusTip As StylusTip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Ink::StylusTip StylusTip { System::Windows::Ink::StylusTip get(); void set(System::Windows::Ink::StylusTip value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.StylusTip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la forma del lápiz óptico utilizado para dibujar el objeto <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Uno de los valores de <see cref="T:System.Windows.Ink.StylusShape" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_StylusTip"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A> propiedad. En el ejemplo se supone que la aplicación tiene un <xref:System.Windows.Controls.InkCanvas> llama `inkCanvas1`y dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA` y `highlighterDA`. Para obtener un ejemplo completo, vea el <xref:System.Windows.Ink.DrawingAttributes> general sobre la clase.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusTipTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Matrix StylusTipTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix StylusTipTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property StylusTipTransform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Matrix StylusTipTransform { System::Windows::Media::Matrix get(); void set(System::Windows::Media::Matrix value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Windows.Media.Matrix" /> que especifica la transformación que se va a realizar en la punta del lápiz óptico.</summary>
        <value>
          <see cref="T:System.Windows.Media.Matrix" /> que especifica la transformación que se va a realizar en la punta del lápiz óptico.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> propiedad para girar, sesgar o escalar la punta del lápiz.  
  
<a name="xamlTextUsage_StylusTipTransform"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> propiedad. En el ejemplo se supone que la aplicación tiene un <xref:System.Windows.Controls.InkCanvas> llama `inkCanvas1`y dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA` y `highlighterDA`. Para obtener un ejemplo completo, vea el <xref:System.Windows.Ink.DrawingAttributes> general sobre la clase.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">La matriz establecida en <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> no es una matriz invertible.  
  
 O bien  
  
 El valor de la propiedad <see cref="P:System.Windows.Media.Matrix.OffsetX" /> u <see cref="P:System.Windows.Media.Matrix.OffsetY" /> de la matriz no es cero.</exception>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el ancho del lápiz óptico utilizado para dibujar el objeto <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Ancho del lápiz óptico utilizado para dibujar el objeto <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los siguientes factores afectan el alto y ancho de un <xref:System.Windows.Ink.Stroke> cuando se representa, pero no el valor de la <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedad.  
  
-   La cantidad de presión aplicada al lápiz óptico cuando el <xref:System.Windows.Ink.Stroke> se dibuja.  
  
-   Valor de propiedad <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>.  
  
 Si establece la <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedad en 0 píxeles independientes del dispositivo (DIP), se cambia a 2 DIP.  
  
<a name="xamlTextUsage_Width"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 Esta propiedad no se utiliza habitualmente en XAML.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo establecer el <xref:System.Windows.Ink.DrawingAttributes.Width%2A> propiedad. En el ejemplo se supone que la aplicación tiene un <xref:System.Windows.Controls.InkCanvas> llama `inkCanvas1`y dos <xref:System.Windows.Ink.DrawingAttributes> objetos denominados `inkDA` y `highlighterDA`. Para obtener un ejemplo completo, vea el <xref:System.Windows.Ink.DrawingAttributes> general sobre la clase.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de la propiedad <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> es menor que <see cref="F:System.Double.Epsilon" /> o tiene el valor <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>