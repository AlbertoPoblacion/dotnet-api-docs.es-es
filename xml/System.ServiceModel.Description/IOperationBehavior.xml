<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="57774ae3684699c4a3fad8b5816601ef11c2fdcc" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37617222" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementa métodos que pueden utilizarse para extender el comportamiento de tiempo de ejecución de una operación en un servicio o aplicación cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente la interfaz <xref:System.ServiceModel.Description.IOperationBehavior> para modificar, examinar o extender algún aspecto de la ejecución de toda la operación en el nivel de la aplicación en aplicaciones cliente o de servicios.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> para pasar datos personalizados en tiempo de ejecución y permitir a los enlaces admitir el comportamiento personalizado.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> para modificar, examinar o insertar las extensiones a un distribuidor del cliente en una aplicación cliente.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> para modificar, examinar o insertar extensiones a la ejecución de toda la operación en una aplicación de servicios.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> para confirmar que <xref:System.ServiceModel.Description.OperationDescription> cumple los requisitos concretos. Este método puede utilizarse para asegurar que una operación tiene un cierto valor de configuración habilitado, admite una característica determinada, así como otros requisitos.  
  
 Los objetos <xref:System.ServiceModel.Description.IOperationBehavior> pueden utilizar cualquiera de estos métodos, pero a menudo sólo uno es importante; en ese caso, los métodos no usados pueden ser devueltos sin realizar ninguna acción.  
  
> [!NOTE]
>  Todos los métodos <xref:System.ServiceModel.Description.IOperationBehavior> pasan un objeto <xref:System.ServiceModel.Description.OperationDescription> a modo de parámetro. Este parámetro se utiliza sólo para realizar un examen; si modifica el objeto <xref:System.ServiceModel.Description.OperationDescription> el comportamiento de ejecución no estará definido.  
  
 Normalmente, los objetos <xref:System.ServiceModel.Description.IOperationBehavior> se utilizan para acceder a las distintas propiedades del objeto <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> en un aplicación de servicio, y el objeto <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> en una aplicación cliente.  
  
 Generalmente, el programador revisa primero los puntos de extensibilidad para determinar qué opción de personalización se ajusta al escenario de la aplicación y, a continuación, implementa la personalización en el ámbito adecuado. Por ejemplo, los objetos <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> pueden insertar personalizaciones en todos los mensajes de un servicio completo, los objetos <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> pueden insertar personalización en todos los mensajes de un contrato específico, etc. Para obtener una descripción de las distintas propiedades y personalizaciones disponibles, consulte [Extending ServiceHost y la capa del modelo de servicio](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Una vez que una personalización elegida (y se implementa la interfaz de personalización si es necesario) y el <xref:System.ServiceModel.Description.IOperationBehavior> es el ámbito adecuado de personalización, debe insertarse la personalización en tiempo de ejecución de Windows Communication Foundation (WCF) implementando <xref:System.ServiceModel.Description.IOperationBehavior> y agregando el comportamiento de operación al tiempo de ejecución.  
  
 Existen dos maneras de agregar el <xref:System.ServiceModel.Description.IOperationBehavior> al tiempo de ejecución:  
  
-   Utilizando la programación para agregar el comportamiento personalizado de la operación a la propiedad <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> antes de la apertura del host del servicio (en una aplicación de servicio), o del generador del canal (en una aplicación cliente).  
  
-   Agregue el comportamiento mediante un atributo personalizado.  
  
 Para realizar la tarea de personalización del servicio prevista, debe agregarse el objeto <xref:System.ServiceModel.Description.IOperationBehavior> a la propiedad <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> antes de la construcción del tiempo de ejecución del servicio, lo que sucede cuando se llama al método <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Para realizar una tarea de personalización de cliente, debe agregarse el objeto <xref:System.ServiceModel.Description.IOperationBehavior> a la propiedad <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> antes de llamar al método <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> o el método <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.ChannelFactory%601>.  
  
 Aunque el comportamiento de la operación está diseñado para facilitar el acceso al tiempo de ejecución en el ámbito de una operación individual, es posible acceder al tiempo de ejecución en un ámbito mayor mediante el acceso al objeto en tiempo de ejecución primario.  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> que escribe en la consola cuando una operación invoca al inspector. Esta personalización sólo puede asociarse a <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> o <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> por lo que, normalmente, es insertada por un comportamiento de la operación.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 El ejemplo de código siguiente muestra cómo el comportamiento de la operación asocia el inspector de parámetro al tiempo de ejecución.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">La operación que se está examinando. Sólo se utiliza para el examen. Si se modifica la descripción de la operación, los resultados son indefinidos.</param>
        <param name="bindingParameters">La colección de objetos necesaria para que los elementos de enlace admitan el comportamiento.</param>
        <summary>Implemente para pasar los datos a los enlaces en tiempo de ejecución y admitir el comportamiento personalizado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> para proporcionar los objetos adicionales que necesitan los elementos de enlace para admitir el comportamiento de la operación. Si se agregan los parámetros de enlace aquí, el enlace puede localizar y procesar estos objetos cuando se crea el agente de escucha o el generador del canal. Normalmente, se implementa el método <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> para pasar información sobre la operación a un elemento de enlace personalizado de modo que pueda generar correctamente un canal compatible. No devuelve ningún valor si no se requiere ninguna modificación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">La operación que se está examinando. Sólo se utiliza para el examen. Si se modifica la descripción de la operación, los resultados son indefinidos.</param>
        <param name="clientOperation">Objeto en tiempo de ejecución que expone las propiedades de personalización de la operación descrita por <c>operationDescription</c>.</param>
        <summary>Implementa una modificación o extensión del cliente en esta operación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> para ver, modificar o agregar una extensión personalizada al tiempo de ejecución del cliente en todos los mensajes utilizados con una operación concreta. Para obtener información detallada acerca de las personalizaciones que puede realizar con un objeto de tiempo de ejecución del cliente, vea <xref:System.ServiceModel.Dispatcher.ClientRuntime> y <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Se recomienda que el método <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> inicie una excepción <xref:System.NotImplementedException> sólo si se utiliza el comportamiento en una aplicación de servicio.  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> que escribe en la consola cuando una operación invoca al inspector. Esta personalización sólo puede asociarse a <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> o <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> por lo que, normalmente, es insertada por un comportamiento de la operación.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 El ejemplo de código siguiente muestra cómo el comportamiento de la operación asocia el inspector de parámetro al tiempo de ejecución.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">La operación que se está examinando. Sólo se utiliza para el examen. Si se modifica la descripción de la operación, los resultados son indefinidos.</param>
        <param name="dispatchOperation">Objeto en tiempo de ejecución que expone las propiedades de personalización de la operación descrita por <c>operationDescription</c>.</param>
        <summary>Implementa una modificación o extensión del servicio en esta operación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> para ver, modificar o extender el servicio en tiempo de ejecución en todos los mensajes o para una operación concreta. Para obtener información detallada sobre qué personalizaciones pueden hacerse en una aplicación de servicio, vea <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> y <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Se recomienda que el método <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> inicie una excepción <xref:System.NotImplementedException> sólo si pretende utilizar el comportamiento en una aplicación cliente.  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra una implementación de <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> que escribe en la consola cuando una operación invoca al inspector. Esta personalización sólo puede asociarse a <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> o <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> por lo que, normalmente, es insertada por un comportamiento de la operación.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 El ejemplo de código siguiente muestra cómo el comportamiento de la operación asocia el inspector de parámetro al tiempo de ejecución.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">La operación que se está examinando. Sólo se utiliza para el examen. Si se modifica la descripción de la operación, los resultados son indefinidos.</param>
        <summary>Implemente para confirmar que la operación cumple algunos de los criterios previstos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> para examinar la estructura y confirmar cualquier conjunto de criterios. Para utilizar este método, no es necesario realizar ninguna personalización en <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> o <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A>. Si la operación pasa la validación, se devolverá; de lo contrario, inicia una excepción.  
  
 Por ejemplo, el método <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> puede utilizarse para asegurarse de que una operación está autorizada.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>