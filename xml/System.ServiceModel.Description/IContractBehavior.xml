<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="efba3a3172b2130a02d81ffb8b7fbb0551f1b216" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36417739" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementa métodos que pueden utilizarse para extender el comportamiento de tiempo de ejecución de un contrato en un servicio o aplicación cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente la interfaz <xref:System.ServiceModel.Description.IContractBehavior> para modificar, examinar o extender algún aspecto de ejecución de todo el contrato en el nivel de la aplicación. A diferencia de <xref:System.ServiceModel.Description.IServiceBehavior> y los objetos <xref:System.ServiceModel.Description.IEndpointBehavior>, los objetos <xref:System.ServiceModel.Description.IContractBehavior> no se pueden agregar al tiempo de ejecución utilizando un archivo de configuración de la aplicación; sólo pueden agregarse mediante programación o utilizando un atributo.  
  
 Para obtener más información acerca de cómo elegir entre servicio, extremo y comportamientos del contrato, vea [configuración y al ampliar el tiempo de ejecución con comportamientos](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
-   Utilice el método <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> para proporcionar los datos personalizados a los elementos de enlace y que admitan el comportamiento.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> para modificar, examinar o insertar extensiones en un contrato de una aplicación cliente.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> para modificar, examinar o insertar extensiones en un contrato de una aplicación de servicio.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> para asegurarse de que un contrato puede admitir una característica determinada.  
  
 Los objetos <xref:System.ServiceModel.Description.IContractBehavior> pueden utilizar cualquiera de estos métodos, pero a menudo sólo uno es importante; en ese caso, los métodos no usados pueden ser devueltos sin ningún valor.  
  
> [!NOTE]
>  Todos los métodos <xref:System.ServiceModel.Description.IContractBehavior> pasan <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> y <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> como parámetros. Estos parámetros se utilizan para realizar un examen; si modifica los objetos el comportamiento de la ejecución no estará definido.  
  
 Los tipos <xref:System.ServiceModel.Description.IContractBehavior> pueden utilizarse en el servicio, en el cliente, o en ambos. Para realizar una tarea de personalización en el servicio, debe agregarse el objeto <xref:System.ServiceModel.Description.IContractBehavior> a la propiedad <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> antes de la construcción del tiempo de ejecución del servicio, lo que sucede cuando se llama al método <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> en el objeto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Existen dos formas de lograr esto.  
  
 El primer método es agregar mediante programación el comportamiento del contrato personalizado a la propiedad <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> antes de llamar al método <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> en el objeto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Cuando se utiliza esta opción, el comportamiento se aplica a todos los mensajes que fluyen a través de ese contrato en cualquier punto de conexión.  
  
> [!NOTE]
>  El comportamiento se aplica a todos los contratos del mismo tipo. Por ejemplo, si agrega mediante programación el mismo tipo de contrato a más de un punto de conexión, el comportamiento modifica todos los puntos de conexión que hacen referencia al mismo objeto de contrato.  
  
 El segundo método es crear un atributo personalizado que implementa <xref:System.ServiceModel.Description.IContractBehavior> y lo aplica a:  
  
-   Una interfaz de contrato. En este caso, el comportamiento se aplica a todos los contratos de ese tipo en cualquier extremo.  
  
-   Una clase de servicio  En este caso, el comportamiento se aplica a todos los extremos sin tener en cuenta el contrato.  
  
-   Una clase de devolución de llamada.  En este caso, el comportamiento se aplica al extremo del cliente dúplex.  
  
 El comportamiento del segundo enfoque varía ligeramente si el atributo personalizado también implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>. En este caso, el comportamiento es el siguiente:  
  
-   Una interfaz de contrato. En este caso, el comportamiento se aplica a todos los contratos de ese tipo en cualquier punto de conexión y Windows Communication Foundation (WCF) se omite el valor de la <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> propiedad.  
  
-   Una clase de servicio  En este caso, el comportamiento se aplica solo a los extremos cuyo contrato es el valor de la propiedad <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType>.  
  
-   Una clase de devolución de llamada.  En este caso, el comportamiento se aplica al extremo del cliente dúplex y WCF omite el valor de la <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> propiedad.  
  
 Para realizar la tarea de personalización en el cliente para el que está prevista, debe agregarse el objeto <xref:System.ServiceModel.Description.IContractBehavior> a la propiedad <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> antes de la construcción del tiempo de ejecución del cliente, lo que sucede al llamar a <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>. Existen dos modos para hacer esto:  
  
-   Agregue mediante programación el comportamiento del contrato personalizado a la propiedad <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> antes de llamar a <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType>.  
  
-   Cree un atributo personalizado que también implemente <xref:System.ServiceModel.Description.IContractBehavior>.  
  
 Para obtener más información sobre agregar mediante programación <xref:System.ServiceModel.Description.IContractBehavior> tipos de aplicación de cliente o servicio, consulte [configuración y al ampliar el tiempo de ejecución con comportamientos](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 El ejemplo de código siguiente supone que una implementación <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personalizada, llamada `ObjectProviderBehavior`, que proporciona un comportamiento "singleton", siempre devuelve la misma instancia del servicio y no lo recicla.  
  
 Para insertar la personalización del proveedor de instancias, el ejemplo muestra cómo implementar un atributo personalizado (`SingletonBehaviorAttribute`) que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado. También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su utilización al contrato `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Descripción del contrato que se va a modificar.</param>
        <param name="endpoint">punto de conexión que se va a modificar.</param>
        <param name="bindingParameters">Objetos necesarios para que los elementos de enlace admitan el comportamiento.</param>
        <summary>Configura cualquier elemento de enlace para admitir el comportamiento del contrato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> para proporcionar los objetos adicionales que necesitan los elementos de enlace para admitir el comportamiento del contrato.  
  
 Se llama a este método una vez por cada punto de conexión que utiliza el contrato de servicio especificado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">La descripción del contrato para el que se diseñó la extensión.</param>
        <param name="endpoint">punto de conexión.</param>
        <param name="clientRuntime">El tiempo de ejecución del cliente.</param>
        <summary>Implementa una modificación o extensión del cliente en este contrato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> para ver, modificar o agregar extensiones personalizadas al tiempo de ejecución del cliente en todos los mensajes o en una operación concreta. Para obtener información detallada acerca de las personalizaciones que puede realizar con un objeto de tiempo de ejecución del cliente, vea <xref:System.ServiceModel.Dispatcher.ClientRuntime> y <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 El método <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> puede iniciar una excepción <xref:System.NotImplementedException> si el comportamiento sólo puede utilizarse en una aplicación de servicio.  
  
 Se llama a este método una vez por cada punto de conexión que utiliza el contrato de servicio especificado.  
  
 Tenga en cuenta que puede haber dos operaciones con el mismo nombre en la descripción (uno en cada dirección), por lo que si debe ejecutar una iteración en las operaciones con un contrato dúplex, tiene que asociar la dirección del mensaje entre el extremo <xref:System.ServiceModel.Dispatcher.ClientRuntime> y la devuelta por la propiedad <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A>.  
  
 Dado que otros comportamientos pueden haber agregado o quitado algunas operaciones del tiempo de ejecución, no hay garantía de que exista el mismo número de operaciones en la descripción como objetos <xref:System.ServiceModel.Dispatcher.ClientOperation> en la propiedad <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A>.  
  
   
  
## Examples  
 El ejemplo de código siguiente supone que una implementación <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personalizada, llamada `ObjectProviderBehavior`, que proporciona un comportamiento "singleton", siempre devuelve la misma instancia del servicio y no lo recicla.  
  
 Para insertar la personalización del proveedor de instancias, el ejemplo muestra cómo implementar un atributo personalizado (`SingletonBehaviorAttribute`) que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado. También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su utilización al contrato `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Descripción del contrato que se va a modificar.</param>
        <param name="endpoint">punto de conexión que expone el contrato.</param>
        <param name="dispatchRuntime">Tiempo de ejecución del envío que controla la ejecución del servicio.</param>
        <summary>Implementa una modificación o extensión del cliente en este contrato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> para ver, modificar o agregar las extensiones personalizadas al servicio en tiempo de ejecución en todos los mensajes de un contrato concreto, o de una operación específica de ese contrato. Para obtener información detallada acerca de las personalizaciones que pueden realizarse en una aplicación de servicio, vea <xref:System.ServiceModel.Dispatcher.DispatchRuntime> y <xref:System.ServiceModel.Dispatcher.DispatchOperation>.  
  
 El método <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> puede iniciar una excepción <xref:System.NotImplementedException> si el comportamiento sólo puede utilizarse en una aplicación cliente.  
  
 Se llama a este método una vez por cada punto de conexión que utiliza el contrato de servicio especificado.  
  
 Tenga en cuenta que puede haber dos operaciones con el mismo nombre en la descripción (uno en cada dirección), por lo que si debe ejecutar una iteración en las operaciones con un contrato dúplex, tiene que asociar la dirección del mensaje entre el extremo <xref:System.ServiceModel.Dispatcher.DispatchRuntime> y la devuelta por la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A>.  
  
 Asimismo, dado que otros comportamientos pueden haber agregado o quitado algunas operaciones del tiempo de ejecución, no hay garantía de que exista el mismo número de operaciones en la descripción como objetos <xref:System.ServiceModel.Dispatcher.DispatchOperation> en la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>.  
  
   
  
## Examples  
 El ejemplo de código siguiente supone que una implementación <xref:System.ServiceModel.Dispatcher.IInstanceProvider> personalizada, llamada `ObjectProviderBehavior`, que proporciona un comportamiento "singleton", siempre devuelve la misma instancia del servicio y no lo recicla.  
  
 Para insertar la personalización del proveedor de instancias, el ejemplo muestra cómo implementar un atributo personalizado (`SingletonBehaviorAttribute`) que implementa <xref:System.ServiceModel.Description.IContractBehavior> para insertar el proveedor de instancias del servicio personalizado. También implementa <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, que enlaza su utilización al contrato `ISampleService`.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Contrato que se va a validar.</param>
        <param name="endpoint">punto de conexión que se va a validar.</param>
        <summary>Implemente para confirmar que el contrato y punto de conexión pueden admitir el comportamiento del contrato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> para confirmar que la descripción del contrato es suficiente para admitir el comportamiento del contrato personalizado. Las implementaciones pueden inspeccionar la descripción e iniciar una excepción o no devolver ningún valor.  
  
 Se llama a este método una vez por cada punto de conexión que utiliza el contrato de servicio especificado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>