<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed946c9933074308b7cb870bd65f32f243d797f4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36417648" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementa métodos que se pueden utilizar para extender el comportamiento de tiempo de ejecución de un extremo en un servicio o aplicación cliente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente la interfaz <xref:System.ServiceModel.Description.IEndpointBehavior> para modificar, examinar o extender algún aspecto de la ejecución de todo el extremo en el nivel de la aplicación, en aplicaciones cliente o de servicio.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> para pasar datos personalizados en tiempo de ejecución y permitir a los enlaces admitir el comportamiento personalizado.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> para modificar, examinar o insertar extensiones en un extremo de una aplicación cliente.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> para modificar, examinar o insertar extensiones a la ejecución de todo el extremo de una aplicación de servicios.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> para confirmar que <xref:System.ServiceModel.Description.ServiceEndpoint> cumple los requisitos concretos. Este método puede utilizarse para garantizar que un punto de conexión tiene un cierto valor de configuración habilitado, admite una característica determinada, así como otros requisitos.  
  
 Los objetos <xref:System.ServiceModel.Description.IEndpointBehavior> pueden utilizar cualquiera de estos métodos, pero a menudo sólo uno es importante; en ese caso, los métodos no usados pueden ser devueltos sin realizar ninguna acción.  
  
> [!NOTE]
>  Todos los métodos <xref:System.ServiceModel.Description.IEndpointBehavior> pasan un objeto <xref:System.ServiceModel.Description.ServiceEndpoint> a modo de parámetro. Este parámetro se utiliza sólo para realizar un examen; si modifica el objeto <xref:System.ServiceModel.Description.ServiceEndpoint> el comportamiento de ejecución no estará definido.  
  
 Los objetos <xref:System.ServiceModel.Description.IEndpointBehavior> se utilizan normalmente para tener acceso a las distintas propiedades de <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>y los objetos <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> de una aplicación de servicio, y <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> y <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> de una aplicación cliente. Además, se puede acceder a las propiedades de clientes y servicios dúplex utilizando <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> y las propiedades <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>, respectivamente.  
  
 Para obtener una descripción de las distintas propiedades y personalizaciones disponibles, vea [ServiceHost extender y el nivel de modelo de servicio](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Una vez elegida una personalización tras (y si es necesario, implementada la interfaz de personalización) y la <xref:System.ServiceModel.Description.IEndpointBehavior> ha sido decidido es el ámbito adecuado de personalización, debe insertarse la personalización en la comunicación de Windows Tiempo de ejecución de Foundation (WCF) mediante la implementación de <xref:System.ServiceModel.Description.IEndpointBehavior> y agregando el comportamiento de punto de conexión para el tiempo de ejecución.  
  
 Existen dos maneras de agregar el comportamiento al tiempo de ejecución:  
  
-   Utilizando la programación para agregar el comportamiento personalizado del extremo a la propiedad <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> antes de la apertura del host del servicio (en una aplicación de servicio), o del generador del canal (en una aplicación cliente).  
  
-   Configure el comportamiento mediante un archivo de configuración de la aplicación. Para obtener más información, consulte [ &lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).  
  
 Para realizar la tarea de personalización del servicio prevista, debe agregarse el objeto <xref:System.ServiceModel.Description.IEndpointBehavior> a la propiedad <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> antes de la construcción del tiempo de ejecución del servicio, lo que sucede cuando se llama al método <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Para realizar una tarea de personalización de cliente, debe agregarse el objeto <xref:System.ServiceModel.Description.IEndpointBehavior> a la propiedad <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> antes de llamar al método <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> o el método <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> en <xref:System.ServiceModel.ChannelFactory%601>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra la implementación de un comportamiento del extremo que agrega un objeto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> en una aplicación de servicio. En este caso, la clase `EndpointBehaviorMessageInspector` implementa <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> para inspeccionar el mensaje entrante y saliente, la interfaz <xref:System.ServiceModel.Description.IEndpointBehavior> para insertar la clase de inspector en el sistema de inspección de todos los extremos a los que se aplica el comportamiento, y la extensión <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> para habilitar el comportamiento del inspector de mensaje mediante un archivo de configuración de la aplicación.  
  
 El primer paso es implementar el inspector de mensaje.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 En el ejemplo de código siguiente se muestra el uso del método <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> para agregar el inspector de mensaje a la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 El ejemplo de código siguiente muestra la implementación de <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> para habilitar el uso del comportamiento del inspector de mensaje desde un archivo de configuración.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Por último, el siguiente archivo de configuración muestra cómo utilizar el ejemplo anterior desde la configuración.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">punto de conexión que se va a modificar.</param>
        <param name="bindingParameters">Objetos necesarios para que los elementos de enlace admitan el comportamiento.</param>
        <summary>Implemente para pasar los datos a los enlaces en tiempo de ejecución y admitir el comportamiento personalizado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> para proporcionar los objetos adicionales que necesitan los elementos de enlace para admitir el comportamiento del extremo. Si se agregan los parámetros de enlace aquí, el enlace puede localizar estos objetos cuando se crea el agente de escucha o el generador del canal. Normalmente, se implementa el método <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> para pasar información sobre el extremo a un elemento de enlace personalizado, de modo que pueda generar correctamente un canal compatible. No devuelve ningún valor si no se requiere ninguna modificación.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">punto de conexión que se va a personalizar.</param>
        <param name="clientRuntime">Tiempo de ejecución del cliente que debe personalizarse.</param>
        <summary>Implementa una modificación o extensión del cliente en este punto de conexión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> para ver, modificar o agregar la extensión personalizada al tiempo de ejecución del cliente en todos los mensajes utilizados con un extremo, o para las operaciones concretas. Para obtener información detallada acerca de las personalizaciones que puede realizar con un objeto de tiempo de ejecución del cliente, vea <xref:System.ServiceModel.Dispatcher.ClientRuntime> y <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Se recomienda que el método <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> inicie una excepción <xref:System.NotImplementedException> sólo si se utiliza el comportamiento en una aplicación de servicio.  
  
 Dado que otros comportamientos pueden haber agregado o quitado algunas operaciones del tiempo de ejecución, no hay garantía de que exista el mismo número de operaciones en la descripción como objetos <xref:System.ServiceModel.Dispatcher.DispatchOperation> en la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">punto de conexión que expone el contrato.</param>
        <param name="endpointDispatcher">Distribuidor del punto de conexión que se va a modificar o extender.</param>
        <summary>Implementa una modificación o extensión del servicio en este punto de conexión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> para ver, modificar o extender el tiempo de ejecución del servicio en todos los mensajes, o para operaciones concretas en un extremo. Para obtener información detallada sobre qué personalizaciones pueden hacerse en una aplicación de servicio, vea <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> y <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Se recomienda que el método <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> inicie una excepción <xref:System.NotImplementedException> sólo si pretende utilizar el comportamiento en una aplicación cliente.  
  
 Tenga en cuenta que cuando se utiliza un contrato de devolución de llamada (una operación en cada dirección) puede haber dos operaciones con el mismo nombre en la descripción. Al ejecutar una iteración en las operaciones, debe asociar la dirección del mensaje del extremo <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> y lo que devuelve la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>.  
  
 Asimismo, dado que otros comportamientos pueden haber agregado o quitado algunas operaciones del tiempo de ejecución, no hay garantía de que exista el mismo número de operaciones en la descripción como objetos <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> en la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra la implementación de un comportamiento del extremo que agrega un objeto <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> en una aplicación de servicio. En este caso, la clase `EndpointBehaviorMessageInspector` implementa <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> para inspeccionar el mensaje entrante y saliente, la interfaz <xref:System.ServiceModel.Description.IEndpointBehavior> para insertar la clase de inspector en el sistema de inspección de todos los extremos a los que se aplica el comportamiento, y la extensión <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> para habilitar el comportamiento del inspector de mensaje mediante un archivo de configuración de la aplicación.  
  
 El primer paso es implementar el inspector de mensaje.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 En el ejemplo de código siguiente se muestra el uso del método <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> para agregar el inspector de mensaje a la propiedad <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 El ejemplo de código siguiente muestra la implementación de <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> para habilitar el uso del comportamiento del inspector de mensaje desde un archivo de configuración.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Por último, el siguiente archivo de configuración muestra cómo utilizar el ejemplo anterior desde la configuración.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">punto de conexión que se va a validar.</param>
        <summary>Implemente para confirmar que el punto de conexión cumple algunos de los criterios previstos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> para examinar la estructura y confirmar cualquier conjunto de criterios. Para utilizar este método, no es necesario realizar ninguna personalización en <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> o <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A>. Si el extremo pasa la validación, se devolverá; de lo contrario, inicia una excepción.  
  
 Por ejemplo, el método <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> se utiliza para asegurarse de que todos los extremos utilizan un enlace corporativo aprobado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>