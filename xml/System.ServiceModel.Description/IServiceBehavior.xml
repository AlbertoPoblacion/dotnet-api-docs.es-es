<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f26cbbfb79ab6e7cd4db524dfccbb6a72e11474" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37617248" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona un mecanismo para modificar o insertar las extensiones personalizadas en un servicio completo, incluso <see cref="T:System.ServiceModel.ServiceHostBase" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente <xref:System.ServiceModel.Description.IServiceBehavior> para modificar, examinar o extender algún aspecto de la ejecución de todo el servicio en el nivel de la aplicación.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> para cambiar los valores de propiedad en tiempo de ejecución o insertar objetos de extensión personalizados, como controladores de errores, interceptores de mensajes o parámetros, extensiones de seguridad y otros objetos de extensión personalizados.  
  
-   Use el <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> método para examinar la descripción antes de Windows Communication Foundation (WCF) se construye el servicio en ejecución para confirmar que puede ejecutarse correctamente.  
  
-   Utilice el método <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> para pasar la información personalizada del servicio a un elemento de enlace de modo que pueda admitir correctamente el servicio.  
  
 Los objetos <xref:System.ServiceModel.Description.IServiceBehavior> pueden utilizar cualquiera de estos métodos, pero a menudo sólo uno es importante; en ese caso, los métodos no usados pueden ser devueltos sin ningún valor.  
  
> [!NOTE]
>  Todos los métodos <xref:System.ServiceModel.Description.IServiceBehavior> pasan <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> y los objetos <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> como parámetros. Este <xref:System.ServiceModel.Description.ServiceDescription> parámetro se utiliza solo para realizar un examen, si se modifican estos objetos el comportamiento de la ejecución no estará definido.  
  
 Para realizar la tarea de personalización prevista, el objeto <xref:System.ServiceModel.Description.IServiceBehavior> debe agregarse a la propiedad <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> antes de la construcción del tiempo de ejecución del servicio. Existen tres formas de hacer esto:  
  
-   Mediante programación agregue el comportamiento de servicio personalizado a la propiedad <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> antes de que se llame al método <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> en el objeto <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>.  
  
-   Cree un atributo personalizado que implemente <xref:System.ServiceModel.Description.IServiceBehavior> y utilícelo para marcar las clases de servicio que deben modificarse. Cuando un <xref:System.ServiceModel.ServiceHost> haya construido, WCF usa la reflexión para detectar los atributos en el tipo de servicio. Si cualquier atributo implementa <xref:System.ServiceModel.Description.IServiceBehavior>, se agregan a la colección de comportamientos en <xref:System.ServiceModel.Description.ServiceDescription>.  
  
-   Extienda la clase <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> para admitir la especificación del comportamiento en una aplicación o archivo de configuración del equipo. Para obtener más información, vea la sección Ejemplo.  
  
 Ejemplos de comportamientos de servicio de WCF la <xref:System.ServiceModel.ServiceBehaviorAttribute> atributo, el <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, el <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> y <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> comportamiento.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra el uso de un comportamiento de servicio, especificado en un archivo de configuración, para insertar un controlador de errores personalizado en una aplicación de servicio. En este ejemplo, el controlador de errores detecta todas las excepciones y las convierte en un error de SOAP `GreetingFault` personalizado que, a continuación, se devuelve al cliente.  
  
 La siguiente implementación <xref:System.ServiceModel.Description.IServiceBehavior> no agrega ningún objeto de parámetro de enlace, agrega el objeto <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> personalizado a cada propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, y valida que cada operación del servicio a la que se aplica el comportamiento de servicio cuente con un atributo <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de tipo `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 En este ejemplo, la clase de comportamiento también implementa <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, lo que permite insertar el comportamiento de servicio mediante su uso en un archivo de configuración de la aplicación, como se muestra en el ejemplo de código siguiente.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Descripción del servicio.</param>
        <param name="serviceHostBase">Host de servicio.</param>
        <param name="endpoints">puntos de conexión del servicio.</param>
        <param name="bindingParameters">Objetos personalizados a los que los elementos de enlace tienen acceso.</param>
        <summary>Proporciona la capacidad de pasar los datos personalizados a los elementos de enlace para admitir la implementación del contrato.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice el método <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> para agregar los objetos de datos personalizados a la colección `parameters` que los elementos de enlace pueden utilizar para adquirir la información adicional y permitirles admitir el contrato.  
  
 Este método se llama una vez para cada URI de escucha. Por ejemplo, si un servicio tiene cuatro extremos y dos de ellos tienen el mismo URI de escucha, se llamará tres veces a este método. La razón es que los `bindingParameters` tienen como destino cada pila del canal y existe una pila de canal para cada URI de escucha. Dado que cada llamada recibe esos extremos en esa URI de escucha, dos llamadas obtienen un único <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> y una llamada obtiene una colección de dos objetos <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Todos los métodos <xref:System.ServiceModel.Description.IServiceBehavior> pasan <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> y los objetos <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> como parámetros. El parámetro <xref:System.ServiceModel.Description.ServiceDescription> sólo se utiliza para realizar el examen e insertar las personalizaciones; si modifica de algún modo estos objetos el comportamiento de ejecución no estará definido.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Descripción del servicio.</param>
        <param name="serviceHostBase">Host que se está generando actualmente.</param>
        <summary>Proporciona la capacidad de cambiar los valores de propiedad en tiempo de ejecución o insertar objetos de extensión personalizados, tales como controladores de error, interceptores de mensajes o parámetros, extensiones de seguridad, y otros objetos de extensión personalizados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implemente el método <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> para inspeccionar o modificar el objeto <xref:System.ServiceModel.ServiceHostBase> que se está construyendo para admitir algún escenario de ejecución personalizado.  
  
> [!NOTE]
>  Todos los métodos <xref:System.ServiceModel.Description.IServiceBehavior> pasan <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> y los objetos <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> como parámetros. El parámetro <xref:System.ServiceModel.Description.ServiceDescription> sólo se utiliza para realizar el examen e insertar las personalizaciones; si modifica de algún modo estos objetos el comportamiento de ejecución no estará definido.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra el uso de un comportamiento de servicio, especificado en un archivo de configuración, para insertar un controlador de errores personalizado en una aplicación de servicio. En este ejemplo, el controlador de errores detecta todas las excepciones y las convierte en un error de SOAP `GreetingFault` personalizado que, a continuación, se devuelve al cliente.  
  
 La siguiente implementación <xref:System.ServiceModel.Description.IServiceBehavior> no agrega ningún objeto de parámetro de enlace, agrega el objeto <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> personalizado a cada propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, y valida que cada operación del servicio a la que se aplica el comportamiento de servicio cuente con un atributo <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de tipo `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 En este ejemplo, la clase de comportamiento también implementa <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, lo que permite insertar el comportamiento de servicio mediante su uso en un archivo de configuración de la aplicación, como se muestra en el ejemplo de código siguiente.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Descripción del servicio.</param>
        <param name="serviceHostBase">Host del servicio que se está construyendo actualmente.</param>
        <summary>Proporciona la capacidad de inspeccionar el host y la descripción del servicio para confirmar que este puede ejecutarse correctamente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice el método <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> para confirmar si el servicio actual puede ejecutarse correctamente de acuerdo con su escenario.  
  
> [!NOTE]
>  Todos los métodos <xref:System.ServiceModel.Description.IServiceBehavior> pasan <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> y los objetos <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> como parámetros. El parámetro <xref:System.ServiceModel.Description.ServiceDescription> sólo se utiliza para realizar el examen e insertar las personalizaciones; si modifica de algún modo estos objetos el comportamiento de ejecución no estará definido.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra el uso de un comportamiento de servicio, especificado en un archivo de configuración, para insertar un controlador de errores personalizado en una aplicación de servicio. En este ejemplo, el controlador de errores detecta todas las excepciones y las convierte en un error de SOAP `GreetingFault` personalizado que, a continuación, se devuelve al cliente.  
  
 La siguiente implementación <xref:System.ServiceModel.Description.IServiceBehavior> no agrega ningún objeto de parámetro de enlace, agrega el objeto <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> personalizado a cada propiedad <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType>, y valida que cada operación del servicio a la que se aplica el comportamiento de servicio cuente con un atributo <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> de tipo `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 En este ejemplo, la clase de comportamiento también implementa <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, lo que permite insertar el comportamiento de servicio mediante su uso en un archivo de configuración de la aplicación, como se muestra en el ejemplo de código siguiente.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>