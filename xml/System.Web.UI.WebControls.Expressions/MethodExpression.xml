<Type Name="MethodExpression" FullName="System.Web.UI.WebControls.Expressions.MethodExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b27249522bf1744db3d54add337e238344d855bb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30589209" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MethodExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MethodExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.MethodExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ofrece una manera de especificar una consulta LINQ personalizada que está definida en un método.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.QueryExtender> control admite consultas LINQ personalizadas. Puede definir una consulta LINQ personalizada en un método y usar la <xref:System.Web.UI.WebControls.Expressions.MethodExpression> filtrar opción para invocar la consulta en el <xref:System.Web.UI.WebControls.QueryExtender> control.  
  
 El método que contiene la consulta LINQ personalizada debe cumplir los siguientes criterios:  
  
-   El método debe ser estático (`Shared` en Visual Basic). El primer parámetro debe ser un <xref:System.Linq.IQueryable%601> o <xref:System.Collections.Generic.IEnumerable%601> objeto. El método puede tener más de un parámetro.  
  
-   El valor devuelto no se puede cambiar la <xref:System.Linq.IQueryable%601> o <xref:System.Collections.Generic.IEnumerable%601> tipo que se consulta.  
  
 El <xref:System.Web.UI.WebControls.Expressions.MethodExpression> busca el método que contiene la consulta en el orden siguiente:  
  
1.  Si un <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> propiedad se especifica en el <xref:System.Web.UI.WebControls.QueryExtender> (control), el <xref:System.Web.UI.WebControls.Expressions.MethodExpression> objeto busca el método en el tipo especificado.  
  
2.  Si el origen de datos implementa <xref:System.Web.DynamicData.IDynamicDataSource>, el método busca el método en el tipo de contexto (<xref:System.Data.Linq.DataContext> o <xref:System.Data.Objects.ObjectContext> objeto.)  
  
3.  El método busca el método en un control de plantilla, en la clase base para la página o en un control de usuario.  
  
 El <xref:System.Web.UI.WebControls.Expressions.MethodExpression> clase es como la <xref:System.Web.UI.WebControls.Expressions.CustomExpression> clase salvo que la expresión de método se ejecuta en respuesta a una llamada al método, y la expresión personalizada se ejecuta en respuesta a un evento.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo buscar el campo ListPrice de la tabla Products de la base de datos de AdventureWorks para productos que tienen un precio de venta de 400 o más. Este ejemplo muestra cómo crear una consulta LINQ personalizada en un método en el código de página y cómo invocar el método en el <xref:System.Web.UI.WebControls.QueryExtender> control.  
  
```vb  
Public Shared Function FilterStandardPrice(ByVal query As _  
        IQueryable(Of Product)) As IQueryable(Of Product)  
        Return From p In query _  
            Where p.ListPrice >= 400 _  
            Select p  
    End Function  
```  
  
```csharp  
public static IQueryable<Product>   
        FilterStandardPrice(IQueryable<Product> query)  
{  
        return from p in query  
                  where p.ListPrice >= 400  
                  select p;  
  
    }  
```  
  
 En el ejemplo siguiente se muestra cómo llamar al método en la página.  
  
```  
<html>  
<head runat="server">  
  <title>Custom Filter</title>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <asp:LinqDataSource ID="LinqDataSource1" runat="server"   
        ContextTypeName="AdventureworksDataContext" EntityTypeName=""   
        TableName="Products">  
    </asp:LinqDataSource>  
  
    <asp:QueryExtender ID="QueryExtender1" runat="server"   
        TargetControlID="LinqDataSource1">  
      <asp:MethodExpression MethodName="FilterStandardPrice" >  
      </asp:MethodExpression>  
    </asp:QueryExtender>  
  
    <asp:GridView ID="GridView1" runat="server"   
        DataSourceID="LinqDataSource1"   
        DataKeyNames="ProductID"   
    </asp:GridView>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MethodExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MethodExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.Expressions.MethodExpression" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.MethodExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Control de origen de datos que se va a usar.</param>
        <summary>Resuelve la expresión utilizando el objeto <see cref="T:System.Linq.IQueryable" /> especificado.</summary>
        <returns>Instancia del objeto <see cref="T:System.Linq.IQueryable" /> que se usó para resolver la expresión.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El control de origen de datos es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">No se encontró el método.  
  
 O bien  
  
 El método no es estático.  
  
 O bien  
  
 Se cambió el tipo del objeto <see langword="IQuerable&lt;T&gt;" /> pasado.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreIfNotFound">
      <MemberSignature Language="C#" Value="public bool IgnoreIfNotFound { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreIfNotFound" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.IgnoreIfNotFound" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreIfNotFound As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreIfNotFound { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si debe omitirse la expresión.</summary>
        <value>
          Es <see langword="true" /> si el método se omite; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.WebControls.Expressions.MethodExpression> objeto busca un método que contiene la consulta se busca en ubicaciones específicas y buscar en un orden específico. Puede establecer esta propiedad en `false` para producir una excepción si el <xref:System.Web.UI.WebControls.Expressions.CustomExpression> objeto no encuentra un método que contiene un LINQ.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MethodName">
      <MemberSignature Language="C#" Value="public string MethodName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MethodName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.MethodName" />
      <MemberSignature Language="VB.NET" Value="Public Property MethodName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MethodName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre del método que contiene una consulta LINQ personalizada.</summary>
        <value>Nombre del método que contiene la consulta LINQ personalizada.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Web.UI.WebControls.Expressions.MethodExpression> objeto le permite llamar a una consulta LINQ personalizada que se define en un método. Especifique el método en el <xref:System.Web.UI.WebControls.QueryExtender> control en la página.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo especificar el `FilterStandardPrice` método en el <xref:System.Web.UI.WebControls.QueryExtender> control. La consulta LINQ personalizada se define en un `FilterStandardPrice` método.  
  
```  
<asp:QueryExtender ID="QueryExtender1" runat="server"   
    TargetControlID="LinqDataSource1">  
  <asp:MethodExpression MethodName="FilterStandardPrice">  
  </asp:MethodExpression>  
  </asp:QueryExtender>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la clase cuyo método contiene la consulta personalizada.</summary>
        <value>Clase de la que es miembro el método.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.Expressions.MethodExpression> clase le permite especificar una expresión personalizada para un origen de datos en el <xref:System.Web.UI.WebControls.QueryExtender> control. Puede usar el <xref:System.Web.UI.WebControls.Expressions.MethodExpression.TypeName%2A> propiedad para especificar la clase a la que pertenece el método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>