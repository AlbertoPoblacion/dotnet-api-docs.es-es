<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b662e2ee96b5e8cf11b7ec0a8b795b7a2e7c46ad" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39812746" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type PropertyExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona una manera de crear una cláusula <see langword="Where" /> a partir de los parámetros de una colección <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> clase se utiliza con el <xref:System.Web.UI.WebControls.QueryExtender> control para filtrar los datos en los campos de datos. La <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> clase compara un valor de propiedad de una columna en un valor especificado. Por ejemplo, puede comparar un valor booleano en el valor de la columna de una tabla de productos en una base de datos no incluida.  
  
 El <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> clase crea una comparación de igualdad (==) para el valor de cada parámetro y la propiedad correspondiente de la <xref:System.Linq.IQueryable> objeto de datos. Si se proporciona más de un parámetro, los parámetros se combinan mediante la operación lógica `AND` operador. Parámetros que contienen un valor vacío no se agregan a la `Where` cláusula.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo buscar en la tabla de productos de AdventureWorks de base de datos para los productos cuya `MakeFlag` propiedad (una columna booleana) está establecida en `true`. El parámetro de valor booleano se establece en una casilla de verificación. El resultado de la consulta que se devuelve desde el <xref:System.Web.UI.WebControls.LinqDataSource> control se muestra en un <xref:System.Web.UI.WebControls.GridView> control.  
  
 Este ejemplo de código forma parte de un ejemplo más extenso que se proporciona en [Tutorial: filtrar datos en una página Web mediante declarativa la sintaxis](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="propertyExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Objeto que se va a usar para la consulta.</param>
        <summary>Aplica un objeto <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> usando el objeto de origen de datos <see cref="T:System.Linq.IQueryable" /> especificado.</summary>
        <returns>Instancia del objeto al que se aplicaron las expresiones.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método combina especificado <xref:System.Linq.IQueryable> objeto con las expresiones en el <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> colección mediante el uso de la operación lógica `AND` operador.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>