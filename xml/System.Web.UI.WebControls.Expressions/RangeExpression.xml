<Type Name="RangeExpression" FullName="System.Web.UI.WebControls.Expressions.RangeExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="304c6959db0b0c08df8343a425d16181e0c17b65" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30589679" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RangeExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RangeExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.RangeExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class RangeExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class RangeExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona una manera de determinar si un valor es mayor o menor que un valor especificado o si un valor se encuentra entre dos valores especificados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.UI.WebControls.QueryExtender> control proporciona la capacidad para filtrar los datos en una página Web mediante el uso de clases en el <xref:System.Web.UI.WebControls.Expressions> espacio de nombres. Estas clases incluyen la <xref:System.Web.UI.WebControls.Expressions.RangeExpression> clase.  
  
 La <xref:System.Web.UI.WebControls.Expressions.RangeExpression> clase busca en una columna de datos mediante un par de valores que definen el intervalo. Usa el <xref:System.Web.UI.WebControls.Expressions.RangeExpression.DataField%2A> propiedad para especificar la columna que se va a buscar. Usa el <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MinType%2A> resultados de la propiedad para especificar si desea incluir o excluir el mínimo en la búsqueda, y utilizar el <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType%2A> propiedad para especificar si desea incluir o excluir el valor máximo. Se pueden especificar los valores máximos y mínimo en [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] controles y los valores se pueden pasar a la <xref:System.Web.UI.WebControls.QueryExtender> control como parámetros en <xref:System.Web.UI.WebControls.ControlParameter> controles. Normalmente, los resultados se muestran en un control enlazado a datos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo buscar en la columna ListPrice en la tabla Products de la base de datos de AdventureWorks para productos que tienen un precio de venta en el intervalo que se especifica en el `FromTextBox` y `ToTextBox` cuadros de texto. El filtro incluye el valor mínimo pero excluye el valor máximo de los resultados. Los resultados se muestran en un <xref:System.Web.UI.WebControls.Label> control.  
  
 Este ejemplo de código forma parte de un ejemplo más extenso incluido en [Tutorial: filtrar datos en una página Web utilizando la sintaxis declarativa](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Web.UI.WebControls.Expressions.RangeExpression.DataField" /> es <see langword="null" />.</exception>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RangeExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.RangeExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RangeExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.UI.WebControls.Expressions.RangeExpression" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataField">
      <MemberSignature Language="C#" Value="public string DataField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataField" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.RangeExpression.DataField" />
      <MemberSignature Language="VB.NET" Value="Public Property DataField As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataField { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el campo que se va a usar para la comparación.</summary>
        <value>Campo que se va a usar para la comparación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La expresión de intervalo busca el campo de datos para el intervalo especificado.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo buscar en la columna de precio de venta en la tabla Products de la base de datos de AdventureWorks para productos que tienen un precio de venta en el intervalo que se especifica en el `FromTextBox` y `ToTextBox` cuadros de texto.  
  
 Este ejemplo de código forma parte de un ejemplo más extenso incluido en [Tutorial: filtrar datos en una página Web utilizando la sintaxis declarativa](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
```  
<asp:RangeExpression DataField="ListPrice"    
    MinType="Inclusive" MaxType="Exclusive">  
  <asp:ControlParameter ControlID="FromTextBox" />  
  <asp:ControlParameter ControlID="ToTextBox" />  
</asp:RangeExpression>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.RangeExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Objeto que debe utilizarse para la comparación.</param>
        <summary>Obtiene el objeto <see cref="T:System.Linq.IQueryable" /> en el que se realizó la comparación de intervalos.</summary>
        <returns>Instancia del objeto <see cref="T:System.Linq.IQueryable" /> al que se aplicó la expresión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa especificado <xref:System.Linq.IQueryable> objeto para resolver la expresión.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Web.UI.WebControls.Expressions.RangeExpression.DataField" /> es <see langword="null" />.  
  
 O bien  
  
 Las propiedades <see cref="P:System.Web.UI.WebControls.Expressions.RangeExpression.MinType" /> y <see cref="P:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType" /> están establecidas en <see cref="F:System.Web.UI.WebControls.Expressions.RangeType.None" />.  
  
 O bien  
  
 La propiedad <see cref="P:System.Web.UI.WebControls.Expressions.RangeExpression.MinType" /> o <see cref="P:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType" /> no está establecida en <see cref="F:System.Web.UI.WebControls.Expressions.RangeType.None" /> y la colección de parámetros está vacía.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Expressions.RangeType MaxType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Expressions.RangeType MaxType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxType As RangeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Expressions::RangeType MaxType { System::Web::UI::WebControls::Expressions::RangeType get(); void set(System::Web::UI::WebControls::Expressions::RangeType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Expressions.RangeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor máximo del intervalo.</summary>
        <value>Tipo de comparación que se va a usar para el valor máximo. El valor predeterminado es <see cref="F:System.Web.UI.WebControls.Expressions.RangeType.None" />, que indica que no se realiza la comparación del valor máximo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores posibles para esta propiedad son <xref:System.Web.UI.WebControls.Expressions.RangeType.Inclusive>, <xref:System.Web.UI.WebControls.Expressions.RangeType.Exclusive>, y <xref:System.Web.UI.WebControls.Expressions.RangeType.None>.  
  
 Cuando el <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType%2A> se establece en <xref:System.Web.UI.WebControls.Expressions.RangeType.Inclusive>, el valor máximo del intervalo se incluye en los resultados de búsqueda. Esto equivale a realizar una > = la operación. Si establece la propiedad en <xref:System.Web.UI.WebControls.Expressions.RangeType.Exclusive> campo, es equivalente a especificar una > o < operación. Si establece la propiedad en <xref:System.Web.UI.WebControls.Expressions.RangeType.None>, se impone ningún límite en el intervalo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo puede incluir el valor mínimo que se especifica en el intervalo y cómo excluir el valor máximo. Los valores máximos y mínimos se especifican en los cuadros de texto. Este ejemplo de código forma parte de un ejemplo más extenso incluido en [Tutorial: filtrar datos en una página Web utilizando la sintaxis declarativa](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
```  
<asp:RangeExpression DataField="ListPrice"    
    MinType="Inclusive" MaxType="Exclusive">  
  <asp:ControlParameter ControlID="FromTextBox" />  
  <asp:ControlParameter ControlID="ToTextBox" />  
</asp:RangeExpression>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Expressions.RangeType MinType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Expressions.RangeType MinType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.RangeExpression.MinType" />
      <MemberSignature Language="VB.NET" Value="Public Property MinType As RangeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Expressions::RangeType MinType { System::Web::UI::WebControls::Expressions::RangeType get(); void set(System::Web::UI::WebControls::Expressions::RangeType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Expressions.RangeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor mínimo del intervalo.</summary>
        <value>Tipo de comparación que se va a usar para el valor mínimo. El valor predeterminado es <see cref="F:System.Web.UI.WebControls.Expressions.RangeType.None" />, que indica que no se realiza la comparación del valor mínimo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los valores posibles para esta propiedad son <xref:System.Web.UI.WebControls.Expressions.RangeType.Inclusive>, <xref:System.Web.UI.WebControls.Expressions.RangeType.Exclusive>, y <xref:System.Web.UI.WebControls.Expressions.RangeType.None>.  
  
 Cuando el <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MinType%2A> o <xref:System.Web.UI.WebControls.Expressions.RangeExpression.MaxType%2A> propiedad está establecida en <xref:System.Web.UI.WebControls.Expressions.RangeType.Inclusive>, el valor mínimo y máximo del intervalo se incluye en los resultados de búsqueda. Esto equivale a realizar una > = o \<= la operación. El <xref:System.Web.UI.WebControls.Expressions.RangeType.Exclusive> campo es equivalente a la > o < operación y <xref:System.Web.UI.WebControls.Expressions.RangeType.None> no impone ningún límite en el intervalo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo puede incluir el valor mínimo que se especifica en el intervalo y cómo excluir el valor máximo. Los valores máximos y mínimos se especifican en los cuadros de texto. Este ejemplo de código forma parte de un ejemplo más extenso incluido en [Tutorial: filtrar datos en una página Web utilizando la sintaxis declarativa](http://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
```  
<asp:RangeExpression DataField="ListPrice"    
    MinType="Inclusive" MaxType="Exclusive">  
  <asp:ControlParameter ControlID="FromTextBox" />  
  <asp:ControlParameter ControlID="ToTextBox" />  
</asp:RangeExpression>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>