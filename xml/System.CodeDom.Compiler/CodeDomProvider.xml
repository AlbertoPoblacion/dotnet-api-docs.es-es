<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b3fe8ac8c3068a185bfb6aea6297c55816857d7" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52918427" /></Metadata><TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CodeDomProvider = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona la clase base para las implementaciones de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Esta clase es abstracta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.CodeDom.Compiler.CodeDomProvider> puede usarse para crear y recuperar instancias de generadores de código y compiladores de código. Los generadores de código pueden utilizarse para generar código en un determinado lenguaje y los compiladores de código para compilar código y generar ensamblados.  
  
> [!NOTE]
>  En el [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], los métodos a disposición en el generador de código y del compilador de código están disponibles directamente desde el proveedor de código. No es necesario llamar a <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> o <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> para tener acceso a los métodos y esos métodos se marcan como obsoletas. Esto se aplica a preexistente, así como nuevas implementaciones de proveedor de código.  
  
 Un <xref:System.CodeDom.Compiler.CodeDomProvider> implementación normalmente proporciona código de las interfaces de código de generación o de compilación para generar código y administrar la compilación para un solo lenguaje de programación. Se admiten varios idiomas por <xref:System.CodeDom.Compiler.CodeDomProvider> implementaciones que se suministran con el [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]. Estos lenguajes incluyen C#, Visual Basic, C++ y JScript. Los desarrolladores o proveedores de compiladores pueden implementar la <xref:System.CodeDom.Compiler.ICodeGenerator> y <xref:System.CodeDom.Compiler.ICodeCompiler> e interfaces proporcionan un <xref:System.CodeDom.Compiler.CodeDomProvider> que extiende la compatibilidad de CodeDOM a otros lenguajes de programación.  
  
 El [ &lt;system.codedom&gt; elemento](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) en la configuración del equipo (Machine.config) del archivo proporciona un mecanismo para agregar valores de configuración para adicionalesalosdesarrolladoresyproveedoresdecompiladores<xref:System.CodeDom.Compiler.CodeDomProvider>implementaciones.  
  
 El <xref:System.CodeDom.Compiler.CodeDomProvider> clase proporciona métodos estáticos para detectar y enumerar los <xref:System.CodeDom.Compiler.CodeDomProvider> implementaciones en un equipo. El <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> método devuelve la configuración de todos los <xref:System.CodeDom.Compiler.CodeDomProvider> implementaciones en un equipo. El <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> método devuelve la configuración para un determinado <xref:System.CodeDom.Compiler.CodeDomProvider> implementación, según el nombre de lenguaje de programación. El <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> método devuelve una instancia de un <xref:System.CodeDom.Compiler.CodeDomProvider> implementación para un idioma específico.  
  
 Para obtener más detalles sobre la configuración del proveedor de lenguaje en el archivo de configuración, consulte [compilador y Language Provider Settings Schema](~/docs/framework/configure-apps/file-schema/compiler/index.md).  
  
> [!NOTE]
>  Esta clase realiza una petición de vínculo y una petición de herencia en el nivel de clase. Un <xref:System.Security.SecurityException> se produce si el llamador inmediato o la clase derivada no tiene permiso de plena confianza. Para obtener más información acerca de las peticiones de seguridad, consulte [peticiones de vínculo](~/docs/framework/misc/link-demands.md) y [peticiones de herencias](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100)).  
  
   
  
## Examples  
 El programa de ejemplo siguiente puede generar y compilar código fuente basado en un modelo CodeDOM de un programa que imprime "Hello World" utilizando el <xref:System.Console> clase. Se proporciona una interfaz de usuario de Windows Forms. El usuario puede seleccionar el idioma de varias selecciones de programación de destino: C#, Visual Basic y JScript.  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para plena confianza para el llamador inmediato. Esta clase no puede usarse por código de confianza parcial.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">para plena confianza para los herederos. No se puede heredar esta clase por código de confianza parcial.</permission>
    <block subset="none" type="overrides"><para>En las versiones 1.0 y 1.1 de .NET Framework, los proveedores de código están formados por implementaciones de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />, y <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />. En el [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />, <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />, y <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> métodos están obsoletos y los métodos de <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> y <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> están disponibles directamente en el <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> clase. Debe invalidar estos métodos en la implementación del proveedor de código y no llamar a los métodos base.</para></block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Esquema de configuración de compilador y proveedor de lenguaje</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para plena confianza para el llamador inmediato. Esta clase no puede usarse por código de confianza parcial.</permission>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromDom (options, compilationUnits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
        <param name="compilationUnits">Matriz de tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica el código que se va a compilar.</param>
        <summary>Compila un ensamblado basado en los árboles <see cref="N:System.CodeDom" /> que contiene la matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, utilizando la configuración del compilador especificada.</summary>
        <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeCompiler> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeCompiler> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> método para la compatibilidad con los proveedores existentes que usan los compiladores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un compilador de código.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromFile (options, fileNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="fileNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de la compilación.</param>
        <param name="fileNames">Matriz de los nombres de los archivos que se van a compilar.</param>
        <summary>Compila un ensamblado a partir del código fuente que contienen los archivos especificados, utilizando la configuración de compilador especificada.</summary>
        <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeCompiler> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeCompiler> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> método para la compatibilidad con los proveedores existentes que usan los compiladores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un compilador de código.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromSource (options, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="sources" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica la configuración de compilador para esta compilación.</param>
        <param name="sources">Matriz de cadenas de código fuente que se van a compilar.</param>
        <summary>Compila un ensamblado basado en la matriz especificada de cadenas que contiene el código fuente, utilizando la configuración del compilador especificada.</summary>
        <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica los resultados de la compilación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeCompiler> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeCompiler> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> método para la compatibilidad con los proveedores existentes que usan los compiladores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un compilador de código.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiler : unit -&gt; System.CodeDom.Compiler.ICodeCompiler" Usage="codeDomProvider.CreateCompiler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.Obsolete("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, crea un nuevo compilador de código.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> que puede utilizarse para la compilación de representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está obsoleto en la [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. La alternativa recomendada es llamar a la <xref:System.CodeDom.Compiler.ICodeCompiler> métodos que están disponibles directamente en el proveedor de código.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>En el [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], debe implementar la <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> miembros en el <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> clase y producir un <see cref="T:System.NotSupportedException" /> cuando se llama a este método.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string&#xA;override this.CreateEscapedIdentifier : string -&gt; string" Usage="codeDomProvider.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Cadena para la que se va a crear un identificador de escape.</param>
        <summary>Crea un identificador de escape para el valor especificado.</summary>
        <returns>Identificador de escape para el valor.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> las pruebas si el identificador entra en conflicto con cualquier reservado o palabras clave del lenguaje y si es así, devuelve un nombre equivalente con formato de código de escape específico del lenguaje. Esto se conoce como identificador de escape. El identificador de escape contiene el mismo `value` pero se le agrega formato de código de escape para diferenciar el identificador de la palabra clave. Dos ejemplos de implementación preceden el `value` con "@" o Estimando el `value` con "[" y "]".  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, crea un nuevo generador de código.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : unit -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.Obsolete("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, crea un nuevo generador de código.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método está obsoleto en la [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. La alternativa recomendada es llamar a la <xref:System.CodeDom.Compiler.ICodeGenerator> métodos que están disponibles directamente en el <xref:System.CodeDom.Compiler.CodeDomProvider> clase.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>En el [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], debe implementar la <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> miembros en el <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> clase y producir un <see cref="T:System.NotSupportedException" /> cuando se llama a este método.</para></block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output"><see cref="T:System.IO.TextWriter" /> que se va a utilizar para los resultados.</param>
        <summary>Cuando se reemplaza en una clase derivada, crea un nuevo generador de código utilizando el <see cref="T:System.IO.TextWriter" /> especificado para los resultados.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método usa especificado <xref:System.IO.TextWriter> para la salida. Este método admite la generación de código optimizado más que actualiza incrementalmente el código fuente.  
  
> [!NOTE]
>  La implementación de la clase base llama el <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método, que está obsoleto en la [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] y da como resultado un <xref:System.NotSupportedException> si un <xref:System.CodeDom.Compiler.ICodeGenerator> no se devuelve el objeto.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Nombre del archivo de resultados.</param>
        <summary>Cuando se reemplaza en una clase derivada, crea un nuevo generador de código utilizando el nombre de archivo especificado para los resultados.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que puede utilizarse para generar representaciones de código fuente basadas en el espacio de nombres <see cref="N:System.CodeDom" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza el nombre de archivo especificado para la salida.  
  
> [!NOTE]
>  La implementación de la clase base llama el <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método, que está obsoleto en la [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] y da como resultado un <xref:System.NotSupportedException> si un <xref:System.CodeDom.Compiler.ICodeGenerator> no se devuelve el objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberSignature Language="F#" Value="abstract member CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser&#xA;override this.CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser" Usage="codeDomProvider.CreateParser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2">
          <AttributeName>System.Obsolete("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, crea un nuevo analizador de código.</summary>
        <returns><see cref="T:System.CodeDom.Compiler.ICodeParser" /> que puede utilizarse para analizar código fuente. La implementación base siempre devuelve <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje especificado.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">Nombre del lenguaje.</param>
        <summary>Obtiene una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje especificado.</summary>
        <returns>Proveedor CodeDOM que se implementa para el nombre de lenguaje especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Este método se usa con más frecuencia para crear una instancia de un proveedor de código en una aplicación que opcionalmente puede utilizar uno de varios proveedores. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> permite especificar en tiempo de ejecución, el proveedor de código que desea crear una instancia. Si sabe en qué código es de proveedor que se usará el tiempo de diseño, debe crear una instancia de ese proveedor de código en lugar de utilizar el <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> método.  
  
 El <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> método devuelve un <xref:System.CodeDom.Compiler.CodeDomProvider> para un nombre de lenguaje específico de instancia; es similar a llamar a la <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> método con el tipo de proveedor de lenguaje. Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> cuando desee encontrar dinámicamente una implementación de proveedor configurado para un nombre de lenguaje.  
  
 Si se configura más de una implementación de proveedor para el nombre del idioma, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> devuelve una instancia del proveedor para el último elemento de configuración coincidente.  
  
 Use el <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> sobrecarga del método cuando desee que una implementación de proveedor de lenguaje específico. Por ejemplo, use el <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> método para obtener una instancia del proveedor que admite el nombre del idioma `"CSharp"`; utilice la <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> sobrecarga del método para obtener una instancia del proveedor específicamente para el <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> implementación. Debe usar la [\], CultureInfo, objeto\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D% 2CSystem.Globalization.CultureInfo%2CSystem.Object%5b%5D%29?displayProperty=nameWithType > Si tiene varios proveedores de código para un idioma y desea crear instancias de un proveedor de código específico de método.  
  
 El <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> método comprueba si al menos una implementación del proveedor es compatible con un idioma específico. Puede validar un nombre de idioma mediante <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> antes de pasarlo a <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>. Si se pasa un nombre de idioma no admitido para <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> un <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> se produce.  
  
 El <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> método puede utilizarse para determinar todos <xref:System.CodeDom.Compiler.CodeDomProvider> implementaciones en un equipo, incluidas implementaciones adicionales proporcionadas por los desarrolladores y proveedores de compiladores que se identifican en el [ &lt;system.codedom &gt; Elemento](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) en el archivo de configuración del equipo (Machine.config).  
  
 El <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> método devuelve una instancia de un <xref:System.CodeDom.Compiler.CodeDomProvider> implementación para un idioma específico.  
  
 Los nombres de lenguaje distinguen mayúsculas de minúsculas.  
  
   
  
## Examples  
 El ejemplo de código siguiente determina el <xref:System.CodeDom.Compiler.CodeDomProvider> implementación para un idioma de entrada y muestra los valores configurados para el proveedor de lenguaje. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.CodeDom.Compiler.CompilerInfo> clase.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException"><paramref name="language" /> no tiene un proveedor configurado en este equipo.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para plena confianza para el llamador inmediato. Un código de confianza parcial no puede utilizar este miembro.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider (language, providerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="language">Nombre del lenguaje.</param>
        <param name="providerOptions">Una colección de opciones de proveedor extraídas del archivo de configuración.</param>
        <summary>Obtiene una instancia de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje y opciones de proveedor especificados.</summary>
        <returns>Un proveedor CodeDOM que se implementa para el nombre del lenguaje y opciones especificados.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Este método se usa con más frecuencia para crear una instancia de un proveedor de código en una aplicación que opcionalmente puede utilizar uno de varios proveedores. <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> permite especificar en tiempo de ejecución de la versión del proveedor de código que desea crear una instancia. Si sabe en qué código es de proveedor que se usará el tiempo de diseño, debe crear una instancia de ese proveedor de código en lugar de usar el <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> método.  
  
 Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> cuando desee encontrar dinámicamente una implementación de proveedor configurado para un idioma específico y las opciones. Los nombres de lenguaje distinguen mayúsculas de minúsculas. Para obtener información acerca de las opciones de proveedor admitidos, consulte la documentación específica del proveedor CodeDOM.  
  
 Para obtener información sobre cómo validar un proveedor y llamar a un proveedor si se configura más de una implementación de proveedor para el nombre del idioma, consulte la sección Comentarios de la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear una instancia de un proveedor mediante el `providerOptions` parámetro.  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string&#xA;override this.CreateValidIdentifier : string -&gt; string" Usage="codeDomProvider.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Cadena para la que se va a generar un identificador válido.</param>
        <summary>Crea un identificador válido para el valor especificado.</summary>
        <returns>Identificador válido para el valor especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> comprueba si el identificador entra en conflicto con reservadas o palabras clave del lenguaje, y si es así, intenta devolver un identificador válido nombre que no entra en conflicto. Normalmente, el identificador devuelto se modifica ligeramente para diferenciar el identificador de la palabra clave; Por ejemplo, el nombre podría ir precedido por el carácter de subrayado ("_").  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la extensión de archivo predeterminada que se utilizará para los archivos de código fuente en el lenguaje actual.</summary>
        <value>Extensión de archivo correspondiente a la extensión de los archivos de código fuente del lenguaje actual. La implementación base siempre devuelve <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad se usa por los generadores de código y compiladores de código para indicar qué extensiones de archivo deben ser generados o utilizados.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea una instancia de <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>. En el ejemplo se muestra el nombre del proveedor, el hash predeterminada y el código de extensión para la nueva instancia del proveedor.  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromCompileUnit (compileUnit, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="compileUnit"><see cref="T:System.CodeDom.CodeCompileUnit" /> para el que se va a generar código.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
        <summary>Genera código para la unidad de compilación CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> método para generar código para una aplicación "Hello World" desde un <xref:System.CodeDom.CodeCompileUnit>. Este ejemplo forma parte de un ejemplo más extenso proporcionado para el <xref:System.CodeDom.Compiler.CodeDomProvider> clase.  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromExpression (expression, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="expression">Objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica la expresión para la que se va a generar código.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
        <summary>Genera código para la expresión CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="member">Objeto <see cref="T:System.CodeDom.CodeTypeMember" /> que indica el miembro para el que se va a generar código.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
        <summary>Genera código para la declaración de miembro CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación de la clase base produce un <xref:System.NotImplementedException>. Consulte <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> para la documentación que describe una implementación de este método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el uso de la <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> método tal como está implementado por el <xref:Microsoft.CSharp.CSharpCodeProvider> y <xref:Microsoft.VisualBasic.VBCodeProvider> clases.  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método no se reemplaza en una clase derivada.</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromNamespace (codeNamespace, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeNamespace">Objeto <see cref="T:System.CodeDom.CodeNamespace" /> que indica el espacio de nombres para el que se va a generar código.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
        <summary>Genera código para el espacio de nombres CodeDOM (Code Document Object Model) especificado y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromStatement (statement, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="statement"><see cref="T:System.CodeDom.CodeStatement" /> que contiene los elementos CodeDOM para los que se va a generar código.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
        <summary>Genera código para la instrucción CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromType (codeType, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeType">Objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica el tipo para el que se va a generar código.</param>
        <param name="writer"><see cref="T:System.IO.TextWriter" /> al que se envía el código de salida.</param>
        <param name="options"><see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica las opciones que se van a utilizar para generar código.</param>
        <summary>Genera código para la declaración de tipos CodeDOM (Code Document Object Model) especificada y lo envía al escritor de texto especificado utilizando las opciones igualmente especificadas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberSignature Language="F#" Value="static member GetAllCompilerInfo : unit -&gt; System.CodeDom.Compiler.CompilerInfo[]" Usage="System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve los valores de configuración del proveedor y compilador de lenguaje de este equipo.</summary>
        <returns>Matriz de tipo <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> que representa los valores de configuración de todas las implementaciones de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configuradas.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> método para enumerar la configuración del proveedor de lenguaje en un equipo.  
  
> [!NOTE]
>  En el [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], los proveedores de lenguaje predeterminados proporcionados por .NET Framework no se especifican en el [ &lt;system.codedom&gt; elemento](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) configuración del compilador sección y no se puede quitar, por lo que esta método devuelve información sobre los proveedores predeterminados y cualquier especificado en el archivo de configuración.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se enumera los proveedores de lenguaje en el equipo y muestra la configuración de compilador y la configuración de cada proveedor de lenguaje. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.CodeDom.Compiler.CompilerInfo> clase.  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para plena confianza para el llamador inmediato. Un código de confianza parcial no puede utilizar este miembro.</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Esquema de configuración de compilador y proveedor de lenguaje</related>
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member GetCompilerInfo : string -&gt; System.CodeDom.Compiler.CompilerInfo" Usage="System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">Nombre de lenguaje.</param>
        <summary>Devuelve la configuración del proveedor y compilador del lenguaje especificado.</summary>
        <returns>Objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> que contiene los valores de configuración de la implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El [ &lt;system.codedom&gt; elemento](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) en la configuración del equipo el archivo contiene la configuración del proveedor y compilador de lenguaje para cada <xref:System.CodeDom.Compiler.CodeDomProvider> implementación en el equipo. Para obtener información acerca de los archivos de configuración de máquina, vea la sección de archivos de configuración del equipo en [configurar aplicaciones](~/docs/framework/configure-apps/index.md). El <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> método busca en cada elemento de configuración de proveedor para el nombre del idioma especificado. El valor devuelto <xref:System.CodeDom.Compiler.CompilerInfo> instancia contiene la configuración del proveedor y compilador de lenguaje configurado.  
  
 El <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> método comprueba si al menos una implementación del proveedor es compatible con un idioma específico. Puede validar un nombre de idioma mediante <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> antes de pasarlo a <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>. Esto evita que producir una <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> al acceder a la <xref:System.CodeDom.Compiler.CompilerInfo> instancia para un nombre de idioma no admitido.  
  
 Si se configura más de una implementación de proveedor para el nombre de idioma de entrada, <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> devuelve la configuración desde el último proveedor de búsqueda de coincidencias de elemento de configuración.  
  
 Los nombres de lenguaje distinguen mayúsculas de minúsculas.  
  
   
  
## Examples  
 El ejemplo de código siguiente determina el <xref:System.CodeDom.Compiler.CodeDomProvider> implementación para un idioma de entrada y muestra los valores configurados para el proveedor de lenguaje. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.CodeDom.Compiler.CompilerInfo> clase.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><paramref name="language" /> no tiene un proveedor configurado en este equipo.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para plena confianza para el llamador inmediato. Un código de confianza parcial no puede utilizar este miembro.</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Esquema de configuración de compilador y proveedor de lenguaje</related>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetConverter : Type -&gt; System.ComponentModel.TypeConverter&#xA;override this.GetConverter : Type -&gt; System.ComponentModel.TypeConverter" Usage="codeDomProvider.GetConverter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Tipo de objeto para el que se recupera un convertidor de tipo.</param>
        <summary>Obtiene un <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo de datos especificado.</summary>
        <returns><see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado o <see langword="null" /> si no se encuentra <see cref="T:System.ComponentModel.TypeConverter" /> para el tipo especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una clase derivada puede invalidar este método para proporcionar tipos específicos de los convertidores de tipos de datos específicos.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member GetLanguageFromExtension : string -&gt; string" Usage="System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">Extensión de nombre de archivo.</param>
        <summary>Devuelve un nombre de lenguaje asociado a la extensión de nombre de archivo especificada, tal como se define en la sección de configuración del compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
        <returns>Nombre de lenguaje asociado a la extensión de nombre de archivo, tal como se define en la configuración del compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El [ &lt;system.codedom&gt; elemento](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) en la configuración del equipo (Machine.config) del archivo contiene la configuración del proveedor y compilador de lenguaje para cada <xref:System.CodeDom.Compiler.CodeDomProvider> implementación en el equipo. El <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> método busca en cada elemento de configuración de proveedor para la extensión de nombre de archivo especificado.  
  
 El <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> método comprueba si la implementación de al menos un proveedor admite una extensión de nombre de archivo específico. Puede validar una extensión de nombre de archivo mediante <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> antes de pasarlo a <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>. Esto evita que <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> genere un <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> para una extensión de nombre de archivo no admitido.  
  
 Si una implementación de proveedor es compatible con la extensión de nombre de archivo de entrada y hay varios lenguajes compatibles configurados para ese proveedor, a continuación, <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> devuelve el primer nombre de lenguaje para ese proveedor. Si se configura más de una implementación de proveedor para la extensión de nombre de archivo de entrada, <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> devuelve el nombre del idioma desde el último proveedor de búsqueda de coincidencias de elemento de configuración.  
  
 Los nombres de lenguaje y las extensiones de nombre de archivo distinguen mayúsculas de minúsculas.  
  
   
  
## Examples  
 El ejemplo de código siguiente determina el <xref:System.CodeDom.Compiler.CodeDomProvider> implementación para una extensión de nombre de archivo de entrada y muestra los valores configurados para el proveedor de lenguaje. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.CodeDom.Compiler.CompilerInfo> clase.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException"><paramref name="extension" /> no tiene un proveedor de lenguaje configurado en este equipo.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">El valor de <paramref name="extension" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para plena confianza para el llamador inmediato. Un código de confianza parcial no puede utilizar este miembro.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Esquema de configuración de compilador y proveedor de lenguaje</related>
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string&#xA;override this.GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeDomProvider.GetTypeOutput type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="type"><see cref="T:System.CodeDom.CodeTypeReference" /> que indica el tipo que se va a devolver.</param>
        <summary>Obtiene el tipo indicado por el <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
        <returns>Representación de texto del tipo especificado, con el formato que corresponde al lenguaje en el que este generador de código genera el código. En Visual Basic, por ejemplo, al pasar <see cref="T:System.CodeDom.CodeTypeReference" /> para el tipo <see cref="T:System.Int32" />, se devolverá "Integer".</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member IsDefinedExtension : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">Extensión de nombre de archivo.</param>
        <summary>Comprueba si una extensión de nombre de archivo tiene configurada una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> asociada en el equipo.</summary>
        <returns>Es <see langword="true" /> si se ha configurado una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para la extensión de nombre de archivo especificada; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El [ &lt;system.codedom&gt; elemento](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) en la configuración del equipo (Machine.config) del archivo contiene la configuración del proveedor y compilador de lenguaje para cada <xref:System.CodeDom.Compiler.CodeDomProvider> implementación en el equipo. El <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> método busca en los elementos de configuración de proveedor para la extensión de nombre de archivo especificado.  
  
 Extensiones de nombre de archivo distinguen mayúsculas de minúsculas.  
  
   
  
## Examples  
 El ejemplo de código siguiente determina el <xref:System.CodeDom.Compiler.CodeDomProvider> implementación para una extensión de nombre de archivo de entrada y muestra los valores configurados para el proveedor de lenguaje. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.CodeDom.Compiler.CompilerInfo> clase.  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="extension" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para plena confianza para el llamador inmediato. Un código de confianza parcial no puede utilizar este miembro.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Esquema de configuración de compilador y proveedor de lenguaje</related>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member IsDefinedLanguage : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">Nombre del lenguaje.</param>
        <summary>Comprueba si un lenguaje tiene una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada en el equipo.</summary>
        <returns>Es <see langword="true" /> si se ha configurado una implementación de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para el lenguaje especificado; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El [ &lt;system.codedom&gt; elemento](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) en la configuración del equipo (Machine.config) del archivo contiene la configuración del proveedor y compilador de lenguaje para cada <xref:System.CodeDom.Compiler.CodeDomProvider> implementación en el equipo. El <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> método busca en los elementos de configuración de proveedor para el nombre del idioma especificado.  
  
 Los nombres de lenguaje distinguen mayúsculas de minúsculas.  
  
   
  
## Examples  
 El ejemplo de código siguiente determina el <xref:System.CodeDom.Compiler.CodeDomProvider> implementación para un idioma de entrada y muestra los valores configurados para el proveedor de lenguaje. Este ejemplo de código forma parte de un ejemplo más extenso proporcionado para el <xref:System.CodeDom.Compiler.CompilerInfo> clase.  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="language" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">para plena confianza para el llamador inmediato. Un código de confianza parcial no puede utilizar este miembro.</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">Esquema de configuración de compilador y proveedor de lenguaje</related>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="codeDomProvider.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Valor que se va a comprobar como identificador válido.</param>
        <summary>Devuelve un valor que indica si el valor especificado es un identificador válido para el lenguaje actual.</summary>
        <returns>Es <see langword="true" /> si el parámetro <paramref name="value" /> es un identificador válido; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método comprueba si un identificador es válido. El <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> método es específico del proveedor. Los identificadores que son válidos para un proveedor podrían no ser válidos para otros proveedores. Si `value` contiene caracteres fuera del intervalo de caracteres ASCII, compruebe el identificador para todos los idiomas que se pueden usar para compilar el código.  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Cuando se reemplaza <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> en una clase derivada, diseñe el método devuelva <see langword="true" /> sólo si el valor se ajusta a las reglas del lenguaje y no entra en conflicto con una palabra clave.  
  
Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOptions : System.CodeDom.Compiler.LanguageOptions" Usage="System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un identificador de características de lenguaje.</summary>
        <value><see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica las características especiales del lenguaje.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberSignature Language="F#" Value="abstract member Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit" Usage="codeDomProvider.Parse codeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="codeStream">Objeto <see cref="T:System.IO.TextReader" /> que se utiliza para leer el código que se va a analizar.</param>
        <summary>Compila en <see cref="T:System.CodeDom.CodeCompileUnit" /> el código leído de la secuencia de texto especificada.</summary>
        <returns>Un objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que contiene una representación del código analizado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeParser> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeParser> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un analizador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> método para la compatibilidad con los proveedores existentes que usan los analizadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeParser" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no utiliza un analizador de código.</para></block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports supports" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1;netcore-2.2;dotnet-plat-ext-2.2" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport">Objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> que indica el tipo de compatibilidad para generación de código que se va a comprobar.</param>
        <param name="supports">Objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> que indica el tipo de compatibilidad para generación de código que se va a comprobar.</param>
        <summary>Devuelve un valor que indica si se proporciona la compatibilidad especificada para la generación de código.</summary>
        <returns>Es <see langword="true" /> si se proporciona la compatibilidad de generación de código especificada; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se puede llamar con un número de <xref:System.CodeDom.Compiler.GeneratorSupport> marcas a la vez para probar un conjunto de funciones mediante la combinación de un conjunto de marcas de funcionalidad adecuada junto con un archivo binario `OR` operador (&#124;).  
  
> [!NOTE]
>  En las versiones 1.0 y 1.1 de .NET Framework, este método se proporciona por el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación devuelto por la <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> método del proveedor. En la versión 2.0, este método puede llamarse directamente en el proveedor de código incluso si no se ha reemplazado por el proveedor de código. Si el proveedor de código no invalida este método, el <xref:System.CodeDom.Compiler.ICodeGenerator> implementación llama a la clase base.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Este método y el método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> no se reemplazan en una clase derivada.</exception>
        <block subset="none" type="overrides"><para>Si invalida este método, no debe llamar al método correspondiente de la clase base. El método de clase base, crea un generador en la clase derivada mediante el atributo obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> método para la compatibilidad con los proveedores existentes que usan generadores de código. El método de clase base, a continuación, llama al método equivalente el <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementación para realizar esta función. Obtendrá un <see cref="T:System.NotImplementedException" /> si se llama al método de clase base desde un proveedor de código que no use un generador de código.</para></block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>