<Type Name="INameScope" FullName="System.Windows.Markup.INameScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1ae350a552fc26c4cf919e3c7ddd4041a5f79898" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502837" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface INameScope" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INameScope" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.INameScope" />
  <TypeSignature Language="VB.NET" Value="Public Interface INameScope" />
  <TypeSignature Language="C++ CLI" Value="public interface class INameScope" />
  <TypeSignature Language="F#" Value="type INameScope = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="9f305-101">Define un contrato de cómo se debe tener acceso a los nombres de elementos dentro de un ámbito de nombres XAML determinado y cómo aplicar la unicidad de nombres dentro de ese ámbito de nombres XAML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9f305-101">Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f305-102">Esta interfaz se implementa por las clases que tienen elementos secundarios que están diseñados para reutilizar a través de la plantilla o metáfora aplazada.</span><span class="sxs-lookup"><span data-stu-id="9f305-102">This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.</span></span> <span data-ttu-id="9f305-103">Plantillas, generadores y construcciones similares deben tener los ámbitos de nombres XAML únicos que son independientes de un gráfico de objetos principal y raíz XAML.</span><span class="sxs-lookup"><span data-stu-id="9f305-103">Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.</span></span> <span data-ttu-id="9f305-104">El principio aquí es que no debería haber ningún conflictos de nombres cuando los objetos creados a partir de esos elementos secundarios se introducen en el gráfico de objetos de la aplicación, de modo que las operaciones de DOM y técnicas de referencia XAML que se basan en el identificador del nombre pueden depender de nombre unicidad en cada ámbito de nombres XAML.</span><span class="sxs-lookup"><span data-stu-id="9f305-104">The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.</span></span>  
  
 <span data-ttu-id="9f305-105">En versiones anteriores de .NET Framework, esta interfaz existía en el ensamblado específico de WPF WindowsBase.</span><span class="sxs-lookup"><span data-stu-id="9f305-105">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="9f305-106">En [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> en el ensamblado System.Xaml.</span><span class="sxs-lookup"><span data-stu-id="9f305-106">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly.</span></span> <span data-ttu-id="9f305-107">Para obtener más información, consulte [tipos migrados de WPF a System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="9f305-107">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="9f305-108">Notas de uso de WPF</span><span class="sxs-lookup"><span data-stu-id="9f305-108">WPF Usage Notes</span></span>  
 <span data-ttu-id="9f305-109">Esta interfaz está implementada por la clase WPF <xref:System.Windows.NameScope>.</span><span class="sxs-lookup"><span data-stu-id="9f305-109">This interface is implemented by the WPF class <xref:System.Windows.NameScope>.</span></span> <span data-ttu-id="9f305-110">Las operaciones del ámbito de nombres XAML mayoría en [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operar mediante <xref:System.Windows.NameScope> instancias, pero la información en ocasiones se comunica internamente mediante el uso de <xref:System.Windows.Markup.INameScope> referencias.</span><span class="sxs-lookup"><span data-stu-id="9f305-110">Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.</span></span>  
  
 <span data-ttu-id="9f305-111">Algunos ejemplos de clases WPF que usan un generador o metáfora aplazada combinados con representación de XAML son <xref:System.Windows.Style> y <xref:System.Windows.FrameworkTemplate>.</span><span class="sxs-lookup"><span data-stu-id="9f305-111">Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>.</span></span> <span data-ttu-id="9f305-112">Estas implementaciones normalmente se basan en las versiones explícitas de los métodos de interfaz disponibles en la <xref:System.Windows.NameScope> clase.</span><span class="sxs-lookup"><span data-stu-id="9f305-112">These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.NameScope" />
    <altmember cref="T:System.Windows.Markup.INameScopeDictionary" />
  </Docs>
  <Members>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member FindName : string -&gt; obj" Usage="iNameScope.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9f305-113">Identificador del nombre para el objeto que se solicita.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-113">The name identifier for the object being requested.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f305-114">Devuelve un objeto que tiene el nombre de identificación proporcionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-114">Returns an object that has the provided identifying name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9f305-115">El objeto, si se encuentra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-115">The object, if found.</span>
          </span>
          <span data-ttu-id="9f305-116">Devuelve <see langword="null" /> si no se encuentra ningún objeto con ese nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-116">Returns <see langword="null" /> if no object of that name was found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f305-117">Cadenas de nombre válido en el marcado XAML deben coincidir con los requisitos documentados en [XamlName (gramática)](~/docs/framework/xaml-services/xamlname-grammar.md).</span><span class="sxs-lookup"><span data-stu-id="9f305-117">Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit" Usage="iNameScope.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9f305-118">Nombre que se va a registrar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-118">The name to register.</span>
          </span>
        </param>
        <param name="scopedElement">
          <span data-ttu-id="9f305-119">Elemento específico al que hace referencia el elemento <c>name</c> proporcionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-119">The specific element that the provided <c>name</c> refers to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f305-120">Registra el nombre proporcionado en el ámbito de nombres XAML actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-120">Registers the provided name into the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f305-121">No se permiten nombres duplicados en un ámbito de nombres XAML.</span><span class="sxs-lookup"><span data-stu-id="9f305-121">Duplicate names in a XAML namescope are not permitted.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="9f305-122">
            <para>No se permiten nombres duplicados que se registrará. Si la entrada <paramref name="name" /> ya está asignado a un elemento existente en la representación de la colección interna del ámbito de nombres XAML (incluso si es igual a <paramref name="scopedElement" />), producirá una excepción.  Considere también la posibilidad de producir una excepción si el nombre proporcionado no se ajusta a [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-122">
              <para>Do not permit duplicate names to be registered. If the input <paramref name="name" /> is already assigned to an existing element in the internal collection representation of the XAML namescope (even if it is the same as <paramref name="scopedElement" />), throw an exception.  Also consider throwing an exception if the provided name does not conform to [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.INameScope.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit" Usage="iNameScope.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="9f305-123">Nombre cuyo registro se va a anular.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-123">The name to unregister.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f305-124">Anula el registro del nombre proporcionado en el ámbito de nombres XAML actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-124">Unregisters the provided name from the current XAML namescope.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="9f305-125">
            <para>Si el nombre de entrada no existe, se inicia una excepción.  Debe quitar el nombre y el elemento previamente registrado que se hace referencia a partir de la representación de la colección del ámbito de nombres XAML, para que el mismo nombre podría registrarse de nuevo en el futuro.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="9f305-125">
              <para>If the input name does not exist, throw an exception.  You should remove the name and the previously registered element it refers to from the collection representation of the XAML namescope, so that the same name could potentially be registered again in the future.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
  </Members>
</Type>