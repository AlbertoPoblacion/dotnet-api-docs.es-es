<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="55dd6cc03b82733e7cc9502b48929ccdfcd92546" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30656129" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Especifica que una propiedad o un tipo debe tratarse como ambiente. El concepto de ambiente se relaciona con la forma en que los procesadores XAML determinan los propietarios de tipos de los miembros.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una propiedad de ambiente es una propiedad donde se espera que el valor esté disponible en el contexto del analizador al crear un gráfico de objetos, pero donde se suspende la búsqueda típica de miembro de tipo para los fines de nodos XAML inmediato establecido que se está creando. Hay dos escenarios principales para el concepto de ambiente:  
  
-   Alguna otra propiedad del mismo objeto influye y califica cómo debería funcionar esa búsqueda de objetos y propiedades.  
  
-   La propiedad representa un mecanismo de aplazamiento mayor y amplían las capacidades de ambiente para buscar un valor de miembro a todos los objetos contenidos en el objeto actual.  
  
 Este atributo se puede aplicar a propiedades concretas que han esperado contenedores que habilitan un comportamiento de búsqueda de la propiedad de ambiente, o puede aplicarse a una clase para habilitar el comportamiento de la propiedad de ambiente en todos los casos de ese tipo de valor para una propiedad.  
  
 <xref:System.Windows.Markup.AmbientAttribute> También puede aplicarse a un método CLR, para admitir la atribución de una propiedad que se puede asociar XAML como ambiente. Esto es potencialmente necesario porque en una implementación de CLR una XAML propiedad adjunta se implementa/representa en la reflexión como un patrón de descriptor de acceso con `get` y `set` métodos. No existe ninguna propiedad CLR real al atributo, por lo que restringir el uso de <xref:System.AttributeTargets> a `Property` no habría habilitado la especificación de un miembro adjuntable como ambiente. Para un miembro adjuntable que desea notificar como ambiente, atributo el `get` descriptor de acceso. No debe intentar atribuir métodos que no son específicamente los métodos de compatibilidad de miembros que se puede asociar.  
  
 En versiones anteriores de .NET Framework, esta clase existía en el ensamblado específico de WPF WindowsBase. En [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.AmbientAttribute> en el ensamblado System.Xaml. Para obtener más información, consulte [tipos migrados de WPF a System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  
  
 Tipos de ambiente (tipos where <xref:System.Windows.Markup.AmbientAttribute> se aplica en el nivel de tipo) se puede utilizar para determinadas situaciones de procesamiento de XAML donde el tipo de una propiedad debe resolverse en el orden correcto.  
  
## <a name="object-writer-scenarios"></a>Escenarios del escritor de objetos  
 Si está definiendo un escritor de objetos XAML y se encuentra una propiedad, método o tipo donde <xref:System.Windows.Markup.AmbientAttribute> es aplican, normalmente debe acceder a un servicio para determinar el comportamiento de búsqueda de la propiedad de ambiente previsto que se necesita para la escritura de los objetos. Para obtener más información, vea <xref:System.Xaml.IAmbientProvider>.  
  
## <a name="value-converters"></a>Convertidores de valores  
 Extensiones de marcado o los convertidores de tipos que necesite conocer la información de ambiente para procesar las propiedades que representan asignaciones de tipo indirecta, como las propiedades que especifican los miembros o tipos por los nombres de cadena con o sin calificación. En este escenario, <xref:System.Windows.Markup.AmbientAttribute> no está diseñada para usarse directamente para la lógica de código del convertidor de valores. En su lugar, el convertidor de valores debe confiar en el comportamiento de procesamiento de escritor XAML, que pasará <xref:System.Xaml.IAmbientProvider> en sus contextos de servicio a los métodos de convertidor de valor cuando se llama.  
  
## <a name="wpf-scenarios-for-ambientattribute"></a>Escenarios WPF para AmbientAttribute  
  
-   Una propiedad de un <xref:System.Windows.Style> (<xref:System.Windows.Style.TargetType%2A>) puede calificar las búsquedas de nombre de propiedad necesarias que se necesitan para encontrar las referencias de respaldo para los nombres de propiedad en <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> valores.  
  
-   Todo el contenido dentro de un `Resources` propiedad (elementos de un <xref:System.Windows.ResourceDictionary>), así como contenido de la plantilla, debe poder tener acceso a otros pares como valores. Declarar toda la matriz `Resources` propiedad como ambiente invoca una lógica que hace posible que en el analizador de XAML de WPF.  
  
 Vea <xref:System.Windows.ResourceDictionary> para obtener un ejemplo de un escenario de configuración <xref:System.Windows.Markup.AmbientAttribute> en el nivel de tipo.  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Markup.AmbientAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>