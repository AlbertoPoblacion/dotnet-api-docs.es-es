<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f503716af7027995f4b99ecf18555121d08bc16" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39820302" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <TypeSignature Language="F#" Value="type MarkupExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proporciona una clase base para las implementaciones de extensión de marcado XAML que pueden ser compatibles con los servicios XAML de .NET Framework y otros lectores de XAML y escritores de XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las extensiones de marcado devuelven objetos a los llamadores, basados en la entrada de valores de atributo de cadena o elementos de marcado en XAML. Las extensiones de marcado devuelven objetos de una forma más sofisticada que pueden llevar a cabo los convertidores de tipos por sí solo. Un escritor de objetos XAML invoca un convertidor de tipos porque un tipo o miembro tiene una implementación de convertidor de tipo asociada con él. Desde el marco de referencia CLR, esto significa que es un tipo o miembro <xref:System.ComponentModel.TypeConverterAttribute> con atributos. Desde la perspectiva del sistema de tipo XAML, esto significa que un tipo XAML o un miembro XAML tiene un valor para su `TypeConverter` propiedad. La invocación de un convertidor de tipos está asociada a la definición de tipo o propiedad y siempre se invoca mediante XAML de procesamiento para estos casos. En cambio, una extensión de marcado es más bajo el control de código de usuario y el marcado generado por el usuario y puede aplicarse siempre que sea un escenario de aplicación así lo exige. Una extensión de marcado se puede invocar y se puede usar para configurar los valores de miembro de tipo diferentes, por lo que siempre y cuando el tipo de valor devuelto de la extensión de marcado es asignable a ese valor.  
  
 Para obtener información sobre cómo crear una extensión de marcado personalizada, consulte <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>. Para obtener más información sobre las extensiones de marcado en general, consulte [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md). Si va a compilar en WPF y usar o crear extensiones de marcado para XAML, se puede encontrar otra información relevante en el tema [extensiones de marcado y WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
 El <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> método de implementación de cada extensión de marcado puede utilizar un <xref:System.IServiceProvider> en tiempo de ejecución que puede proporcionar el contexto. Esto <xref:System.IServiceProvider> , a continuación, se consulta para servicios específicos que pasan información, tal como <xref:System.Windows.Markup.IProvideValueTarget> o <xref:System.Windows.Markup.IXamlTypeResolver>. Para obtener más información acerca de los contextos de servicio para una extensión de marcado, consulte [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).  
  
 Las clases derivadas deben atribuirse con <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> para informar a los consumidores del tipo de valor devuelto más específico de la extensión de marcado <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementación.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de una clase derivada de <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Windows.Markup.MarkupExtension> clase abstracta no contiene ningún valor privado que requiere inicialización.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Una extensión de marcado funcional debería definir su propio constructor predeterminado público. Además, la extensión de marcado debe implementar constructores que son adecuados para las capacidades de la extensión deseada y el uso de marcado. Para obtener más información, consulte [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member ProvideValue : IServiceProvider -&gt; obj" Usage="markupExtension.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Aplicación auxiliar del proveedor de servicios que puede prestar servicios para la extensión de marcado.</param>
        <summary>Cuando se implementa en una clase derivada, devuelve un objeto que se proporciona como el valor de la propiedad de destino para esta extensión de marcado.</summary>
        <returns>Valor de objeto que se va a establecer en la propiedad a la que se aplica la extensión.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un procesador XAML procesa un valor de nodo y miembro de tipo que es una extensión de marcado, invoca el <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> método de esa extensión de marcado y escribe el resultado en la secuencia de serialización o de gráfico de objeto. El escritor de objetos XAML pasa el contexto de servicio para cada implementación de ese tipo a través de la `serviceProvider` parámetro.  
  
 Consulte la sección "Notas para los implementadores" para obtener más información sobre cómo implementar <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> en una extensión de marcado personalizada.  
  
## <a name="wpf-usage-notes"></a>Notas de uso de WPF  
  
> [!IMPORTANT]
>  Las clases WPF que tienen interacciones específicas con las operaciones de conjunto de marcado no deben depender <xref:System.Windows.Markup.IReceiveMarkupExtension> para un [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementación. Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-devoluciones de llamada con atributos en su lugar.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Servicios comunes devueltos por el proveedor de servicio predeterminado que normalmente está disponible para una personalizada o existente <see cref="T:System.Windows.Markup.MarkupExtension" /> implementación incluyen los siguientes servicios primarios.  - <see cref="T:System.Windows.Markup.IProvideValueTarget" /> informa de la referencia de objeto y un identificador de propiedad del contexto donde se usa la extensión de marcado - <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> expone un servicio que se corresponde con el objeto XAML general escribir el comportamiento que puede proporcionar un <see cref="T:System.Type" /> según un XAML nombre de tipo. El nombre puede incluir opcionalmente un prefijo para un espacio de nombres XAML asignado.  - <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> expone directamente el contexto de esquema XAML activo. Desde el informe <see cref="T:System.Xaml.XamlSchemaContext" />, puede obtener XAML contexto información de esquema, muestra cómo se asignan los ensamblados para la compatibilidad con tipo, el prefijo preferido en ensamblados, de cada <see cref="T:System.Xaml.XamlType" /> en un ensamblado y así sucesivamente.  -Otros servicios disponibles para escenarios de extensión de marcado más especializados incluyen:- <see cref="T:System.Windows.Markup.IUriContext" />   
  
    -    <see cref="T:System.Xaml.IAmbientProvider" />   
  
    -    <see cref="T:System.Xaml.IDestinationTypeProvider" />   
  
    -    <see cref="T:System.Xaml.IRootObjectProvider" />   
  
    -    <see cref="T:System.Xaml.IXamlNameResolver" />   
  
    -    <see cref="T:System.Xaml.IXamlNamespaceResolver" /> Potencialmente, las implementaciones de <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> puede pasar por alto el <paramref name="serviceProvider" /> parámetro. Esto es viable para algunos escenarios básicos, donde ningún contexto en absoluto es necesario para devolver un valor.  En un uso típico, los servicios XAML de .NET Framework y el XAML implementado objeto escritores proporcionará a todos los métodos de convertidor de tipos de valor que se invocan durante XAML un proveedor de servicios de procesamiento. Sin embargo, para solidez, debe proporcionar las rutas de código para valores null para el propio proveedor de servicios y para cualquier servicio solicitado. Los valores null pueden producirse si se aplica la extensión de marcado en una circunstancia donde la compatibilidad de un servicio típico proporcionada por una infraestructura de procesador XAML no está disponible.  Para obtener más información sobre los servicios disponibles desde el contexto de proveedor de servicio XAML y cómo usarlas, vea [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).  Las implementaciones que requieren un determinado servicio esté disponible para generar un útil <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> resultado se espera para producir excepciones si dicho servicio no está disponible. La excepción recomendada es <see cref="T:System.InvalidOperationException" />.  La implementación también puede producir excepciones si uno de los argumentos que necesita la extensión de marcado personalizada con el fin de proporcionar un valor es null, no es válido para su tipo de datos o no contiene un valor que es capaz de procesamiento de la extensión de marcado. La excepción recomendada es <see cref="T:System.InvalidOperationException" />.</para>
        </block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
  </Members>
</Type>