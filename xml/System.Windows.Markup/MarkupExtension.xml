<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3746808349956fe51624132285df9c875558e01e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36502599" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <TypeSignature Language="F#" Value="type MarkupExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="88e56-101">Proporciona una clase base para las implementaciones de extensión de marcado XAML que pueden ser compatibles con los servicios XAML de .NET Framework y otros lectores de XAML y escritores de XAML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="88e56-101">Provides a base class for XAML markup extension implementations that can be supported by .NET Framework XAML Services and other XAML readers and XAML writers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88e56-102">Las extensiones de marcado devuelven objetos a los llamadores, basados en la entrada de valores de atributo de cadena o elementos de marcado en XAML.</span><span class="sxs-lookup"><span data-stu-id="88e56-102">Markup extensions return objects to callers, based on the input of string attribute values or markup elements in XAML.</span></span> <span data-ttu-id="88e56-103">Las extensiones de marcado devuelven objetos de una manera más sofisticada de convertidores de tipos solo pueden realizar.</span><span class="sxs-lookup"><span data-stu-id="88e56-103">Markup extensions return objects in a more sophisticated way than type converters alone can accomplish.</span></span> <span data-ttu-id="88e56-104">Un escritor de objetos XAML, invoca un convertidor de tipos porque un tipo o miembro tiene una implementación de convertidor de tipos asociada con él.</span><span class="sxs-lookup"><span data-stu-id="88e56-104">A XAML object writer invokes a type converter because a type or member has a type converter implementation associated with it.</span></span> <span data-ttu-id="88e56-105">Desde el marco de referencia CLR, esto significa que es un tipo o miembro <xref:System.ComponentModel.TypeConverterAttribute> con atributos.</span><span class="sxs-lookup"><span data-stu-id="88e56-105">From the CLR frame of reference, this means that a type or member is <xref:System.ComponentModel.TypeConverterAttribute> attributed.</span></span> <span data-ttu-id="88e56-106">Desde la perspectiva de sistema de tipos XAML, esto significa que un tipo XAML o un miembro XAML tiene un valor para su `TypeConverter` propiedad.</span><span class="sxs-lookup"><span data-stu-id="88e56-106">From the XAML type system perspective, this means that a XAML type or a XAML member has a value for its `TypeConverter` property.</span></span> <span data-ttu-id="88e56-107">La invocación de un convertidor de tipos está asociada a la definición de tipo o una propiedad y siempre se invoca con el procesamiento XAML para estos casos.</span><span class="sxs-lookup"><span data-stu-id="88e56-107">The invocation of a type converter is tied to the type or property definition, and is always invoked by XAML processing for these cases.</span></span> <span data-ttu-id="88e56-108">En cambio, una extensión de marcado es más bajo el control de código de usuario y el marcado generado por el usuario y puede aplicarse siempre que sea un escenario de aplicación lo requiera.</span><span class="sxs-lookup"><span data-stu-id="88e56-108">In contrast, a markup extension is more under the control of user code and user-produced markup, and can be applied whenever an application scenario demands it.</span></span> <span data-ttu-id="88e56-109">Una extensión de marcado se puede invocar y puede usarse para establecer valores de miembro de tipo diferente, por lo que siempre y cuando el tipo de valor devuelto de la extensión de marcado es asignable a ese valor.</span><span class="sxs-lookup"><span data-stu-id="88e56-109">A markup extension can be invoked and can be used for setting different type-member values, so long as the markup extension's return type is assignable to that value.</span></span>  
  
 <span data-ttu-id="88e56-110">Para obtener información acerca de cómo crear una extensión de marcado personalizada, consulte <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>.</span><span class="sxs-lookup"><span data-stu-id="88e56-110">For information on creating a custom markup extension, see <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>.</span></span> <span data-ttu-id="88e56-111">Para obtener más información sobre las extensiones de marcado en general, vea [extensiones de marcado para XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</span><span class="sxs-lookup"><span data-stu-id="88e56-111">For more information on markup extensions in general, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</span></span> <span data-ttu-id="88e56-112">Si está compilando en WPF y usando o creando las extensiones de marcado para XAML, otra información relevante puede encontrarse en el tema [las extensiones de marcado y XAML de WPF](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="88e56-112">If you are building on WPF and using or creating markup extensions for XAML, other relevant information can be found in the topic [Markup Extensions and WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).</span></span>  
  
 <span data-ttu-id="88e56-113">El <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> método de cada implementación de extensión de marcado puede utilizar un <xref:System.IServiceProvider> en tiempo de ejecución que puede proporcionar el contexto.</span><span class="sxs-lookup"><span data-stu-id="88e56-113">The <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of each markup extension implementation can use an <xref:System.IServiceProvider> at run time that can provide context.</span></span> <span data-ttu-id="88e56-114">Esto <xref:System.IServiceProvider> , a continuación, se consulta para servicios específicos que pasan información, como <xref:System.Windows.Markup.IProvideValueTarget> o <xref:System.Windows.Markup.IXamlTypeResolver>.</span><span class="sxs-lookup"><span data-stu-id="88e56-114">This  <xref:System.IServiceProvider> is then queried for specific services that pass information, such as <xref:System.Windows.Markup.IProvideValueTarget> or <xref:System.Windows.Markup.IXamlTypeResolver>.</span></span> <span data-ttu-id="88e56-115">Para obtener más información acerca de los contextos de servicio para una extensión de marcado, vea [contextos de servicio disponibles para los convertidores de tipos y extensiones de marcado](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).</span><span class="sxs-lookup"><span data-stu-id="88e56-115">For more information on service contexts for a markup extension, see [Service Contexts Available to Type Converters and Markup Extensions](~/docs/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions.md).</span></span>  
  
 <span data-ttu-id="88e56-116">Las clases derivadas se deberían atribuir con <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> para informar a los consumidores del tipo de valor devuelto más específico de la extensión de marcado <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementación.</span><span class="sxs-lookup"><span data-stu-id="88e56-116">Derived classes should be attributed with <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> to inform consumers of the most specific return type available from the markup extension's <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> implementation.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="88e56-117">Inicializa una nueva instancia de una clase derivada de <see cref="T:System.Windows.Markup.MarkupExtension" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="88e56-117">Initializes a new instance of a class derived from <see cref="T:System.Windows.Markup.MarkupExtension" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88e56-118">La <xref:System.Windows.Markup.MarkupExtension> clase abstracta no contiene ningún valor privado que requieren inicialización.</span><span class="sxs-lookup"><span data-stu-id="88e56-118">The <xref:System.Windows.Markup.MarkupExtension> abstract class does not hold any private values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="88e56-119">
            <para>Una extensión de marcado funcional debería definir su propio constructor predeterminado público. Además, la extensión de marcado debe implementar constructores que son adecuados para capacidades previsto de la extensión y el uso de marcado. Para obtener más información, consulte [Extensiones de marcado para XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="88e56-119">
              <para>A functional markup extension should define its own public default constructor. Additionally, the markup extension should implement constructors that are appropriate for the extension's intended capabilities and markup usage. For more information, see [Markup Extensions for XAML Overview](~/docs/framework/xaml-services/markup-extensions-for-xaml-overview.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member ProvideValue : IServiceProvider -&gt; obj" Usage="markupExtension.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">
          <span data-ttu-id="88e56-120">Aplicación auxiliar del proveedor de servicios que puede prestar servicios para la extensión de marcado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="88e56-120">A service provider helper that can provide services for the markup extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="88e56-121">Cuando se implementa en una clase derivada, devuelve un objeto que se proporciona como el valor de la propiedad de destino para esta extensión de marcado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="88e56-121">When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="88e56-122">Valor de objeto que se va a establecer en la propiedad a la que se aplica la extensión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="88e56-122">The object value to set on the property where the extension is applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88e56-123">Cuando un procesador XAML procesa un valor de nodo y miembro de tipo que es una extensión de marcado, invoca el <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> método de esa extensión de marcado y escribe el resultado en la secuencia de serialización o de gráfico de objeto.</span><span class="sxs-lookup"><span data-stu-id="88e56-123">When a XAML processor processes a type node and member value that is a markup extension, it invokes the <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> method of that markup extension and writes the result into the object graph or serialization stream.</span></span> <span data-ttu-id="88e56-124">El escritor de objetos XAML pasa el contexto de servicio para cada implementación de este tipo a través de la `serviceProvider` parámetro.</span><span class="sxs-lookup"><span data-stu-id="88e56-124">The XAML object writer passes service context to each such implementation through the `serviceProvider` parameter.</span></span>  
  
 <span data-ttu-id="88e56-125">Vea la sección "Notas para los implementadores" para obtener más información sobre cómo implementar <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> en una extensión de marcado personalizada.</span><span class="sxs-lookup"><span data-stu-id="88e56-125">See "Notes to Implementers" section for more information on how to implement <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> in a custom markup extension.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="88e56-126">Notas de uso de WPF</span><span class="sxs-lookup"><span data-stu-id="88e56-126">WPF Usage Notes</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="88e56-127">Las clases de WPF que tienen interacciones concretas con operaciones de conjunto de marcado no deben depender <xref:System.Windows.Markup.IReceiveMarkupExtension> para un [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementación.</span><span class="sxs-lookup"><span data-stu-id="88e56-127">WPF classes that have specific interactions with markup set operations should not rely on <xref:System.Windows.Markup.IReceiveMarkupExtension> for a [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] implementation.</span></span> <span data-ttu-id="88e56-128">Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-devoluciones de llamada con atributos en su lugar.</span><span class="sxs-lookup"><span data-stu-id="88e56-128">Use <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>-attributed callbacks instead.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="88e56-129">
            <para>Servicios comunes devueltos por el proveedor de servicio predeterminado que normalmente está disponible para una personalizada o existente <see cref="T:System.Windows.Markup.MarkupExtension" /> implementación incluye los siguientes servicios principales.  - <see cref="T:System.Windows.Markup.IProvideValueTarget" /> informa de la referencia de objeto y un identificador de la propiedad desde el contexto donde se utiliza la extensión de marcado - <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> expone un servicio que se asemeja a los objetos XAML general escribir el comportamiento que puede proporcionar un <see cref="T:System.Type" /> tomando como base un XAML nombre del tipo. El nombre puede incluir opcionalmente un prefijo para un espacio de nombres XAML asignado.  - <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> expone el contexto de esquema XAML activo directamente. Desde el informe <see cref="T:System.Xaml.XamlSchemaContext" />, puede obtener XAML esquema información de contexto tal como el modo de compatibilidad de tipos, el prefijo preferido en ensamblados, los ensamblados están asignados listas de cada <see cref="T:System.Xaml.XamlType" /> en un ensamblado y así sucesivamente.  -Otros servicios disponibles para escenarios de extensión de marcado más especializados incluyen:- <see cref="T:System.Windows.Markup.IUriContext" />   
  
    -    <see cref="T:System.Xaml.IAmbientProvider" />   
  
    -    <see cref="T:System.Xaml.IDestinationTypeProvider" />   
  
    -    <see cref="T:System.Xaml.IRootObjectProvider" />   
  
    -    <see cref="T:System.Xaml.IXamlNameResolver" />   
  
    -    <see cref="T:System.Xaml.IXamlNamespaceResolver" /> Potencialmente, las implementaciones de <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> puede pasar por alto el <paramref name="serviceProvider" /> parámetro. Esto es viable para algunos escenarios básicos, donde ningún contexto se requiere en absoluto para devolver un valor.  En un uso típico, los servicios XAML de .NET Framework y el XAML de implementada objeto escritores proporcionará un proveedor de servicios a todos los métodos de convertidor de valor que se invoquen durante XAML de procesamiento. Sin embargo, para solidez, debe proporcionar las rutas de código para valores null para el propio proveedor de servicios y para cualquier servicio solicitado. Valores nulos podrían existir si su extensión de marcado se aplica en un caso donde la compatibilidad del servicio típica proporcionada por una infraestructura de procesador XAML no está disponible.  Para obtener más información sobre los servicios disponibles desde el contexto de proveedor de servicio XAML y cómo utilizarlas, vea [convertidores de tipos y extensiones de marcado para XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).  Las implementaciones que requieren un servicio determinado esté disponible para generar un útil <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> resultado se espera que produzca excepciones si dicho servicio no está disponible. La excepción recomendada es <see cref="T:System.InvalidOperationException" />.  La implementación también puede producir excepciones si uno de los argumentos que necesita la extensión de marcado personalizada con el fin de proporcionar un valor es null, no es válido para su tipo de datos o no contiene un valor que es capaz de procesamiento de la extensión de marcado. La excepción recomendada es <see cref="T:System.InvalidOperationException" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="88e56-129">
              <para>Common services returned by the default service provider that is typically available to a custom or existing <see cref="T:System.Windows.Markup.MarkupExtension" /> implementation include the following primary services.  -   <see cref="T:System.Windows.Markup.IProvideValueTarget" /> reports the object reference and a property identifier from the context where the markup extension is used  -   <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> exposes a service that parallels the general XAML object writing behavior that can provide a <see cref="T:System.Type" /> based on a XAML type name. The name can optionally include a prefix for a mapped XAML namespace.  -   <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> exposes the active XAML schema context directly. From the reported <see cref="T:System.Xaml.XamlSchemaContext" />, you can obtain XAML schema context information such as how assemblies are mapped for type support, preferred prefix in assemblies, lists of each <see cref="T:System.Xaml.XamlType" /> in an assembly, and so on.  -   Other services available for more specialized markup extension scenarios include:  -   <see cref="T:System.Windows.Markup.IUriContext" />  
  
    -   <see cref="T:System.Xaml.IAmbientProvider" />  
  
    -   <see cref="T:System.Xaml.IDestinationTypeProvider" />  
  
    -   <see cref="T:System.Xaml.IRootObjectProvider" />  
  
    -   <see cref="T:System.Xaml.IXamlNameResolver" />  
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" />  Potentially, implementations of <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> can ignore the <paramref name="serviceProvider" /> parameter. This is viable for some basic scenarios, where no context at all is required for returning a value.  In typical usage, the .NET Framework XAML Services and the implemented XAML object writers will provide a service provider to all value converter methods that are invoked during XAML processing. However, for robustness, you should provide code paths for null values both for the service provider itself and for any requested service. Null values might occur if your markup extension is applied in a circumstance where the typical service support provided by a XAML processor infrastructure is not available.  For more information on available services from the XAML service provider context and how to use them, see [Type Converters and Markup Extensions for XAML](~/docs/framework/xaml-services/type-converters-and-markup-extensions-for-xaml.md).  Implementations that require a certain service to be available in order to produce a useful <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> result are expected to throw exceptions if that service is not available. The recommended exception to throw is <see cref="T:System.InvalidOperationException" />.  The implementation may also throw exceptions if one of the arguments that the custom markup extension needs in order to provide a value is null, is invalid for its data type, or does not contain a value that the markup extension is capable of processing. The recommended exception to throw is <see cref="T:System.InvalidOperationException" />.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
      </Docs>
    </Member>
  </Members>
</Type>