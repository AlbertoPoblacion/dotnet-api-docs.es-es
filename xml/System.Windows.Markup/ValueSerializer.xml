<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ValueSerializer.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5dfe7052738061deaaa68c30a6aaa5efc25671310.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dfe7052738061deaaa68c30a6aaa5efc25671310</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Abstract class that defines conversion behavior for serialization from an object representation.</source>
          <target state="translated">Clase abstracta que define el comportamiento de conversión para la serialización de una representación de objeto.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.</source>
          <target state="translated">La cadena que devuelve el convertidor para serialización debe ser pérdida menor y el convertidor siempre debe devolver la misma cadena de un valor determinado.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>If a type converter (derived from <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>) does not meet these requirements in its <ph id="ph2">`ConvertTo`</ph> implementations for string output, a custom <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> must be declared.</source>
          <target state="translated">Si un convertidor de tipos (derivado de <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>) no cumple estos requisitos en su <ph id="ph2">`ConvertTo`</ph> las implementaciones para la salida de cadena, un personalizado <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> debe declararse.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Either the <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> should meet the requirements, or a null <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> should be associated with the type.</source>
          <target state="translated">Ya sea la <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> debe cumplir los requisitos, o un valor null <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> debe estar asociado con el tipo.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is associated with a type by applying the <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attribute.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> está asociado a un tipo aplicando el <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> atributo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>A null <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> indicates the type converter should be ignored for convert-to-string conversions from the object graph.</source>
          <target state="translated">Un valor null <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> indica que se debe ignorar el convertidor de tipos para convertir a cadena conversiones del gráfico de objetos.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Implementation of <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> should avoid throwing exceptions.</source>
          <target state="translated">Implementación de <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> debe evitar producir excepciones.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Any exceptions thrown could terminate serialization.</source>
          <target state="translated">Las excepciones producidas pudieran finalizar la serialización.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source><ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> for a <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> and its APIs is analogous to <ph id="ph3">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph> for a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> para una <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> y sus API es análogo a <ph id="ph3">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph> para un <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>In fact, <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> inherits <ph id="ph2">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph>.</source>
          <target state="translated">De hecho, <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> hereda <ph id="ph2">&lt;xref:System.ComponentModel.ITypeDescriptorContext&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>When a <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services.</source>
          <target state="translated">Cuando un <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> se llama la API de la clase derivada, el llamador (normalmente un proceso de serializador) pasa un contexto que puede proporcionar ciertos servicios.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Because of the general guidance that a <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> must not throw exceptions.</source>
          <target state="translated">Debido a las instrucciones generales que un <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> no deben producir excepciones.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Failure to return a particular service from the context must also not throw any exceptions.</source>
          <target state="translated">Error al devolver un servicio determinado desde el contexto también debe no produce ninguna excepción.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</source>
          <target state="translated">En versiones anteriores de .NET Framework, esta clase existía en el ensamblado específico de WPF WindowsBase.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>In <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is in the System.Xaml assembly.</source>
          <target state="translated">En <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> en el ensamblado System.Xaml.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Markup.ValueSerializer">
          <source>For more information, see <bpt id="p1">[</bpt>Types Migrated from WPF to System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>tipos migrados de WPF a System.Xaml<ept id="p1">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.#ctor">
          <source>The body of this constructor is empty; the <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> class does not contain any values that require initialization.</source>
          <target state="translated">El cuerpo de este constructor está vacío; la <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> clase no contiene los valores que requieren inicialización.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>The string to evaluate for conversion.</source>
          <target state="translated">Cadena que se va a evaluar para la conversión.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Información contextual usada para la conversión.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>When overridden in a derived class, determines whether the specified <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> can be converted to an instance of the type that the implementation of <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> supports.</source>
          <target state="translated">Si se reemplaza en una clase derivada, determina si el elemento <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> especificado se puede convertir en una instancia del tipo que admite la implementación de <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the value can be converted; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el valor se puede convertir; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>The base implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">La implementación base siempre devuelve <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The object to evaluate for conversion.</source>
          <target state="translated">Objeto que se va a evaluar para la conversión.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Información contextual usada para la conversión.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>When overridden in a derived class, determines whether the specified object can be converted into a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">Si se reemplaza en una clase derivada, determina si el objeto especificado se puede convertir en una <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> can be converted into a <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false." /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si <ph id="ph2">&lt;paramref name="value" /&gt;</ph> se puede convertir en <ph id="ph3">&lt;see cref="T:System.String" /&gt;</ph>; en caso contrario, <ph id="ph4">&lt;see langword="false." /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The base implementation always returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">La implementación base siempre devuelve <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>The string to convert.</source>
          <target state="translated">Cadena que se va a convertir.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Información contextual usada para la conversión.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>When overridden in a derived class, converts a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> to an instance of the type that the implementation of <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> supports.</source>
          <target state="translated">Si se reemplaza en una clase derivada, convierte una <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> en una instancia del tipo que la implementación de <ph id="ph2">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> admite.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>A new instance of the type that the implementation of <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> supports based on the supplied <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">Nueva instancia del tipo que la implementación de <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> admite basada en el <ph id="ph2">&lt;paramref name="value" /&gt;</ph> proporcionado.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>The base implementation always throws an exception.</source>
          <target state="translated">La implementación base siempre produce una excepción.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no se puede convertir.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>Avoid throwing exceptions from implementations.</source>
          <target state="translated">Evitar producir excepciones de las implementaciones.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
          <source>See <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</source>
          <target state="translated">Vea <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The object to convert into a string.</source>
          <target state="translated">Objeto que se va a convertir en una cadena.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Información contextual usada para la conversión.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>When overridden in a derived class, converts the specified object to a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</source>
          <target state="translated">Si se reemplaza en una clase derivada, convierte el objeto especificado en una <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>A string representation of the specified object.</source>
          <target state="translated">Representación de cadena del objeto especificado.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The base implementation always throws an exception.</source>
          <target state="translated">La implementación base siempre produce una excepción.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> cannot be converted.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> no se puede convertir.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Avoid throwing exceptions from implementations.</source>
          <target state="translated">Evitar producir excepciones de las implementaciones.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>See <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</source>
          <target state="translated">Vea <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>The object that could not be converted.</source>
          <target state="translated">Objeto que no se pudo convertir.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>Returns an exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Devuelve una excepción que se debe iniciar cuando no se puede realizar una conversión.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> object for the exception to throw when a <ph id="ph2">&lt;see langword="ConvertFrom" /&gt;</ph> conversion cannot be performed.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> de la excepción que se va a iniciar cuando no se pueda realizar una conversión <ph id="ph2">&lt;see langword="ConvertFrom" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>The actual <ph id="ph1">`throw`</ph> keyword is not invoked by this method, therefore the typical usage is <ph id="ph2">`throw GetConvertFromException`</ph> (with parameters provided).</source>
          <target state="translated">Los datos reales <ph id="ph1">`throw`</ph> palabra clave no se invoca este método, por lo tanto, lo normal es <ph id="ph2">`throw GetConvertFromException`</ph> (con parámetros proporcionan).</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>The specific exception returned is <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, with <ph id="ph2">`value`</ph> passed in the exception message.</source>
          <target state="translated">La excepción concreta devuelto es <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, con <ph id="ph2">`value`</ph> pasa el mensaje de excepción.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
          <source>The pattern for usage is the same as for exception utilities in <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated">El patrón de uso es el mismo que las utilidades de excepción en <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>The object that could not be converted.</source>
          <target state="translated">Objeto que no se pudo convertir.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>A type that represents the type the conversion was trying to convert to.</source>
          <target state="translated">Tipo que representa el tipo al que la conversión se intentaba convertir.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>Returns an exception to throw when a conversion cannot be performed.</source>
          <target state="translated">Devuelve una excepción que se debe iniciar cuando no se puede realizar una conversión.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> object for the exception to throw when a <ph id="ph2">&lt;see langword="ConvertTo" /&gt;</ph> conversion cannot be performed.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> de la excepción que se va a iniciar cuando no se pueda realizar una conversión <ph id="ph2">&lt;see langword="ConvertTo" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>The actual <ph id="ph1">`throw`</ph> keyword is not invoked by this method, therefore the typical usage is <ph id="ph2">`throw GetConvertToException`</ph> (with <ph id="ph3">`value`</ph> parameter provided).</source>
          <target state="translated">Los datos reales <ph id="ph1">`throw`</ph> palabra clave no se invoca este método, por lo tanto, lo normal es <ph id="ph2">`throw GetConvertToException`</ph> (con <ph id="ph3">`value`</ph> parámetro proporcionado).</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>The specific exception returned is <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, with <ph id="ph2">`value`</ph> passed in the exception message.</source>
          <target state="translated">La excepción concreta devuelto es <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>, con <ph id="ph2">`value`</ph> pasa el mensaje de excepción.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
          <source>The pattern for usage is the same as for exception utilities in <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</source>
          <target state="translated">El patrón de uso es el mismo que las utilidades de excepción en <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="T:System.Windows.Markup.ValueSerializer">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> for an object.</source>
          <target state="translated">Obtiene el serializador <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> de un objeto.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The CLR property descriptor for the property to be serialized.</source>
          <target state="translated">El descriptor de propiedad CLR para la propiedad que se va a serializar.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declared for a property, by passing a CLR property descriptor for the property.</source>
          <target state="translated">Obtiene el serializador <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declarado de una propiedad pasando un descriptor de propiedad de CLR para la propiedad.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The serializer associated with the specified property.</source>
          <target state="translated">Serializador asociado a la propiedad especificada.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>May return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede devolver <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> for a property, or for a type that is used as the value for a property, is indicated by applying the <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attribute on the property or type declaration.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> para una propiedad o para un tipo que se utiliza como el valor de una propiedad, se indica mediante la aplicación de la <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> atributo en la declaración de propiedad o un tipo.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> method is a utility method that reads the CLR type system information and returns a new <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> class based on the attribute if found on the property, or then if found on the property's type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> método es un método de utilidad que lee la información de sistema de tipos CLR y devuelve un nuevo <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> clase basada en el atributo si se encuentra en la propiedad y, a continuación, si se encuentra en el tipo de propiedad.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source><ph id="ph1">`null`</ph> might be returned if no such serializer exists.</source>
          <target state="translated"><ph id="ph1">`null`</ph> se podrían devolver si no existiera el serializador.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source><ph id="ph1">`null`</ph> might also be returned if a type or property is deliberately attributed with a null-value <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph> También podría mostrarse si un tipo o una propiedad se atribuye deliberadamente con un valor null <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>Another mode that <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> supports is returning the internal <ph id="ph2">`TypeConverterValueSerializer`</ph> class, which is a <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementation that wraps a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> and translates the <ph id="ph5">`Convert`</ph> methods to <ph id="ph6">`Convert*String`</ph> methods (for instance <ph id="ph7">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph> is called with input of the <ph id="ph8">&lt;xref:System.String&gt;</ph> type, and translates to <ph id="ph9">&lt;xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A&gt;</ph>.</source>
          <target state="translated">Otro modo que <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> admite está devolviendo interno <ph id="ph2">`TypeConverterValueSerializer`</ph> (clase), que es un <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementación que contiene un <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> y traduce el <ph id="ph5">`Convert`</ph> métodos para <ph id="ph6">`Convert*String`</ph> métodos (para la instancia <ph id="ph7">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph> se llama con una entrada de la <ph id="ph8">&lt;xref:System.String&gt;</ph> escriba y se convierte en <ph id="ph9">&lt;xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>This is done only in cases where all of the following are true:</source>
          <target state="translated">Esto se realiza solo en casos donde todos los elementos siguientes son verdaderas:</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> is found on the relevant property, or the relevant property's type.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> se encuentra en la propiedad pertinente o el tipo de la propiedad relevante.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The indicated <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> can be successfully constructed.</source>
          <target state="translated">El functoid <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> se puede construir correctamente.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> devuelve <ph id="ph2">`true`</ph> para <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>, llamado que hacen referencia a la <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> devuelve <ph id="ph2">`true`</ph> para <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType&gt;</ph>, llamado que hacen referencia a la <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> devuelve <ph id="ph2">`true`</ph> para <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType&gt;</ph>, llamado que hacen referencia a la <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source>The following are special cases: <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> types return a <ph id="ph2">&lt;xref:System.Windows.Markup.DateTimeValueSerializer&gt;</ph>; <ph id="ph3">&lt;xref:System.String&gt;</ph> types return an internal but functional serializer (<ph id="ph4">`StringValueSerializer`</ph>).</source>
          <target state="translated">Los siguientes son casos especiales: <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> tipos devuelven un <ph id="ph2">&lt;xref:System.Windows.Markup.DateTimeValueSerializer&gt;</ph>; <ph id="ph3">&lt;xref:System.String&gt;</ph> tipos devuelven un serializador interno pero funcional (<ph id="ph4">`StringValueSerializer`</ph>).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
          <source><ph id="ph1">&lt;paramref name="descriptor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="descriptor" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The type to get the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> for.</source>
          <target state="translated">Tipo para el que se va a obtener el serializador <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declared for the specified type.</source>
          <target state="translated">Obtiene el serializador <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declarado para el tipo especificado.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The serializer associated with the specified type.</source>
          <target state="translated">Serializador asociado al tipo especificado.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>May return <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede devolver <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> for a type is indicated by applying the <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> attribute on the type declaration.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> para un tipo se indica aplicando el <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph> atributo en la declaración de tipos.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> method is a utility method that reads the CLR type system information and returns a new <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> class based on the attribute if found on the specified <ph id="ph3">`type`</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> método es un método de utilidad que lee la información de sistema de tipos CLR y devuelve un nuevo <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> clase basada en el atributo si se encuentra en las clases <ph id="ph3">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source><ph id="ph1">`null`</ph> might be returned if no such serializer exists.</source>
          <target state="translated"><ph id="ph1">`null`</ph> se podrían devolver si no existiera el serializador.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source><ph id="ph1">`null`</ph> might also be returned if a type is deliberately attributed with a null-value <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph> También podría mostrarse si un tipo tiene el atributo deliberadamente con un valor null <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializerAttribute&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>Another mode that <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> supports is returning the internal <ph id="ph2">`TypeConverterValueSerializer`</ph> class, which is a <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementation that wraps a <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> and translates the <ph id="ph5">`Convert`</ph> methods to <ph id="ph6">`Convert*String`</ph> methods (for instance <ph id="ph7">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph> is called with input of the <ph id="ph8">&lt;xref:System.String&gt;</ph> type, and translates to <ph id="ph9">&lt;xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A&gt;</ph>.</source>
          <target state="translated">Otro modo que <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A&gt;</ph> admite está devolviendo interno <ph id="ph2">`TypeConverterValueSerializer`</ph> (clase), que es un <ph id="ph3">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> implementación que contiene un <ph id="ph4">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> y traduce el <ph id="ph5">`Convert`</ph> métodos para <ph id="ph6">`Convert*String`</ph> métodos (para la instancia <ph id="ph7">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph> se llama con una entrada de la <ph id="ph8">&lt;xref:System.String&gt;</ph> escriba y se convierte en <ph id="ph9">&lt;xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>This is done only in cases where all of the following are true:</source>
          <target state="translated">Esto se realiza solo en casos donde todos los elementos siguientes son verdaderas:</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> is found on <ph id="ph2">`type`</ph>.</source>
          <target state="translated">A <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverterAttribute&gt;</ph> se encuentra en <ph id="ph2">`type`</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The indicated <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> can be successfully constructed.</source>
          <target state="translated">El functoid <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> se puede construir correctamente.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> devuelve <ph id="ph2">`true`</ph> para <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType&gt;</ph>, llamado que hacen referencia a la <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> devuelve <ph id="ph2">`true`</ph> para <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType&gt;</ph>, llamado que hacen referencia a la <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> returns <ph id="ph2">`true`</ph> for <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType&gt;</ph>, called referencing the <ph id="ph4">&lt;xref:System.String&gt;</ph> type.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.ComponentModel.TypeConverter&gt;</ph> devuelve <ph id="ph2">`true`</ph> para <ph id="ph3">&lt;xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType&gt;</ph>, llamado que hacen referencia a la <ph id="ph4">&lt;xref:System.String&gt;</ph> tipo.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source>The following are special cases: <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> types return a <ph id="ph2">&lt;xref:System.Windows.Markup.DateTimeValueSerializer&gt;</ph>; <ph id="ph3">&lt;xref:System.String&gt;</ph> types return an internal but functional serializer (<ph id="ph4">`StringValueSerializer`</ph>).</source>
          <target state="translated">Los siguientes son casos especiales: <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> tipos devuelven un <ph id="ph2">&lt;xref:System.Windows.Markup.DateTimeValueSerializer&gt;</ph>; <ph id="ph3">&lt;xref:System.String&gt;</ph> tipos devuelven un serializador interno pero funcional (<ph id="ph4">`StringValueSerializer`</ph>).</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>Descriptor for the property to be serialized.</source>
          <target state="translated">Descriptor de la propiedad que se va a serializar.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Información contextual usada para la conversión.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declared for the specified property, using the specified context.</source>
          <target state="translated">Obtiene el serializador <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declarado para la propiedad especificada, utilizando el contexto especificado.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>The serializer associated with the specified property.</source>
          <target state="translated">Serializador asociado a la propiedad especificada.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>Rather than relying purely on attributes reported in the CLR type system, this overload uses the <ph id="ph1">`context`</ph> as a service, and calls the service's implementation of <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">En lugar de confiar exclusivamente en notifican los atributos en el sistema de tipos CLR, esta sobrecarga utiliza el <ph id="ph1">`context`</ph> como un servicio y llama a la implementación del servicio de <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> implementation would typically also rely on the <ph id="ph2">`descriptor`</ph>, but might implement special behavior for certain contexts.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> implementación confiaría normalmente también en el <ph id="ph2">`descriptor`</ph>, pero podría implementar un comportamiento especial en ciertos contextos.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>This method should be called when the caller has an available <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> from a service.</source>
          <target state="translated">Debe llamar a este método cuando el llamador tiene una disposición <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> de un servicio.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>This will ensure that the correct <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is returned for the specific context.</source>
          <target state="translated">Esto garantizará que el valor correcto <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> se devuelve para el contexto especificado.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source>If the context returns <ph id="ph1">`null`</ph> from its <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> for your specified <ph id="ph3">`descriptor`</ph>, or if the context you specify is <ph id="ph4">`null`</ph>, then behavior is identical to calling the <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29&gt;</ph> overload.</source>
          <target state="translated">Si el contexto devuelve <ph id="ph1">`null`</ph> desde su <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> para el elemento especificado <ph id="ph3">`descriptor`</ph>, o si el contexto se especifica es <ph id="ph4">`null`</ph>, a continuación, el comportamiento es idéntico a llamar a la <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29&gt;</ph> sobrecarga.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;paramref name="descriptor" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="descriptor" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>The type to get the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> for.</source>
          <target state="translated">Tipo para el que se va a obtener el serializador <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Información contextual usada para la conversión.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declared for the specified type, using the specified context.</source>
          <target state="translated">Obtiene el serializador <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph> declarado para el tipo especificado que utiliza el contexto indicado.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>The serializer associated with the specified type.</source>
          <target state="translated">Serializador asociado al tipo especificado.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>Rather than relying purely on attributes reported in the CLR type system, this overload uses the <ph id="ph1">`context`</ph> as a service, and calls the service's implementation of <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">En lugar de confiar exclusivamente en notifican los atributos en el sistema de tipos CLR, esta sobrecarga utiliza el <ph id="ph1">`context`</ph> como un servicio y llama a la implementación del servicio de <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> implementation would typically also rely on the <ph id="ph2">`type`</ph>, but might implement special behavior for certain contexts.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> implementación confiaría normalmente también en el <ph id="ph2">`type`</ph>, pero podría implementar un comportamiento especial en ciertos contextos.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>This method should be called when the caller has an available <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> from a service.</source>
          <target state="translated">Debe llamar a este método cuando el llamador tiene una disposición <ph id="ph1">&lt;xref:System.Windows.Markup.IValueSerializerContext&gt;</ph> de un servicio.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>This will ensure that the correct <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> is returned for the specific context.</source>
          <target state="translated">Esto garantizará que el valor correcto <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> se devuelve para el contexto especificado.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source>If the context returns <ph id="ph1">`null`</ph> from its <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> for your specified <ph id="ph3">`type`</ph>, or if the context you specify is <ph id="ph4">`null`</ph>, then behavior is identical to calling the <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29&gt;</ph> overload.</source>
          <target state="translated">Si el contexto devuelve <ph id="ph1">`null`</ph> desde su <ph id="ph2">&lt;xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType&gt;</ph> para el elemento especificado <ph id="ph3">`type`</ph>, o si el contexto se especifica es <ph id="ph4">`null`</ph>, a continuación, el comportamiento es idéntico a llamar a la <ph id="ph5">&lt;xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29&gt;</ph> sobrecarga.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The value being serialized.</source>
          <target state="translated">Valor que se serializa.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Context information that is used for conversion.</source>
          <target state="translated">Información contextual usada para la conversión.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Gets an enumeration of the types referenced by the <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</source>
          <target state="translated">Obtiene una enumeración de los tipos a los que hace referencia <ph id="ph1">&lt;see cref="T:System.Windows.Markup.ValueSerializer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The types converted by this serializer.</source>
          <target state="translated">Tipos convertidos por este serializador.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Any types a <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> converts should be included in the returned enumeration.</source>
          <target state="translated">Los tipos de un <ph id="ph1">&lt;xref:System.Windows.Markup.ValueSerializer&gt;</ph> convierte debe incluirse en la enumeración devuelta.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.</source>
          <target state="translated">Esto permite a un serializador para asegurarse de que un deserializador tiene suficiente información acerca de los tipos que este serializador convierte.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Overriding this method is an advanced scenario.</source>
          <target state="translated">Invalidación de este método es un escenario avanzado.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.</source>
          <target state="translated">Invalidar solo debería ser necesario si va a implementar un sistema donde CLR tipo sistema ownertype las relaciones y propiedades disponibles para un contexto de esquema XAML no notifican suficiente información.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>WPF Usage Notes</source>
          <target state="translated">Notas de uso de WPF</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source>The <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> property system implements an internal value serializer that overrides <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A&gt;</ph> because a dependency property has a concept that it can have added owners.</source>
          <target state="translated">El <ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> sistema de propiedad implementa un serializador de valor interno que invalida <ph id="ph2">&lt;xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A&gt;</ph> debido a una propiedad de dependencia tiene un concepto que puede haber agregado propietarios.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
          <source><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> expressions also have special internal handling.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> las expresiones también tienen control interno especial.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>