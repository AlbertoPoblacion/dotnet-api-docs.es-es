<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="258ed704368bcfb2f89872500ab73ca32065cf4b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39915953" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="00b22-101">Clase abstracta que define el comportamiento de conversión para la serialización de una representación de objeto.</span>
      <span class="sxs-lookup">
        <span data-stu-id="00b22-101">Abstract class that defines conversion behavior for serialization from an object representation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-102">La cadena que devuelve un convertidor de tipos para la serialización debe ser menor de pérdida y el convertidor siempre debe devolver la misma cadena de un valor determinado.</span><span class="sxs-lookup"><span data-stu-id="00b22-102">The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.</span></span>  <span data-ttu-id="00b22-103">Si un convertidor de tipos (derivado de <xref:System.ComponentModel.TypeConverter>) no cumple estos requisitos en su `ConvertTo` implementaciones para la salida de la cadena, un personalizado <xref:System.Windows.Markup.ValueSerializer> debe declararse.</span><span class="sxs-lookup"><span data-stu-id="00b22-103">If a type converter (derived from <xref:System.ComponentModel.TypeConverter>) does not meet these requirements in its `ConvertTo` implementations for string output, a custom <xref:System.Windows.Markup.ValueSerializer> must be declared.</span></span> <span data-ttu-id="00b22-104">Ya sea el <xref:System.Windows.Markup.ValueSerializer> debe cumplir los requisitos, o un valor null <xref:System.Windows.Markup.ValueSerializer> debe asociarse con el tipo.</span><span class="sxs-lookup"><span data-stu-id="00b22-104">Either the <xref:System.Windows.Markup.ValueSerializer> should meet the requirements, or a null <xref:System.Windows.Markup.ValueSerializer> should be associated with the type.</span></span> <span data-ttu-id="00b22-105">Un <xref:System.Windows.Markup.ValueSerializer> está asociado con un tipo aplicando el <xref:System.Windows.Markup.ValueSerializerAttribute> atributo.</span><span class="sxs-lookup"><span data-stu-id="00b22-105">A <xref:System.Windows.Markup.ValueSerializer> is associated with a type by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute.</span></span>  
  
 <span data-ttu-id="00b22-106">Un valor null <xref:System.Windows.Markup.ValueSerializer> indica que se debe omitir el convertidor de tipos para convertir a cadena conversiones del gráfico de objetos.</span><span class="sxs-lookup"><span data-stu-id="00b22-106">A null <xref:System.Windows.Markup.ValueSerializer> indicates the type converter should be ignored for convert-to-string conversions from the object graph.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="00b22-107">Implementación de <xref:System.Windows.Markup.ValueSerializer> debe evitar generar excepciones.</span><span class="sxs-lookup"><span data-stu-id="00b22-107">Implementation of <xref:System.Windows.Markup.ValueSerializer> should avoid throwing exceptions.</span></span> <span data-ttu-id="00b22-108">Las excepciones producidas podrían finalizar la serialización.</span><span class="sxs-lookup"><span data-stu-id="00b22-108">Any exceptions thrown could terminate serialization.</span></span>  
  
 <span data-ttu-id="00b22-109"><xref:System.Windows.Markup.IValueSerializerContext> para un <xref:System.Windows.Markup.ValueSerializer> y sus API es análogo a <xref:System.ComponentModel.ITypeDescriptorContext> para un <xref:System.ComponentModel.TypeConverter>.</span><span class="sxs-lookup"><span data-stu-id="00b22-109"><xref:System.Windows.Markup.IValueSerializerContext> for a <xref:System.Windows.Markup.ValueSerializer> and its APIs is analogous to <xref:System.ComponentModel.ITypeDescriptorContext> for a <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="00b22-110">De hecho, <xref:System.Windows.Markup.IValueSerializerContext> hereda <xref:System.ComponentModel.ITypeDescriptorContext>.</span><span class="sxs-lookup"><span data-stu-id="00b22-110">In fact, <xref:System.Windows.Markup.IValueSerializerContext> inherits <xref:System.ComponentModel.ITypeDescriptorContext>.</span></span> <span data-ttu-id="00b22-111">Cuando un <xref:System.Windows.Markup.ValueSerializer> se llama a la API de la clase derivada, el llamador (normalmente un proceso de serializador) pasa un contexto que puede proporcionar ciertos servicios.</span><span class="sxs-lookup"><span data-stu-id="00b22-111">When a <xref:System.Windows.Markup.ValueSerializer> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services.</span></span> <span data-ttu-id="00b22-112">Debido a las instrucciones generales que un <xref:System.Windows.Markup.ValueSerializer> no deben producir excepciones.</span><span class="sxs-lookup"><span data-stu-id="00b22-112">Because of the general guidance that a <xref:System.Windows.Markup.ValueSerializer> must not throw exceptions.</span></span> <span data-ttu-id="00b22-113">Error al devolver un servicio determinado desde el contexto también debe no produce ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="00b22-113">Failure to return a particular service from the context must also not throw any exceptions.</span></span>  
  
 <span data-ttu-id="00b22-114">En versiones anteriores de .NET Framework, esta clase existía en el ensamblado específico de WPF WindowsBase.</span><span class="sxs-lookup"><span data-stu-id="00b22-114">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="00b22-115">En [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> está en el ensamblado System.Xaml.</span><span class="sxs-lookup"><span data-stu-id="00b22-115">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> is in the System.Xaml assembly.</span></span> <span data-ttu-id="00b22-116">Para obtener más información, consulte [tipos migrados de WPF a System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span><span class="sxs-lookup"><span data-stu-id="00b22-116">For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00b22-117">Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-117">Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-118">El cuerpo de este constructor está vacío; la <xref:System.Windows.Markup.ValueSerializer> clase no tiene ningún valor que requieren inicialización.</span><span class="sxs-lookup"><span data-stu-id="00b22-118">The body of this constructor is empty; the <xref:System.Windows.Markup.ValueSerializer> class does not contain any values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="00b22-119">Cadena que se va a evaluar para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-119">The string to evaluate for conversion.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="00b22-120">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-120">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-121">Si se reemplaza en una clase derivada, determina si el elemento <see cref="T:System.String" /> especificado se puede convertir en una instancia del tipo que admite la implementación de <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-121">When overridden in a derived class, determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-122">
            <see langword="true" /> si el valor se puede convertir; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-122">
              <see langword="true" /> if the value can be converted; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-123">La implementación base siempre devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="00b22-123">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="00b22-124">Objeto que se va a evaluar para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-124">The object to evaluate for conversion.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="00b22-125">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-125">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-126">Si se reemplaza en una clase derivada, determina si el objeto especificado se puede convertir en una <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-126">When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-127">
            <see langword="true" /> si <paramref name="value" /> se puede convertir en <see cref="T:System.String" />; en caso contrario, <see langword="false." />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-127">
              <see langword="true" /> if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false." /></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-128">La implementación base siempre devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="00b22-128">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="00b22-129">Cadena que se va a convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-129">The string to convert.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="00b22-130">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-130">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-131">Si se reemplaza en una clase derivada, convierte una <see cref="T:System.String" /> en una instancia del tipo que la implementación de <see cref="T:System.Windows.Markup.ValueSerializer" /> admite.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-131">When overridden in a derived class, converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-132">Nueva instancia del tipo que la implementación de <see cref="T:System.Windows.Markup.ValueSerializer" /> admite basada en el <paramref name="value" /> proporcionado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-132">A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-133">La implementación base siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="00b22-133">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="00b22-134">
            <paramref name="value" /> no se puede convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-134">
              <paramref name="value" /> cannot be converted.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="00b22-135">
            <para>Evitar producir excepciones de las implementaciones. Consulte <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-135">
              <para>Avoid throwing exceptions from implementations. See <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="00b22-136">Objeto que se va a convertir en una cadena.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-136">The object to convert into a string.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="00b22-137">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-137">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-138">Si se reemplaza en una clase derivada, convierte el objeto especificado en una <see cref="T:System.String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-138">When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-139">Representación de cadena del objeto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-139">A string representation of the specified object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-140">La implementación base siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="00b22-140">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="00b22-141">
            <paramref name="value" /> no se puede convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-141">
              <paramref name="value" /> cannot be converted.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="00b22-142">
            <para>Evitar producir excepciones de las implementaciones. Consulte <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-142">
              <para>Avoid throwing exceptions from implementations. See <see cref="T:System.Windows.Markup.ValueSerializer" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="00b22-143">Objeto que no se pudo convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-143">The object that could not be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-144">Devuelve una excepción que se debe iniciar cuando no se puede realizar una conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-144">Returns an exception to throw when a conversion cannot be performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-145">Objeto <see cref="T:System.Exception" /> de la excepción que se va a iniciar cuando no se pueda realizar una conversión <see langword="ConvertFrom" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-145">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertFrom" /> conversion cannot be performed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-146">Real `throw` palabra clave no se invoca este método, por lo tanto, el uso típico es `throw GetConvertFromException` (con los parámetros proporcionados).</span><span class="sxs-lookup"><span data-stu-id="00b22-146">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertFromException` (with parameters provided).</span></span>  
  
 <span data-ttu-id="00b22-147">La excepción específica devuelto es <xref:System.InvalidOperationException>, con `value` pasa el mensaje de excepción.</span><span class="sxs-lookup"><span data-stu-id="00b22-147">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="00b22-148">El patrón de uso es el mismo que las utilidades de excepción en <xref:System.ComponentModel.TypeConverter>.</span><span class="sxs-lookup"><span data-stu-id="00b22-148">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="00b22-149">Objeto que no se pudo convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-149">The object that could not be converted.</span>
          </span>
        </param>
        <param name="destinationType">
          <span data-ttu-id="00b22-150">Tipo que representa el tipo al que la conversión se intentaba convertir.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-150">A type that represents the type the conversion was trying to convert to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-151">Devuelve una excepción que se debe iniciar cuando no se puede realizar una conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-151">Returns an exception to throw when a conversion cannot be performed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-152">Objeto <see cref="T:System.Exception" /> de la excepción que se va a iniciar cuando no se pueda realizar una conversión <see langword="ConvertTo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-152">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertTo" /> conversion cannot be performed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-153">Real `throw` palabra clave no se invoca este método, por lo tanto, el uso típico es `throw GetConvertToException` (con `value` parámetro proporcionado).</span><span class="sxs-lookup"><span data-stu-id="00b22-153">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertToException` (with `value` parameter provided).</span></span>  
  
 <span data-ttu-id="00b22-154">La excepción específica devuelto es <xref:System.InvalidOperationException>, con `value` pasa el mensaje de excepción.</span><span class="sxs-lookup"><span data-stu-id="00b22-154">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="00b22-155">El patrón de uso es el mismo que las utilidades de excepción en <xref:System.ComponentModel.TypeConverter>.</span><span class="sxs-lookup"><span data-stu-id="00b22-155">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00b22-156">Obtiene el serializador <see cref="T:System.Windows.Markup.ValueSerializer" /> de un objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-156">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> for an object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">
          <span data-ttu-id="00b22-157">El descriptor de propiedad CLR para la propiedad que se va a serializar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-157">The CLR property descriptor for the property to be serialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-158">Obtiene el serializador <see cref="T:System.Windows.Markup.ValueSerializer" /> declarado de una propiedad pasando un descriptor de propiedad de CLR para la propiedad.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-158">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for a property, by passing a CLR property descriptor for the property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-159">Serializador asociado a la propiedad especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-159">The serializer associated with the specified property.</span>
          </span>
          <span data-ttu-id="00b22-160">Puede devolver <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-160">May return <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-161">Un <xref:System.Windows.Markup.ValueSerializer> para una propiedad o un tipo que se utiliza como el valor para una propiedad, se indica mediante la aplicación de la <xref:System.Windows.Markup.ValueSerializerAttribute> atributo en la declaración de propiedad o tipo.</span><span class="sxs-lookup"><span data-stu-id="00b22-161">A <xref:System.Windows.Markup.ValueSerializer> for a property, or for a type that is used as the value for a property, is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the property or type declaration.</span></span> <span data-ttu-id="00b22-162">El <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> método es un método de utilidad que lee la información de sistema de tipos CLR y devuelve un nuevo <xref:System.Windows.Markup.ValueSerializer> clase se basa en el atributo si se encuentran en la propiedad, o si, a continuación, se encuentra en el tipo de propiedad.</span><span class="sxs-lookup"><span data-stu-id="00b22-162">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the property, or then if found on the property's type.</span></span> <span data-ttu-id="00b22-163">`null` se podría devolver si no existiera el serializador.</span><span class="sxs-lookup"><span data-stu-id="00b22-163">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="00b22-164">`null` También se podría devolver si se atribuye deliberadamente un tipo o una propiedad con un valor null <xref:System.Windows.Markup.ValueSerializerAttribute>.</span><span class="sxs-lookup"><span data-stu-id="00b22-164">`null` might also be returned if a type or property is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="00b22-165">Otro modo que <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> admite devuelve interno `TypeConverterValueSerializer` (clase), que es un <xref:System.Windows.Markup.ValueSerializer> implementación que ajusta un <xref:System.ComponentModel.TypeConverter> y traduce el `Convert` métodos para `Convert*String` métodos (por ejemplo <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>se llama con la entrada de la <xref:System.String> escriba y se convierte en <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="00b22-165">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="00b22-166">Esto se realiza solo en casos donde todos los elementos siguientes son verdaderas:</span><span class="sxs-lookup"><span data-stu-id="00b22-166">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="00b22-167">Un <xref:System.ComponentModel.TypeConverterAttribute> se encuentra en la propiedad correspondiente o tipo de la propiedad relevante.</span><span class="sxs-lookup"><span data-stu-id="00b22-167">A <xref:System.ComponentModel.TypeConverterAttribute> is found on the relevant property, or the relevant property's type.</span></span>  
  
-   <span data-ttu-id="00b22-168">El texto indicado <xref:System.ComponentModel.TypeConverter> puede crearse correctamente.</span><span class="sxs-lookup"><span data-stu-id="00b22-168">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="00b22-169">El <xref:System.ComponentModel.TypeConverter> devuelve `true` para <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, llamado que hacen referencia a la <xref:System.String> tipo.</span><span class="sxs-lookup"><span data-stu-id="00b22-169">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="00b22-170">El <xref:System.ComponentModel.TypeConverter> devuelve `true` para <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, llamado que hacen referencia a la <xref:System.String> tipo.</span><span class="sxs-lookup"><span data-stu-id="00b22-170">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="00b22-171">El <xref:System.ComponentModel.TypeConverter> devuelve `true` para <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, llamado que hacen referencia a la <xref:System.String> tipo.</span><span class="sxs-lookup"><span data-stu-id="00b22-171">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00b22-172">Los siguientes son casos especiales: <xref:System.DateTime> tipos devuelven un <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> tipos devuelven un serializador interno pero funcional (`StringValueSerializer`).</span><span class="sxs-lookup"><span data-stu-id="00b22-172">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00b22-173">
            <paramref name="descriptor" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-173">
              <paramref name="descriptor" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="00b22-174">Tipo para el que se va a obtener el serializador <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-174">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-175">Obtiene el serializador <see cref="T:System.Windows.Markup.ValueSerializer" /> declarado para el tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-175">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-176">Serializador asociado al tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-176">The serializer associated with the specified type.</span>
          </span>
          <span data-ttu-id="00b22-177">Puede devolver <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-177">May return <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-178">Un <xref:System.Windows.Markup.ValueSerializer> para un tipo se indica aplicando el <xref:System.Windows.Markup.ValueSerializerAttribute> atributo en la declaración de tipos.</span><span class="sxs-lookup"><span data-stu-id="00b22-178">A <xref:System.Windows.Markup.ValueSerializer> for a type is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the type declaration.</span></span> <span data-ttu-id="00b22-179">El <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> método es un método de utilidad que lee la información de sistema de tipos CLR y devuelve un nuevo <xref:System.Windows.Markup.ValueSerializer> clase se basa en el atributo si se encuentra en el objeto `type`.</span><span class="sxs-lookup"><span data-stu-id="00b22-179">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the specified `type`.</span></span> <span data-ttu-id="00b22-180">`null` se podría devolver si no existiera el serializador.</span><span class="sxs-lookup"><span data-stu-id="00b22-180">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="00b22-181">`null` También podría mostrarse si un tipo se atribuye deliberadamente con un valor null <xref:System.Windows.Markup.ValueSerializerAttribute>.</span><span class="sxs-lookup"><span data-stu-id="00b22-181">`null` might also be returned if a type is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="00b22-182">Otro modo que <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> admite devuelve interno `TypeConverterValueSerializer` (clase), que es un <xref:System.Windows.Markup.ValueSerializer> implementación que ajusta un <xref:System.ComponentModel.TypeConverter> y traduce el `Convert` métodos para `Convert*String` métodos (por ejemplo <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>se llama con la entrada de la <xref:System.String> escriba y se convierte en <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span><span class="sxs-lookup"><span data-stu-id="00b22-182">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="00b22-183">Esto se realiza solo en casos donde todos los elementos siguientes son verdaderas:</span><span class="sxs-lookup"><span data-stu-id="00b22-183">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="00b22-184">Un <xref:System.ComponentModel.TypeConverterAttribute> se encuentra en `type`.</span><span class="sxs-lookup"><span data-stu-id="00b22-184">A <xref:System.ComponentModel.TypeConverterAttribute> is found on `type`.</span></span>  
  
-   <span data-ttu-id="00b22-185">El texto indicado <xref:System.ComponentModel.TypeConverter> puede crearse correctamente.</span><span class="sxs-lookup"><span data-stu-id="00b22-185">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="00b22-186">El <xref:System.ComponentModel.TypeConverter> devuelve `true` para <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, llamado que hacen referencia a la <xref:System.String> tipo.</span><span class="sxs-lookup"><span data-stu-id="00b22-186">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="00b22-187">El <xref:System.ComponentModel.TypeConverter> devuelve `true` para <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, llamado que hacen referencia a la <xref:System.String> tipo.</span><span class="sxs-lookup"><span data-stu-id="00b22-187">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="00b22-188">El <xref:System.ComponentModel.TypeConverter> devuelve `true` para <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, llamado que hacen referencia a la <xref:System.String> tipo.</span><span class="sxs-lookup"><span data-stu-id="00b22-188">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00b22-189">Los siguientes son casos especiales: <xref:System.DateTime> tipos devuelven un <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> tipos devuelven un serializador interno pero funcional (`StringValueSerializer`).</span><span class="sxs-lookup"><span data-stu-id="00b22-189">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00b22-190">
            <paramref name="type" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-190">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor">
          <span data-ttu-id="00b22-191">Descriptor de la propiedad que se va a serializar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-191">Descriptor for the property to be serialized.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="00b22-192">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-192">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-193">Obtiene el serializador <see cref="T:System.Windows.Markup.ValueSerializer" /> declarado para la propiedad especificada, utilizando el contexto especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-193">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified property, using the specified context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-194">Serializador asociado a la propiedad especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-194">The serializer associated with the specified property.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-195">En lugar de confiar únicamente en los atributos notificados en el sistema de tipos CLR, esta sobrecarga se utiliza el `context` como un servicio y llama a la implementación del servicio <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="00b22-195">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="00b22-196">El <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementación sería normalmente también dependen de la `descriptor`, pero podría implementar un comportamiento especial para ciertos contextos.</span><span class="sxs-lookup"><span data-stu-id="00b22-196">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `descriptor`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="00b22-197">Este método se debe llamar cuando el llamador tiene un disponibles <xref:System.Windows.Markup.IValueSerializerContext> desde un servicio.</span><span class="sxs-lookup"><span data-stu-id="00b22-197">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span>  <span data-ttu-id="00b22-198">Esto garantizará que el valor correcto <xref:System.Windows.Markup.ValueSerializer> se devuelve para el contexto específico.</span><span class="sxs-lookup"><span data-stu-id="00b22-198">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="00b22-199">Si devuelve el contexto `null` desde su <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> para el elemento especificado `descriptor`, o si el contexto que especifique es `null`, a continuación, el comportamiento es idéntico a llamar a la <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> sobrecargar.</span><span class="sxs-lookup"><span data-stu-id="00b22-199">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `descriptor`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00b22-200">
            <paramref name="descriptor" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-200">
              <paramref name="descriptor" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="00b22-201">Tipo para el que se va a obtener el serializador <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-201">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="00b22-202">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-202">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-203">Obtiene el serializador <see cref="T:System.Windows.Markup.ValueSerializer" /> declarado para el tipo especificado que utiliza el contexto indicado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-203">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type, using the specified context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-204">Serializador asociado al tipo especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-204">The serializer associated with the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-205">En lugar de confiar únicamente en los atributos notificados en el sistema de tipos CLR, esta sobrecarga se utiliza el `context` como un servicio y llama a la implementación del servicio <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="00b22-205">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="00b22-206">El <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementación sería normalmente también dependen de la `type`, pero podría implementar un comportamiento especial para ciertos contextos.</span><span class="sxs-lookup"><span data-stu-id="00b22-206">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `type`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="00b22-207">Este método se debe llamar cuando el llamador tiene un disponibles <xref:System.Windows.Markup.IValueSerializerContext> desde un servicio.</span><span class="sxs-lookup"><span data-stu-id="00b22-207">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span> <span data-ttu-id="00b22-208">Esto garantizará que el valor correcto <xref:System.Windows.Markup.ValueSerializer> se devuelve para el contexto específico.</span><span class="sxs-lookup"><span data-stu-id="00b22-208">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="00b22-209">Si devuelve el contexto `null` desde su <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> para el elemento especificado `type`, o si el contexto que especifique es `null`, a continuación, el comportamiento es idéntico a llamar a la <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> sobrecargar.</span><span class="sxs-lookup"><span data-stu-id="00b22-209">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `type`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00b22-210">
            <paramref name="type" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-210">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="00b22-211">Valor que se serializa.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-211">The value being serialized.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="00b22-212">Información contextual usada para la conversión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-212">Context information that is used for conversion.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00b22-213">Obtiene una enumeración de los tipos a los que hace referencia <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-213">Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="00b22-214">Tipos convertidos por este serializador.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00b22-214">The types converted by this serializer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00b22-215">Los tipos de un <xref:System.Windows.Markup.ValueSerializer> convierte debe incluirse en la enumeración devuelta.</span><span class="sxs-lookup"><span data-stu-id="00b22-215">Any types a <xref:System.Windows.Markup.ValueSerializer> converts should be included in the returned enumeration.</span></span>  <span data-ttu-id="00b22-216">Esto permite que un serializador para asegurarse de que un deserializador tiene suficiente información sobre los tipos que convierte este serializador.</span><span class="sxs-lookup"><span data-stu-id="00b22-216">This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.</span></span>  
  
 <span data-ttu-id="00b22-217">Invalidación de este método es un escenario avanzado.</span><span class="sxs-lookup"><span data-stu-id="00b22-217">Overriding this method is an advanced scenario.</span></span> <span data-ttu-id="00b22-218">Invalidar solo debería ser necesario si va a implementar un sistema donde CLR del sistema tipoDePropietario propiedad relaciones entre tipos disponibles para un contexto de esquema XAML no notifican suficiente información.</span><span class="sxs-lookup"><span data-stu-id="00b22-218">Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="00b22-219">Notas de uso de WPF</span><span class="sxs-lookup"><span data-stu-id="00b22-219">WPF Usage Notes</span></span>  
 <span data-ttu-id="00b22-220">El [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] sistema de propiedades implementa un serializador de valor interno que invalida <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> porque una propiedad de dependencia tiene un concepto que puede haber agregado propietarios.</span><span class="sxs-lookup"><span data-stu-id="00b22-220">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system implements an internal value serializer that overrides <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> because a dependency property has a concept that it can have added owners.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]<span data-ttu-id="00b22-221"> las expresiones también tienen control interno especial.</span><span class="sxs-lookup"><span data-stu-id="00b22-221"> expressions also have special internal handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>