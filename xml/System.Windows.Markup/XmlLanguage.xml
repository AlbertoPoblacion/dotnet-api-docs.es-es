<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="949b5d2e6f4e8bbe51d550b6df6cca7d0c9978c4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658649" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa una etiqueta de idioma que se va a usar en el marcado XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La etiqueta de idioma pueden tener o no registrado como un <xref:System.Globalization.CultureInfo> presentes en el sistema donde se interpreta el código XAML.  
  
 Esta clase es útil para trabajar con valores representados mediante `xml:lang` en XML.  
  
 Etiquetas de lenguaje pueden especificarse en forma de dos caracteres o en un formulario de configuración regional de idioma con guiones. Vea [RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454).  
  
 Tenga en cuenta que la especificación XML permite una cadena vacía para `xml:lang`, aunque no está permitido por RFC 3066; por lo tanto, la <xref:System.Windows.Markup.XmlLanguage> escriba permite "" (cadena de atributo vacía). Un construido de forma predeterminada <xref:System.Windows.Markup.XmlLanguage> se comporta como si se construyó con "" (cadena vacía).  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *prefix*  
 Prefijo de idioma, con los valores de prefijo ISO 639-1 idioma. Por ejemplo "es-es" o "zh". Mayúsculas valores aceptados y convertidos en minúsculas. Esto también puede ser un atributo vacío, "".  
  
 *subcode*  
 Si se proporciona, debe ir precedida de un solo guión. A continuación, un subcódigo tal como se define en RFC 3066. El uso más habitual y lo que es más probable que se asigne correctamente a un <xref:System.Globalization.CultureInfo>, es un país o región designación como "-us" o "-hk". Mayúsculas valores aceptados y convertidos en minúsculas.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una instancia estática de  <see cref="T:System.Windows.Markup.XmlLanguage" /> como las que crearía el método <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> con la etiqueta de idioma como una cadena de atributo vacía.</summary>
        <value>La versión de la etiqueta de idioma vacía de <see cref="T:System.Windows.Markup.XmlLanguage" />, para su uso en operaciones de comparación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este valor está en vigor la <xref:System.Windows.Markup.XmlLanguage> correspondiente a <xref:System.String.Empty?displayProperty=nameWithType>, cuyo <xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A> resultado es <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el objeto <see cref="T:System.Globalization.CultureInfo" /> equivalente apropiado para <see cref="T:System.Windows.Markup.XmlLanguage" /> si y sólo si se registra un objeto <see cref="T:System.Globalization.CultureInfo" /> de este tipo para el valor <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> de <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns>
          <see cref="T:System.Globalization.CultureInfo" /> que se puede usar para las llamadas API de globalización y localización que toman ese tipo como argumento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si no hay equivalente <xref:System.Globalization.CultureInfo> puede ser generado, este método produce una excepción. Si no desea controlar las excepciones, llame a <xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A> en su lugar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No existe ningún objeto <see cref="T:System.Globalization.CultureInfo" /> registrado para el objeto <see cref="T:System.Windows.Markup.XmlLanguage" /> proporcionado, según se determinó mediante una llamada a <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">Cadena de idioma de RFC 3066 o una cadena vacía.</param>
        <summary>Devuelve una instancia de <see cref="T:System.Windows.Markup.XmlLanguage" /> en función de una cadena que representa el idioma de RFC 3066.</summary>
        <returns>Un nuevo objeto <see cref="T:System.Windows.Markup.XmlLanguage" /> con la cadena proporcionada como su valor <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es efectivamente el constructor.  
  
 La cadena de idioma puede estar vacía, o bien debe ajustarse a [RFC 3066](http://go.microsoft.com/fwlink/?LinkId=132454) reglas:  
  
-   La primera subetiqueta debe constar solo de [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] letras.  
  
-   Subetiquetas adicionales deben contener [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] letras o números.  
  
-   Las etiquetas se separan por un carácter de guión único.  
  
-   Cada subetiqueta debe ser de 1 a 8 caracteres.  
  
-   No se permiten ningún guiones iniciales ni finales.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          El parámetro <paramref name="ietfLanguageTag" /> no puede ser null.</exception>
        <exception cref="T:System.ArgumentException">
          El parámetro <paramref name="ietfLanguageTag" /> no estaba vacío, pero no se ajustaba a la sintaxis especificada en RFC 3066.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el objeto <see cref="T:System.Globalization.CultureInfo" /> no neutro que tiene una relación más estrecha con este objeto <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns>
          <see cref="T:System.Globalization.CultureInfo" /> que se puede utilizar en llamadas a la [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] de globalización y localización que toman ese tipo como argumento.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este <xref:System.Windows.Markup.XmlLanguage> es igual a <xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType> , a continuación, este método devolverá <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 Este método busca el registrado <xref:System.Globalization.CultureInfo> coincidencia del prefijo más largo posible de este <xref:System.Windows.Markup.XmlLanguage>. Si registrado que <xref:System.Globalization.CultureInfo> es neutra (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A> es `true`), a continuación, este método se basa en una llamada a <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> que asignar desde neutra <xref:System.Globalization.CultureInfo> a una en concreto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No hay registrado ningún elemento <see cref="T:System.Globalization.CultureInfo" /> no neutro relacionado para el elemento <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> actual.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la representación de cadena de la etiqueta de idioma.</summary>
        <value>La representación de cadena de la etiqueta de idioma.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad puede devolver una versión normalizada de la cadena especificada originalmente como se proporciona en <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 Esta propiedad también puede devolver <xref:System.String.Empty> si se proporcionó una cadena vacía para <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una clase <see cref="T:System.String" /> que representa la clase <see cref="T:System.Windows.Markup.XmlLanguage" /> actual.</summary>
        <returns>Una clase <see cref="T:System.String" /> que representa la clase <see cref="T:System.Windows.Markup.XmlLanguage" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esto devuelve la <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> valor del elemento actual <xref:System.Windows.Markup.XmlLanguage>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>