<Type Name="VisualCollection" FullName="System.Windows.Media.VisualCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8b800078576abb97f6cef67dd84cd15a031c9513" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52224706" /></Metadata><TypeSignature Language="C#" Value="public sealed class VisualCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit VisualCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.VisualCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VisualCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualCollection sealed : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type VisualCollection = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa una colección ordenada de objetos <see cref="T:System.Windows.Media.Visual" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Media.VisualCollection> disfruta implícitamente de afinidad de contexto. Si un procedimiento intenta obtener acceso a la <xref:System.Windows.Media.VisualCollection> desde un contexto diferente que el contexto del objeto propietario <xref:System.Windows.Media.ContainerVisual>, se produce una excepción.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Windows.Media.VisualCollection> y agregarles miembros.  
  
 [!code-csharp[DrawingVisualSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#100)]  
  
> [!NOTE]
>  Para obtener un ejemplo completo, vea [Hit Test Using DrawingVisuals Sample](https://go.microsoft.com/fwlink/?LinkID=159994).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualCollection (System.Windows.Media.Visual parent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Visual parent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.#ctor(System.Windows.Media.Visual)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualCollection(System::Windows::Media::Visual ^ parent);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.VisualCollection : System.Windows.Media.Visual -&gt; System.Windows.Media.VisualCollection" Usage="new System.Windows.Media.VisualCollection parent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="parent">Objeto visual primario cuya colección <see cref="T:System.Windows.Media.VisualCollection" /> se devuelve.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Add(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.Media.Visual -&gt; int" Usage="visualCollection.Add visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">Clase <see cref="T:System.Windows.Media.Visual" /> que se va a anexar a la colección <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <summary>Anexa un objeto <see cref="T:System.Windows.Media.Visual" /> al final de <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <returns>Índice de la colección donde se agregó el objeto especificado por el parámetro <paramref name="visual" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Agregar un <xref:System.Windows.Media.Visual> cuyo valor es `null` está permitido y no genera una excepción.  
  
 El <xref:System.Windows.Media.VisualCollection.Add%2A> método también establece la relación de elementos primarios y secundarios entre el elemento primario visual, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el elemento secundario `visual`.  
  
 Si necesita mayor control de bajo nivel sobre la implementación de almacenamiento subyacente de los objetos visuales secundarios de una clase personalizada, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos. Al usar estos métodos, debe definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un <xref:System.Windows.Media.VisualCollection> y agregarles miembros.  
  
 [!code-csharp[DrawingVisualSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingVisualSample/CSharp/Window1.xaml.cs#100)]
 [!code-vb[DrawingVisualSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingVisualSample/visualbasic/window1.xaml.vb#100)]  
  
> [!NOTE]
>  Para obtener un ejemplo completo, vea [Hit Test Using DrawingVisuals Sample](https://go.microsoft.com/fwlink/?LinkID=159994).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Se produce una excepción <see cref="T:System.ArgumentException" /> si <see cref="T:System.Windows.Media.Visual" /> es un elemento raíz.</exception>
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Windows.Media.VisualCollection.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el número de elementos que puede contener <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <value>Número de elementos que puede contener <see cref="T:System.Windows.Media.VisualCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de <xref:System.Windows.Media.VisualCollection.Capacity%2A> es el número de elementos que el <xref:System.Windows.Media.VisualCollection> es capaz de almacenar. <xref:System.Windows.Media.VisualCollection.Count%2A> es el número de objetos visuales que son en realidad el <xref:System.Windows.Media.VisualCollection>. <xref:System.Windows.Media.VisualCollection.Capacity%2A> es siempre mayor o igual que <xref:System.Windows.Media.VisualCollection.Count%2A>. Si <xref:System.Windows.Media.VisualCollection.Count%2A> supera <xref:System.Windows.Media.VisualCollection.Capacity%2A> al agregar elementos, la capacidad de la <xref:System.Windows.Media.VisualCollection> aumenta. De forma predeterminada <xref:System.Windows.Media.VisualCollection.Capacity%2A> es cero.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Windows.Media.VisualCollection.Capacity" /> se establece en un valor que es menor que <see cref="P:System.Windows.Media.VisualCollection.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="visualCollection.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Quita todos los elementos de <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Media.VisualCollection.Count%2A> se restablece en cero. El valor de la <xref:System.Windows.Media.VisualCollection.Capacity%2A> permanece sin cambios. Para restablecer la capacidad de la <xref:System.Windows.Media.VisualCollection>, establezca el <xref:System.Windows.Media.VisualCollection.Capacity%2A> propiedad tenga el tamaño deseado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Contains(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Media.Visual -&gt; bool" Usage="visualCollection.Contains visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><see cref="T:System.Windows.Media.Visual" /> que se va a buscar en la colección.</param>
        <summary>Devuelve un valor <see cref="T:System.Boolean" /> que indica si el objeto <see cref="T:System.Windows.Media.Visual" /> especificado se encuentra en la colección.</summary>
        <returns><see langword="true" /> si la colección contiene el objeto <paramref name="visual" />; en cualquier otro caso, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El escenario del peor caso en tiempo de ejecución de esta función es `O(n)`, donde `n` es el número de elementos de la <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Copia la colección actual a la matriz que se pasa.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="visualCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><see cref="T:System.Array" /> unidimensional que es el destino de los elementos que se copian desde la colección <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
        <summary>Copia los elementos de la colección a una matriz, empezando por un índice específico de la matriz.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Windows.Media.Visual[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Windows.Media.Visual[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.CopyTo(System.Windows.Media.Visual[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As Visual(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Windows::Media::Visual ^&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.Media.Visual[] * int -&gt; unit" Usage="visualCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Windows.Media.Visual[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Matriz de objetos <see cref="T:System.Windows.Media.Visual" /> (que debe tener índices de base cero).</param>
        <param name="index">Índice de <paramref name="array" /> por el que se ha de comenzar la copia.</param>
        <summary>Copia la actual colección a la matriz de objetos <see cref="T:System.Windows.Media.Visual" /> que se pasa.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Media.VisualCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de elementos de la colección.</summary>
        <value>Número de elementos que <see cref="T:System.Windows.Media.VisualCollection" /> contiene.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.VisualCollection.Count%2A> es el número de elementos que son en realidad el <xref:System.Windows.Media.VisualCollection>. <xref:System.Windows.Media.VisualCollection.Capacity%2A> es el número de elementos que el <xref:System.Windows.Media.VisualCollection> es capaz de almacenar.  
  
 <xref:System.Windows.Media.VisualCollection.Count%2A> siempre es menor o igual que <xref:System.Windows.Media.VisualCollection.Capacity%2A>. Si <xref:System.Windows.Media.VisualCollection.Count%2A> supera <xref:System.Windows.Media.VisualCollection.Capacity%2A> al agregar elementos, se duplica la capacidad de la lista mediante la reasignación automática de la matriz interna antes de copiar los elementos antiguos y agregar los nuevos elementos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.Media.VisualCollection.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Media.VisualCollection/Enumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As VisualCollection.Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::VisualCollection::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Windows.Media.VisualCollection.Enumerator" Usage="visualCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.VisualCollection+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera un enumerador que puede recorrer en iteración la colección <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.IndexOf(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Media.Visual -&gt; int" Usage="visualCollection.IndexOf visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual">Objeto <see cref="T:System.Windows.Media.Visual" /> que se va a buscar en la interfaz <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <summary>Devuelve el índice de base cero del objeto <see cref="T:System.Windows.Media.Visual" />.</summary>
        <returns>Índice del objeto <see cref="T:System.Windows.Media.Visual" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Media.Visual> no está en el <xref:System.Windows.Media.VisualCollection>, se devuelve -1. Si `null` se pasa al método, el índice de la primera entrada que tiene `null` se devuelve. Si no hay ninguna entrada null, se devuelve -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Insert(System.Int32,System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(int index, System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * System.Windows.Media.Visual -&gt; unit" Usage="visualCollection.Insert (index, visual)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero donde se va a insertar el valor.</param>
        <param name="visual">Objeto <see cref="T:System.Windows.Media.Visual" /> que se va a insertar en <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <summary>Inserta un elemento en <see cref="T:System.Windows.Media.VisualCollection" />, en el índice especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si <xref:System.Windows.Media.VisualCollection.Count%2A> ya es igual a <xref:System.Windows.Media.VisualCollection.Capacity%2A>, la capacidad de la <xref:System.Windows.Media.VisualCollection> aumenta antes de la nueva <xref:System.Windows.Media.Visual> se inserta. Si `index` es igual a <xref:System.Windows.Media.VisualCollection.Count%2A>, `visual` se agrega al final de <xref:System.Windows.Media.VisualCollection>. Objetos de cualquier objeto visual existente que sea igual o mayor que `index` se desplazan para dar cabida a la nueva <xref:System.Windows.Media.Visual>, y sus valores de índice se actualizan.  
  
 El <xref:System.Windows.Media.VisualCollection.Insert%2A> método también establece la relación de elementos primarios y secundarios entre el elemento primario visual, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el elemento secundario `visual`.  
  
 Si necesita mayor control de bajo nivel sobre la implementación subyacente de almacenamiento de objetos visuales secundarios, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos. Al usar estos métodos, definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> es menor que cero o mayor que <see cref="P:System.Windows.Media.VisualCollection.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Media.VisualCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si <see cref="T:System.Windows.Media.VisualCollection" /> es de solo lectura.</summary>
        <value>Valor que indica si <see cref="T:System.Windows.Media.VisualCollection" /> es de sólo lectura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es siempre `false` para todos los <xref:System.Windows.Media.VisualCollection> objetos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSynchronized : bool" Usage="System.Windows.Media.VisualCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Windows.Media.VisualCollection" /> está sincronizado (es seguro para subprocesos).</summary>
        <value>Valor que indica si la colección <see cref="T:System.Windows.Media.VisualCollection" /> está sincronizada (segura para la ejecución de subprocesos).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es siempre `false` para todos los <xref:System.Windows.Media.VisualCollection> objetos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Visual this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Visual Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Visual ^ default[int] { System::Windows::Media::Visual ^ get(int index); void set(int index, System::Windows::Media::Visual ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Media.Visual with get, set" Usage="System.Windows.Media.VisualCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero de la colección <see cref="T:System.Windows.Media.VisualCollection" /> donde se va a obtener o establecer el objeto <see cref="T:System.Windows.Media.Visual" />.</param>
        <summary>Obtiene o establece el objeto <see cref="T:System.Windows.Media.Visual" /> que está almacenado en el índice de base cero especificado de la colección <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <value>Objeto <see cref="T:System.Windows.Media.Visual" /> que está almacenado en el índice especificado por el parámetro <paramref name="index" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad proporciona la capacidad para tener acceso a un determinado <xref:System.Windows.Media.Visual> en el <xref:System.Windows.Media.VisualCollection> mediante un índice.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="index" /> es menor que cero o el valor de <paramref name="index" /> es igual o mayor que el valor de <see cref="P:System.Windows.Media.VisualCollection.Count" />.</exception>
        <exception cref="T:System.ArgumentException">El nuevo elemento secundario ya tiene un elemento primario, o bien, el valor en el índice especificado no es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Media.Visual visual);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Media.Visual visual) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.Remove(System.Windows.Media.Visual)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Media::Visual ^ visual);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Media.Visual -&gt; unit" Usage="visualCollection.Remove visual" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visual" Type="System.Windows.Media.Visual" />
      </Parameters>
      <Docs>
        <param name="visual"><see cref="T:System.Windows.Media.Visual" /> que se va a quitar de <see cref="T:System.Windows.Media.VisualCollection" />.</param>
        <summary>Quita el objeto <see cref="T:System.Windows.Media.Visual" /> especificado de <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los objetos visuales que siguen el objeto eliminado se desplazan para ocupar la posición vacante y sus valores de índice se actualizan. Si `visual` es `null`, la primera `null` se quita la entrada. Tenga en cuenta que quitar un `null` movimiento es lineal en el tamaño de la colección.  
  
 El <xref:System.Windows.Media.VisualCollection.Remove%2A> método también quita la relación de elementos primarios y secundarios entre el elemento primario visual, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el elemento secundario `visual`.  
  
 Si necesita mayor control de bajo nivel sobre la implementación subyacente de almacenamiento de objetos visuales secundarios, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos. Al usar estos métodos, definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="visualCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero del objeto visual que se va a quitar.</param>
        <summary>Quita el objeto visual del índice especificado en <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los objetos visuales que siguen el objeto eliminado se desplazan para ocupar la posición vacante y sus valores de índice se actualizan.  
  
 El <xref:System.Windows.Media.VisualCollection.RemoveAt%2A> método también quita la relación de elementos primarios y secundarios entre el elemento primario visual, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el elemento secundario `visual`.  
  
 Si necesita mayor control de bajo nivel sobre la implementación subyacente de almacenamiento de objetos visuales secundarios, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos. Al usar estos métodos, definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="index" /> es menor que cero o el valor de <paramref name="index" /> es igual o mayor que el valor de <see cref="P:System.Windows.Media.VisualCollection.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; unit" Usage="visualCollection.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Índice de base cero del intervalo de elementos que se va a quitar.</param>
        <param name="count">Número de elementos que se va a quitar.</param>
        <summary>Quita un intervalo de objetos visuales de <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los objetos visuales que siguen los objetos quitados se desplazan para ocupan las posiciones vacantes y sus valores de índice se actualizan.  
  
 El <xref:System.Windows.Media.VisualCollection.RemoveRange%2A> método también quita las relaciones de elementos primarios y secundarios entre el objeto visual primario, que es el propietario de la <xref:System.Windows.Media.VisualCollection>y el intervalo de elementos visuales secundarios.  
  
 Si necesita mayor control de bajo nivel sobre la implementación subyacente de almacenamiento de objetos visuales secundarios, considere el uso de la <xref:System.Windows.Media.Visual.AddVisualChild%2A> y <xref:System.Windows.Media.Visual.RemoveVisualChild%2A> métodos. Al usar estos métodos, definir su propia implementación de almacenamiento y no use <xref:System.Windows.Media.VisualCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El valor de <paramref name="index" /> es menor que cero o el valor de <paramref name="count" /> es menor que cero.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="index" /> y <paramref name="count" /> no hacen referencia a un intervalo de elementos válido de <see cref="T:System.Windows.Media.VisualCollection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.VisualCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SyncRoot : obj" Usage="System.Windows.Media.VisualCollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Windows.Media.VisualCollection" />.</summary>
        <value>Valor de tipo <see cref="T:System.Object" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.VisualCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Este miembro es compatible con la infraestructura de [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] y no está diseñado para utilizarse directamente desde el código. Para una descripción de este miembro, vea <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
        <returns>Objeto que puede usarse para recorrer en iteración la colección.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>