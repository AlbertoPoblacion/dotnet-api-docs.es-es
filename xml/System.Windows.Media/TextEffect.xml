<Type Name="TextEffect" FullName="System.Windows.Media.TextEffect">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="65fec2e40602da60e00c2f6fa4939b302a5d86f9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36466320" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TextEffect : System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TextEffect extends System.Windows.Media.Animation.Animatable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.TextEffect" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TextEffect&#xA;Inherits Animatable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextEffect sealed : System::Windows::Media::Animation::Animatable" />
  <TypeSignature Language="F#" Value="type TextEffect = class&#xA;    inherit Animatable" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.Animatable</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un efecto de texto que se puede aplicar a los objetos de texto.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Media.TextEffect> objeto le permite agregar efectos, por ejemplo, animaciones, objetos de texto, como <xref:System.Windows.Controls.TextBlock>, <xref:System.Windows.Documents.TextElement>, y <xref:System.Windows.Documents.FlowDocument> objetos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un carácter individual girado. Cada carácter se gira de manera independiente a intervalos de 1 segundo. En el ejemplo una define un <xref:System.Windows.Media.TextEffect> que contiene un <xref:System.Windows.Media.RotateTransform> que se aplica a cada carácter en la <xref:System.Windows.Controls.TextBlock.Text%2A?displayProperty=nameWithType> propiedad. El ejemplo define las animaciones para el <xref:System.Windows.Media.RotateTransform.Angle%2A> y <xref:System.Windows.Media.RotateTransform.CenterX%2A> propiedades de la <xref:System.Windows.Media.RotateTransform> objeto. Una tercera animación de tipo <xref:System.Windows.Media.Animation.Int32AnimationUsingKeyFrames> cambios el <xref:System.Windows.Media.TextEffect.PositionStart%2A> propiedad comprendido entre 0 y 12 durante la secuencia de animación, correspondiente a la cadena de texto de 13 caracteres.  
  
 ![Captura de pantalla de efecto de texto Girar texto](~/add/media/texteffect01.jpg "captura de pantalla de efecto de texto de rotación de texto")  
  
                  Example of a rotating text effect animation  
  
 [!code-xaml[TextEffectSample#TextEffectEntireSample](~/samples/snippets/csharp/VS_Snippets_Wpf/TextEffectSample/CS/Window1.xaml#texteffectentiresample)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.TextEffectCollection" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.TextEffect" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextEffect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextEffect.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextEffect();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.TextEffect" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un <xref:System.Windows.Media.TextEffect>, establecer sus propiedades y se agrega a la <xref:System.Windows.Media.TextEffectCollection> del objeto de texto especificado.  
  
 [!code-csharp[TextOverview#TextEffectSnippet1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextOverview/CSharp/TextEffect.xaml.cs#texteffectsnippet1)]
 [!code-vb[TextOverview#TextEffectSnippet1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextOverview/visualbasic/texteffect.xaml.vb#texteffectsnippet1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextEffect (System.Windows.Media.Transform transform, System.Windows.Media.Brush foreground, System.Windows.Media.Geometry clip, int positionStart, int positionCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Transform transform, class System.Windows.Media.Brush foreground, class System.Windows.Media.Geometry clip, int32 positionStart, int32 positionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextEffect.#ctor(System.Windows.Media.Transform,System.Windows.Media.Brush,System.Windows.Media.Geometry,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextEffect(System::Windows::Media::Transform ^ transform, System::Windows::Media::Brush ^ foreground, System::Windows::Media::Geometry ^ clip, int positionStart, int positionCount);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.TextEffect : System.Windows.Media.Transform * System.Windows.Media.Brush * System.Windows.Media.Geometry * int * int -&gt; System.Windows.Media.TextEffect" Usage="new System.Windows.Media.TextEffect (transform, foreground, clip, positionStart, positionCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transform" Type="System.Windows.Media.Transform" />
        <Parameter Name="foreground" Type="System.Windows.Media.Brush" />
        <Parameter Name="clip" Type="System.Windows.Media.Geometry" />
        <Parameter Name="positionStart" Type="System.Int32" />
        <Parameter Name="positionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="transform">Objeto <see cref="T:System.Windows.Media.Transform" /> que se aplica a <see cref="T:System.Windows.Media.TextEffect" />.</param>
        <param name="foreground">
          <see cref="T:System.Windows.Media.Brush" /> que se va a aplicar al contenido de <see cref="T:System.Windows.Media.TextEffect" />.</param>
        <param name="clip">Zona de recorte de <see cref="T:System.Windows.Media.TextEffect" />.</param>
        <param name="positionStart">Posición inicial en el texto al que se aplica <see cref="T:System.Windows.Media.TextEffect" />.</param>
        <param name="positionCount">Número de posiciones en el texto al que se aplica <see cref="T:System.Windows.Media.TextEffect" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Media.TextEffect" /> especificando los valores de propiedad de la clase.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a la <xref:System.Windows.Media.TextEffect.%23ctor%2A> constructor. Tenga en cuenta que en este caso, el `transform` y `clip` parámetros están establecidos en `null`, ya que no son necesarios los valores de parámetros.  
  
 [!code-csharp[TextOverview#TextEffectSnippet3](~/samples/snippets/csharp/VS_Snippets_Wpf/TextOverview/CSharp/TextEffect.xaml.cs#texteffectsnippet3)]
 [!code-vb[TextOverview#TextEffectSnippet3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextOverview/visualbasic/texteffect.xaml.vb#texteffectsnippet3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Geometry Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Geometry Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextEffect.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Property Clip As Geometry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Geometry ^ Clip { System::Windows::Media::Geometry ^ get(); void set(System::Windows::Media::Geometry ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Clip : System.Windows.Media.Geometry with get, set" Usage="System.Windows.Media.TextEffect.Clip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la región de recorte de <see cref="T:System.Windows.Media.TextEffect" />.</summary>
        <value>
          <see cref="T:System.Windows.Media.Geometry" /> que define la región de recorte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_Clip"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Media.TextEffect.ClipProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ClipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ClipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.TextEffect.ClipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ClipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ClipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ClipProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.TextEffect.ClipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Media.TextEffect.Clip" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.TextEffect Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.TextEffect Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextEffect.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As TextEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::TextEffect ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Media.TextEffect" Usage="textEffect.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextEffect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un clon modificable de este <see cref="T:System.Windows.Media.TextEffect" /> y hace copias en profundidad de los valores de este objeto. Cuando se copian propiedades de dependencia, este método copia las referencias de recursos y enlaces de datos (aunque podrían no resolverse), pero no copia las animaciones ni sus valores actuales.</summary>
        <returns>Clon modificable del objeto actual. La propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del objeto clonado es <see langword="false" /> aunque la propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del origen sea <see langword="true." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se usa para generar copias modificables de inmovilizado <xref:System.Windows.Freezable> objetos (o cualquier <xref:System.Windows.Freezable> objeto). Para mayor comodidad, este método prevalece sobre la versión heredada mediante una implementación fuertemente tipada.  
  
 Para obtener más información, vea <xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.TextEffect CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.TextEffect CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextEffect.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As TextEffect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::TextEffect ^ CloneCurrentValue();" />
      <MemberSignature Language="F#" Value="member this.CloneCurrentValue : unit -&gt; System.Windows.Media.TextEffect" Usage="textEffect.CloneCurrentValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextEffect</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un clon modificable de este objeto <see cref="T:System.Windows.Media.TextEffect" /> y hace copias en profundidad de sus valores actuales. Las referencias de recursos, los enlaces de datos y las animaciones no se copian, pero sí sus valores actuales.</summary>
        <returns>Clon modificable del objeto actual. La propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del objeto clonado es <see langword="false" /> aunque la propiedad <see cref="P:System.Windows.Freezable.IsFrozen" /> del origen sea <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se usa para generar copias modificables de inmovilizado <xref:System.Windows.Freezable> objetos (o cualquier <xref:System.Windows.Freezable> objeto). Para mayor comodidad, este método prevalece sobre la versión heredada mediante una implementación fuertemente tipada.  
  
 Para obtener más información, vea <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextEffect.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="textEffect.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Foreground">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Foreground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Foreground" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextEffect.Foreground" />
      <MemberSignature Language="VB.NET" Value="Public Property Foreground As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ Foreground { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Foreground : System.Windows.Media.Brush with get, set" Usage="System.Windows.Media.TextEffect.Foreground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece <see cref="T:System.Windows.Media.Brush" /> que se aplica al contenido de <see cref="T:System.Windows.Media.TextEffect" />.</summary>
        <value>Pincel usado para aplicar al objeto <see cref="T:System.Windows.Media.TextEffect" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_Foreground"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Media.TextEffect.ForegroundProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear un animar <xref:System.Windows.Media.Brush> y establézcalo como el <xref:System.Windows.Media.TextEffect.Foreground%2A> valor de propiedad.  
  
 [!code-csharp[TextOverview#TextEffectSnippet1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextOverview/CSharp/TextEffect.xaml.cs#texteffectsnippet1)]
 [!code-vb[TextOverview#TextEffectSnippet1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextOverview/visualbasic/texteffect.xaml.vb#texteffectsnippet1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForegroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForegroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForegroundProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.TextEffect.ForegroundProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForegroundProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForegroundProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForegroundProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.TextEffect.ForegroundProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Media.TextEffect.Foreground" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionCount">
      <MemberSignature Language="C#" Value="public int PositionCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextEffect.PositionCount" />
      <MemberSignature Language="VB.NET" Value="Public Property PositionCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PositionCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PositionCount : int with get, set" Usage="System.Windows.Media.TextEffect.PositionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la posición en el texto que se aplica a <see cref="T:System.Windows.Media.TextEffect" />.</summary>
        <value>Valor de <see cref="T:System.Int32" /> que representa la posición en el texto a la que se aplica <see cref="T:System.Windows.Media.TextEffect" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establecer el <xref:System.Windows.Media.TextEffect.PositionCount%2A> valor a un número que es mayor que la posición máxima del texto afectado es válida.  
  
<a name="dependencyPropertyInfo_PositionCount"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Media.TextEffect.PositionCountProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo se puede establecer <xref:System.Windows.Media.TextEffect.PositionCount%2A> valor al máximo <xref:System.Int32> valor para asegurarse de que se ven afectados todos los caracteres en el texto.  
  
 [!code-csharp[TextOverview#TextEffectSnippet2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextOverview/CSharp/TextEffect.xaml.cs#texteffectsnippet2)]
 [!code-vb[TextOverview#TextEffectSnippet2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextOverview/visualbasic/texteffect.xaml.vb#texteffectsnippet2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionCountProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PositionCountProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PositionCountProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.TextEffect.PositionCountProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PositionCountProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PositionCountProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PositionCountProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.TextEffect.PositionCountProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Media.TextEffect.PositionCount" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionStart">
      <MemberSignature Language="C#" Value="public int PositionStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextEffect.PositionStart" />
      <MemberSignature Language="VB.NET" Value="Public Property PositionStart As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PositionStart { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.PositionStart : int with get, set" Usage="System.Windows.Media.TextEffect.PositionStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la posición inicial en el texto que se aplica a <see cref="T:System.Windows.Media.TextEffect" />.</summary>
        <value>Valor de <see cref="T:System.Int32" /> que representa la posición inicial en el texto al que se aplica <see cref="T:System.Windows.Media.TextEffect" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_PositionStart"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Media.TextEffect.PositionStartProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionStartProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PositionStartProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PositionStartProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.TextEffect.PositionStartProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PositionStartProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PositionStartProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PositionStartProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.TextEffect.PositionStartProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Media.TextEffect.PositionStart" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform Transform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextEffect.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ Transform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Windows.Media.Transform with get, set" Usage="System.Windows.Media.TextEffect.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Windows.Media.Transform" /> que se aplica al objeto <see cref="T:System.Windows.Media.TextEffect" />.</summary>
        <value>Valor de <see cref="T:System.Windows.Media.Transform" /> del objeto <see cref="T:System.Windows.Media.TextEffect" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_Transform"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Media.TextEffect.TransformProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el siguiente ejemplo de marcado, un <xref:System.Windows.Media.TextEffect> se crea para un <xref:System.Windows.Controls.TextBlock> objeto. En este caso, el efecto es una animación de giro.  
  
 [!code-xaml[TextEffectSample#TextEffectSample1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextEffectSample/CS/Window1.xaml#texteffectsample1)]  
  
 Para ver el ejemplo completo, vea.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.TextEffect.TransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.TextEffect.TransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Media.TextEffect.Transform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>