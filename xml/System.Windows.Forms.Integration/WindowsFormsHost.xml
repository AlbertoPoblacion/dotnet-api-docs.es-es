<Type Name="WindowsFormsHost" FullName="System.Windows.Forms.Integration.WindowsFormsHost">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="08b5f0634772c4dbc3ad3b87fbaf950eb819c7d4" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32040400" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowsFormsHost : System.Windows.Interop.HwndHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsHost extends System.Windows.Interop.HwndHost implements class System.Windows.Interop.IKeyboardInputSink" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Integration.WindowsFormsHost" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsHost&#xA;Inherits HwndHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsHost : System::Windows::Interop::HwndHost" />
  <AssemblyInfo>
    <AssemblyName>WindowsFormsIntegration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Interop.HwndHost</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("ChildChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignerCategory("code")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Child")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Elemento que permite hospedar un control de Windows Forms en una página de WPF.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento que se va a colocar un control de formularios Windows Forms dentro de su elemento WPF o página.  
  
 Para hospedar un elemento WPF en un formulario o control de formularios Windows Forms, use la <xref:System.Windows.Forms.Integration.ElementHost> control.  
  
> [!NOTE]
>  WindowsFormsIntegration.dll se instala con el [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] ensamblados. La ubicación predeterminada para el ensamblado es %programfiles%\Reference Assemblies\Microsoft\Framework\v3.0\WindowsFormsIntegration.dll.  
  
 Para hospedar un control de formularios Windows Forms en un elemento WPF, debe asignar el control de formularios Windows Forms para la <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> propiedad.  
  
 Use la <xref:System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap%2A> propiedad para asignar las asignaciones personalizadas entre un <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento y su control de formularios Windows Forms hospedado. Para más información, vea [Asignación de propiedades en formularios Windows Forms y WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlObjectElementUsage_WindowsFormsHost"></a>   
## <a name="xaml-object-element-usage"></a>Uso de elementos de objeto XAML  
  
```  
<WindowsFormsHost.../>  
```  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar un <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento para hospedar un <xref:System.Windows.Forms.MaskedTextBox?displayProperty=nameWithType> control. Para obtener más información, consulte [Tutorial: hospedar un Control de formularios Windows Forms en WPF XAML usando](~/docs/framework/wpf/advanced/walkthrough-hosting-a-windows-forms-control-in-wpf-by-using-xaml.md).  
  
 [!code-xaml[HostingWfInWpfWithXaml#1](~/samples/snippets/csharp/VS_Snippets_Wpf/HostingWfInWpfWithXaml/CSharp/HostingWfInWpf/Window1.xaml#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsHost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsHost();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">de plena confianza para todos los llamadores situados en la pila de llamadas. Un código de confianza parcial no puede utilizar este miembro.</permission>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize">Área final dentro del elemento primario que este elemento debe usar para organizarse a sí mismo y a los elementos secundarios.</param>
        <summary>Cuando se implementa en una clase derivada, coloca los elementos secundarios y determina un tamaño para una clase derivada de <see cref="T:System.Windows.FrameworkElement" />.</summary>
        <returns>Tamaño real usado.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Background">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Background { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Background" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.Background" />
      <MemberSignature Language="VB.NET" Value="Public Property Background As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ Background { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el fondo del control hospedado como una propiedad de ambiente.</summary>
        <value>
          <see cref="T:System.Windows.Media.Brush" /> establecido en el color de fondo.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad de dependencia se identifica mediante el <xref:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty> campo. De forma predeterminada, esta propiedad se asigna para actualizar la <xref:System.Windows.Forms.Control.BackColor%2A?displayProperty=nameWithType> y <xref:System.Windows.Forms.Control.BackgroundImage%2A?displayProperty=nameWithType> propiedades del control hospedado.  
  
 Para obtener más información sobre la asignación de la <xref:System.Windows.Forms.Integration.WindowsFormsHost.Background%2A> propiedad, vea [Windows Forms y WPF asignación de propiedad](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_Background"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Background="Brush"/>  
```  
  
<a name="xamlValues_Background"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *Pincel*  
 Consulte <xref:System.Windows.Media.Brush> para la sintaxis de atributo XAML.  
  
<a name="dependencyPropertyInfo_Background"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BackgroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BackgroundProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.BackgroundProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BackgroundProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BackgroundProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Background" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="BuildWindowCore">
      <MemberSignature Language="C#" Value="protected override System.Runtime.InteropServices.HandleRef BuildWindowCore (System.Runtime.InteropServices.HandleRef hwndParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Runtime.InteropServices.HandleRef BuildWindowCore(valuetype System.Runtime.InteropServices.HandleRef hwndParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function BuildWindowCore (hwndParent As HandleRef) As HandleRef" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Runtime::InteropServices::HandleRef BuildWindowCore(System::Runtime::InteropServices::HandleRef hwndParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.HandleRef</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndParent" Type="System.Runtime.InteropServices.HandleRef" />
      </Parameters>
      <Docs>
        <param name="hwndParent">Identificador de la ventana primaria (HWND).</param>
        <summary>Invalida la implementación de la clase base de <see cref="M:System.Windows.Interop.HwndHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" /> para compilar el control hospedado de Windows Forms.</summary>
        <returns>Identificador de ventana de este objeto.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Integration.WindowsFormsHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="Child">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Child { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Child" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" />
      <MemberSignature Language="VB.NET" Value="Public Property Child As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Child { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el control secundario hospedado por el elemento <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</summary>
        <value>El control de formularios Windows Forms hospedado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se puede hospedar el control de un solo elemento secundario, pero <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> puede tener cualquier número de elementos secundarios.  
  
 El control secundario no puede ser un formulario de nivel superior.  
  
 Si <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> es un <xref:System.Windows.Forms.Form>, del formulario <xref:System.Windows.Forms.Form.ControlBox%2A> propiedad está establecida en `false`.  
  
<a name="xamlTextUsage_Child"></a>   
## <a name="xaml-text-usage"></a>Uso de texto XAML  
 `<` *Objeto* `>`  
  
 `<` *hostedControl*  `.../>`  
  
 `</` *Objeto* `>`  
  
<a name="xamlValues_Child"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *object*  
 Un <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento (o una subclase posible).  
  
 *hostedControl*  
 Un elemento que especifica el control de formularios Windows Forms hospedado. Especificar el control personalizado en el marcado suele requerir una asignación xmlns, vea [espacios de nombres XAML y asignación de Namespace para XAML de WPF](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> propiedad que se va a agregar el control hospedado en el <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento. Para obtener más información, consulte [Tutorial: hospedar un ActiveX Control en WPF](~/docs/framework/wpf/advanced/walkthrough-hosting-an-activex-control-in-wpf.md).  
  
 [!code-csharp[HostingAxInWpf#11](~/samples/snippets/csharp/VS_Snippets_Wpf/HostingAxInWpf/CSharp/HostingAxInWpf/window1.xaml.cs#11)]
 [!code-vb[HostingAxInWpf#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HostingAxInWpf/VisualBasic/HostingAxInWpf/window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Se intentó asignar un formulario de nivel superior como control hospedado.</exception>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="ChildChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Forms.Integration.ChildChangedEventArgs&gt; ChildChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Forms.Integration.ChildChangedEventArgs&gt; ChildChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Integration.WindowsFormsHost.ChildChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event ChildChanged As EventHandler(Of ChildChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Forms::Integration::ChildChangedEventArgs ^&gt; ^ ChildChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Forms.Integration.ChildChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se establece el valor de la propiedad <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_ChildChanged"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object ChildChanged="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Child" />
      </Docs>
    </Member>
    <Member MemberName="DestroyWindowCore">
      <MemberSignature Language="C#" Value="protected override void DestroyWindowCore (System.Runtime.InteropServices.HandleRef hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void DestroyWindowCore(valuetype System.Runtime.InteropServices.HandleRef hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub DestroyWindowCore (hwnd As HandleRef)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void DestroyWindowCore(System::Runtime::InteropServices::HandleRef hwnd);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.Runtime.InteropServices.HandleRef" />
      </Parameters>
      <Docs>
        <param name="hwnd">Identificador de ventana. Este parámetro no se utiliza.</param>
        <summary>Invalida <see cref="M:System.Windows.Interop.HwndHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)" /> para eliminar la ventana que contiene este objeto.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Integration.WindowsFormsHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
        <summary>Libera los recursos no administrados utilizados por el objeto <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a la <xref:System.Windows.Forms.Integration.WindowsFormsHost.Dispose%2A> método desecha la base de <xref:System.Windows.Interop.HwndHost> y <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> control.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableWindowsFormsInterop">
      <MemberSignature Language="C#" Value="public static void EnableWindowsFormsInterop ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableWindowsFormsInterop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableWindowsFormsInterop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableWindowsFormsInterop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permite que un objeto <see cref="T:System.Windows.Forms.Form" /> funcione correctamente cuando se abre de forma no modal en WPF.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a la <xref:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop%2A> método para reenviar todos los mensajes de teclado cuando un <xref:System.Windows.Forms.Form?displayProperty=nameWithType> se abre de forma no modal. El <xref:System.Windows.Forms.Integration.WindowsFormsHost.EnableWindowsFormsInterop%2A> método instala un filtro de mensajes que se necesita para funcionar correctamente cuando se abre WPF los formularios no modales. Debe llamar a este método solo una vez para un determinado <xref:System.Windows.Forms.Integration.WindowsFormsHost> instancia.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.Demand">de plena confianza para todos los llamadores situados en la pila de llamadas. Un código de confianza parcial no puede utilizar este miembro.</permission>
        <altmember cref="M:System.Windows.Forms.Integration.ElementHost.EnableModelessKeyboardInterop(System.Windows.Window)" />
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Windows.Media.FontFamily FontFamily { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.FontFamily FontFamily" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily" />
      <MemberSignature Language="VB.NET" Value="Public Property FontFamily As FontFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::FontFamily ^ FontFamily { System::Windows::Media::FontFamily ^ get(); void set(System::Windows::Media::FontFamily ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la familia de fuentes del control hospedado.</summary>
        <value>La familia de fuentes que se usa en el control hospedado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Valor de esta propiedad afecta a solo los controles cuya plantilla utiliza la propiedad como un parámetro. No tiene ningún efecto en otros controles.  
  
 Esta propiedad de dependencia se identifica mediante el <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty> campo. De forma predeterminada, esta propiedad se asigna para actualizar la <xref:System.Windows.Forms.Control.Font%2A?displayProperty=nameWithType> propiedad del control hospedado. Para más información, vea [Asignación de propiedades en formularios Windows Forms y WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_FontFamily"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object FontFamily="fontFamily"/>  
```  
  
<a name="xamlValues_FontFamily"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *FontFamily*  
 Consulte <xref:System.Windows.Media.FontFamily> para la sintaxis de atributo XAML.  
  
<a name="dependencyPropertyInfo_FontFamily"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.FontFamily" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontFamilyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontFamilyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontFamilyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.FontFamilyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FontFamilyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FontFamilyProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontFamily" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Media.FontFamily" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontSize">
      <MemberSignature Language="C#" Value="public double FontSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 FontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize" />
      <MemberSignature Language="VB.NET" Value="Public Property FontSize As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double FontSize { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tamaño de fuente del control hospedado.</summary>
        <value>Tamaño de fuente que se usa en el control hospedado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad de dependencia se identifica mediante el <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty> campo. De forma predeterminada, esta propiedad se asigna para actualizar la <xref:System.Windows.Forms.Control.Font%2A?displayProperty=nameWithType> propiedad del control hospedado. Para más información, vea [Asignación de propiedades en formularios Windows Forms y WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_FontSize"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object FontSize="double"/>  
```  
  
<a name="xamlValues_FontSize"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *double*  
 Representación de cadena de un <xref:System.Double> valor igual o mayor que 0,0 pero menor que <xref:System.Double.PositiveInfinity>. Esto se interpreta como un [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] medida. Las cadenas no necesitan incluir explícitamente separadores decimales. Por ejemplo, un valor de 1 es aceptable.  
  
<a name="dependencyPropertyInfo_FontSize"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontSizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontSizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontSizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.FontSizeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FontSizeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FontSizeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontSize" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontStyle">
      <MemberSignature Language="C#" Value="public System.Windows.FontStyle FontStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontStyle FontStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FontStyle As FontStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FontStyle FontStyle { System::Windows::FontStyle get(); void set(System::Windows::FontStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el estilo de fuente del control hospedado.</summary>
        <value>Estilo de fuente que se usa en el control hospedado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad de dependencia se identifica mediante el <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty> campo. De forma predeterminada, esta propiedad se asigna para actualizar la <xref:System.Windows.Forms.Control.Font%2A?displayProperty=nameWithType> propiedad del control hospedado. Para más información, vea [Asignación de propiedades en formularios Windows Forms y WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_FontStyle"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object FontStyle="fontStyle"/>  
```  
  
<a name="xamlValues_FontStyle"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *fontStyle*  
 Consulte <xref:System.Windows.FontStyle> para la sintaxis de atributo XAML.  
  
<a name="dependencyPropertyInfo_FontStyle"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FontStyle" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.FontStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FontStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FontStyleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontStyle" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontWeight">
      <MemberSignature Language="C#" Value="public System.Windows.FontWeight FontWeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontWeight FontWeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight" />
      <MemberSignature Language="VB.NET" Value="Public Property FontWeight As FontWeight" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FontWeight FontWeight { System::Windows::FontWeight get(); void set(System::Windows::FontWeight value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontWeight</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el peso de fuente del control hospedado.</summary>
        <value>Peso de fuente que se usa en el control hospedado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad de dependencia se identifica mediante el <xref:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty> campo. De forma predeterminada, esta propiedad se asigna para actualizar la <xref:System.Windows.Forms.Control.Font%2A?displayProperty=nameWithType> propiedad del control hospedado. Para más información, vea [Asignación de propiedades en formularios Windows Forms y WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_FontWeight"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object FontWeight="fontWeight"/>  
```  
  
<a name="xamlValues_FontWeight"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *fontWeight*  
 Consulte <xref:System.Windows.FontWeight> para la sintaxis de atributo XAML.  
  
<a name="dependencyPropertyInfo_FontWeight"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FontWeight" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="FontWeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FontWeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FontWeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.FontWeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FontWeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FontWeightProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.FontWeight" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="Foreground">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Foreground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Foreground" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground" />
      <MemberSignature Language="VB.NET" Value="Public Property Foreground As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ Foreground { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el color de primer plano del control hospedado.</summary>
        <value>
          <see cref="T:System.Windows.Media.Brush" /> utilizado para establecer el color de primer plano del control hospedado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad de dependencia se identifica mediante el <xref:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty> campo. De forma predeterminada, esta propiedad se asigna para actualizar la <xref:System.Windows.Forms.Control.ForeColor%2A?displayProperty=nameWithType> propiedad del control hospedado. Para obtener más información sobre la asignación de la <xref:System.Windows.Forms.Integration.WindowsFormsHost.Foreground%2A> propiedad, vea [Windows Forms y WPF asignación de propiedad](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
<a name="xamlAttributeUsage_Foreground"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Foreground="Brush"/>  
```  
  
<a name="xamlValues_Foreground"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *Pincel*  
 Consulte <xref:System.Windows.Media.Brush> para la sintaxis de atributo XAML.  
  
<a name="dependencyPropertyInfo_Foreground"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>,<br /><br /> <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>,<br /><br /> <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Brush" />
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForegroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForegroundProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.ForegroundProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForegroundProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForegroundProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Foreground" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="LayoutError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt; LayoutError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt; LayoutError" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Integration.WindowsFormsHost.LayoutError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LayoutError As EventHandler(Of LayoutExceptionEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Forms::Integration::LayoutExceptionEventArgs ^&gt; ^ LayoutError;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Forms.Integration.LayoutExceptionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se detecta un error de diseño, como un sesgo o una rotación que <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> no admite.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_LayoutError"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object LayoutError="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.LayoutExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size constraint);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size constraint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (constraint As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size constraint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraint" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="constraint">Tamaño disponible para el objeto <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</param>
        <summary>Invalida la implementación de la clase base de <see cref="M:System.Windows.Interop.HwndHost.MeasureOverride(System.Windows.Size)" /> para medir el tamaño de un objeto <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> y devolver los tamaños correctos al motor de diseño.</summary>
        <returns>Tamaño deseado del objeto <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las restricciones de tamaño en el diseño de WPF son las restricciones de disco duras. Si se superan las restricciones, el host debe recortar el contenido dentro de la región hospedada. La implementación de este método exige este comportamiento.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> para el elemento <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</summary>
        <returns>Un <see cref="T:System.Windows.Automation.Peers.WindowsFormsHostAutomationPeer" /> para el elemento <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Argumentos que identifican la propiedad que cambió y proporcionan los valores antiguos y nuevos de esa propiedad.</param>
        <summary>Obliga a que se traduzca una propiedad asignada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llamar a la <xref:System.Windows.Forms.Integration.WindowsFormsHost.OnPropertyChanged%2A> método puede ser necesario cuando ha cambiado una propiedad de un elemento antecesor, pero el valor local de la <xref:System.Windows.Forms.Integration.WindowsFormsHost> no ha cambiado el elemento. Para más información, vea [Asignación de propiedades en formularios Windows Forms y WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Padding { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica el tamaño del relleno deseado en el control hospedado de Windows Forms.</summary>
        <value>Un <see cref="T:System.Windows.Thickness" /> controlar la estructura que representa el relleno Windows Forms hospedado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_Padding"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Padding="Thickness"/>  
```  
  
<a name="xamlValues_Padding"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *Grosor*  
 Consulte <xref:System.Windows.Thickness> para la sintaxis de atributo XAML.  
  
<a name="dependencyPropertyInfo_Padding"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Forms.Integration.WindowsFormsHost.PaddingProperty>|  
|Propiedades de metadatos establecidos en `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="PaddingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PaddingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PaddingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.PaddingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PaddingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PaddingProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.Padding" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyMap">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Integration.PropertyMap PropertyMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Integration.PropertyMap PropertyMap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.PropertyMap" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyMap As PropertyMap" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Integration::PropertyMap ^ PropertyMap { System::Windows::Forms::Integration::PropertyMap ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Integration.PropertyMap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el mapa de propiedades que determina cómo la configuración de las propiedades en el elemento <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> afecta al control hospedado de Windows Forms.</summary>
        <value>A <see cref="T:System.Windows.Forms.Integration.PropertyMap" /> que asigna <see cref="T:System.Windows.Forms.Integration.WindowsFormsHost" /> propiedades a las propiedades en el control de formularios Windows Forms hospedado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las tecnologías de Windows Forms y WPF tienen dos modelos de propiedades similares pero diferentes. *Asignación de propiedad* admite la interoperación entre las dos arquitecturas. Para más información, vea [Asignación de propiedades en formularios Windows Forms y WPF](~/docs/framework/wpf/advanced/windows-forms-and-wpf-property-mapping.md).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo agregar una asignación para la <xref:System.Windows.FrameworkElement.FlowDirection%2A> propiedad a un <xref:System.Windows.Forms.Integration.WindowsFormsHost> control.  
  
 [!code-csharp[PropertyMappingWithWfh#12](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMappingWithWfhSample/CSharp/PropertyMappingWithWfh/Window1.xaml.cs#12)] 
 [!code-vb[PropertyMappingWithWfh#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertyMappingWithWfhSample/VisualBasic/PropertyMappingWithWfh/Window1.xaml.vb#12)]   
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.PropertyMap" />
      </Docs>
    </Member>
    <Member MemberName="ScaleChild">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Vector ScaleChild (System.Windows.Vector newScale);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Vector ScaleChild(valuetype System.Windows.Vector newScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.ScaleChild(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ScaleChild (newScale As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Vector ScaleChild(System::Windows::Vector newScale);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newScale" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="newScale">Nuevo factor de escala.</param>
        <summary>Escala el control hospedado de Windows Forms y realiza un seguimiento del factor de escala.</summary>
        <returns>
          <see cref="T:System.Windows.Vector" /> que representa el factor de escala aplicado al control hospedado de Windows Forms.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Controles de formularios Windows Forms no admiten el ajuste de escala en la misma manera que los elementos de WPF. Por ejemplo, ajuste de escala en un control de formularios Windows Forms de un factor de 1 a un factor de 0,5 y hacia un factor de 1, por lo general, se recupera el tamaño original del control. Para más información, vea [Consideraciones sobre el diseño del elemento WindowsFormsHost](~/docs/framework/wpf/advanced/layout-considerations-for-the-windowsformshost-element.md).  
  
 Invalidar el <xref:System.Windows.Forms.Integration.WindowsFormsHost.ScaleChild%2A> método para proporcionar un comportamiento de ajuste de escala personalizado para el control de formularios Windows Forms hospedado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TabIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el índice de tabulación del control hospedado.</summary>
        <value>Índice de tabulación para la navegación con tabulador y el foco.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad de dependencia se identifica mediante el <xref:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty> campo.  
  
 Utilice esta propiedad para cambiar el orden de navegación entre los controles en un formulario. Un control con un índice de tabulación más bajo obtendrá el foco antes que un control con un índice más alto.  
  
<a name="xamlAttributeUsage_TabIndex"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object TabIndex="int"/>  
```  
  
<a name="dependencyPropertyInfo_TabIndex"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="TabIndexProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TabIndexProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TabIndexProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Integration.WindowsFormsHost.TabIndexProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TabIndexProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TabIndexProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Forms.Integration.WindowsFormsHost.TabIndex" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="TabInto">
      <MemberSignature Language="C#" Value="public virtual bool TabInto (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TabInto(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.TabInto(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TabInto (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TabInto(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">
          <see cref="T:System.Windows.Input.TraversalRequest" /> que especifica el comportamiento de foco.</param>
        <summary>Reenvía el foco desde WPF hasta el control hospedado de Windows Forms.</summary>
        <returns>
          <see langword="true" /> si se activó un control; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando un <xref:System.Windows.Forms.Integration.WindowsFormsHost> elemento recibe un comando de la PESTAÑA de la <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A> método, el derecho a primer control en <xref:System.Windows.Forms.Integration.WindowsFormsHost.Child%2A> recibe el foco.  
  
 El primer control especificado por el `request` parámetro. Cuando `request` es <xref:System.Windows.Input.FocusNavigationDirection.Next>, el comportamiento es similar a presionar la tecla TAB. Cuando `request` es <xref:System.Windows.Input.FocusNavigationDirection.Previous>, el comportamiento es similar a presionar la tecla MAYÚS + TAB.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Integration.ElementHost" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override IntPtr WndProc (IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int WndProc(native int hwnd, int32 msg, native int wParam, native int lParam, bool&amp; handled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Integration.WindowsFormsHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function WndProc (hwnd As IntPtr, msg As Integer, wParam As IntPtr, lParam As IntPtr, ByRef handled As Boolean) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, bool % handled);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsFormsIntegration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wParam" Type="System.IntPtr" />
        <Parameter Name="lParam" Type="System.IntPtr" />
        <Parameter Name="handled" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hwnd">Identificador de la ventana hospedada.</param>
        <param name="msg">Mensaje en el que se va a actuar.</param>
        <param name="wParam">Información que puede ser relevante para controlar el mensaje. Se suele utilizar para almacenar pequeños fragmentos de información, como los marcadores.</param>
        <param name="lParam">Información que puede ser relevante para controlar el mensaje. Se suele utilizar para hacer referencia a un objeto.</param>
        <param name="handled">Indica si los eventos resultantes deben marcarse como controlados.</param>
        <summary>Cuando se implementa en una clase derivada, obtiene acceso al proceso de la ventana secundaria hospedada.</summary>
        <returns>Identificador de ventana de la ventana secundaria.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>