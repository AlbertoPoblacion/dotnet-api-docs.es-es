<Type Name="ContentControl" FullName="System.Windows.Controls.ContentControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9095c9f3f616775fa021043f3194f24d1dbfeaff" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36368268" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ContentControl : System.Windows.Controls.Control, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ContentControl extends System.Windows.Controls.Control implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ContentControl" />
  <TypeSignature Language="VB.NET" Value="Public Class ContentControl&#xA;Inherits Control&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContentControl : System::Windows::Controls::Control, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type ContentControl = class&#xA;    inherit Control&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Control</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Content")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Content")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a control with a single piece of content of any type.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Controls.ContentControl> puede contener cualquier tipo de objeto de common language runtime (como una cadena o un <xref:System.DateTime> objeto) o un <xref:System.Windows.UIElement> objeto (como un <xref:System.Windows.Shapes.Rectangle> o <xref:System.Windows.Controls.Panel>). Esto le permite agregar contenido enriquecido para controles como <xref:System.Windows.Controls.Button> y <xref:System.Windows.Controls.CheckBox>.  
  
 La siguiente ilustración muestra cuatro botones cuya <xref:System.Windows.Controls.ContentControl.Content%2A> propiedad se establece en uno de los siguientes:  
  
-   Una cadena.  
  
-   Un objeto <xref:System.DateTime>.  
  
-   Un objeto <xref:System.Windows.UIElement>.  
  
-   A <xref:System.Windows.Controls.Panel> control que contiene otros <xref:System.Windows.UIElement> objetos.  
  
 ![Cuatro botones](~/add/media/controlcontentmodelbuttons.PNG "cuatro botones")  
Cuatro botones con diferentes tipos de contenido  
  
 Un <xref:System.Windows.Controls.ContentControl> tiene un estilo predeterminado limitado. Si desea mejorar la apariencia del control, puede crear un nuevo <xref:System.Windows.DataTemplate>. Para obtener más información, consulte [Información general sobre plantillas de datos](~/docs/framework/wpf/data/data-templating-overview.md). Otro escenario típico es usar la <xref:System.Windows.Controls.ContentControl> para mostrar más información sobre un elemento seleccionado en un <xref:System.Windows.Controls.ItemsControl> control. Para obtener más información, consulte [Cómo: enlazar a una colección y mostrar información en función de selección](~/docs/framework/wpf/data/how-to-bind-to-a-collection-and-display-information-based-on-selection.md).  
  
 Propiedades de dependencia para este control se pueden establecer el estilo predeterminado del control.  Si se establece una propiedad de un estilo predeterminado, puede cambiar la propiedad de su valor predeterminado cuando el control aparece en la aplicación. El estilo predeterminado se determina por el tema del escritorio que se utiliza cuando se ejecuta la aplicación.  Para obtener más información, consulte [temas de WPF predeterminado](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear los cuatro botones que se muestra en la sección Comentarios.  
  
> [!NOTE]
>  Aunque la [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] versión del ejemplo se podría utilizar el `<Button.Content>` etiquetas alrededor del contenido de cada botón, no es necesario. Para obtener más información, consulte [información general sobre XAML (WPF)](~/docs/framework/wpf/advanced/xaml-overview-wpf.md).  
  
 [!code-xaml[ControlContentOverviewSnippets#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlContentOverviewSnippets/CSharp/Window1.xaml#1)]  
  
 [!code-csharp[ControlContentOverviewSnippets#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlContentOverviewSnippets/CSharp/Window1.xaml.cs#2)]
 [!code-vb[ControlContentOverviewSnippets#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ControlContentOverviewSnippets/VisualBasic/Window1.xaml.vb#2)]  
  
 En el ejemplo siguiente se muestra cómo hacer que un estilo un <xref:System.Windows.Controls.ContentControl> para que el control tiene un aspecto visual mejorado.  
  
 [!code-xaml[ContentControl#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentControl/CSharp/Page1.xaml#1)]  
[!code-xaml[ContentControl#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentControl/CSharp/Page1.xaml#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContentControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContentControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Windows.Controls.ContentControl" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="protected virtual void AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddChild (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddChild(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member AddChild : obj -&gt; unit&#xA;override this.AddChild : obj -&gt; unit" Usage="contentControl.AddChild value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to add.</param>
        <summary>Adds a specified object as the child of a <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddText">
      <MemberSignature Language="C#" Value="protected virtual void AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AddText : string -&gt; unit&#xA;override this.AddText : string -&gt; unit" Usage="contentControl.AddText text" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The string to add.</param>
        <summary>Adds a specified text string to a <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Content">
      <MemberSignature Language="C#" Value="public object Content { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Content" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ContentControl.Content" />
      <MemberSignature Language="VB.NET" Value="Public Property Content As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Content { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Content : obj with get, set" Usage="System.Windows.Controls.ContentControl.Content" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the content of a <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
        <value>Objeto que contiene el contenido del control. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dado que la <xref:System.Windows.Controls.ContentControl.Content%2A> propiedad es de tipo <xref:System.Object>, no hay ninguna restricción sobre lo que se puede colocar un <xref:System.Windows.Controls.ContentControl>. El <xref:System.Windows.Controls.ContentControl.Content%2A> se muestra por un <xref:System.Windows.Controls.ContentPresenter>, que se encuentra en la <xref:System.Windows.Controls.ControlTemplate> de la <xref:System.Windows.Controls.ContentControl>.  Cada <xref:System.Windows.Controls.ContentControl> escriba [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] tiene un <xref:System.Windows.Controls.ContentPresenter> en su valor predeterminado <xref:System.Windows.Controls.ControlTemplate>.  Para obtener más información acerca de cómo los <xref:System.Windows.Controls.ContentPresenter> muestra <xref:System.Windows.Controls.ContentControl.Content%2A>, consulte <xref:System.Windows.Controls.ContentPresenter>.  
  
<a name="dependencyPropertyInfo_Content"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Controls.ContentControl.ContentProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
<a name="xamlAttributeUsage_Content"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object Content="content"/>  
```  
  
<a name="xamlPropertyElementUsage_Content"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object> content</object>  
```  
  
<a name="xamlValues_Content"></a>   
## <a name="xaml-values"></a>Valores XAML  
 `Content`  
 Texto o un único objeto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear cuatro <xref:System.Windows.Controls.Button> controla con <xref:System.Windows.Controls.ContentControl.Content%2A> establecido en uno de los siguientes:  
  
-   Una cadena.  
  
-   Un objeto <xref:System.DateTime>.  
  
-   Un objeto <xref:System.Windows.UIElement>.  
  
-   A <xref:System.Windows.Controls.Panel> control que contiene otros <xref:System.Windows.UIElement> objetos.  
  
> [!NOTE]
>  Aunque la [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] versión del ejemplo se podría utilizar el `<Button.Content>` etiquetas alrededor del contenido de cada botón, no es necesario. Para obtener más información, consulte [información general sobre XAML (WPF)](~/docs/framework/wpf/advanced/xaml-overview-wpf.md).  
  
 [!code-xaml[ControlContentOverviewSnippets#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlContentOverviewSnippets/CSharp/Window1.xaml#1)]  
  
 [!code-csharp[ControlContentOverviewSnippets#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlContentOverviewSnippets/CSharp/Window1.xaml.cs#2)]
 [!code-vb[ControlContentOverviewSnippets#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ControlContentOverviewSnippets/VisualBasic/Window1.xaml.vb#2)]  
  
 En la siguiente ilustración muestra los cuatro botones creados en el ejemplo anterior.  
  
 ![Cuatro botones](~/add/media/controlcontentmodelbuttons.PNG "cuatro botones")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ContentControl.ContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.ContentControl.ContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.Content" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentStringFormat">
      <MemberSignature Language="C#" Value="public string ContentStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentStringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ContentControl.ContentStringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentStringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentStringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentStringFormat : string with get, set" Usage="System.Windows.Controls.ContentControl.ContentStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a composite string that specifies how to format the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property if it is displayed as a string.</summary>
        <value>Una cadena compuesta que especifica cómo dar formato a la <see cref="P:System.Windows.Controls.ContentControl.Content" /> propiedad si se muestra como una cadena.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ContentControl.ContentStringFormat%2A> puede ser un formato de cadena predefinido, compuesto o personalizado. Para obtener más información acerca de los formatos de cadena, vea [Formatting Types](~/docs/standard/base-types/formatting-types.md).  Si establece la <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> o <xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A> propiedad de un <xref:System.Windows.Controls.ContentControl>, el <xref:System.Windows.Controls.ContentControl.ContentStringFormat%2A> propiedad se omite.  
  
   
  
## Examples  
 En el ejemplo siguiente se especifica el formato de <xref:System.DateTime> objetos estableciendo la <xref:System.Windows.Controls.ContentControl.ContentStringFormat%2A> propiedad en un <xref:System.Windows.Style> y aplicar el <xref:System.Windows.Style> a dos <xref:System.Windows.Controls.Label> objetos, que heredan de <xref:System.Windows.Controls.ContentControl>.  
  
 [!code-xaml[ContentStringSnippets#ContentControl](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#contentcontrol)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentStringFormatProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentStringFormatProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentStringFormatProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ContentControl.ContentStringFormatProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContentStringFormatProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContentStringFormatProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContentStringFormatProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.ContentControl.ContentStringFormatProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.ContentStringFormat" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate ContentTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate ContentTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ContentControl.ContentTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentTemplate As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DataTemplate ^ ContentTemplate { System::Windows::DataTemplate ^ get(); void set(System::Windows::DataTemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentTemplate : System.Windows.DataTemplate with get, set" Usage="System.Windows.Controls.ContentControl.ContentTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the data template used to display the content of the <see cref="T:System.Windows.Controls.ContentControl" />.</summary>
        <value>Una plantilla de datos. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Establezca esta propiedad en un <xref:System.Windows.DataTemplate> para especificar la apariencia de la <xref:System.Windows.Controls.ContentControl>. Para obtener más información sobre plantillas de datos, vea [información general sobre plantillas de datos](~/docs/framework/wpf/data/data-templating-overview.md).  
  
<a name="xamlAttributeUsage_ContentTemplate"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object ContentTemplate="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlValues_ContentTemplate"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *resourceExtension*  
 Una extensión de marcado que identifica la forma de hacer referencia al recurso de plantilla, ya sea `StaticResource` o `DynamicResource`. Vea [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *styleResourceKey*  
 La clave que identifica el selector de plantilla solicitada. La clave hace referencia a un recurso existente en un <xref:System.Windows.ResourceDictionary>.  
  
> [!NOTE]
>  Sintaxis de elemento de propiedad es técnicamente posible, pero no se recomienda. Para obtener más información, consulte [plantillas y estilos insertados](~/docs/framework/wpf/advanced/inline-styles-and-templates.md).  
  
<a name="dependencyPropertyInfo_ContentTemplate"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Controls.ContentControl.ContentTemplateProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 Los ejemplos siguientes muestran cómo crear una plantilla de contenido y aplicar la plantilla a un control de contenido.  
  
 [!code-xaml[ContentControl#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentControl/CSharp/Page1.xaml#2)]  
  
 [!code-xaml[ContentControl#3](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentControl/CSharp/Page1.xaml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ContentControl.ContentTemplateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContentTemplateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContentTemplateProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContentTemplateProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.ContentControl.ContentTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector ContentTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector ContentTemplateSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ContentControl.ContentTemplateSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentTemplateSelector As DataTemplateSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::DataTemplateSelector ^ ContentTemplateSelector { System::Windows::Controls::DataTemplateSelector ^ get(); void set(System::Windows::Controls::DataTemplateSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentTemplateSelector : System.Windows.Controls.DataTemplateSelector with get, set" Usage="System.Windows.Controls.ContentControl.ContentTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a template selector that enables an application writer to provide custom template-selection logic.</summary>
        <value>Un selector de plantilla de datos. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, se crea un <xref:System.Windows.Controls.DataTemplateSelector> cuando haya más de un <xref:System.Windows.DataTemplate> para el mismo tipo de objetos y desea proporcionar su propia lógica para elegir un <xref:System.Windows.DataTemplate> aplicar basándose en las propiedades de cada objeto de datos. Tenga en cuenta que si tiene objetos de diferentes tipos que se puede establecer la <xref:System.Windows.DataTemplate.DataType%2A> propiedad en el <xref:System.Windows.DataTemplate>. Si lo hace, no es necesario para crear un <xref:System.Windows.Controls.DataTemplateSelector>. Además, si tiene objetos del mismo tipo pero con propiedades diferentes, también puede plantearse el uso de un <xref:System.Windows.DataTrigger> o un convertidor de datos. Para obtener más información, consulte [Información general sobre plantillas de datos](~/docs/framework/wpf/data/data-templating-overview.md).  
  
 Para crear un selector de plantillas, cree una clase que hereda de <xref:System.Windows.Controls.DataTemplateSelector> e invalide el <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método. Después de define la clase, puede asignar una instancia de la clase a la propiedad de selector de plantilla de su elemento.  
  
 Si tanto la <xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A> y <xref:System.Windows.Controls.ContentControl.ContentTemplate%2A> se establecen las propiedades, a continuación, se omite esta propiedad.  
  
<a name="xamlAttributeUsage_ContentTemplateSelector"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object ContentTemplateSelector="{ResourceExtension TemplateSelectorKey}"/>  
```  
  
<a name="xamlValues_ContentTemplateSelector"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *resourceExtension*  
 Una extensión de marcado que identifica la forma de hacer referencia al recurso de plantilla, ya sea `StaticResource` o `DynamicResource`. Vea [recursos XAML](~/docs/framework/wpf/advanced/xaml-resources.md).  
  
 *TemplateSelectorKey*  
 La clave que identifica el selector de plantilla solicitada. La clave hace referencia a un recurso existente en un <xref:System.Windows.ResourceDictionary>.  
  
<a name="dependencyPropertyInfo_ContentTemplateSelector"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar la propiedad <xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A>. Este ejemplo enlaza el elemento seleccionado en un <xref:System.Windows.Controls.ComboBox> a la <xref:System.Windows.Controls.ContentControl.Content%2A> propiedad de un <xref:System.Windows.Controls.Label>, que hereda de <xref:System.Windows.Controls.ContentControl>.  Cuando el usuario selecciona un valor inferior a 5, el valor del elemento seleccionado aparece en un cuadrado negro en el <xref:System.Windows.Controls.Label>.  Cuando el usuario selecciona un valor que es 5 o posterior, el valor aparece en una elipse verde. En el ejemplo se logra esto mediante la creación de dos <xref:System.Windows.DataTemplate> objetos y un <xref:System.Windows.Controls.DataTemplateSelector>, que se establece en el <xref:System.Windows.Controls.ContentControl.ContentTemplateSelector%2A> propiedad y elige la correspondiente <xref:System.Windows.DataTemplate> según el valor del elemento seleccionado.  
  
 [!code-xaml[ContentControlTemplateSelector#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentControlTemplateSelector/CSharp/Window1.xaml#1)]  
[!code-csharp[ContentControlTemplateSelector#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentControlTemplateSelector/CSharp/Window1.xaml.cs#2)]
[!code-vb[ContentControlTemplateSelector#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentControlTemplateSelector/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContentTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContentTemplateSelectorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContentTemplateSelectorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContentTemplateSelectorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContentTemplateSelectorProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplateSelector" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasContent">
      <MemberSignature Language="C#" Value="public bool HasContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ContentControl.HasContent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasContent : bool" Usage="System.Windows.Controls.ContentControl.HasContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Controls.ContentControl" /> contains content.</summary>
        <value>
          <see langword="true" /> Si el <see cref="T:System.Windows.Controls.ContentControl" /> tiene contenido; en caso contrario <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Controls.ContentControl.Content%2A> propiedad es `null`, esta propiedad devuelve `false`.  
  
<a name="dependencyPropertyInfo_HasContent"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Controls.ContentControl.HasContentProperty>|  
|Propiedades de metadatos establecidos en `true`|Ninguna|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Windows.Controls.ContentControl.HasContent%2A> propiedad para determinar si un control de contenido incluye contenido.  
  
 [!code-csharp[ContentControl#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentControl/CSharp/Page1.xaml.cs#4)]
 [!code-vb[ContentControl#4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentControl/VisualBasic/Page1.xaml.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HasContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HasContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ContentControl.HasContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HasContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HasContentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HasContentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.ContentControl.HasContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:System.Windows.Controls.ContentControl.HasContent" /> dependency property.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ContentControl.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.Controls.ContentControl.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an enumerator to the content control's logical child elements.</summary>
        <value>Enumerador. El valor predeterminado es <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberSignature Language="F#" Value="abstract member OnContentChanged : obj * obj -&gt; unit&#xA;override this.OnContentChanged : obj * obj -&gt; unit" Usage="contentControl.OnContentChanged (oldContent, newContent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent">The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
        <param name="newContent">The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.</param>
        <summary>Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentStringFormatChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContentStringFormatChanged (string oldContentStringFormat, string newContentStringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentStringFormatChanged(string oldContentStringFormat, string newContentStringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.OnContentStringFormatChanged(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentStringFormatChanged (oldContentStringFormat As String, newContentStringFormat As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentStringFormatChanged(System::String ^ oldContentStringFormat, System::String ^ newContentStringFormat);" />
      <MemberSignature Language="F#" Value="abstract member OnContentStringFormatChanged : string * string -&gt; unit&#xA;override this.OnContentStringFormatChanged : string * string -&gt; unit" Usage="contentControl.OnContentStringFormatChanged (oldContentStringFormat, newContentStringFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContentStringFormat" Type="System.String" />
        <Parameter Name="newContentStringFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldContentStringFormat">The old value of <see cref="P:System.Windows.Controls.ContentControl.ContentStringFormat" />.</param>
        <param name="newContentStringFormat">The new value of <see cref="P:System.Windows.Controls.ContentControl.ContentStringFormat" />.</param>
        <summary>Occurs when the <see cref="P:System.Windows.Controls.ContentControl.ContentStringFormat" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentTemplateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContentTemplateChanged (System.Windows.DataTemplate oldContentTemplate, System.Windows.DataTemplate newContentTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentTemplateChanged(class System.Windows.DataTemplate oldContentTemplate, class System.Windows.DataTemplate newContentTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentTemplateChanged (oldContentTemplate As DataTemplate, newContentTemplate As DataTemplate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentTemplateChanged(System::Windows::DataTemplate ^ oldContentTemplate, System::Windows::DataTemplate ^ newContentTemplate);" />
      <MemberSignature Language="F#" Value="abstract member OnContentTemplateChanged : System.Windows.DataTemplate * System.Windows.DataTemplate -&gt; unit&#xA;override this.OnContentTemplateChanged : System.Windows.DataTemplate * System.Windows.DataTemplate -&gt; unit" Usage="contentControl.OnContentTemplateChanged (oldContentTemplate, newContentTemplate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContentTemplate" Type="System.Windows.DataTemplate" />
        <Parameter Name="newContentTemplate" Type="System.Windows.DataTemplate" />
      </Parameters>
      <Docs>
        <param name="oldContentTemplate">The old value of the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> property.</param>
        <param name="newContentTemplate">The new value of the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> property.</param>
        <summary>Called when the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplate" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentTemplateSelectorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContentTemplateSelectorChanged (System.Windows.Controls.DataTemplateSelector oldContentTemplateSelector, System.Windows.Controls.DataTemplateSelector newContentTemplateSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentTemplateSelectorChanged(class System.Windows.Controls.DataTemplateSelector oldContentTemplateSelector, class System.Windows.Controls.DataTemplateSelector newContentTemplateSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.OnContentTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentTemplateSelectorChanged (oldContentTemplateSelector As DataTemplateSelector, newContentTemplateSelector As DataTemplateSelector)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentTemplateSelectorChanged(System::Windows::Controls::DataTemplateSelector ^ oldContentTemplateSelector, System::Windows::Controls::DataTemplateSelector ^ newContentTemplateSelector);" />
      <MemberSignature Language="F#" Value="abstract member OnContentTemplateSelectorChanged : System.Windows.Controls.DataTemplateSelector * System.Windows.Controls.DataTemplateSelector -&gt; unit&#xA;override this.OnContentTemplateSelectorChanged : System.Windows.Controls.DataTemplateSelector * System.Windows.Controls.DataTemplateSelector -&gt; unit" Usage="contentControl.OnContentTemplateSelectorChanged (oldContentTemplateSelector, newContentTemplateSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContentTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
        <Parameter Name="newContentTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
      </Parameters>
      <Docs>
        <param name="oldContentTemplateSelector">The old value of the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplateSelector" /> property.</param>
        <param name="newContentTemplateSelector">The new value of the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplateSelector" /> property.</param>
        <summary>Called when the <see cref="P:System.Windows.Controls.ContentControl.ContentTemplateSelector" /> property changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeContent">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSerializeContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSerializeContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.ShouldSerializeContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ShouldSerializeContent () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ShouldSerializeContent();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeContent : unit -&gt; bool&#xA;override this.ShouldSerializeContent : unit -&gt; bool" Usage="contentControl.ShouldSerializeContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates whether the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property should be persisted.</summary>
        <returns>
          <see langword="true" /> if the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property should be persisted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esto `ShouldSerialize` se proporciona el método porque el <xref:System.Windows.Controls.ContentControl.Content%2A> propiedad no tiene un valor predeterminado simple. Este método indica si la propiedad ha cambiado respecto de su valor predeterminado. Normalmente se invoca este método si está desarrollando o un diseñador para el <xref:System.Windows.Controls.ContentControl> o desarrollar su propio control que incorpore el <xref:System.Windows.Controls.ContentControl>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object to add as a child.</param>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">A string to add to the object.</param>
        <summary>This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>