<Type Name="ControlTemplate" FullName="System.Windows.Controls.ControlTemplate">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a7ed370995c97a016ae19ef35bcfa3672de490a6" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48766361" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ControlTemplate : System.Windows.FrameworkTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlTemplate extends System.Windows.FrameworkTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ControlTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlTemplate&#xA;Inherits FrameworkTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlTemplate : System::Windows::FrameworkTemplate" />
  <TypeSignature Language="F#" Value="type ControlTemplate = class&#xA;    inherit FrameworkTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Windows.Markup.DictionaryKeyProperty("TargetType")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Especifica la estructura visual y los aspectos de comportamiento de <see cref="T:System.Windows.Controls.Control" /> que se puede compartir entre varias instancias del control.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Controls.ControlTemplate> le permite especificar la estructura visual de un control. El autor del control puede definir el valor predeterminado <xref:System.Windows.Controls.ControlTemplate> y autor de la aplicación puede invalidar el <xref:System.Windows.Controls.ControlTemplate> para reconstruir la estructura visual del control.  
  
 Creación de plantillas de control es una de las muchas características que ofrece el [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] modelo aplicar estilos y plantillas. El modelo de estilos y plantillas le proporciona flexibilidad tan amplia que en muchos casos no es necesario escribir sus propios controles. Si es un autor de la aplicación que desea cambiar la visualización del control o para reemplazar el <xref:System.Windows.Controls.ControlTemplate> de un control existente, consulte el [aplicar estilos y plantillas](~/docs/framework/wpf/controls/styling-and-templating.md) tema para ver ejemplos y una explicación más detallada.  
  
 Si está escribiendo su propio control, vea "Crear un Control personalizado" en el [Control Authoring Overview](~/docs/framework/wpf/controls/control-authoring-overview.md).  
  
 Un <xref:System.Windows.Controls.ControlTemplate> está pensado para ser una unidad autónoma de detalle de implementación que no es visible para los objetos, incluidos los estilos y los usuarios externos. Es la única manera de manipular el contenido de la plantilla de control desde la misma plantilla de control.  
  
<a name="xamlObjectElementUsage_VisualTree"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<ControlTemplate>  
  <VisualTreeRootNode > VisualTreeNodeContents  
  </VisualTreeRootNode >  
</ControlTemplate>  
```  
  
<a name="xamlValues_VisualTree"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *ControlTemplate*  
 Elemento de objeto para <xref:System.Windows.Controls.ControlTemplate> o una clase derivada.  
  
 *VisualTreeRootNode*  
 Una sola [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] como el elemento secundario inmediato del elemento el <xref:System.Windows.Controls.ControlTemplate> (o una clase derivada). Las plantillas deben tener un único nodo raíz. Con el fin de generar una plantilla útil, el elemento elegido como *VisualTreeRootNode* espera que admita un modelo de contenido de su propia, a menudo un modelo que admite varios elementos secundarios.  
  
 *VisualTreeNodeContents*  
 Uno o más elementos que completan la plantilla. Si el elemento elegido como *VisualTreeRootNode* sólo admite un único elemento secundario, a continuación, puede haber solo se puede declarar un elemento como *VisualTreeNodeContents*. También es posible (aunque poco frecuente) proporcionar contenido de texto si los elegidos *VisualTreeRootNode* admite una propiedad de contenido de texto.  
  
   
  
## Examples  
 El siguiente se muestra un <xref:System.Windows.Controls.Button> <xref:System.Windows.Style> que establece el <xref:System.Windows.Controls.ControlTemplate> de un <xref:System.Windows.Controls.Button>:  
  
 [!code-xaml[StylingIntroSample_snippet#ButtonCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSample_snippet/CSharp/Window1.xaml#buttonct)]     
  
 Una vez aplicado, el <xref:System.Windows.Controls.Button> aparece como un <xref:System.Windows.Shapes.Ellipse>:  
  
 ![Ejemplo de ControlTemplate de Button](~/add/media/stylingintro-buttoncontroltemplate.png "ejemplo de ControlTemplate de Button")  
  
 Al establecer el <xref:System.Windows.Controls.Control.Template%2A> propiedad de un <xref:System.Windows.Controls.Control> a un nuevo <xref:System.Windows.Controls.ControlTemplate> como se muestra en el ejemplo anterior, se va a sustituir toda la plantilla. ¿Qué la <xref:System.Windows.Controls.Button> aspecto cuando tiene el foco o presiona forma parte de la apariencia predeterminada del botón que se va a sustituir. Por lo tanto, según sus necesidades, es posible que desee colocar en la definición de aspecto cuando se presiona el botón y así sucesivamente, como en el ejemplo siguiente:  
  
 [!code-xaml[ControlTemplateExamples#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/button.xaml#1)]  
  
 Tenga en cuenta que este ejemplo hace referencia a los recursos que no se muestran aquí. Para ver un ejemplo completo, consulte [Aplicación de estilos con el ejemplo ControlTemplates](http://go.microsoft.com/fwlink/?LinkID=160041). Ese ejemplo proporciona ejemplos de plantillas de control para muchos controles y es la mejor manera para que pueda empezar a trabajar con la creación de plantillas de control.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Style" />
    <altmember cref="T:System.Windows.DataTemplate" />
    <altmember cref="T:System.Windows.Controls.ContentPresenter" />
    <altmember cref="T:System.Windows.Controls.ItemsPresenter" />
    <altmember cref="T:System.Windows.TemplateBindingExtension" />
    <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
    <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160010">Introducción a los estilos y plantillas de ejemplo</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlTemplate (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlTemplate(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Controls.ControlTemplate : Type -&gt; System.Windows.Controls.ControlTemplate" Usage="new System.Windows.Controls.ControlTemplate targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType">Tipo para el que está prevista esta plantilla.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Controls.ControlTemplate" /> con el tipo de destino especificado.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Controls.ControlTemplate.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el tipo para el que está pensado este elemento <see cref="T:System.Windows.Controls.ControlTemplate" />.</summary>
        <value>El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si tiene una independiente <xref:System.Windows.Controls.ControlTemplate> en la sección de recursos con el <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> propiedad establecida en un tipo, el <xref:System.Windows.Controls.ControlTemplate> no se aplique a ese tipo automáticamente. En su lugar, debe especificar un `x:Key` y aplicar la plantilla de forma explícita.  
  
 Tenga en cuenta también que la <xref:System.Windows.Controls.ControlTemplate.TargetType%2A> propiedad es necesaria en un <xref:System.Windows.Controls.ControlTemplate> si la definición de plantilla contiene un <xref:System.Windows.Controls.ContentPresenter>.  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a>Uso de atributos XAML  
  
```  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *TypeName*  
 El nombre de la clase de tipo. Para hacer referencia a la <xref:System.Type> nombre de la clase, use la [extensiones de marcado y WPF XAML](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
   
  
## Examples  
 El ejemplo siguiente muestra el uso de esta propiedad:  
  
 [!code-xaml[ControlTemplateExamples#Label](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/label.xaml#label)]  
  
 El ejemplo anterior utiliza el siguiente recurso:  
  
  
  
 Para ver un ejemplo completo, consulte [Aplicación de estilos con el ejemplo ControlTemplates](http://go.microsoft.com/fwlink/?LinkID=160041).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> no debe ser <see langword="null" /> si la definición de la plantilla tiene <see cref="T:System.Windows.Controls.ContentPresenter" />.</exception>
        <exception cref="T:System.ArgumentException">Los tipos especificados no son válidos. <see cref="P:System.Windows.Controls.ControlTemplate.TargetType" /> de <see cref="T:System.Windows.Controls.ControlTemplate" /> debe ser o heredar de <see cref="T:System.Windows.Controls.Control" />, <see cref="T:System.Windows.Controls.Page" /> o <see cref="T:System.Windows.Navigation.PageFunctionBase" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Controls.ControlTemplate.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("VisualTree")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Windows.Markup.DependsOn("Template")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de objetos <see cref="T:System.Windows.TriggerBase" /> que aplican cambios de propiedad o realizan acciones basándose en condiciones especificadas.</summary>
        <value>Una colección de objetos <see cref="T:System.Windows.TriggerBase" />. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a>Uso de elementos de propiedad XAML  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a>Valores XAML  
 *oneOrMoreTriggers*  
 Uno o varios <xref:System.Windows.TriggerBase> objetos (normalmente son un <xref:System.Windows.Trigger>).  
  
   
  
## Examples  
 El ejemplo siguiente muestra el uso de esta propiedad:  
  
 [!code-xaml[ControlTemplateExamples#ToolTip](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlTemplateExamples/CS/resources/tooltip.xaml#tooltip)]  
  
 El ejemplo anterior utiliza los siguientes recursos:  
  
  
  
  
 Para ver un ejemplo completo, consulte [Aplicación de estilos con el ejemplo ControlTemplates](http://go.microsoft.com/fwlink/?LinkID=160041).  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="http://go.microsoft.com/fwlink/?LinkID=160010">Introducción a los estilos y plantillas de ejemplo</related>
      </Docs>
    </Member>
    <Member MemberName="ValidateTemplatedParent">
      <MemberSignature Language="C#" Value="protected override void ValidateTemplatedParent (System.Windows.FrameworkElement templatedParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ValidateTemplatedParent(class System.Windows.FrameworkElement templatedParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ControlTemplate.ValidateTemplatedParent(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ValidateTemplatedParent (templatedParent As FrameworkElement)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ValidateTemplatedParent(System::Windows::FrameworkElement ^ templatedParent);" />
      <MemberSignature Language="F#" Value="override this.ValidateTemplatedParent : System.Windows.FrameworkElement -&gt; unit" Usage="controlTemplate.ValidateTemplatedParent templatedParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templatedParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="templatedParent">Elemento al que se aplica esta plantilla.</param>
        <summary>Comprueba el elemento primario con plantilla mediante un conjunto de reglas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método usa las siguientes reglas:  
  
 1. El `templatedParent` no puede ser de tipo <xref:System.Windows.FrameworkContentElement>.  
  
 2. El `templatedParent` no puede ser de tipo <xref:System.Windows.FrameworkElement> que no es un <xref:System.Windows.Controls.Control>.  
  
 3. El `templatedParent` no puede ser un <xref:System.Windows.Controls.Control> que no está asociado con el <xref:System.Windows.Controls.ControlTemplate>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="templatedParent" /> no debe ser <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Debe asociar <see cref="T:System.Windows.Controls.ControlTemplate" /> con <see cref="T:System.Windows.Controls.Control" /> estableciendo la propiedad <see cref="P:System.Windows.Controls.Control.Template" /> antes de utilizar <see cref="T:System.Windows.Controls.ControlTemplate" /> en <see cref="T:System.Windows.Controls.Control" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>