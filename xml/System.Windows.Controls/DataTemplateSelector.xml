<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7cf6ef824251b65f85296296a1a43a3ae2db5d26" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30618909" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona una manera de elegir un elemento <see cref="T:System.Windows.DataTemplate" /> según el objeto de datos y el elemento enlazado a datos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, se crea un <xref:System.Windows.Controls.DataTemplateSelector> cuando haya más de un <xref:System.Windows.DataTemplate> para el mismo tipo de objetos y desea proporcionar su propia lógica para elegir un <xref:System.Windows.DataTemplate> aplicar basándose en las propiedades de cada objeto de datos. Tenga en cuenta que si tiene objetos de diferentes tipos que se puede establecer la <xref:System.Windows.DataTemplate.DataType%2A> propiedad en el <xref:System.Windows.DataTemplate>. Si lo hace, no es necesario para crear un <xref:System.Windows.Controls.DataTemplateSelector>. Además, si tiene objetos del mismo tipo pero con propiedades diferentes, también puede plantearse el uso de un <xref:System.Windows.DataTrigger> o un convertidor de datos. Para obtener más información, consulte [Información general sobre plantillas de datos](~/docs/framework/wpf/data/data-templating-overview.md).  
  
 Para crear un selector de plantillas, cree una clase que hereda de <xref:System.Windows.Controls.DataTemplateSelector> e invalide el <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método. Una vez que se define la clase puede asignar una instancia de la clase a la propiedad de selector de plantilla de su elemento.  
  
   
  
## Examples  
 En este ejemplo, el origen de enlace es una lista de `Task` objetos. Una de las propiedades de un `Task` objeto es `Priority`. Hay dos plantillas de datos definidas, `myTaskTemplate` y `importantTaskTemplate`.  
  
 Para proporcionar la lógica para elegir qué <xref:System.Windows.DataTemplate> usar tomando como base la `Priority` valor del objeto de datos, crear una subclase de <xref:System.Windows.Controls.DataTemplateSelector> e invalide el <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método. En el ejemplo siguiente, la <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método proporciona la lógica para devolver la plantilla adecuada en función del valor de la `Priority` propiedad. La plantilla para devolver se encuentra en los recursos de la envoltura <xref:System.Windows.Window> elemento.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Podemos declarar el `TaskListDataTemplateSelector` como recurso:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Para usar el recurso de selector de plantillas, asígnelo a la <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> propiedad de la <xref:System.Windows.Controls.ListBox>. El <xref:System.Windows.Controls.ListBox> llamadas el <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método de la `TaskListDataTemplateSelector` para cada uno de los elementos de la colección subyacente. La llamada pasa el objeto de datos como parámetro del elemento. El <xref:System.Windows.DataTemplate> devuelto por el método, a continuación, se aplica a ese objeto de datos.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Para obtener el ejemplo completo, vea [Introducción a la aplicación de plantillas de ejemplo](http://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Controls.DataTemplateSelector" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">El objeto de datos para el que se debe seleccionar la plantilla.</param>
        <param name="container">Objeto enlazado a datos.</param>
        <summary>Cuando se reemplaza en una clase derivada, devuelve un objeto <see cref="T:System.Windows.DataTemplate" /> basándose en la lógica personalizada.</summary>
        <returns>Devuelve <see cref="T:System.Windows.DataTemplate" /> o <see langword="null" />. El valor predeterminado es <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, se usa un selector de plantillas cuando tiene más de una plantilla de datos definida para el mismo tipo de objetos. Por ejemplo, si el origen de enlace es la lista una lista de objetos student y se desea aplicar una plantilla determinada a los alumnos a tiempo parcial. Puede hacerlo mediante la creación de una clase que hereda de <xref:System.Windows.Controls.DataTemplateSelector> e invalidar la <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método. Una vez que se define la clase puede asignar una instancia de la clase a la propiedad de selector de plantilla de su elemento.  
  
   
  
## Examples  
 En este ejemplo, el origen de enlace es una lista de `Task` objetos. Una de las propiedades de un `Task` objeto es `Priority`. Hay dos plantillas de datos definidas, `myTaskTemplate` y `importantTaskTemplate`.  
  
 Para proporcionar la lógica para elegir qué <xref:System.Windows.DataTemplate> usar tomando como base la `Priority` valor del objeto de datos, crear una subclase de <xref:System.Windows.Controls.DataTemplateSelector> e invalide el <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método. En el ejemplo siguiente, la <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método proporciona la lógica para devolver la plantilla adecuada en función del valor de la `Priority` propiedad. La plantilla para devolver se encuentra en los recursos de la envoltura <xref:System.Windows.Window> elemento.  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 Podemos declarar el `TaskListDataTemplateSelector` como recurso:  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 Para usar el recurso de selector de plantillas, asígnelo a la <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> propiedad de la <xref:System.Windows.Controls.ListBox>. El <xref:System.Windows.Controls.ListBox> llamadas el <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> método de la `TaskListDataTemplateSelector` para cada uno de los elementos de la colección subyacente. La llamada pasa el objeto de datos como parámetro del elemento. El <xref:System.Windows.DataTemplate> devuelto por el método, a continuación, se aplica a ese objeto de datos.  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 Para obtener el ejemplo completo, vea [Introducción a la aplicación de plantillas de ejemplo](http://go.microsoft.com/fwlink/?LinkID=160009).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>