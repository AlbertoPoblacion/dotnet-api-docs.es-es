<Type Name="Button" FullName="System.Windows.Controls.Button">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e26ef8d736010eb85a2596b3b5d7c6aa7fddea97" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30621389" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Button : System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Button extends System.Windows.Controls.Primitives.ButtonBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Button" />
  <TypeSignature Language="VB.NET" Value="Public Class Button&#xA;Inherits ButtonBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class Button : System::Windows::Controls::Primitives::ButtonBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.Primitives.ButtonBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un control de botón de Windows, que reacciona al evento <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Controls.Button> clase hereda directamente de la <xref:System.Windows.Controls.Primitives.ButtonBase?displayProperty=nameWithType> clase.  
  
 **Modelo de contenido:** <xref:System.Windows.Controls.Button> es una <xref:System.Windows.Controls.ContentControl>. La propiedad content es <xref:System.Windows.Controls.ContentControl.Content%2A>.  
  
 Controlar la <xref:System.Windows.Controls.Primitives.ButtonBase.Click?displayProperty=nameWithType> evento para responder cuando el usuario hace clic en un <xref:System.Windows.Controls.Button>.  
  
 El <xref:System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonDown%2A> método marcas el <xref:System.Windows.UIElement.MouseLeftButtonDown> evento como controlado. Para responder a la <xref:System.Windows.UIElement.MouseLeftButtonDown> eventos, adjuntar un controlador de eventos para el <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> llamada o evento <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> con `handledEventsToo` establecido en `true`.  
  
## <a name="customizing-the-button-control"></a>Personalizar el Control de botón  
 Para aplicar la misma configuración de propiedad a varios <xref:System.Windows.Controls.Button> controles, utilice la <xref:System.Windows.FrameworkElement.Style%2A> propiedad. Puede modificar el valor predeterminado <xref:System.Windows.Controls.ControlTemplate> para dar al control una apariencia única. Para obtener más información acerca de cómo crear un <xref:System.Windows.Controls.ControlTemplate>, consulte [personalizar la apariencia de un Control existente mediante la creación de un elemento ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  Para ver los elementos y los Estados que son específicos de la <xref:System.Windows.Controls.Button>, consulte [plantillas y estilos de botón](~/docs/framework/wpf/controls/button-styles-and-templates.md).  
  
 Propiedades de dependencia para este control se pueden establecer el estilo predeterminado del control.  Si se establece una propiedad de un estilo predeterminado, puede cambiar la propiedad de su valor predeterminado cuando el control aparece en la aplicación. El estilo predeterminado se determina por el tema del escritorio que se utiliza cuando se ejecuta la aplicación.  Para obtener más información, consulte [temas de WPF predeterminado](http://go.microsoft.com/fwlink/?LinkID=158252).  
  
> [!NOTE]
>  Establecer una propiedad visual solo tendrá un efecto si esa propiedad está presente en ambos <xref:System.Windows.Controls.Button> control de la plantilla predeterminada y se establece mediante una. Puede encontrar una lista de propiedades visuales en la sección "Cambiar la estructura Visual de un Control" en [personalizar la apariencia de un Control existente mediante la creación de un elemento ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra tres botones que responden a los clics de tres maneras diferentes.  
  
-   Al mantener el mouse: el primer botón cambia de color cuando el usuario se desplaza con el mouse sobre el botón.  
  
-   Presionar: el segundo botón requiere que se presione el mouse mientras el puntero del mouse está sobre el botón.  
  
-   Versión: el tercero no restablece el color de fondo de los botones hasta que el mouse se presionó y se soltó en el botón.  
  
 [!code-xaml[ClickModes_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml#1)]  
  
 [!code-csharp[ClickModes_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClickModes_snip/CSharp/Pane1.xaml.cs#2)]
 [!code-vb[ClickModes_snip#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClickModes_snip/VisualBasic/Window1.xaml.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Button ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Button();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Controls.Button" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancel">
      <MemberSignature Language="C#" Value="public bool IsCancel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsCancel" />
      <MemberSignature Language="VB.NET" Value="Public Property IsCancel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCancel { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si un <see cref="T:System.Windows.Controls.Button" /> es un botón Cancelar. Un usuario puede activar el botón Cancelar si presiona la tecla Esc.</summary>
        <value>
          <see langword="true" /> si <see cref="T:System.Windows.Controls.Button" /> es un botón Cancelar; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer el <xref:System.Windows.Controls.Button.IsCancel%2A> propiedad de un botón a `true`, se crea un <xref:System.Windows.Controls.Button> que está registrado con el <xref:System.Windows.Input.AccessKeyManager>. A continuación, se activa el botón cuando el usuario presiona la tecla ESC.  
  
<a name="dependencyPropertyInfo_IsCancel"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Controls.Button.IsCancelProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar esta propiedad para crear un botón de cancelación.  
  
 [!code-xaml[ButtonProps_snip#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancelProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsCancelProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsCancelProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsCancelProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsCancelProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsCancelProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Controls.Button.IsCancel" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefault { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si un <see cref="T:System.Windows.Controls.Button" /> es el botón predeterminado. Un usuario invoca el botón predeterminado presionando la tecla ENTRAR.</summary>
        <value>
          Es <see langword="true" /> si <see cref="T:System.Windows.Controls.Button" /> es el botón predeterminado; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al establecer el <xref:System.Windows.Controls.Button.IsDefault%2A> propiedad de un botón a `true`, registra el botón con el <xref:System.Windows.Input.AccessKeyManager> para que un usuario pueda invocar el botón presionando la tecla ENTRAR.  
  
<a name="dependencyPropertyInfo_IsDefault"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Controls.Button.IsDefaultProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo especificar un botón como el botón predeterminado.  
  
 [!code-xaml[ButtonProps_snip#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaulted">
      <MemberSignature Language="C#" Value="public bool IsDefaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefaulted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Button.IsDefaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDefaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDefaulted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si <see cref="T:System.Windows.Controls.Button" /> es el botón que se activa cuando un usuario presiona ENTRAR.</summary>
        <value>
          <see langword="true" /> si se activa el botón cuando el usuario presiona ENTRAR; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Windows.Controls.Button.IsDefaulted%2A> propiedad es `true` cuando el <xref:System.Windows.Controls.Button.IsDefault%2A> propiedad está establecida en `true` y el control que tiene el foco no acepta ENTRAR como entrada.  Por ejemplo, en la **ejecutar** cuadro de diálogo, el **Aceptar** botón es el predeterminado. Cuando el foco está en el cuadro de texto <xref:System.Windows.Controls.Button.IsDefaulted%2A> en el **Aceptar** botón está `true` porque un usuario puede activar el botón, presione ENTRAR.  
  
> [!NOTE]
>  Si el botón predeterminado tiene el foco, <xref:System.Windows.Controls.Button.IsDefaulted%2A> es `false`. Esto es porque el <xref:System.Windows.Controls.Primitives.ButtonBase.OnKeyDown%2A> método controla ENTRAR y no es necesario para <xref:System.Windows.Controls.Button.IsDefaulted%2A> se establezca en `true`.  
  
<a name="dependencyPropertyInfo_IsDefaulted"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo identificador|<xref:System.Windows.Controls.Button.IsDefaultedProperty>|  
|Propiedades de metadatos establecidos en `true`|None|  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo determinar si el <xref:System.Windows.Controls.Button.IsDefaulted%2A> propiedad es `true` para un botón predeterminado.  
  
 [!code-csharp[ButtonProps_snip#3](~/samples/snippets/csharp/VS_Snippets_Wpf/ButtonProps_snip/CSharp/Page1.xaml.cs#3)]
 [!code-vb[ButtonProps_snip#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ButtonProps_snip/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsDefaultedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsDefaultedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsDefaultedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsDefaultedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsDefaultedProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Controls.Button.IsDefaulted" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsDefaultProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsDefaultProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Button.IsDefaultProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsDefaultProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsDefaultProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Controls.Button.IsDefault" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected override void OnClick ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.OnClick" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClick ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClick();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se le llama cuando se hace clic en un <see cref="T:System.Windows.Controls.Button" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Button.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea un <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> adecuado para este control, como parte de la infraestructura de [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].</summary>
        <returns>Objeto <see cref="T:System.Windows.Automation.Peers.ButtonAutomationPeer" /> para este control.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>