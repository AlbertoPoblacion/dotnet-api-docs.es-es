<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="911b5f562321df231edcf6b89e82bd8981861fad" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51893289" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona la funcionalidad de revisión ortográfica en tiempo real para los controles de edición de texto, como <see cref="T:System.Windows.Controls.TextBox" /> y <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para habilitar el corrector ortográfico, establezca el <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> propiedad `true` en un control de edición de texto. Cuando este corrector ortográfico está habilitado, las palabras incorrectas se subrayan mediante el uso de una línea roja ondulada, tal como se muestra en la siguiente ilustración. Corrector ortográfico solo se admite cuando WPF proporciona un diccionario predeterminado. En [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], WPF proporciona diccionarios para inglés, francés, alemán y español.  
  
 ![TextBox con corrección ortográfica&#45;comprobación](~/add/media/editing-textbox-with-spellchecking.png "Textbox con corrección ortográfica")  
  
 Para agregar un diccionario personalizado, agregue la ubicación del archivo de léxico que se la <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> colección.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la colección de ubicaciones de archivo de léxico que se utilizan para la revisión ortográfica personalizada.</summary>
        <value>Colección de ubicaciones de archivo de léxico.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los diccionarios personalizados usan archivos de léxico, que son archivos de texto que tienen una extensión lex. Cada línea de un archivo de léxico contiene una sola palabra que se acepta como una ortografía legítima. La primera línea del archivo puede especificar un identificador de configuración regional (LCID) que se aplica el diccionario. Si no se especifica la configuración regional, el diccionario se aplica a todos los idiomas. Para obtener más información, consulte [identificadores de configuración regional](https://go.microsoft.com/fwlink/?LinkId=165561). El ejemplo siguiente muestra las primeras líneas de un archivo de léxico para el idioma inglés.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Para especificar uno o varios diccionarios personalizados para un <xref:System.Windows.Controls.TextBox> o para cualquier clase que derive de <xref:System.Windows.Controls.Primitives.TextBoxBase>, especifique la ubicación del archivo de léxico agregando el URI para el archivo de la <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> colección.  
  
> [!NOTE]
>  Uso de <xref:System.Collections.IList.Insert%2A> para agregar un archivo a la <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> colección produce una excepción. En su lugar, use <xref:System.Collections.IList.Add%2A> y <xref:System.Collections.IList.Remove%2A> para actualizar la colección.  
  
 Los archivos de léxico se pueden incluidos en la aplicación como archivos de contenido instalados en el equipo local o como archivos de recursos compilados en una variable local al que hace referencia el ensamblado. Puede hacer referencia al archivo mediante el uso de los URI de paquete. Para obtener más información, vea [Empaquetar URI en WPF](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md).  
  
 Para habilitar el corrector ortográfico, establezca el <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> propiedad `true` en un <xref:System.Windows.Controls.TextBox> o en cualquier clase que deriva de <xref:System.Windows.Controls.Primitives.TextBoxBase>. Todos los diccionarios personalizados para que <xref:System.Windows.Controls.TextBox> se usa, además del corrector ortográfico predeterminado. Para obtener más información sobre el corrector ortográfico, consulte <xref:System.Windows.Controls.SpellCheck>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo agregar dos diccionarios personalizados para un <xref:System.Windows.Controls.RichTextBox>. El primer diccionario personalizado (customwords.lex) se agrega en XAML. El archivo está incluido en la aplicación como un archivo de contenido y copia en el directorio de salida. Para usar el <xref:System.Uri> elemento, tiene que incluir el espacio de nombres del sistema.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 El segundo diccionario personalizado (customwords2.lex) se agrega en el <xref:System.Windows.Controls.Primitives.ButtonBase.Click> controlador de eventos. El archivo se incluye como un archivo de recursos y compilado en el ensamblado de aplicación que se denomina WPFCustomDictionary.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Control de edición del texto cuya colección de archivos de léxico se recupera.</param>
        <summary>Obtiene la colección de ubicaciones del archivo de léxico que se utilizan para los correctores ortográficos personalizados en un control de edición de texto especificado.</summary>
        <returns>Colección de ubicaciones de archivo de léxico.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los diccionarios personalizados usan archivos de léxico, que son archivos de texto simples que tienen una extensión lex. Cada línea de un archivo de léxico contiene una sola palabra que se acepta como una ortografía legítima. La primera línea del archivo puede especificar un identificador de configuración regional (LCID) que se aplica el diccionario. Si no se especifica la configuración regional, el diccionario se aplica a todos los idiomas. Para obtener más información, consulte [identificadores de configuración regional](https://go.microsoft.com/fwlink/?LinkId=165561). El ejemplo siguiente muestra las primeras líneas de un archivo de léxico para el idioma inglés.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Para especificar uno o varios diccionarios personalizados para un <xref:System.Windows.Controls.TextBox> o cualquier clase que derive de <xref:System.Windows.Controls.Primitives.TextBoxBase>, especifique la ubicación del archivo de léxico agregando el URI para el archivo de la <xref:System.Collections.IList> devuelto por la <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> método.  
  
 Para habilitar el corrector ortográfico, establezca el <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> propiedad `true` en un <xref:System.Windows.Controls.TextBox> o en cualquier clase que deriva de <xref:System.Windows.Controls.Primitives.TextBoxBase>. Todos los diccionarios personalizados para que <xref:System.Windows.Controls.TextBox> se usa, además del corrector ortográfico predeterminado. Para obtener más información sobre el corrector ortográfico, consulte <xref:System.Windows.Controls.SpellCheck>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="textBoxBase" /> es <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Control de edición de texto que se va a comprobar. Algunos ejemplos de controles son <see cref="T:System.Windows.Controls.TextBox" /> y <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Devuelve un valor que indica si está habilitado el corrector ortográfico en el control de edición de texto especificado.</summary>
        <returns>Es <see langword="true" /> si está habilitado el corrector ortográfico en el control de edición de texto; de lo contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="textBoxBase" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que determina si el corrector ortográfico está habilitado en este control de edición de texto, como <see cref="T:System.Windows.Controls.TextBox" /> o <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <value><see langword="true" /> si está habilitado el corrector ortográfico en el control; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad de dependencia también tiene un uso de la propiedad adjunta de solo escritura especializado. El [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis para establecer la propiedad es `<` *textBoxBaseClass* **SpellCheck.IsEnabled**`="`*valorBOOL* `" .../>`, donde *textBoxBaseClass* es un elemento de objeto para una clase que deriva de <xref:System.Windows.Controls.Primitives.TextBoxBase>, y *valorBOOL* sea `true` o `false` (mayúsculas y minúsculas mayúsculas de minúsculas). Para establecer la propiedad como una propiedad adjunta en el código, vea el <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> método. No hay ninguna coincidencia `GetIsEnabled` descriptor de acceso. Para obtener el valor, obtenga actual <xref:System.Windows.Controls.SpellCheck> objeto desde el <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> propiedad y, a continuación, obtener el valor de la <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> propiedad desde que <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|Establecen las propiedades de metadatos en `true`|None|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Control de edición de texto en el que se va a habilitar o deshabilitar el corrector ortográfico. Algunos ejemplos de controles son <see cref="T:System.Windows.Controls.TextBox" /> y <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Valor booleano que especifica si el corrector ortográfico está habilitado en el control de edición de texto.</param>
        <summary>Habilita o deshabilita el corrector ortográfico en el control de edición de texto especificado, como <see cref="T:System.Windows.Controls.TextBox" /> o <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método permite un uso de la propiedad adjunta para la <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> propiedad [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. El ejemplo siguiente se muestra el [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] uso.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Control de edición de texto al que se aplica el corrector ortográfico. Algunos ejemplos de controles son <see cref="T:System.Windows.Controls.TextBox" /> y <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">El valor <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> que determina las reglas de reforma de la ortografía.</param>
        <summary>Determina las reglas de reforma de la ortografía que usa el corrector ortográfico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las reglas de reforma de ortografía que se tiene acceso a este método hacen referencia a las reformas de francés y alemán ortografía de la década de 1990. Este método no tiene ningún efecto cuando se usa con otros idiomas.  
  
 Este método permite un uso de la propiedad adjunta para la <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> propiedad [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece las reglas de reforma de la ortografía que usa el corrector ortográfico.</summary>
        <value>Reglas de reforma de la ortografía que usa el corrector ortográfico. El valor predeterminado es <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" /> para francés y <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> para alemán.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las reglas de reforma de ortografía que dependen de esta propiedad hacen referencia a las reformas de ortografía de francés y alemán. Esta propiedad no tiene ningún efecto cuando se usa con otros idiomas.  
  
 Esta propiedad de dependencia también tiene un uso de la propiedad adjunta de solo escritura especializado. El [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] sintaxis para establecer la propiedad es `<` *textBoxBaseClass* **SpellCheck.SpellingReform**`="`*enumValue* `" .../>`, donde *textBoxBaseClass* es un elemento de objeto para una clase que deriva de <xref:System.Windows.Controls.Primitives.TextBoxBase>, y *enumValue* es un nombre de cadena para un valor de la <xref:System.Windows.Controls.SpellingReform> enumeración. Para establecer la propiedad como una propiedad adjunta en el código, vea el <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> método. No hay ninguna coincidencia `GetSpellingReform` descriptor de acceso. Para obtener el valor, obtenga actual <xref:System.Windows.Controls.SpellCheck> objeto desde el <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> propiedad y, a continuación, obtener el valor de la <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> propiedad desde que <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>Información sobre propiedades de dependencia  
  
|||  
|-|-|  
|Campo de identificador|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|Establecen las propiedades de metadatos en `true`|None|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifica la propiedad de dependencia <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>