<Type Name="FlowDecision" FullName="System.Activities.Statements.FlowDecision">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c92953d27f03dc5615c7d0b3e5e62c50a2b09a3b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30358059" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FlowDecision : System.Activities.Statements.FlowNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FlowDecision extends System.Activities.Statements.FlowNode" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Statements.FlowDecision" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FlowDecision&#xA;Inherits FlowNode" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlowDecision sealed : System::Activities::Statements::FlowNode" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.Statements.FlowNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Una clase <see cref="T:System.Activities.Statements.FlowNode" /> especializada que proporciona la capacidad de modelar un nodo condicional con dos resultados.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Statements.FlowDecision> se usa una condición y define acciones que deben realizarse si la condición es `true` o `false`.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra la creación de un nodo de la clase <xref:System.Activities.Statements.FlowDecision>. Este ejemplo es de la [control de errores en un TryCatch de diagrama de flujo de actividad utilizando](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) ejemplo.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#3](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Activities.Statements.FlowDecision" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo de código se muestra la creación de un nodo de la clase <xref:System.Activities.Statements.FlowDecision>. Este ejemplo es de la [control de errores en un TryCatch de diagrama de flujo de actividad utilizando](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) ejemplo.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#3](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlowDecision ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.FlowDecision.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlowDecision();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Activities.Statements.FlowDecision" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo de código se muestra la creación de un nodo de la clase <xref:System.Activities.Statements.FlowDecision>. Este ejemplo es de la [control de errores en un TryCatch de diagrama de flujo de actividad utilizando](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) ejemplo.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#3](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlowDecision (System.Activities.Activity&lt;bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity`1&lt;bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.FlowDecision.#ctor(System.Activities.Activity{System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (condition As Activity(Of Boolean))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlowDecision(System::Activities::Activity&lt;bool&gt; ^ condition);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="condition" Type="System.Activities.Activity&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">La condición que comprueba la clase <see cref="T:System.Activities.Statements.FlowDecision" />.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Activities.Statements.FlowDecision" /> con la condición especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo de código se muestra la creación de un nodo de la clase <xref:System.Activities.Statements.FlowDecision>. Este ejemplo es de la [control de errores en un TryCatch de diagrama de flujo de actividad utilizando](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) ejemplo.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#3](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlowDecision (System.Linq.Expressions.Expression&lt;Func&lt;System.Activities.ActivityContext,bool&gt;&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;class System.Activities.ActivityContext, bool&gt;&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Statements.FlowDecision.#ctor(System.Linq.Expressions.Expression{System.Func{System.Activities.ActivityContext,System.Boolean}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (condition As Expression(Of Func(Of ActivityContext, Boolean)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlowDecision(System::Linq::Expressions::Expression&lt;Func&lt;System::Activities::ActivityContext ^, bool&gt; ^&gt; ^ condition);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="condition" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;System.Activities.ActivityContext,System.Boolean&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">La condición que comprueba la clase <see cref="T:System.Activities.Statements.FlowDecision" />.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.Activities.Statements.FlowDecision" /> con la condición especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo de código se muestra la creación de un nodo de la clase <xref:System.Activities.Statements.FlowDecision>. Este ejemplo es de la [control de errores en un TryCatch de diagrama de flujo de actividad utilizando](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) ejemplo.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#3](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public System.Activities.Activity&lt;bool&gt; Condition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Activity`1&lt;bool&gt; Condition" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Statements.FlowDecision.Condition" />
      <MemberSignature Language="VB.NET" Value="Public Property Condition As Activity(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Activity&lt;bool&gt; ^ Condition { System::Activities::Activity&lt;bool&gt; ^ get(); void set(System::Activities::Activity&lt;bool&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.Activity&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Especifica la condición que está probando la clase <see cref="T:System.Activities.Statements.FlowDecision" />.</summary>
        <value>Expresión de valor que representa la condición.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la condición se evalúa como `true`, <xref:System.Activities.Statements.FlowNode> en el <xref:System.Activities.Statements.FlowDecision.True%2A> se ejecuta la propiedad. De lo contrario, se ejecuta la clase <xref:System.Activities.Statements.FlowNode> de la propiedad <xref:System.Activities.Statements.FlowDecision.False%2A>.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra el uso de la propiedad Condition de un nodo de la clase <xref:System.Activities.Statements.FlowDecision>. Este ejemplo es de la [control de errores en un TryCatch de diagrama de flujo de actividad utilizando](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) ejemplo.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#3](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Statements.FlowDecision.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("Decision")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>El nombre de esta decisión de flujo que mostrar en el diseñador de actividad.</summary>
        <value>Nombre de la decisión de flujo.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="False">
      <MemberSignature Language="C#" Value="public System.Activities.Statements.FlowNode False { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Statements.FlowNode False" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Statements.FlowDecision.False" />
      <MemberSignature Language="VB.NET" Value="Public Property False As FlowNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Statements::FlowNode ^ False { System::Activities::Statements::FlowNode ^ get(); void set(System::Activities::Statements::FlowNode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("True")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.Statements.FlowNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la clase <see cref="T:System.Activities.Statements.FlowNode" /> que se ejecuta cuando la condición se evalúa como <see langword="false" />.</summary>
        <value>Actividad que se ejecuta cuando la condición evalúa según <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo de código se muestra cómo establecer la propiedad False de un nodo de la clase <xref:System.Activities.Statements.FlowDecision>. Este ejemplo es de la [control de errores en un TryCatch de diagrama de flujo de actividad utilizando](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) ejemplo.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#3](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="True">
      <MemberSignature Language="C#" Value="public System.Activities.Statements.FlowNode True { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Statements.FlowNode True" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Statements.FlowDecision.True" />
      <MemberSignature Language="VB.NET" Value="Public Property True As FlowNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Statements::FlowNode ^ True { System::Activities::Statements::FlowNode ^ get(); void set(System::Activities::Statements::FlowNode ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Markup.DependsOn("Condition")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Activities.Statements.FlowNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la clase <see cref="T:System.Activities.Statements.FlowNode" /> que se ejecuta cuando la condición se evalúa como <see langword="true" />.</summary>
        <value>Actividad que se va a ejecutar cuando la condición evalúa según <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el siguiente ejemplo de código se muestra cómo establecer la propiedad True de un nodo de la clase <xref:System.Activities.Statements.FlowDecision>. Este ejemplo es de la [control de errores en un TryCatch de diagrama de flujo de actividad utilizando](~/docs/framework/windows-workflow-foundation/samples/fault-handling-in-a-flowchart-activity-using-trycatch.md) ejemplo.  
  
 [!code-csharp[wfs_FlowChartWithFaultHandling#3](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_flowchartwithfaulthandling/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>