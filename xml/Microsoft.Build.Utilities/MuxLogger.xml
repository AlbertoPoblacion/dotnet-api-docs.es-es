<Type Name="MuxLogger" FullName="Microsoft.Build.Utilities.MuxLogger">
  <TypeSignature Language="C#" Value="public class MuxLogger : Microsoft.Build.Framework.INodeLogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MuxLogger extends System.Object implements class Microsoft.Build.Framework.ILogger, class Microsoft.Build.Framework.INodeLogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Utilities.MuxLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class MuxLogger&#xA;Implements INodeLogger" />
  <TypeSignature Language="C++ CLI" Value="public ref class MuxLogger : Microsoft::Build::Framework::INodeLogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.INodeLogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2bc0b-101">Representa un registrador de multiplexación.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-101">Represents a multiplexing logger.</span></span> <span data-ttu-id="2bc0b-102">El propósito de este registrador es registrar y anular el registro de varios registradores durante la compilación.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-102">The purpose of this logger is to register and unregister multiple loggers during the build.</span></span> <span data-ttu-id="2bc0b-103">Admite el escenario del IDE de Visual Studio donde los registradores se registran y se anula su registro para la solicitud de compilación de cada sistema del proyecto.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-103">Supports the Visual Studio IDE scenario in which loggers are registered and unregistered for each project system’s build request.</span></span> <span data-ttu-id="2bc0b-104">Una compilación física puede tener varias compilaciones lógicas, cada una con su propio conjunto de registradores.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-104">One physical build can have multiple logical builds, each with its own set of loggers.</span></span>  
  
 <span data-ttu-id="2bc0b-105"><see langword="MuxLogger" /> se registra a sí mismo con el administrador de compilación como un registrador central normal de estilo /l.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-105">The <see langword="MuxLogger" /> registers itself with the build manager as a regular central /l style logger.</span></span> <span data-ttu-id="2bc0b-106">Recibe mensajes del administrador de compilación y los enruta al registrador correcto, basándose en la compilación lógica de la que procede el mensaje.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-106">It receives messages from the build manager and routes them to the correct logger, based on the logical build that the message came from.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bc0b-107">El `MuxLogger` generalmente funciona como se indica a continuación:</span><span class="sxs-lookup"><span data-stu-id="2bc0b-107">The `MuxLogger` generally functions as follows:</span></span>  
  
-   <span data-ttu-id="2bc0b-108">El `MuxLogger` está registrado en el principio de compilación de inicio del Administrador de compilación.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-108">The `MuxLogger` is registered at the beginning of the build manager’s Begin build.</span></span>  
  
     <span data-ttu-id="2bc0b-109">Los registradores registrados antes de la compilación iniciará el Administrador de compilación obtengan el evento de compilación iniciada al mismo tiempo que la `MuxLogger`.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-109">Any loggers registered before the build manager starts the build get the build-started event at the same time as the `MuxLogger`.</span></span>  
  
     <span data-ttu-id="2bc0b-110">Los registradores registrados después de la compilación iniciará el Administrador de compilación obtienen un evento de compilación iniciada sintetizado.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-110">Any loggers registered after the build manager starts the build get a synthesized build-started event.</span></span> <span data-ttu-id="2bc0b-111">El evento no puede almacenarse en memoria caché porque la marca de tiempo del evento de compilación iniciada se determina cuando se crea el evento y almacenamiento en caché el evento proporcionaría los tiempos de compilación incorrecta de los registradores registrados en el `MuxLogger`.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-111">The event cannot be cached because the timestamp of the build-started event is determined when the event is created, and caching the event would give incorrect build times in the loggers registered to the `MuxLogger`.</span></span>  
  
-   <span data-ttu-id="2bc0b-112">El `MuxLogger` se inicializa con el Administrador de compilación</span><span class="sxs-lookup"><span data-stu-id="2bc0b-112">The `MuxLogger` is initialized by the build manager</span></span>  
  
     <span data-ttu-id="2bc0b-113">El `MuxLogger` escucha a todos los eventos en el origen de eventos desde el Administrador de compilación y enruta correctamente los eventos a los registradores registrados.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-113">The `MuxLogger` listens to all events on the event source from the build manager and routes events correctly to the registered loggers.</span></span>  
  
-   <span data-ttu-id="2bc0b-114">El `MuxLogger` está apagado cuando finaliza la compilación en la compilación de finalización.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-114">The `MuxLogger` is shutdown when the build is finished in end build.</span></span> <span data-ttu-id="2bc0b-115">En este momento, anula el registro de los registradores asociados a él.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-115">At this time, it unregisters any loggers attached to it.</span></span>  
  
-   <span data-ttu-id="2bc0b-116">El `MuxLogger` registra el evento terminado de compilación cuando se ve el evento proyecto finalizado para el primer evento iniciada por el proyecto para cada uno de ellos.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-116">The `MuxLogger` logs the build-finished event when the project-finished event for the first project-started event is seen for each logger.</span></span>  
  
 <span data-ttu-id="2bc0b-117">El `MuxLogger` registra registradores de la manera siguiente:</span><span class="sxs-lookup"><span data-stu-id="2bc0b-117">The `MuxLogger` registers loggers in the following way:</span></span>  
  
1.  <span data-ttu-id="2bc0b-118">El registrador se pasa a la `MuxLogger.RegisterLogger` método con un identificador de envío que se usa para enrutar un mensaje a dicho registrador.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-118">The logger is passed to the `MuxLogger.RegisterLogger` method with a submission ID that is used to route a message to that logger.</span></span>  
  
2.  <span data-ttu-id="2bc0b-119">El `MuxLogger` registra el registrador para el `MuxLogger` origen del evento.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-119">The `MuxLogger` registers the logger to the `MuxLogger` event source.</span></span>  
  
3.  <span data-ttu-id="2bc0b-120">Si ya se haya registrado el evento de compilación iniciada, la `MuxLogger` crea un nuevo evento de compilación iniciada y lo envía al origen de eventos del registrador.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-120">If the build-started event has already been logged, the `MuxLogger` creates a new build-started event and sends it to the logger’s event source.</span></span>  
  
 <span data-ttu-id="2bc0b-121">El `MuxLogger` anula el registro de los registradores de la manera siguiente:</span><span class="sxs-lookup"><span data-stu-id="2bc0b-121">The `MuxLogger` unregisters loggers in the following way:</span></span>  
  
1.  <span data-ttu-id="2bc0b-122">Cuando se completa el envío de una compilación, la `MuxLogger.UnregisterLogger` método se llama con el identificador de envío para el registrador.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-122">When a build submission is completed, the `MuxLogger.UnregisterLogger` method is called with the submission ID for the logger.</span></span>  
  
2.  <span data-ttu-id="2bc0b-123">El `MuxLogger` busca el estado correcto del evento proyecto finalizado para el identificador de envío y registra un evento terminado de compilación en el registrador.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-123">The `MuxLogger` looks up the success state of the project-finished event for the submission ID and logs a build-finished event to the logger.</span></span>  
  
3.  <span data-ttu-id="2bc0b-124">El `MuxLogger` limpia el origen del evento.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-124">The `MuxLogger` cleans up the event source.</span></span>  
  
     <span data-ttu-id="2bc0b-125">Tenga en cuenta que la anulación del registro procede de un subproceso distinto del subproceso de registro y un problema de sincronización puede producirse si se llama a anular el registro mientras se están registrando los eventos.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-125">Note that the unregister comes from a thread other than the logging thread and a synchronization issue could occur if unregister is called while events are being logged.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MuxLogger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MuxLogger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bc0b-126">Crea una nueva instancia del registrador de multiplexación.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-126">Creates a new instance of the multiplexing logger.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Initialize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2bc0b-127">Inicializa la instancia <see langword="MuxLogger" />.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-127">Initializes the <see langword="MuxLogger" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (Microsoft.Build.Framework.IEventSource eventSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.Build.Framework.IEventSource eventSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Initialize(Microsoft.Build.Framework.IEventSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (eventSource As IEventSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(Microsoft::Build::Framework::IEventSource ^ eventSource);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.ILogger.Initialize(Microsoft.Build.Framework.IEventSource)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="Microsoft.Build.Framework.IEventSource" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="2bc0b-128">Origen del evento.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-128">The event source.</span></span></param>
        <summary><span data-ttu-id="2bc0b-129">Inicializa la instancia de <see langword="MuxLogger" /> con el origen de eventos especificado.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-129">Initialize the <see langword="MuxLogger" /> instance with the specified event source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public void Initialize (Microsoft.Build.Framework.IEventSource eventSource, int maxNodeCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Initialize(class Microsoft.Build.Framework.IEventSource eventSource, int32 maxNodeCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Initialize (eventSource As IEventSource, maxNodeCount As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Initialize(Microsoft::Build::Framework::IEventSource ^ eventSource, int maxNodeCount);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.INodeLogger.Initialize(Microsoft.Build.Framework.IEventSource,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSource" Type="Microsoft.Build.Framework.IEventSource" />
        <Parameter Name="maxNodeCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="eventSource"><span data-ttu-id="2bc0b-130">Origen del evento.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-130">The event source.</span></span></param>
        <param name="maxNodeCount"><span data-ttu-id="2bc0b-131">Número máximo de nodos.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-131">The maximum number of nodes.</span></span></param>
        <summary><span data-ttu-id="2bc0b-132">Inicializa la instancia de <see langword="MuxLogger" /> con el origen de eventos especificado y el número máximo de nodos especificado.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-132">Initialize the <see langword="MuxLogger" /> instance with the specified event source and specified maximum number of nodes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public string Parameters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public Property Parameters As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Parameters { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Build.Framework.ILogger.Parameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bc0b-133">Obtiene y establece el atributo Parameters requerido por la interfaz <see langword="ILogger" />.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-133">Gets and sets the Parameters attribute, required by the <see langword="ILogger" /> interface.</span></span></summary>
        <value><span data-ttu-id="2bc0b-134">Devuelve el atributo Parameters.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-134">Returns the Parameters attribute.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterLogger">
      <MemberSignature Language="C#" Value="public void RegisterLogger (int submissionId, Microsoft.Build.Framework.ILogger logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterLogger(int32 submissionId, class Microsoft.Build.Framework.ILogger logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.RegisterLogger(System.Int32,Microsoft.Build.Framework.ILogger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterLogger (submissionId As Integer, logger As ILogger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterLogger(int submissionId, Microsoft::Build::Framework::ILogger ^ logger);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="submissionId" Type="System.Int32" />
        <Parameter Name="logger" Type="Microsoft.Build.Framework.ILogger" />
      </Parameters>
      <Docs>
        <param name="submissionId"><span data-ttu-id="2bc0b-135">El identificador de envío del registrador que se está registrando.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-135">The submission ID of the logger being registered.</span></span></param>
        <param name="logger"><span data-ttu-id="2bc0b-136">Registrador que se van a registrar.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-136">The logger to register.</span></span></param>
        <summary><span data-ttu-id="2bc0b-137">Registra un registrador en <see langword="MuxLogger" /> y genera un evento de compilación iniciada si este ya se ha registrado.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-137">Registers a logger on the <see langword="MuxLogger" /> and raises a build-started event if the build-started event has already been logged.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public void Shutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Shutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Shutdown();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Build.Framework.ILogger.Shutdown</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bc0b-138">Cierra <see langword="MuxLogger" /> y borra cualquier estado.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-138">Shuts down the <see langword="MuxLogger" /> and clears out any state.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterLoggers">
      <MemberSignature Language="C#" Value="public bool UnregisterLoggers (int submissionId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UnregisterLoggers(int32 submissionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Utilities.MuxLogger.UnregisterLoggers(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function UnregisterLoggers (submissionId As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool UnregisterLoggers(int submissionId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="submissionId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="submissionId"><span data-ttu-id="2bc0b-139">El identificador de envío del registrador que se quitará.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-139">The submission ID of the logger to be removed.</span></span></param>
        <summary><span data-ttu-id="2bc0b-140">Quita el registrador especificado de MuxLogger.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-140">Removes the specified logger from the MuxLogger.</span></span></summary>
        <returns><span data-ttu-id="2bc0b-141">Devuelve <see langword="true" /> si el método quita correctamente el registrador; de lo contrario, devuelve <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-141">Returns <see langword="true" /> if the method is successful in removing the logger, otherwise, returns <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Verbosity">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.LoggerVerbosity Verbosity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Build.Framework.LoggerVerbosity Verbosity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Build.Utilities.MuxLogger.Verbosity" />
      <MemberSignature Language="VB.NET" Value="Public Property Verbosity As LoggerVerbosity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Build::Framework::LoggerVerbosity Verbosity { Microsoft::Build::Framework::LoggerVerbosity get(); void set(Microsoft::Build::Framework::LoggerVerbosity value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.Build.Framework.ILogger.Verbosity</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Utilities.v4.0</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.LoggerVerbosity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bc0b-142">Obtiene y establece el atributo Verbosity requerido por la interfaz <see langword="ILogger" />.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-142">Gets and sets the Verbosity attribute, required by the <see langword="ILogger" /> interface.</span></span></summary>
        <value><span data-ttu-id="2bc0b-143">Devuelve el atributo Verbosity.</span><span class="sxs-lookup"><span data-stu-id="2bc0b-143">Returns the Verbosity attribute.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>