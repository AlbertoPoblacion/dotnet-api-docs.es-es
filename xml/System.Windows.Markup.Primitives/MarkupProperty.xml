<Type Name="MarkupProperty" FullName="System.Windows.Markup.Primitives.MarkupProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cec9e4b44f9d6119d8e215019c75697d3421462b" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37560306" /></Metadata><TypeSignature Language="C#" Value="public abstract class MarkupProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.Primitives.MarkupProperty" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupProperty abstract" />
  <TypeSignature Language="F#" Value="type MarkupProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Clase abstracta que proporciona una descripci칩n de propiedad que se utiliza para escribir en el marcado que encapsula el acceso a las propiedades y sus valores.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una propiedad se representa como una cadena o una lista de elementos.  
  
 Si la propiedad se puede representar como una cadena, <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> es `false`.  
  
 Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> es `true`, la propiedad es una lista de elementos.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public abstract System.ComponentModel.AttributeCollection Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.AttributeCollection Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Attributes As AttributeCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::ComponentModel::AttributeCollection ^ Attributes { System::ComponentModel::AttributeCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.ComponentModel.AttributeCollection" Usage="System.Windows.Markup.Primitives.MarkupProperty.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AttributeCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, obtiene los atributos asociados a esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
        <value>Colecci칩n de atributos.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DependencyProperty">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DependencyProperty DependencyProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyProperty DependencyProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DependencyProperty As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::DependencyProperty ^ DependencyProperty { System::Windows::DependencyProperty ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, obtiene el identificador de <see cref="T:System.Windows.DependencyProperty" /> para la propiedad de marcado si la propiedad se implementa como propiedad de dependencia.</summary>
        <value>Identificador de la propiedad de dependencia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Devuelve el comportamiento predeterminado `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAttached">
      <MemberSignature Language="C#" Value="public virtual bool IsAttached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttached" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsAttached As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAttached { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAttached : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsAttached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> es una <see cref="T:System.Windows.DependencyProperty" /> adjunta.</summary>
        <value><see langword="true" /> si la propiedad es una <see cref="T:System.Windows.DependencyProperty" /> adjunta; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento predeterminado es devolver `false`.  
  
 Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsAttached%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> no `null` y <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> puede ser `null`, pero no es necesario.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsComposite">
      <MemberSignature Language="C#" Value="public virtual bool IsComposite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsComposite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsComposite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsComposite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsComposite : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsComposite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> es una propiedad compuesta.</summary>
        <value><see langword="true" /> si esta propiedad es una propiedad compuesta; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento predeterminado es devolver `false`.  
  
 Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> es `false`, la propiedad se puede representar como una cadena y <xref:System.Windows.Markup.Primitives.MarkupProperty.Value%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.StringValue%2A> son v치lidas para usar.  
  
 Si <xref:System.Windows.Markup.Primitives.MarkupProperty.IsComposite%2A> es `true`, la propiedad es uno o varios elementos y <xref:System.Windows.Markup.Primitives.MarkupProperty.Items%2A> es v치lido utilizar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructorArgument">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructorArgument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructorArgument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructorArgument As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructorArgument { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructorArgument : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa un argumento de constructor.</summary>
        <value>Es <see langword="true" /> si esta propiedad representa un argumento de constructor; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento predeterminado es devuelto `false`.  
  
 Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> son ambos `null`.  
  
 Solo se usa XAML <xref:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument%2A> para representar los argumentos de constructor de instancias de <xref:System.Windows.Markup.MarkupExtension>. Consulte [extensiones de marcado y XAML de WPF](~/docs/framework/wpf/advanced/markup-extensions-and-wpf-xaml.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContent">
      <MemberSignature Language="C#" Value="public virtual bool IsContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContent : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa el contenido directo de una colecci칩n.</summary>
        <value><see langword="true" /> si la propiedad representa el contenido directo; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento predeterminado es devolver `false`.  
  
 Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsContent%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> son ambos `null`.  
  
 Los diccionarios se incluyen al determinar si esto <xref:System.Windows.Markup.Primitives.MarkupProperty> representa el contenido directo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKey">
      <MemberSignature Language="C#" Value="public virtual bool IsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsKey As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsKey { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsKey : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa la clave utilizada por <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> para almacenar el elemento en un diccionario.</summary>
        <value><see langword="true" /> si esta propiedad representa una clave; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento predeterminado es devolver `false`.  
  
 Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsKey%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> son `null`.  
  
 XAML usar치 la propiedad identificada como una `x:Key` atributo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueAsString">
      <MemberSignature Language="C#" Value="public virtual bool IsValueAsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueAsString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsValueAsString As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsValueAsString { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueAsString : bool" Usage="System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, determina si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa el texto que se pasa a un convertidor de tipos para crear una instancia de la propiedad o si se debe utilizar un constructor.</summary>
        <value><see langword="true" />, si esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> representa una cadena; de lo contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El comportamiento predeterminado es devolver `false.`  
  
 Cuando <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> es `true`, <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> son ambos `null`.  
  
 Si la propiedad se proporciona a trav칠s de <xref:System.Windows.Markup.Primitives.MarkupObject.Properties%2A> y <xref:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString%2A> es `true`, ser치 la 칰nica propiedad que proporcionar치 el tipo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt; Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Windows.Markup.Primitives.MarkupObject&gt; Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Items As IEnumerable(Of MarkupObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ Items { System::Collections::Generic::IEnumerable&lt;System::Windows::Markup::Primitives::MarkupObject ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : seq&lt;System.Windows.Markup.Primitives.MarkupObject&gt;" Usage="System.Windows.Markup.Primitives.MarkupProperty.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Windows.Markup.Primitives.MarkupObject&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, obtiene el elemento que constituye el valor de esta propiedad.</summary>
        <value>Los elementos que forman el valor de esta propiedad.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la propiedad no es una enumeraci칩n, se devolver치 un 칰nico elemento.  
  
 Si la propiedad es una enumeraci칩n o enumerable, se devolver치n todos los elementos.  
  
 Siempre se devuelve al menos un elemento, ya que <xref:System.Windows.Markup.Primitives.MarkupObject> no crear치 un <xref:System.Windows.Markup.Primitives.MarkupProperty> para las propiedades sin elementos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.Markup.Primitives.MarkupProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, obtiene un nombre que se utiliza para diagn칩sticos e informes de errores.</summary>
        <value>Nombre de la propiedad del identificador.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este valor no debe utilizar un serializador. Debe usar el <xref:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor%2A> o <xref:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty%2A> en su lugar.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDescriptor">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.PropertyDescriptor PropertyDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.PropertyDescriptor PropertyDescriptor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property PropertyDescriptor As PropertyDescriptor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::PropertyDescriptor ^ PropertyDescriptor { System::ComponentModel::PropertyDescriptor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyDescriptor : System.ComponentModel.PropertyDescriptor" Usage="System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, obtiene <see cref="T:System.ComponentModel.PropertyDescriptor" /> para la propiedad de marcado.</summary>
        <value>El descriptor de la propiedad.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Devuelve el comportamiento predeterminado `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public abstract Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.Markup.Primitives.MarkupProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, obtiene el tipo CLR de la propiedad.</summary>
        <value>Tipo CLR.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringValue">
      <MemberSignature Language="C#" Value="public abstract string StringValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StringValue As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StringValue { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StringValue : string" Usage="System.Windows.Markup.Primitives.MarkupProperty.StringValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se invalida en una clase derivada, obtiene el valor de cadena de esta <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
        <value>Valor de cadena.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property TypeReferences As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences { System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeReferences : seq&lt;Type&gt;" Usage="System.Windows.Markup.Primitives.MarkupProperty.TypeReferences" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, obtiene el conjunto de tipos a los que esta propiedad <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> har치 referencia cuando serialice su valor como una cadena.</summary>
        <value>Conjunto de tipos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences%2A> permite a un serializador para asegurarse de que el deserializador tiene suficiente informaci칩n para convertir las referencias a estos tipos de las representaciones de cadena.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Windows.Markup.Primitives.MarkupProperty.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se reemplaza en una clase derivada, obtiene el valor actual de <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />.</summary>
        <value>El valor actual.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>