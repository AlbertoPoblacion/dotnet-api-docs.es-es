<Type Name="PersistenceParticipant" FullName="System.Activities.Persistence.PersistenceParticipant">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aa2e99298a9810e8d7420e251d5691da39b8654a" />
    <Meta Name="ms.sourcegitcommit" Value="44933aff38db926168781f50300446344189a04d" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/16/2018" />
    <Meta Name="ms.locfileid" Value="39064830" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class PersistenceParticipant" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceParticipant extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Persistence.PersistenceParticipant" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceParticipant" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceParticipant abstract" />
  <TypeSignature Language="F#" Value="type PersistenceParticipant = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Esta clase permite que <see cref="T:System.Activities.WorkflowApplication" /> y <see cref="T:System.ServiceModel.WorkflowServiceHost" /> participen en el proceso de persistencia. Un participante de persistencia se deriva de la clase <see cref="T:System.Activities.Persistence.PersistenceParticipant" /> o la clase <see cref="T:System.Activities.Persistence.PersistenceIOParticipant" /> (clase derivada de la clase <see cref="T:System.Activities.Persistence.PersistenceParticipant" />), implementa métodos abstractos y, a continuación, agrega una instancia de la clase como una extensión de instancia de flujo de trabajo. Las clases <see cref="T:System.Activities.WorkflowApplication" /> y <see cref="T:System.ServiceModel.WorkflowServiceHost" /> buscan esas extensiones al hacer persistir una instancia e invocar los métodos adecuados en los momentos oportunos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un host ejecuta los siguientes pasos (o fases) al hacer persistir una instancia:  
  
1.  Recopila los valores que se van a conservar.  
  
2.  Asigna campos de valores monolíticos estructurados a los valores individuales.  
  
3.  Envía el comando <xref:System.Activities.DurableInstancing.SaveWorkflowCommand> al proveedor de persistencia.  
  
4.  Realiza las operaciones de E/S de la transacción de persistencia.  
  
 Los hosts completan cada fase antes de comenzar la fase siguiente. Por ejemplo, al realizar la persistencia, el host recopila valores de todos los participantes de persistencia antes de pasar a la siguiente fase. En la segunda fase, el host proporciona a todos los participantes de persistencia todos los valores recopilados en la primera fase para su asignación. En la tercera fase, el host proporciona al proveedor de persistencia todos los valores recopilados en las dos fases anteriores cuando invoca el comando <xref:System.Activities.DurableInstancing.SaveWorkflowCommand>. Por último, en la cuarta fase el host proporciona todos los valores recopilados a todos los participantes de persistencia de la transacción de E/S de persistencia.  
  
 Un host ejecuta las fases siguientes cuando carga una instancia de persistencia:  
  
1.  Envía los comandos <xref:System.Activities.DurableInstancing.LoadWorkflowCommand> y <xref:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand> al proveedor de persistencia.  
  
2.  Realiza las operaciones de E/S de la transacción de persistencia.  
  
3.  Publica los valores cargados.  
  
 En el nivel más alto, las extensiones de instancia de flujo de trabajo que se derivan de la clase <xref:System.Activities.Persistence.PersistenceParticipant> pueden participar en la primera fase (Recopilación) y en la segunda fase (Asignación) del proceso de persistencia, y en la tercera fase (Publicación) del proceso de carga.  Las extensiones de instancia de flujo de trabajo que se derivan de la clase PersistenceIOParticipant pueden participar además en la cuarta fase del proceso de persistencia y en la segunda fase del proceso de carga (E/S).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una clase que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este ejemplo es de la [proceso de contratación](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) ejemplo.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceParticipant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceParticipant();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una instancia de la clase <see cref="T:System.Activities.Persistence.PersistenceParticipant" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo crear una clase que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este ejemplo es de la [proceso de contratación](~/docs/framework/windows-workflow-foundation/samples/hiring-process.md) ejemplo.  
  
 [!code-csharp[wfs_HiringRequestProcess#1](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_hiringrequestprocess/cs/hiringrequestpersistenceparticipant.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectValues">
      <MemberSignature Language="C#" Value="protected virtual void CollectValues (out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, out System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CollectValues([out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; readWriteValues, [out] class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt;&amp; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CollectValues (ByRef readWriteValues As IDictionary(Of XName, Object), ByRef writeOnlyValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CollectValues([Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % readWriteValues, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ % writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member CollectValues :  *  -&gt; unit&#xA;override this.CollectValues :  *  -&gt; unit" Usage="persistenceParticipant.CollectValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valores de lectura y escritura que se deben conservar.</param>
        <param name="writeOnlyValues">Valores de solo escritura que van a persistir.</param>
        <summary>Un host invoca este método en un participante de persistencia personalizado para recopilar los valores de lectura y escritura, y los valores de solo escritura, que se deben conservar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El host empaqueta los valores de lectura y escritura en el primer diccionario como objetos <xref:System.Runtime.DurableInstancing.InstanceValue> de una colección <xref:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData*>, y empaqueta los valores de solo escritura en el segundo diccionario como objetos <xref:System.Runtime.DurableInstancing.InstanceValue> con las marcas <xref:System.Runtime.DurableInstancing.InstanceValueOptions.Optional> y <xref:System.Runtime.DurableInstancing.InstanceValueOptions.WriteOnly> establecidas. Para obtener más información, vea <xref:System.Runtime.DurableInstancing.InstanceValueOptions>.  
  
> [!IMPORTANT]
>  Cada valor proporcionado por implementaciones de <xref:System.Activities.Persistence.PersistenceParticipant.CollectValues%2A> en todos los participantes de persistencia dentro de un episodio de persistencia debe tener un nombre XName único.  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra cómo utilizar CollectValues en una clase que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este ejemplo es de la [participantes de persistencia](~/docs/framework/windows-workflow-foundation/persistence-participants.md) ejemplo.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapValues">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; MapValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; MapValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MapValues (readWriteValues As IDictionary(Of XName, Object), writeOnlyValues As IDictionary(Of XName, Object)) As IDictionary(Of XName, Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ MapValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ writeOnlyValues);" />
      <MemberSignature Language="F#" Value="abstract member MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;&#xA;override this.MapValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt;" Usage="persistenceParticipant.MapValues (readWriteValues, writeOnlyValues)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valores de lectura y escritura que se deben conservar.</param>
        <param name="writeOnlyValues">Valores de solo escritura que van a persistir.</param>
        <summary>Un host invoca este método una vez ha terminado la colección de los valores en la primera fase. El host envía dos diccionarios de solo lectura con los valores que recopiló de todos los participantes de persistencia durante la primera fase (fase CollectValues) a este método para asignarlos. El host agrega los valores del diccionario devuelto por este método a la colección de valores de solo escritura.</summary>
        <returns>Diccionario que contiene valores de solo escritura adicionales que se deben conservar.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada uno de los valores proporcionados por implementaciones de todos los métodos <xref:System.Activities.Persistence.PersistenceParticipant.MapValues%2A> por todos los participantes de persistencia que incluyen todos los valores recopilados en la primera fase (fase CollectValues) debe tener un nombre XName único.  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra cómo utilizar MapValues en una clase que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este ejemplo es de la [proceso de compra corporativa](~/docs/framework/windows-workflow-foundation/samples/corporate-purchase-process.md) ejemplo.  
  
 [!code-csharp[wfs_PurchaseProcess#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_purchaseprocess/cs/xmlpersistenceparticipant.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishValues">
      <MemberSignature Language="C#" Value="protected virtual void PublishValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; readWriteValues);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PublishValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; readWriteValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Persistence.PersistenceParticipant.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub PublishValues (readWriteValues As IDictionary(Of XName, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void PublishValues(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Object ^&gt; ^ readWriteValues);" />
      <MemberSignature Language="F#" Value="abstract member PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit&#xA;override this.PublishValues : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, obj&gt; -&gt; unit" Usage="persistenceParticipant.PublishValues readWriteValues" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.IPersistencePipelineModule.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readWriteValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="readWriteValues">Valores de lectura y escritura que se cargaron desde el almacén de persistencia. Este diccionario corresponde al diccionario de valores de lectura y escritura que se conservaron en el episodio de persistencia más reciente.</param>
        <summary>El host invoca este método y pasa todos los valores cargados en la colección <see cref="P:System.Activities.DurableInstancing.SaveWorkflowCommand.InstanceData" /> (que rellenan los comandos <see cref="T:System.Activities.DurableInstancing.LoadWorkflowCommand" /> o <see cref="T:System.Activities.DurableInstancing.LoadWorkflowByInstanceKeyCommand" />) como un parámetro de diccionario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El siguiente ejemplo de código muestra cómo utilizar PublishValues en una clase que deriva de <xref:System.Activities.Persistence.PersistenceParticipant>. Este ejemplo es de la [participantes de persistencia](~/docs/framework/windows-workflow-foundation/persistence-participants.md) ejemplo.  
  
 [!code-csharp[wfs_PersistenceParticipants#2](~/samples/snippets/csharp/VS_Snippets_CFX/wfs_persistenceparticipants/cs/stepcountextension.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>