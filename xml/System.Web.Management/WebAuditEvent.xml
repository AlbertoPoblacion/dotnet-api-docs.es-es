<Type Name="WebAuditEvent" FullName="System.Web.Management.WebAuditEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="da1cdff0cf8e682907e1f526b889078fd69db743" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36400588" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebAuditEvent : System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebAuditEvent extends System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebAuditEvent&#xA;Inherits WebManagementEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebAuditEvent : System::Web::Management::WebManagementEvent" />
  <TypeSignature Language="F#" Value="type WebAuditEvent = class&#xA;    inherit WebManagementEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebManagementEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Actúa como clase base para todos los eventos de auditoría de supervisión del estado de ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Supervisión de estado ASP.NET permite personal de producción y las operaciones administrar las aplicaciones Web implementadas. El <xref:System.Web.Management> espacio de nombres contiene los tipos de evento de estado responsables de empaquetar los datos de estado de mantenimiento de la aplicación y los tipos de proveedor responsables de procesar estos datos. También contiene los tipos compatibles que ayudan a administrar los eventos de estado.  
  
 El <xref:System.Web.Management.WebAuditEvent> es la clase base desde la que se derivan las clases de evento de auditoría de supervisión de estado ASP.NET. Los eventos de auditoría generan información acerca de las operaciones relacionadas con la seguridad en una aplicación Web y proporcionan evento tanto un correctos y erróneos para cada operación auditada.  
  
 El sistema de supervisión de estado puede auditar eventos correctas e incorrectas, lo que significa que una aplicación puede supervisarse para condiciones normales y que no funciona correctamente. De forma predeterminada, se registran solo los eventos de auditoría de error.  
  
 Las operaciones siguientes se auditan por ASP.NET y pueden generar eventos de auditoría de supervisión de estado de error o éxito:  
  
-   Intentos de inicio de sesión realizados por los usuarios de una aplicación ASP.NET. Para obtener más detalles sobre esta auditoría, vea <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> y <xref:System.Web.Management.WebSuccessAuditEvent>.  
  
-   Eventos relacionados con la seguridad, como errores de autenticación, intentos de acceso de recurso que ha fallado y otros eventos relacionados con la seguridad. El registro de estos eventos puede ser útil cuando se investiga una intrusión o un ataque en la aplicación. De forma predeterminada, no se admite la auditoría se proporciona para los errores de autorización de usuarios anónimos. Para obtener más información acerca de las auditorías de eventos de error, consulte <xref:System.Web.Management.WebAuthenticationFailureAuditEvent> y <xref:System.Web.Management.WebFailureAuditEvent>.  
  
-   Eventos personalizados generados por una aplicación ASP.NET. Puede auditar los eventos personalizados extendiendo la funcionalidad proporcionada por el <xref:System.Web.Management.WebAuditEvent> clase y clases derivadas  
  
> [!NOTE]
>  En la mayoría de los casos podrá utilizar los tipos de supervisión de estado ASP.NET tal como se implementa y se controlará el sistema de supervisión de estado especificando valores en la `healthMonitoring` sección de configuración. También puede derivar de los tipos de supervisión de estado para crear sus propios eventos personalizados y los proveedores. Para obtener un ejemplo de cómo se deriva de la <xref:System.Web.Management.WebAuditEvent> de clases, vea el ejemplo proporcionado en este tema.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo derivar desde la <xref:System.Web.Management.WebAuditEvent> clase para crear un evento de auditoría personalizada.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#1)]
 [!code-vb[System.Web.Management.WebAuditEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#1)]  
  
 El siguiente es un extracto del archivo de configuración que permite a ASP.NET utilizar el evento.  
  
```  
<healthMonitoring   
  enabled="true"  
  heartBeatInterval="0">   
  
  <providers>  
    <add name="EventLogProvider"   
      type="System.Web.Management.EventLogWebEventProvider,  
      System.Web,Version=2.0.3600.0,Culture=neutral,  
      PublicKeyToken=b03f5f7f11d50a3a"/>  
  </providers>  
  
  <eventMappings>  
    <add  name="SampleWebAuditEvent"   
      type="SamplesAspNet.SampleWebAuditEvent,  
      webauditevent,Version=1.0.1663.31140,   
      Culture=neutral,   
      PublicKeyToken=0d1fa0f69d94de96,   
      processorArchitecture=MSIL"/>  
  </eventMappings>  
  
  <rules>  
    <add name="Custom Audit Default"  
      eventName="SampleWebAuditEvent"  
      provider="EventLogProvider"  
      profile="Default"/>    
  </rules>  
  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Al aplicar el formato de la información de eventos personalizados para su presentación, reemplace el <see cref="M:System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)" /> método en lugar del <see cref="Overload:System.Web.Management.WebBaseEvent.ToString" /> método. Esto evitará la sobrescritura o alteración con información confidencial del sistema.</para>
    </block>
    <altmember cref="T:System.Web.Management.WebManagementEvent" />
    <altmember cref="T:System.Web.Management.WebFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebAuthenticationFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebSuccessAuditEvent" />
    <altmember cref="T:System.Web.Management.WebAuthenticationSuccessAuditEvent" />
    <altmember cref="T:System.Web.Management.WebViewStateFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebEventCodes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebAuditEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebAuditEvent : string * obj * int -&gt; System.Web.Management.WebAuditEvent" Usage="new System.Web.Management.WebAuditEvent (message, eventSource, eventCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Descripción del evento.</param>
        <param name="eventSource">El objeto que es el origen del evento.</param>
        <param name="eventCode">Código asociado al evento. Cuando se implementa un evento personalizado, el código del evento debe ser mayor que <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Management.WebAuditEvent" /> mediante los parámetros proporcionados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor se usa internamente por el sistema de supervisión de estado ASP.NET. No utiliza nunca para crear instancias de un <xref:System.Web.Management.WebAuditEvent> objeto, pero se puede llamar a este constructor cuando se implementa su propio tipo de evento que se hereda de esta clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este constructor. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.Management.WebAuditEvent> clase.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#2)]
 [!code-vb[System.Web.Management.WebAuditEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebAuditEvent : string * obj * int * int -&gt; System.Web.Management.WebAuditEvent" Usage="new System.Web.Management.WebAuditEvent (message, eventSource, eventCode, eventDetailCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Descripción del evento.</param>
        <param name="eventSource">El objeto que es el origen del evento.</param>
        <param name="eventCode">Código asociado al evento. Cuando se implementa un evento personalizado, el código del evento debe ser mayor que <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="eventDetailCode">Valor de <see cref="T:System.Web.Management.WebEventCodes" />, que especifica el identificador detallado del evento.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Management.WebAuditEvent" /> con los parámetros de evento especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor se usa internamente por el sistema de supervisión de estado ASP.NET. No utiliza nunca para crear instancias de un <xref:System.Web.Management.WebAuditEvent> objeto, pero se puede llamar a este constructor cuando se implementa su propio tipo de evento que se hereda de esta clase.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo llamar a este constructor. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Web.Management.WebAuditEvent> clase.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#3)]
 [!code-vb[System.Web.Management.WebAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestInformation">
      <MemberSignature Language="C#" Value="public System.Web.Management.WebRequestInformation RequestInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Management.WebRequestInformation RequestInformation" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebAuditEvent.RequestInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestInformation As WebRequestInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Management::WebRequestInformation ^ RequestInformation { System::Web::Management::WebRequestInformation ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestInformation : System.Web.Management.WebRequestInformation" Usage="System.Web.Management.WebAuditEvent.RequestInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Management.WebRequestInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la información asociada a la solicitud Web.</summary>
        <value>La clase <see cref="T:System.Web.Management.WebRequestInformation" /> que contiene la información asociada a la solicitud Web.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la información proporcionada por el <xref:System.Web.Management.WebAuditEvent.RequestInformation%2A> propiedad para ayudar a detectar las causas de un funcionamiento incorrecto.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo obtener información de la solicitud a través de la <xref:System.Web.Management.WebRequestInformation> propiedad.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#5)]
 [!code-vb[System.Web.Management.WebAuditEvent#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Management.WebRequestInformation" />
      </Docs>
    </Member>
  </Members>
</Type>