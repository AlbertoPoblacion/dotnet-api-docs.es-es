<Type Name="XamlObjectWriter" FullName="System.Xaml.XamlObjectWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="88e6ca45083f7c3b687072f89d33f2067088da08" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53390864" /></Metadata><TypeSignature Language="C#" Value="public class XamlObjectWriter : System.Xaml.XamlWriter, System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriter extends System.Xaml.XamlWriter implements class System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlObjectWriter&#xA;Inherits XamlWriter&#xA;Implements IXamlLineInfoConsumer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlObjectWriter : System::Xaml::XamlWriter, System::Xaml::IXamlLineInfoConsumer" />
  <TypeSignature Language="F#" Value="type XamlObjectWriter = class&#xA;    inherit XamlWriter&#xA;    interface IXamlLineInfoConsumer" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xaml.IXamlLineInfoConsumer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Crea un gráfico de objetos a partir de una secuencia de nodos XAML de origen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Write` métodos de <xref:System.Xaml.XamlObjectWriter> implementar un patrón para que la <xref:System.Xaml.XamlObjectWriter> usa el <xref:System.Xaml.XamlWriter> definido por el <xref:System.Xaml.XamlWriter.WriteNode%2A> método. <xref:System.Xaml.XamlWriter.WriteNode%2A> lógica cambia entre el `Write` métodos, dependiendo de qué nodo de tipo es la posición actual en el lector.  
  
## <a name="scope"></a>Ámbito  
 Un <xref:System.Xaml.XamlObjectWriter> tiene un concepto de ámbito; que es, el <xref:System.Xaml.XamlObjectWriter> mantiene un punto conceptual de referencia en su gráfico de objetos de salida. Para un ámbito determinado, ciertas operaciones podrían ser válida o no es válido o producir un resultado sin operación. Por ejemplo, si se llama a <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> para escribir las directivas para la inicialización en un objeto que ya existe como una instancia, la implementación predeterminada produce una excepción.  
  
 Una posible técnica para realizar el seguimiento de ámbito en un personalizado <xref:System.Xaml.XamlObjectWriter> es alinear las acciones de nodo con una clase de pila o marco. La pila o marco puede realizar un seguimiento de push y pop para cada nivel de profundidad del modelo de objetos que se escribe o se cerró mientras el <xref:System.Xaml.XamlObjectWriter> escribe el gráfico de objetos.  
  
## <a name="callbacks"></a>Devoluciones de llamada  
 Para admitir intermedios y avanzados <xref:System.Xaml.XamlObjectWriter> escenarios, el mecanismo de escritura de un gráfico de objetos proporciona devolución de llamada de puntos de entrada que se producen cuando un <xref:System.Xaml.XamlObjectWriter> confirma o está a punto de confirmación determinadas acciones. Algunas devoluciones de llamada están habilitadas en la configuración y no son específicos para el tipo de objeto o el miembro que se escribe; Sin embargo, la información de devolución de llamada suele estar disponible en el contexto o en el evento es datos que se envían a través de la devolución de llamada. La siguiente es una lista de devoluciones de llamada pertinentes:  
  
-   La devolución de llamada que se declara mediante <xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A> se invoca cuando el ámbito pasa a un nuevo objeto y en el <xref:System.ComponentModel.ISupportInitialize.BeginInit%2A> fase de la duración de cada objeto creado.  
  
-   La devolución de llamada que se declara mediante <xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A> se invoca cuando el ámbito pasa a un nuevo objeto y en el <xref:System.ComponentModel.ISupportInitialize.EndInit%2A> fase de la duración de cada objeto creado.  
  
-   La devolución de llamada que se declara mediante <xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A> se invoca cuando se inicia en un objeto del ámbito y se produce cuando la primera <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> llamada a ese ámbito de objeto se realiza pero aún no confirmado.  
  
-   La devolución de llamada que se declara mediante <xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A> se invoca cuando el ámbito se inicia en un objeto y se produce cuando el <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> llamada a ese ámbito de objeto se realiza pero aún no confirmado.  
  
-   La devolución de llamada que se declara mediante <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> se invoca cuando <xref:System.Xaml.XamlObjectWriter.OnSetValue%2A> se llama.  
  
## <a name="writing-dictionary-keys"></a>Escribir las claves del diccionario  
 La implementación predeterminada de <xref:System.Xaml.XamlObjectWriter> admite la conversión de tipos en las restricciones de un <xref:System.Collections.Generic.Dictionary%602> antes el diccionario de contenido se agrega al gráfico de objetos. De esta manera, un diccionario genérico puede desligarse por los objetos en tiempo de ejecución y puede coincidir con el tipo genérico correspondiente `Add` y comportamiento del indexador. Sin embargo, como implementada para la base de <xref:System.Xaml.XamlObjectWriter>, esta capacidad existe solo para la creación de gráficos de objeto de la base de <xref:System.Collections.Generic.Dictionary%602> clase y no para las clases derivadas de <xref:System.Collections.Generic.Dictionary%602>.  
  
## <a name="checks-for-disposed"></a>Busca eliminado  
 Los escritores XAML se usan potencialmente para operaciones diferidas o donde se realiza una llamada en una instancia de sistema de escritura XAML que se ha eliminado en la versión preliminar. Varias API de <xref:System.Xaml.XamlObjectWriter> podría producir <xref:System.ObjectDisposedException> en estos casos.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlWriter" />
    <altmember cref="T:System.Xaml.XamlObjectReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter schemaContext" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext">Contexto de esquema XAML compartido con el lector XAML que proporciona los nodos para la escritura.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlObjectWriter" /> con el contexto de esquema XAML usado por un <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="schemaContext" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext, settings As XamlObjectWriterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::XamlObjectWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext * System.Xaml.XamlObjectWriterSettings -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter (schemaContext, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="schemaContext">Contexto de esquema XAML compartido con el lector XAML que proporciona los nodos para la escritura.</param>
        <param name="settings">Objeto de configuración que especifica determinadas opciones para el comportamiento y la salida de <see cref="T:System.Xaml.XamlObjectWriter" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlObjectWriter" /> usando el contexto empleado por un <see cref="T:System.Xaml.XamlReader" /> y su configuración.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="schemaContext" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="xamlObjectWriter.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restablece todos los posibles marcos y borra el gráfico de objetos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="xamlObjectWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Es <see langword="true" /> para liberar los recursos administrados; de lo contrario, es <see langword="false" />.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.Xaml.XamlObjectWriter" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterBeginInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterBeginInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterBeginInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterBeginInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterBeginInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterBeginInit : obj -&gt; unit&#xA;override this.OnAfterBeginInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterBeginInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto del que se va a informar. El objeto se empaqueta en <see cref="T:System.Xaml.XamlObjectEventArgs" /> cuando se invoca el controlador.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> que esté asociado a <see cref="T:System.Xaml.XamlObjectWriterSettings" /> para este objeto <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterEndInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterEndInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterEndInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterEndInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterEndInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterEndInit : obj -&gt; unit&#xA;override this.OnAfterEndInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterEndInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto del que se va a informar. El valor se empaqueta en <see cref="T:System.Xaml.XamlObjectEventArgs" /> cuando se invoca el controlador.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> que esté asociado a <see cref="T:System.Xaml.XamlObjectWriterSettings" /> para este objeto <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterProperties : obj -&gt; unit&#xA;override this.OnAfterProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto del que se va a informar. Se empaqueta en <see cref="T:System.Xaml.XamlObjectEventArgs" /> cuando se invoca el controlador.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> al que se haga referencia que esté asociado a <see cref="T:System.Xaml.XamlObjectWriterSettings" /> para este objeto <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeProperties : obj -&gt; unit&#xA;override this.OnBeforeProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnBeforeProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valor que se va a pasar a través de <see cref="T:System.Xaml.XamlObjectEventArgs" /> cuando se invoca el controlador.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> al que se haga referencia que esté asociado a <see cref="T:System.Xaml.XamlObjectWriterSettings" /> para este objeto <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetValue">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetValue (object eventSender, System.Xaml.XamlMember member, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetValue(object eventSender, class System.Xaml.XamlMember member, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnSetValue (eventSender As Object, member As XamlMember, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnSetValue(System::Object ^ eventSender, System::Xaml::XamlMember ^ member, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool&#xA;override this.OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool" Usage="xamlObjectWriter.OnSetValue (eventSender, member, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSender" Type="System.Object" />
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventSender">Objeto que se va a notificar al controlador como origen.</param>
        <param name="member">Nombre de la propiedad que se va a establecer, que se pasa al controlador como parte de <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</param>
        <param name="value">Valor que se va a proporcionar para la propiedad designada por <paramref name="property" />. El valor se pasa al controlador como parte de <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> al que se haga referencia que esté asociado al objeto <see cref="T:System.Xaml.XamlObjectWriterSettings" /> de este sistema de escritura siempre y cuando el valor de <paramref name="handled" /> de los datos de evento de <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> no sea <see langword="true" />.</summary>
        <returns>Valor booleano establecido por cualquier controlador asociado; de lo contrario, devuelve <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `SetValue` operación para este sistema de escritura XAML tiene un controlador asociado (un <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> se declara en <xref:System.Xaml.XamlObjectWriterSettings>), este método crea un nuevo <xref:System.Windows.Markup.XamlSetValueEventArgs> y los pasa al controlador. El valor devuelto se establece leyendo la <xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A> valor que se pasa a través de los datos del evento. Si no hay ningún controlador existe y se invoca este método, la llamada devuelve `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.Result" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Xaml.XamlObjectWriter.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el último objeto que se escribió. Normalmente, se llama únicamente cuando la secuencia de nodos está llegando al final y el gráfico de objeto está completado.</summary>
        <value>Último objeto escrito o <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El uso más habitual de <xref:System.Xaml.XamlObjectWriter.Result%2A> es llamarla solo cuando el flujo de nodo se sabe que está en su extremo, y el gráfico de objetos completo. En caso contrario, el gráfico de objetos es probable que sea incompleto y no es útil para la mayoría de los escenarios de plataforma.  
  
 <xref:System.Xaml.XamlObjectWriter.Result%2A> Normalmente, solo contiene un valor distinto de null si se llama inmediatamente después de llamar a <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>, y si el ámbito actual está en el que el objeto proporciona un valor de miembro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope RootNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope RootNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNameScope As INameScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::INameScope ^ RootNameScope { System::Windows::Markup::INameScope ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RootNameScope : System.Windows.Markup.INameScope" Usage="System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el servicio <see cref="T:System.Windows.Markup.INameScope" /> que mantiene el ámbito de nombres XAML para la raíz del nodo absoluto del sistema de escritura de objetos XAML.</summary>
        <value>Servicio <see cref="T:System.Windows.Markup.INameScope" /> que mantiene el ámbito de nombres XAML para la raíz actual del sistema de escritura de objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta propiedad puede proceder del contexto de sistema de escritura del objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public override System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el contexto de esquema XAML activo.</summary>
        <value>Contexto de esquema XAML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contexto de esquema XAML es un origen de la información necesaria para escenarios más prácticos de escritura de objeto. El contexto de esquema XAML influye en la búsqueda de tipos de respaldo y contiene información sobre los ensamblados donde existen los tipos de respaldo. El contexto de esquema XAML predeterminado se basa en las reglas de asignación de tipos CLR. Marcos de trabajo suelen proporcionan su propio contexto de esquema XAML con el fin de garantizar que los mecanismos de carga del ensamblado coinciden con los modelos de aplicación de amd programación de .NET framework.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineInfo">
      <MemberSignature Language="C#" Value="public void SetLineInfo (int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineInfo(int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLineInfo (lineNumber As Integer, linePosition As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetLineInfo(int lineNumber, int linePosition);" />
      <MemberSignature Language="F#" Value="abstract member SetLineInfo : int * int -&gt; unit&#xA;override this.SetLineInfo : int * int -&gt; unit" Usage="xamlObjectWriter.SetLineInfo (lineNumber, linePosition)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Número de línea del lector.</param>
        <param name="linePosition">Posición de línea del lector.</param>
        <summary>Implementa <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> y proporciona información de línea para las excepciones.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método de servicio no está pensado para llamarse directamente desde el código. Sin embargo, si está creando una clase derivada de <xref:System.Xaml.XamlObjectWriter> y esperan informar de un contexto donde los números de línea no están disponibles o no útil, es posible que se llama a este método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideLineInfo">
      <MemberSignature Language="C#" Value="public bool ShouldProvideLineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldProvideLineInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldProvideLineInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldProvideLineInfo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldProvideLineInfo : bool" Usage="System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si un servicio de información de línea debe proporcionar valores y, por tanto, debe llamar también al método <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> cuando proceda.</summary>
        <value>Es <see langword="true" /> si el sistema de escritura usa información de línea; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En esta implementación, siempre se devuelve `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public override void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndMember();" />
      <MemberSignature Language="F#" Value="override this.WriteEndMember : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra el ámbito de miembro actual y puede escribir el valor del ámbito de miembro mientras se cierra. El nuevo ámbito se convierte en el ámbito de objeto primario del miembro.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">Error al crear el valor de miembro a partir de un nodo de valor que se encuentra entre esta llamada y <see langword="StartMember" /> anterior.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public override void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndObject();" />
      <MemberSignature Language="F#" Value="override this.WriteEndObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra el ámbito de objeto actual en el sistema de escritura. El ámbito de objeto nuevo pasa a ser el ámbito del miembro primario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este `EndObject` posición ámbito está cerrando el objeto raíz, el nuevo ámbito de objeto se convierte en el ámbito raíz.  
  
 La llamada a <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> es posible que aún no haya creado el objeto ya un miembro de objeto puede ser una ruta de inicialización necesaria, como texto de inicialización o los parámetros de inicialización. En estos casos, la llamada a <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> escribe realmente el objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public override void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteGetObject();" />
      <MemberSignature Language="F#" Value="override this.WriteGetObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteGetObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Escribe el elemento <see langword="StartObject" /> conceptual en el gráfico de objeto cuando el objeto especificado se corresponde con el valor predeterminado o implícito de la propiedad primaria. El valor implícito procede de la información obtenida del contexto de esquema XAML y de la información sobre los tipos de respaldo, en lugar de especificarse como un valor de objeto en el conjunto de nodos XAML de entrada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La diferencia entre escribir con <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> y escribir con <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> puede verse en el gráfico de objetos resultante. <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> no se construye una instancia de un tipo porque el <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> API no tiene ninguna información para informar de lo que construir el gráfico de objetos. En su lugar, se creó el objeto cuando se inicializó la propiedad primaria; por lo que un <xref:System.Xaml.XamlObjectWriter> no es necesario que construirla. En cambio, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> especifica que una instancia de ese tipo debe ser construida e insertar en el gráfico de objetos.  
  
 Si piensa en el flujo de nodo XAML como una serie de marcos, un <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> es equilibrada en un <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> llamar. Por lo tanto, el número de <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> plus <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> es igual al número de llamadas <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> llama como parte de una evaluación completa de escritura de objeto del flujo de nodo XAML.  
  
 Conceptual `StartObject` posición para un objeto implícito en el gráfico de objetos es necesario porque aunque el propio valor de objeto es un valor predeterminado implícito, ese objeto todavía podría tener miembros que deben escribirse basándose en el flujo de nodo XAML. Es un escenario típico que esto ocurre cuando <xref:System.Xaml.XamlObjectWriter> escribe los nodos de miembro para una propiedad de colección y la inicialización de la colección es implícito al crear el objeto que posee la propiedad de colección.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public override void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberSignature Language="F#" Value="override this.WriteNamespace : System.Xaml.NamespaceDeclaration -&gt; unit" Usage="xamlObjectWriter.WriteNamespace namespaceDeclaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration">Declaración de espacio de nombres que se va a escribir.</param>
        <summary>Define una declaración de espacio de nombres que se aplica al siguiente ámbito de objeto o ámbito de miembro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el ámbito actual es un ámbito raíz, el ámbito de objeto o el ámbito de miembro, se puede escribir una declaración de espacio de nombres. Sin embargo, <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> solo se puede llamar inmediatamente antes de una llamada a uno de los siguientes: <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>, o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>. El consecutivos <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> caso es para escribir varias declaraciones de espacio de nombres en el mismo nodo. Finalmente, ya sea <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> debe llamarse.  
  
 <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> no utiliza un `Start` / `End` metáfora. Aunque un espacio de nombres XAML tiene miembros en el sentido de representación de CLR, los miembros se conocen y no es necesario para representarse como un tipo especial de <xref:System.Xaml.XamlMember> para la extensibilidad. Para obtener acceso a los valores de un <xref:System.Xaml.NamespaceDeclaration>, tiene acceso a su <xref:System.Xaml.NamespaceDeclaration.Namespace%2A> y <xref:System.Xaml.NamespaceDeclaration.Prefix%2A> propiedades.  
  
 Una declaración de espacio de nombres puede tener un <xref:System.String.Empty?displayProperty=nameWithType> valor para el prefijo. Un <xref:System.String.Empty?displayProperty=nameWithType> prefijo representa una declaración de espacio de nombres XAML predeterminado. No intente usar un valor nulo para representar el prefijo predeterminado;  produce una excepción en esta API. Para obtener más información, vea <xref:System.Xaml.NamespaceDeclaration>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="namespaceDeclaration" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un componente de <paramref name="namespaceDeclaration" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlObjectReaderException">Se ha intentado escribir un ámbito no válido en un nodo de espacio de nombres XAML.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public override void WriteStartMember (System.Xaml.XamlMember property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartMember(class System.Xaml.XamlMember property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartMember (property As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartMember(System::Xaml::XamlMember ^ property);" />
      <MemberSignature Language="F#" Value="override this.WriteStartMember : System.Xaml.XamlMember -&gt; unit" Usage="xamlObjectWriter.WriteStartMember property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="property">Propiedad XAML que se va a escribir. Normalmente se obtiene este valor de un lector XAML a través de la secuencia de nodos XAML.</param>
        <summary>Escribe un nuevo nodo de miembro en el ámbito de objeto actual y el ámbito pasa a ser un nuevo ámbito de miembro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  Esté atento a una <xref:System.Xaml.XamlDuplicateMemberException>, que se produce cuando la misma propiedad XAML se establece dos veces en el XAML de entrada. En casos más sencillos, como cuando la misma propiedad se establece en la sintaxis de atributo y sintaxis de elemento de propiedad, puede ver fácilmente esta excepción en el marcado de entrada. Sin embargo, pueden producirse casos más sutiles que son más difíciles de detectar. Por ejemplo, podría producirse esta excepción si se establece una propiedad de contenido XAML, si implica las propiedades de ambiente en XAML, y si una propiedad que permite un uso de asociaciones y un uso de la instancia. En las fases de depuración de desarrollo, a menudo puede encontrar esta excepción mediante la visualización de la representación intermedia de nodo XAML que se conecta el marcado de lectura y escritura del gráfico de objeto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><paramref name="property" /> tiene <see cref="P:System.Xaml.XamlMember.IsUnknown" /> establecido en <see langword="true" />.  
  
O bien 
 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> pasó, lo que indica que la secuencia de nodo de XAML contenía contenido para un objeto que no admite contenido.  
  
O bien 
Se ha intentado escribir un ámbito no válido en un miembro de inicio.</exception>
        <exception cref="T:System.Xaml.XamlDuplicateMemberException"><paramref name="property" /> especifica una propiedad que ya está explícitamente establecida en el ámbito del objeto primario.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="property" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public override void WriteStartObject (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartObject(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartObject(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="override this.WriteStartObject : System.Xaml.XamlType -&gt; unit" Usage="xamlObjectWriter.WriteStartObject xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">Tipo que se va a escribir. Este valor suele obtenerse de un lector XAML.</param>
        <summary>Escribe un nodo de objeto en el ámbito actual y establece el ámbito en un nuevo ámbito de objeto.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">Procesamiento de un tipo <see cref="P:System.Xaml.XamlType.IsUnknown" /> y no se puede crear un objeto.  
  
O bien 
Se ha intentado escribir un ámbito no válido en un objeto de inicio.</exception>
        <exception cref="T:System.Xaml.XamlParseException">Se ha intentado escribir el objeto raíz cuando el objeto raíz ya se había proporcionado en la configuración.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="xamlType" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides"><para>Si el ámbito actual está dentro de una colección, diccionario o matriz, la nueva instancia debe agregarse a la colección, diccionario o matriz mediante la <see langword="Add" /> método del tipo relevante. En caso contrario, el miembro debe asignarse a la nueva instancia.</para></block>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public override void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteValue : obj -&gt; unit" Usage="xamlObjectWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valor que se va a escribir.</param>
        <summary>Escribe un valor en el ámbito de miembro actual. Si el ámbito actual está en un objeto de colección, diccionario o matriz, el valor debe agregarse a la colección, el diccionario o la matriz.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">Se ha intentado escribir un ámbito no válido en un valor.</exception>
      </Docs>
    </Member>
  </Members>
</Type>