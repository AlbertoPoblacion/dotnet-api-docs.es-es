<Type Name="XamlObjectWriter" FullName="System.Xaml.XamlObjectWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ca402de94a9fb4c2404a3eb885b3a1fc9d0fc4b6" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30721019" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlObjectWriter : System.Xaml.XamlWriter, System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriter extends System.Xaml.XamlWriter implements class System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlObjectWriter&#xA;Inherits XamlWriter&#xA;Implements IXamlLineInfoConsumer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlObjectWriter : System::Xaml::XamlWriter, System::Xaml::IXamlLineInfoConsumer" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xaml.IXamlLineInfoConsumer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Crea un gráfico de objetos a partir de una secuencia de nodos XAML de origen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Write` métodos de <xref:System.Xaml.XamlObjectWriter> implementar un patrón para que la <xref:System.Xaml.XamlObjectWriter> utiliza la <xref:System.Xaml.XamlWriter> definido por el <xref:System.Xaml.XamlWriter.WriteNode%2A> método. <xref:System.Xaml.XamlWriter.WriteNode%2A> lógica alterna entre el `Write` métodos, dependiendo de qué nodo de tipo está en la posición actual en el lector.  
  
## <a name="scope"></a>Ámbito  
 A <xref:System.Xaml.XamlObjectWriter> incluye el concepto de ámbito; el <xref:System.Xaml.XamlObjectWriter> mantiene un punto conceptual de referencia en su gráfico de objetos de salida. Para un ámbito determinado, ciertas operaciones podrían ser válida o no es válido o generar un resultado de la operación no. Por ejemplo, si se llama a <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> para escribir las directivas de inicialización en un objeto que ya existe como una instancia, la implementación predeterminada produce una excepción.  
  
 Una posible técnica para realizar el seguimiento de ámbito en un personalizado <xref:System.Xaml.XamlObjectWriter> es alinear las acciones de nodo con una clase de pila o marco. La pila o el marco puede realizar un seguimiento de inserción y sacar para cada nivel de profundidad de modelo de objetos que se entrado o salida mientras el <xref:System.Xaml.XamlObjectWriter> escribe el gráfico de objetos.  
  
## <a name="callbacks"></a>Devoluciones de llamada  
 Para admitir intermedio y avanzado <xref:System.Xaml.XamlObjectWriter> escenarios, el mecanismo de la escritura de un gráfico de objetos proporciona devolución de llamada de puntos de entrada que se producen cuando un <xref:System.Xaml.XamlObjectWriter> confirma o está a punto de confirmar ciertas acciones. Algunos devoluciones de llamada están habilitadas en la configuración y no son específicas para el tipo de objeto o el miembro que se escribe; Sin embargo, la información de devolución de llamada a menudo está disponible en contexto o en el evento es datos que se envían a través de la devolución de llamada. La siguiente es una lista de devoluciones de llamada relevantes:  
  
-   La devolución de llamada que se declare <xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A> se invoca cuando se sale del ámbito en un nuevo objeto y, en la <xref:System.ComponentModel.ISupportInitialize.BeginInit%2A> fase de la duración de cada objeto creado.  
  
-   La devolución de llamada que se declare <xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A> se invoca cuando se sale del ámbito en un nuevo objeto y, en la <xref:System.ComponentModel.ISupportInitialize.EndInit%2A> fase de la duración de cada objeto creado.  
  
-   La devolución de llamada que se declare <xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A> se invoca cuando el ámbito se inicia en un objeto y se produce cuando la primera <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> llamada a ese ámbito de objeto se realiza pero aún no ha confirmado.  
  
-   La devolución de llamada que se declare <xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A> se invoca cuando el ámbito se inicia en un objeto y se produce cuando el <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> llamada a ese ámbito de objeto se realiza pero aún no ha confirmado.  
  
-   La devolución de llamada que se declare <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> se invoca cuando <xref:System.Xaml.XamlObjectWriter.OnSetValue%2A> se llama.  
  
## <a name="writing-dictionary-keys"></a>Claves del diccionario de escritura  
 La implementación predeterminada de <xref:System.Xaml.XamlObjectWriter> admite la conversión de tipos en las restricciones de un <xref:System.Collections.Generic.Dictionary%602> antes el diccionario de contenido se agrega al gráfico de objetos. De esta manera, un diccionario genérico puede ser organizado en tiempo de ejecución por objetos y puede coincidir con la interfaz genérica relevante `Add` y el comportamiento del indizador. Sin embargo, como implementada para la base de <xref:System.Xaml.XamlObjectWriter>, esta funcionalidad no existe solo para la creación del gráfico de objetos de la base de <xref:System.Collections.Generic.Dictionary%602> clase y no para las clases derivadas de <xref:System.Collections.Generic.Dictionary%602>.  
  
## <a name="checks-for-disposed"></a>Busca eliminado  
 Los escritores de XAML se usan potencialmente para operaciones diferidas o donde se realiza una llamada en una instancia de sistema de escritura XAML que se ha eliminado en el ínterin. Varias API de <xref:System.Xaml.XamlObjectWriter> podría producir <xref:System.ObjectDisposedException> en estos casos.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlWriter" />
    <altmember cref="T:System.Xaml.XamlObjectReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext">Contexto de esquema XAML compartido con el lector XAML que proporciona los nodos para la escritura.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlObjectWriter" /> con el contexto de esquema XAML usado por un <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaContext" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext, settings As XamlObjectWriterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::XamlObjectWriterSettings ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="schemaContext">Contexto de esquema XAML compartido con el lector XAML que proporciona los nodos para la escritura.</param>
        <param name="settings">Objeto de configuración que especifica determinadas opciones para el comportamiento y la salida de <see cref="T:System.Xaml.XamlObjectWriter" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlObjectWriter" /> usando el contexto empleado por un <see cref="T:System.Xaml.XamlReader" /> y su configuración.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaContext" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restablece todos los posibles marcos y borra el gráfico de objetos.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Es <see langword="true" /> para liberar los recursos administrados; de lo contrario, es <see langword="false" />.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.Xaml.XamlObjectWriter" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterBeginInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterBeginInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterBeginInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterBeginInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterBeginInit(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto del que se va a informar. El objeto se empaqueta en <see cref="T:System.Xaml.XamlObjectEventArgs" /> cuando se invoca el controlador.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> que esté asociado a <see cref="T:System.Xaml.XamlObjectWriterSettings" /> para este objeto <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterEndInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterEndInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterEndInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterEndInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterEndInit(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto del que se va a informar. El valor se empaqueta en <see cref="T:System.Xaml.XamlObjectEventArgs" /> cuando se invoca el controlador.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> que esté asociado a <see cref="T:System.Xaml.XamlObjectWriterSettings" /> para este objeto <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterProperties(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Objeto del que se va a informar. Se empaqueta en <see cref="T:System.Xaml.XamlObjectEventArgs" /> cuando se invoca el controlador.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> al que se haga referencia que esté asociado a <see cref="T:System.Xaml.XamlObjectWriterSettings" /> para este objeto <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeProperties(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valor que se va a pasar a través de <see cref="T:System.Xaml.XamlObjectEventArgs" /> cuando se invoca el controlador.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> al que se haga referencia que esté asociado a <see cref="T:System.Xaml.XamlObjectWriterSettings" /> para este objeto <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetValue">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetValue (object eventSender, System.Xaml.XamlMember member, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetValue(object eventSender, class System.Xaml.XamlMember member, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnSetValue (eventSender As Object, member As XamlMember, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnSetValue(System::Object ^ eventSender, System::Xaml::XamlMember ^ member, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSender" Type="System.Object" />
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventSender">Objeto que se va a notificar al controlador como origen.</param>
        <param name="member">Nombre de la propiedad que se va a establecer, que se pasa al controlador como parte de <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</param>
        <param name="value">Valor que se va a proporcionar para la propiedad designada por <c>property</c>. El valor se pasa al controlador como parte de <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</param>
        <summary>Invoca cualquier método <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> al que se haga referencia que esté asociado al objeto <see cref="T:System.Xaml.XamlObjectWriterSettings" /> de este sistema de escritura siempre y cuando el valor de <paramref name="handled" /> de los datos de evento de <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> no sea <see langword="true" />.</summary>
        <returns>Valor booleano establecido por cualquier controlador asociado; de lo contrario, devuelve <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `SetValue` operación para este sistema de escritura XAML tiene un controlador asociado (un <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> se declara en <xref:System.Xaml.XamlObjectWriterSettings>), este método crea un nuevo <xref:System.Windows.Markup.XamlSetValueEventArgs> y los pasa al controlador. El valor devuelto se establece leyendo el <xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A> valor que se pasa a través de los datos del evento. Si no hay ningún controlador existe y se invoca este método, la llamada devuelve `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.Result" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el último objeto que se escribió. Normalmente, se llama únicamente cuando la secuencia de nodos está llegando al final y el gráfico de objeto está completado.</summary>
        <value>Último objeto escrito o <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El uso más habitual de <xref:System.Xaml.XamlObjectWriter.Result%2A> es para que se llame solo cuando el flujo de nodo se conoce como su final y el gráfico de objetos completo. En caso contrario, el gráfico de objetos es probable que sea incompleto y no es útil para la mayoría de los escenarios de plataforma.  
  
 <xref:System.Xaml.XamlObjectWriter.Result%2A> Normalmente sólo contiene un valor distinto de null si se llama inmediatamente después de llamar a <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>, y si el ámbito actual se encuentra en el miembro donde el objeto proporciona un valor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope RootNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope RootNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNameScope As INameScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::INameScope ^ RootNameScope { System::Windows::Markup::INameScope ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el servicio <see cref="T:System.Windows.Markup.INameScope" /> que mantiene el ámbito de nombres XAML para la raíz del nodo absoluto del sistema de escritura de objetos XAML.</summary>
        <value>Servicio <see cref="T:System.Windows.Markup.INameScope" /> que mantiene el ámbito de nombres XAML para la raíz actual del sistema de escritura de objetos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de esta propiedad puede proceder de contexto del sistema de escritura de objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public override System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el contexto de esquema XAML activo.</summary>
        <value>Contexto de esquema XAML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Contexto de esquema XAML es una fuente de información necesaria para escenarios de escritura de objeto más prácticos. El contexto de esquema XAML influye en la búsqueda de tipos para tipos de respaldo y contiene información sobre los ensamblados donde existen tipos de respaldo. El contexto de esquema XAML predeterminado se basa en reglas de asignación de tipos CLR. Marcos de trabajo proporcionan normalmente su propio contexto de esquema XAML para asegurar que los mecanismos de carga del ensamblado coinciden con los modelos de aplicación de amd programación del marco de trabajo.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineInfo">
      <MemberSignature Language="C#" Value="public void SetLineInfo (int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineInfo(int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLineInfo (lineNumber As Integer, linePosition As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetLineInfo(int lineNumber, int linePosition);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Número de línea del lector.</param>
        <param name="linePosition">Posición de línea del lector.</param>
        <summary>Implementa <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> y proporciona información de línea para las excepciones.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método de servicio no está pensado para llamarlo directamente desde el código. Sin embargo, si está creando una clase derivada de <xref:System.Xaml.XamlObjectWriter> y espera notificar un contexto donde los números de línea no están disponibles o no útil, puede llamar a este método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideLineInfo">
      <MemberSignature Language="C#" Value="public bool ShouldProvideLineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldProvideLineInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldProvideLineInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldProvideLineInfo { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si un servicio de información de línea debe proporcionar valores y, por tanto, debe llamar también al método <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> cuando proceda.</summary>
        <value>
          Es <see langword="true" /> si el sistema de escritura usa información de línea; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta implementación siempre devuelve `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public override void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndMember();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra el ámbito de miembro actual y puede escribir el valor del ámbito de miembro mientras se cierra. El nuevo ámbito se convierte en el ámbito de objeto primario del miembro.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">Error al crear el valor de miembro a partir de un nodo de valor que se encuentra entre esta llamada y <see langword="StartMember" /> anterior.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public override void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra el ámbito de objeto actual en el sistema de escritura. El ámbito de objeto nuevo pasa a ser el ámbito del miembro primario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si este `EndObject` ámbito de posición está cerrando el objeto raíz, el nuevo ámbito de objeto se convierte en el ámbito raíz.  
  
 La llamada a <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> podría no ha creado el objeto porque un miembro de objeto puede ser una ruta de inicialización que sea necesaria, como texto de inicialización o los parámetros de inicialización. Para estos casos, la llamada a <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> escribe realmente el objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public override void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteGetObject();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Escribe el elemento <see langword="StartObject" /> conceptual en el gráfico de objeto cuando el objeto especificado se corresponde con el valor predeterminado o implícito de la propiedad primaria. El valor implícito procede de la información obtenida del contexto de esquema XAML y de la información sobre los tipos de respaldo, en lugar de especificarse como un valor de objeto en el conjunto de nodos XAML de entrada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La diferencia entre la escritura con <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> y escribir con <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> puede verse en el gráfico de objetos resultante. <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> no construye una instancia de un tipo porque la <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> API no tiene información para informar de lo que construir el gráfico de objetos. En su lugar, se creó el objeto cuando se inicializó la propiedad primaria; por lo que un <xref:System.Xaml.XamlObjectWriter> no es necesario crearlo. En cambio, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> especifica que una instancia de ese tipo debe construirse y se inserta en el gráfico de objetos.  
  
 Si piensa del flujo de nodo XAML como una serie de marcos, un <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> equilibrada en un <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> llamar. Por lo tanto, el número de <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> más <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> es igual al número de llamadas <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> llama como parte de una evaluación de escritura de objeto completa del flujo de nodo XAML.  
  
 El conceptual `StartObject` posición para un objeto implícito en el gráfico de objetos es necesario porque aunque el propio valor de objeto es un valor predeterminado implícito, ese objeto todavía puede tener miembros que deben escribirse basándose en el flujo de nodo XAML. Es un escenario típico que esto ocurre cuando <xref:System.Xaml.XamlObjectWriter> escribe los nodos de miembro para una propiedad de colección y la inicialización de la colección es implícito al crear el objeto que posee la propiedad de colección.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public override void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration">Declaración de espacio de nombres que se va a escribir.</param>
        <summary>Define una declaración de espacio de nombres que se aplica al siguiente ámbito de objeto o ámbito de miembro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una declaración de espacio de nombres se puede escribir si el ámbito actual es un ámbito raíz, ámbito de objeto o ámbito de miembro. Sin embargo, <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> sólo se puede llamar inmediatamente antes de llamar a uno de los siguientes: <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>, o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>. El consecutivos <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> caso es para escribir varias declaraciones de espacio de nombres en el mismo nodo. Finalmente, ya sea <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> o <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> debe llamarse.  
  
 <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> No use un `Start` / `End` metáfora. Aunque un espacio de nombres XAML tiene miembros en el sentido de representación de CLR, los miembros se conocen y no es necesario para representarse como un tipo especial de <xref:System.Xaml.XamlMember> para la extensibilidad. Para obtener acceso a los valores de un <xref:System.Xaml.NamespaceDeclaration>, tiene acceso a su <xref:System.Xaml.NamespaceDeclaration.Namespace%2A> y <xref:System.Xaml.NamespaceDeclaration.Prefix%2A> propiedades.  
  
 Una declaración de espacio de nombres puede tener un <xref:System.String.Empty?displayProperty=nameWithType> valor para el prefijo. Un <xref:System.String.Empty?displayProperty=nameWithType> prefijo representa una declaración de espacio de nombres XAML predeterminado. No intente utilizar null para representar el prefijo predeterminado;  produce una excepción en esta API. Para obtener más información, vea <xref:System.Xaml.NamespaceDeclaration>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="namespaceDeclaration" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un componente de <paramref name="namespaceDeclaration" /> es <see langword="null" />.</exception>
        <exception cref="T:System.Xaml.XamlObjectReaderException">Se ha intentado escribir un ámbito no válido en un nodo de espacio de nombres XAML.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public override void WriteStartMember (System.Xaml.XamlMember property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartMember(class System.Xaml.XamlMember property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartMember (property As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartMember(System::Xaml::XamlMember ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="property">Propiedad XAML que se va a escribir. Normalmente se obtiene este valor de un lector XAML a través de la secuencia de nodos XAML.</param>
        <summary>Escribe un nuevo nodo de miembro en el ámbito de objeto actual y el ámbito pasa a ser un nuevo ámbito de miembro.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  Espere un <xref:System.Xaml.XamlDuplicateMemberException>, que se produce cuando la misma propiedad XAML se establece dos veces en la entrada XAML. En casos más sencillos, como cuando la misma propiedad se establece en la sintaxis de atributo y la sintaxis de elemento de propiedad, puede ver fácilmente esta excepción en el marcado de entrada. Sin embargo, pueden producir casos más sutiles que son más difíciles de detectar. Por ejemplo, esta excepción puede producirse si se establece una propiedad de contenido de XAML, si implica las propiedades de ambiente en XAML y una propiedad que permite un uso de asociaciones y un uso de la instancia. En las fases de depuración de desarrollo, puede encontrar a menudo esta excepción mediante la visualización de la representación de nodo XAML intermedia que conecta la lectura de marcado y la escritura del gráfico de objeto.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">
          <paramref name="property" /> tiene <see cref="P:System.Xaml.XamlMember.IsUnknown" /> establecido en <see langword="true" />.  
  
 O bien  
  
 <see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> pasó, lo que indica que la secuencia de nodo de XAML contenía contenido para un objeto que no admite contenido.  
  
 O bien  
  
 Se ha intentado escribir un ámbito no válido en un miembro de inicio.</exception>
        <exception cref="T:System.Xaml.XamlDuplicateMemberException">
          <paramref name="property" /> especifica una propiedad que ya está explícitamente establecida en el ámbito del objeto primario.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public override void WriteStartObject (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartObject(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartObject(System::Xaml::XamlType ^ xamlType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType">Tipo que se va a escribir. Este valor suele obtenerse de un lector XAML.</param>
        <summary>Escribe un nodo de objeto en el ámbito actual y establece el ámbito en un nuevo ámbito de objeto.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">Procesamiento de un tipo <see cref="P:System.Xaml.XamlType.IsUnknown" /> y no se puede crear un objeto.  
  
 O bien  
  
 Se ha intentado escribir un ámbito no válido en un objeto de inicio.</exception>
        <exception cref="T:System.Xaml.XamlParseException">Se ha intentado escribir el objeto raíz cuando el objeto raíz ya se había proporcionado en la configuración.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xamlType" /> es <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Si el ámbito actual está dentro de una colección, el diccionario o la matriz, la nueva instancia debe agregarse a la colección, el diccionario o la matriz mediante la <see langword="Add" /> método del tipo relevante. En caso contrario, el miembro debe asignarse a la nueva instancia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public override void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteValue(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valor que se va a escribir.</param>
        <summary>Escribe un valor en el ámbito de miembro actual. Si el ámbito actual está en un objeto de colección, diccionario o matriz, el valor debe agregarse a la colección, el diccionario o la matriz.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException">Se ha intentado escribir un ámbito no válido en un valor.</exception>
      </Docs>
    </Member>
  </Members>
</Type>