<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2c5d677ab741eb848cf99fa1f0d969968ff9639" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30720279" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Proporciona definiciones de base para las clases que usan la entrada de XAML y generan flujos de nodos XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader> es una clase abstracta y no proporciona las implementaciones o las definiciones que dan como resultado un trabajo para todos los miembros. Los miembros que tienen una implementación en <xref:System.Xaml.XamlReader> se indican en la sección Comentarios para dicho miembro. En concreto, <xref:System.Xaml.XamlReader> tiene varios miembros abstractos que deben implementarse y varios miembros virtuales.  
  
 De los miembros virtuales, <xref:System.Xaml.XamlReader.ReadSubtree%2A> y <xref:System.Xaml.XamlReader.Skip%2A> cada uno de ellos proporcionan una implementación predeterminada que es adecuada para la mayoría de los casos. Sin embargo, el <xref:System.Xaml.XamlReader.ReadSubtree%2A> y <xref:System.Xaml.XamlReader.Skip%2A> las implementaciones predeterminadas que se basan en otro comportamiento esperado del lector XAML implementando; en concreto, se basan en el <xref:System.Xaml.XamlReader.Read%2A> invalidar. <xref:System.Xaml.XamlReader.Dispose%2A> También es un miembro virtual que tiene una implementación predeterminada de trabajo.  
  
 Las dos clases siguientes son las clases derivadas más prácticas y pertinentes en los servicios XAML de .NET Framework y el ensamblado System.Xaml:  
  
-   <xref:System.Xaml.XamlObjectReader>, que lee un gráfico de objetos, como el gráfico de objeto activo de una aplicación en tiempo de ejecución.  
  
-   <xref:System.Xaml.XamlXmlReader>, que lee XAML en forma de un archivo de texto XML mediante el uso general <xref:System.Xml.XmlReader> que carga el archivo como una clase auxiliar intermediario.  
  
 Incluyen otros lectores XAML de otros marcos <xref:System.Windows.Baml2006.Baml2006Reader> y <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.  
  
 <xref:System.Xaml.XamlReader> difiere de [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] y <xref:System.Xml.XmlReader> principios de diseño porque <xref:System.Xaml.XamlReader> no tiene un `Create` método devuelva un valor predeterminado subyacente implementaciones del lector XAML. En su lugar, debe crear una instancia específicas clases derivadas de lector XAML mediante una llamada a sus constructores u otra API de específicos de las clases auxiliares.  
  
## <a name="subtree-readers"></a>Lectores del subárbol  
 En su mayor parte, se llama a <xref:System.Xaml.XamlReader> API en el contexto de las clases de lector XAML específicas que se derivan de <xref:System.Xaml.XamlReader>. Sin embargo, en un caso concreto, accederás a <xref:System.Xaml.XamlReader> API en una instancia de lector XAML práctica que no es pública y no deriva de <xref:System.Xaml.XamlObjectReader> o <xref:System.Xaml.XamlXmlReader>. En este caso es cuando se llama a <xref:System.Xaml.XamlReader.ReadSubtree%2A>, que devuelve un <xref:System.Xaml.XamlReader> instancia. En la implementación predeterminada, la <xref:System.Xaml.XamlReader> que es devuelto por esta API es una clase interna.  
  
 El <xref:System.Xaml.XamlReader> obtenido de lectura del subárbol tiene acciones válidas para las API como <xref:System.Xaml.XamlReader.Read%2A> y <xref:System.Xaml.XamlReader.NodeType%2A>, y dichas acciones se basan en la clase de lector primaria. Este diseño permite que la clase interna hacer un seguimiento del nivel del marco donde se escribió el subárbol. El subárbol de actuación <xref:System.Xaml.XamlReader> se asegura de que si se mueve la posición del nodo actual más allá de los límites del subárbol, el lector del subárbol concreto notifica el final de archivo o `null` en el nodo actual.  
  
 Notas sobre el uso de lector de subárbol se incluyen en determinados <xref:System.Xaml.XamlReader> API.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa la clase <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cierra el flujo de nodos XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En la implementación base, llamar a <xref:System.Xaml.XamlReader.Close%2A> llamadas <xref:System.Xaml.XamlReader.Dispose%2A> con el `isDisposing` parámetro como `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Es <see langword="true" /> para liberar los recursos administrados; de lo contrario, es <see langword="false" />.</param>
        <summary>Libera los recursos no administrados que usa <see cref="T:System.Xaml.XamlReader" /> y, de forma opcional, libera los recursos administrados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debe llamar a la clase base para obtener <xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se ha llamado al método <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />.</summary>
        <value>
          <see langword="true" /> si se ha llamado a <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se implementa en una clase derivada, obtiene un valor que notifica si la posición del lector está al final del archivo.</summary>
        <value>
          Es <see langword="true" /> si la posición está en el final conceptual del archivo de la secuencia de nodos XAML; de lo contrario, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pueden llamar los lectores del subárbol <xref:System.Xaml.XamlReader.IsEof%2A>, con un comportamiento que refleja correctamente los límites del subárbol escrito. Para obtener más información, vea la sección "Lectores del subárbol" en <xref:System.Xaml.XamlReader>, o vea <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se implementa en una clase derivada, obtiene el miembro actual situado en la posición del lector, si la posición del lector está en un miembro <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
        <value>Miembro actual o <see langword="null" /> si el lector no se encuentra en un miembro.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pueden llamar los lectores del subárbol <xref:System.Xaml.XamlReader.Member%2A>, con restricciones de comportamiento. Para obtener más información, vea la sección "Lectores del subárbol" en <xref:System.Xaml.XamlReader>, o vea <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se implementa en una clase derivada, obtiene la información del espacio de nombres XAML del nodo actual.</summary>
        <value>Información del espacio de nombres XAML, si está disponible; de lo contrario, es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El diseño previsto de esta API es devolver un resultado no nulo solamente si la <xref:System.Xaml.XamlReader.NodeType%2A> del nodo actual es <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>. La propiedad no notifica el espacio de nombres XAML que se aplica a objetos o miembros en un sentido de ámbito general, tal y como se interpreta bajo un contexto de esquema XAML. La aplicación debe proporcionar un medio para almacenar en caché información para la actuación espacio de nombres XAML que atraviesa los nodos XAML, si necesita esa información en una forma que no sea cómo el contexto de esquema XAML lo notifica a un sistema de escritura. Consulte <xref:System.Xaml.XamlXmlReader.Namespace%2A> para las notas de la implementación de referencia.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se implementa en una clase derivada, obtiene el tipo del nodo actual.</summary>
        <value>Valor de la enumeración <see cref="T:System.Xaml.XamlNodeType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pueden llamar los lectores del subárbol <xref:System.Xaml.XamlReader.NodeType%2A>, con restricciones de comportamiento. Para obtener más información, vea la sección "Lectores del subárbol" en <xref:System.Xaml.XamlReader>, o vea <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cuando se implementa en una clase derivada, proporciona el siguiente nodo XAML del origen, si hay alguno disponible.</summary>
        <returns>
          Es <see langword="true" /> si hay un nodo disponible; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pueden llamar los lectores del subárbol <xref:System.Xaml.XamlReader.Read%2A>, con restricciones de comportamiento. Para obtener más información, vea la sección "Lectores del subárbol" en <xref:System.Xaml.XamlReader>, o vea <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un objeto <see cref="T:System.Xaml.XamlReader" /> que se basa en el objeto <see cref="T:System.Xaml.XamlReader" /> actual, donde el objeto <see cref="T:System.Xaml.XamlReader" /> devuelto se usa para recorrer en iteración un subárbol de la estructura de nodos XAML.</summary>
        <returns>Nueva instancia de lector XAML para el subárbol.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método tiene una implementación predeterminada y devuelve válido <xref:System.Xaml.XamlReader>. El valor devuelto <xref:System.Xaml.XamlReader> es una clase interna que restringe ciertas <xref:System.Xaml.XamlReader> acciones. Las restricciones son coherentes con el objetivo de leer solo un subárbol con dimensiones de un origen de mayor para un conjunto de nodos XAML y devolver el final del archivo o `null` en el nodo actual cuando se sale del subárbol.  
  
 Por lo general, debería comprobar el nodo actual de la inicial <xref:System.Xaml.XamlReader.Read%2A> para determinar si necesita un lector del subárbol. Cómo comprobar esto puede ser específico de la implementación; Sin embargo, evite crear varios lectores del subárbol para cada subárbol. Además, evite invocar un lector de subárbol para ciertos casos (por ejemplo, para <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) que no puede contener un subárbol de nodos.  
  
 Después de obtener un lector de subárbol, debe llamar a <xref:System.Xaml.XamlReader.Read%2A> en él para obtener un nodo actual (o llamar a <xref:System.Xaml.XamlReader.Skip%2A> para obtener un nodo siguiente). No obtiene automáticamente una posición inicial del nodo del lector del subárbol cuando lo crea.  
  
 El lector obtener mediante una llamada a <xref:System.Xaml.XamlReader.ReadSubtree%2A> desde este comportamiento predeterminado implementación es una clase interna. La clase interna basa su comportamiento en el <xref:System.Xaml.XamlReader> implementación que se va a utilizar cuando <xref:System.Xaml.XamlReader.ReadSubtree%2A> se llama. El propósito de la clase interna es ajustar la <xref:System.Xaml.XamlReader.Read%2A> y el comportamiento de recorrido general. El recorrido permanece en el subárbol previsto manteniendo <xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember> pares o <xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject> pares. Devuelve también correctamente `false` para <xref:System.Xaml.XamlReader.Read%2A> y `true` para <xref:System.Xaml.XamlReader.IsEof%2A> cuando el lector está al final del subárbol, tal como se define por su punto de entrada. En general, se asume que cualquier <xref:System.Xaml.XamlReader> API llame desde un lector del subárbol tiene la misma implementación que la global <xref:System.Xaml.XamlReader> excepto el comportamiento de delimitador transversal.  
  
 Sin embargo, <xref:System.Xaml.XamlReader.ReadSubtree%2A> es virtual. Por lo tanto, un determinado <xref:System.Xaml.XamlReader> implementación puede proporcionar un comportamiento que difiere de la <xref:System.Xaml.XamlReader> comportamiento de contenedor interna; y un <xref:System.Xaml.XamlReader> implementación incluso puede deshabilitar la funcionalidad de lector de subárbol devolviendo <xref:System.NotImplementedException> u otras excepciones.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se implementa en una clase derivada, obtiene un objeto que proporciona información sobre el contexto de esquema XAML del conjunto de información.</summary>
        <value>Objeto que proporciona información sobre el contexto de esquema XAML del conjunto de información.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Omite el nodo actual y avanza la posición del lector hasta el nodo siguiente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una vez se ha omitido; <xref:System.Xaml.XamlReader.Read%2A> se llama por el valor predeterminado <xref:System.Xaml.XamlReader.Skip%2A> implementación. Normalmente no se llama <xref:System.Xaml.XamlReader.Skip%2A> y <xref:System.Xaml.XamlReader.Read%2A> en secuencia.  
  
 En el valor predeterminado <xref:System.Xaml.XamlReader.Skip%2A> implementación, se llevan a cabo acciones diferentes dependiendo de qué <xref:System.Xaml.XamlReader.NodeType%2A> está actualmente en la posición del lector. Si la posición del lector está actualmente en una <xref:System.Xaml.XamlNodeType.StartMember> o <xref:System.Xaml.XamlNodeType.StartObject>, que no miembro u objeto. Para otros <xref:System.Xaml.XamlReader.NodeType%2A> valores, se realiza ninguna acción que no sea de llamar a <xref:System.Xaml.XamlReader.Read%2A> desde la posición actual.  
  
 Pueden llamar los lectores del subárbol <xref:System.Xaml.XamlReader.Skip%2A>, con restricciones de comportamiento. Para obtener más información, vea la sección "Lectores del subárbol" en <xref:System.Xaml.XamlReader>, o vea <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 El comportamiento del árbol de nodo de <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> se basa en el equivalente XML <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>. En función de la <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> equivalencia de comportamiento, <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> omite el nodo y su subárbol, no solo el nodo de entrada única.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se implementa en una clase derivada, obtiene el objeto <see cref="T:System.Xaml.XamlType" /> del nodo actual.</summary>
        <value>Objeto <see cref="T:System.Xaml.XamlType" /> del nodo actual o <see langword="null" /> si la posición actual del lector no se encuentra en un objeto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pueden llamar los lectores del subárbol <xref:System.Xaml.XamlReader.Type%2A>, con restricciones de comportamiento. Para obtener más información, vea la sección "Lectores del subárbol" en <xref:System.Xaml.XamlReader>, o vea <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cuando se implementa en una clase derivada, obtiene el valor del nodo actual.</summary>
        <value>Valor del nodo actual o <see langword="null" /> si la posición actual del lector no se encuentra en un tipo de nodo <see cref="F:System.Xaml.XamlNodeType.Value" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>