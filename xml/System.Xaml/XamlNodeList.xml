<Type Name="XamlNodeList" FullName="System.Xaml.XamlNodeList">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="47860c743db4d9177552548ada312d4a1080183c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39762777" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XamlNodeList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlNodeList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlNodeList" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlNodeList" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlNodeList" />
  <TypeSignature Language="F#" Value="type XamlNodeList = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona una lista de nodos XAML, que se pueden usar en escenarios tales como la escritura de nodos XAML de manera aplazada.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando creas un <xref:System.Xaml.XamlNodeList>, se crea un delegado de sistema de escritura que existe como el <xref:System.Xaml.XamlNodeList.Writer%2A> valor. El delegado de sistema de escritura se basa en una clase de sistema de escritura XAML interna que es específicamente para los nodos XAML.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlNodeQueue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlNodeList" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlNodeList (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlNodeList(System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlNodeList : System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlNodeList" Usage="new System.Xaml.XamlNodeList schemaContext" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext">Contexto de esquema que se va a usar para las operaciones con los nodos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlNodeList" /> usando un contexto de esquema especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se aplica el contexto de esquema para el sistema de escritura XAML que existe como el <xref:System.Xaml.XamlNodeList.Writer%2A> valor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaContext" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlNodeList (System.Xaml.XamlSchemaContext schemaContext, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext, size As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlNodeList(System::Xaml::XamlSchemaContext ^ schemaContext, int size);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlNodeList : System.Xaml.XamlSchemaContext * int -&gt; System.Xaml.XamlNodeList" Usage="new System.Xaml.XamlNodeList (schemaContext, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="schemaContext">Contexto de esquema que se va a usar para las operaciones con los nodos.</param>
        <param name="size">Número de elementos que puede contener la lista.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Xaml.XamlNodeList" /> utilizando el contexto de esquema y el tamaño de lista especificados.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="schemaContext" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlNodeList.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="xamlNodeList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Borra los elementos de esta lista.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método llama a `Clear` en la implementación de la lista subyacente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlNodeList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Xaml.XamlNodeList.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de nodos de este objeto <see cref="T:System.Xaml.XamlNodeList" />.</summary>
        <value>Número de elementos de este objeto <see cref="T:System.Xaml.XamlNodeList" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReader">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlReader GetReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlReader GetReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlNodeList.GetReader" />
      <MemberSignature Language="VB.NET" Value="Public Function GetReader () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlReader ^ GetReader();" />
      <MemberSignature Language="F#" Value="member this.GetReader : unit -&gt; System.Xaml.XamlReader" Usage="xamlNodeList.GetReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un delegado de la implementación de lector XAML.</summary>
        <returns>Delegado de la implementación de lector XAML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aunque no es específicamente un proveedor de servicios, puede usar el <xref:System.Xaml.XamlReader> delegado que se devuelve desde <xref:System.Xaml.XamlNodeList.GetReader%2A?displayProperty=nameWithType> en un modo de servicio en la que convertir a <xref:System.Xaml.IXamlIndexingReader>. En ese modo puede obtener y establecer los valores de índice para <xref:System.Xaml.IXamlIndexingReader.CurrentIndex%2A?displayProperty=nameWithType>. De esta manera, el modo del conjunto habilita la omisión de los nodos sin usar el estándar `Read` y `Skip`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlException">
          <see cref="T:System.Xaml.XamlNodeList" /> está todavía en modo de escritura.  
  
O bien 
El sistema de escritura que se usa para obtener la lista de nodos no tiene ningún contexto de esquema.</exception>
      </Docs>
    </Member>
    <Member MemberName="Writer">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlWriter Writer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlWriter Writer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlNodeList.Writer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Writer As XamlWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlWriter ^ Writer { System::Xaml::XamlWriter ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Writer : System.Xaml.XamlWriter" Usage="System.Xaml.XamlNodeList.Writer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el sistema de escritura XAML asociado.</summary>
        <value>Sistema de escritura XAML asociado.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xaml.XamlObjectWriter" />
      </Docs>
    </Member>
  </Members>
</Type>