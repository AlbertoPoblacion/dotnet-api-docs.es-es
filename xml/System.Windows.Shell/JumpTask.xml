<Type Name="JumpTask" FullName="System.Windows.Shell.JumpTask">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="72ea038bfacc9fec6529a315bec4aedb2ba7c98b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36464468" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class JumpTask : System.Windows.Shell.JumpItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JumpTask extends System.Windows.Shell.JumpItem" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Shell.JumpTask" />
  <TypeSignature Language="VB.NET" Value="Public Class JumpTask&#xA;Inherits JumpItem" />
  <TypeSignature Language="C++ CLI" Value="public ref class JumpTask : System::Windows::Shell::JumpItem" />
  <TypeSignature Language="F#" Value="type JumpTask = class&#xA;    inherit JumpItem" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Shell.JumpItem</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un acceso directo a una aplicación en la Jump list de la barra de tareas de Windows 7.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Windows.Shell.JumpTask> puede considerarse como un acceso directo a una aplicación. Especifique la ruta de acceso al archivo ejecutable estableciendo la <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> propiedad. Si el <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> no está establecido, la ruta de acceso del proceso en ejecución actual está implícita. Opcionalmente, puede especificar <xref:System.Windows.Shell.JumpTask.Arguments%2A> para pasar a la aplicación en el inicio.  
  
 Puede establecer las propiedades de presentación básicas, como <xref:System.Windows.Shell.JumpTask.Title%2A>, <xref:System.Windows.Shell.JumpTask.Description%2A>, y <xref:System.Windows.Shell.JumpTask.IconResourcePath%2A> para especificar la apariencia de la tarea en la Jump List. Un icono que se utiliza con un <xref:System.Windows.Shell.JumpTask> debe estar disponible como un recurso nativo. Si varios recursos del icono están disponibles en un archivo ejecutable o DLL, especifique desea usar indicando un desplazamiento en el <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propiedad.  
  
 De forma predeterminada, un <xref:System.Windows.Shell.JumpTask> se colocarán en el **tareas** categoría de la Jump List. Puede especificar un grupo personalizado de tareas estableciendo la <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> propiedad.  
  
 Puede separar visualmente los elementos de una Jump List creando un <xref:System.Windows.Shell.JumpTask> que no tiene un <xref:System.Windows.Shell.JumpTask.Title%2A> y <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> especificado. Este vacío <xref:System.Windows.Shell.JumpTask> se mostrará como una línea horizontal en la Jump List. En este caso, se pueden establecer otras propiedades, pero no tendrá ningún efecto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo declarar un <xref:System.Windows.Shell.JumpTask> en el marcado. El <xref:System.Windows.Shell.JumpTask> abre un archivo de texto denominado `readme.txt` en la aplicación en el Bloc de notas.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 En el ejemplo siguiente se muestra cómo configurar un <xref:System.Windows.Shell.JumpTask> en el código. El <xref:System.Windows.Shell.JumpTask> se abre la aplicación Calculadora.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Shell.JumpPath" />
    <altmember cref="T:System.Windows.Shell.JumpList" />
    <altmember cref="E:System.Windows.Shell.JumpList.JumpItemsRejected" />
    <altmember cref="E:System.Windows.Application.Startup" />
    <altmember cref="P:System.Windows.StartupEventArgs.Args" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JumpTask ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Shell.JumpTask.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JumpTask();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Shell.JumpTask" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPath : string with get, set" Usage="System.Windows.Shell.JumpTask.ApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso a la aplicación.</summary>
        <value>Ruta de acceso a la aplicación. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Windows.Shell.JumpTask.ApplicationPath%2A> no se especifica la propiedad, a continuación, la ruta de acceso del proceso en ejecución actual está implícita. Una aplicación puede contener tareas para los archivos ejecutables que no es él.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo declarar un <xref:System.Windows.Shell.JumpTask> en el marcado. El <xref:System.Windows.Shell.JumpTask> abre un archivo de texto denominado `readme.txt` en la aplicación en el Bloc de notas.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 En el ejemplo siguiente se muestra cómo configurar un <xref:System.Windows.Shell.JumpTask> en el código. El <xref:System.Windows.Shell.JumpTask> se abre la aplicación Calculadora.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public string Arguments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Arguments" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Arguments" />
      <MemberSignature Language="VB.NET" Value="Public Property Arguments As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Arguments { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Arguments : string with get, set" Usage="System.Windows.Shell.JumpTask.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece los argumentos que se pasan a la aplicación al iniciarse.</summary>
        <value>Argumentos que se pasan a la aplicación al iniciarse. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo declarar un <xref:System.Windows.Shell.JumpTask> en el marcado. El <xref:System.Windows.Shell.JumpTask> abre un archivo de texto denominado `readme.txt` en la aplicación en el Bloc de notas.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Application.Startup" />
        <altmember cref="P:System.Windows.StartupEventArgs.Args" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.Windows.Shell.JumpTask.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto que se muestra en la información sobre herramientas correspondiente a la tarea en la Jump list.</summary>
        <value>Texto que se muestra en la información sobre herramientas correspondiente a la tarea. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo declarar un <xref:System.Windows.Shell.JumpTask> en el marcado. El <xref:System.Windows.Shell.JumpTask> abre un archivo de texto denominado `readme.txt` en la aplicación en el Bloc de notas.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 En el ejemplo siguiente se muestra cómo configurar un <xref:System.Windows.Shell.JumpTask> en el código. El <xref:System.Windows.Shell.JumpTask> se abre la aplicación Calculadora.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IconResourceIndex">
      <MemberSignature Language="C#" Value="public int IconResourceIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 IconResourceIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourceIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int IconResourceIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourceIndex : int with get, set" Usage="System.Windows.Shell.JumpTask.IconResourceIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el índice de base cero de un icono incrustado en un recurso.</summary>
        <value>Índice de base cero del icono o -1 si no se usa ningún icono. El valor predeterminado es 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un icono que se utiliza con un <xref:System.Windows.Shell.JumpTask> debe estar disponible como un recurso nativo. Si varios iconos están disponibles en un archivo ejecutable o DLL, especifique desea usar indicando un desplazamiento en el <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propiedad.  
  
 Si no se especifica ningún recurso de icono, o si no se encuentra el icono especificado, se muestra el icono de sistema estándar. Para especificar que no se muestra ningún icono, establezca el <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propiedad en -1.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo declarar un <xref:System.Windows.Shell.JumpTask> en el marcado. El <xref:System.Windows.Shell.JumpTask> abre un archivo de texto denominado `readme.txt` en la aplicación en el Bloc de notas.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      </Docs>
    </Member>
    <Member MemberName="IconResourcePath">
      <MemberSignature Language="C#" Value="public string IconResourcePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IconResourcePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberSignature Language="VB.NET" Value="Public Property IconResourcePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IconResourcePath { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IconResourcePath : string with get, set" Usage="System.Windows.Shell.JumpTask.IconResourcePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece la ruta de acceso a un recurso que contiene el icono que se va a mostrar en la Jump list.</summary>
        <value>Ruta de acceso a un recurso que contiene el icono. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un icono que se utiliza con un <xref:System.Windows.Shell.JumpTask> debe estar disponible como un recurso nativo. Si varios iconos están disponibles en un archivo ejecutable o DLL, especifique desea usar indicando un desplazamiento en el <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propiedad.  
  
 Si no se especifica ningún recurso de icono, o si no se encuentra el icono especificado, se muestra el icono de sistema estándar. Para especificar que no se muestra ningún icono, establezca el <xref:System.Windows.Shell.JumpTask.IconResourceIndex%2A> propiedad en -1.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo declarar un <xref:System.Windows.Shell.JumpTask> en el marcado. El <xref:System.Windows.Shell.JumpTask> abre un archivo de texto denominado `readme.txt` en la aplicación en el Bloc de notas.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 En el ejemplo siguiente se muestra cómo configurar un <xref:System.Windows.Shell.JumpTask> en el código. El <xref:System.Windows.Shell.JumpTask> se abre la aplicación Calculadora.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Shell.JumpTask.IconResourceIndex" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Shell.JumpTask.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el texto que se muestra para la tarea en la Jump list.</summary>
        <value>Texto que se muestra para la tarea en la Jump list. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, el <xref:System.Windows.Shell.JumpTask.Title%2A> propiedad debe establecerse para el <xref:System.Windows.Shell.JumpTask> que aparezca en la Jump List como una tarea seleccionable.  
  
 Como alternativa, puede separar visualmente elementos de una Jump List creando un <xref:System.Windows.Shell.JumpTask> que no tiene un <xref:System.Windows.Shell.JumpTask.Title%2A> y <xref:System.Windows.Shell.JumpItem.CustomCategory%2A> especificado. Este vacío <xref:System.Windows.Shell.JumpTask> se mostrará como una línea horizontal en la Jump List. En este caso, se pueden establecer otras propiedades, pero no tendrá ningún efecto.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo declarar un <xref:System.Windows.Shell.JumpTask> en el marcado. El <xref:System.Windows.Shell.JumpTask> abre un nombre de archivo de texto `readme.txt` en la aplicación en el Bloc de notas.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 En el ejemplo siguiente se muestra cómo configurar un <xref:System.Windows.Shell.JumpTask> en el código. El <xref:System.Windows.Shell.JumpTask> se abre la aplicación Calculadora.  
  
 [!code-csharp[Shell_JumpListSample#241](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/mainwindow.xaml.cs#241)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingDirectory">
      <MemberSignature Language="C#" Value="public string WorkingDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkingDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property WorkingDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkingDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WorkingDirectory : string with get, set" Usage="System.Windows.Shell.JumpTask.WorkingDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el directorio de trabajo de la aplicación al iniciarse.</summary>
        <value>Directorio de trabajo de la aplicación al iniciarse. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se muestra cómo declarar un <xref:System.Windows.Shell.JumpTask> en el marcado. El <xref:System.Windows.Shell.JumpTask> abre un archivo de texto denominado `readme.txt` en la aplicación en el Bloc de notas.  
  
 [!code-xaml[Shell_JumpListSample#002](~/samples/snippets/csharp/VS_Snippets_Wpf/shell_jumplistsample/cs/app.xaml#002)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>