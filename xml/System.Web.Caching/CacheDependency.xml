<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CacheDependency.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5971848a65c6d20655c657ffc94cd2e88f373bb0d.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">971848a65c6d20655c657ffc94cd2e88f373bb0d</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.Caching.CacheDependency">
          <source>Establishes a dependency relationship between an item stored in an ASP.NET application's <ph id="ph1">&lt;see cref="T:System.Web.Caching.Cache" /&gt;</ph> object and a file, cache key, an array of either, or another <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object.</source>
          <target state="translated">Establece una relación de dependencia entre un elemento almacenado en un objeto <ph id="ph1">&lt;see cref="T:System.Web.Caching.Cache" /&gt;</ph> de aplicación ASP.NET y un archivo, una clave de caché, una matriz de cualquiera u otro <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Web.Caching.CacheDependency">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class monitors the dependency relationships so that when any of them changes, the cached item will be automatically removed.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> supervisa las relaciones de dependencia para que cuando cualquiera de ellas cambie, el elemento almacenado en caché se quite automáticamente.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>If you add an item to the cache that is dependent on another object, such as a file or array of files, the dependent item is automatically removed from the cache when the object changes.</source>
          <target state="translated">Si agrega un elemento a la memoria caché que depende de otro objeto, como un archivo o una matriz de archivos, el elemento dependiente se quita automáticamente de la memoria caché cuando cambia el objeto.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>For example, suppose you create a <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> object based on data in an XML file.</source>
          <target state="translated">Por ejemplo, suponga que crea un <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> objeto basado en datos en un archivo XML.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>You can add the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> to the cache with a <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object that makes the <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> dependent on the XML file.</source>
          <target state="translated">Puede agregar el <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> a la caché con un <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto que hace que el <ph id="ph3">&lt;xref:System.Data.DataSet&gt;</ph> dependientes en el archivo XML.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>If the XML file changes, the <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> is removed from the cache.</source>
          <target state="translated">Si cambia el archivo XML, el <ph id="ph1">&lt;xref:System.Data.DataSet&gt;</ph> se quita de la memoria caché.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>You can add items with dependencies to your application's cache with the <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Add%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated">Puede agregar elementos con dependencias en memoria caché de la aplicación con el <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Add%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>You cannot use the <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Item%2A&gt;</ph> property to add items to the cache with dependencies.</source>
          <target state="translated">No se puede utilizar el <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Item%2A&gt;</ph> propiedad para agregar elementos a la memoria caché con dependencias.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>To set up a dependency, you create an instance of the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class, specifying the files, keys, or directories on which the item is dependent, and then pass the dependency to the <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Add%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para configurar una dependencia, cree una instancia de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> de la clase, especificar los archivos, claves o directorios en los que depende el elemento, y, a continuación, pasar la dependencia a la <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Add%2A&gt;</ph> o <ph id="ph3">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> instance can represent a single file or directory, an array of files or directories, or an array of files or directories along with an array of cache keys (these represent other items stored in the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> object).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> instancia puede representar un único archivo o directorio, una matriz de archivos o directorios o una matriz de archivos o directorios junto con una matriz de claves de caché (que representan otros elementos almacenados en la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> objeto).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.HasChanged%2A&gt;</ph> property to determine whether a <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> changed since the previous request for an item in the <ph id="ph3">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.HasChanged%2A&gt;</ph> propiedad para determinar si un <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> cambiado desde la solicitud anterior para un elemento de la <ph id="ph3">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.Caching.CacheDependency">
          <source>The <ph id="ph1">`dt`</ph> value passed in the <ph id="ph2">`start`</ph> parameter is set to <ph id="ph3">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">`dt`</ph> valor pasado en el <ph id="ph2">`start`</ph> parámetro está establecido en <ph id="ph3">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="T:System.Web.Caching.CacheDependency">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor">
          <source>If you want to derive your own class from <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph>, implement this version of the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Si desea derivar su propia clase de <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph>, implementar esta versión de la <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.%23ctor%2A&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor">
          <source>The following code example is a class that implements this version of the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> constructor as all classes that derive from <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> are required to.</source>
          <target state="translated">El siguiente ejemplo de código es una clase que implementa esta versión de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> constructor como todas las clases que derivan de <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> deben.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>The path to a file or directory that the cached object is dependent upon.</source>
          <target state="translated">Ruta a un archivo o directorio del que depende el objeto en caché.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>When this resource changes, the cached object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia este recurso, el objeto almacenado en caché queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that monitors a file or directory for changes.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> que supervisa un archivo o directorio en lo que se refiere a los cambios.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>If the directory or file specified in the <ph id="ph1">`filename`</ph> parameter is not found in the file system, it will be treated as missing.</source>
          <target state="translated">Si el archivo o directorio especificado en el <ph id="ph1">`filename`</ph> parámetro no se encuentra en el sistema de archivos, se tratará como si estuvieran ausentes.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>If the directory or file is missing when the object with the dependency is added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, the cached object will be removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> when the directory or file is created.</source>
          <target state="translated">Si falta el archivo o directorio cuando se agrega el objeto con la dependencia a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, se quitará el objeto almacenado en caché la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> cuando se crea el archivo o directorio.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>For example, assume that you add an object to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on the following file path: c:\stocks\xyz.dat.</source>
          <target state="translated">Por ejemplo, supongamos que agrega un objeto a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en la siguiente ruta de acceso de archivo: c:\stocks\xyz.dat.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>If that file is not found when the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</source>
          <target state="translated">Si no se encuentra ese archivo cuando la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto se crea, pero se crea más adelante, el objeto almacenado en caché se quita tras la creación del archivo xyz.dat.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>The following code example creates an instance of the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class with a dependency on an XML file.</source>
          <target state="translated">En el ejemplo de código siguiente se crea una instancia de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> clase con una dependencia en un archivo XML.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> method then adds an item to the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> that is dependent upon that file.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> método, a continuación, agrega un elemento a la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> que depende de si dicho archivo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String)">
          <source>You can also use the following technique to add an item to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on a file.</source>
          <target state="translated">También puede utilizar la siguiente técnica para agregar un elemento a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en un archivo.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>An array of paths (to files or directories) that the cached object is dependent upon.</source>
          <target state="translated">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that monitors an array of paths (to files or directories) for changes.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios).</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>If any of the files or directories in the array changes or is removed from the array, the cached item becomes obsolete and is removed from the application's <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> object.</source>
          <target state="translated">Si alguno de los archivos o directorios de la matriz cambia o quita de la matriz, el elemento almacenado en caché queda obsoleto y se quita de la aplicación <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>Also, if any of the directories or files specified in the <ph id="ph1">`filenames`</ph> parameter is not found in the file system, it is treated as missing.</source>
          <target state="translated">Además, si alguno de los directorios o archivos especificados en la <ph id="ph1">`filenames`</ph> parámetro no se encuentra en el sistema de archivos, se trata como si estuvieran ausentes.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>If a directory or file is missing when the object with the dependency is added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, the cached object will be removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> when that directory or file is created.</source>
          <target state="translated">Si falta un directorio o archivo cuando el objeto con la dependencia se agrega a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, se quitará el objeto almacenado en caché la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> cuando se crea ese directorio o archivo.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>For example, assume that you add an object to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on the following file path: c:\stocks\xyz.dat.</source>
          <target state="translated">Por ejemplo, supongamos que agrega un objeto a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en la siguiente ruta de acceso de archivo: c:\stocks\xyz.dat.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>If that file is not found when the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</source>
          <target state="translated">Si no se encuentra ese archivo cuando la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto se crea, pero se crea más adelante, el objeto almacenado en caché se quita tras la creación del archivo xyz.dat.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>When you create the array that contains the file dependencies, you must define the number of files that the item you are adding to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> is dependent on.</source>
          <target state="translated">Cuando se crea la matriz que contiene las dependencias de archivo, debe definir el número de archivos que el elemento va a agregar a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> depende.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> method to add an item to the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> with dependencies on an array of files.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> método para agregar un elemento a la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> con dependencias en una matriz de archivos.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[])">
          <source>You can also make the item dependent on an array of directories.</source>
          <target state="translated">También puede hacer el elemento dependiente de una matriz de directorios.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>The path to a file or directory that the cached object is dependent upon.</source>
          <target state="translated">Ruta a un archivo o directorio del que depende el objeto en caché.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>When this resource changes, the cached object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia este recurso, el objeto almacenado en caché queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>The time against which to check the last modified date of the directory or file.</source>
          <target state="translated">Hora que se utilizará como referencia para comprobar la fecha de última modificación del directorio o archivo.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that monitors a file or directory for changes.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> que supervisa un archivo o directorio en lo que se refiere a los cambios.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>If the directory or file specified in the <ph id="ph1">`filename`</ph> parameter is not found in the file system, it will be treated as missing.</source>
          <target state="translated">Si el archivo o directorio especificado en el <ph id="ph1">`filename`</ph> parámetro no se encuentra en el sistema de archivos, se tratará como si estuvieran ausentes.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>If the directory or file is missing when the object with the dependency is added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, the cached object will be removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> when the directory or file is created.</source>
          <target state="translated">Si falta el archivo o directorio cuando se agrega el objeto con la dependencia a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, se quitará el objeto almacenado en caché la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> cuando se crea el archivo o directorio.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>For example, assume that you add an object to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on the following file path: c:\stocks\xyz.dat.</source>
          <target state="translated">Por ejemplo, supongamos que agrega un objeto a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en la siguiente ruta de acceso de archivo: c:\stocks\xyz.dat.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>If that file is not found when the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</source>
          <target state="translated">Si no se encuentra ese archivo cuando la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto se crea, pero se crea más adelante, el objeto almacenado en caché se quita tras la creación del archivo xyz.dat.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>Change tracking begins immediately and is not directly based on the <ph id="ph1">`start`</ph> parameter.</source>
          <target state="translated">Seguimiento de cambios se inicia de inmediato y no se basa directamente en el <ph id="ph1">`start`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>Use the <ph id="ph1">`start`</ph> parameter to pass a date and time in the past against which you want to check the last modified date of the directory or file passed in the <ph id="ph2">`filename`</ph> parameter.</source>
          <target state="translated">Use la <ph id="ph1">`start`</ph> parámetro que se pasa una fecha y hora en el pasado con el que desea comprobar la última fecha de modificación del directorio o archivo que se han pasado la <ph id="ph2">`filename`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>If the last modified date is later than the date and time set passed in the <ph id="ph1">`start`</ph> parameter, the cached item is removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">Si modifica la última fecha es posterior a la fecha y tiempo establecido pasa en el <ph id="ph1">`start`</ph> parámetro, se quita el elemento almacenado en caché de la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>The following code example uses this constructor to instantiate a <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object, then inserts an item into the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> with that dependency.</source>
          <target state="translated">En el ejemplo de código siguiente se utiliza este constructor para crear una instancia de un <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto, a continuación, inserta un elemento en el <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> con esa dependencia.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)">
          <source>The <ph id="ph1">`dt`</ph> value passed in the <ph id="ph2">`start`</ph> parameter is set to <ph id="ph3">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">`dt`</ph> valor pasado en el <ph id="ph2">`start`</ph> parámetro está establecido en <ph id="ph3">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>An array of paths (to files or directories) that the cached object is dependent upon.</source>
          <target state="translated">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>The time against which to check the last modified date of the objects in the array.</source>
          <target state="translated">Hora que se utilizará como referencia para comprobar la fecha de última modificación de los objetos de la matriz.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that monitors an array of paths (to files or directories) for changes and specifies a time when change monitoring begins.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios) y especifica la hora a la que comienza la supervisión de cambios.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>If any of the directories or files specified in the <ph id="ph1">`filenames`</ph> parameter is not found in the file system, it is treated as missing.</source>
          <target state="translated">Si alguno de los directorios o archivos especificados en la <ph id="ph1">`filenames`</ph> parámetro no se encuentra en el sistema de archivos, se trata como si estuvieran ausentes.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>If a directory or file is missing when the object with the dependency is added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, the cached object will be removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> when that directory or file is created.</source>
          <target state="translated">Si falta un directorio o archivo cuando el objeto con la dependencia se agrega a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, se quitará el objeto almacenado en caché la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> cuando se crea ese directorio o archivo.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>For example, assume that you add an object to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on the following file path: c:\stocks\xyz.dat.</source>
          <target state="translated">Por ejemplo, supongamos que agrega un objeto a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en la siguiente ruta de acceso de archivo: c:\stocks\xyz.dat.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>If that file is not found when the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</source>
          <target state="translated">Si no se encuentra ese archivo cuando la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto se crea, pero se crea más adelante, el objeto almacenado en caché se quita tras la creación del archivo xyz.dat.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>Change tracking begins immediately and is not directly based on the <ph id="ph1">`start`</ph> parameter.</source>
          <target state="translated">Seguimiento de cambios se inicia de inmediato y no se basa directamente en el <ph id="ph1">`start`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>Use the <ph id="ph1">`start`</ph> parameter to pass a date and time in the past against which you want to check the last modified date of the array passed in the <ph id="ph2">`filenames`</ph> parameter.</source>
          <target state="translated">Use la <ph id="ph1">`start`</ph> parámetro que se pasa una fecha y hora en el pasado con el que desea comprobar la fecha última modificación de la matriz pasado en el <ph id="ph2">`filenames`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>If the last modified date of any object in the array is later than the date and time set passed in the <ph id="ph1">`start`</ph> parameter, the cached item is removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">Si modifica la última fecha de cualquier objeto de la matriz es posterior a la fecha y tiempo establecido pasa en el <ph id="ph1">`start`</ph> parámetro, se quita el elemento almacenado en caché de la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object that passes two XML files and a <ph id="ph2">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph> value when the object is included as a parameter argument in an <ph id="ph3">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> method call.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto que pasa dos archivos XML y un <ph id="ph2">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph> valor cuando el objeto se incluye como un argumento de parámetro en un <ph id="ph3">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> llamada al método.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>An array of paths (to files or directories) that the cached object is dependent upon.</source>
          <target state="translated">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>An array of cache keys that the new object monitors for changes.</source>
          <target state="translated">Matriz de claves de caché que el nuevo objeto supervisa por si hay cambios.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguna de estas claves de caché, el objeto almacenado en caché asociado a este objeto de dependencia queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios), en una matriz de claves de caché o en ambas.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>Also, if any of the directories or files specified in the <ph id="ph1">`filenames`</ph> parameter is not found in the file system, it is treated as missing.</source>
          <target state="translated">Además, si alguno de los directorios o archivos especificados en la <ph id="ph1">`filenames`</ph> parámetro no se encuentra en el sistema de archivos, se trata como si estuvieran ausentes.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>If a directory or file is missing when the object with the dependency is added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, the cached object will be removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> when that directory or file is created.</source>
          <target state="translated">Si falta un directorio o archivo cuando el objeto con la dependencia se agrega a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, se quitará el objeto almacenado en caché la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> cuando se crea ese directorio o archivo.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>For example, assume that you add an object to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on the following file path: c:\stocks\xyz.dat.</source>
          <target state="translated">Por ejemplo, supongamos que agrega un objeto a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en la siguiente ruta de acceso de archivo: c:\stocks\xyz.dat.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>If that file is not found when the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</source>
          <target state="translated">Si no se encuentra ese archivo cuando la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto se crea, pero se crea más adelante, el objeto almacenado en caché se quita tras la creación del archivo xyz.dat.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>However, the <ph id="ph1">`cachekeys`</ph> dependency does not work the same way.</source>
          <target state="translated">Sin embargo, la <ph id="ph1">`cachekeys`</ph> dependencia no funciona del mismo modo.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>If at least one value in the <ph id="ph1">`cachekeys`</ph> parameter does not exist at the time of an insert, the insert fails.</source>
          <target state="translated">Si al menos un valor en el <ph id="ph1">`cachekeys`</ph> parámetro no existe en el momento de una instrucción insert, se produce un error en la inserción.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>Note that there is no exception thrown for this scenario.</source>
          <target state="translated">Tenga en cuenta que no hay ninguna excepción para este escenario.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>The following code fragment demonstrates how to insert an item into your application's <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on a key to another item placed in the cache.</source>
          <target state="translated">El fragmento de código siguiente muestra cómo insertar un elemento en la aplicación <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en una clave a otro elemento se coloca en la memoria caché.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])">
          <source>Since this method uses array syntax, you must define the number of keys on which the item you are adding to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> is dependent.</source>
          <target state="translated">Puesto que este método utiliza una sintaxis de matriz, debe definir el número de claves en el que el elemento va a agregar a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> es dependiente.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>An array of paths (to files or directories) that the cached object is dependent upon.</source>
          <target state="translated">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>An array of cache keys that the new object monitors for changes.</source>
          <target state="translated">Matriz de claves de caché que el nuevo objeto supervisa por si hay cambios.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguna de estas claves de caché, el objeto almacenado en caché asociado a este objeto de dependencia queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>The date and time against which to check the last modified date of the objects passed in the <bpt id="p1">&lt;c&gt;</bpt>filenames<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>cachekeys<ept id="p2">&lt;/c&gt;</ept> arrays.</source>
          <target state="translated">Fecha y hora que se utilizarán como referencia para comprobar la fecha de última modificación de los objetos pasados en las matrices <bpt id="p1">&lt;c&gt;</bpt>filenames<ept id="p1">&lt;/c&gt;</ept> y <bpt id="p2">&lt;c&gt;</bpt>cachekeys<ept id="p2">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios), en una matriz de claves de caché o en ambas.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>Also, if any of the directories or files specified in the <ph id="ph1">`filenames`</ph> parameter is not found in the file system, it is treated as missing.</source>
          <target state="translated">Además, si alguno de los directorios o archivos especificados en la <ph id="ph1">`filenames`</ph> parámetro no se encuentra en el sistema de archivos, se trata como si estuvieran ausentes.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>If a directory or file is missing when the object with the dependency is added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, the cached object will be removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> when that directory or file is created.</source>
          <target state="translated">Si falta un directorio o archivo cuando el objeto con la dependencia se agrega a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, se quitará el objeto almacenado en caché la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> cuando se crea ese directorio o archivo.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>For example, assume that you add an object to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on the following file path: c:\stocks\xyz.dat.</source>
          <target state="translated">Por ejemplo, supongamos que agrega un objeto a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en la siguiente ruta de acceso de archivo: c:\stocks\xyz.dat.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>If that file is not found when the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</source>
          <target state="translated">Si no se encuentra ese archivo cuando la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto se crea, pero se crea más adelante, el objeto almacenado en caché se quita tras la creación del archivo xyz.dat.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>However, the <ph id="ph1">`cachekeys`</ph> dependency does not work the same way.</source>
          <target state="translated">Sin embargo, la <ph id="ph1">`cachekeys`</ph> dependencia no funciona del mismo modo.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>If at least one value in the <ph id="ph1">`cachekeys`</ph> parameter does not exist at the time of an insert, the insert fails.</source>
          <target state="translated">Si al menos un valor en el <ph id="ph1">`cachekeys`</ph> parámetro no existe en el momento de una instrucción insert, se produce un error en la inserción.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>Note that there is no exception thrown for this scenario.</source>
          <target state="translated">Tenga en cuenta que no hay ninguna excepción para este escenario.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>Change tracking begins immediately and is not directly based on the <ph id="ph1">`start`</ph> parameter.</source>
          <target state="translated">Seguimiento de cambios se inicia de inmediato y no se basa directamente en el <ph id="ph1">`start`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>Use the <ph id="ph1">`start`</ph> parameter to pass a date and time in the past against which you want to check the last modified date of any object passed in the <ph id="ph2">`filenames`</ph> or <ph id="ph3">`cachekeys`</ph> parameters.</source>
          <target state="translated">Use la <ph id="ph1">`start`</ph> parámetro que se pasa una fecha y hora en el pasado con el que desea comprobar la fecha última modificación de cualquier objeto que se pasa en el <ph id="ph2">`filenames`</ph> o <ph id="ph3">`cachekeys`</ph> parámetros.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>If the last modified date of any of those objects is later than the date and time set passed in the <ph id="ph1">`start`</ph> parameter, the cached item is removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">Si modifica la última fecha de cualquiera de esos objetos es posterior a la fecha y tiempo establecido pasa en el <ph id="ph1">`start`</ph> parámetro, se quita el elemento almacenado en caché de la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>The following code example creates a <ph id="ph1">`CreateDependency`</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un <ph id="ph1">`CreateDependency`</ph> método.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>When this method is called, it creates a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> object and the <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType&gt;</ph> property is used to add an item to the cache with a <ph id="ph3">`key`</ph> parameter of <ph id="ph4">`key1`</ph> and a value of <ph id="ph5">`Value 1`</ph>.</source>
          <target state="translated">Cuando se llama a este método, se crea un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> objeto y el <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType&gt;</ph> propiedad se utiliza para agregar un elemento a la memoria caché con un <ph id="ph3">`key`</ph> parámetro de <ph id="ph4">`key1`</ph> y un valor de <ph id="ph5">`Value 1`</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>An array of strings, <ph id="ph1">`dependencyKey`</ph>, is then created with the value of <ph id="ph2">`key1`</ph> as well.</source>
          <target state="translated">Una matriz de cadenas, <ph id="ph1">`dependencyKey`</ph>, a continuación, se crea con el valor de <ph id="ph2">`key1`</ph> también.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>This <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> constructor then instantiates a <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object that passes <ph id="ph3">`dependencyKey`</ph> and the <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> object as parameter arguments.</source>
          <target state="translated">Esto <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> , a continuación, crea una instancia de constructor un <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto que pasa <ph id="ph3">`dependencyKey`</ph> y <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> objeto como argumentos de parámetro.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> method is called next, using the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object as a parameter.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> es llamar al método a continuación, mediante el <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto como parámetro.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
          <source>This makes the object added to the cache using the <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A&gt;</ph> method dependent on the <ph id="ph2">`key1`</ph> key.</source>
          <target state="translated">Esto hace que el objeto agregado a la memoria caché con el <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A&gt;</ph> método depende de la <ph id="ph2">`key1`</ph> clave.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>An array of paths (to files or directories) that the cached object is dependent upon.</source>
          <target state="translated">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>An array of cache keys that the new object monitors for changes.</source>
          <target state="translated">Matriz de claves de caché que el nuevo objeto supervisa por si hay cambios.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguna de estas claves de caché, el objeto almacenado en caché asociado a este objeto de dependencia queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>Another instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that this instance is dependent upon.</source>
          <target state="translated">Otra instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> de la que esta instancia es dependiente.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios), en una matriz de claves de caché o en ambas.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>It also makes itself dependent upon a separate instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class.</source>
          <target state="translated">También pasa a convertirse en dependiente en una instancia aparte de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>Also, if any of the directories or files specified in the <ph id="ph1">`filenames`</ph> parameter is not found in the file system, it is treated as missing.</source>
          <target state="translated">Además, si alguno de los directorios o archivos especificados en la <ph id="ph1">`filenames`</ph> parámetro no se encuentra en el sistema de archivos, se trata como si estuvieran ausentes.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>If a directory or file is missing when the object with the dependency is added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, the cached object will be removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> when that directory or file is created.</source>
          <target state="translated">Si falta un directorio o archivo cuando el objeto con la dependencia se agrega a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, se quitará el objeto almacenado en caché la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> cuando se crea ese directorio o archivo.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>For example, assume that you add an object to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on the following file path: c:\stocks\xyz.dat.</source>
          <target state="translated">Por ejemplo, supongamos que agrega un objeto a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en la siguiente ruta de acceso de archivo: c:\stocks\xyz.dat.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>If that file is not found when the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</source>
          <target state="translated">Si no se encuentra ese archivo cuando la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto se crea, pero se crea más adelante, el objeto almacenado en caché se quita tras la creación del archivo xyz.dat.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>However, the <ph id="ph1">`cachekeys`</ph> dependency does not work the same way.</source>
          <target state="translated">Sin embargo, la <ph id="ph1">`cachekeys`</ph> dependencia no funciona del mismo modo.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>If at least one value in the <ph id="ph1">`cachekeys`</ph> parameter does not exist at the time of an insert, the insert fails.</source>
          <target state="translated">Si al menos un valor en el <ph id="ph1">`cachekeys`</ph> parámetro no existe en el momento de una instrucción insert, se produce un error en la inserción.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>Note that there is no exception thrown for this scenario.</source>
          <target state="translated">Tenga en cuenta que no hay ninguna excepción para este escenario.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>The following code example creates a <ph id="ph1">`CreateDependency`</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un <ph id="ph1">`CreateDependency`</ph> método.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>When this method is called, it uses the <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType&gt;</ph> property to add an item to the cache with a <ph id="ph2">`key`</ph> parameter of <ph id="ph3">`key1`</ph> and a value of <ph id="ph4">`Value 1`</ph>.</source>
          <target state="translated">Cuando se llama a este método, utiliza el <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType&gt;</ph> propiedad que se va a agregar un elemento a la memoria caché con un <ph id="ph2">`key`</ph> parámetro de <ph id="ph3">`key1`</ph> y un valor de <ph id="ph4">`Value 1`</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>An array of strings, <ph id="ph1">`dependencyKey`</ph>, is then created with the value of <ph id="ph2">`key1`</ph> as well.</source>
          <target state="translated">Una matriz de cadenas, <ph id="ph1">`dependencyKey`</ph>, a continuación, se crea con el valor de <ph id="ph2">`key1`</ph> también.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor is used to create a <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object, <ph id="ph3">`dep1`</ph>, which passes <ph id="ph4">`dependencyKey`</ph> as a parameter argument.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor se utiliza para crear un <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto, <ph id="ph3">`dep1`</ph>, que pasan los <ph id="ph4">`dependencyKey`</ph> como un argumento de parámetro.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>A second <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object, <ph id="ph2">`dep2`</ph>, is created using this constructor, with <ph id="ph3">`dep1`</ph> passed as the third parameter argument.</source>
          <target state="translated">Un segundo <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto, <ph id="ph2">`dep2`</ph>, se crea con este constructor, <ph id="ph3">`dep1`</ph> pasa como tercer argumento de parámetro.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>This second dependency is dependent on the first.</source>
          <target state="translated">Esta segunda dependencia depende de la primera.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> method is called next, using the second <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object as a parameter.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> método se llama a continuación, usando el segundo <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto como parámetro.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)">
          <source>If the first dependency changes in any way, the cached item will be invalidated.</source>
          <target state="translated">Si la primera dependencia cambia de alguna forma, se invalidarán el elemento en caché.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>An array of paths (to files or directories) that the cached object is dependent upon.</source>
          <target state="translated">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>When any of these resources changes, the cached object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>An array of cache keys that the new object monitors for changes.</source>
          <target state="translated">Matriz de claves de caché que el nuevo objeto supervisa por si hay cambios.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>When any of these cache keys changes, the cached object associated with this dependency object becomes obsolete and is removed from the cache.</source>
          <target state="translated">Cuando cambia alguna de estas claves de caché, el objeto almacenado en caché asociado a este objeto de dependencia queda obsoleto y se quita de la caché.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>Another instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that this instance is dependent upon.</source>
          <target state="translated">Otra instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> de la que esta instancia es dependiente.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>The time against which to check the last modified date of the objects in the arrays and the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object.</source>
          <target state="translated">Hora que se utilizará como referencia para comprobar la fecha de última modificación de los objetos de las matrices y el objeto <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class that monitors an array of paths (to files or directories), an array of cache keys, or both for changes.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios), en una matriz de claves de caché o en ambas.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>It also makes itself dependent upon another instance of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class and a time when the change monitoring begins.</source>
          <target state="translated">También pasa a convertirse en dependiente en otra instancia de la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> y a la hora a la que empieza a realizarse la supervisión de los cambios.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>Also, if any of the directories or files specified in the <ph id="ph1">`filenames`</ph> parameter is not found in the file system, it is treated as missing.</source>
          <target state="translated">Además, si alguno de los directorios o archivos especificados en la <ph id="ph1">`filenames`</ph> parámetro no se encuentra en el sistema de archivos, se trata como si estuvieran ausentes.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>If a directory or file is missing when the object with the dependency is added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, the cached object will be removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> when that directory or file is created.</source>
          <target state="translated">Si falta un directorio o archivo cuando el objeto con la dependencia se agrega a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, se quitará el objeto almacenado en caché la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> cuando se crea ese directorio o archivo.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>For example, assume that you add an object to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a dependency on the following file path: c:\stocks\xyz.dat.</source>
          <target state="translated">Por ejemplo, supongamos que agrega un objeto a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con una dependencia en la siguiente ruta de acceso de archivo: c:\stocks\xyz.dat.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>If that file is not found when the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.</source>
          <target state="translated">Si no se encuentra ese archivo cuando la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto se crea, pero se crea más adelante, el objeto almacenado en caché se quita tras la creación del archivo xyz.dat.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>However, the <ph id="ph1">`cachekeys`</ph> dependency does not work the same way.</source>
          <target state="translated">Sin embargo, la <ph id="ph1">`cachekeys`</ph> dependencia no funciona del mismo modo.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>If at least one value in the <ph id="ph1">`cachekeys`</ph> parameter does not exist at the time of an insert, the insert fails.</source>
          <target state="translated">Si al menos un valor en el <ph id="ph1">`cachekeys`</ph> parámetro no existe en el momento de una instrucción insert, se produce un error en la inserción.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>Note that there is no exception thrown for this scenario.</source>
          <target state="translated">Tenga en cuenta que no hay ninguna excepción para este escenario.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>Change tracking begins immediately and is not directly based on the <ph id="ph1">`start`</ph> parameter.</source>
          <target state="translated">Seguimiento de cambios se inicia de inmediato y no se basa directamente en el <ph id="ph1">`start`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>Use the <ph id="ph1">`start`</ph> parameter to pass a date and time in the past against which you want to check the last modified date of any of the objects passed in the <ph id="ph2">`filenames`</ph>, <ph id="ph3">`cachekeys`</ph>, or <ph id="ph4">`dependency`</ph> parameters.</source>
          <target state="translated">Use la <ph id="ph1">`start`</ph> parámetro que se pasa una fecha y hora en el pasado con el que desea comprobar la fecha última modificación de cualquiera de los objetos pasados en el <ph id="ph2">`filenames`</ph>, <ph id="ph3">`cachekeys`</ph>, o <ph id="ph4">`dependency`</ph> parámetros.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>If the last modified date for any of those objects is later than the date and time passed in the <ph id="ph1">`start`</ph> parameter, the cached item is removed from the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">Si modifica la última fecha de cualquiera de esos objetos es posterior a la fecha y tiempo transcurrido en el <ph id="ph1">`start`</ph> parámetro, se quita el elemento almacenado en caché de la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>The following code example shows a <ph id="ph1">`CreateDependency`</ph> method.</source>
          <target state="translated">El siguiente ejemplo de código muestra un <ph id="ph1">`CreateDependency`</ph> método.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>When this method is called, it creates a <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> object and the <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType&gt;</ph> property is used to add an item to the cache with a key parameter of <ph id="ph3">`key1`</ph> and a value of <ph id="ph4">`Value 1`</ph>.</source>
          <target state="translated">Cuando se llama a este método, se crea un <ph id="ph1">&lt;xref:System.DateTime&gt;</ph> objeto y el <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType&gt;</ph> propiedad se utiliza para agregar un elemento a la memoria caché con un parámetro de clave <ph id="ph3">`key1`</ph> y un valor de <ph id="ph4">`Value 1`</ph>.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>An array of strings, <ph id="ph1">`dependencyKey`</ph>, is then created with the value at its first (and only) index set to the value of <ph id="ph2">`key1`</ph> as well.</source>
          <target state="translated">Una matriz de cadenas, <ph id="ph1">`dependencyKey`</ph>, a continuación, se crea con el valor en su índice primer (y único) que se establece en el valor de <ph id="ph2">`key1`</ph> también.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType&gt;</ph> constructor is then used to create a <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object, <ph id="ph3">`dep1`</ph>, which passes <ph id="ph4">`dependencyKey`</ph> as a parameter argument.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType&gt;</ph> , a continuación, se utiliza el constructor para crear un <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto, <ph id="ph3">`dep1`</ph>, que pasan los <ph id="ph4">`dependencyKey`</ph> como un argumento de parámetro.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>A second <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object, <ph id="ph2">`dep2`</ph>, is then created using this constructor, with <ph id="ph3">`dep1`</ph> and the <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> object passed as parameter arguments.</source>
          <target state="translated">Un segundo <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto, <ph id="ph2">`dep2`</ph>, a continuación, se crea con este constructor, <ph id="ph3">`dep1`</ph> y <ph id="ph4">&lt;xref:System.DateTime&gt;</ph> objeto pasado como argumentos de parámetro.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>This second dependency is dependent on the first, and dependency monitoring will begin 10 seconds after the <ph id="ph1">`CreateDependency`</ph> method is called.</source>
          <target state="translated">Esta segunda dependencia depende de la primera y la supervisión de las dependencias comenzará a 10 segundos después de la <ph id="ph1">`CreateDependency`</ph> se llama al método.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> method is called next, using the second <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object as a parameter.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType&gt;</ph> método se llama a continuación, usando el segundo <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto como parámetro.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)">
          <source>If the first dependency changes in any way, the cached item will be invalidated.</source>
          <target state="translated">Si la primera dependencia cambia de alguna forma, se invalidarán el elemento en caché.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.DependencyDispose">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class and any classes that derive from <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</source>
          <target state="translated">Libera los recursos utilizados por la clase <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> y cualquier clase que derive de <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.DependencyDispose">
          <source>Any class that derives from the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class is required to implement this method to clean up resources the derived class has used.</source>
          <target state="translated">Cualquier clase que deriva de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> clase es necesaria para implementar este método para limpiar los recursos que se usa la clase derivada.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.DependencyDispose">
          <source>The following code example shows a class that inherits from the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class and overrides the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.DependencyDispose%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra una clase que hereda de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> clase e invalida el <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.DependencyDispose%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.DependencyDispose">
          <source>When this method is called, it sets a custom Boolean property named <ph id="ph1">`Disposed`</ph> to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Cuando se llama a este método, Establece una propiedad booleana personalizada denominada <ph id="ph1">`Disposed`</ph> a <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.Dispose">
          <source>Releases the resources used by the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object.</source>
          <target state="translated">Libera los recursos que usa el objeto <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.FinishInit">
          <source>Completes initialization of the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object.</source>
          <target state="translated">Finaliza la inicialización del objeto <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.FinishInit">
          <source>The <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.FinishInit%2A&gt;</ph> method completes the initialization of the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.FinishInit%2A&gt;</ph> método completa la inicialización de la <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.FinishInit">
          <source>This method is called by all <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> constructors.</source>
          <target state="translated">Se llama a este método en todos los <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> constructores.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.FinishInit">
          <source>The <ph id="ph1">&lt;see cref="M:System.Web.Caching.CacheDependency.FinishInit" /&gt;</ph> method must be called at the end of the constructor for derived classes to complete the initialization of the <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object.</source>
          <target state="translated">El <ph id="ph1">&lt;see cref="M:System.Web.Caching.CacheDependency.FinishInit" /&gt;</ph> método debe llamarse al final del constructor de clases derivadas completar la inicialización de la <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.GetFileDependencies">
          <source>Gets the file dependencies.</source>
          <target state="translated">Obtiene las dependencias de archivo.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.GetFileDependencies">
          <source>The file dependencies.</source>
          <target state="translated">Dependencias de archivo.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.GetUniqueID">
          <source>Retrieves a unique identifier for a <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object.</source>
          <target state="translated">Recupera un identificador único para un objeto <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.GetUniqueID">
          <source>The unique identifier for the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object.</source>
          <target state="translated">El identificador único para el objeto <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.GetUniqueID">
          <source>This method can be particularly useful for tracking multiple instances of the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class associated with an item or an application.</source>
          <target state="translated">Este método puede ser especialmente útil para realizar el seguimiento de varias instancias de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> clase asociado a un elemento o una aplicación.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.GetUniqueID">
          <source>The identifier is a combination of either the file name (for a file dependency) or the key name (for a cache-key dependency) and a string that this method assigns to the dependency.</source>
          <target state="translated">El identificador es una combinación del nombre de archivo (para una dependencia de archivo) o el nombre de clave (para una dependencia de clave de caché) y una cadena que este método se asigna a la dependencia.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.GetUniqueID">
          <source>In classes that derive from the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class, you can override this method to customize how it generates the unique identifier.</source>
          <target state="translated">En las clases que derivan de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> (clase), puede invalidar este método para personalizar cómo genera el identificador único.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.GetUniqueID">
          <source>The following code example creates an <ph id="ph1">&lt;xref:System.Web.Caching.AggregateCacheDependency&gt;</ph> object, named <ph id="ph2">`aggDep`</ph>, with two <ph id="ph3">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objects in its array.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un <ph id="ph1">&lt;xref:System.Web.Caching.AggregateCacheDependency&gt;</ph> objeto, denominado <ph id="ph2">`aggDep`</ph>, con dos <ph id="ph3">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objetos de la matriz.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.GetUniqueID">
          <source>Once <ph id="ph1">`aggDep`</ph> is instantiated, the code calls the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.GetUniqueID%2A&gt;</ph> method to generate a unique identifier for both dependencies that <ph id="ph3">`aggDep`</ph> contains and displays the identifiers to the containing page.</source>
          <target state="translated">Una vez <ph id="ph1">`aggDep`</ph> se crea una instancia, el código llama el <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.GetUniqueID%2A&gt;</ph> método para generar un identificador único para las dos dependencias que <ph id="ph3">`aggDep`</ph> contiene y muestra los identificadores a la página que lo contiene.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.GetUniqueID">
          <source>An item is then added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, using the <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Insert%2A&gt;</ph> method, with <ph id="ph3">`aggDep`</ph> as a dependency.</source>
          <target state="translated">A continuación, se agrega un elemento a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>, usando la <ph id="ph2">&lt;xref:System.Web.Caching.Cache.Insert%2A&gt;</ph> método, con <ph id="ph3">`aggDep`</ph> como una dependencia.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="P:System.Web.Caching.CacheDependency.HasChanged">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object has changed.</source>
          <target state="translated">Obtiene un valor que indica si el objeto <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> ha cambiado.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.HasChanged">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object has changed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el objeto <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> presenta cambios; en caso contrario, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.HasChanged">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.HasChanged">
          <source>You can add an item to an ASP.NET application's <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> with a <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph>.</source>
          <target state="translated">Puede agregar un elemento a una aplicación ASP.NET <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> con un <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.HasChanged">
          <source>When the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> changes, the item added to the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> is invalidated and removed from the cache.</source>
          <target state="translated">Cuando el <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> cambia, el elemento agregado a la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> se invalida y se quita de la memoria caché.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.HasChanged">
          <source>You can use this property to determine whether a <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> has changed, and recreate the item in the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> if that has occurred.</source>
          <target state="translated">Puede utilizar esta propiedad para determinar si un <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> ha cambiado y vuelva a crear el elemento en el <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph> si se ha producido.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.HasChanged">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.HasChanged%2A&gt;</ph> property to determine whether a <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> changed since the previous request for an item in the <ph id="ph3">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.HasChanged%2A&gt;</ph> propiedad para determinar si un <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> cambiado desde la solicitud anterior para un elemento de la <ph id="ph3">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.HasChanged">
          <source>The <ph id="ph1">`dt`</ph> value passed in the <ph id="ph2">`start`</ph> parameter is set to <ph id="ph3">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">`dt`</ph> valor pasado en el <ph id="ph2">`start`</ph> parámetro está establecido en <ph id="ph3">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.ItemRemoved">
          <source>Called when a monitored cache entry is removed.</source>
          <target state="translated">Se llama cuando se quita una entrada de caché supervisada.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive">
          <source>Updates the last access time of every cache item that depends on this item.</source>
          <target state="translated">Actualiza la hora de último acceso de cada elemento en caché que dependa de este elemento.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>The source of the event.</source>
          <target state="translated">Origen del evento.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>An <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> object that contains the event data.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.EventArgs" /&gt;</ph> que contiene los datos del evento.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>Notifies the base <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> object that the dependency represented by a derived <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> class has changed.</source>
          <target state="translated">Notifica al objeto <ph id="ph1">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> base que la dependencia representada por una clase <ph id="ph2">&lt;see cref="T:System.Web.Caching.CacheDependency" /&gt;</ph> derivada ha cambiado.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>Any class that derives from the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class must implement this method.</source>
          <target state="translated">Cualquier clase que deriva de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> clase debe implementar este método.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>When you derive from the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class, you use the base functionality of any method or property that you have not overridden.</source>
          <target state="translated">Al derivar de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> (clase), se utiliza la funcionalidad básica de cualquier método o propiedad que no han invalidado.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>When you create an instance of the derived class, it represents the files, cache keys, database tables, or other arbitrary objects that you want to make a cached item dependent upon.</source>
          <target state="translated">Cuando crea una instancia de la clase derivada, representa los archivos, las claves de caché, las tablas de base de datos u otros objetos arbitrarios que desea hacer que un elemento almacenado en caché dependa.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>When a dependency item changes, this method notifies the base functionality of the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class that the item has changed, so that the values of the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.HasChanged%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Web.Caching.CacheDependency.UtcLastModified%2A&gt;</ph> properties can be updated.</source>
          <target state="translated">Cuando cambia un elemento de dependencia, este método notifica a la funcionalidad básica de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> clase que ha cambiado el elemento, por lo que los valores de la <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.HasChanged%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Web.Caching.CacheDependency.UtcLastModified%2A&gt;</ph> propiedades se pueden actualizar.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>The following code example shows a class that inherits from the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra una clase que hereda de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)">
          <source>It creates a public method, <ph id="ph1">`ResetDependency`</ph>, that uses the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A&gt;</ph> method to change the time at which the dependency was modified, and then calls the <ph id="ph3">&lt;xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A&gt;</ph> method.</source>
          <target state="translated">Crea un método público, <ph id="ph1">`ResetDependency`</ph>, que usa el <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A&gt;</ph> método para cambiar la hora a la que se modificó la dependencia y, a continuación, llama el <ph id="ph3">&lt;xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})">
          <source>The dependency changed action.</source>
          <target state="translated">La acción de cambio de la dependencia.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})">
          <source>Adds an Action method to handle notifying interested party in changes to this dependency.</source>
          <target state="translated">Agrega un método de acción para controlar la notificación a la parte interesada de los cambios realizados en esta dependencia.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)">
          <source>The time when the dependency last changed.</source>
          <target state="translated">Hora a la que se cambió la dependencia por última vez.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)">
          <source>Marks the time when a dependency last changed.</source>
          <target state="translated">Marca la hora a la que se cambió una dependencia por última vez.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)">
          <source>The following code example shows a class that inherits from the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra una clase que hereda de la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)">
          <source>It creates a public method, <ph id="ph1">`ResetDependency`</ph>, that uses the <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A&gt;</ph> method to change the time at which the dependency was modified, and then calls the <ph id="ph3">&lt;xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A&gt;</ph> method.</source>
          <target state="translated">Crea un método público, <ph id="ph1">`ResetDependency`</ph>, que usa el <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A&gt;</ph> método para cambiar la hora a la que se modificó la dependencia y, a continuación, llama el <ph id="ph3">&lt;xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.TakeOwnership">
          <source>Allows the first user to declare exclusive ownership of this dependency.</source>
          <target state="translated">Permite que el primer usuario declare la propiedad exclusiva de esta dependencia.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.TakeOwnership">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="true" /&gt;</ph> if the item was the first to take ownership otherwise <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph><ph id="ph2">
</ph><ph id="ph3">&lt;see langword="true" /&gt;</ph> si el elemento fue el primero en tomar posesión; en caso contrario, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Web.Caching.CacheDependency.TakeOwnership">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.TakeOwnership">
          <source>This method declares that the dependency is used.</source>
          <target state="translated">Este método se declara que se usa la dependencia.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.TakeOwnership">
          <source>If another item previously called this method and took ownership, <ph id="ph1">`false`</ph> is returned.</source>
          <target state="translated">Si otro elemento previamente llama a este método y tomó posesión, <ph id="ph1">`false`</ph> se devuelve.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.TakeOwnership">
          <source>A  <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> can only be used by one cache entry.</source>
          <target state="translated">Un <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> sólo puede utilizarse con entrada de una memoria caché.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.Caching.CacheDependency.TakeOwnership">
          <source>When an item is added to a cache with any cache dependencies specified, the cache should take ownership of those dependencies to make sure that they are not reused somewhere else.</source>
          <target state="translated">Cuando se agrega un elemento a la caché con las dependencias de caché especificadas, la memoria caché debe tomar posesión de tales dependencias para asegurarse de que no se reutilicen en algún caso contrario.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="P:System.Web.Caching.CacheDependency.UtcLastModified">
          <source>Gets the time when the dependency was last changed.</source>
          <target state="translated">Obtiene la hora a la que se cambió la dependencia por última vez.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.UtcLastModified">
          <source>The time when the dependency was last changed.</source>
          <target state="translated">Hora a la que se cambió la dependencia por última vez.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.UtcLastModified">
          <source>This property is measured in Coordinated Universal Time (UTC) (also known as Greenwich Mean Time).</source>
          <target state="translated">Esta propiedad se mide en hora Universal coordinada (UTC) (también conocida como hora del meridiano de Greenwich).</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.UtcLastModified">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Web.Caching.AggregateCacheDependency&gt;</ph> class to add an item, with two <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> object dependencies, to the <ph id="ph3">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">El siguiente ejemplo de código utiliza el <ph id="ph1">&lt;xref:System.Web.Caching.AggregateCacheDependency&gt;</ph> clase para agregar un elemento, con dos <ph id="ph2">&lt;xref:System.Web.Caching.CacheDependency&gt;</ph> objeto dependencias, en la <ph id="ph3">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.UtcLastModified">
          <source>When a request for the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> item is made, the code checks whether the item is in the <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">Cuando una solicitud para la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph> se realiza el elemento, el código comprueba si el elemento está en la <ph id="ph2">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.UtcLastModified">
          <source>If it is, the <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.UtcLastModified%2A&gt;</ph> property is converted to a string and displayed on the page.</source>
          <target state="translated">Si es así, la <ph id="ph1">&lt;xref:System.Web.Caching.CacheDependency.UtcLastModified%2A&gt;</ph> propiedad se convierte en una cadena y se muestra en la página.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Web.Caching.CacheDependency.UtcLastModified">
          <source>If it is not, the item and its two dependencies are created and added to the <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</source>
          <target state="translated">Si no es así, el elemento y sus dos dependencias se crean y agregan a la <ph id="ph1">&lt;xref:System.Web.Caching.Cache&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>