<Type Name="CacheDependency" FullName="System.Web.Caching.CacheDependency">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c3c21e19ddfb310514df1ac128001df7f4a70b0" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53390214" /></Metadata><TypeSignature Language="C#" Value="public class CacheDependency : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi CacheDependency extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.CacheDependency" />
  <TypeSignature Language="VB.NET" Value="Public Class CacheDependency&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CacheDependency : IDisposable" />
  <TypeSignature Language="F#" Value="type CacheDependency = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Establece una relación de dependencia entre un elemento almacenado en un objeto <see cref="T:System.Web.Caching.Cache" /> de aplicación ASP.NET y un archivo, una clave de caché, una matriz de cualquiera u otro <see cref="T:System.Web.Caching.CacheDependency" /> objeto. La clase <see cref="T:System.Web.Caching.CacheDependency" /> supervisa las relaciones de dependencia para que cuando cualquiera de ellas cambie, el elemento almacenado en caché se quite automáticamente.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si agrega un elemento a la memoria caché que depende de otro objeto, como un archivo o una matriz de archivos, se quita automáticamente el elemento dependiente de la memoria caché cuando cambia el objeto. Por ejemplo, suponga que crea un <xref:System.Data.DataSet> objeto según los datos en un archivo XML. Puede agregar el <xref:System.Data.DataSet> a la caché con un <xref:System.Web.Caching.CacheDependency> objeto que hace que el <xref:System.Data.DataSet> dependientes en el archivo XML. Si cambia el archivo XML, el <xref:System.Data.DataSet> se quita de la memoria caché.  
  
 Puede agregar elementos con dependencias en memoria caché de la aplicación con el <xref:System.Web.Caching.Cache.Add%2A> y <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> métodos. No puede usar el <xref:System.Web.Caching.Cache.Item%2A> propiedad para agregar elementos a la memoria caché con dependencias.  
  
 Para establecer una dependencia, se crea una instancia de la <xref:System.Web.Caching.CacheDependency> clase, especificar los archivos, claves o directorios en los que depende el elemento, y, a continuación, pasar la dependencia a la <xref:System.Web.Caching.Cache.Add%2A> o <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> método. El <xref:System.Web.Caching.CacheDependency> instancia puede representar un único archivo o directorio, una matriz de archivos o directorios o una matriz de archivos o directorios junto con una matriz de claves de caché (que representan otros elementos almacenados en el <xref:System.Web.Caching.Cache> objeto).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.Caching.CacheDependency.HasChanged%2A> propiedad para determinar si un <xref:System.Web.Caching.CacheDependency> cambiado desde la solicitud anterior para un elemento en el <xref:System.Web.Caching.Cache>. El `dt` valor pasado en el `start` parámetro está establecido en <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Caching.Cache" />
    <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
    <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CacheDependency ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CacheDependency();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si desea derivar su propia clase de <xref:System.Web.Caching.CacheDependency>, implemente esta versión de la <xref:System.Web.Caching.CacheDependency.%23ctor%2A> constructor.  
  
   
  
## Examples  
 El siguiente ejemplo de código es una clase que implementa esta versión de la <xref:System.Web.Caching.CacheDependency> constructor como todas las clases que derivan de <xref:System.Web.Caching.CacheDependency> deben.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Ruta a un archivo o directorio del que depende el objeto en caché. Cuando cambia este recurso, el objeto almacenado en caché queda obsoleto y se quita de la caché.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> que supervisa un archivo o directorio en lo que se refiere a los cambios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el archivo o directorio especificado en el `filename` parámetro no se encuentra en el sistema de archivos, se tratará como no se encuentra. Si falta el archivo o directorio cuando se agrega el objeto con la dependencia a la <xref:System.Web.Caching.Cache>, se quitará el objeto almacenado en caché el <xref:System.Web.Caching.Cache> cuando se crea el archivo o directorio.  
  
 Por ejemplo, supongamos que agrega un objeto a la <xref:System.Web.Caching.Cache> con una dependencia en la siguiente ruta de acceso: c:\stocks\xyz.dat. Si no se encuentra ese archivo cuando el <xref:System.Web.Caching.CacheDependency> objeto se crea, pero se puede crear más tarde, se quita el objeto almacenado en caché tras la creación del archivo xyz.dat.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea una instancia de la <xref:System.Web.Caching.CacheDependency> clase con una dependencia en un archivo XML. El <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> método, a continuación, agrega un elemento a la <xref:System.Web.Caching.Cache> que depende de si ese archivo.  
  
 [!code-csharp[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/CS/source.cs#1)]
 [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic CacheDependency.CacheDependency Example/VB/source.vb#1)]  
  
 También puede usar la siguiente técnica para agregar un elemento a la <xref:System.Web.Caching.Cache> con una dependencia en un archivo.  
  
 [!code-csharp[Single File Dependency Cache entry#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Single File Dependency Cache entry/CS/DependencySingleFilecs.aspx#1)]
 [!code-vb[Single File Dependency Cache entry#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Single File Dependency Cache entry/VB/DependencySingleFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency filenames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché. Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si cualquiera de los archivos o directorios de la matriz cambia o se quita de la matriz, el elemento almacenado en caché queda obsoleto y se quita de la aplicación <xref:System.Web.Caching.Cache> objeto.  
  
 Además, si alguno de los directorios o archivos especificados en el `filenames` parámetro no se encuentra en el sistema de archivos, se trata como ausente. Si falta un directorio o archivo cuando se agrega el objeto con la dependencia a la <xref:System.Web.Caching.Cache>, se quitará el objeto almacenado en caché el <xref:System.Web.Caching.Cache> cuando se crea ese directorio o archivo.  
  
 Por ejemplo, supongamos que agrega un objeto a la <xref:System.Web.Caching.Cache> con una dependencia en la siguiente ruta de acceso: c:\stocks\xyz.dat. Si no se encuentra ese archivo cuando el <xref:System.Web.Caching.CacheDependency> objeto se crea, pero se puede crear más tarde, se quita el objeto almacenado en caché tras la creación del archivo xyz.dat.  
  
> [!NOTE]
>  Cuando se crea la matriz que contiene las dependencias de archivo, debe definir el número de archivos que el elemento va a agregar a la <xref:System.Web.Caching.Cache> depende.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo usar el <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> método para agregar un elemento a la <xref:System.Web.Caching.Cache> con dependencias en una matriz de archivos. También puede convertir el elemento dependiente en una matriz de directorios.  
  
 [!code-csharp[Multiple file based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Multiple file based dependency/CS/DependencyMultiFilecs.aspx#1)]
 [!code-vb[Multiple file based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Multiple file based dependency/VB/DependencyMultiFilevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string filename, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(System::String ^ filename, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filename, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filename">Ruta a un archivo o directorio del que depende el objeto en caché. Cuando cambia este recurso, el objeto almacenado en caché queda obsoleto y se quita de la caché.</param>
        <param name="start">Hora que se utilizará como referencia para comprobar la fecha de última modificación del directorio o archivo.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> que supervisa un archivo o directorio en lo que se refiere a los cambios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el archivo o directorio especificado en el `filename` parámetro no se encuentra en el sistema de archivos, se tratará como no se encuentra. Si falta el archivo o directorio cuando se agrega el objeto con la dependencia a la <xref:System.Web.Caching.Cache>, se quitará el objeto almacenado en caché el <xref:System.Web.Caching.Cache> cuando se crea el archivo o directorio.  
  
 Por ejemplo, supongamos que agrega un objeto a la <xref:System.Web.Caching.Cache> con una dependencia en la siguiente ruta de acceso: c:\stocks\xyz.dat. Si no se encuentra ese archivo cuando el <xref:System.Web.Caching.CacheDependency> objeto se crea, pero se puede crear más tarde, se quita el objeto almacenado en caché tras la creación del archivo xyz.dat.  
  
> [!NOTE]
>  Seguimiento de cambios se inicia de inmediato y no se basa directamente en el `start` parámetro. Use la `start` parámetro que se pasa una fecha y hora en el pasado con la que desea comprobar la última fecha de modificación del directorio o archivo que se han pasado la `filename` parámetro. Si se modificó por última vez la fecha es posterior a la fecha y pasa el tiempo establecido en el `start` parámetro, se quita el elemento en caché de la <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se utiliza este constructor para crear una instancia de un <xref:System.Web.Caching.CacheDependency> objeto, a continuación, inserta un elemento en el <xref:System.Web.Caching.Cache> con esa dependencia. El `dt` valor pasado en el `start` parámetro está establecido en <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché. Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</param>
        <param name="start">Hora que se utilizará como referencia para comprobar la fecha de última modificación de los objetos de la matriz.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios) y especifica la hora a la que comienza la supervisión de cambios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si alguno de los directorios o archivos especificados en el `filenames` parámetro no se encuentra en el sistema de archivos, se trata como ausente. Si falta un directorio o archivo cuando se agrega el objeto con la dependencia a la <xref:System.Web.Caching.Cache>, se quitará el objeto almacenado en caché el <xref:System.Web.Caching.Cache> cuando se crea ese directorio o archivo.  
  
 Por ejemplo, supongamos que agrega un objeto a la <xref:System.Web.Caching.Cache> con una dependencia en la siguiente ruta de acceso: c:\stocks\xyz.dat. Si no se encuentra ese archivo cuando el <xref:System.Web.Caching.CacheDependency> objeto se crea, pero se puede crear más tarde, se quita el objeto almacenado en caché tras la creación del archivo xyz.dat.  
  
> [!NOTE]
>  Seguimiento de cambios se inicia de inmediato y no se basa directamente en el `start` parámetro. Use la `start` parámetro para pasar de una fecha y hora en el pasado con la que desea comprobar la fecha de última modificación de la matriz pasado en el `filenames` parámetro. Si modifica la última fecha de cualquier objeto de la matriz es posterior a la fecha y pasa el tiempo establecido en el `start` parámetro, se quita el elemento en caché de la <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Web.Caching.CacheDependency> objeto que pasa dos archivos XML y un <xref:System.DateTime.Now%2A?displayProperty=nameWithType> valor cuando el objeto se incluye como un argumento de parámetro en un <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> llamada al método.  
  
 [!code-csharp[CacheDependency Constructor4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor4/CS/depmultifilestimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor4/VB/depmultifilestimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="filenames">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché. Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</param>
        <param name="cachekeys">Matriz de claves de caché que el nuevo objeto supervisa por si hay cambios. Cuando cambia alguna de estas claves de caché, el objeto almacenado en caché asociado a este objeto de dependencia queda obsoleto y se quita de la caché.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios), en una matriz de claves de caché o en ambas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Además, si alguno de los directorios o archivos especificados en el `filenames` parámetro no se encuentra en el sistema de archivos, se trata como ausente. Si falta un directorio o archivo cuando se agrega el objeto con la dependencia a la <xref:System.Web.Caching.Cache>, se quitará el objeto almacenado en caché el <xref:System.Web.Caching.Cache> cuando se crea ese directorio o archivo.  
  
 Por ejemplo, supongamos que agrega un objeto a la <xref:System.Web.Caching.Cache> con una dependencia en la siguiente ruta de acceso: c:\stocks\xyz.dat. Si no se encuentra ese archivo cuando el <xref:System.Web.Caching.CacheDependency> objeto se crea, pero se puede crear más tarde, se quita el objeto almacenado en caché tras la creación del archivo xyz.dat.  
  
 Sin embargo, el `cachekeys` dependencia no funciona del mismo modo. Si al menos un valor en el `cachekeys` parámetro no existe en el momento de una instrucción insert, se produce un error en la inserción. Tenga en cuenta que no hay ninguna excepción para este escenario.  
  
## Examples  
 El fragmento de código siguiente muestra cómo insertar un elemento en la aplicación <xref:System.Web.Caching.Cache> con una dependencia en una clave a otro elemento se coloca en la memoria caché. Puesto que este método utiliza la sintaxis de la matriz, debe definir el número de claves en el que el elemento va a agregar a la <xref:System.Web.Caching.Cache> es dependiente.  
  
 [!code-csharp[Key based dependency#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Key based dependency/CS/DependencyKeycs.aspx#1)]
 [!code-vb[Key based dependency#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Key based dependency/VB/DependencyKeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché. Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</param>
        <param name="cachekeys">Matriz de claves de caché que el nuevo objeto supervisa por si hay cambios. Cuando cambia alguna de estas claves de caché, el objeto almacenado en caché asociado a este objeto de dependencia queda obsoleto y se quita de la caché.</param>
        <param name="start">Fecha y hora que se utilizarán como referencia para comprobar la fecha de última modificación de los objetos pasados en las matrices <paramref name="filenames" /> y <paramref name="cachekeys" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios), en una matriz de claves de caché o en ambas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Además, si alguno de los directorios o archivos especificados en el `filenames` parámetro no se encuentra en el sistema de archivos, se trata como ausente. Si falta un directorio o archivo cuando se agrega el objeto con la dependencia a la <xref:System.Web.Caching.Cache>, se quitará el objeto almacenado en caché el <xref:System.Web.Caching.Cache> cuando se crea ese directorio o archivo.  
  
 Por ejemplo, supongamos que agrega un objeto a la <xref:System.Web.Caching.Cache> con una dependencia en la siguiente ruta de acceso: c:\stocks\xyz.dat. Si no se encuentra ese archivo cuando el <xref:System.Web.Caching.CacheDependency> objeto se crea, pero se puede crear más tarde, se quita el objeto almacenado en caché tras la creación del archivo xyz.dat.  
  
 Sin embargo, el `cachekeys` dependencia no funciona del mismo modo. Si al menos un valor en el `cachekeys` parámetro no existe en el momento de una instrucción insert, se produce un error en la inserción. Tenga en cuenta que no hay ninguna excepción para este escenario.

> [!NOTE]
>  Seguimiento de cambios se inicia de inmediato y no se basa directamente en el `start` parámetro. Use la `start` pasa el parámetro que se pasa una fecha y hora en el pasado con la que desea comprobar la fecha de última modificación de cualquier objeto en el `filenames` o `cachekeys` parámetros. Si modifica la última fecha de cualquiera de esos objetos es posterior a la fecha y tiempo establecido pasada en el `start` parámetro, se quita el elemento en caché de la <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un `CreateDependency` método. Cuando se llama a este método, crea un <xref:System.DateTime> objeto y el <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> propiedad se utiliza para agregar un elemento a la memoria caché con un `key` parámetro de `key1` y un valor de `Value 1`. Una matriz de cadenas, `dependencyKey`, a continuación, se crea con el valor de `key1` también. Esto <xref:System.Web.Caching.CacheDependency> , a continuación, crea una instancia de constructor un <xref:System.Web.Caching.CacheDependency> objeto que pasa `dependencyKey` y <xref:System.DateTime> objeto como argumentos de parámetro. El <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> método se llama a continuación, mediante el <xref:System.Web.Caching.CacheDependency> objeto como parámetro. Esto hace que el objeto agregado a la caché mediante el <xref:System.Web.Caching.Cache.Insert%2A> método depende de la `key1` clave.  
  
 [!code-csharp[CacheDependency Constructor6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor6/CS/depkeytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor6/VB/depkeytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="filenames">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché. Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</param>
        <param name="cachekeys">Matriz de claves de caché que el nuevo objeto supervisa por si hay cambios. Cuando cambia alguna de estas claves de caché, el objeto almacenado en caché asociado a este objeto de dependencia queda obsoleto y se quita de la caché.</param>
        <param name="dependency">Otra instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> de la que esta instancia es dependiente.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios), en una matriz de claves de caché o en ambas. También pasa a convertirse en dependiente en una instancia aparte de la clase <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Además, si alguno de los directorios o archivos especificados en el `filenames` parámetro no se encuentra en el sistema de archivos, se trata como ausente. Si falta un directorio o archivo cuando se agrega el objeto con la dependencia a la <xref:System.Web.Caching.Cache>, se quitará el objeto almacenado en caché el <xref:System.Web.Caching.Cache> cuando se crea ese directorio o archivo.  
  
 Por ejemplo, supongamos que agrega un objeto a la <xref:System.Web.Caching.Cache> con una dependencia en la siguiente ruta de acceso: c:\stocks\xyz.dat. Si no se encuentra ese archivo cuando el <xref:System.Web.Caching.CacheDependency> objeto se crea, pero se puede crear más tarde, se quita el objeto almacenado en caché tras la creación del archivo xyz.dat.  
  
 Sin embargo, el `cachekeys` dependencia no funciona del mismo modo. Si al menos un valor en el `cachekeys` parámetro no existe en el momento de una instrucción insert, se produce un error en la inserción. Tenga en cuenta que no hay ninguna excepción para este escenario.
  
## Examples  
 En el ejemplo de código siguiente se crea un `CreateDependency` método. Cuando se llama a este método, utiliza el <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> propiedad para agregar un elemento a la memoria caché con un `key` parámetro de `key1` y un valor de `Value 1`. Una matriz de cadenas, `dependencyKey`, a continuación, se crea con el valor de `key1` también. El <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> constructor se utiliza para crear un <xref:System.Web.Caching.CacheDependency> objeto, `dep1`, que pasan los `dependencyKey` como argumento de parámetro. Un segundo <xref:System.Web.Caching.CacheDependency> objeto, `dep2`, se crea con este constructor, `dep1` pasado como tercer argumento de parámetro. Esta segunda dependencia depende de la primera. El <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> método se llama a continuación, mediante el segundo <xref:System.Web.Caching.CacheDependency> objeto como parámetro. Si la primera dependencia cambia de algún modo, se invalidará el elemento en caché.  
  
 [!code-csharp[CacheDependency Constructor7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor7/CS/dependencycs.aspx#1)]
 [!code-vb[CacheDependency Constructor7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor7/VB/dependencyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] filenames, string[] cachekeys, class System.Web.Caching.CacheDependency dependency, valuetype System.DateTime start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filenames As String(), cachekeys As String(), dependency As CacheDependency, start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CacheDependency(cli::array &lt;System::String ^&gt; ^ filenames, cli::array &lt;System::String ^&gt; ^ cachekeys, System::Web::Caching::CacheDependency ^ dependency, DateTime start);" />
      <MemberSignature Language="F#" Value="new System.Web.Caching.CacheDependency : string[] * string[] * System.Web.Caching.CacheDependency * DateTime -&gt; System.Web.Caching.CacheDependency" Usage="new System.Web.Caching.CacheDependency (filenames, cachekeys, dependency, start)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filenames" Type="System.String[]" />
        <Parameter Name="cachekeys" Type="System.String[]" />
        <Parameter Name="dependency" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="filenames">Matriz de rutas de acceso (a archivos o directorios) de la que depende el objeto almacenado en caché. Cuando cambia alguno de estos recursos, el objeto almacenado en caché queda obsoleto y se quita de la caché.</param>
        <param name="cachekeys">Matriz de claves de caché que el nuevo objeto supervisa por si hay cambios. Cuando cambia alguna de estas claves de caché, el objeto almacenado en caché asociado a este objeto de dependencia queda obsoleto y se quita de la caché.</param>
        <param name="dependency">Otra instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> de la que esta instancia es dependiente.</param>
        <param name="start">Hora que se utilizará como referencia para comprobar la fecha de última modificación de los objetos de las matrices y el objeto <see cref="T:System.Web.Caching.CacheDependency" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> que supervisa los cambios en una matriz de rutas de acceso (a archivos o directorios), en una matriz de claves de caché o en ambas. También pasa a convertirse en dependiente en otra instancia de la clase <see cref="T:System.Web.Caching.CacheDependency" /> y a la hora a la que empieza a realizarse la supervisión de los cambios.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Además, si alguno de los directorios o archivos especificados en el `filenames` parámetro no se encuentra en el sistema de archivos, se trata como ausente. Si falta un directorio o archivo cuando se agrega el objeto con la dependencia a la <xref:System.Web.Caching.Cache>, se quitará el objeto almacenado en caché el <xref:System.Web.Caching.Cache> cuando se crea ese directorio o archivo.  
  
 Por ejemplo, supongamos que agrega un objeto a la <xref:System.Web.Caching.Cache> con una dependencia en la siguiente ruta de acceso: c:\stocks\xyz.dat. Si no se encuentra ese archivo cuando el <xref:System.Web.Caching.CacheDependency> objeto se crea, pero se puede crear más tarde, se quita el objeto almacenado en caché tras la creación del archivo xyz.dat.  
 
 Sin embargo, el `cachekeys` dependencia no funciona del mismo modo. Si al menos un valor en el `cachekeys` parámetro no existe en el momento de una instrucción insert, se produce un error en la inserción. Tenga en cuenta que no hay ninguna excepción para este escenario.

> [!NOTE]
>  Seguimiento de cambios se inicia de inmediato y no se basa directamente en el `start` parámetro. Use la `start` parámetro que se pasa una fecha y hora en el pasado con la que desea comprobar la fecha de última modificación de cualquiera de los objetos pasados en el `filenames`, `cachekeys`, o `dependency` parámetros. Si se modificó por última vez fecha para cualquiera de esos objetos es posterior a la fecha y hora pasada en el `start` parámetro, se quita el elemento en caché de la <xref:System.Web.Caching.Cache>.  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra un `CreateDependency` método. Cuando se llama a este método, crea un <xref:System.DateTime> objeto y el <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> propiedad se utiliza para agregar un elemento a la memoria caché con un parámetro de clave `key1` y un valor de `Value 1`. Una matriz de cadenas, `dependencyKey`, a continuación, se crea con el valor de su índice del primer (y único) establecido en el valor de `key1` también. El <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=nameWithType> , a continuación, se utiliza el constructor para crear un <xref:System.Web.Caching.CacheDependency> objeto, `dep1`, que pasan los `dependencyKey` como argumento de parámetro. Un segundo <xref:System.Web.Caching.CacheDependency> objeto, `dep2`, a continuación, se crea con este constructor, `dep1` y <xref:System.DateTime> objeto pasado como argumentos de parámetro. Esta segunda dependencia depende de la primera y la supervisión de dependencia comenzará a 10 segundos después de la `CreateDependency` se llama al método. El <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> método se llama a continuación, mediante el segundo <xref:System.Web.Caching.CacheDependency> objeto como parámetro. Si la primera dependencia cambia de algún modo, se invalidará el elemento en caché.  
  
 [!code-csharp[CacheDependency Constructor8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CacheDependency Constructor8/CS/dependencytimecs.aspx#1)]
 [!code-vb[CacheDependency Constructor8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency Constructor8/VB/dependencytimevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="DependencyDispose">
      <MemberSignature Language="C#" Value="protected virtual void DependencyDispose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DependencyDispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.DependencyDispose" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DependencyDispose ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DependencyDispose();" />
      <MemberSignature Language="F#" Value="abstract member DependencyDispose : unit -&gt; unit&#xA;override this.DependencyDispose : unit -&gt; unit" Usage="cacheDependency.DependencyDispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera los recursos utilizados por la clase <see cref="T:System.Web.Caching.CacheDependency" /> y cualquier clase que derive de <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cualquier clase que deriva la <xref:System.Web.Caching.CacheDependency> clase es necesaria para implementar este método para limpiar los recursos que ha utilizado la clase derivada.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una clase que hereda de la <xref:System.Web.Caching.CacheDependency> clase e invalida el <xref:System.Web.Caching.CacheDependency.DependencyDispose%2A> método. Cuando se llama a este método, Establece una propiedad booleana personalizada denominada `Disposed` a `true`.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cacheDependency.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera los recursos que usa el objeto <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInit">
      <MemberSignature Language="C#" Value="protected internal void FinishInit ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void FinishInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.FinishInit" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub FinishInit ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void FinishInit();" />
      <MemberSignature Language="F#" Value="member this.FinishInit : unit -&gt; unit" Usage="cacheDependency.FinishInit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finaliza la inicialización del objeto <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Caching.CacheDependency.FinishInit%2A> método completa la inicialización de la <xref:System.Web.Caching.CacheDependency> objeto. Este método se llama en todos los <xref:System.Web.Caching.CacheDependency> constructores.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>El <see cref="M:System.Web.Caching.CacheDependency.FinishInit" /> método debe llamarse al final del constructor para las clases derivadas completar la inicialización de la <see cref="T:System.Web.Caching.CacheDependency" /> objeto.</para></block>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="GetFileDependencies">
      <MemberSignature Language="C#" Value="public virtual string[] GetFileDependencies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFileDependencies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetFileDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFileDependencies () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetFileDependencies();" />
      <MemberSignature Language="F#" Value="abstract member GetFileDependencies : unit -&gt; string[]&#xA;override this.GetFileDependencies : unit -&gt; string[]" Usage="cacheDependency.GetFileDependencies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene las dependencias de archivo.</summary>
        <returns>Dependencias de archivo.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUniqueID">
      <MemberSignature Language="C#" Value="public virtual string GetUniqueID ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUniqueID() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.GetUniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUniqueID () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetUniqueID();" />
      <MemberSignature Language="F#" Value="abstract member GetUniqueID : unit -&gt; string&#xA;override this.GetUniqueID : unit -&gt; string" Usage="cacheDependency.GetUniqueID " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera un identificador único para un objeto <see cref="T:System.Web.Caching.CacheDependency" />.</summary>
        <returns>Identificador único del objeto <see cref="T:System.Web.Caching.CacheDependency" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método puede ser especialmente útil para realizar el seguimiento de varias instancias de la <xref:System.Web.Caching.CacheDependency> clase asociada a un elemento o una aplicación.  
  
 El identificador es una combinación de nombre de archivo (de una dependencia de archivo) o el nombre de clave (para una dependencia de clave de caché) y una cadena que este método se asigna a la dependencia. En las clases que derivan de la <xref:System.Web.Caching.CacheDependency> (clase), puede invalidar este método para personalizar cómo genera el identificador único.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un <xref:System.Web.Caching.AggregateCacheDependency> objeto, denominado `aggDep`, con dos <xref:System.Web.Caching.CacheDependency> objetos en su matriz. Una vez `aggDep` se crea una instancia, el código llama a la <xref:System.Web.Caching.CacheDependency.GetUniqueID%2A> método para generar un identificador único para las dos dependencias que `aggDep` contiene y muestra los identificadores a la página contenedora. A continuación, se agrega un elemento a la <xref:System.Web.Caching.Cache>, usando la <xref:System.Web.Caching.Cache.Insert%2A> método, con `aggDep` como una dependencia.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Web.Caching.CacheDependency.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Web.Caching.CacheDependency" /> ha cambiado.</summary>
        <value><see langword="true" /> si el objeto <see cref="T:System.Web.Caching.CacheDependency" /> presenta cambios; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede agregar un elemento a una aplicación ASP.NET <xref:System.Web.Caching.Cache> con un <xref:System.Web.Caching.CacheDependency>. Cuando el <xref:System.Web.Caching.CacheDependency> cambia, el elemento agregado a la <xref:System.Web.Caching.Cache> se invalidan y se quitan de la memoria caché. Puede utilizar esta propiedad para determinar si un <xref:System.Web.Caching.CacheDependency> ha cambiado y volver a crear el elemento en el <xref:System.Web.Caching.Cache> si se ha producido.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Web.Caching.CacheDependency.HasChanged%2A> propiedad para determinar si un <xref:System.Web.Caching.CacheDependency> cambiado desde la solicitud anterior para un elemento en el <xref:System.Web.Caching.Cache>. El `dt` valor pasado en el `start` parámetro está establecido en <xref:System.DateTime.Now%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/CS/t.cs.aspx#1)]
 [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.CacheDependency_HasChanged/VB/t.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="ItemRemoved">
      <MemberSignature Language="C#" Value="public void ItemRemoved ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ItemRemoved() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.ItemRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Sub ItemRemoved ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ItemRemoved();" />
      <MemberSignature Language="F#" Value="member this.ItemRemoved : unit -&gt; unit" Usage="cacheDependency.ItemRemoved " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Se llama cuando se quita una entrada de caché supervisada.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepDependenciesAlive">
      <MemberSignature Language="C#" Value="public void KeepDependenciesAlive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void KeepDependenciesAlive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.KeepDependenciesAlive" />
      <MemberSignature Language="VB.NET" Value="Public Sub KeepDependenciesAlive ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void KeepDependenciesAlive();" />
      <MemberSignature Language="F#" Value="member this.KeepDependenciesAlive : unit -&gt; unit" Usage="cacheDependency.KeepDependenciesAlive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Actualiza la hora de último acceso de cada elemento en caché que dependa de este elemento.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyDependencyChanged">
      <MemberSignature Language="C#" Value="protected void NotifyDependencyChanged (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void NotifyDependencyChanged(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub NotifyDependencyChanged (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void NotifyDependencyChanged(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.NotifyDependencyChanged : obj * EventArgs -&gt; unit" Usage="cacheDependency.NotifyDependencyChanged (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">Origen del evento.</param>
        <param name="e">Objeto <see cref="T:System.EventArgs" /> que contiene los datos del evento.</param>
        <summary>Notifica al objeto <see cref="T:System.Web.Caching.CacheDependency" /> base que la dependencia representada por una clase <see cref="T:System.Web.Caching.CacheDependency" /> derivada ha cambiado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cualquier clase que deriva la <xref:System.Web.Caching.CacheDependency> clase debe implementar este método.  
  
 Al derivar de la <xref:System.Web.Caching.CacheDependency> (clase), usa la funcionalidad básica de cualquier método o propiedad que no han invalidado. Cuando se crea una instancia de la clase derivada, representa los archivos, claves de caché, las tablas de base de datos u otros objetos arbitrarios que se desean hacer que un elemento almacenado en caché dependa. Cuando cambia un elemento de dependencia, este método notifica a la funcionalidad básica de la <xref:System.Web.Caching.CacheDependency> clase que el elemento ha cambiado, por lo que los valores de la <xref:System.Web.Caching.CacheDependency.HasChanged%2A> y <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> se pueden actualizar las propiedades.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra una clase que hereda de la <xref:System.Web.Caching.CacheDependency> clase. Crea un método público, `ResetDependency`, que usa el <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> método para cambiar la hora en que se modificó la dependencia y, a continuación, llama a la <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> método.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="SetCacheDependencyChanged">
      <MemberSignature Language="C#" Value="public void SetCacheDependencyChanged (Action&lt;object,EventArgs&gt; dependencyChangedAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCacheDependencyChanged(class System.Action`2&lt;object, class System.EventArgs&gt; dependencyChangedAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetCacheDependencyChanged(System.Action{System.Object,System.EventArgs})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCacheDependencyChanged (dependencyChangedAction As Action(Of Object, EventArgs))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCacheDependencyChanged(Action&lt;System::Object ^, EventArgs ^&gt; ^ dependencyChangedAction);" />
      <MemberSignature Language="F#" Value="member this.SetCacheDependencyChanged : Action&lt;obj, EventArgs&gt; -&gt; unit" Usage="cacheDependency.SetCacheDependencyChanged dependencyChangedAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyChangedAction" Type="System.Action&lt;System.Object,System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="dependencyChangedAction">La acción de cambio de la dependencia.</param>
        <summary>Agrega un método de acción para controlar la notificación a la parte interesada de los cambios realizados en esta dependencia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUtcLastModified">
      <MemberSignature Language="C#" Value="protected void SetUtcLastModified (DateTime utcLastModified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetUtcLastModified(valuetype System.DateTime utcLastModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetUtcLastModified (utcLastModified As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetUtcLastModified(DateTime utcLastModified);" />
      <MemberSignature Language="F#" Value="member this.SetUtcLastModified : DateTime -&gt; unit" Usage="cacheDependency.SetUtcLastModified utcLastModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utcLastModified" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utcLastModified">Hora a la que se cambió la dependencia por última vez.</param>
        <summary>Marca la hora a la que se cambió una dependencia por última vez.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra una clase que hereda de la <xref:System.Web.Caching.CacheDependency> clase. Crea un método público, `ResetDependency`, que usa el <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> método para cambiar la hora en que se modificó la dependencia y, a continuación, llama a la <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> método.  
  
 [!code-vb[CacheDependency_Whidbey_Example1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CacheDependency_Whidbey_Example1/VB/cachedependencysample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="TakeOwnership">
      <MemberSignature Language="C#" Value="public bool TakeOwnership ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TakeOwnership() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.CacheDependency.TakeOwnership" />
      <MemberSignature Language="VB.NET" Value="Public Function TakeOwnership () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TakeOwnership();" />
      <MemberSignature Language="F#" Value="member this.TakeOwnership : unit -&gt; bool" Usage="cacheDependency.TakeOwnership " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Permite que el primer usuario declare la propiedad exclusiva de esta dependencia.</summary>
        <returns><see langword="true" /> si el elemento fue el primero en tomar posesión; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se declara que se usa la dependencia. Si otro elemento que previamente se llama a este método y tomó posesión, `false` se devuelve. Un <xref:System.Web.Caching.CacheDependency> sólo puede utilizarse por entrada de una memoria caché. Cuando se agrega un elemento a una memoria caché con las dependencias de caché especificadas, la memoria caché debe tomar posesión de esas dependencias para asegurarse de que no se reutilicen en alguna parte else.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcLastModified">
      <MemberSignature Language="C#" Value="public DateTime UtcLastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcLastModified" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UtcLastModified As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime UtcLastModified { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcLastModified : DateTime" Usage="System.Web.Caching.CacheDependency.UtcLastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la hora a la que se cambió la dependencia por última vez.</summary>
        <value>Hora a la que se cambió la dependencia por última vez.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad se mide en hora Universal coordinada (UTC) (también conocido como hora del meridiano de Greenwich).  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Caching.AggregateCacheDependency> clase para agregar un elemento, con dos <xref:System.Web.Caching.CacheDependency> dependencias, del objeto a la <xref:System.Web.Caching.Cache>. Cuando una solicitud para el <xref:System.Web.Caching.Cache> se realiza elemento, el código comprueba si el elemento está en el <xref:System.Web.Caching.Cache>. Si es así, el <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> se convierte en una cadena y se muestra en la página de propiedad. Si no es así, el elemento y sus dos dependencias se crean y agregan a la <xref:System.Web.Caching.Cache>.  
  
 [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CachingSamples_AggregateCacheDependency1/VB/aggregatecachedependencysamplevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Caching.Cache" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
  </Members>
</Type>