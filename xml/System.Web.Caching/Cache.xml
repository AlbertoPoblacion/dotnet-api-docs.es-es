<Type Name="Cache" FullName="System.Web.Caching.Cache">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9898a825a2e90770ebcff9ce24b2c6b0485fddff" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52201123" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Cache : System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Cache extends System.Object implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Caching.Cache" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cache&#xA;Implements IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cache sealed : System::Collections::IEnumerable" />
  <TypeSignature Language="F#" Value="type Cache = class&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Implementa la caché para una aplicación web. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se crea una instancia de esta clase por dominio de aplicación y sigue siendo válida siempre que el dominio de aplicación permanece activo. Información sobre una instancia de esta clase está disponible a través de la `Cache` propiedad de la <xref:System.Web.HttpContext> objeto o la `Cache` propiedad de la <xref:System.Web.UI.Page> objeto.  
  
> [!NOTE]
>  La <xref:System.Web.Caching.Cache> clase no está diseñada para su uso fuera de las aplicaciones de ASP.NET. Fue diseñado y probado para su uso en ASP.NET para proporcionar almacenamiento en caché para las aplicaciones Web. Para otros tipos de aplicaciones, como aplicaciones de consola o aplicaciones de Windows Forms, utilice la <xref:System.Runtime.Caching.ObjectCache> clase.  
  
   
  
## Examples  
 El ejemplo siguiente es una página que muestra el valor asignado a un elemento en la memoria caché de los usuarios y, a continuación, notifica cuándo se quita el elemento de la memoria caché. Crea un `RemovedCallback` método, que tiene la firma de la `CacheItemRemovedCallback` delegado para notificar a los usuarios cuando se quita el elemento en caché, y usa el <xref:System.Web.Caching.CacheItemRemovedReason> enumeración para explicarles por qué se eliminó. Además, usa el <xref:System.Web.Caching.Cache.Item%2A?displayProperty=nameWithType> propiedad para agregar objetos a la memoria caché y recuperar el valor de esos objetos. En el `AddItemToCache` método, utiliza el <xref:System.Web.Caching.Cache.Add%2A?displayProperty=nameWithType> para agregar un elemento a la memoria caché. Para usar el `CacheItemRemovedCallback` delegar, debe agregar un elemento a la memoria caché con este método o el <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> método, por lo que ASP.NET puede realizar automáticamente el método apropiado se llama cuando se quita el elemento. Personalizado `RemoveItemFromCache` método usa la <xref:System.Web.Caching.Cache.Remove%2A?displayProperty=nameWithType> método para eliminar explícitamente el elemento de la memoria caché, provocando la `RemovedCallback` invocar método.  
  
> [!NOTE]
>  La instancia de caché que se accede mediante el siguiente fragmento es un miembro de la <xref:System.Web.UI.Page> objeto que herede de este ejemplo.  
  
 [!code-aspx-csharp[System.Web.Caching Examples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#1)]
 [!code-aspx-vb[System.Web.Caching Examples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para la ejecución de subprocesos.</threadsafe>
    <altmember cref="T:System.Web.HttpContext" />
    <altmember cref="T:System.Web.Caching.CacheDependency" />
    <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
    <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Web.Caching.Cache" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public object Add (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemPriority priority, System.Web.Caching.CacheItemRemovedCallback onRemoveCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Add(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, valuetype System.Web.Caching.CacheItemPriority priority, class System.Web.Caching.CacheItemRemovedCallback onRemoveCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, priority As CacheItemPriority, onRemoveCallback As CacheItemRemovedCallback) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Add(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemPriority priority, System::Web::Caching::CacheItemRemovedCallback ^ onRemoveCallback);" />
      <MemberSignature Language="F#" Value="member this.Add : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemPriority * System.Web.Caching.CacheItemRemovedCallback -&gt; obj" Usage="cache.Add (key, value, dependencies, absoluteExpiration, slidingExpiration, priority, onRemoveCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Web.Caching.CacheItemPriority" />
        <Parameter Name="onRemoveCallback" Type="System.Web.Caching.CacheItemRemovedCallback" />
      </Parameters>
      <Docs>
        <param name="key">Clave de caché utilizada para hacer referencia al elemento.</param>
        <param name="value">Elemento que se va a agregar a la memoria caché.</param>
        <param name="dependencies">Dependencias de archivo o de clave de caché para el elemento. Cuando cambia alguna dependencia, el objeto ya no es válido y se quita de la caché. Si no hay ninguna dependencia, este parámetro contiene <see langword="null" />.</param>
        <param name="absoluteExpiration">Hora a la que el objeto agregado expira y se quita de la memoria caché. Si se utiliza una expiración variable, el parámetro <paramref name="absoluteExpiration" /> debe ser <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
        <param name="slidingExpiration">Intervalo entre la hora a la que se obtuvo por última vez acceso al objeto agregado y la hora a la que expira dicho objeto. Si este valor es el equivalente a 20 minutos, el objeto expirará y se quitará de la memoria caché a los 20 minutos del último acceso. Si se utiliza una expiración absoluta, el parámetro <paramref name="slidingExpiration" /> debe ser <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
        <param name="priority">Costo relativo del objeto, expresado por la enumeración de <see cref="T:System.Web.Caching.CacheItemPriority" />. La memoria caché utiliza este valor cuando extrae objetos; los objetos de costo inferior se quitan de la memoria caché antes que los objetos con un costo más elevado.</param>
        <param name="onRemoveCallback">Delegado al que, si se proporciona, se llama cuando se quita un objeto de la memoria caché. Se puede utilizar para notificar a las aplicaciones cuándo se eliminan los objetos de la memoria caché.</param>
        <summary>Agrega el elemento especificado al objeto <see cref="T:System.Web.Caching.Cache" /> con directivas de dependencias, expiración y prioridad, así como un delegado que se puede utilizar para notificar a la aplicación cuándo el elemento insertado se quita de la memoria <see langword="Cache" />.</summary>
        <returns>Objeto que representa el elemento que se agregó si el elemento estaba almacenado anteriormente en la memoria caché; de lo contrario, <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las llamadas a este método se producirá un error si un elemento con el mismo `key` parámetro ya está almacenado en el `Cache`. Para sobrescribir la existente `Cache` elemento con el mismo `key` parámetro, use el <xref:System.Web.Caching.Cache.Insert%2A> método.  
  
 No se puede establecer tanto el `absoluteExpiration` y `slidingExpiration` parámetros. Si piensa que el elemento de caché expire en un momento determinado, establezca el `absoluteExpiration` parámetro a la hora concreta y el `slidingExpiration` parámetro <xref:System.Web.Caching.Cache.NoSlidingExpiration>.  
  
 Si piensa que el elemento en caché expire después de una cierta cantidad de tiempo transcurrido desde el elemento tuvo acceso por última vez, establecer el `slidingExpiration` parámetro para el intervalo de expiración y el `absoluteExpiration` parámetro <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un `AddItemToCache` método. Cuando se llama a este método, Establece una `itemRemoved` propiedad `false` y registra un `onRemove` método con una nueva instancia de la <xref:System.Web.Caching.CacheItemRemovedCallback> delegar. La firma del delegado se usa en el `RemovedCallback` método. El `AddItemToCache` método, a continuación, comprueba el valor asociado con el `Key1` clave en la memoria caché. Si el valor es `null`, `Add` método coloca un elemento en la memoria caché con una clave de `Key1`, un valor de `Value 1`, una expiración absoluta de 60 segundos y una prioridad alta de memoria caché. También usa el `onRemove` método como argumento. Esto permite la `RemovedCallback` método al que llamar cuando este elemento se quita de la memoria caché.  
  
> [!NOTE]
>  Para obtener ejemplos de cómo usar el <xref:System.Web.Caching.CacheDependency> clase y el <xref:System.Web.Caching.CacheItemRemovedCallback> delegado, vea [Caching Application Data](https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)).  
  
 [!code-csharp[System.Web.Caching Examples#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#3)]
 [!code-vb[System.Web.Caching Examples#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="key" /> o <paramref name="value" /> se establece en <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="slidingExpiration" /> se establece en un valor menor que <see langword="TimeSpan.Zero" /> o en más de un año.</exception>
        <exception cref="T:System.ArgumentException">Los parámetros <paramref name="absoluteExpiration" /> y <paramref name="slidingExpiration" /> se establecen ambos para el elemento que se intenta agregar a <see langword="Cache" />.</exception>
        <altmember cref="T:System.Web.Caching.CacheDependency" />
        <altmember cref="T:System.Web.Caching.CacheItemPriority" />
        <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Web.Caching.Cache.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de elementos almacenados en la memoria caché.</summary>
        <value>El número de elementos almacenados en la memoria caché.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad puede ser útil al supervisar el rendimiento de su aplicación o al usar la funcionalidad de seguimiento de ASP.NET.  
  
   
  
## Examples  
 En el ejemplo siguiente se obtiene el valor de la `Count` propiedad, lo convierte en una cadena y asigna la cadena a la <xref:System.Web.UI.WebControls.Label.Text%2A> propiedad de un <xref:System.Web.UI.WebControls.Label> control de servidor Web `Label1`.  
  
 [!code-csharp[System.Web.Caching.Cache.Count#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching.Cache.Count/CS/cachecountcs.aspx#1)]
 [!code-vb[System.Web.Caching.Cache.Count#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching.Cache.Count/VB/cachecountvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectivePercentagePhysicalMemoryLimit">
      <MemberSignature Language="C#" Value="public long EffectivePercentagePhysicalMemoryLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 EffectivePercentagePhysicalMemoryLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EffectivePercentagePhysicalMemoryLimit As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long EffectivePercentagePhysicalMemoryLimit { long get(); };" />
      <MemberSignature Language="F#" Value="member this.EffectivePercentagePhysicalMemoryLimit : int64" Usage="System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el porcentaje de memoria física que puede utilizar una aplicación antes de que ASP.NET comience a quitar elementos de la caché.</summary>
        <value>El porcentaje de memoria física disponible para la aplicación.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> propiedad devuelve el porcentaje de memoria física que está disponible para la aplicación. Cuando el porcentaje disponible es baja, el algoritmo de la caché comienza a quitar elementos de la memoria caché.  
  
 El <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> propiedad se puede establecer con el `percentagePhysicalMemoryUsedLimit` atributo de la [elemento cache para el almacenamiento en caché (ASP.NET Settings Schema)](https://msdn.microsoft.com/library/68fa0040-5abf-4c73-93fc-17e3c6af3299) elemento en el archivo de configuración de la aplicación. Si el `percentagePhysicalMemoryUsedLimit` atributo no está establecido, el algoritmo de caché determina el tamaño máximo de la memoria caché y el <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> se calcula la propiedad.  
  
 <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A> se introdujo en .NET Framework versión 3.5.  Para más información, vea [Versiones y dependencias](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      </Docs>
    </Member>
    <Member MemberName="EffectivePrivateBytesLimit">
      <MemberSignature Language="C#" Value="public long EffectivePrivateBytesLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 EffectivePrivateBytesLimit" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EffectivePrivateBytesLimit As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long EffectivePrivateBytesLimit { long get(); };" />
      <MemberSignature Language="F#" Value="member this.EffectivePrivateBytesLimit : int64" Usage="System.Web.Caching.Cache.EffectivePrivateBytesLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de bytes disponible para la caché.</summary>
        <value>Número de bytes disponible para la caché.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A> propiedad devuelve el número de bytes que se puede usar el proceso de aplicación. Una vez que se alcanza este límite, el algoritmo de la caché comienza agresivamente borrado la memoria caché.  
  
 El <xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A> propiedad se puede establecer con el `privateBytesLimit` atributo de la [elemento cache para el almacenamiento en caché (ASP.NET Settings Schema)](https://msdn.microsoft.com/library/68fa0040-5abf-4c73-93fc-17e3c6af3299) elemento en el archivo de configuración de la aplicación. Cuando el `privateBytesLimit` atributo no está establecido, el algoritmo de caché determina el tamaño máximo de la memoria caché y el <xref:System.Web.Caching.Cache.EffectivePrivateBytesLimit%2A> propiedad contiene el tamaño elegido por el algoritmo.  
  
   
  
## Examples  
 <xref:System.Web.Caching.Cache.EffectivePercentagePhysicalMemoryLimit%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public object Get (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Get(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Get (key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Get(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.Get : string -&gt; obj" Usage="cache.Get key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Identificador del elemento de caché que se va a recuperar.</param>
        <summary>Recupera el elemento especificado del objeto <see cref="T:System.Web.Caching.Cache" />.</summary>
        <returns>Elemento de caché recuperado o <see langword="null" /> si no se encuentra la clave.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra cómo recuperar el valor almacenado en caché para un control de servidor de cuadro de texto ASP.NET.  
  
 [!code-csharp[Classic Cache.Get Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Get Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Get Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Get Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="cache.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera un enumerador de diccionario usado para procesar una iteración en la configuración de clave y sus valores incluidos en la memoria caché.</summary>
        <returns>Enumerador para recorrer en iteración el objeto <see cref="T:System.Web.Caching.Cache" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los elementos se pueden sumar o quita de la memoria caché mientras este método es enumerar a través de los elementos.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Collections.IDictionaryEnumerator> objeto, `CacheEnum`, usando la `GetEnumerator` método. El enumerador se desplaza a través de la memoria caché, convierte el valor de cada elemento almacenado en caché en una cadena y, a continuación, escribe los valores en una página de formularios Web Forms.  
  
 [!code-csharp[Cache.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Cache.GetEnumerator/CS/getenumcs.aspx#1)]
 [!code-vb[Cache.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Cache.GetEnumerator/VB/getenumvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inserta un elemento en el objeto <see cref="T:System.Web.Caching.Cache" />. Utilice una de las versiones de este método para sobrescribir un elemento <see langword="Cache" /> existente con el mismo parámetro <paramref name="key" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj -&gt; unit" Usage="cache.Insert (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">Clave de caché utilizada para hacer referencia al elemento.</param>
        <param name="value">Objeto que se va a insertar en la memoria caché.</param>
        <summary>Inserta un elemento en el objeto <see cref="T:System.Web.Caching.Cache" /> con una clave de caché para hacer referencia a su ubicación y utilizando los valores predeterminados que proporciona la enumeración de <see cref="T:System.Web.Caching.CacheItemPriority" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método sobrescribirá un elemento de caché existente cuya clave coincide con el `key` parámetro. El objeto agregado a la caché mediante esta sobrecarga de la `Insert` método se inserta sin dependencias de archivo o la memoria caché, una prioridad de <xref:System.Web.Caching.CacheItemPriority.Default>, una variable el valor de expiración de <xref:System.Web.Caching.Cache.NoSlidingExpiration>y un valor de expiración absoluta de <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo insertar un elemento en caché de una aplicación.  
  
 [!code-csharp[Classic Cache.Insert Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="key" /> o <paramref name="value" /> es <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency -&gt; unit" Usage="cache.Insert (key, value, dependencies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
      </Parameters>
      <Docs>
        <param name="key">Clave de caché utilizada para identificar el elemento.</param>
        <param name="value">Objeto que se va a insertar en la memoria caché.</param>
        <param name="dependencies">Dependencias de archivo o de clave de caché para el objeto insertado. Cuando cambia alguna dependencia, el objeto ya no es válido y se quita de la caché. Si no hay ninguna dependencia, este parámetro contiene <see langword="null" />.</param>
        <summary>Inserta un objeto en <see cref="T:System.Web.Caching.Cache" /> que tiene dependencias de archivo o de clave.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método sobrescribirá un elemento de caché existente cuya clave coincide con el `key` parámetro. El objeto agregado a la caché mediante esta sobrecarga de la `Insert` método se inserta sin dependencias de archivo o la memoria caché, una prioridad de <xref:System.Web.Caching.CacheItemPriority.Default>, una variable el valor de expiración de <xref:System.Web.Caching.Cache.NoSlidingExpiration>y un valor de expiración absoluta de <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo insertar un elemento en caché de una aplicación con una dependencia de caché en un archivo de configuración XML.  
  
 [!code-csharp[Classic Cache.Insert1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="key" /> o <paramref name="value" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.Web.Caching.CacheDependency" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="key">Clave de caché utilizada para hacer referencia al objeto.</param>
        <param name="value">Objeto que se va a insertar en la memoria caché.</param>
        <param name="dependencies">Dependencias de archivo o de clave de caché para el objeto insertado. Cuando cambia alguna dependencia, el objeto ya no es válido y se quita de la caché. Si no hay ninguna dependencia, este parámetro contiene <see langword="null" />.</param>
        <param name="absoluteExpiration">Hora a la que el objeto insertado expira y se quita de la memoria caché. Para evitar posibles problemas con la hora local, como cambios de la hora estándar al horario de verano, utilice <see cref="P:System.DateTime.UtcNow" /> en lugar de <see cref="P:System.DateTime.Now" /> para este valor de parámetro. Si se utiliza una expiración absoluta, el parámetro <paramref name="slidingExpiration" /> debe ser <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
        <param name="slidingExpiration">El intervalo entre la hora del último acceso al objeto insertado y la hora de expiración de dicho objeto. Si este valor equivale a 20 minutos, el objeto expirará y se quitará de la memoria caché 20 minutos después del último acceso al mismo. Si se utiliza una expiración variable, el parámetro <paramref name="absoluteExpiration" /> debe ser <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
        <summary>Inserta un objeto en <see cref="T:System.Web.Caching.Cache" /> con dependencias y directivas de expiración.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método sobrescribirá la existente `Cache` elemento con el mismo `key` parámetro.  
  
 Si el `slidingExpiration` parámetro se establece en <xref:System.Web.Caching.Cache.NoSlidingExpiration>, fecha de expiración variable está deshabilitada. Si establece la `slidingExpiration` parámetro mayor <xref:System.TimeSpan.Zero>, el `absoluteExpiration` parámetro está establecido en <xref:System.DateTime.Now%2A> más el valor contenido en el `slidingExpiration` parámetro. Si se solicita el elemento de la memoria caché antes de la cantidad de tiempo especificado por el `absoluteExpiration` parámetro, el elemento se colocarán en la memoria caché de nuevo, y `absoluteExpiration` nuevo se establecerá en `DateTime.Now` más el valor contenido en el `slidingExpiration` parámetro. Si el elemento no se solicita desde la memoria caché antes de la fecha en la `absoluteExpiration` parámetro, el elemento se quita de la memoria caché. . Se inserta el elemento agregado a la caché mediante esta sobrecarga del método insert con una prioridad de <xref:System.Web.Caching.CacheItemPriority.Default>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo insertar un elemento en caché de una aplicación con una expiración absoluta.  
  
> [!NOTE]
>  Dado que esta forma de la `Insert` método es compatible con las dependencias de caché, si el elemento no tiene ninguna dependencia, debe declarar la `dependency` parámetro como `null` (`Nothing` en Visual Basic) en la lista delimitada por comas de parámetros.  
  
 [!code-csharp[Classic Cache.Insert2 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert2 Example/VB/source.vb#1)]  
  
 El ejemplo siguiente muestra cómo insertar un elemento en la memoria caché con una expiración variable.  
  
 [!code-csharp[Classic Cache.Insert2 Example#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert2 Example/CS/source.cs#2)]
 [!code-vb[Classic Cache.Insert2 Example#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert2 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="key" /> o <paramref name="value" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Se establece el parámetro <paramref name="slidingExpiration" /> en un valor menor que <see langword="TimeSpan.Zero" /> o en el equivalente a más de un año.</exception>
        <exception cref="T:System.ArgumentException">Los parámetros <paramref name="absoluteExpiration" /> y <paramref name="slidingExpiration" /> se establecen ambos para el elemento que se intenta agregar a <see langword="Cache" />.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemUpdateCallback onUpdateCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, class System.Web.Caching.CacheItemUpdateCallback onUpdateCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemUpdateCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, onUpdateCallback As CacheItemUpdateCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemUpdateCallback ^ onUpdateCallback);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemUpdateCallback -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration, onUpdateCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="onUpdateCallback" Type="System.Web.Caching.CacheItemUpdateCallback" />
      </Parameters>
      <Docs>
        <param name="key">Clave de caché que se utiliza para hacer referencia al objeto.</param>
        <param name="value">Objeto que se va a insertar en la memoria caché.</param>
        <param name="dependencies">Dependencias de archivo o de clave de caché para el elemento. Cuando cambia alguna dependencia, el objeto ya no es válido y se quita de la caché. Si no hay ninguna dependencia, este parámetro contiene <see langword="null" />.</param>
        <param name="absoluteExpiration">Hora a la que el objeto insertado expira y se quita de la memoria caché. Para evitar posibles problemas con la hora local, como cambios de la hora estándar al horario de verano, utilice <see cref="P:System.DateTime.UtcNow" /> en lugar de <see cref="P:System.DateTime.Now" /> para este valor de parámetro. Si se utiliza una expiración absoluta, el parámetro <paramref name="slidingExpiration" /> debe estar establecido en <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
        <param name="slidingExpiration">Intervalo entre la hora a la que se obtuvo acceso por última vez al objeto almacenado en caché y la hora a la que expira dicho objeto. Si este valor equivale a 20 minutos, el objeto expirará y se quitará de la memoria caché 20 minutos después del último acceso al mismo. Si se utiliza una expiración variable, el parámetro <paramref name="absoluteExpiration" /> debe estar establecido en <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
        <param name="onUpdateCallback">Delegado al que se llamará antes de que se quite el objeto de la memoria caché. Puede utilizarlo para actualizar el elemento almacenado en caché y asegurarse de que no se quite de la memoria caché.</param>
        <summary>Inserta un objeto en el objeto <see cref="T:System.Web.Caching.Cache" /> junto con las dependencias, las directivas de expiración y un delegado que puede usar para notificar a la aplicación antes de que se quite el elemento de la memoria caché.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Caching.Cache.Insert%2A> método le permite insertar un nuevo elemento en la memoria caché y proporcionar un delegado que se llama antes de que el elemento se quita de la memoria caché. En el delegado, puede actualizar el elemento en caché y, por tanto, evitar que se eliminen de la memoria caché.  
  
 Este método sobrescribirá la existente `Cache` elemento con el mismo `key` parámetro.  
  
 No se puede establecer tanto el `absoluteExpiration` y `slidingExpiration` parámetros. Si piensa que el elemento de caché expire en un momento determinado, establezca el `absoluteExpiration` parámetro a la hora concreta y el `slidingExpiration` parámetro <xref:System.Web.Caching.Cache.NoSlidingExpiration>.  
  
 Si piensa que el elemento en caché expire después de un período de tiempo transcurrido desde el elemento de último acceso, establecer el `slidingExpiration` establecido en el intervalo de expiración y la `absoluteExpiration` parámetro <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El <paramref name="key" />, <paramref name="value" /> o el parámetro <paramref name="onUpdateCallback" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Se establece el parámetro <paramref name="slidingExpiration" /> en un valor menor que <see langword="TimeSpan.Zero" /> o en el equivalente a más de un año.</exception>
        <exception cref="T:System.ArgumentException">Los parámetros <paramref name="absoluteExpiration" /> y <paramref name="slidingExpiration" /> se establecen ambos para el elemento que se intenta agregar a <see langword="Cache" />.  
  
O bien 
El parámetro <paramref name="dependencies" /> está establecido en <see langword="null" />, el parámetro <paramref name="absoluteExpiration" /> está establecido en <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" /> y el parámetro <paramref name="slidingExpiration" /> está establecido en <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</exception>
        <altmember cref="T:System.Web.Caching.CacheItemUpdateCallback" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (string key, object value, System.Web.Caching.CacheDependency dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System.Web.Caching.CacheItemPriority priority, System.Web.Caching.CacheItemRemovedCallback onRemoveCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(string key, object value, class System.Web.Caching.CacheDependency dependencies, valuetype System.DateTime absoluteExpiration, valuetype System.TimeSpan slidingExpiration, valuetype System.Web.Caching.CacheItemPriority priority, class System.Web.Caching.CacheItemRemovedCallback onRemoveCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Insert(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (key As String, value As Object, dependencies As CacheDependency, absoluteExpiration As DateTime, slidingExpiration As TimeSpan, priority As CacheItemPriority, onRemoveCallback As CacheItemRemovedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Insert(System::String ^ key, System::Object ^ value, System::Web::Caching::CacheDependency ^ dependencies, DateTime absoluteExpiration, TimeSpan slidingExpiration, System::Web::Caching::CacheItemPriority priority, System::Web::Caching::CacheItemRemovedCallback ^ onRemoveCallback);" />
      <MemberSignature Language="F#" Value="member this.Insert : string * obj * System.Web.Caching.CacheDependency * DateTime * TimeSpan * System.Web.Caching.CacheItemPriority * System.Web.Caching.CacheItemRemovedCallback -&gt; unit" Usage="cache.Insert (key, value, dependencies, absoluteExpiration, slidingExpiration, priority, onRemoveCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="dependencies" Type="System.Web.Caching.CacheDependency" />
        <Parameter Name="absoluteExpiration" Type="System.DateTime" />
        <Parameter Name="slidingExpiration" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Web.Caching.CacheItemPriority" />
        <Parameter Name="onRemoveCallback" Type="System.Web.Caching.CacheItemRemovedCallback" />
      </Parameters>
      <Docs>
        <param name="key">Clave de caché utilizada para hacer referencia al objeto.</param>
        <param name="value">Objeto que se va a insertar en la memoria caché.</param>
        <param name="dependencies">Dependencias de archivo o de clave de caché para el elemento. Cuando cambia alguna dependencia, el objeto ya no es válido y se quita de la caché. Si no hay ninguna dependencia, este parámetro contiene <see langword="null" />.</param>
        <param name="absoluteExpiration">Hora a la que el objeto insertado expira y se quita de la memoria caché. Para evitar posibles problemas con la hora local, como cambios de la hora estándar al horario de verano, utilice <see cref="P:System.DateTime.UtcNow" /> en lugar de <see cref="P:System.DateTime.Now" /> para este valor de parámetro. Si se utiliza una expiración absoluta, el parámetro <paramref name="slidingExpiration" /> debe ser <see cref="F:System.Web.Caching.Cache.NoSlidingExpiration" />.</param>
        <param name="slidingExpiration">Intervalo entre la hora a la que se obtuvo por última vez acceso al objeto insertado y la hora a la que expira dicho objeto. Si este valor equivale a 20 minutos, el objeto expirará y se quitará de la memoria caché 20 minutos después del último acceso al mismo. Si se utiliza una expiración variable, el parámetro <paramref name="absoluteExpiration" /> debe ser <see cref="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />.</param>
        <param name="priority">Costo del objeto con respecto a otros elementos almacenados en la memoria caché, expresado por la enumeración de <see cref="T:System.Web.Caching.CacheItemPriority" />. La memoria caché utiliza este valor cuando extrae objetos; los objetos de costo inferior se quitan de la memoria caché antes que los objetos con un costo más elevado.</param>
        <param name="onRemoveCallback">Delegado al que, si se proporciona, se llama cuando se quita un objeto de la memoria caché. Se puede utilizar para notificar a las aplicaciones cuándo se eliminan los objetos de la memoria caché.</param>
        <summary>Inserta un objeto en el objeto <see cref="T:System.Web.Caching.Cache" /> con directivas de dependencias, expiración y prioridad, así como un delegado que se puede utilizar para notificar a la aplicación cuándo se quita de la memoria <see langword="Cache" /> el elemento insertado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método sobrescribirá la existente `Cache` elemento con el mismo `key` parámetro.  
  
 No se puede establecer tanto el `absoluteExpiration` y `slidingExpiration` parámetros. Si piensa que el elemento de caché expire en un momento determinado, establezca el `absoluteExpiration` parámetro a la hora concreta y el `slidingExpiration` parámetro <xref:System.Web.Caching.Cache.NoSlidingExpiration>.  
  
 Si piensa que el elemento en caché expire después de una cierta cantidad de tiempo transcurrido desde el último acceso al elemento, establecer el `slidingExpiration` parámetro para el intervalo de expiración y el `absoluteExpiration` parámetro <xref:System.Web.Caching.Cache.NoAbsoluteExpiration>.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo asignar una prioridad alta del elemento cuando se inserta en la aplicación `Cache` objeto.  
  
> [!NOTE]
>  Para obtener más información sobre cómo usar este método con el <xref:System.Web.Caching.CacheItemRemovedCallback> delegado, vea [Cómo: notificar a una aplicación cuando un elemento se quita de la memoria caché](https://msdn.microsoft.com/library/38c33aa0-afe9-40ba-a1a4-1ebab95286ef).  
  
 [!code-csharp[Classic Cache.Insert3 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.Insert3 Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.Insert3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.Insert3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="key" /> o <paramref name="value" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Se establece el parámetro <paramref name="slidingExpiration" /> en un valor menor que <see langword="TimeSpan.Zero" /> o en el equivalente a más de un año.</exception>
        <exception cref="T:System.ArgumentException">Los parámetros <paramref name="absoluteExpiration" /> y <paramref name="slidingExpiration" /> se establecen ambos para el elemento que se intenta agregar a <see langword="Cache" />.</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.Web.Caching.CacheItemPriority" />
        <altmember cref="T:System.Web.Caching.CacheItemRemovedCallback" />
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.Caching.Cache.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ key); void set(System::String ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Web.Caching.Cache.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Objeto <see cref="T:System.String" /> que representa la clave del elemento en caché.</param>
        <summary>Obtiene o establece el elemento en caché de la clave especificada.</summary>
        <value>Elemento en caché especificado.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede utilizar esta propiedad para recuperar el valor de un elemento de caché especificado, o para agregar un elemento y una clave correspondiente a la memoria caché. Adición de caché de un elemento mediante el <xref:System.Web.Caching.Cache.Item%2A> propiedad es equivalente a llamar a la <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=nameWithType> método.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el `Item` propiedad para recuperar el valor de un objeto almacenado en caché asociado con el `Key1` clave. A continuación, usa el <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType> método para escribir el valor y el texto de introducción y el elemento B HTML en una página de formularios Web Forms.  
  
 [!code-csharp[System.Web.Caching Examples#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#5)]
 [!code-vb[System.Web.Caching Examples#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#5)]  
  
 El ejemplo siguiente se muestra cómo utilizar esta propiedad para insertar el valor de un cuadro de texto en la memoria caché.  
  
 [!code-csharp[Classic Cache.this Example#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.this Example/CS/source.cs#2)]
 [!code-vb[Classic Cache.this Example#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.this Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="NoAbsoluteExpiration">
      <MemberSignature Language="C#" Value="public static readonly DateTime NoAbsoluteExpiration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime NoAbsoluteExpiration" />
      <MemberSignature Language="DocId" Value="F:System.Web.Caching.Cache.NoAbsoluteExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoAbsoluteExpiration As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime NoAbsoluteExpiration;" />
      <MemberSignature Language="F#" Value=" staticval mutable NoAbsoluteExpiration : DateTime" Usage="System.Web.Caching.Cache.NoAbsoluteExpiration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se utiliza en el parámetro <paramref name="absoluteExpiration" /> de una llamada al método <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> para indicar que el elemento no debe expirar nunca. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se utiliza, este campo se establece la `absoluteExpiration` igual al parámetro <xref:System.DateTime.MaxValue>, que es una constante que representa el mayor tamaño posible `DateTime` valor 31/12/9999 11:59:59 PM.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar el `NoAbsoluteExpiration` campo para deshabilitar la caducidad absoluta al insertar un elemento en el `Cache`.  
  
 [!code-csharp[Classic Cache.NoAbsoluteExpiration Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.NoAbsoluteExpiration Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.NoAbsoluteExpiration Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.NoAbsoluteExpiration Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="NoSlidingExpiration">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan NoSlidingExpiration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan NoSlidingExpiration" />
      <MemberSignature Language="DocId" Value="F:System.Web.Caching.Cache.NoSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoSlidingExpiration As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan NoSlidingExpiration;" />
      <MemberSignature Language="F#" Value=" staticval mutable NoSlidingExpiration : TimeSpan" Usage="System.Web.Caching.Cache.NoSlidingExpiration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se utiliza como el parámetro <paramref name="slidingExpiration" /> en una llamada al método <see cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" /> o <see cref="M:System.Web.Caching.Cache.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)" />para deshabilitar las expiraciones variables. Este campo es de solo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se utiliza, este campo se establece la `slidingExpiration` parámetro para el <xref:System.TimeSpan.Zero?displayProperty=nameWithType> campo, que tiene un valor constante de cero. El elemento en caché expire de acuerdo con la `absoluteExpiration` parámetro asociado a la `Insert` o `Add` llamada al método.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el método Insert para agregar un elemento a la <xref:System.Web.Caching.Cache> objeto utilizando el `NoSlidingExpiration` campo.  
  
 [!code-csharp[Classic Cache.NoSlidingExpiration Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Cache.NoSlidingExpiration Example/CS/source.cs#1)]
 [!code-vb[Classic Cache.NoSlidingExpiration Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Cache.NoSlidingExpiration Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.TimeSpan.Zero" />
        <altmember cref="M:System.Web.Caching.Cache.Insert(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public object Remove (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Remove(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Remove(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; obj" Usage="cache.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Identificador de <see cref="T:System.String" /> del elemento de caché que se va a quitar.</param>
        <summary>Quita el elemento especificado del objeto <see cref="T:System.Web.Caching.Cache" /> de la aplicación.</summary>
        <returns>Elemento quitado de la memoria <see langword="Cache" />. Si no se encuentra el valor en el parámetro de clave, devuelve <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea un `RemoveItemFromCache` método. Cuando se llama a este método, utiliza el <xref:System.Web.Caching.Cache.Item%2A> propiedad para comprobar si la memoria caché contiene un objeto que está asociado con un `Key1` valor de clave. Si es así, el `Remove` método se llama para quitar el objeto.  
  
 [!code-csharp[System.Web.Caching Examples#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Caching Examples/CS/cachecs.aspx#4)]
 [!code-vb[System.Web.Caching Examples#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Caching Examples/VB/cachevb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/206f977d-7860-4d20-bdd5-c3b3d8479f3d(v=vs.100)">Almacenamiento en caché datos de la aplicación</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Caching.Cache.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un enumerador que puede recorrer en iteración la colección de objetos <see cref="T:System.Web.Caching.Cache" />.</summary>
        <returns>Enumerador que puede recorrer en iteración la colección de objetos <see cref="T:System.Web.Caching.Cache" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>