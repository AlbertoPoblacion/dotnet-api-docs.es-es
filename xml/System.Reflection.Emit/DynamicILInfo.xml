<Type Name="DynamicILInfo" FullName="System.Reflection.Emit.DynamicILInfo">
  <TypeSignature Language="C#" Value="public class DynamicILInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicILInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicILInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicILInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicILInfo" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="486dd-101">Proporciona compatibilidad con relación a las diferentes formas existentes a la hora de generar el lenguaje intermedio de Microsoft (MSIL) y metadatos para un método dinámico, incluidos métodos para la creación de símbolos (token) y para la inserción de código, control de excepciones y objetos binarios (BLOB) para la firma de variables locales.</span><span class="sxs-lookup"><span data-stu-id="486dd-101">Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-102">El <xref:System.Reflection.Emit.DynamicILInfo> clase permite a los desarrolladores escribir sus propios generadores de MSIL en lugar de usar <xref:System.Reflection.Emit.ILGenerator>.</span><span class="sxs-lookup"><span data-stu-id="486dd-102">The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.</span></span>  
  
 <span data-ttu-id="486dd-103">Para crear instancias de otros tipos, llamar a métodos y así sucesivamente, el MSIL que se genera debe incluir símbolos (token) para esas entidades.</span><span class="sxs-lookup"><span data-stu-id="486dd-103">To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</span></span> <span data-ttu-id="486dd-104">El <xref:System.Reflection.Emit.DynamicILInfo> clase proporciona varias sobrecargas de la <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> método, que devuelven símbolos (token) válido en el ámbito del elemento actual <xref:System.Reflection.Emit.DynamicILInfo>.</span><span class="sxs-lookup"><span data-stu-id="486dd-104">The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>.</span></span> <span data-ttu-id="486dd-105">Por ejemplo, si tiene que llamar a una sobrecarga de la <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> método, puede obtener un <xref:System.RuntimeMethodHandle> para que sobrecarga y pasarlo a la <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> método para obtener un token para incrustar en el MSIL.</span><span class="sxs-lookup"><span data-stu-id="486dd-105">For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.</span></span>  
  
 <span data-ttu-id="486dd-106">Una vez que haya creado <xref:System.Byte> matrices para la firma de variable local, excepciones y cuerpo de código, puede usar el <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, y <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> métodos para insertarlos en la <xref:System.Reflection.Emit.DynamicMethod> asociada a su <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="486dd-106">Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="486dd-107">Generar sus propios metadatos y MSIL es necesario estar familiarizado con la documentación de Common Language Infrastructure (CLI), especialmente en "Partition II: definición y semántica de los metadatos" y "Partition III: CIL Instruction Set".</span><span class="sxs-lookup"><span data-stu-id="486dd-107">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="486dd-108">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="486dd-108">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="486dd-109">No use <xref:System.Reflection.Emit.DynamicILInfo> para generar el código que crea un delegado a otro método dinámico llamando directamente al constructor de delegado.</span><span class="sxs-lookup"><span data-stu-id="486dd-109">Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</span></span> <span data-ttu-id="486dd-110">En su lugar, use la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método para crear el delegado.</span><span class="sxs-lookup"><span data-stu-id="486dd-110">Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate.</span></span> <span data-ttu-id="486dd-111">Un delegado que se crea con el constructor de delegado no tiene una referencia para el método dinámico de destino.</span><span class="sxs-lookup"><span data-stu-id="486dd-111">A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</span></span> <span data-ttu-id="486dd-112">El método dinámico se podría reclamado por la recolección de elementos mientras el delegado todavía está en uso.</span><span class="sxs-lookup"><span data-stu-id="486dd-112">The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DynamicMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Emit.DynamicMethod DynamicMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicMethod As DynamicMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::DynamicMethod ^ DynamicMethod { System::Reflection::Emit::DynamicMethod ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="486dd-113">Obtiene el método dinámico cuyo cuerpo viene generado por la instancia actual.</span><span class="sxs-lookup"><span data-stu-id="486dd-113">Gets the dynamic method whose body is generated by the current instance.</span></span></summary>
        <value><span data-ttu-id="486dd-114">Objeto <see cref="T:System.Reflection.Emit.DynamicMethod" /> que representa el método dinámico para el cual está generando código el objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</span><span class="sxs-lookup"><span data-stu-id="486dd-114">A <see cref="T:System.Reflection.Emit.DynamicMethod" /> object representing the dynamic method for which the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object is generating code.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-115">Un <xref:System.Reflection.Emit.DynamicILInfo> objeto siempre está asociado a un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="486dd-115">A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method.</span></span> <span data-ttu-id="486dd-116">El propósito de la <xref:System.Reflection.Emit.DynamicILInfo> clase es proporcionar otra forma de insertar la secuencia MSIL, el control de excepciones y la firma de variable local en un método dinámico, para los desarrolladores que deseen generan MSIL sin utilizar la <xref:System.Reflection.Emit.ILGenerator> clase.</span><span class="sxs-lookup"><span data-stu-id="486dd-116">The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTokenFor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="486dd-117">Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa una cadena, un campo, un método, un tipo o una firma en la secuencia de MSIL para el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-117">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (signature As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="signature"><span data-ttu-id="486dd-118">Matriz que contiene la firma.</span><span class="sxs-lookup"><span data-stu-id="486dd-118">An array that contains the signature.</span></span></param>
        <summary><span data-ttu-id="486dd-119">Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa la firma para el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-119">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing the signature for the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="486dd-120">Símbolo (token) que se puede incrustar en los metadatos y en la secuencia de MSIL para el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-120">A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-121">Para obtener información sobre objetos binarios de firma, consulte la documentación de Common Language Infrastructure (CLI), especialmente "partición II: definición y semántica de los metadatos".</span><span class="sxs-lookup"><span data-stu-id="486dd-121">For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="486dd-122">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="486dd-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(class System.Reflection.Emit.DynamicMethod method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As DynamicMethod) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::Reflection::Emit::DynamicMethod ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.DynamicMethod" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="486dd-123">Método dinámico al que se va a llamar.</span><span class="sxs-lookup"><span data-stu-id="486dd-123">The dynamic method to call.</span></span></param>
        <summary><span data-ttu-id="486dd-124">Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un método dinámico al que llamar desde el método asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-124">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a dynamic method to be called from the associated method.</span></span></summary>
        <returns><span data-ttu-id="486dd-125">Símbolo (token) que se puede incrustar en la secuencia de MSIL para el método dinámico asociado, como el destino de una instrucción de MSIL.</span><span class="sxs-lookup"><span data-stu-id="486dd-125">A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-126">El token devuelto por esta sobrecarga del método le permite llamar a un método dinámico desde el método dinámico asociado con el actual <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="486dd-126">The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="486dd-127">Para llamar el método dinámico asociado de forma recursiva, pase el valor de la <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="486dd-127">To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="field"><span data-ttu-id="486dd-128">Campo al que se va a obtener acceso.</span><span class="sxs-lookup"><span data-stu-id="486dd-128">The field to be accessed.</span></span></param>
        <summary><span data-ttu-id="486dd-129">Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un campo al que se puede obtener acceso desde el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-129">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="486dd-130">Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL con acceso a campos, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</span><span class="sxs-lookup"><span data-stu-id="486dd-130">A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-131">Debe obtener un token para cualquier campo que vayan a tener acceso el método dinámico asociado con el actual <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="486dd-131">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="486dd-132">Utilice la <xref:System.Type.GetField%2A?displayProperty=nameWithType> método para obtener un <xref:System.Reflection.FieldInfo> en el campo que desea tener acceso, a continuación, use la <xref:System.Reflection.FieldInfo.FieldHandle%2A> propiedad que se va a obtener el <xref:System.RuntimeFieldHandle>.</span><span class="sxs-lookup"><span data-stu-id="486dd-132">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="486dd-133">Método al que se va a obtener acceso.</span><span class="sxs-lookup"><span data-stu-id="486dd-133">The method to be accessed.</span></span></param>
        <summary><span data-ttu-id="486dd-134">Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un método al que se puede obtener acceso desde el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-134">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method to be accessed from the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="486dd-135">Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL con acceso a métodos, como <see cref="F:System.Reflection.Emit.OpCodes.Call" /> o <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</span><span class="sxs-lookup"><span data-stu-id="486dd-135">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-136">Debe obtener un token de cualquier método que vayan a tener acceso el método dinámico asociado con el actual <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="486dd-136">You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="486dd-137">Utilice la <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> método para obtener un <xref:System.Reflection.MethodInfo> para el método que desee obtener acceso y, a continuación, utilizar el <xref:System.Reflection.MethodBase.MethodHandle%2A> propiedad que se va a obtener el <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="486dd-137">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="486dd-138">Para un método que pertenece a un tipo genérico, use la <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> sobrecarga de método y especifique un <xref:System.RuntimeTypeHandle> para el tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="486dd-138">For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeTypeHandle type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeTypeHandle type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (type As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeTypeHandle type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="486dd-139">Tipo que se va a utilizar.</span><span class="sxs-lookup"><span data-stu-id="486dd-139">The type to be used.</span></span></param>
        <summary><span data-ttu-id="486dd-140">Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un tipo que se puede utilizar en el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-140">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a type to be used in the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="486dd-141">Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL que necesita un tipo, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</span><span class="sxs-lookup"><span data-stu-id="486dd-141">A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-142">El token devuelto por esta sobrecarga del método permite definir un tipo de variable local y emitir MSIL para crear una instancia de un tipo en el método dinámico asociado con el actual <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="486dd-142">The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="486dd-143">Para obtener un <xref:System.RuntimeTypeHandle> que representa un tipo, use la <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> propiedad.</span><span class="sxs-lookup"><span data-stu-id="486dd-143">To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (string literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(string literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (literal As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::String ^ literal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="literal"><span data-ttu-id="486dd-144">La cadena que que se va a utilizar.</span><span class="sxs-lookup"><span data-stu-id="486dd-144">The string to be used.</span></span></param>
        <summary><span data-ttu-id="486dd-145">Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un literal de cadena que se puede utilizar en el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-145">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string literal to be used in the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="486dd-146">Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL que necesita una cadena, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</span><span class="sxs-lookup"><span data-stu-id="486dd-146">A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="field"><span data-ttu-id="486dd-147">Campo al que se va a obtener acceso.</span><span class="sxs-lookup"><span data-stu-id="486dd-147">The field to be accessed.</span></span></param>
        <param name="contextType"><span data-ttu-id="486dd-148">Tipo genérico al que pertenece el campo.</span><span class="sxs-lookup"><span data-stu-id="486dd-148">The generic type the field belongs to.</span></span></param>
        <summary><span data-ttu-id="486dd-149">Obtiene un token, válido en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un campo al que se puede obtener acceso desde el método dinámico asociado; el campo es del tipo genérico especificado.</span><span class="sxs-lookup"><span data-stu-id="486dd-149">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="486dd-150">Token que puede utilizarse como operando de una instrucción MSIL que obtiene acceso a campos en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</span><span class="sxs-lookup"><span data-stu-id="486dd-150">A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-151">Debe obtener un token para cualquier campo que vayan a tener acceso el método dinámico asociado con el actual <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="486dd-151">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="486dd-152">Utilice la <xref:System.Type.GetField%2A?displayProperty=nameWithType> método para obtener un <xref:System.Reflection.FieldInfo> para el campo que desee obtener acceso y, a continuación, utilizar el <xref:System.Reflection.FieldInfo.FieldHandle%2A> propiedad que se va a obtener el <xref:System.RuntimeFieldHandle>.</span><span class="sxs-lookup"><span data-stu-id="486dd-152">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="486dd-153">Método.</span><span class="sxs-lookup"><span data-stu-id="486dd-153">The method.</span></span></param>
        <param name="contextType"><span data-ttu-id="486dd-154">Tipo genérico al que pertenece el método.</span><span class="sxs-lookup"><span data-stu-id="486dd-154">The generic type the method belongs to.</span></span></param>
        <summary><span data-ttu-id="486dd-155">Obtiene un símbolo (token), válido en el ámbito del <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual, que representa un método en un tipo genérico.</span><span class="sxs-lookup"><span data-stu-id="486dd-155">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method on a generic type.</span></span></summary>
        <returns><span data-ttu-id="486dd-156">Símbolo (token) que se puede utilizar como el operando de una instrucción MSIL con acceso a métodos, como <see cref="F:System.Reflection.Emit.OpCodes.Call" /> o <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, en el ámbito del objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> actual.</span><span class="sxs-lookup"><span data-stu-id="486dd-156">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-157">Debe obtener un token de cualquier método que llamará el método dinámico asociado con el actual <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="486dd-157">You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="486dd-158">Utilice la <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> método para obtener un <xref:System.Reflection.MethodInfo> para el método que desea llamar y, a continuación, utilice la <xref:System.Reflection.MethodBase.MethodHandle%2A> propiedad que se va a obtener el <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="486dd-158">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="486dd-159">Establece el cuerpo de código del método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-159">Sets the code body of the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte[] code, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8[] code, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCode (code As Byte(), maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(cli::array &lt;System::Byte&gt; ^ code, int maxStackSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte[]" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code"><span data-ttu-id="486dd-160">Matriz que contiene la secuencia de MSIL.</span><span class="sxs-lookup"><span data-stu-id="486dd-160">An array that contains the MSIL stream.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="486dd-161">Número máximo de elementos en la pila de operandos cuando se está ejecutando el método.</span><span class="sxs-lookup"><span data-stu-id="486dd-161">The maximum number of items on the operand stack when the method is executing.</span></span></param>
        <summary><span data-ttu-id="486dd-162">Establece el cuerpo de código del método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-162">Sets the code body of the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-163">Se realiza ninguna comprobación de validez en la secuencia de MSIL.</span><span class="sxs-lookup"><span data-stu-id="486dd-163">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="486dd-164">Llamar a este método una segunda vez, reemplaza la primera secuencia MSIL con la segunda.</span><span class="sxs-lookup"><span data-stu-id="486dd-164">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="486dd-165">Generar sus propios metadatos y MSIL es necesario estar familiarizado con la documentación de Common Language Infrastructure (CLI), especialmente en "Partition II: definición y semántica de los metadatos" y "Partition III: CIL Instruction Set".</span><span class="sxs-lookup"><span data-stu-id="486dd-165">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="486dd-166">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="486dd-166">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8* code, int32 codeSize, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(System::Byte* code, int codeSize, int maxStackSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte*" />
        <Parameter Name="codeSize" Type="System.Int32" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code"><span data-ttu-id="486dd-167">Puntero a una matriz de bytes que contiene la secuencia de MSIL.</span><span class="sxs-lookup"><span data-stu-id="486dd-167">A pointer to a byte array containing the MSIL stream.</span></span></param>
        <param name="codeSize"><span data-ttu-id="486dd-168">Número de bytes de la secuencia de MSIL.</span><span class="sxs-lookup"><span data-stu-id="486dd-168">The number of bytes in the MSIL stream.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="486dd-169">Número máximo de elementos en la pila de operandos cuando se está ejecutando el método.</span><span class="sxs-lookup"><span data-stu-id="486dd-169">The maximum number of items on the operand stack when the method is executing.</span></span></param>
        <summary><span data-ttu-id="486dd-170">Establece el cuerpo de código del método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-170">Sets the code body of the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-171">Se realiza ninguna comprobación de validez en la secuencia de MSIL.</span><span class="sxs-lookup"><span data-stu-id="486dd-171">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="486dd-172">Llamar a este método una segunda vez, reemplaza la primera secuencia MSIL con la segunda.</span><span class="sxs-lookup"><span data-stu-id="486dd-172">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="486dd-173">Generar sus propios metadatos y MSIL es necesario estar familiarizado con la documentación de Common Language Infrastructure (CLI), especialmente "partición II: definición y semántica de los metadatos" y "partición III: conjunto de instrucciones de CIL."</span><span class="sxs-lookup"><span data-stu-id="486dd-173">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</span></span> <span data-ttu-id="486dd-174">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="486dd-174">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="486dd-175"><paramref name="code" /> es <see langword="null" /> y <paramref name="codeSize" /> es mayor que 0.</span><span class="sxs-lookup"><span data-stu-id="486dd-175"><paramref name="code" /> is <see langword="null" /> and <paramref name="codeSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="486dd-176"><paramref name="codeSize" /> es menor que 0.</span><span class="sxs-lookup"><span data-stu-id="486dd-176"><paramref name="codeSize" /> is less than 0.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="486dd-177">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="486dd-177">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="486dd-178">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="486dd-178">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetExceptions">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="486dd-179">Establece los metadatos de excepción del método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-179">Sets the exception metadata for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte[] exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8[] exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetExceptions (exceptions As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(cli::array &lt;System::Byte&gt; ^ exceptions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="exceptions"><span data-ttu-id="486dd-180">Matriz que contiene los metadatos de excepción.</span><span class="sxs-lookup"><span data-stu-id="486dd-180">An array that contains the exception metadata.</span></span></param>
        <summary><span data-ttu-id="486dd-181">Establece los metadatos de excepción del método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-181">Sets the exception metadata for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-182">Los metadatos de excepción para un método definen la ubicación y el tamaño de todos los `try`, `catch`, `finally`, filtro y bloques de errores.</span><span class="sxs-lookup"><span data-stu-id="486dd-182">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="486dd-183">Para obtener información sobre el diseño de estos metadatos, consulte la documentación de Common Language Infrastructure (CLI), especialmente "partición II: definición y semántica de los metadatos".</span><span class="sxs-lookup"><span data-stu-id="486dd-183">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="486dd-184">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="486dd-184">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8* exceptions, int32 exceptionsSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(System::Byte* exceptions, int exceptionsSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte*" />
        <Parameter Name="exceptionsSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exceptions"><span data-ttu-id="486dd-185">Puntero a una matriz de bytes que contiene los metadatos de excepción.</span><span class="sxs-lookup"><span data-stu-id="486dd-185">A pointer to a byte array containing the exception metadata.</span></span></param>
        <param name="exceptionsSize"><span data-ttu-id="486dd-186">Número de bytes de los metadatos de excepción.</span><span class="sxs-lookup"><span data-stu-id="486dd-186">The number of bytes of exception metadata.</span></span></param>
        <summary><span data-ttu-id="486dd-187">Establece los metadatos de excepción del método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-187">Sets the exception metadata for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-188">Los metadatos de excepción para un método definen la ubicación y el tamaño de todos los `try`, `catch`, `finally`, filtro y bloques de errores.</span><span class="sxs-lookup"><span data-stu-id="486dd-188">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="486dd-189">Para obtener información sobre el diseño de estos metadatos, consulte la documentación de Common Language Infrastructure (CLI), especialmente en "Partition II: definición y semántica de los metadatos" y "Partition III: CIL Instruction Set".</span><span class="sxs-lookup"><span data-stu-id="486dd-189">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="486dd-190">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="486dd-190">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="486dd-191"><paramref name="exceptions" /> es <see langword="null" /> y <paramref name="exceptionSize" /> es mayor que 0.</span><span class="sxs-lookup"><span data-stu-id="486dd-191"><paramref name="exceptions" /> is <see langword="null" /> and <paramref name="exceptionSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="486dd-192"><paramref name="exceptionSize" /> es menor que 0.</span><span class="sxs-lookup"><span data-stu-id="486dd-192"><paramref name="exceptionSize" /> is less than 0.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="486dd-193">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="486dd-193">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="486dd-194">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="486dd-194">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetLocalSignature">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="486dd-195">Establece la firma de variable local que describe el diseño de las variables locales para el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-195">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte[] localSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8[] localSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalSignature (localSignature As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(cli::array &lt;System::Byte&gt; ^ localSignature);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="localSignature"><span data-ttu-id="486dd-196">Matriz que contiene el diseño de las variables locales para el objeto <see cref="T:System.Reflection.Emit.DynamicMethod" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-196">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></param>
        <summary><span data-ttu-id="486dd-197">Establece la firma de variable local que describe el diseño de las variables locales para el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-197">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-198">La firma de variable local describe el diseño de variables locales del método.</span><span class="sxs-lookup"><span data-stu-id="486dd-198">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="486dd-199">Para simplificar la creación de la firma de variable local, use la `static` (`Shared` en Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> método para obtener un <xref:System.Reflection.Emit.SignatureHelper> para la firma local.</span><span class="sxs-lookup"><span data-stu-id="486dd-199">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="486dd-200">Para obtener información sobre firmas de variables locales, consulte la documentación de Common Language Infrastructure (CLI), especialmente "partición II: definición y semántica de los metadatos".</span><span class="sxs-lookup"><span data-stu-id="486dd-200">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="486dd-201">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="486dd-201">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte* localSignature, int signatureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8* localSignature, int32 signatureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(System::Byte* localSignature, int signatureSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte*" />
        <Parameter Name="signatureSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localSignature"><span data-ttu-id="486dd-202">Matriz que contiene el diseño de las variables locales para el objeto <see cref="T:System.Reflection.Emit.DynamicMethod" /> asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-202">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></param>
        <param name="signatureSize"><span data-ttu-id="486dd-203">Número de bytes de la firma.</span><span class="sxs-lookup"><span data-stu-id="486dd-203">The number of bytes in the signature.</span></span></param>
        <summary><span data-ttu-id="486dd-204">Establece la firma de variable local que describe el diseño de las variables locales para el método dinámico asociado.</span><span class="sxs-lookup"><span data-stu-id="486dd-204">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="486dd-205">La firma de variable local describe el diseño de variables locales del método.</span><span class="sxs-lookup"><span data-stu-id="486dd-205">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="486dd-206">Para simplificar la creación de la firma de variable local, use la `static` (`Shared` en Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> método para obtener un <xref:System.Reflection.Emit.SignatureHelper> para la firma local.</span><span class="sxs-lookup"><span data-stu-id="486dd-206">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="486dd-207">Para obtener información sobre firmas de variables locales, consulte la documentación de Common Language Infrastructure (CLI), especialmente "partición II: definición y semántica de los metadatos".</span><span class="sxs-lookup"><span data-stu-id="486dd-207">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="486dd-208">La documentación está disponible en línea; vea [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) (Estándares de ECMA C# y Common Language Infrastructure) en MSDN y [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) (Estándar ECMA-335: Common Language Infrastructure [CLI]) en el sitio web de Ecma International.</span><span class="sxs-lookup"><span data-stu-id="486dd-208">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="486dd-209"><paramref name="localSignature" /> es <see langword="null" /> y <paramref name="signatureSize" /> es mayor que 0.</span><span class="sxs-lookup"><span data-stu-id="486dd-209"><paramref name="localSignature" /> is <see langword="null" /> and <paramref name="signatureSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="486dd-210"><paramref name="signatureSize" /> es menor que 0.</span><span class="sxs-lookup"><span data-stu-id="486dd-210"><paramref name="signatureSize" /> is less than 0.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="486dd-211">requiere plena confianza para el llamador inmediato.</span><span class="sxs-lookup"><span data-stu-id="486dd-211">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="486dd-212">Este miembro no puede usarse por código de confianza parcial o transparente.</span><span class="sxs-lookup"><span data-stu-id="486dd-212">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>