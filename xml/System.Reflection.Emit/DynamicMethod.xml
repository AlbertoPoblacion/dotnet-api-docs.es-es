<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="DynamicMethod.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">037e736f-f76f-422a-bcb7-5d2d599f851d5517d541bfb277537dc0cfe80b1fb8f689bcf6d4.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5517d541bfb277537dc0cfe80b1fb8f689bcf6d4</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fc53860cd2661bb7bde6e4b2858fcda4ec4c889</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/10/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinandroid-7.1,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Defines and represents a dynamic method that can be compiled, executed, and discarded.</source>
          <target state="translated">Define y representa un método dinámico que se puede compilar, ejecutar y descartar.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Discarded methods are available for garbage collection.</source>
          <target state="translated">Los métodos descartados están disponibles para la recolección de elementos no utilizados.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>You can use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</source>
          <target state="translated">Puede usar el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase para generar y ejecutar un método en tiempo de ejecución sin tener que generar un ensamblado dinámico y un tipo dinámico para contener el método.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The executable code created by the just-in-time (JIT) compiler is reclaimed when the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> object is reclaimed.</source>
          <target state="translated">El código ejecutable creado por el compilador just-in-time (JIT) se recupera cuando la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> objeto sea reclamado.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Dynamic methods are the most efficient way to generate and execute small amounts of code.</source>
          <target state="translated">Los métodos dinámicos son la forma más eficaz para generar y ejecutar pequeñas cantidades de código.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</source>
          <target state="translated">Un método dinámico se puede hospedar de forma anónima, o puede ser lógicamente asociado a un módulo o a un tipo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</source>
          <target state="translated">Si el método dinámico es hospedado de forma anónima, se encuentra en un ensamblado proporcionado por el sistema y, por tanto, está aislado del resto del código.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>By default, it does not have access to any non-public data.</source>
          <target state="translated">De forma predeterminada, no tiene acceso a datos no públicos.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">Un método dinámico hospedado de forma anónima puede restringir la capacidad de omitir las comprobaciones de visibilidad del compilador JIT, si se ha concedido <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</source>
          <target state="translated">El nivel de confianza del ensamblado cuyos miembros no públicos se tiene acceso mediante el método dinámico debe ser igual a o un subconjunto de, el nivel de confianza de la pila de llamadas que emite el método dinámico.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>For more information about anonymously hosted dynamic methods, see <bpt id="p1">[</bpt>Walkthrough: Emitting Code in Partial Trust Scenarios<ept id="p1">](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre los métodos dinámicos hospedados de forma anónima, vea <bpt id="p1">[</bpt>Tutorial: emitir código en escenarios de confianza parcial<ept id="p1">](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md)</ept>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</source>
          <target state="translated">Si el método dinámico está asociado a un módulo que se especifica, el método dinámico es eficazmente global para ese módulo.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>It can access all types in the module and all <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) members of the types.</source>
          <target state="translated">Puede tener acceso a todos los tipos del módulo y todos los <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> en Visual Basic) los miembros de los tipos.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> flag can be satisfied by the call stack that includes your code.</source>
          <target state="translated">Puede asociar un dinámico método a cualquier módulo, independientemente de si se creó el módulo, que proporciona una demanda de <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> marca se puede satisfacer mediante la pila de llamadas que incluye el código.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If the <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</source>
          <target state="translated">Si el <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> marca se incluye en la concesión, el método dinámico puede omitir las comprobaciones de visibilidad del compilador JIT y obtener acceso a los datos privados de todos los tipos declarados en el módulo o en cualquier otro módulo de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</source>
          <target state="translated">Cuando se especifica el módulo al que está asociado un método dinámico, dicho módulo no debe estar en el ensamblado proporcionado por el sistema que se utiliza para el hospedaje anónimo.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</source>
          <target state="translated">Si el método dinámico está asociado a un tipo que se especifique, tiene acceso a todos los miembros del tipo, independientemente del nivel de acceso.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>In addition, JIT visibility checks can be skipped.</source>
          <target state="translated">Además, se pueden omitir las comprobaciones de visibilidad JIT.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</source>
          <target state="translated">Esto proporciona el método dinámico obtiene acceso a los datos privados de otros tipos declarados en el mismo módulo o en cualquier otro módulo de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>You can associate a dynamic method with any type, but your code must be granted <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with both the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> and <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph> flags.</source>
          <target state="translated">Puede asociar un método dinámico a cualquier tipo, pero el código debe tener concedido <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con ambos el <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> y <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph> marcas.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> flag is granted.</source>
          <target state="translated">La siguiente tabla muestra qué tipos y miembros son accesibles para un método dinámico hospedado de forma anónima, con y sin comprobaciones de visibilidad JIT, dependiendo de si <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph> se le concede la marca.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Without <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph></source>
          <target state="translated">Sin <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph></target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>With <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph></source>
          <target state="translated">Con <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess&gt;</ph></target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Without skipping JIT visibility checks</source>
          <target state="translated">Sin omitir las comprobaciones de visibilidad JIT</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">Miembros públicos de tipos públicos de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">Miembros públicos de tipos públicos de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Skipping JIT visibility checks, with restrictions</source>
          <target state="translated">JIT de omitir las comprobaciones de visibilidad, con restricciones</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">Miembros públicos de tipos públicos de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</source>
          <target state="translated">Todos los miembros de todos los tipos, solo en los ensamblados cuyos niveles de confianza son iguales o menores que el nivel de confianza del ensamblado que emite el método dinámico.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Prior to the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, emitting code required <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">Versiones anteriores a la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, emisión de código requerido <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</source>
          <target state="translated">Este permiso está incluido de forma predeterminada en la plena confianza y la intranet local conjuntos de permisos con nombre, pero no en la Internet conjunto de permisos.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Therefore, in earlier versions of the <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> a library can be used with Internet permissions only if it has the <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> attribute and also executes an <ph id="ph3">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph> for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>.</source>
          <target state="translated">Por lo tanto, en versiones anteriores de la <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> se puede usar una biblioteca con permisos de Internet solo si tiene la <ph id="ph2">&lt;xref:System.Security.SecurityCriticalAttribute&gt;</ph> atributo y también ejecuta una <ph id="ph3">&lt;xref:System.Security.PermissionSet.Assert%2A&gt;</ph> para <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Such libraries require careful security review because coding errors could result in security holes.</source>
          <target state="translated">Estas bibliotecas requieren una revisión cuidadosa de la seguridad porque los errores de codificación pueden provocar vulnerabilidades de seguridad.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The <ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph> allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)]</ph> permite emitir código en escenarios de confianza parcial sin emitir ninguna petición de seguridad, porque la generación de código no es en sí una operación que requiera privilegios.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>That is, the generated code has no more permissions than the assembly that emits it.</source>
          <target state="translated">Es decir, el código generado no tiene más permisos que el ensamblado que lo emite.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>This allows libraries that emit code to be security transparent and removes the need to assert <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>, which simplifies the task of writing a secure library.</source>
          <target state="translated">Esto permite que las bibliotecas que emiten código sean transparentes en seguridad y elimina la necesidad de declarar <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit&gt;</ph>, lo que simplifica la tarea de escribir una biblioteca segura.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>To use this feature, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Para usar esta característica, la aplicación debe tener como destino la <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o una versión posterior.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</source>
          <target state="translated">La siguiente tabla muestra qué tipos y miembros son accesibles a un método dinámico que está asociado con un módulo o a un tipo en un módulo.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Associated with module</source>
          <target state="translated">Asociado con el módulo</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Associated with type</source>
          <target state="translated">Asociado con el tipo</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Without skipping JIT visibility checks</source>
          <target state="translated">Sin omitir las comprobaciones de visibilidad JIT</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public and internal members of public, internal, and private types in the module.</source>
          <target state="translated">Miembros públicos e internos de tipos públicos, internos y privados en el módulo.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">Miembros públicos de tipos públicos de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>All members of the associated type.</source>
          <target state="translated">Todos los miembros del tipo asociado.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public and internal members of all the other types in the module.</source>
          <target state="translated">Miembros públicos e internos de todos los demás tipos del módulo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Public members of public types in any assembly.</source>
          <target state="translated">Miembros públicos de tipos públicos de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Skipping JIT visibility checks</source>
          <target state="translated">Comprobaciones de visibilidad JIT omitiendo</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>All members of all types in any assembly.</source>
          <target state="translated">Todos los miembros de todos los tipos de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>All members of all types in any assembly.</source>
          <target state="translated">Todos los miembros de todos los tipos de cualquier ensamblado.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>A dynamic method that is associated with a module has the permissions of that module.</source>
          <target state="translated">Un método dinámico que está asociado a un módulo tiene los permisos de ese módulo.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>A dynamic method that is associated with a type has the permissions of the module containing that type.</source>
          <target state="translated">Un método dinámico que está asociado a un tipo tiene los permisos del módulo que contiene ese tipo.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</source>
          <target state="translated">Los métodos dinámicos y sus parámetros no es necesario asignarle un nombre, pero puede especificar nombres para ayudar en la depuración.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Custom attributes are not supported on dynamic methods or their parameters.</source>
          <target state="translated">No se admiten atributos personalizados en métodos dinámicos o sus parámetros.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Although dynamic methods are <ph id="ph1">`static`</ph> methods (<ph id="ph2">`Shared`</ph> methods in Visual Basic), the relaxed rules for delegate binding introduced in the <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</source>
          <target state="translated">Aunque los métodos dinámicos son <ph id="ph1">`static`</ph> métodos (<ph id="ph2">`Shared`</ph> métodos en Visual Basic), el relajar las reglas de enlace a delegados introducidas en la <ph id="ph3">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph> permitir que un método dinámico se puede enlazar a un objeto, para que actúe como un método de instancia cuando se llama con esa instancia de delegado.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>An example that demonstrates this is provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> method overload.</source>
          <target state="translated">Se proporciona un ejemplo que muestra cómo hacerlo para los <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> sobrecarga del método.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</source>
          <target state="translated">En el <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, los métodos dinámicos no admiten información de símbolos, es decir, nombres de variables locales y asignación de número de línea.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>This limitation might be removed in a future version.</source>
          <target state="translated">Esta limitación podría desaparecer en una versión futura.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>You can use <ph id="ph1">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> calls are the same in both cases.</source>
          <target state="translated">Puede usar <ph id="ph1">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph> durante el desarrollo para simplificar la depuración del lenguaje intermedio de Microsoft (MSIL) generado y, a continuación, pasar a métodos dinámicos durante la implementación final, ya que el <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> llamadas son los mismos en ambos casos.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Verification</source>
          <target state="translated">para complementos</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</source>
          <target state="translated">En la lista siguiente se resume las condiciones en las que los métodos dinámicos pueden contener código no comprobable.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>(For example, a dynamic method is unverifiable if its <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph> property is set to <ph id="ph2">`false`</ph>.)</source>
          <target state="translated">(Por ejemplo, un método dinámico es no se puede comprobar si su <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph> propiedad está establecida en <ph id="ph2">`false`</ph>.)</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</source>
          <target state="translated">Un método dinámico que está asociado a un ensamblado crítico para la seguridad también es crítico para la seguridad y puede omitir la comprobación.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</source>
          <target state="translated">Por ejemplo, un ensamblado sin atributos de seguridad que se ejecuta como una aplicación de escritorio se trata como crítico para la seguridad en tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</source>
          <target state="translated">Si asocia un método dinámico con el ensamblado, el método dinámico puede contener código no comprobable.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</source>
          <target state="translated">Si un método dinámico que contiene código no comprobable está asociado a un ensamblado que tiene la transparencia de nivel 1, el compilador de just-in-time (JIT) inserta una demanda de seguridad.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The demand succeeds only if the dynamic method is executed by fully trusted code.</source>
          <target state="translated">La petición se realiza correctamente sólo si el método dinámico se ejecuta por código de plena confianza.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>See <bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept>.</source>
          <target state="translated">Vea <bpt id="p1">[</bpt>código transparente en seguridad, nivel 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</source>
          <target state="translated">Si un método dinámico que contiene código no comprobable está asociado a un ensamblado que tiene la transparencia de nivel 2 (como mscorlib.dll), produce una excepción (insertada por el compilador JIT) en lugar de realizar una petición de seguridad.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>See <bpt id="p1">[</bpt>Security-Transparent Code, Level 2<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</source>
          <target state="translated">Vea <bpt id="p1">[</bpt>código transparente en seguridad, nivel 2<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</source>
          <target state="translated">Un método dinámico hospedado de forma anónima que contiene código no comprobable siempre produce una excepción.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>It can never skip verification, even if it is created and executed by fully trusted code.</source>
          <target state="translated">Nunca puede omitir la comprobación, incluso si se crea y ejecuta por código de plena confianza.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</source>
          <target state="translated">La excepción que se produce en código no comprobable varía en función del modo en que se invoca el método dinámico.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If you invoke a dynamic method by using a delegate returned from the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method, a <ph id="ph2">&lt;xref:System.Security.VerificationException&gt;</ph> is thrown.</source>
          <target state="translated">Si se invoca un método dinámico mediante el uso de un delegado devuelto desde el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> método, un <ph id="ph2">&lt;xref:System.Security.VerificationException&gt;</ph> se produce.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>If you invoke the dynamic method by using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, a <ph id="ph2">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> is thrown with an inner <ph id="ph3">&lt;xref:System.Security.VerificationException&gt;</ph>.</source>
          <target state="translated">Si se invoca el método dinámico utilizando la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método, un <ph id="ph2">&lt;xref:System.Reflection.TargetInvocationException&gt;</ph> se produce con interior <ph id="ph3">&lt;xref:System.Security.VerificationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The following code example creates a dynamic method that takes two parameters.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un método dinámico que toma dos parámetros.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</source>
          <target state="translated">En el ejemplo se emite un cuerpo de función sencilla que imprime el primer parámetro en la consola y, en el ejemplo se utiliza el segundo parámetro como el valor devuelto del método.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo se finaliza el método mediante la creación de un delegado, invoca el delegado con parámetros diferentes y por último, se invoca el método dinámico utilizando la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Creates a dynamic method.</source>
          <target state="translated">Crea un método dinámico.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>The name of the dynamic method.</source>
          <target state="translated">Nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede ser una cadena de longitud cero, pero no puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifica el tipo de valor devuelto del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifican los tipos de los parámetros del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</source>
          <target state="translated">Inicializa un método dinámico hospedado de forma anónima, especificando el nombre del método, el tipo de valor devuelto y los tipos de parámetros.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</source>
          <target state="translated">El método dinámico creado por este constructor está asociado con un ensamblado anónimo en lugar de un tipo o módulo existente.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</source>
          <target state="translated">El ensamblado anónimo existe exclusivamente para proporcionar un entorno de espacio aislado para los métodos dinámicos, es decir, para aislarlos de otro código.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</source>
          <target state="translated">Este entorno resulta seguro para el método dinámico se genera y ejecuta código de confianza parcial.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">Este constructor especifica que just-in-time (JIT) las comprobaciones de visibilidad se aplicará en el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>That is, the code in the dynamic method has access to public methods of public classes.</source>
          <target state="translated">Es decir, el código del método dinámico tiene acceso a los métodos públicos de clases públicas.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>Exceptions are thrown if the method tries to access types or members that are <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, or <ph id="ph3">`internal`</ph> (<ph id="ph4">`Friend`</ph> in Visual Basic).</source>
          <target state="translated">Se producen excepciones si el método intenta obtener acceso a tipos o miembros que son <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, o <ph id="ph3">`internal`</ph> (<ph id="ph4">`Friend`</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29&gt;</ph> constructor.</source>
          <target state="translated">Para crear un método dinámico que le haya limitado la capacidad para omitir las comprobaciones de visibilidad JIT, utilice el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</source>
          <target state="translated">Cuando se crea un método dinámico hospedado de forma anónima, la pila de llamadas del ensamblado emisor se incluye.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</source>
          <target state="translated">Cuando se invoca el método, los permisos del ensamblado emisor se usan en lugar de los permisos del llamador real.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</source>
          <target state="translated">Por lo tanto, el método dinámico no se puede ejecutar en un nivel de privilegios superior del ensamblado que lo emitió, incluso si se pasa a y ejecutado por un ensamblado que tiene un nivel de confianza superior.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This constructor specifies the method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, and the calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este constructor especifica los atributos de método <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>y la convención de llamada <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>This constructor was introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Este constructor se introdujo en la <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o una versión posterior.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Un elemento de <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> es un tipo para el que <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> devuelve <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">Nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede ser una cadena de longitud cero, pero no puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifica el tipo de valor devuelto del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifican los tipos de los parámetros del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para omitir las comprobaciones de visibilidad de JIT en tipos y miembros a los que se tiene acceso por el MSIL del método dinámico, con esta restricción: el nivel de confianza de los ensamblados que contienen esos tipos y miembros debe ser igual o menor que el nivel de confianza de la pila de llamadas que emite el método dinámico; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">Inicializa un método dinámico hospedado de forma anónima, especificando el nombre del método, el tipo de valor devuelto, los tipos de parámetros y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</source>
          <target state="translated">El método dinámico creado por este constructor está asociado con un ensamblado anónimo en lugar de un tipo o módulo existente.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</source>
          <target state="translated">El ensamblado anónimo existe exclusivamente para proporcionar un entorno de espacio aislado para los métodos dinámicos, es decir, para aislarlos de otro código.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</source>
          <target state="translated">Este entorno resulta seguro para el método dinámico se genera y ejecuta código de confianza parcial.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>Anonymously hosted dynamic methods do not have automatic access to any types or members that are <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, or <ph id="ph3">`internal`</ph> (<ph id="ph4">`Friend`</ph> in Visual Basic).</source>
          <target state="translated">Métodos dinámicos hospedados de forma anónima no tienen acceso automático a los tipos o miembros que son <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, o <ph id="ph3">`internal`</ph> (<ph id="ph4">`Friend`</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</source>
          <target state="translated">Esto es diferente de métodos dinámicos que están asociados a un tipo o módulo, existentes que tienen acceso a los miembros ocultos en su ámbito asociado.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>Specify <ph id="ph1">`true`</ph> for <ph id="ph2">`restrictedSkipVisibility`</ph> if your dynamic method has to access types or members that are <ph id="ph3">`private`</ph>, <ph id="ph4">`protected`</ph>, or <ph id="ph5">`internal`</ph>.</source>
          <target state="translated">Especifique <ph id="ph1">`true`</ph> para <ph id="ph2">`restrictedSkipVisibility`</ph> si el método dinámico debe tener acceso a tipos o miembros que son <ph id="ph3">`private`</ph>, <ph id="ph4">`protected`</ph>, o <ph id="ph5">`internal`</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This gives the dynamic method restricted access to these members.</source>
          <target state="translated">Esto proporciona el método dinámico acceso restringido a estos miembros.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>That is, the members can be accessed only if the following conditions are met:</source>
          <target state="translated">Es decir, los miembros pueden tener acceso solo si se cumplen las condiciones siguientes:</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</source>
          <target state="translated">Los miembros de destino pertenecen a un ensamblado que tiene un nivel de confianza igual o menor que la pila de llamadas que emite el método dinámico.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The call stack that emits the dynamic method is granted <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">La pila de llamadas que emite el método dinámico se le concede <ph id="ph1">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This is always true when the code is executed with full trust.</source>
          <target state="translated">Esto es siempre true cuando el código se ejecuta con plena confianza.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>For partially trusted code, it is true only if the host explicitly grants the permission.</source>
          <target state="translated">Para código de confianza parcial, es true solo si el host concede explícitamente el permiso.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>If the permission has not been granted, a security exception is thrown when <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> is called or when the dynamic method is invoked, not when this constructor is called.</source>
          <target state="translated">Si no se ha concedido el permiso, se produce una excepción de seguridad cuando <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> se llama o cuando se invoca el método dinámico, no cuando se llama a este constructor.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>No special permissions are required to emit the dynamic method.</source>
          <target state="translated">No se requiere ningún permiso especial para emitir el método dinámico.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>For example, a dynamic method that is created with <ph id="ph1">`restrictedSkipVisibility`</ph> set to <ph id="ph2">`true`</ph> can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</source>
          <target state="translated">Por ejemplo, un método dinámico que se crea con <ph id="ph1">`restrictedSkipVisibility`</ph> establecido en <ph id="ph2">`true`</ph> puede tener acceso a un miembro privado de cualquier ensamblado en la pila de llamadas si la pila de llamadas se ha concedido acceso a miembros restringidos.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> assembly, because such assemblies are fully trusted.</source>
          <target state="translated">Si el método dinámico se crea con código de confianza parcial en la pila de llamadas, no se puede tener acceso a un miembro privado de un tipo en un <ph id="ph1">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]</ph> ensamblado, porque esos ensamblados son de plena confianza.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>If <ph id="ph1">`restrictedSkipVisibility`</ph> is <ph id="ph2">`false`</ph>, JIT visibility checks are enforced.</source>
          <target state="translated">Si <ph id="ph1">`restrictedSkipVisibility`</ph> es <ph id="ph2">`false`</ph>, se aplican las comprobaciones de visibilidad JIT.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, or <ph id="ph3">`internal`</ph>.</source>
          <target state="translated">El código del método dinámico tiene acceso a los métodos públicos de clases públicas y se producen excepciones si intenta obtener acceso a tipos o miembros que son <ph id="ph1">`private`</ph>, <ph id="ph2">`protected`</ph>, o <ph id="ph3">`internal`</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</source>
          <target state="translated">Cuando se crea un método dinámico hospedado de forma anónima, la pila de llamadas del ensamblado emisor se incluye.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</source>
          <target state="translated">Cuando se invoca el método, se utilizan los permisos de la pila de llamadas emisora en lugar de los permisos del llamador real.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</source>
          <target state="translated">Por lo tanto, el método dinámico no se puede ejecutar en un nivel de privilegios superior del ensamblado que lo emitió, incluso si se pasa a y ejecutado por un ensamblado que tiene un nivel de confianza superior.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This constructor specifies the method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, and the calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este constructor especifica los atributos de método <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>y la convención de llamada <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>This constructor was introduced in the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">Este constructor se introdujo en la <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o una versión posterior.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Un elemento de <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> es un tipo para el que <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> devuelve <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The name of the dynamic method.</source>
          <target state="translated">Nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede ser una cadena de longitud cero, pero no puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifica el tipo de valor devuelto del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifican los tipos de los parámetros del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> representing the module with which the dynamic method is to be logically associated.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> que representa el módulo con el que se va a asociar de manera lógica al método dinámico.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</source>
          <target state="translated">Crea un método dinámico que es global para un módulo, especificando el nombre del método, el tipo de devolución, los tipos de parámetros y el módulo.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>This constructor specifies method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>, and does not skip just-in-time (JIT) visibility checks.</source>
          <target state="translated">Este constructor especifica los atributos de método <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, convención de llamada <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>y no omite las comprobaciones de visibilidad just-in-time (JIT).</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The dynamic method created with this constructor has access to public and <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) members of all the types contained in module <ph id="ph3">`m`</ph>.</source>
          <target state="translated">El método dinámico creado con este constructor tiene acceso a public y <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> en Visual Basic) los miembros de todos los tipos contenidos en el módulo <ph id="ph3">`m`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`m`</ph> is a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">Por compatibilidad con versiones anteriores, este constructor solicita <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> marca si las condiciones siguientes son true: <ph id="ph3">`m`</ph> es un módulo que no sea el módulo que realiza la llamada y la demanda de <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> ha fallado la marca.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">Si la demanda de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> se realiza correctamente, se permite la operación.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este miembro ya no requiere <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>problemas de seguridad en la reflexión emisión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The following code example creates a dynamic method that takes two parameters.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un método dinámico que toma dos parámetros.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</source>
          <target state="translated">En el ejemplo se emite un cuerpo de función sencilla que imprime el primer parámetro en la consola y, en el ejemplo se utiliza el segundo parámetro como el valor devuelto del método.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> method.</source>
          <target state="translated">En el ejemplo se finaliza el método mediante la creación de un delegado, invoca el delegado con parámetros diferentes y por último, se invoca el método dinámico utilizando la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Un elemento de <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is a module that provides anonymous hosting for dynamic methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> es un módulo que proporciona hospedaje anónimo para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> es un tipo para el que <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> devuelve <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>to associate the dynamic method with a module other than the calling module.</source>
          <target state="translated">Para asociar el método dinámico con un módulo distinto del módulo que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The name of the dynamic method.</source>
          <target state="translated">Nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede ser una cadena de longitud cero, pero no puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifica el tipo de valor devuelto del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifican los tipos de los parámetros del método dinámico, o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> with which the dynamic method is logically associated.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> con el que está asociado lógicamente el método dinámico.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The dynamic method has access to all members of the type.</source>
          <target state="translated">El método dinámico tiene acceso a todos los miembros del tipo.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</source>
          <target state="translated">Crea un método dinámico, especificando el nombre del método, tipo de valor devuelto, los tipos de parámetro y el tipo al que está asociado lógicamente el método dinámico.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The dynamic method created with this constructor has access to all members of the type <ph id="ph1">`owner`</ph>, and to public and <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic) members of all the other types in the module that contains <ph id="ph4">`owner`</ph>.</source>
          <target state="translated">El método dinámico creado con este constructor tiene acceso a todos los miembros del tipo <ph id="ph1">`owner`</ph>y a public y <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> en Visual Basic) los miembros de todos los tipos en el módulo que contiene <ph id="ph4">`owner`</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This constructor specifies method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>, and does not skip just-in-time (JIT) visibility checks.</source>
          <target state="translated">Este constructor especifica los atributos de método <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, convención de llamada <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>y no omite las comprobaciones de visibilidad just-in-time (JIT).</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`owner`</ph> is in a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">Por compatibilidad con versiones anteriores, este constructor solicita <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> marca si las condiciones siguientes son true: <ph id="ph3">`owner`</ph> está en un módulo distinto del módulo de llamada y la demanda de <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> ha fallado la marca.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">Si la demanda de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> se realiza correctamente, se permite la operación.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este miembro ya no requiere <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>problemas de seguridad en la reflexión emisión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The following code example creates a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> that is logically associated with a type.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> que está asociado lógicamente con un tipo.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This association gives it access to the private members of that type.</source>
          <target state="translated">Esta asociación le da acceso a los miembros privados de ese tipo.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The code example defines a class named <ph id="ph1">`Example`</ph> with a private field, a class named <ph id="ph2">`DerivedFromxample`</ph> that derives from the first class, a delegate type named <ph id="ph3">`UseLikeStatic`</ph> that returns <ph id="ph4">&lt;xref:System.Int32&gt;</ph> and has parameters of type <ph id="ph5">`Example`</ph> and <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, and a delegate type named <ph id="ph7">`UseLikeInstance`</ph> that returns <ph id="ph8">&lt;xref:System.Int32&gt;</ph> and has one parameter of type <ph id="ph9">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">El ejemplo de código define una clase denominada <ph id="ph1">`Example`</ph> con un campo privado, una clase denominada <ph id="ph2">`DerivedFromxample`</ph> que se deriva de la primera clase, un tipo de delegado denominado <ph id="ph3">`UseLikeStatic`</ph> que devuelve <ph id="ph4">&lt;xref:System.Int32&gt;</ph> y tiene parámetros de tipo <ph id="ph5">`Example`</ph> y <ph id="ph6">&lt;xref:System.Int32&gt;</ph>y un tipo de delegado denominado <ph id="ph7">`UseLikeInstance`</ph> que devuelve <ph id="ph8">&lt;xref:System.Int32&gt;</ph> y tiene un parámetro de tipo <ph id="ph9">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The example code then creates a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> that changes the private field of an instance of <ph id="ph2">`Example`</ph> and returns the previous value.</source>
          <target state="translated">El código de ejemplo, a continuación, crea un <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> que cambia el campo privado de una instancia de <ph id="ph2">`Example`</ph> y devuelve el valor anterior.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>In general, changing the internal fields of classes is not good object-oriented coding practice.</source>
          <target state="translated">En general, cambiar los campos internos de clases no es buena práctica de programación orientada a objetos.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The example code creates an instance of <ph id="ph1">`Example`</ph> and then creates two delegates.</source>
          <target state="translated">El código de ejemplo crea una instancia de <ph id="ph1">`Example`</ph> y, a continuación, se crean dos delegados.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The first is of type <ph id="ph1">`UseLikeStatic`</ph>, which has the same parameters as the dynamic method.</source>
          <target state="translated">El primero es de tipo <ph id="ph1">`UseLikeStatic`</ph>, que tiene los mismos parámetros que el método dinámico.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The second is of type <ph id="ph1">`UseLikeInstance`</ph>, which lacks the first parameter (of type <ph id="ph2">`Example`</ph>).</source>
          <target state="translated">El segundo es de tipo <ph id="ph1">`UseLikeInstance`</ph>, que no tiene el primer parámetro (de tipo <ph id="ph2">`Example`</ph>).</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This delegate is created using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> method overload; the second parameter of that method overload is an instance of <ph id="ph2">`Example`</ph>, in this case the instance just created, which is bound to the newly created delegate.</source>
          <target state="translated">Este delegado se crea utilizando el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> sobrecarga del método; el segundo parámetro de esa sobrecarga del método es una instancia de <ph id="ph2">`Example`</ph>, en este caso la instancia recién creada, que está enlazada al delegado recién creado.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Whenever that delegate is invoked, the dynamic method acts on the bound instance of <ph id="ph1">`Example`</ph>.</source>
          <target state="translated">Cada vez que se invoca ese delegado, el método dinámico actúa en la instancia enlazada de <ph id="ph1">`Example`</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>This is an example of the relaxed rules for delegate binding introduced in the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, along with new overloads of the <ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este es un ejemplo de las reglas relajadas para el enlace a delegados que se introdujeron en la <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, junto con las nuevas sobrecargas de los <ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> class.</source>
          <target state="translated">Para obtener más información, vea la clase <ph id="ph1">&lt;xref:System.Delegate&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The <ph id="ph1">`UseLikeStatic`</ph> delegate is invoked, passing in the instance of <ph id="ph2">`Example`</ph> that is bound to the <ph id="ph3">`UseLikeInstance`</ph> delegate.</source>
          <target state="translated">El <ph id="ph1">`UseLikeStatic`</ph> se invoca el delegado, pasando la instancia de <ph id="ph2">`Example`</ph> que está enlazado a la <ph id="ph3">`UseLikeInstance`</ph> delegar.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Then the <ph id="ph1">`UseLikeInstance`</ph> delegate is invoked, so that both delegates act on the same instance of <ph id="ph2">`Example`</ph>.</source>
          <target state="translated">La <ph id="ph1">`UseLikeInstance`</ph> delegado se invoca, para que ambos delegados actúen en la misma instancia de <ph id="ph2">`Example`</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>The changes in the values of the internal field are displayed after each call.</source>
          <target state="translated">Los cambios en los valores del campo interno se muestran después de cada llamada.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Finally, a <ph id="ph1">`UseLikeInstance`</ph> delegate is bound to an instance of <ph id="ph2">`DerivedFromxample`</ph>, and the delegate calls are repeated.</source>
          <target state="translated">Por último, un <ph id="ph1">`UseLikeInstance`</ph> delegado está enlazado a una instancia de <ph id="ph2">`DerivedFromxample`</ph>, y las llamadas al delegado se repiten.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Un elemento de <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un tipo o método genérico.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, or is a type for which <ph id="ph3">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o es un tipo para el que <ph id="ph3">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> devuelve <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>to associate the dynamic method with a type in a module other than the calling module.</source>
          <target state="translated">Para asociar el método dinámico con un tipo en un módulo distinto del módulo que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">Nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede ser una cadena de longitud cero, pero no puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifica el tipo de valor devuelto del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifican los tipos de los parámetros del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> representing the module with which the dynamic method is to be logically associated.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> que representa el módulo con el que se va a asociar de manera lógica al método dinámico.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que accede el MSIL del método dinámico.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">Crea un método dinámico que es global para un módulo, especificando el nombre del método, el tipo de valor devuelto, los tipos de parámetros, el módulo y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This constructor specifies method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, and calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este constructor especifica los atributos de método <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>y la convención de llamada <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The dynamic method created with this constructor has access to public and <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) members of all the types in contained module <ph id="ph3">`m`</ph>.</source>
          <target state="translated">El método dinámico creado con este constructor tiene acceso a public y <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> en Visual Basic) los miembros de todos los tipos incluidos en el módulo <ph id="ph3">`m`</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</source>
          <target state="translated">Omitiendo el compilador JIT las comprobaciones de visibilidad del compilador permite que el método dinámico tener acceso a los miembros privados y protegidos de todos los demás tipos.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This is useful, for example, when writing code to serialize objects.</source>
          <target state="translated">Esto es útil, por ejemplo, cuando se escribe código para serializar objetos.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`m`</ph> is a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">Por compatibilidad con versiones anteriores, este constructor solicita <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> marca si las condiciones siguientes son true: <ph id="ph3">`m`</ph> es un módulo que no sea el módulo que realiza la llamada y la demanda de <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> ha fallado la marca.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">Si la demanda de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> se realiza correctamente, se permite la operación.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este miembro ya no requiere <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>problemas de seguridad en la reflexión emisión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Un elemento de <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is a module that provides anonymous hosting for dynamic methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> es un módulo que proporciona hospedaje anónimo para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> es un tipo para el que <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> devuelve <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>to associate the dynamic method with a module other than the calling module.</source>
          <target state="translated">Para asociar el método dinámico con un módulo distinto del módulo que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">Nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Puede ser una cadena de longitud cero, pero no puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifica el tipo de valor devuelto del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifican los tipos de los parámetros del método dinámico, o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> with which the dynamic method is logically associated.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> con el que está asociado lógicamente el método dinámico.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method has access to all members of the type.</source>
          <target state="translated">El método dinámico tiene acceso a todos los miembros del tipo.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el MSIL del método dinámico; en otro caso, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">Crea un método dinámico que especifica el nombre del método, el tipo de valor de devolución, los tipos de parámetros, el tipo con el que está asociado lógicamente el método dinámico y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para los tipos y miembros a los que se tiene acceso mediante el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method created with this constructor has access to all members of the type <ph id="ph1">`owner`</ph>, and to public and <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic) members of all the other types in the module that contains <ph id="ph4">`owner`</ph>.</source>
          <target state="translated">El método dinámico creado con este constructor tiene acceso a todos los miembros del tipo <ph id="ph1">`owner`</ph>y a public y <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> en Visual Basic) los miembros de todos los tipos en el módulo que contiene <ph id="ph4">`owner`</ph>.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</source>
          <target state="translated">Omitiendo el compilador JIT las comprobaciones de visibilidad del compilador permite que el método dinámico tener acceso a los miembros privados y protegidos de todos los demás tipos.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This is useful, for example, when writing code to serialize objects.</source>
          <target state="translated">Esto es útil, por ejemplo, cuando se escribe código para serializar objetos.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This constructor specifies method attributes <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>, and calling convention <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Este constructor especifica los atributos de método <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType&gt;</ph>y la convención de llamada <ph id="ph3">&lt;xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`owner`</ph> is in a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">Por compatibilidad con versiones anteriores, este constructor solicita <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> marca si las condiciones siguientes son true: <ph id="ph3">`owner`</ph> está en un módulo distinto del módulo de llamada y la demanda de <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> ha fallado la marca.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">Si la demanda de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> se realiza correctamente, se permite la operación.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este miembro ya no requiere <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>problemas de seguridad en la reflexión emisión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Un elemento de <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un tipo o método genérico.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>, or is a type for which <ph id="ph3">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o es un tipo para el que <ph id="ph3">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> devuelve <ph id="ph4">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>to associate the dynamic method with a type in a module other than the calling module.</source>
          <target state="translated">Para asociar el método dinámico con un tipo en un módulo distinto del módulo que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">Nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esto puede ser una cadena de longitud cero, pero no puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> values that specifies the attributes of the dynamic method.</source>
          <target state="translated">Combinación bit a bit de valores <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> que especifica los atributos del método dinámico.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The only combination allowed is <ph id="ph1">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</source>
          <target state="translated">La única combinación permitida es <ph id="ph1">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> y <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The calling convention for the dynamic method.</source>
          <target state="translated">La convención de llamada para el método dinámico.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated">Debe ser <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">Un objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifica el tipo de valor devuelto del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifican los tipos de los parámetros del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el MSIL del método dinámico; en otro caso, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">Crea un método dinámico que es global para un módulo, especificando el nombre del método, los atributos, la convención de nomenclatura, el tipo de valor devuelto, los tipos de parámetros, el módulo y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>The dynamic method created with this constructor has access to public and <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> in Visual Basic) members of all the public and internal types contained in module <ph id="ph3">`m`</ph>.</source>
          <target state="translated">El método dinámico creado con este constructor tiene acceso a public y <ph id="ph1">`internal`</ph> (<ph id="ph2">`Friend`</ph> en Visual Basic) los miembros de todos los tipos públicos e internos contenidos en el módulo <ph id="ph3">`m`</ph>.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</source>
          <target state="translated">Omitiendo el compilador JIT las comprobaciones de visibilidad del compilador permite que el método dinámico tener acceso a los miembros privados y protegidos de todos los demás tipos del módulo y en todos los demás ensamblados.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>This is useful, for example, when writing code to serialize objects.</source>
          <target state="translated">Esto es útil, por ejemplo, cuando se escribe código para serializar objetos.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`m`</ph> is a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">Por compatibilidad con versiones anteriores, este constructor solicita <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> marca si las condiciones siguientes son true: <ph id="ph3">`m`</ph> es un módulo que no sea el módulo que realiza la llamada y la demanda de <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> ha fallado la marca.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">Si la demanda de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> se realiza correctamente, se permite la operación.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este miembro ya no requiere <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>problemas de seguridad en la reflexión emisión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Un elemento de <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is a module that provides anonymous hosting for dynamic methods.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> es un módulo que proporciona hospedaje anónimo para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="m" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="m" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> is a combination of flags other than <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> es una combinación de indicadores distinta de <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> y <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="callingConvention" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callingConvention" /&gt;</ph> no es <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> es un tipo para el que <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> devuelve <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>to associate the dynamic method with a module other than the calling module.</source>
          <target state="translated">Para asociar el método dinámico con un módulo distinto del módulo que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The name of the dynamic method.</source>
          <target state="translated">Nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This can be a zero-length string, but it cannot be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Esto puede ser una cadena de longitud cero, pero no puede ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> values that specifies the attributes of the dynamic method.</source>
          <target state="translated">Combinación bit a bit de valores <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> que especifica los atributos del método dinámico.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The only combination allowed is <ph id="ph1">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> and <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</source>
          <target state="translated">La única combinación permitida es <ph id="ph1">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> y <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The calling convention for the dynamic method.</source>
          <target state="translated">La convención de llamada para el método dinámico.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Must be <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated">Debe ser <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> object that specifies the return type of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no return type.</source>
          <target state="translated">Un objeto <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifica el tipo de valor devuelto del método dinámico o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> objects specifying the types of the parameters of the dynamic method, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the method has no parameters.</source>
          <target state="translated">Matriz de objetos <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que especifican los tipos de los parámetros del método dinámico, o <ph id="ph2">&lt;see langword="null" /&gt;</ph> si el método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> with which the dynamic method is logically associated.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> con el que está asociado lógicamente el método dinámico.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method has access to all members of the type.</source>
          <target state="translated">El método dinámico tiene acceso a todos los miembros del tipo.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el MSIL del método dinámico; en otro caso, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</source>
          <target state="translated">Crea un método dinámico que especifica el nombre del método, los atributos, la convención de llamada, el tipo de valor de devolución, los tipos de parámetros, el tipo con el que está asociado lógicamente el método dinámico y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para los tipos y miembros a los que se tiene acceso mediante el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method is global to the module that contains the type <ph id="ph1">`owner`</ph>.</source>
          <target state="translated">El método dinámico es global para el módulo que contiene el tipo <ph id="ph1">`owner`</ph>.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>It has access to all members of the type <ph id="ph1">`owner`</ph>.</source>
          <target state="translated">Tiene acceso a todos los miembros del tipo <ph id="ph1">`owner`</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>The dynamic method created with this constructor has access to all members of the type <ph id="ph1">`owner`</ph>, and to public and <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> in Visual Basic) members of all the types contained in the module that contains <ph id="ph4">`owner`</ph>.</source>
          <target state="translated">El método dinámico creado con este constructor tiene acceso a todos los miembros del tipo <ph id="ph1">`owner`</ph>y a public y <ph id="ph2">`internal`</ph> (<ph id="ph3">`Friend`</ph> en Visual Basic) los miembros de todos los tipos contenidos en el módulo que contiene <ph id="ph4">`owner`</ph>.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</source>
          <target state="translated">Omitiendo el compilador JIT las comprobaciones de visibilidad del compilador permite que el método dinámico tener acceso a los miembros privados y protegidos de todos los demás tipos.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>This is useful, for example, when writing code to serialize objects.</source>
          <target state="translated">Esto es útil, por ejemplo, cuando se escribe código para serializar objetos.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>For backward compatibility, this constructor demands <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> with the <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> flag if the following conditions are both true: <ph id="ph3">`owner`</ph> is in a module other than the calling module, and the demand for <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag has failed.</source>
          <target state="translated">Por compatibilidad con versiones anteriores, este constructor solicita <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> con el <ph id="ph2">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType&gt;</ph> marca si las condiciones siguientes son true: <ph id="ph3">`owner`</ph> está en un módulo distinto del módulo de llamada y la demanda de <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph5">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> ha fallado la marca.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>If the demand for <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> succeeds, the operation is allowed.</source>
          <target state="translated">Si la demanda de <ph id="ph1">&lt;xref:System.Security.Permissions.SecurityPermission&gt;</ph> se realiza correctamente, se permite la operación.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">A partir de la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este miembro ya no requiere <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>(See <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.</source>
          <target state="translated">(Consulte <bpt id="p1">[</bpt>problemas de seguridad en la reflexión emisión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) Para utilizar esta funcionalidad, la aplicación debe utilizar <ph id="ph1">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> o posterior como destino.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>An element of <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</source>
          <target state="translated">Un elemento de <ph id="ph1">&lt;paramref name="parameterTypes" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph> o <ph id="ph3">&lt;see cref="T:System.Void" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un tipo o método genérico.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="owner" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> is a combination of flags other than <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> and <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributes" /&gt;</ph> es una combinación de indicadores distinta de <ph id="ph2">&lt;see cref="F:System.Reflection.MethodAttributes.Public" /&gt;</ph> y <ph id="ph3">&lt;see cref="F:System.Reflection.MethodAttributes.Static" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="callingConvention" /&gt;</ph> is not <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callingConvention" /&gt;</ph> no es <ph id="ph2">&lt;see cref="F:System.Reflection.CallingConventions.Standard" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> is a type for which <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> returns <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="returnType" /&gt;</ph> es un tipo para el que <ph id="ph2">&lt;see cref="P:System.Type.IsByRef" /&gt;</ph> devuelve <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>to associate the dynamic method with a type in a module other than the calling module.</source>
          <target state="translated">Para asociar el método dinámico con un tipo en un módulo distinto del módulo que realiza la llamada.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>Gets the attributes specified when the dynamic method was created.</source>
          <target state="translated">Obtiene los atributos especificados cuando se creó el método dinámico.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>A bitwise combination of the <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> values representing the attributes for the method.</source>
          <target state="translated">Una combinación bit a bit de los valores <ph id="ph1">&lt;see cref="T:System.Reflection.MethodAttributes" /&gt;</ph> que representan los atributos del método.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>Currently, the method attributes for a dynamic method are always <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static&gt;</ph>.</source>
          <target state="translated">Actualmente, los atributos de método para un método dinámico siempre son <ph id="ph1">&lt;xref:System.Reflection.MethodAttributes.Public&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.MethodAttributes.Static&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>The following code example displays the method attributes of a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra los atributos de método de un método dinámico.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Attributes">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>Gets the calling convention specified when the dynamic method was created.</source>
          <target state="translated">Obtiene la convención de llamada especificada cuando se creó el método dinámico.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Reflection.CallingConventions" /&gt;</ph> values that indicates the calling convention of the method.</source>
          <target state="translated">Uno de los valores de <ph id="ph1">&lt;see cref="T:System.Reflection.CallingConventions" /&gt;</ph> que indica la convención de llamada del método.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>Currently, the calling convention for a dynamic method is always <ph id="ph1">&lt;xref:System.Reflection.CallingConventions.Standard&gt;</ph>.</source>
          <target state="translated">Actualmente, la convención de llamada para un método dinámico es siempre <ph id="ph1">&lt;xref:System.Reflection.CallingConventions.Standard&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>The following code example displays the calling convention of a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra la convención de llamada de un método dinámico.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Completes the dynamic method and creates a delegate that can be used to execute it.</source>
          <target state="translated">Finaliza el método dinámico y crea a un delegado que se puede usar para ejecutarlo.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>A delegate type whose signature matches that of the dynamic method.</source>
          <target state="translated">Tipo de delegado cuya firma coincide con la del método dinámico.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>Completes the dynamic method and creates a delegate that can be used to execute it.</source>
          <target state="translated">Finaliza el método dinámico y crea a un delegado que se puede usar para ejecutarlo.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>A delegate of the specified type, which can be used to execute the dynamic method.</source>
          <target state="translated">Un delegado del tipo especificado, que se puede usar para ejecutar el método dinámico.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method completes the dynamic method.</source>
          <target state="translated">Llamar a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> método o la <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método finaliza el método dinámico.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</source>
          <target state="translated">Cualquiera aún más si se intenta modificar el método dinámico, como modificar las definiciones de parámetro o emitir más lenguaje intermedio de Microsoft (MSIL), se omite; se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>To create a method body for a dynamic method when you have your own MSIL generator, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph> method to obtain a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Para crear un cuerpo de método para un método dinámico cuando tiene su propio generador de MSIL, llame a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph> método para obtener un <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>If you do not have your own MSIL generator, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph> method to obtain an <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> object that can be used to generate the method body.</source>
          <target state="translated">Si no tiene su propio generador de MSIL, llame a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph> método para obtener un <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> objeto que puede utilizarse para generar el cuerpo del método.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>The following code example creates a dynamic method that takes two parameters.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un método dinámico que toma dos parámetros.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</source>
          <target state="translated">En el ejemplo se emite un cuerpo de función sencilla que imprime el primer parámetro en la consola y, en el ejemplo se utiliza el segundo parámetro como el valor devuelto del método.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo se finaliza el método mediante la creación de un delegado, invoca el delegado con parámetros diferentes y por último, se invoca el método dinámico utilizando la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source>The dynamic method has no method body.</source>
          <target state="translated">El método dinámico no tiene ningún cuerpo de método.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
          <source><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> has the wrong number of parameters or the wrong parameter types.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> tiene el número incorrecto de parámetros o los tipos de parámetro incorrectos.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>A delegate type whose signature matches that of the dynamic method, minus the first parameter.</source>
          <target state="translated">Tipo de delegado cuya firma coincide con la del método dinámico menos el primer parámetro.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>An object the delegate is bound to.</source>
          <target state="translated">Objeto al que está enlazado el delegado.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Must be of the same type as the first parameter of the dynamic method.</source>
          <target state="translated">Debe ser del mismo tipo que el primer parámetro del método dinámico.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</source>
          <target state="translated">Completa el método dinámico y crea un delegado que puede utilizarse para ejecutarlo, especificando el tipo de delegado y un objeto que se enlaza al delegado.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</source>
          <target state="translated">Delegado del tipo especificado, que se puede usar para ejecutar el método dinámico con el objeto de destino especificado.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>This method overload creates a delegate bound to a particular object.</source>
          <target state="translated">Esta sobrecarga del método crea un delegado que se enlaza a un objeto determinado.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Such a delegate is said to be closed over its first argument.</source>
          <target state="translated">Se dice que un delegado que se cerrará en su primer argumento.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Although the method is static, it acts as if it were an instance method; the instance is <ph id="ph1">`target`</ph>.</source>
          <target state="translated">Aunque el método es estático, actúa como si fuera un método de instancia; la instancia es <ph id="ph1">`target`</ph>.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>This method overload requires <ph id="ph1">`target`</ph> to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</source>
          <target state="translated">Esta sobrecarga de método requiere <ph id="ph1">`target`</ph> ser del mismo tipo como el primer parámetro del método dinámico, o se puede asignar a ese tipo (por ejemplo, una clase derivada).</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The signature of <ph id="ph1">`delegateType`</ph> has all the parameters of the dynamic method except the first.</source>
          <target state="translated">La firma de <ph id="ph1">`delegateType`</ph> tiene todos los parámetros del método dinámico excepto el primero.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>For example, if the dynamic method has the parameters <ph id="ph1">&lt;xref:System.String&gt;</ph>, <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, and <ph id="ph3">&lt;xref:System.Byte&gt;</ph>, then <ph id="ph4">`delegateType`</ph> has the parameters <ph id="ph5">&lt;xref:System.Int32&gt;</ph> and <ph id="ph6">&lt;xref:System.Byte&gt;</ph>; <ph id="ph7">`target`</ph> is of type <ph id="ph8">&lt;xref:System.String&gt;</ph>.</source>
          <target state="translated">Por ejemplo, si el método dinámico tiene los parámetros <ph id="ph1">&lt;xref:System.String&gt;</ph>, <ph id="ph2">&lt;xref:System.Int32&gt;</ph>, y <ph id="ph3">&lt;xref:System.Byte&gt;</ph>, a continuación, <ph id="ph4">`delegateType`</ph> tiene los parámetros <ph id="ph5">&lt;xref:System.Int32&gt;</ph> y <ph id="ph6">&lt;xref:System.Byte&gt;</ph>; <ph id="ph7">`target`</ph> is of type <ph id="ph8">&lt;xref:System.String&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method completes the dynamic method.</source>
          <target state="translated">Llamar a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> método o la <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método finaliza el método dinámico.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</source>
          <target state="translated">Cualquiera aún más si se intenta modificar el método dinámico, como modificar las definiciones de parámetro o emitir más lenguaje intermedio de Microsoft (MSIL), se omite; se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>To create a method body for a dynamic method when you have your own MSIL generator, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph> method to obtain a <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> object.</source>
          <target state="translated">Para crear un cuerpo de método para un método dinámico cuando tiene su propio generador de MSIL, llame a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A&gt;</ph> método para obtener un <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>If you do not have your own MSIL generator, call the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph> method to obtain an <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> object that can be used to generate the method body.</source>
          <target state="translated">Si no tiene su propio generador de MSIL, llame a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A&gt;</ph> método para obtener un <ph id="ph2">&lt;xref:System.Reflection.Emit.ILGenerator&gt;</ph> objeto que puede utilizarse para generar el cuerpo del método.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The following code example creates delegate that binds a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> to an instance of a type, so that the method acts on the same instance each time it is invoked.</source>
          <target state="translated">En el ejemplo de código siguiente se crea el delegado que se enlaza una <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> a una instancia de un tipo, por lo que el método actúa en la misma instancia cada vez que se invoca.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The code example defines a class named <ph id="ph1">`Example`</ph> with a private field, a class named <ph id="ph2">`DerivedFromxample`</ph> that derives from the first class, a delegate type named <ph id="ph3">`UseLikeStatic`</ph> that returns <ph id="ph4">&lt;xref:System.Int32&gt;</ph> and has parameters of type <ph id="ph5">`Example`</ph> and <ph id="ph6">&lt;xref:System.Int32&gt;</ph>, and a delegate type named <ph id="ph7">`UseLikeInstance`</ph> that returns <ph id="ph8">&lt;xref:System.Int32&gt;</ph> and has one parameter of type <ph id="ph9">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">El ejemplo de código define una clase denominada <ph id="ph1">`Example`</ph> con un campo privado, una clase denominada <ph id="ph2">`DerivedFromxample`</ph> que se deriva de la primera clase, un tipo de delegado denominado <ph id="ph3">`UseLikeStatic`</ph> que devuelve <ph id="ph4">&lt;xref:System.Int32&gt;</ph> y tiene parámetros de tipo <ph id="ph5">`Example`</ph> y <ph id="ph6">&lt;xref:System.Int32&gt;</ph>y un tipo de delegado denominado <ph id="ph7">`UseLikeInstance`</ph> que devuelve <ph id="ph8">&lt;xref:System.Int32&gt;</ph> y tiene un parámetro de tipo <ph id="ph9">&lt;xref:System.Int32&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The example code then creates a <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> that changes the private field of an instance of <ph id="ph2">`Example`</ph> and returns the previous value.</source>
          <target state="translated">El código de ejemplo, a continuación, crea un <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> que cambia el campo privado de una instancia de <ph id="ph2">`Example`</ph> y devuelve el valor anterior.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>In general, changing the internal fields of classes is not good object-oriented coding practice.</source>
          <target state="translated">En general, cambiar los campos internos de clases no es buena práctica de programación orientada a objetos.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The example code creates an instance of <ph id="ph1">`Example`</ph> and then creates two delegates.</source>
          <target state="translated">El código de ejemplo crea una instancia de <ph id="ph1">`Example`</ph> y, a continuación, se crean dos delegados.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The first is of type <ph id="ph1">`UseLikeStatic`</ph>, which has the same parameters as the dynamic method.</source>
          <target state="translated">El primero es de tipo <ph id="ph1">`UseLikeStatic`</ph>, que tiene los mismos parámetros que el método dinámico.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The second is of type <ph id="ph1">`UseLikeInstance`</ph>, which lacks the first parameter (of type <ph id="ph2">`Example`</ph>).</source>
          <target state="translated">El segundo es de tipo <ph id="ph1">`UseLikeInstance`</ph>, que no tiene el primer parámetro (de tipo <ph id="ph2">`Example`</ph>).</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>This delegate is created using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> method overload; the second parameter of that method overload is an instance of <ph id="ph2">`Example`</ph>, in this case the instance just created, which is bound to the newly created delegate.</source>
          <target state="translated">Este delegado se crea utilizando el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> sobrecarga del método; el segundo parámetro de esa sobrecarga del método es una instancia de <ph id="ph2">`Example`</ph>, en este caso la instancia recién creada, que está enlazada al delegado recién creado.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Whenever that delegate is invoked, the dynamic method acts on the bound instance of <ph id="ph1">`Example`</ph>.</source>
          <target state="translated">Cada vez que se invoca ese delegado, el método dinámico actúa en la instancia enlazada de <ph id="ph1">`Example`</ph>.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>This is an example of the relaxed rules for delegate binding introduced in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, along with new overloads of the <ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Este es un ejemplo de las reglas relajadas para el enlace a delegados que se introdujeron en la <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, junto con las nuevas sobrecargas de los <ph id="ph2">&lt;xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Delegate&gt;</ph> class.</source>
          <target state="translated">Para obtener más información, vea la clase <ph id="ph1">&lt;xref:System.Delegate&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The <ph id="ph1">`UseLikeStatic`</ph> delegate is invoked, passing in the instance of <ph id="ph2">`Example`</ph> that is bound to the <ph id="ph3">`UseLikeInstance`</ph> delegate.</source>
          <target state="translated">El <ph id="ph1">`UseLikeStatic`</ph> se invoca el delegado, pasando la instancia de <ph id="ph2">`Example`</ph> que está enlazado a la <ph id="ph3">`UseLikeInstance`</ph> delegar.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Then the <ph id="ph1">`UseLikeInstance`</ph> delegate is invoked, so that both delegates act on the same instance of <ph id="ph2">`Example`</ph>.</source>
          <target state="translated">La <ph id="ph1">`UseLikeInstance`</ph> delegado se invoca, para que ambos delegados actúen en la misma instancia de <ph id="ph2">`Example`</ph>.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The changes in the values of the internal field are displayed after each call.</source>
          <target state="translated">Los cambios en los valores del campo interno se muestran después de cada llamada.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>Finally, a <ph id="ph1">`UseLikeInstance`</ph> delegate is bound to an instance of <ph id="ph2">`DerivedFromxample`</ph>, and the delegate calls are repeated.</source>
          <target state="translated">Por último, un <ph id="ph1">`UseLikeInstance`</ph> delegado está enlazado a una instancia de <ph id="ph2">`DerivedFromxample`</ph>, y las llamadas al delegado se repiten.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>The dynamic method has no method body.</source>
          <target state="translated">El método dinámico no tiene ningún cuerpo de método.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> no es del mismo tipo que el primer parámetro del método dinámico y no se puede asignar a ese tipo.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
          <source><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> has the wrong number of parameters or the wrong parameter types.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="delegateType" /&gt;</ph> tiene el número incorrecto de parámetros o los tipos de parámetro incorrectos.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>Gets the type that declares the method, which is always <ph id="ph1">&lt;see langword="null" /&gt;</ph> for dynamic methods.</source>
          <target state="translated">Obtiene el tipo que declara el método, que es siempre <ph id="ph1">&lt;see langword="null" /&gt;</ph> para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>Always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Siempre es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>This property always returns <ph id="ph1">`null`</ph> for dynamic methods.</source>
          <target state="translated">Esta propiedad devuelve siempre <ph id="ph1">`null`</ph> para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>Even when a dynamic method is logically associated with a type, it is not declared by the type.</source>
          <target state="translated">Incluso cuando un método dinámico está asociado lógicamente con un tipo, no está declarado por el tipo.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>The following code example displays the declaring type of a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el tipo declarativo de un método dinámico.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The position of the parameter in the parameter list.</source>
          <target state="translated">Posición del parámetro en la lista de parámetros.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Parameters are indexed beginning with the number 1 for the first parameter.</source>
          <target state="translated">Los parámetros se indizan empezando por el número 1 para el primer parámetro.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterAttributes" /&gt;</ph> values that specifies the attributes of the parameter.</source>
          <target state="translated">Combinación bit a bit de valores <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterAttributes" /&gt;</ph> que especifica los atributos del parámetro.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The name of the parameter.</source>
          <target state="translated">Nombre del parámetro.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The name can be a zero-length string.</source>
          <target state="translated">El nombre puede ser una cadena de longitud cero.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Defines a parameter of the dynamic method.</source>
          <target state="translated">Define un parámetro del método dinámico.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Siempre devuelve <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>If <ph id="ph1">`position`</ph> is 0, the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method refers to the return value.</source>
          <target state="translated">Si <ph id="ph1">`position`</ph> es 0, el <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> método hace referencia al valor devuelto.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>Setting parameter information has no effect on the return value.</source>
          <target state="translated">Establecer información de parámetro no tiene ningún efecto en el valor devuelto.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>If the dynamic method has already been completed, by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method has no effect.</source>
          <target state="translated">Si el método dinámico se ya se ha completado, mediante una llamada a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método, el <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> método no tiene ningún efecto.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>No exception is thrown.</source>
          <target state="translated">No se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The following code example shows how to define parameter information for a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo definir la información de parámetros para un método dinámico.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>The method has no parameters.</source>
          <target state="translated">El método no tiene parámetros.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> is less than 0.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph> es menor que 0.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
          <source><ph id="ph1">&lt;paramref name="position" /&gt;</ph> is greater than the number of the method's parameters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="position" /&gt;</ph> es mayor que el número de los parámetros del método.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
          <source>Returns the base implementation for the method.</source>
          <target state="translated">Devuelve la implementación para el método.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
          <source>The base implementation of the method.</source>
          <target state="translated">La implementación base del método.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
          <source>This method always returns the current <ph id="ph1">`DynamicMethod`</ph> object.</source>
          <target state="translated">Este método siempre devuelve el valor actual <ph id="ph1">`DynamicMethod`</ph> objeto.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Returns the custom attributes applied to the method.</source>
          <target state="translated">Devuelve los atributos personalizados aplicados al método.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search the method's inheritance chain to find the custom attributes; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to check only the current method.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para buscar la cadena de herencia del método con el fin de encontrar los atributos personalizados; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para comprobar solo el método actual.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>Returns all the custom attributes defined for the method.</source>
          <target state="translated">Devuelve todos los atributos personalizados definidos para el método.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>An array of objects representing all the custom attributes of the method.</source>
          <target state="translated">Matriz de objetos que representa todos los atributos personalizados del método.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>For dynamic methods, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`inherit`</ph> has no effect, because the method is not declared in a type.</source>
          <target state="translated">Para los métodos dinámicos, especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`inherit`</ph> no tiene ningún efecto porque el método no se declara en un tipo.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>Custom attributes are not currently supported on dynamic methods.</source>
          <target state="translated">Atributos personalizados no se admiten actualmente en métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
          <source>The only attribute returned is <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; you can get the method implementation flags more easily using the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph> method.</source>
          <target state="translated">El único atributo devuelto es <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; puede obtener el método marcas de implementación más fácilmente mediante la <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> representing the type of custom attribute to return.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo de atributo personalizado que se va a devolver.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search the method's inheritance chain to find the custom attributes; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to check only the current method.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para buscar la cadena de herencia del método con el fin de encontrar los atributos personalizados; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para comprobar solo el método actual.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Returns the custom attributes of the specified type that have been applied to the method.</source>
          <target state="translated">Devuelve los atributos personalizados del tipo especificado que se han aplicado al método.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>An array of objects representing the attributes of the method that are of type <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> or derive from type <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>.</source>
          <target state="translated">Una matriz de objetos que representan los atributos del método que son de tipo <ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> o derivan del tipo <ph id="ph2">&lt;paramref name="attributeType" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>For dynamic methods, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`inherit`</ph> has no effect, because the method is not declared in a type.</source>
          <target state="translated">Para los métodos dinámicos, especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`inherit`</ph> no tiene ningún efecto porque el método no se declara en un tipo.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>Custom attributes are not currently supported on dynamic methods.</source>
          <target state="translated">Atributos personalizados no se admiten actualmente en métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source>The only attribute returned is <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; you can get the method implementation flags more easily using the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph> method.</source>
          <target state="translated">El único atributo devuelto es <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph>; puede obtener el método marcas de implementación más fácilmente mediante la <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="attributeType" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>Returns a <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</source>
          <target state="translated">Devuelve un objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> que se puede utilizar para generar un cuerpo de método a partir de los símbolos (token) de metadatos, los ámbitos y las secuencias de Lenguaje intermedio de Microsoft (MSIL).</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</source>
          <target state="translated">Un objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicILInfo" /&gt;</ph> que se puede utilizar para generar un cuerpo de método a partir de los símbolos (token) de metadatos, los ámbitos, y las secuencias de MSIL.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> class is provided to support unmanaged code generation.</source>
          <target state="translated">La <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicILInfo&gt;</ph> clase se proporciona para admitir la generación de código no administrado.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>to execute unmanaged code.</source>
          <target state="translated">Para ejecutar código no administrado.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" uid="T:System.Reflection.Emit.DynamicMethod">
          <source>Returns an MSIL generator that can be used to emit a body for the dynamic method.</source>
          <target state="translated">Devuelve un generador de MSIL que se puede usar para emitir un cuerpo para el método dinámico.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</source>
          <target state="translated">Devuelve un generador de Lenguaje Intermedio de Microsoft (MSIL) para el método con un tamaño de secuencia de MSIL predeterminado de 64 bytes.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> object for the method.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> para el método.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>After a dynamic method has been completed, by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, any further attempt to add MSIL is ignored.</source>
          <target state="translated">Una vez completado un método dinámico, mediante una llamada a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método, cualquier intento posterior de agregar MSIL se omite.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>No exception is thrown.</source>
          <target state="translated">No se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</source>
          <target state="translated">Hay restricciones en el código no comprobable en métodos dinámicos, incluso en algunos escenarios de plena confianza.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>See the "Verification" section in Remarks for <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
          <target state="translated">Vea la sección "Comprobación" en Comentarios para <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>The following code example creates a dynamic method that takes two parameters.</source>
          <target state="translated">En el ejemplo de código siguiente se crea un método dinámico que toma dos parámetros.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</source>
          <target state="translated">En el ejemplo se emite un cuerpo de función sencilla que imprime el primer parámetro en la consola y, en el ejemplo se utiliza el segundo parámetro como el valor devuelto del método.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
          <source>The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">En el ejemplo se finaliza el método mediante la creación de un delegado, invoca el delegado con parámetros diferentes y por último, se invoca el método dinámico utilizando la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>The size of the MSIL stream, in bytes.</source>
          <target state="translated">Tamaño de la secuencia MSIL, en bytes.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</source>
          <target state="translated">Devuelve un generador de Lenguaje intermedio de Microsoft (MSIL) para el método con el tamaño de secuencia de MSIL especificado.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> object for the method, with the specified MSIL stream size.</source>
          <target state="translated">Un objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.ILGenerator" /&gt;</ph> para el método, con el tamaño de secuencia de MSIL especificado.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>After a dynamic method has been completed, by calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method, any further attempt to add MSIL is ignored.</source>
          <target state="translated">Una vez completado un método dinámico, mediante una llamada a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> o <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método, cualquier intento posterior de agregar MSIL se omite.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>No exception is thrown.</source>
          <target state="translated">No se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</source>
          <target state="translated">Hay restricciones en el código no comprobable en métodos dinámicos, incluso en algunos escenarios de plena confianza.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>See the "Verification" section in Remarks for <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</source>
          <target state="translated">Vea la sección "Comprobación" en Comentarios para <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>The following code example demonstrates this method overload.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra esta sobrecarga del método.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
          <source>Returns the implementation flags for the method.</source>
          <target state="translated">Devuelve las marcas de implementación para el método.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> values representing the implementation flags for the method.</source>
          <target state="translated">Una combinación bit a bit de valores de <ph id="ph1">&lt;see cref="T:System.Reflection.MethodImplAttributes" /&gt;</ph> que representan las marcas de implementación para el método.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
          <source>Currently, method implementation attributes for dynamic methods are always <ph id="ph1">&lt;xref:System.Reflection.MethodImplAttributes.IL&gt;</ph> and <ph id="ph2">&lt;xref:System.Reflection.MethodImplAttributes.NoInlining&gt;</ph>.</source>
          <target state="translated">Actualmente, los atributos de implementación de método para los métodos dinámicos siempre son <ph id="ph1">&lt;xref:System.Reflection.MethodImplAttributes.IL&gt;</ph> y <ph id="ph2">&lt;xref:System.Reflection.MethodImplAttributes.NoInlining&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>Returns the parameters of the dynamic method.</source>
          <target state="translated">Devuelve los parámetros del método dinámico.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>An array of <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> objects that represent the parameters of the dynamic method.</source>
          <target state="translated">Una matriz de objetos <ph id="ph1">&lt;see cref="T:System.Reflection.ParameterInfo" /&gt;</ph> que representan los parámetros del método dinámico.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objects returned by this method are for information only.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.ParameterInfo&gt;</ph> objetos devueltos por este método son meramente informativos.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>Use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> method to set or change the characteristics of the parameters.</source>
          <target state="translated">Use la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A&gt;</ph> método para establecer o cambiar las características de los parámetros.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>The following code example displays the parameters of a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra los parámetros de un método dinámico.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.GetParameters">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>Gets or sets a value indicating whether the local variables in the method are zero-initialized.</source>
          <target state="translated">Obtiene o establece un valor que indica si las variables locales del método se inicializan a cero.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the local variables in the method are zero-initialized; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si las variables locales del método se inicializan a cero; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>If this property is set to <ph id="ph1">`true`</ph>, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</source>
          <target state="translated">Si esta propiedad se establece en <ph id="ph1">`true`</ph>, el lenguaje intermedio de Microsoft (MSIL) emitido incluye la inicialización de variables locales.</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>If it is set to <ph id="ph1">`false`</ph>, local variables are not initialized and the generated code is unverifiable.</source>
          <target state="translated">Si se establece en <ph id="ph1">`false`</ph>, no se inicializan las variables locales y el código generado es no comprobable.</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>The following code example displays the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph> property of a dynamic method.</source>
          <target state="translated">El siguiente código en el ejemplo se muestra la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A&gt;</ph> propiedad de un método dinámico.</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.InitLocals">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This parameter is ignored for dynamic methods, because they are static.</source>
          <target state="translated">Este parámetro se omite para los métodos dinámicos porque son estáticos.</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Specify <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Especifique <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A bitwise combination of <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph> values.</source>
          <target state="translated">Combinación bit a bit de los valores de <ph id="ph1">&lt;see cref="T:System.Reflection.BindingFlags" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> objects through reflection.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph> que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <ph id="ph2">&lt;see cref="T:System.Reflection.MemberInfo" /&gt;</ph> mediante reflexión.</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the default binder is used.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>binder<ept id="p1">&lt;/c&gt;</ept> es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se usará el enlazador predeterminado.</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For more details, see <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</source>
          <target state="translated">Para obtener más información, vea <ph id="ph1">&lt;see cref="T:System.Reflection.Binder" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An argument list.</source>
          <target state="translated">Lista de argumentos.</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</source>
          <target state="translated">Esta es una matriz de argumentos con el mismo número, orden y tipo que los parámetros del método al que se va a invocar.</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If there are no parameters this parameter should be <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Si no hay parámetros, este parámetro debe ser <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>An instance of <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> used to govern the coercion of types.</source>
          <target state="translated">Instancia de <ph id="ph1">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> usada para regir la conversión de tipos.</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If this is <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> for the current thread is used.</source>
          <target state="translated">Si es <ph id="ph1">&lt;see langword="null" /&gt;</ph>, se utiliza <ph id="ph2">&lt;see cref="T:System.Globalization.CultureInfo" /&gt;</ph> para el subproceso actual.</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, this information is needed to correctly convert a <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that represents 1000 to a <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph> value, because 1000 is represented differently by different cultures.</source>
          <target state="translated">Por ejemplo, esta información es necesaria para convertir correctamente un objeto <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> que representa 1000 en un valor <ph id="ph2">&lt;see cref="T:System.Double" /&gt;</ph>, ya que 1000 se representa de manera diferente en referencias culturales diferentes.</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</source>
          <target state="translated">Invoca el método dinámico usando los parámetros especificados, bajo las restricciones del enlazador especificado, con la información de la referencia cultural especificada.</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> containing the return value of the invoked method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Object" /&gt;</ph> que contiene el valor devuelto del método invocado.</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</source>
          <target state="translated">Además de las excepciones enumeradas, el código que realiza la llamada debe estar preparado para detectar las excepciones producidas por el método dinámico.</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Executing a dynamic method with a delegate created by the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method is more efficient than executing it with the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method.</source>
          <target state="translated">Ejecutar un método dinámico con un delegado creado por el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> método es más eficaz que ejecutarlo con la <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> method completes the dynamic method.</source>
          <target state="translated">Llamar a la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Invoke%2A&gt;</ph> método o la <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A&gt;</ph> método finaliza el método dinámico.</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</source>
          <target state="translated">Cualquiera aún más si se intenta modificar el método dinámico, como modificar las definiciones de parámetro o emitir más lenguaje intermedio de Microsoft (MSIL), se omite; se inicia ninguna excepción.</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>All dynamic methods are static, so the <ph id="ph1">`obj`</ph> parameter is always ignored.</source>
          <target state="translated">Todos los métodos dinámicos son estáticos, por lo que el <ph id="ph1">`obj`</ph> siempre se omite el parámetro.</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>To treat a dynamic method as if it were an instance method, use the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> overload that takes an object instance.</source>
          <target state="translated">Para tratar un método dinámico como si fuera un método de instancia, utilice el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29&gt;</ph> sobrecarga que toma una instancia de objeto.</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>If the dynamic method has no parameters, the value of <ph id="ph1">`parameters`</ph> should be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">Si el método dinámico no tiene parámetros, el valor de <ph id="ph1">`parameters`</ph> debe ser <ph id="ph2">`null`</ph>.</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</source>
          <target state="translated">En caso contrario, el número, tipo y orden de los elementos de la matriz de parámetros deben ser idénticos al número, tipo y orden de los parámetros del método dinámico.</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method overload is called by the <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29&gt;</ph> method overload inherited from the <ph id="ph2">&lt;xref:System.Reflection.MethodBase&gt;</ph> class, so the preceding remarks apply to both overloads.</source>
          <target state="translated">Llama a esta sobrecarga del método la <ph id="ph1">&lt;xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29&gt;</ph> sobrecarga del método se hereda de la <ph id="ph2">&lt;xref:System.Reflection.MethodBase&gt;</ph> de la clase, por lo que las observaciones anteriores se aplican a ambas sobrecargas.</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</source>
          <target state="translated">Este método no exigir permisos directamente, pero al invocar el método dinámico puede dar lugar a las peticiones de seguridad, en función del método.</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>For example, no demands are made for anonymously hosted dynamic methods that are created with the <ph id="ph1">`restrictedSkipVisibility`</ph> parameter set to <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Por ejemplo, no las peticiones se realizan para los métodos dinámicos hospedados de forma anónima que se crean con el <ph id="ph1">`restrictedSkipVisibility`</ph> parámetro establecido en <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>On the other hand, if you create a method with <ph id="ph1">`restrictedSkipVisibility`</ph> set to <ph id="ph2">`true`</ph> so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> flag.</source>
          <target state="translated">Por otro lado, si crea un método con <ph id="ph1">`restrictedSkipVisibility`</ph> establecido en <ph id="ph2">`true`</ph> por lo que puede tener acceso a un miembro oculto de un ensamblado de destino, el método producirá una demanda de los permisos del ensamblado de destino más <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph4">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>Prior to the <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this method required <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph> flag.</source>
          <target state="translated">Versiones anteriores a la <ph id="ph1">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, este método requerido <ph id="ph2">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> con el <ph id="ph3">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess&gt;</ph> marca.</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The following code example invokes a dynamic method with exact binding, using the US-English culture.</source>
          <target state="translated">En el ejemplo de código siguiente se invoca un método dinámico con enlace exacto, utilizando la referencia cultural inglés de Estados Unidos.</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.VarArgs" /&gt;</ph> calling convention is not supported.</source>
          <target state="translated">No se admite la convención de llamada <ph id="ph1">&lt;see cref="F:System.Reflection.CallingConventions.VarArgs" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The number of elements in <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> does not match the number of parameters in the dynamic method.</source>
          <target state="translated">El número de elementos de <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> no coincide con el número de parámetros del método dinámico.</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The type of one or more elements of <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> does not match the type of the corresponding parameter of the dynamic method.</source>
          <target state="translated">El tipo de uno o más elementos de <ph id="ph1">&lt;paramref name="parameters" /&gt;</ph> no coincide con el tipo del parámetro correspondiente del método dinámico.</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <ph id="ph1">&lt;paramref name="skipVisibility" /&gt;</ph> set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>, but the dynamic method accesses members that are not <ph id="ph3">&lt;see langword="public" /&gt;</ph> or <ph id="ph4">&lt;see langword="internal" /&gt;</ph> (<ph id="ph5">&lt;see langword="Friend" /&gt;</ph> in Visual Basic).</source>
          <target state="translated">El método dinámico está asociado con un módulo, no está hospedado de forma anónima y se construyó con el parámetro <ph id="ph1">&lt;paramref name="skipVisibility" /&gt;</ph> establecido en <ph id="ph2">&lt;see langword="false" /&gt;</ph>, pero tiene acceso a los miembros que no son <ph id="ph3">&lt;see langword="public" /&gt;</ph> o <ph id="ph4">&lt;see langword="internal" /&gt;</ph> (<ph id="ph5">&lt;see langword="Friend" /&gt;</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The dynamic method is anonymously hosted and was constructed with <ph id="ph1">&lt;paramref name="skipVisibility" /&gt;</ph> set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>, but it accesses members that are not <ph id="ph3">&lt;see langword="public" /&gt;</ph>.</source>
          <target state="translated">El método dinámico está hospedado de forma anónima y se construyó con el parámetro <ph id="ph1">&lt;paramref name="skipVisibility" /&gt;</ph> establecido en <ph id="ph2">&lt;see langword="false" /&gt;</ph>, pero tiene acceso a miembros que no son <ph id="ph3">&lt;see langword="public" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>The dynamic method contains unverifiable code.</source>
          <target state="translated">El método dinámico contiene código no comprobable.</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
          <source>See the "Verification" section in Remarks for <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</source>
          <target state="translated">Vea la sección "Comprobación" en Comentarios para <ph id="ph1">&lt;see cref="T:System.Reflection.Emit.DynamicMethod" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> representing the type of custom attribute to search for.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo de atributo personalizado que se va a buscar.</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to search the method's inheritance chain to find the custom attributes; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to check only the current method.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> para buscar la cadena de herencia del método con el fin de encontrar los atributos personalizados; <ph id="ph2">&lt;see langword="false" /&gt;</ph> para comprobar solo el método actual.</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>Indicates whether the specified custom attribute type is defined.</source>
          <target state="translated">Indica si se ha definido el tipo de atributo personalizado especificado.</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified custom attribute type is defined; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si está definido el tipo de atributo personalizado especificado, en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>For dynamic methods, specifying <ph id="ph1">`true`</ph> for <ph id="ph2">`inherit`</ph> has no effect.</source>
          <target state="translated">Para los métodos dinámicos, especificar <ph id="ph1">`true`</ph> para <ph id="ph2">`inherit`</ph> no tiene ningún efecto.</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>Dynamic methods have no inheritance chain.</source>
          <target state="translated">Métodos dinámicos no tengan ninguna cadena de herencia.</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
          <source>Custom attributes are not currently supported on dynamic methods.</source>
          <target state="translated">Atributos personalizados no se admiten actualmente en métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</source>
          <target state="translated">Obtiene un valor que indica si el método dinámico actual es crítico para la seguridad o crítico para la seguridad y disponible desde código transparente y, por tanto, puede realizar operaciones críticas.</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current dynamic method is security-critical or security-safe-critical; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is transparent.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método dinámico actual es crítico para la seguridad o es crítico para la seguridad y disponible desde código transparente; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si es transparente.</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, y <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> propiedades notifican el nivel de transparencia del método dinámico determinado por common language runtime (CLR).</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">Las combinaciones de estas propiedades se muestran en la tabla siguiente:</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Security level</source>
          <target state="translated">Nivel de seguridad</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Safe critical</source>
          <target state="translated">Crítico seguro</target>       </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Usar estas propiedades es mucho más fácil que examinar las anotaciones de seguridad de un ensamblado y sus tipos, comprobar el nivel de confianza actual e intentar duplicar las reglas del runtime.</target>       </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The transparency of a dynamic method depends on the module it is associated with.</source>
          <target state="translated">La transparencia de un método dinámico depende del módulo que está asociado.</target>       </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</source>
          <target state="translated">Si el método dinámico está asociado a un tipo en lugar de un módulo, su transparencia depende del módulo que contiene el tipo.</target>       </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</source>
          <target state="translated">Los métodos dinámicos no tienen anotaciones de seguridad, de modo que están asignados a la transparencia de forma predeterminada para el módulo asociado.</target>       </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</source>
          <target state="translated">Métodos dinámicos hospedados de forma anónima siempre son transparentes, porque el módulo proporcionado por el sistema que los contiene es transparente.</target>       </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</source>
          <target state="translated">La transparencia de un método dinámico que está asociado a un ensamblado de confianza (es decir, un ensamblado con nombre seguro que se instala en la caché global de ensamblados) se describe en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Assembly annotation</source>
          <target state="translated">Anotación de ensamblado</target>       </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Level 1 transparency</source>
          <target state="translated">Transparencia de nivel 1</target>       </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Level 2 transparency</source>
          <target state="translated">Transparencia de nivel 2</target>       </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Fully transparent</source>
          <target state="translated">Totalmente transparente</target>       </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Fully critical</source>
          <target state="translated">Totalmente crítico</target>       </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Mixed transparency</source>
          <target state="translated">Transparencia mixta</target>       </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Security-agnostic</source>
          <target state="translated">Independiente de la seguridad</target>       </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Safe-critical</source>
          <target state="translated">Crítico para la seguridad</target>       </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</source>
          <target state="translated">Por ejemplo, si asocia un método dinámico con un tipo que está en mscorlib.dll, que tiene el nivel 2 transparencia mixta, el método dinámico es transparente y no puede ejecutar el código crítico.</target>       </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>For information about transparency levels, see <bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id="p2">[</bpt>Security-Transparent Code, Level 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de los niveles de transparencia, consulte <bpt id="p1">[</bpt>código transparente en seguridad, nivel 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> y <bpt id="p2">[</bpt>código transparente en seguridad, nivel 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</target>       </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</source>
          <target state="translated">Asociar un método dinámico con un módulo en un ensamblado de nivel 1 de confianza que es independiente de la seguridad, como System.dll, no permite la elevación de confianza.</target>       </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.</source>
          <target state="translated">Si el conjunto de permisos del código que llama al método dinámico no incluye el conjunto de permisos concedidos de System.dll (es decir, plena confianza), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> se produce cuando se llama al método dinámico.</target>       </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</source>
          <target state="translated">La transparencia de un método dinámico que está asociado a un ensamblado de confianza parcial depende de cómo se carga el ensamblado.</target>       </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Si el ensamblado se carga con confianza parcial (por ejemplo, en un dominio de aplicación en espacio aislado), el runtime omite las anotaciones de seguridad del ensamblado.</target>       </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The assembly and all its types and members, including dynamic methods, are treated as transparent.</source>
          <target state="translated">El ensamblado y todos sus tipos y miembros, incluidos los métodos dinámicos, se tratan como transparente.</target>       </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</source>
          <target state="translated">El tiempo de ejecución presta atención a las anotaciones de seguridad únicamente si el ensamblado de confianza parcial se carga con plena confianza (por ejemplo, en el dominio de aplicación predeterminado de una aplicación de escritorio).</target>       </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</source>
          <target state="translated">En ese caso, el tiempo de ejecución asigna el método dinámico de transparencia predeterminado para los métodos según las anotaciones del ensamblado.</target>       </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>For more information about reflection emit and transparency, see <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de la reflexión emitir y transparencia, consulte <bpt id="p1">[</bpt>problemas de seguridad en la emisión de reflexión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</target>       </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de las transparencias, consulte <bpt id="p1">[</bpt>cambios de seguridad<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
          <source>The dynamic method doesn't have a method body.</source>
          <target state="translated">El método dinámico no tiene un cuerpo de método.</target>       </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</source>
          <target state="translated">Obtiene un valor que indica si el método dinámico actual es crítico para la seguridad y disponible desde código transparente en el nivel de confianza actual; es decir, si puede realizar operaciones críticas y está disponible desde código transparente.</target>       </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the dynamic method is security-safe-critical at the current trust level; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if it is security-critical or transparent.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método dinámico es crítico para la seguridad y disponible desde código transparente en el nivel de confianza actual; <ph id="ph2">&lt;see langword="false" /&gt;</ph> si es crítico para la seguridad o transparente.</target>       </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, y <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> propiedades notifican el nivel de transparencia del método dinámico determinado por common language runtime (CLR).</target>       </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">Las combinaciones de estas propiedades se muestran en la tabla siguiente:</target>       </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Security level</source>
          <target state="translated">Nivel de seguridad</target>       </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Safe critical</source>
          <target state="translated">Crítico seguro</target>       </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Usar estas propiedades es mucho más fácil que examinar las anotaciones de seguridad de un ensamblado y sus tipos, comprobar el nivel de confianza actual e intentar duplicar las reglas del runtime.</target>       </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The transparency of a dynamic method depends on the module it is associated with.</source>
          <target state="translated">La transparencia de un método dinámico depende del módulo que está asociado.</target>       </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</source>
          <target state="translated">Si el método dinámico está asociado a un tipo en lugar de un módulo, su transparencia depende del módulo que contiene el tipo.</target>       </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</source>
          <target state="translated">Los métodos dinámicos no tienen anotaciones de seguridad, de modo que están asignados a la transparencia de forma predeterminada para el módulo asociado.</target>       </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</source>
          <target state="translated">Métodos dinámicos hospedados de forma anónima siempre son transparentes, porque el módulo proporcionado por el sistema que los contiene es transparente.</target>       </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</source>
          <target state="translated">La transparencia de un método dinámico que está asociado a un ensamblado de confianza (es decir, un ensamblado con nombre seguro que se instala en la caché global de ensamblados) se describe en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Assembly annotation</source>
          <target state="translated">Anotación de ensamblado</target>       </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Level 1 transparency</source>
          <target state="translated">Transparencia de nivel 1</target>       </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Level 2 transparency</source>
          <target state="translated">Transparencia de nivel 2</target>       </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Fully transparent</source>
          <target state="translated">Totalmente transparente</target>       </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Fully critical</source>
          <target state="translated">Totalmente crítico</target>       </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Mixed transparency</source>
          <target state="translated">Transparencia mixta</target>       </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Security-agnostic</source>
          <target state="translated">Independiente de la seguridad</target>       </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Safe-critical</source>
          <target state="translated">Crítico para la seguridad</target>       </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</source>
          <target state="translated">Por ejemplo, si asocia un método dinámico con un tipo que está en mscorlib.dll, que tiene el nivel 2 transparencia mixta, el método dinámico es transparente y no puede ejecutar el código crítico.</target>       </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>For information about transparency levels, see <bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id="p2">[</bpt>Security-Transparent Code, Level 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de los niveles de transparencia, consulte <bpt id="p1">[</bpt>código transparente en seguridad, nivel 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> y <bpt id="p2">[</bpt>código transparente en seguridad, nivel 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</target>       </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</source>
          <target state="translated">Asociar un método dinámico con un módulo en un ensamblado de nivel 1 de confianza que es independiente de la seguridad, como System.dll, no permite la elevación de confianza.</target>       </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.</source>
          <target state="translated">Si el conjunto de permisos del código que llama al método dinámico no incluye el conjunto de permisos concedidos de System.dll (es decir, plena confianza), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> se produce cuando se llama al método dinámico.</target>       </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</source>
          <target state="translated">La transparencia de un método dinámico que está asociado a un ensamblado de confianza parcial depende de cómo se carga el ensamblado.</target>       </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Si el ensamblado se carga con confianza parcial (por ejemplo, en un dominio de aplicación en espacio aislado), el runtime omite las anotaciones de seguridad del ensamblado.</target>       </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The assembly and all its types and members, including dynamic methods, are treated as transparent.</source>
          <target state="translated">El ensamblado y todos sus tipos y miembros, incluidos los métodos dinámicos, se tratan como transparente.</target>       </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</source>
          <target state="translated">El tiempo de ejecución presta atención a las anotaciones de seguridad únicamente si el ensamblado de confianza parcial se carga con plena confianza (por ejemplo, en el dominio de aplicación predeterminado de una aplicación de escritorio).</target>       </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</source>
          <target state="translated">En ese caso, el tiempo de ejecución asigna el método dinámico de transparencia predeterminado para los métodos según las anotaciones del ensamblado.</target>       </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>For more information about reflection emit and transparency, see <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de la reflexión emitir y transparencia, consulte <bpt id="p1">[</bpt>problemas de seguridad en la emisión de reflexión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</target>       </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de las transparencias, consulte <bpt id="p1">[</bpt>cambios de seguridad<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
          <source>The dynamic method doesn't have a method body.</source>
          <target state="translated">El método dinámico no tiene un cuerpo de método.</target>       </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</source>
          <target state="translated">Obtiene un valor que indica si el método dinámico actual es transparente en el nivel de confianza actual y, por tanto, no puede realizar operaciones críticas.</target>       </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the dynamic method is security-transparent at the current trust level; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método dinámico es transparente para la seguridad en el nivel de confianza actual; de lo contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A&gt;</ph>, y <ph id="ph3">&lt;xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A&gt;</ph> propiedades notifican el nivel de transparencia del método dinámico determinado por common language runtime (CLR).</target>       </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The combinations of these properties are shown in the following table:</source>
          <target state="translated">Las combinaciones de estas propiedades se muestran en la tabla siguiente:</target>       </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Security level</source>
          <target state="translated">Nivel de seguridad</target>       </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>IsSecurityCritical</source>
          <target state="translated">IsSecurityCritical</target>       </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>IsSecuritySafeCritical</source>
          <target state="translated">IsSecuritySafeCritical</target>       </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>IsSecurityTransparent</source>
          <target state="translated">IsSecurityTransparent</target>       </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Safe critical</source>
          <target state="translated">Crítico seguro</target>       </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</source>
          <target state="translated">Usar estas propiedades es mucho más fácil que examinar las anotaciones de seguridad de un ensamblado y sus tipos, comprobar el nivel de confianza actual e intentar duplicar las reglas del runtime.</target>       </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The transparency of a dynamic method depends on the module it is associated with.</source>
          <target state="translated">La transparencia de un método dinámico depende del módulo que está asociado.</target>       </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</source>
          <target state="translated">Si el método dinámico está asociado a un tipo en lugar de un módulo, su transparencia depende del módulo que contiene el tipo.</target>       </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</source>
          <target state="translated">Los métodos dinámicos no tienen anotaciones de seguridad, de modo que están asignados a la transparencia de forma predeterminada para el módulo asociado.</target>       </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</source>
          <target state="translated">Métodos dinámicos hospedados de forma anónima siempre son transparentes, porque el módulo proporcionado por el sistema que los contiene es transparente.</target>       </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</source>
          <target state="translated">La transparencia de un método dinámico que está asociado a un ensamblado de confianza (es decir, un ensamblado con nombre seguro que se instala en la caché global de ensamblados) se describe en la tabla siguiente.</target>       </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Assembly annotation</source>
          <target state="translated">Anotación de ensamblado</target>       </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Level 1 transparency</source>
          <target state="translated">Transparencia de nivel 1</target>       </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Level 2 transparency</source>
          <target state="translated">Transparencia de nivel 2</target>       </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Fully transparent</source>
          <target state="translated">Totalmente transparente</target>       </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Fully critical</source>
          <target state="translated">Totalmente crítico</target>       </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Mixed transparency</source>
          <target state="translated">Transparencia mixta</target>       </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Transparent</source>
          <target state="translated">Transparente</target>       </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Security-agnostic</source>
          <target state="translated">Independiente de la seguridad</target>       </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Safe-critical</source>
          <target state="translated">Crítico para la seguridad</target>       </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Critical</source>
          <target state="translated">Crítico</target>       </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</source>
          <target state="translated">Por ejemplo, si asocia un método dinámico con un tipo que está en mscorlib.dll, que tiene el nivel 2 transparencia mixta, el método dinámico es transparente y no puede ejecutar el código crítico.</target>       </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>For information about transparency levels, see <bpt id="p1">[</bpt>Security-Transparent Code, Level 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> and <bpt id="p2">[</bpt>Security-Transparent Code, Level 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de los niveles de transparencia, consulte <bpt id="p1">[</bpt>código transparente en seguridad, nivel 1<ept id="p1">](~/docs/framework/misc/security-transparent-code-level-1.md)</ept> y <bpt id="p2">[</bpt>código transparente en seguridad, nivel 2<ept id="p2">](~/docs/framework/misc/security-transparent-code-level-2.md)</ept>.</target>       </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</source>
          <target state="translated">Asociar un método dinámico con un módulo en un ensamblado de nivel 1 de confianza que es independiente de la seguridad, como System.dll, no permite la elevación de confianza.</target>       </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the dynamic method is called.</source>
          <target state="translated">Si el conjunto de permisos del código que llama al método dinámico no incluye el conjunto de permisos concedidos de System.dll (es decir, plena confianza), <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> se produce cuando se llama al método dinámico.</target>       </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</source>
          <target state="translated">La transparencia de un método dinámico que está asociado a un ensamblado de confianza parcial depende de cómo se carga el ensamblado.</target>       </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</source>
          <target state="translated">Si el ensamblado se carga con confianza parcial (por ejemplo, en un dominio de aplicación en espacio aislado), el runtime omite las anotaciones de seguridad del ensamblado.</target>       </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The assembly and all its types and members, including dynamic methods, are treated as transparent.</source>
          <target state="translated">El ensamblado y todos sus tipos y miembros, incluidos los métodos dinámicos, se tratan como transparente.</target>       </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</source>
          <target state="translated">El tiempo de ejecución presta atención a las anotaciones de seguridad únicamente si el ensamblado de confianza parcial se carga con plena confianza (por ejemplo, en el dominio de aplicación predeterminado de una aplicación de escritorio).</target>       </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</source>
          <target state="translated">En ese caso, el tiempo de ejecución asigna el método dinámico de transparencia predeterminado para los métodos según las anotaciones del ensamblado.</target>       </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>For more information about reflection emit and transparency, see <bpt id="p1">[</bpt>Security Issues in Reflection Emit<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de la reflexión emitir y transparencia, consulte <bpt id="p1">[</bpt>problemas de seguridad en la emisión de reflexión<ept id="p1">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.</target>       </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>For information about transparency, see <bpt id="p1">[</bpt>Security Changes<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</source>
          <target state="translated">Para obtener información acerca de las transparencias, consulte <bpt id="p1">[</bpt>cambios de seguridad<ept id="p1">](~/docs/framework/security/security-changes.md)</ept>.</target>       </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
          <source>The dynamic method doesn't have a method body.</source>
          <target state="translated">El método dinámico no tiene un cuerpo de método.</target>       </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
          <source>Not supported for dynamic methods.</source>
          <target state="translated">No se admite para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
          <source>Not supported for dynamic methods.</source>
          <target state="translated">No se admite para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
          <source>Not allowed for dynamic methods.</source>
          <target state="translated">No se permite para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>Gets the module with which the dynamic method is logically associated.</source>
          <target state="translated">Obtiene el módulo con el que está asociado lógicamente el método dinámico.</target>       </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>The <ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> with which the current dynamic method is associated.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Reflection.Module" /&gt;</ph> al que está asociado el método dinámico actual.</target>       </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>If a module was specified when the dynamic method was created, this property returns that module.</source>
          <target state="translated">Si un módulo se especificó cuando se creó el método dinámico, esta propiedad devuelve ese módulo.</target>       </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</source>
          <target state="translated">Si se especificó un tipo como propietario cuando se creó el método dinámico, esta propiedad devuelve el módulo que contiene ese tipo.</target>       </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>The following code example displays the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Module%2A&gt;</ph> property of a dynamic method.</source>
          <target state="translated">El siguiente código en el ejemplo se muestra la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.Module%2A&gt;</ph> propiedad de un método dinámico.</target>       </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Module">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>Gets the name of the dynamic method.</source>
          <target state="translated">Obtiene el nombre del método dinámico.</target>       </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>The simple name of the method.</source>
          <target state="translated">Nombre simple del método.</target>       </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>It is not necessary to name dynamic methods.</source>
          <target state="translated">No es necesario para los métodos dinámicos de nombre.</target>       </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>The following code example displays the name of a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el nombre de un método dinámico.</target>       </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.Name">
          <source>This code example is part of a larger example provided for  the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>Gets the class that was used in reflection to obtain the method.</source>
          <target state="translated">Obtiene la clase que se usó en la reflexión para obtener el método.</target>       </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>Always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Siempre es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>This property always returns <ph id="ph1">`null`</ph> for dynamic methods.</source>
          <target state="translated">Esta propiedad devuelve siempre <ph id="ph1">`null`</ph> para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>The following code example displays the reflected type of a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el tipo reflejado de un método dinámico.</target>       </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
          <source>Gets the return parameter of the dynamic method.</source>
          <target state="translated">Obtiene el parámetro devuelto del método dinámico.</target>       </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
          <source>Always <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Siempre es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
          <source>This property always returns <ph id="ph1">`null`</ph> for dynamic methods.</source>
          <target state="translated">Esta propiedad devuelve siempre <ph id="ph1">`null`</ph> para los métodos dinámicos.</target>       </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>Gets the type of return value for the dynamic method.</source>
          <target state="translated">Obtiene el tipo de valor devuelto para el método dinámico.</target>       </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>A <ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> representing the type of the return value of the current method; <ph id="ph2">&lt;see cref="T:System.Void" /&gt;</ph> if the method has no return type.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Type" /&gt;</ph> que representa el tipo del valor devuelto del método actual; <ph id="ph2">&lt;see cref="T:System.Void" /&gt;</ph> si el método no tiene ningún tipo de valor devuelto.</target>       </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>If <ph id="ph1">`null`</ph> was specified for the return type when the dynamic method was created, this property returns <ph id="ph2">&lt;xref:System.Void?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">Si <ph id="ph1">`null`</ph> se especificó para el tipo de valor devuelto cuando se creó el método dinámico, esta propiedad devuelve <ph id="ph2">&lt;xref:System.Void?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>The following code example displays the return type of a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra el tipo de valor devuelto de un método dinámico.</target>       </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnType">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>Gets the custom attributes of the return type for the dynamic method.</source>
          <target state="translated">Obtiene los atributos personalizados del tipo de valor devuelto para el método dinámico.</target>       </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>An <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> representing the custom attributes of the return type for the dynamic method.</source>
          <target state="translated">Un objeto <ph id="ph1">&lt;see cref="T:System.Reflection.ICustomAttributeProvider" /&gt;</ph> que representa los atributos personalizados del tipo de valor devuelto para el método dinámico.</target>       </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A&gt;</ph> method is always empty.</source>
          <target state="translated">Atributos personalizados no se admiten en el tipo de valor devuelto de un método dinámico, por lo que la matriz de atributos personalizados devuelta por la <ph id="ph1">&lt;xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A&gt;</ph> método siempre está vacío.</target>       </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>The following code example shows how to display the custom attributes of the return type of a dynamic method.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo mostrar los atributos personalizados del tipo de valor devuelto de un método dinámico.</target>       </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>Returns the signature of the method, represented as a string.</source>
          <target state="translated">Devuelve la firma del método, representada como una cadena.</target>       </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>A string representing the method signature.</source>
          <target state="translated">Cadena que representa la firma del método.</target>       </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>The signature includes only types and the method name, if any.</source>
          <target state="translated">La firma incluye solo los tipos y el nombre del método, si existe.</target>       </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>Parameter names are not included.</source>
          <target state="translated">No se incluyen los nombres de parámetro.</target>       </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>The following code example displays the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.ToString%2A&gt;</ph> method of a dynamic method.</source>
          <target state="translated">El siguiente código en el ejemplo se muestra la <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod.ToString%2A&gt;</ph> método de un método dinámico.</target>       </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Reflection.Emit.DynamicMethod.ToString">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.Reflection.Emit.DynamicMethod&gt;</ph> clase.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>