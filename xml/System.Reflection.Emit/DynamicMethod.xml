<Type Name="DynamicMethod" FullName="System.Reflection.Emit.DynamicMethod">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2d2648e46890987df7b96cd4787aa5d57de2433b" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34285358" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class DynamicMethod : System.Reflection.MethodInfo" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DynamicMethod extends System.Reflection.MethodInfo" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicMethod" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DynamicMethod&#xA;Inherits MethodInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicMethod sealed : System::Reflection::MethodInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Reflection.MethodInfo</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7ce34-101">Define y representa un método dinámico que se puede compilar, ejecutar y descartar.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7ce34-101">Defines and represents a dynamic method that can be compiled, executed, and discarded.</span>
      </span>
      <span data-ttu-id="7ce34-102">Los métodos descartados están disponibles para la recolección de elementos no utilizados.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7ce34-102">Discarded methods are available for garbage collection.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-103">Puede usar el <xref:System.Reflection.Emit.DynamicMethod> clase para generar y ejecutar un método en tiempo de ejecución sin tener que generar un ensamblado dinámico y un tipo dinámico para contener el método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-103">You can use the <xref:System.Reflection.Emit.DynamicMethod> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method.</span></span> <span data-ttu-id="7ce34-104">El código ejecutable creado por el compilador just-in-time (JIT) se recupera cuando la <xref:System.Reflection.Emit.DynamicMethod> objeto sea reclamado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-104">The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref:System.Reflection.Emit.DynamicMethod> object is reclaimed.</span></span> <span data-ttu-id="7ce34-105">Los métodos dinámicos son la forma más eficaz para generar y ejecutar pequeñas cantidades de código.</span><span class="sxs-lookup"><span data-stu-id="7ce34-105">Dynamic methods are the most efficient way to generate and execute small amounts of code.</span></span>  
  
 <span data-ttu-id="7ce34-106">Un método dinámico se puede hospedar de forma anónima, o puede ser lógicamente asociado a un módulo o a un tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-106">A dynamic method can be anonymously hosted, or it can be logically associated with a module or with a type.</span></span>  
  
-   <span data-ttu-id="7ce34-107">Si el método dinámico es hospedado de forma anónima, se encuentra en un ensamblado proporcionado por el sistema y, por tanto, está aislado del resto del código.</span><span class="sxs-lookup"><span data-stu-id="7ce34-107">If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code.</span></span> <span data-ttu-id="7ce34-108">De forma predeterminada, no tiene acceso a datos no públicos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-108">By default, it does not have access to any non-public data.</span></span> <span data-ttu-id="7ce34-109">Un método dinámico hospedado de forma anónima puede restringir la capacidad de omitir las comprobaciones de visibilidad del compilador JIT, si se ha concedido <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-109">An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-110">El nivel de confianza del ensamblado cuyos miembros no públicos se tiene acceso mediante el método dinámico debe ser igual a o un subconjunto de, el nivel de confianza de la pila de llamadas que emite el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-110">The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method.</span></span> <span data-ttu-id="7ce34-111">Para obtener más información sobre los métodos dinámicos hospedados de forma anónima, vea [Tutorial: emitir código en escenarios de confianza parcial](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-111">For more information about anonymously hosted dynamic methods, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/docs/framework/reflection-and-codedom/walkthrough-emitting-code-in-partial-trust-scenarios.md).</span></span>  
  
-   <span data-ttu-id="7ce34-112">Si el método dinámico está asociado a un módulo que se especifica, el método dinámico es eficazmente global para ese módulo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-112">If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module.</span></span> <span data-ttu-id="7ce34-113">Puede tener acceso a todos los tipos del módulo y todos los `internal` (`Friend` en Visual Basic) los miembros de los tipos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-113">It can access all types in the module and all `internal` (`Friend` in Visual Basic) members of the types.</span></span> <span data-ttu-id="7ce34-114">Puede asociar un dinámico método a cualquier módulo, independientemente de si se creó el módulo, que proporciona una demanda de <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> marca se puede satisfacer mediante la pila de llamadas que incluye el código.</span><span class="sxs-lookup"><span data-stu-id="7ce34-114">You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag can be satisfied by the call stack that includes your code.</span></span> <span data-ttu-id="7ce34-115">Si el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> marca se incluye en la concesión, el método dinámico puede omitir las comprobaciones de visibilidad del compilador JIT y obtener acceso a los datos privados de todos los tipos declarados en el módulo o en cualquier otro módulo de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-115">If the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7ce34-116">Cuando se especifica el módulo al que está asociado un método dinámico, dicho módulo no debe estar en el ensamblado proporcionado por el sistema que se utiliza para el hospedaje anónimo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-116">When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</span></span>  
  
-   <span data-ttu-id="7ce34-117">Si el método dinámico está asociado a un tipo que se especifique, tiene acceso a todos los miembros del tipo, independientemente del nivel de acceso.</span><span class="sxs-lookup"><span data-stu-id="7ce34-117">If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level.</span></span> <span data-ttu-id="7ce34-118">Además, se pueden omitir las comprobaciones de visibilidad JIT.</span><span class="sxs-lookup"><span data-stu-id="7ce34-118">In addition, JIT visibility checks can be skipped.</span></span> <span data-ttu-id="7ce34-119">Esto proporciona el método dinámico obtiene acceso a los datos privados de otros tipos declarados en el mismo módulo o en cualquier otro módulo de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-119">This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly.</span></span> <span data-ttu-id="7ce34-120">Puede asociar un método dinámico a cualquier tipo, pero el código debe tener concedido <xref:System.Security.Permissions.ReflectionPermission> con ambos el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> y <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> marcas.</span><span class="sxs-lookup"><span data-stu-id="7ce34-120">You can associate a dynamic method with any type, but your code must be granted <xref:System.Security.Permissions.ReflectionPermission> with both the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> and <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flags.</span></span>  
  
 <span data-ttu-id="7ce34-121">La siguiente tabla muestra qué tipos y miembros son accesibles para un método dinámico hospedado de forma anónima, con y sin comprobaciones de visibilidad JIT, dependiendo de si <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> se le concede la marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-121">The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess> flag is granted.</span></span>  
  
||<span data-ttu-id="7ce34-122">Sin <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="7ce34-122">Without <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|<span data-ttu-id="7ce34-123">Con <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span><span class="sxs-lookup"><span data-stu-id="7ce34-123">With <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess></span></span>|  
|-|-|-|  
|<span data-ttu-id="7ce34-124">Sin omitir las comprobaciones de visibilidad JIT</span><span class="sxs-lookup"><span data-stu-id="7ce34-124">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="7ce34-125">Miembros públicos de tipos públicos de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-125">Public members of public types in any assembly.</span></span>|<span data-ttu-id="7ce34-126">Miembros públicos de tipos públicos de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-126">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="7ce34-127">JIT de omitir las comprobaciones de visibilidad, con restricciones</span><span class="sxs-lookup"><span data-stu-id="7ce34-127">Skipping JIT visibility checks, with restrictions</span></span>|<span data-ttu-id="7ce34-128">Miembros públicos de tipos públicos de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-128">Public members of public types in any assembly.</span></span>|<span data-ttu-id="7ce34-129">Todos los miembros de todos los tipos, solo en los ensamblados cuyos niveles de confianza son iguales o menores que el nivel de confianza del ensamblado que emite el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-129">All members of all types, only in assemblies whose trust levels are equal to or less than the trust level of the assembly that emitted the dynamic method.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-130">Versiones anteriores a la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emisión de código requerido <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-130">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], emitting code required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-131">Este permiso está incluido de forma predeterminada en la plena confianza y la intranet local conjuntos de permisos con nombre, pero no en la Internet conjunto de permisos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-131">This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set.</span></span> <span data-ttu-id="7ce34-132">Por lo tanto, en versiones anteriores de la [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] se puede usar una biblioteca con permisos de Internet solo si tiene la <xref:System.Security.SecurityCriticalAttribute> atributo y también ejecuta una <xref:System.Security.PermissionSet.Assert%2A> para <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-132">Therefore, in earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] a library can be used with Internet permissions only if it has the <xref:System.Security.SecurityCriticalAttribute> attribute and also executes an <xref:System.Security.PermissionSet.Assert%2A> for <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>.</span></span> <span data-ttu-id="7ce34-133">Estas bibliotecas requieren una revisión cuidadosa de la seguridad porque los errores de codificación pueden provocar vulnerabilidades de seguridad.</span><span class="sxs-lookup"><span data-stu-id="7ce34-133">Such libraries require careful security review because coding errors could result in security holes.</span></span> <span data-ttu-id="7ce34-134">[!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] permite emitir código en escenarios de confianza parcial sin emitir ninguna petición de seguridad, porque la generación de código no es en sí una operación que requiera privilegios.</span><span class="sxs-lookup"><span data-stu-id="7ce34-134">The [!INCLUDE[net_v20SP1_short](~/includes/net-v20sp1-short-md.md)] allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation.</span></span> <span data-ttu-id="7ce34-135">Es decir, el código generado no tiene más permisos que el ensamblado que lo emite.</span><span class="sxs-lookup"><span data-stu-id="7ce34-135">That is, the generated code has no more permissions than the assembly that emits it.</span></span> <span data-ttu-id="7ce34-136">Esto permite que las bibliotecas que emiten código sean transparentes en seguridad y elimina la necesidad de declarar <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, lo que simplifica la tarea de escribir una biblioteca segura.</span><span class="sxs-lookup"><span data-stu-id="7ce34-136">This allows libraries that emit code to be security transparent and removes the need to assert <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit>, which simplifies the task of writing a secure library.</span></span> <span data-ttu-id="7ce34-137">Para usar esta característica, la aplicación debe tener como destino la [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o una versión posterior.</span><span class="sxs-lookup"><span data-stu-id="7ce34-137">To use this feature, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 <span data-ttu-id="7ce34-138">La siguiente tabla muestra qué tipos y miembros son accesibles a un método dinámico que está asociado con un módulo o a un tipo en un módulo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-138">The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module.</span></span>  
  
||<span data-ttu-id="7ce34-139">Asociado con el módulo</span><span class="sxs-lookup"><span data-stu-id="7ce34-139">Associated with module</span></span>|<span data-ttu-id="7ce34-140">Asociado con el tipo</span><span class="sxs-lookup"><span data-stu-id="7ce34-140">Associated with type</span></span>|  
|-|-|-|  
|<span data-ttu-id="7ce34-141">Sin omitir las comprobaciones de visibilidad JIT</span><span class="sxs-lookup"><span data-stu-id="7ce34-141">Without skipping JIT visibility checks</span></span>|<span data-ttu-id="7ce34-142">Miembros públicos e internos de tipos públicos, internos y privados en el módulo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-142">Public and internal members of public, internal, and private types in the module.</span></span><br /><br /> <span data-ttu-id="7ce34-143">Miembros públicos de tipos públicos de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-143">Public members of public types in any assembly.</span></span>|<span data-ttu-id="7ce34-144">Todos los miembros del tipo asociado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-144">All members of the associated type.</span></span> <span data-ttu-id="7ce34-145">Miembros públicos e internos de todos los demás tipos del módulo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-145">Public and internal members of all the other types in the module.</span></span><br /><br /> <span data-ttu-id="7ce34-146">Miembros públicos de tipos públicos de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-146">Public members of public types in any assembly.</span></span>|  
|<span data-ttu-id="7ce34-147">Comprobaciones de visibilidad JIT omitiendo</span><span class="sxs-lookup"><span data-stu-id="7ce34-147">Skipping JIT visibility checks</span></span>|<span data-ttu-id="7ce34-148">Todos los miembros de todos los tipos de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-148">All members of all types in any assembly.</span></span>|<span data-ttu-id="7ce34-149">Todos los miembros de todos los tipos de cualquier ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-149">All members of all types in any assembly.</span></span>|  
  
 <span data-ttu-id="7ce34-150">Un método dinámico que está asociado a un módulo tiene los permisos de ese módulo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-150">A dynamic method that is associated with a module has the permissions of that module.</span></span> <span data-ttu-id="7ce34-151">Un método dinámico que está asociado a un tipo tiene los permisos del módulo que contiene ese tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-151">A dynamic method that is associated with a type has the permissions of the module containing that type.</span></span>  
  
 <span data-ttu-id="7ce34-152">Los métodos dinámicos y sus parámetros no es necesario asignarle un nombre, pero puede especificar nombres para ayudar en la depuración.</span><span class="sxs-lookup"><span data-stu-id="7ce34-152">Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging.</span></span> <span data-ttu-id="7ce34-153">No se admiten atributos personalizados en métodos dinámicos o sus parámetros.</span><span class="sxs-lookup"><span data-stu-id="7ce34-153">Custom attributes are not supported on dynamic methods or their parameters.</span></span>  
  
 <span data-ttu-id="7ce34-154">Aunque los métodos dinámicos son `static` métodos (`Shared` métodos en Visual Basic), el relajar las reglas de enlace a delegados introducidas en la [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] permitir que un método dinámico se puede enlazar a un objeto, para que actúe como un método de instancia cuando se llama con esa instancia de delegado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-154">Although dynamic methods are `static` methods (`Shared` methods in Visual Basic), the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance.</span></span> <span data-ttu-id="7ce34-155">Se proporciona un ejemplo que muestra cómo hacerlo para los <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-155">An example that demonstrates this is provided for the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-156">En el [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], los métodos dinámicos no admiten información de símbolos, es decir, nombres de variables locales y asignación de número de línea.</span><span class="sxs-lookup"><span data-stu-id="7ce34-156">In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], dynamic methods do not support symbol information, that is, local variable names and line-number mapping.</span></span> <span data-ttu-id="7ce34-157">Esta limitación podría desaparecer en una versión futura.</span><span class="sxs-lookup"><span data-stu-id="7ce34-157">This limitation might be removed in a future version.</span></span> <span data-ttu-id="7ce34-158">Puede usar <xref:System.Reflection.Emit.AssemblyBuilder> durante el desarrollo para simplificar la depuración del lenguaje intermedio de Microsoft (MSIL) generado y, a continuación, pasar a métodos dinámicos durante la implementación final, ya que el <xref:System.Reflection.Emit.ILGenerator> llamadas son los mismos en ambos casos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-158">You can use <xref:System.Reflection.Emit.AssemblyBuilder> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref:System.Reflection.Emit.ILGenerator> calls are the same in both cases.</span></span>  
  
## <a name="verification"></a><span data-ttu-id="7ce34-159">para complementos</span><span class="sxs-lookup"><span data-stu-id="7ce34-159">Verification</span></span>  
 <span data-ttu-id="7ce34-160">En la lista siguiente se resume las condiciones en las que los métodos dinámicos pueden contener código no comprobable.</span><span class="sxs-lookup"><span data-stu-id="7ce34-160">The following list summarizes the conditions under which dynamic methods can contain unverifiable code.</span></span> <span data-ttu-id="7ce34-161">(Por ejemplo, un método dinámico es no se puede comprobar si su <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> propiedad está establecida en `false`.)</span><span class="sxs-lookup"><span data-stu-id="7ce34-161">(For example, a dynamic method is unverifiable if its <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property is set to `false`.)</span></span>  
  
-   <span data-ttu-id="7ce34-162">Un método dinámico que está asociado a un ensamblado crítico para la seguridad también es crítico para la seguridad y puede omitir la comprobación.</span><span class="sxs-lookup"><span data-stu-id="7ce34-162">A dynamic method that is associated with a security-critical assembly is also security-critical, and can skip verification.</span></span> <span data-ttu-id="7ce34-163">Por ejemplo, un ensamblado sin atributos de seguridad que se ejecuta como una aplicación de escritorio se trata como crítico para la seguridad en tiempo de ejecución.</span><span class="sxs-lookup"><span data-stu-id="7ce34-163">For example, an assembly without security attributes that is run as a desktop application is treated as security-critical by the runtime.</span></span> <span data-ttu-id="7ce34-164">Si asocia un método dinámico con el ensamblado, el método dinámico puede contener código no comprobable.</span><span class="sxs-lookup"><span data-stu-id="7ce34-164">If you associate a dynamic method with the assembly, the dynamic method can contain unverifiable code.</span></span>  
  
-   <span data-ttu-id="7ce34-165">Si un método dinámico que contiene código no comprobable está asociado a un ensamblado que tiene la transparencia de nivel 1, el compilador de just-in-time (JIT) inserta una demanda de seguridad.</span><span class="sxs-lookup"><span data-stu-id="7ce34-165">If a dynamic method that contains unverifiable code is associated with an assembly that has level 1 transparency, the just-in-time (JIT) compiler injects a security demand.</span></span> <span data-ttu-id="7ce34-166">La petición se realiza correctamente sólo si el método dinámico se ejecuta por código de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-166">The demand succeeds only if the dynamic method is executed by fully trusted code.</span></span> <span data-ttu-id="7ce34-167">Vea [código transparente en seguridad, nivel 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-167">See [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md).</span></span>  
  
-   <span data-ttu-id="7ce34-168">Si un método dinámico que contiene código no comprobable está asociado a un ensamblado que tiene la transparencia de nivel 2 (como mscorlib.dll), produce una excepción (insertada por el compilador JIT) en lugar de realizar una petición de seguridad.</span><span class="sxs-lookup"><span data-stu-id="7ce34-168">If a dynamic method that contains unverifiable code is associated with an assembly that has level 2 transparency (such as mscorlib.dll), it throws an exception (injected by the JIT compiler) instead of making a security demand.</span></span> <span data-ttu-id="7ce34-169">Vea [código transparente en seguridad, nivel 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-169">See [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
-   <span data-ttu-id="7ce34-170">Un método dinámico hospedado de forma anónima que contiene código no comprobable siempre produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="7ce34-170">An anonymously hosted dynamic method that contains unverifiable code always throws an exception.</span></span> <span data-ttu-id="7ce34-171">Nunca puede omitir la comprobación, incluso si se crea y ejecuta por código de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-171">It can never skip verification, even if it is created and executed by fully trusted code.</span></span>  
  
 <span data-ttu-id="7ce34-172">La excepción que se produce en código no comprobable varía en función del modo en que se invoca el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-172">The exception that is thrown for unverifiable code varies depending on the way the dynamic method is invoked.</span></span> <span data-ttu-id="7ce34-173">Si se invoca un método dinámico mediante el uso de un delegado devuelto desde el <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método, un <xref:System.Security.VerificationException> se produce.</span><span class="sxs-lookup"><span data-stu-id="7ce34-173">If you invoke a dynamic method by using a delegate returned from the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method, a <xref:System.Security.VerificationException> is thrown.</span></span> <span data-ttu-id="7ce34-174">Si se invoca el método dinámico utilizando la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método, un <xref:System.Reflection.TargetInvocationException> se produce con interior <xref:System.Security.VerificationException>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-174">If you invoke the dynamic method by using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, a <xref:System.Reflection.TargetInvocationException> is thrown with an inner <xref:System.Security.VerificationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-175">En el ejemplo de código siguiente se crea un método dinámico que toma dos parámetros.</span><span class="sxs-lookup"><span data-stu-id="7ce34-175">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="7ce34-176">En el ejemplo se emite un cuerpo de función sencilla que imprime el primer parámetro en la consola y, en el ejemplo se utiliza el segundo parámetro como el valor devuelto del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-176">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="7ce34-177">En el ejemplo se finaliza el método mediante la creación de un delegado, invoca el delegado con parámetros diferentes y por último, se invoca el método dinámico utilizando la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-177">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.All#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.All#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-178">Crea un método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-178">Creates a dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7ce34-179">Nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-179">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-180">Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-180">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="7ce34-181">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-181">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="7ce34-182">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico o <see langword="null" /> si el método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-182">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-183">Inicializa un método dinámico hospedado de forma anónima, especificando el nombre del método, el tipo de valor devuelto y los tipos de parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-183">Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-184">El método dinámico creado por este constructor está asociado con un ensamblado anónimo en lugar de un tipo o módulo existente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-184">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="7ce34-185">El ensamblado anónimo existe exclusivamente para proporcionar un entorno de espacio aislado para los métodos dinámicos, es decir, para aislarlos de otro código.</span><span class="sxs-lookup"><span data-stu-id="7ce34-185">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="7ce34-186">Este entorno resulta seguro para el método dinámico se genera y ejecuta código de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="7ce34-186">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="7ce34-187">Este constructor especifica que just-in-time (JIT) las comprobaciones de visibilidad se aplicará en el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-187">This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method.</span></span> <span data-ttu-id="7ce34-188">Es decir, el código del método dinámico tiene acceso a los métodos públicos de clases públicas.</span><span class="sxs-lookup"><span data-stu-id="7ce34-188">That is, the code in the dynamic method has access to public methods of public classes.</span></span> <span data-ttu-id="7ce34-189">Se producen excepciones si el método intenta obtener acceso a tipos o miembros que son `private`, `protected`, o `internal` (`Friend` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7ce34-189">Exceptions are thrown if the method tries to access types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="7ce34-190">Para crear un método dinámico que le haya limitado la capacidad para omitir las comprobaciones de visibilidad JIT, utilice el <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span><span class="sxs-lookup"><span data-stu-id="7ce34-190">To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref:System.Reflection.Emit.DynamicMethod.%23ctor%28System.String%2CSystem.Type%2CSystem.Type%5B%5D%2CSystem.Boolean%29> constructor.</span></span>  
  
 <span data-ttu-id="7ce34-191">Cuando se crea un método dinámico hospedado de forma anónima, la pila de llamadas del ensamblado emisor se incluye.</span><span class="sxs-lookup"><span data-stu-id="7ce34-191">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="7ce34-192">Cuando se invoca el método, los permisos del ensamblado emisor se usan en lugar de los permisos del llamador real.</span><span class="sxs-lookup"><span data-stu-id="7ce34-192">When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="7ce34-193">Por lo tanto, el método dinámico no se puede ejecutar en un nivel de privilegios superior del ensamblado que lo emitió, incluso si se pasa a y ejecutado por un ensamblado que tiene un nivel de confianza superior.</span><span class="sxs-lookup"><span data-stu-id="7ce34-193">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="7ce34-194">Este constructor especifica los atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> y <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>y la convención de llamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-194">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-195">Este constructor se introdujo en la [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o una versión posterior.</span><span class="sxs-lookup"><span data-stu-id="7ce34-195">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-196">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-196">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-197">
            <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-197">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-198">
            <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-198">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, bool restrictedSkipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, bool restrictedSkipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="restrictedSkipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7ce34-199">Nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-199">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-200">Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-200">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="7ce34-201">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-201">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="7ce34-202">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico o <see langword="null" /> si el método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-202">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="restrictedSkipVisibility">
          <span data-ttu-id="7ce34-203">
            <see langword="true" /> para omitir las comprobaciones de visibilidad de JIT en tipos y miembros a los que se tiene acceso por el MSIL del método dinámico, con esta restricción: el nivel de confianza de los ensamblados que contienen esos tipos y miembros debe ser igual o menor que el nivel de confianza de la pila de llamadas que emite el método dinámico; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-203">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-204">Inicializa un método dinámico hospedado de forma anónima, especificando el nombre del método, el tipo de valor devuelto, los tipos de parámetros y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-204">Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-205">El método dinámico creado por este constructor está asociado con un ensamblado anónimo en lugar de un tipo o módulo existente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-205">The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module.</span></span> <span data-ttu-id="7ce34-206">El ensamblado anónimo existe exclusivamente para proporcionar un entorno de espacio aislado para los métodos dinámicos, es decir, para aislarlos de otro código.</span><span class="sxs-lookup"><span data-stu-id="7ce34-206">The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code.</span></span> <span data-ttu-id="7ce34-207">Este entorno resulta seguro para el método dinámico se genera y ejecuta código de confianza parcial.</span><span class="sxs-lookup"><span data-stu-id="7ce34-207">This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code.</span></span>  
  
 <span data-ttu-id="7ce34-208">Métodos dinámicos hospedados de forma anónima no tienen acceso automático a los tipos o miembros que son `private`, `protected`, o `internal` (`Friend` en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="7ce34-208">Anonymously hosted dynamic methods do not have automatic access to any types or members that are `private`, `protected`, or `internal` (`Friend` in Visual Basic).</span></span> <span data-ttu-id="7ce34-209">Esto es diferente de métodos dinámicos que están asociados a un tipo o módulo, existentes que tienen acceso a los miembros ocultos en su ámbito asociado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-209">This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope.</span></span>  
  
 <span data-ttu-id="7ce34-210">Especifique `true` para `restrictedSkipVisibility` si el método dinámico debe tener acceso a tipos o miembros que son `private`, `protected`, o `internal`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-210">Specify `true` for `restrictedSkipVisibility` if your dynamic method has to access types or members that are `private`, `protected`, or `internal`.</span></span> <span data-ttu-id="7ce34-211">Esto proporciona el método dinámico acceso restringido a estos miembros.</span><span class="sxs-lookup"><span data-stu-id="7ce34-211">This gives the dynamic method restricted access to these members.</span></span> <span data-ttu-id="7ce34-212">Es decir, los miembros pueden tener acceso solo si se cumplen las condiciones siguientes:</span><span class="sxs-lookup"><span data-stu-id="7ce34-212">That is, the members can be accessed only if the following conditions are met:</span></span>  
  
-   <span data-ttu-id="7ce34-213">Los miembros de destino pertenecen a un ensamblado que tiene un nivel de confianza igual o menor que la pila de llamadas que emite el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-213">The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</span></span>  
  
-   <span data-ttu-id="7ce34-214">La pila de llamadas que emite el método dinámico se le concede <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-214">The call stack that emits the dynamic method is granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-215">Esto es siempre true cuando el código se ejecuta con plena confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-215">This is always true when the code is executed with full trust.</span></span> <span data-ttu-id="7ce34-216">Para código de confianza parcial, es true solo si el host concede explícitamente el permiso.</span><span class="sxs-lookup"><span data-stu-id="7ce34-216">For partially trusted code, it is true only if the host explicitly grants the permission.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7ce34-217">Si no se ha concedido el permiso, se produce una excepción de seguridad cuando <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> se llama o cuando se invoca el método dinámico, no cuando se llama a este constructor.</span><span class="sxs-lookup"><span data-stu-id="7ce34-217">If the permission has not been granted, a security exception is thrown when <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> is called or when the dynamic method is invoked, not when this constructor is called.</span></span> <span data-ttu-id="7ce34-218">No se requiere ningún permiso especial para emitir el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-218">No special permissions are required to emit the dynamic method.</span></span>  
  
 <span data-ttu-id="7ce34-219">Por ejemplo, un método dinámico que se crea con `restrictedSkipVisibility` establecido en `true` puede tener acceso a un miembro privado de cualquier ensamblado en la pila de llamadas si la pila de llamadas se ha concedido acceso a miembros restringidos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-219">For example, a dynamic method that is created with `restrictedSkipVisibility` set to `true` can access a private member of any assembly on the call stack if the call stack has been granted restricted member access.</span></span> <span data-ttu-id="7ce34-220">Si el método dinámico se crea con código de confianza parcial en la pila de llamadas, no se puede tener acceso a un miembro privado de un tipo en un [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] ensamblado, porque esos ensamblados son de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-220">If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] assembly, because such assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="7ce34-221">Si `restrictedSkipVisibility` es `false`, se aplican las comprobaciones de visibilidad JIT.</span><span class="sxs-lookup"><span data-stu-id="7ce34-221">If `restrictedSkipVisibility` is `false`, JIT visibility checks are enforced.</span></span> <span data-ttu-id="7ce34-222">El código del método dinámico tiene acceso a los métodos públicos de clases públicas y se producen excepciones si intenta obtener acceso a tipos o miembros que son `private`, `protected`, o `internal`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-222">The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are `private`, `protected`, or `internal`.</span></span>  
  
 <span data-ttu-id="7ce34-223">Cuando se crea un método dinámico hospedado de forma anónima, la pila de llamadas del ensamblado emisor se incluye.</span><span class="sxs-lookup"><span data-stu-id="7ce34-223">When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included.</span></span> <span data-ttu-id="7ce34-224">Cuando se invoca el método, se utilizan los permisos de la pila de llamadas emisora en lugar de los permisos del llamador real.</span><span class="sxs-lookup"><span data-stu-id="7ce34-224">When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller.</span></span> <span data-ttu-id="7ce34-225">Por lo tanto, el método dinámico no se puede ejecutar en un nivel de privilegios superior del ensamblado que lo emitió, incluso si se pasa a y ejecutado por un ensamblado que tiene un nivel de confianza superior.</span><span class="sxs-lookup"><span data-stu-id="7ce34-225">Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</span></span>  
  
 <span data-ttu-id="7ce34-226">Este constructor especifica los atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> y <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>y la convención de llamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-226">This constructor specifies the method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and the calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-227">Este constructor se introdujo en la [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o una versión posterior.</span><span class="sxs-lookup"><span data-stu-id="7ce34-227">This constructor was introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-228">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-228">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-229">
            <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-229">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-230">
            <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-230">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7ce34-231">Nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-231">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-232">Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-232">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="7ce34-233">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-233">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="7ce34-234">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico o <see langword="null" /> si el método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-234">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="7ce34-235">
            <see cref="T:System.Reflection.Module" /> que representa el módulo con el que se va a asociar de manera lógica al método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-235">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-236">Crea un método dinámico que es global para un módulo, especificando el nombre del método, el tipo de devolución, los tipos de parámetros y el módulo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-236">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-237">Este constructor especifica los atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> y <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, convención de llamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>y no omite las comprobaciones de visibilidad just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="7ce34-237">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
 <span data-ttu-id="7ce34-238">El método dinámico creado con este constructor tiene acceso a public y `internal` (`Friend` en Visual Basic) los miembros de todos los tipos contenidos en el módulo `m`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-238">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types contained in module `m`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-239">Por compatibilidad con versiones anteriores, este constructor solicita <xref:System.Security.Permissions.SecurityPermission> con el <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> marca si las condiciones siguientes son true: `m` es un módulo que no sea el módulo que realiza la llamada y la demanda de <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> ha fallado la marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-239">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="7ce34-240">Si la demanda de <xref:System.Security.Permissions.SecurityPermission> se realiza correctamente, se permite la operación.</span><span class="sxs-lookup"><span data-stu-id="7ce34-240">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-241">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este miembro ya no requiere <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-241">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-242">(Consulte [problemas de seguridad en la reflexión emisión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="7ce34-242">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-243">En el ejemplo de código siguiente se crea un método dinámico que toma dos parámetros.</span><span class="sxs-lookup"><span data-stu-id="7ce34-243">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="7ce34-244">En el ejemplo se emite un cuerpo de función sencilla que imprime el primer parámetro en la consola y, en el ejemplo se utiliza el segundo parámetro como el valor devuelto del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-244">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="7ce34-245">En el ejemplo se finaliza el método mediante la creación de un delegado, invoca el delegado con parámetros diferentes y por último, se invoca el método dinámico utilizando la <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-245">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%28System.Object%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-246">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-246">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="7ce34-247">-o bien- <paramref name="m" /> es un módulo que proporciona hospedaje anónimo para métodos dinámicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-247">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-248">
            <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-248">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7ce34-249">-o bien- <paramref name="m" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-249">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-250">
            <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-250">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7ce34-251">Para asociar el método dinámico con un módulo distinto del módulo que realiza la llamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-251">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="7ce34-252">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-252">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7ce34-253">Nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-253">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-254">Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-254">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="7ce34-255">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-255">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="7ce34-256">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico, o <see langword="null" /> si el método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-256">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="7ce34-257">
            <see cref="T:System.Type" /> con el que está asociado lógicamente el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-257">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="7ce34-258">El método dinámico tiene acceso a todos los miembros del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-258">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-259">Crea un método dinámico, especificando el nombre del método, tipo de valor devuelto, los tipos de parámetro y el tipo al que está asociado lógicamente el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-259">Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-260">El método dinámico creado con este constructor tiene acceso a todos los miembros del tipo `owner`y a public y `internal` (`Friend` en Visual Basic) los miembros de todos los tipos en el módulo que contiene `owner`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-260">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span>  
  
 <span data-ttu-id="7ce34-261">Este constructor especifica los atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> y <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, convención de llamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>y no omite las comprobaciones de visibilidad just-in-time (JIT).</span><span class="sxs-lookup"><span data-stu-id="7ce34-261">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>, and does not skip just-in-time (JIT) visibility checks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-262">Por compatibilidad con versiones anteriores, este constructor solicita <xref:System.Security.Permissions.SecurityPermission> con el <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> marca si las condiciones siguientes son true: `owner` está en un módulo distinto del módulo de llamada y la demanda de <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> ha fallado la marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-262">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="7ce34-263">Si la demanda de <xref:System.Security.Permissions.SecurityPermission> se realiza correctamente, se permite la operación.</span><span class="sxs-lookup"><span data-stu-id="7ce34-263">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-264">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este miembro ya no requiere <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-264">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-265">(Consulte [problemas de seguridad en la reflexión emisión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="7ce34-265">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-266">En el ejemplo de código siguiente se crea un <xref:System.Reflection.Emit.DynamicMethod> que está asociado lógicamente con un tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-266">The following code example creates a <xref:System.Reflection.Emit.DynamicMethod> that is logically associated with a type.</span></span> <span data-ttu-id="7ce34-267">Esta asociación le da acceso a los miembros privados de ese tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-267">This association gives it access to the private members of that type.</span></span>  
  
 <span data-ttu-id="7ce34-268">El ejemplo de código define una clase denominada `Example` con un campo privado, una clase denominada `DerivedFromxample` que se deriva de la primera clase, un tipo de delegado denominado `UseLikeStatic` que devuelve <xref:System.Int32> y tiene parámetros de tipo `Example` y <xref:System.Int32>y un tipo de delegado denominado `UseLikeInstance` que devuelve <xref:System.Int32> y tiene un parámetro de tipo <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-268">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="7ce34-269">El código de ejemplo, a continuación, crea un <xref:System.Reflection.Emit.DynamicMethod> que cambia el campo privado de una instancia de `Example` y devuelve el valor anterior.</span><span class="sxs-lookup"><span data-stu-id="7ce34-269">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-270">En general, cambiar los campos internos de clases no es buena práctica de programación orientada a objetos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-270">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="7ce34-271">El código de ejemplo crea una instancia de `Example` y, a continuación, se crean dos delegados.</span><span class="sxs-lookup"><span data-stu-id="7ce34-271">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="7ce34-272">El primero es de tipo `UseLikeStatic`, que tiene los mismos parámetros que el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-272">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="7ce34-273">El segundo es de tipo `UseLikeInstance`, que no tiene el primer parámetro (de tipo `Example`).</span><span class="sxs-lookup"><span data-stu-id="7ce34-273">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="7ce34-274">Este delegado se crea utilizando el <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> sobrecarga del método; el segundo parámetro de esa sobrecarga del método es una instancia de `Example`, en este caso la instancia recién creada, que está enlazada al delegado recién creado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-274">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="7ce34-275">Cada vez que se invoca ese delegado, el método dinámico actúa en la instancia enlazada de `Example`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-275">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-276">Este es un ejemplo de las reglas relajadas para el enlace a delegados que se introdujeron en la [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], junto con las nuevas sobrecargas de los <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-276">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7ce34-277">Para obtener más información, vea la clase <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-277">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="7ce34-278">El `UseLikeStatic` se invoca el delegado, pasando la instancia de `Example` que está enlazado a la `UseLikeInstance` delegar.</span><span class="sxs-lookup"><span data-stu-id="7ce34-278">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="7ce34-279">La `UseLikeInstance` delegado se invoca, para que ambos delegados actúen en la misma instancia de `Example`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-279">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="7ce34-280">Los cambios en los valores del campo interno se muestran después de cada llamada.</span><span class="sxs-lookup"><span data-stu-id="7ce34-280">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="7ce34-281">Por último, un `UseLikeInstance` delegado está enlazado a una instancia de `DerivedFromxample`, y las llamadas al delegado se repiten.</span><span class="sxs-lookup"><span data-stu-id="7ce34-281">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-282">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-282">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="7ce34-283">-o bien- <paramref name="owner" /> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un tipo o método genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-283">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-284">
            <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-284">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7ce34-285">-o bien- <paramref name="owner" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-285">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-286">
            <paramref name="returnType" /> es <see langword="null" /> o es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-286">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7ce34-287">Para asociar el método dinámico con un tipo en un módulo distinto del módulo que realiza la llamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-287">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="7ce34-288">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-288">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7ce34-289">Nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-289">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-290">Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-290">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="7ce34-291">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-291">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="7ce34-292">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico o <see langword="null" /> si el método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-292">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">
          <span data-ttu-id="7ce34-293">
            <see cref="T:System.Reflection.Module" /> que representa el módulo con el que se va a asociar de manera lógica al método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-293">A <see cref="T:System.Reflection.Module" /> representing the module with which the dynamic method is to be logically associated.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="7ce34-294">
            <see langword="true" /> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que accede el MSIL del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-294">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-295">Crea un método dinámico que es global para un módulo, especificando el nombre del método, el tipo de valor devuelto, los tipos de parámetros, el módulo y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-295">Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-296">Este constructor especifica los atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> y <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>y la convención de llamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-296">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7ce34-297">El método dinámico creado con este constructor tiene acceso a public y `internal` (`Friend` en Visual Basic) los miembros de todos los tipos incluidos en el módulo `m`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-297">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the types in contained module `m`.</span></span> <span data-ttu-id="7ce34-298">Omitiendo el compilador JIT las comprobaciones de visibilidad del compilador permite que el método dinámico tener acceso a los miembros privados y protegidos de todos los demás tipos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-298">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="7ce34-299">Esto es útil, por ejemplo, cuando se escribe código para serializar objetos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-299">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-300">Por compatibilidad con versiones anteriores, este constructor solicita <xref:System.Security.Permissions.SecurityPermission> con el <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> marca si las condiciones siguientes son true: `m` es un módulo que no sea el módulo que realiza la llamada y la demanda de <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> ha fallado la marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-300">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="7ce34-301">Si la demanda de <xref:System.Security.Permissions.SecurityPermission> se realiza correctamente, se permite la operación.</span><span class="sxs-lookup"><span data-stu-id="7ce34-301">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-302">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este miembro ya no requiere <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-302">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-303">(Consulte [problemas de seguridad en la reflexión emisión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="7ce34-303">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-304">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-304">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="7ce34-305">-o bien- <paramref name="m" /> es un módulo que proporciona hospedaje anónimo para métodos dinámicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-305">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-306">
            <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-306">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7ce34-307">-o bien- <paramref name="m" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-307">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-308">
            <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-308">
              <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7ce34-309">Para asociar el método dinámico con un módulo distinto del módulo que realiza la llamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-309">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="7ce34-310">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-310">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7ce34-311">Nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-311">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-312">Puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-312">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="7ce34-313">Objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-313">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="7ce34-314">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico, o <see langword="null" /> si el método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-314">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="7ce34-315">
            <see cref="T:System.Type" /> con el que está asociado lógicamente el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-315">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="7ce34-316">El método dinámico tiene acceso a todos los miembros del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-316">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="7ce34-317">
            <see langword="true" /> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el MSIL del método dinámico; en otro caso, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-317">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-318">Crea un método dinámico que especifica el nombre del método, el tipo de valor de devolución, los tipos de parámetros, el tipo con el que está asociado lógicamente el método dinámico y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para los tipos y miembros a los que se tiene acceso mediante el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-318">Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-319">El método dinámico creado con este constructor tiene acceso a todos los miembros del tipo `owner`y a public y `internal` (`Friend` en Visual Basic) los miembros de todos los tipos en el módulo que contiene `owner`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-319">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the other types in the module that contains `owner`.</span></span> <span data-ttu-id="7ce34-320">Omitiendo el compilador JIT las comprobaciones de visibilidad del compilador permite que el método dinámico tener acceso a los miembros privados y protegidos de todos los demás tipos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-320">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="7ce34-321">Esto es útil, por ejemplo, cuando se escribe código para serializar objetos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-321">This is useful, for example, when writing code to serialize objects.</span></span>  
  
 <span data-ttu-id="7ce34-322">Este constructor especifica los atributos de método <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> y <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>y la convención de llamada <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-322">This constructor specifies method attributes <xref:System.Reflection.MethodAttributes.Public?displayProperty=nameWithType> and <xref:System.Reflection.MethodAttributes.Static?displayProperty=nameWithType>, and calling convention <xref:System.Reflection.CallingConventions.Standard?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-323">Por compatibilidad con versiones anteriores, este constructor solicita <xref:System.Security.Permissions.SecurityPermission> con el <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> marca si las condiciones siguientes son true: `owner` está en un módulo distinto del módulo de llamada y la demanda de <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> ha fallado la marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-323">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="7ce34-324">Si la demanda de <xref:System.Security.Permissions.SecurityPermission> se realiza correctamente, se permite la operación.</span><span class="sxs-lookup"><span data-stu-id="7ce34-324">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-325">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este miembro ya no requiere <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-325">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-326">(Consulte [problemas de seguridad en la reflexión emisión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="7ce34-326">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-327">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-327">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="7ce34-328">-o bien- <paramref name="owner" /> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un tipo o método genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-328">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-329">
            <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-329">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7ce34-330">-o bien- <paramref name="owner" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-330">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-331">
            <paramref name="returnType" /> es <see langword="null" /> o es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-331">
              <paramref name="returnType" /> is <see langword="null" />, or is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7ce34-332">Para asociar el método dinámico con un tipo en un módulo distinto del módulo que realiza la llamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-332">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="7ce34-333">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-333">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Reflection.Module m, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As Module, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, System::Reflection::Module ^ m, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="m" Type="System.Reflection.Module" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7ce34-334">Nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-334">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-335">Esto puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-335">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="7ce34-336">Combinación bit a bit de valores <see cref="T:System.Reflection.MethodAttributes" /> que especifica los atributos del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-336">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-337">La única combinación permitida es <see cref="F:System.Reflection.MethodAttributes.Public" /> y <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-337">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="7ce34-338">La convención de llamada para el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-338">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-339">Debe ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-339">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="7ce34-340">Un objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-340">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="7ce34-341">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico o <see langword="null" /> si el método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-341">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="m">To be added.</param>
        <param name="skipVisibility">
          <span data-ttu-id="7ce34-342">
            <see langword="true" /> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el MSIL del método dinámico; en otro caso, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-342">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-343">Crea un método dinámico que es global para un módulo, especificando el nombre del método, los atributos, la convención de nomenclatura, el tipo de valor devuelto, los tipos de parámetros, el módulo y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para tipos y miembros a los que se tiene acceso por el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-343">Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-344">El método dinámico creado con este constructor tiene acceso a public y `internal` (`Friend` en Visual Basic) los miembros de todos los tipos públicos e internos contenidos en el módulo `m`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-344">The dynamic method created with this constructor has access to public and `internal` (`Friend` in Visual Basic) members of all the public and internal types contained in module `m`.</span></span>  
  
 <span data-ttu-id="7ce34-345">Omitiendo el compilador JIT las comprobaciones de visibilidad del compilador permite que el método dinámico tener acceso a los miembros privados y protegidos de todos los demás tipos del módulo y en todos los demás ensamblados.</span><span class="sxs-lookup"><span data-stu-id="7ce34-345">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well.</span></span> <span data-ttu-id="7ce34-346">Esto es útil, por ejemplo, cuando se escribe código para serializar objetos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-346">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-347">Por compatibilidad con versiones anteriores, este constructor solicita <xref:System.Security.Permissions.SecurityPermission> con el <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> marca si las condiciones siguientes son true: `m` es un módulo que no sea el módulo que realiza la llamada y la demanda de <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> ha fallado la marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-347">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `m` is a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="7ce34-348">Si la demanda de <xref:System.Security.Permissions.SecurityPermission> se realiza correctamente, se permite la operación.</span><span class="sxs-lookup"><span data-stu-id="7ce34-348">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-349">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este miembro ya no requiere <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-349">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-350">(Consulte [problemas de seguridad en la reflexión emisión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="7ce34-350">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-351">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-351">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="7ce34-352">-o bien- <paramref name="m" /> es un módulo que proporciona hospedaje anónimo para métodos dinámicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-352">-or-  <paramref name="m" /> is a module that provides anonymous hosting for dynamic methods.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-353">
            <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-353">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7ce34-354">-o bien- <paramref name="m" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-354">-or-  <paramref name="m" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-355">
            <paramref name="attributes" /> es una combinación de indicadores distinta de <see cref="F:System.Reflection.MethodAttributes.Public" /> y <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-355">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="7ce34-356">-o bien- <paramref name="callingConvention" /> no es <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-356">-or-  <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="7ce34-357">-o bien- <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-357">-or-  <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7ce34-358">Para asociar el método dinámico con un módulo distinto del módulo que realiza la llamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-358">to associate the dynamic method with a module other than the calling module.</span>
          </span>
          <span data-ttu-id="7ce34-359">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-359">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Reflection.MethodAttributes attributes, valuetype System.Reflection.CallingConventions callingConvention, class System.Type returnType, class System.Type[] parameterTypes, class System.Type owner, bool skipVisibility) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DynamicMethod(System::String ^ name, System::Reflection::MethodAttributes attributes, System::Reflection::CallingConventions callingConvention, Type ^ returnType, cli::array &lt;Type ^&gt; ^ parameterTypes, Type ^ owner, bool skipVisibility);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="attributes" Type="System.Reflection.MethodAttributes" />
        <Parameter Name="callingConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="owner" Type="System.Type" />
        <Parameter Name="skipVisibility" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="7ce34-360">Nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-360">The name of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-361">Esto puede ser una cadena de longitud cero, pero no puede ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-361">This can be a zero-length string, but it cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="7ce34-362">Combinación bit a bit de valores <see cref="T:System.Reflection.MethodAttributes" /> que especifica los atributos del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-362">A bitwise combination of <see cref="T:System.Reflection.MethodAttributes" /> values that specifies the attributes of the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-363">La única combinación permitida es <see cref="F:System.Reflection.MethodAttributes.Public" /> y <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-363">The only combination allowed is <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
        </param>
        <param name="callingConvention">
          <span data-ttu-id="7ce34-364">La convención de llamada para el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-364">The calling convention for the dynamic method.</span>
          </span>
          <span data-ttu-id="7ce34-365">Debe ser <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-365">Must be <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="7ce34-366">Un objeto <see cref="T:System.Type" /> que especifica el tipo de valor devuelto del método dinámico o <see langword="null" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-366">A <see cref="T:System.Type" /> object that specifies the return type of the dynamic method, or <see langword="null" /> if the method has no return type.</span>
          </span>
        </param>
        <param name="parameterTypes">
          <span data-ttu-id="7ce34-367">Matriz de objetos <see cref="T:System.Type" /> que especifican los tipos de los parámetros del método dinámico, o <see langword="null" /> si el método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-367">An array of <see cref="T:System.Type" /> objects specifying the types of the parameters of the dynamic method, or <see langword="null" /> if the method has no parameters.</span>
          </span>
        </param>
        <param name="owner">
          <span data-ttu-id="7ce34-368">
            <see cref="T:System.Type" /> con el que está asociado lógicamente el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-368">A <see cref="T:System.Type" /> with which the dynamic method is logically associated.</span>
          </span>
          <span data-ttu-id="7ce34-369">El método dinámico tiene acceso a todos los miembros del tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-369">The dynamic method has access to all members of the type.</span>
          </span>
        </param>
        <param name="skipVisibility">
          <span data-ttu-id="7ce34-370">
            <see langword="true" /> para omitir las comprobaciones de visibilidad JIT en tipos y miembros a los que obtiene acceso el MSIL del método dinámico; en otro caso, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-370">
              <see langword="true" /> to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-371">Crea un método dinámico que especifica el nombre del método, los atributos, la convención de llamada, el tipo de valor de devolución, los tipos de parámetros, el tipo con el que está asociado lógicamente el método dinámico y si se deben omitir comprobaciones de visibilidad Just-In-Time (JIT) para los tipos y miembros a los que se tiene acceso mediante el lenguaje intermedio de Microsoft (MSIL) del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-371">Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-372">El método dinámico es global para el módulo que contiene el tipo `owner`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-372">The dynamic method is global to the module that contains the type `owner`.</span></span> <span data-ttu-id="7ce34-373">Tiene acceso a todos los miembros del tipo `owner`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-373">It has access to all members of the type `owner`.</span></span>  
  
 <span data-ttu-id="7ce34-374">El método dinámico creado con este constructor tiene acceso a todos los miembros del tipo `owner`y a public y `internal` (`Friend` en Visual Basic) los miembros de todos los tipos contenidos en el módulo que contiene `owner`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-374">The dynamic method created with this constructor has access to all members of the type `owner`, and to public and `internal` (`Friend` in Visual Basic) members of all the types contained in the module that contains `owner`.</span></span> <span data-ttu-id="7ce34-375">Omitiendo el compilador JIT las comprobaciones de visibilidad del compilador permite que el método dinámico tener acceso a los miembros privados y protegidos de todos los demás tipos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-375">Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well.</span></span> <span data-ttu-id="7ce34-376">Esto es útil, por ejemplo, cuando se escribe código para serializar objetos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-376">This is useful, for example, when writing code to serialize objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-377">Por compatibilidad con versiones anteriores, este constructor solicita <xref:System.Security.Permissions.SecurityPermission> con el <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> marca si las condiciones siguientes son true: `owner` está en un módulo distinto del módulo de llamada y la demanda de <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> ha fallado la marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-377">For backward compatibility, this constructor demands <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence?displayProperty=nameWithType> flag if the following conditions are both true: `owner` is in a module other than the calling module, and the demand for <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag has failed.</span></span> <span data-ttu-id="7ce34-378">Si la demanda de <xref:System.Security.Permissions.SecurityPermission> se realiza correctamente, se permite la operación.</span><span class="sxs-lookup"><span data-stu-id="7ce34-378">If the demand for <xref:System.Security.Permissions.SecurityPermission> succeeds, the operation is allowed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-379">A partir de la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este miembro ya no requiere <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-379">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="7ce34-380">(Consulte [problemas de seguridad en la reflexión emisión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) Para utilizar esta funcionalidad, la aplicación debe utilizar [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] o posterior como destino.</span><span class="sxs-lookup"><span data-stu-id="7ce34-380">(See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-381">Un elemento de <paramref name="parameterTypes" /> es <see langword="null" /> o <see cref="T:System.Void" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-381">An element of <paramref name="parameterTypes" /> is <see langword="null" /> or <see cref="T:System.Void" />.</span>
          </span>
          <span data-ttu-id="7ce34-382">-o bien- <paramref name="owner" /> es una interfaz, una matriz, un tipo genérico abierto o un parámetro de tipo de un tipo o método genérico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-382">-or-  <paramref name="owner" /> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-383">
            <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-383">
              <paramref name="name" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="7ce34-384">-o bien- <paramref name="owner" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-384">-or-  <paramref name="owner" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-385">
            <paramref name="attributes" /> es una combinación de indicadores distinta de <see cref="F:System.Reflection.MethodAttributes.Public" /> y <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-385">
              <paramref name="attributes" /> is a combination of flags other than <see cref="F:System.Reflection.MethodAttributes.Public" /> and <see cref="F:System.Reflection.MethodAttributes.Static" />.</span>
          </span>
          <span data-ttu-id="7ce34-386">-o bien- <paramref name="callingConvention" /> no es <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-386">-or-  <paramref name="callingConvention" /> is not <see cref="F:System.Reflection.CallingConventions.Standard" />.</span>
          </span>
          <span data-ttu-id="7ce34-387">-o bien- <paramref name="returnType" /> es un tipo para el que <see cref="P:System.Type.IsByRef" /> devuelve <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-387">-or-  <paramref name="returnType" /> is a type for which <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission">
          <span data-ttu-id="7ce34-388">Para asociar el método dinámico con un tipo en un módulo distinto del módulo que realiza la llamada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-388">to associate the dynamic method with a type in a module other than the calling module.</span>
          </span>
          <span data-ttu-id="7ce34-389">Enumeración asociada: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-389">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Attributes As MethodAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodAttributes Attributes { System::Reflection::MethodAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-390">Obtiene los atributos especificados cuando se creó el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-390">Gets the attributes specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-391">Una combinación bit a bit de los valores <see cref="T:System.Reflection.MethodAttributes" /> que representan los atributos del método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-391">A bitwise combination of the <see cref="T:System.Reflection.MethodAttributes" /> values representing the attributes for the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-392">Actualmente, los atributos de método para un método dinámico siempre son <xref:System.Reflection.MethodAttributes.Public> y <xref:System.Reflection.MethodAttributes.Static>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-392">Currently, the method attributes for a dynamic method are always <xref:System.Reflection.MethodAttributes.Public> and <xref:System.Reflection.MethodAttributes.Static>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-393">En el ejemplo de código siguiente se muestra los atributos de método de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-393">The following code example displays the method attributes of a dynamic method.</span></span> <span data-ttu-id="7ce34-394">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-394">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#21](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#21)]
 [!code-csharp[Reflection.DynamicMethod.All#21](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#21)]
 [!code-vb[Reflection.DynamicMethod.All#21](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public override System.Reflection.CallingConventions CallingConvention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.CallingConventions CallingConvention" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CallingConvention As CallingConventions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::CallingConventions CallingConvention { System::Reflection::CallingConventions get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.CallingConventions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-395">Obtiene la convención de llamada especificada cuando se creó el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-395">Gets the calling convention specified when the dynamic method was created.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-396">Uno de los valores de <see cref="T:System.Reflection.CallingConventions" /> que indica la convención de llamada del método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-396">One of the <see cref="T:System.Reflection.CallingConventions" /> values that indicates the calling convention of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-397">Actualmente, la convención de llamada para un método dinámico es siempre <xref:System.Reflection.CallingConventions.Standard>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-397">Currently, the calling convention for a dynamic method is always <xref:System.Reflection.CallingConventions.Standard>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-398">En el ejemplo de código siguiente se muestra la convención de llamada de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-398">The following code example displays the calling convention of a dynamic method.</span></span> <span data-ttu-id="7ce34-399">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-399">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#22](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#22)]
 [!code-csharp[Reflection.DynamicMethod.All#22](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#22)]
 [!code-vb[Reflection.DynamicMethod.All#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDelegate">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-400">Finaliza el método dinámico y crea a un delegado que se puede usar para ejecutarlo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-400">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="7ce34-401">Tipo de delegado cuya firma coincide con la del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-401">A delegate type whose signature matches that of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-402">Finaliza el método dinámico y crea a un delegado que se puede usar para ejecutarlo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-402">Completes the dynamic method and creates a delegate that can be used to execute it.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-403">Un delegado del tipo especificado, que se puede usar para ejecutar el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-403">A delegate of the specified type, which can be used to execute the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-404">Llamar a la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método o la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método finaliza el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-404">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="7ce34-405">Cualquiera aún más si se intenta modificar el método dinámico, como modificar las definiciones de parámetro o emitir más lenguaje intermedio de Microsoft (MSIL), se omite; se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="7ce34-405">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="7ce34-406">Para crear un cuerpo de método para un método dinámico cuando tiene su propio generador de MSIL, llame a la <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> método para obtener un <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="7ce34-406">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="7ce34-407">Si no tiene su propio generador de MSIL, llame a la <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> método para obtener un <xref:System.Reflection.Emit.ILGenerator> objeto que puede utilizarse para generar el cuerpo del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-407">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-408">En el ejemplo de código siguiente se crea un método dinámico que toma dos parámetros.</span><span class="sxs-lookup"><span data-stu-id="7ce34-408">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="7ce34-409">En el ejemplo se emite un cuerpo de función sencilla que imprime el primer parámetro en la consola y, en el ejemplo se utiliza el segundo parámetro como el valor devuelto del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-409">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="7ce34-410">En el ejemplo se finaliza el método mediante la creación de un delegado, invoca el delegado con parámetros diferentes y por último, se invoca el método dinámico utilizando la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-410">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7ce34-411">El método dinámico no tiene ningún cuerpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-411">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-412">
            <paramref name="delegateType" /> tiene el número incorrecto de parámetros o los tipos de parámetro incorrectos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-412">
              <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateDelegate">
      <MemberSignature Language="C#" Value="public override sealed Delegate CreateDelegate (Type delegateType, object target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Delegate CreateDelegate(class System.Type delegateType, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function CreateDelegate (delegateType As Type, target As Object) As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Delegate ^ CreateDelegate(Type ^ delegateType, System::Object ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="7ce34-413">Tipo de delegado cuya firma coincide con la del método dinámico menos el primer parámetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-413">A delegate type whose signature matches that of the dynamic method, minus the first parameter.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="7ce34-414">Objeto al que está enlazado el delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-414">An object the delegate is bound to.</span>
          </span>
          <span data-ttu-id="7ce34-415">Debe ser del mismo tipo que el primer parámetro del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-415">Must be of the same type as the first parameter of the dynamic method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-416">Completa el método dinámico y crea un delegado que puede utilizarse para ejecutarlo, especificando el tipo de delegado y un objeto que se enlaza al delegado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-416">Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-417">Delegado del tipo especificado, que se puede usar para ejecutar el método dinámico con el objeto de destino especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-417">A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-418">Esta sobrecarga del método crea un delegado que se enlaza a un objeto determinado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-418">This method overload creates a delegate bound to a particular object.</span></span> <span data-ttu-id="7ce34-419">Se dice que un delegado que se cerrará en su primer argumento.</span><span class="sxs-lookup"><span data-stu-id="7ce34-419">Such a delegate is said to be closed over its first argument.</span></span> <span data-ttu-id="7ce34-420">Aunque el método es estático, actúa como si fuera un método de instancia; la instancia es `target`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-420">Although the method is static, it acts as if it were an instance method; the instance is `target`.</span></span>  
  
 <span data-ttu-id="7ce34-421">Esta sobrecarga de método requiere `target` ser del mismo tipo como el primer parámetro del método dinámico, o se puede asignar a ese tipo (por ejemplo, una clase derivada).</span><span class="sxs-lookup"><span data-stu-id="7ce34-421">This method overload requires `target` to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).</span></span>  <span data-ttu-id="7ce34-422">La firma de `delegateType` tiene todos los parámetros del método dinámico excepto el primero.</span><span class="sxs-lookup"><span data-stu-id="7ce34-422">The signature of `delegateType` has all the parameters of the dynamic method except the first.</span></span> <span data-ttu-id="7ce34-423">Por ejemplo, si el método dinámico tiene los parámetros <xref:System.String>, <xref:System.Int32>, y <xref:System.Byte>, a continuación, `delegateType` tiene los parámetros <xref:System.Int32> y <xref:System.Byte>; `target` is of type <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-423">For example, if the dynamic method has the parameters <xref:System.String>, <xref:System.Int32>, and <xref:System.Byte>, then `delegateType` has the parameters <xref:System.Int32> and <xref:System.Byte>; `target` is of type <xref:System.String>.</span></span>  
  
 <span data-ttu-id="7ce34-424">Llamar a la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método o la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método finaliza el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-424">Calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method completes the dynamic method.</span></span> <span data-ttu-id="7ce34-425">Cualquiera aún más si se intenta modificar el método dinámico, como modificar las definiciones de parámetro o emitir más lenguaje intermedio de Microsoft (MSIL), se omite; se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="7ce34-425">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="7ce34-426">Para crear un cuerpo de método para un método dinámico cuando tiene su propio generador de MSIL, llame a la <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> método para obtener un <xref:System.Reflection.Emit.DynamicILInfo> objeto.</span><span class="sxs-lookup"><span data-stu-id="7ce34-426">To create a method body for a dynamic method when you have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo%2A> method to obtain a <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="7ce34-427">Si no tiene su propio generador de MSIL, llame a la <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> método para obtener un <xref:System.Reflection.Emit.ILGenerator> objeto que puede utilizarse para generar el cuerpo del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-427">If you do not have your own MSIL generator, call the <xref:System.Reflection.Emit.DynamicMethod.GetILGenerator%2A> method to obtain an <xref:System.Reflection.Emit.ILGenerator> object that can be used to generate the method body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-428">En el ejemplo de código siguiente se crea el delegado que se enlaza una <xref:System.Reflection.Emit.DynamicMethod> a una instancia de un tipo, por lo que el método actúa en la misma instancia cada vez que se invoca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-428">The following code example creates delegate that binds a <xref:System.Reflection.Emit.DynamicMethod> to an instance of a type, so that the method acts on the same instance each time it is invoked.</span></span>  
  
 <span data-ttu-id="7ce34-429">El ejemplo de código define una clase denominada `Example` con un campo privado, una clase denominada `DerivedFromxample` que se deriva de la primera clase, un tipo de delegado denominado `UseLikeStatic` que devuelve <xref:System.Int32> y tiene parámetros de tipo `Example` y <xref:System.Int32>y un tipo de delegado denominado `UseLikeInstance` que devuelve <xref:System.Int32> y tiene un parámetro de tipo <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-429">The code example defines a class named `Example` with a private field, a class named `DerivedFromxample` that derives from the first class, a delegate type named `UseLikeStatic` that returns <xref:System.Int32> and has parameters of type `Example` and <xref:System.Int32>, and a delegate type named `UseLikeInstance` that returns <xref:System.Int32> and has one parameter of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="7ce34-430">El código de ejemplo, a continuación, crea un <xref:System.Reflection.Emit.DynamicMethod> que cambia el campo privado de una instancia de `Example` y devuelve el valor anterior.</span><span class="sxs-lookup"><span data-stu-id="7ce34-430">The example code then creates a <xref:System.Reflection.Emit.DynamicMethod> that changes the private field of an instance of `Example` and returns the previous value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-431">En general, cambiar los campos internos de clases no es buena práctica de programación orientada a objetos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-431">In general, changing the internal fields of classes is not good object-oriented coding practice.</span></span>  
  
 <span data-ttu-id="7ce34-432">El código de ejemplo crea una instancia de `Example` y, a continuación, se crean dos delegados.</span><span class="sxs-lookup"><span data-stu-id="7ce34-432">The example code creates an instance of `Example` and then creates two delegates.</span></span> <span data-ttu-id="7ce34-433">El primero es de tipo `UseLikeStatic`, que tiene los mismos parámetros que el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-433">The first is of type `UseLikeStatic`, which has the same parameters as the dynamic method.</span></span> <span data-ttu-id="7ce34-434">El segundo es de tipo `UseLikeInstance`, que no tiene el primer parámetro (de tipo `Example`).</span><span class="sxs-lookup"><span data-stu-id="7ce34-434">The second is of type `UseLikeInstance`, which lacks the first parameter (of type `Example`).</span></span> <span data-ttu-id="7ce34-435">Este delegado se crea utilizando el <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> sobrecarga del método; el segundo parámetro de esa sobrecarga del método es una instancia de `Example`, en este caso la instancia recién creada, que está enlazada al delegado recién creado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-435">This delegate is created using the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> method overload; the second parameter of that method overload is an instance of `Example`, in this case the instance just created, which is bound to the newly created delegate.</span></span> <span data-ttu-id="7ce34-436">Cada vez que se invoca ese delegado, el método dinámico actúa en la instancia enlazada de `Example`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-436">Whenever that delegate is invoked, the dynamic method acts on the bound instance of `Example`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-437">Este es un ejemplo de las reglas relajadas para el enlace a delegados que se introdujeron en la [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], junto con las nuevas sobrecargas de los <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-437">This is an example of the relaxed rules for delegate binding introduced in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], along with new overloads of the <xref:System.Delegate.CreateDelegate%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="7ce34-438">Para obtener más información, vea la clase <xref:System.Delegate>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-438">For more information, see the <xref:System.Delegate> class.</span></span>  
  
 <span data-ttu-id="7ce34-439">El `UseLikeStatic` se invoca el delegado, pasando la instancia de `Example` que está enlazado a la `UseLikeInstance` delegar.</span><span class="sxs-lookup"><span data-stu-id="7ce34-439">The `UseLikeStatic` delegate is invoked, passing in the instance of `Example` that is bound to the `UseLikeInstance` delegate.</span></span> <span data-ttu-id="7ce34-440">La `UseLikeInstance` delegado se invoca, para que ambos delegados actúen en la misma instancia de `Example`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-440">Then the `UseLikeInstance` delegate is invoked, so that both delegates act on the same instance of `Example`.</span></span> <span data-ttu-id="7ce34-441">Los cambios en los valores del campo interno se muestran después de cada llamada.</span><span class="sxs-lookup"><span data-stu-id="7ce34-441">The changes in the values of the internal field are displayed after each call.</span></span> <span data-ttu-id="7ce34-442">Por último, un `UseLikeInstance` delegado está enlazado a una instancia de `DerivedFromxample`, y las llamadas al delegado se repiten.</span><span class="sxs-lookup"><span data-stu-id="7ce34-442">Finally, a `UseLikeInstance` delegate is bound to an instance of `DerivedFromxample`, and the delegate calls are repeated.</span></span>  
  
 [!code-csharp[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/cs/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ClosedOver#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ClosedOver/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7ce34-443">El método dinámico no tiene ningún cuerpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-443">The dynamic method has no method body.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-444">
            <paramref name="target" /> no es del mismo tipo que el primer parámetro del método dinámico y no se puede asignar a ese tipo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-444">
              <paramref name="target" /> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</span>
          </span>
          <span data-ttu-id="7ce34-445">-o bien- <paramref name="delegateType" /> tiene el número incorrecto de parámetros o los tipos de parámetro incorrectos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-445">-or-  <paramref name="delegateType" /> has the wrong number of parameters or the wrong parameter types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-446">Obtiene el tipo que declara el método, que es siempre <see langword="null" /> para los métodos dinámicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-446">Gets the type that declares the method, which is always <see langword="null" /> for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-447">Siempre es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-447">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-448">Esta propiedad devuelve siempre `null` para los métodos dinámicos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-448">This property always returns `null` for dynamic methods.</span></span> <span data-ttu-id="7ce34-449">Incluso cuando un método dinámico está asociado lógicamente con un tipo, no está declarado por el tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-449">Even when a dynamic method is logically associated with a type, it is not declared by the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-450">En el ejemplo de código siguiente se muestra el tipo declarativo de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-450">The following code example displays the declaring type of a dynamic method.</span></span> <span data-ttu-id="7ce34-451">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-451">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#23](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#23)]
 [!code-csharp[Reflection.DynamicMethod.All#23](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#23)]
 [!code-vb[Reflection.DynamicMethod.All#23](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineParameter">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ParameterBuilder DefineParameter(int32 position, valuetype System.Reflection.ParameterAttributes attributes, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineParameter (position As Integer, attributes As ParameterAttributes, parameterName As String) As ParameterBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ParameterBuilder ^ DefineParameter(int position, System::Reflection::ParameterAttributes attributes, System::String ^ parameterName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ParameterBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="attributes" Type="System.Reflection.ParameterAttributes" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="position">
          <span data-ttu-id="7ce34-452">Posición del parámetro en la lista de parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-452">The position of the parameter in the parameter list.</span>
          </span>
          <span data-ttu-id="7ce34-453">Los parámetros se indizan empezando por el número 1 para el primer parámetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-453">Parameters are indexed beginning with the number 1 for the first parameter.</span>
          </span>
        </param>
        <param name="attributes">
          <span data-ttu-id="7ce34-454">Combinación bit a bit de valores <see cref="T:System.Reflection.ParameterAttributes" /> que especifica los atributos del parámetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-454">A bitwise combination of <see cref="T:System.Reflection.ParameterAttributes" /> values that specifies the attributes of the parameter.</span>
          </span>
        </param>
        <param name="parameterName">
          <span data-ttu-id="7ce34-455">Nombre del parámetro.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-455">The name of the parameter.</span>
          </span>
          <span data-ttu-id="7ce34-456">El nombre puede ser una cadena de longitud cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-456">The name can be a zero-length string.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-457">Define un parámetro del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-457">Defines a parameter of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-458">Siempre devuelve <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-458">Always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-459">Si `position` es 0, el <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> método hace referencia al valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="7ce34-459">If `position` is 0, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method refers to the return value.</span></span> <span data-ttu-id="7ce34-460">Establecer información de parámetro no tiene ningún efecto en el valor devuelto.</span><span class="sxs-lookup"><span data-stu-id="7ce34-460">Setting parameter information has no effect on the return value.</span></span>  
  
 <span data-ttu-id="7ce34-461">Si el método dinámico se ya se ha completado, mediante una llamada a la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método, el <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> método no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="7ce34-461">If the dynamic method has already been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method has no effect.</span></span> <span data-ttu-id="7ce34-462">No se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="7ce34-462">No exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-463">En el ejemplo de código siguiente se muestra cómo definir la información de parámetros para un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-463">The following code example shows how to define parameter information for a dynamic method.</span></span> <span data-ttu-id="7ce34-464">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-464">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#33](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#33)]
 [!code-csharp[Reflection.DynamicMethod.All#33](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#33)]
 [!code-vb[Reflection.DynamicMethod.All#33](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7ce34-465">El método no tiene parámetros.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-465">The method has no parameters.</span>
          </span>
          <span data-ttu-id="7ce34-466">-o bien- <paramref name="position" /> es menor que 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-466">-or-  <paramref name="position" /> is less than 0.</span>
          </span>
          <span data-ttu-id="7ce34-467">-o bien- <paramref name="position" /> es mayor que el número de los parámetros del método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-467">-or-  <paramref name="position" /> is greater than the number of the method's parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDefinition">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.MethodInfo GetBaseDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetBaseDefinition () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodInfo ^ GetBaseDefinition();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-468">Devuelve la implementación para el método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-468">Returns the base implementation for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-469">La implementación base del método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-469">The base implementation of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-470">Este método siempre devuelve el valor actual `DynamicMethod` objeto.</span><span class="sxs-lookup"><span data-stu-id="7ce34-470">This method always returns the current `DynamicMethod` object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-471">Devuelve los atributos personalizados aplicados al método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-471">Returns the custom attributes applied to the method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="7ce34-472">
            <see langword="true" /> para buscar la cadena de herencia del método con el fin de encontrar los atributos personalizados; <see langword="false" /> para comprobar solo el método actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-472">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-473">Devuelve todos los atributos personalizados definidos para el método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-473">Returns all the custom attributes defined for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-474">Matriz de objetos que representa todos los atributos personalizados del método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-474">An array of objects representing all the custom attributes of the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-475">Para los métodos dinámicos, especificar `true` para `inherit` no tiene ningún efecto porque el método no se declara en un tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-475">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-476">Atributos personalizados no se admiten actualmente en métodos dinámicos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-476">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="7ce34-477">El único atributo devuelto es <xref:System.Runtime.CompilerServices.MethodImplAttribute>; puede obtener el método marcas de implementación más fácilmente mediante la <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-477">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="7ce34-478">
            <see cref="T:System.Type" /> que representa el tipo de atributo personalizado que se va a devolver.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-478">A <see cref="T:System.Type" /> representing the type of custom attribute to return.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="7ce34-479">
            <see langword="true" /> para buscar la cadena de herencia del método con el fin de encontrar los atributos personalizados; <see langword="false" /> para comprobar solo el método actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-479">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-480">Devuelve los atributos personalizados del tipo especificado que se han aplicado al método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-480">Returns the custom attributes of the specified type that have been applied to the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-481">Una matriz de objetos que representan los atributos del método que son de tipo <paramref name="attributeType" /> o derivan del tipo <paramref name="attributeType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-481">An array of objects representing the attributes of the method that are of type <paramref name="attributeType" /> or derive from type <paramref name="attributeType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-482">Para los métodos dinámicos, especificar `true` para `inherit` no tiene ningún efecto porque el método no se declara en un tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-482">For dynamic methods, specifying `true` for `inherit` has no effect, because the method is not declared in a type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-483">Atributos personalizados no se admiten actualmente en métodos dinámicos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-483">Custom attributes are not currently supported on dynamic methods.</span></span> <span data-ttu-id="7ce34-484">El único atributo devuelto es <xref:System.Runtime.CompilerServices.MethodImplAttribute>; puede obtener el método marcas de implementación más fácilmente mediante la <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-484">The only attribute returned is <xref:System.Runtime.CompilerServices.MethodImplAttribute>; you can get the method implementation flags more easily using the <xref:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7ce34-485">
            <paramref name="attributeType" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-485">
              <paramref name="attributeType" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetDynamicILInfo">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.DynamicILInfo GetDynamicILInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDynamicILInfo () As DynamicILInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::DynamicILInfo ^ GetDynamicILInfo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicILInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-486">Devuelve un objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> que se puede utilizar para generar un cuerpo de método a partir de los símbolos (token) de metadatos, los ámbitos y las secuencias de Lenguaje intermedio de Microsoft (MSIL).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-486">Returns a <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and Microsoft intermediate language (MSIL) streams.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-487">Un objeto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> que se puede utilizar para generar un cuerpo de método a partir de los símbolos (token) de metadatos, los ámbitos, y las secuencias de MSIL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-487">A <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object that can be used to generate a method body from metadata tokens, scopes, and MSIL streams.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-488">La <xref:System.Reflection.Emit.DynamicILInfo> clase se proporciona para admitir la generación de código no administrado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-488">The <xref:System.Reflection.Emit.DynamicILInfo> class is provided to support unmanaged code generation.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="7ce34-489">Para ejecutar código no administrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-489">to execute unmanaged code.</span>
          </span>
          <span data-ttu-id="7ce34-490">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-490">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Reflection.Emit.DynamicILInfo" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetILGenerator">
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-491">Devuelve un generador de MSIL que se puede usar para emitir un cuerpo para el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-491">Returns an MSIL generator that can be used to emit a body for the dynamic method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator () As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-492">Devuelve un generador de Lenguaje Intermedio de Microsoft (MSIL) para el método con un tamaño de secuencia de MSIL predeterminado de 64 bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-492">Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-493">Objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para el método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-493">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-494">Una vez completado un método dinámico, mediante una llamada a la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método, cualquier intento posterior de agregar MSIL se omite.</span><span class="sxs-lookup"><span data-stu-id="7ce34-494">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="7ce34-495">No se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="7ce34-495">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-496">Hay restricciones en el código no comprobable en métodos dinámicos, incluso en algunos escenarios de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-496">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="7ce34-497">Vea la sección "Comprobación" en Comentarios para <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-497">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-498">En el ejemplo de código siguiente se crea un método dinámico que toma dos parámetros.</span><span class="sxs-lookup"><span data-stu-id="7ce34-498">The following code example creates a dynamic method that takes two parameters.</span></span> <span data-ttu-id="7ce34-499">En el ejemplo se emite un cuerpo de función sencilla que imprime el primer parámetro en la consola y, en el ejemplo se utiliza el segundo parámetro como el valor devuelto del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-499">The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method.</span></span> <span data-ttu-id="7ce34-500">En el ejemplo se finaliza el método mediante la creación de un delegado, invoca el delegado con parámetros diferentes y por último, se invoca el método dinámico utilizando la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-500">The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/cpp/source.cpp#1)]
 [!code-csharp[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/CS/source.cs#1)]
 [!code-vb[Reflection.DynamicMethod.ctor1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.ctor1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetILGenerator">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.ILGenerator GetILGenerator(int32 streamSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetILGenerator (streamSize As Integer) As ILGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::ILGenerator ^ GetILGenerator(int streamSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.ILGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="streamSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="streamSize">
          <span data-ttu-id="7ce34-501">Tamaño de la secuencia MSIL, en bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-501">The size of the MSIL stream, in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-502">Devuelve un generador de Lenguaje intermedio de Microsoft (MSIL) para el método con el tamaño de secuencia de MSIL especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-502">Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-503">Un objeto <see cref="T:System.Reflection.Emit.ILGenerator" /> para el método, con el tamaño de secuencia de MSIL especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-503">An <see cref="T:System.Reflection.Emit.ILGenerator" /> object for the method, with the specified MSIL stream size.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-504">Una vez completado un método dinámico, mediante una llamada a la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> o <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método, cualquier intento posterior de agregar MSIL se omite.</span><span class="sxs-lookup"><span data-stu-id="7ce34-504">After a dynamic method has been completed, by calling the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> or <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method, any further attempt to add MSIL is ignored.</span></span> <span data-ttu-id="7ce34-505">No se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="7ce34-505">No exception is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-506">Hay restricciones en el código no comprobable en métodos dinámicos, incluso en algunos escenarios de plena confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-506">There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios.</span></span> <span data-ttu-id="7ce34-507">Vea la sección "Comprobación" en Comentarios para <xref:System.Reflection.Emit.DynamicMethod>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-507">See the "Verification" section in Remarks for <xref:System.Reflection.Emit.DynamicMethod>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-508">En el ejemplo de código siguiente se muestra esta sobrecarga del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-508">The following code example demonstrates this method overload.</span></span> <span data-ttu-id="7ce34-509">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-509">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#2](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#2)]
 [!code-csharp[Reflection.DynamicMethod.All#2](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#2)]
 [!code-vb[Reflection.DynamicMethod.All#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Reflection.MethodImplAttributes GetMethodImplementationFlags() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetMethodImplementationFlags () As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Reflection::MethodImplAttributes GetMethodImplementationFlags();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-510">Devuelve las marcas de implementación para el método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-510">Returns the implementation flags for the method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-511">Una combinación bit a bit de valores de <see cref="T:System.Reflection.MethodImplAttributes" /> que representan las marcas de implementación para el método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-511">A bitwise combination of <see cref="T:System.Reflection.MethodImplAttributes" /> values representing the implementation flags for the method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-512">Actualmente, los atributos de implementación de método para los métodos dinámicos siempre son <xref:System.Reflection.MethodImplAttributes.IL> y <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-512">Currently, method implementation attributes for dynamic methods are always <xref:System.Reflection.MethodImplAttributes.IL> and <xref:System.Reflection.MethodImplAttributes.NoInlining>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameters">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo[] GetParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Reflection.ParameterInfo[] GetParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.GetParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetParameters () As ParameterInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::Reflection::ParameterInfo ^&gt; ^ GetParameters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-513">Devuelve los parámetros del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-513">Returns the parameters of the dynamic method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-514">Una matriz de objetos <see cref="T:System.Reflection.ParameterInfo" /> que representan los parámetros del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-514">An array of <see cref="T:System.Reflection.ParameterInfo" /> objects that represent the parameters of the dynamic method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-515">El <xref:System.Reflection.ParameterInfo> objetos devueltos por este método son meramente informativos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-515">The <xref:System.Reflection.ParameterInfo> objects returned by this method are for information only.</span></span> <span data-ttu-id="7ce34-516">Use la <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> método para establecer o cambiar las características de los parámetros.</span><span class="sxs-lookup"><span data-stu-id="7ce34-516">Use the <xref:System.Reflection.Emit.DynamicMethod.DefineParameter%2A> method to set or change the characteristics of the parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-517">En el ejemplo de código siguiente se muestra los parámetros de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-517">The following code example displays the parameters of a dynamic method.</span></span> <span data-ttu-id="7ce34-518">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-518">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#34](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#34)]
 [!code-csharp[Reflection.DynamicMethod.All#34](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#34)]
 [!code-vb[Reflection.DynamicMethod.All#34](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public bool InitLocals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InitLocals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-519">Obtiene o establece un valor que indica si las variables locales del método se inicializan a cero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-519">Gets or sets a value indicating whether the local variables in the method are zero-initialized.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-520">
            <see langword="true" /> si las variables locales del método se inicializan a cero; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-520">
              <see langword="true" /> if the local variables in the method are zero-initialized; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7ce34-521">El valor predeterminado es <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-521">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-522">Si esta propiedad se establece en `true`, el lenguaje intermedio de Microsoft (MSIL) emitido incluye la inicialización de variables locales.</span><span class="sxs-lookup"><span data-stu-id="7ce34-522">If this property is set to `true`, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables.</span></span> <span data-ttu-id="7ce34-523">Si se establece en `false`, no se inicializan las variables locales y el código generado es no comprobable.</span><span class="sxs-lookup"><span data-stu-id="7ce34-523">If it is set to `false`, local variables are not initialized and the generated code is unverifiable.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-524">El siguiente código en el ejemplo se muestra la <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> propiedad de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-524">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.InitLocals%2A> property of a dynamic method.</span></span> <span data-ttu-id="7ce34-525">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-525">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#24](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#24)]
 [!code-csharp[Reflection.DynamicMethod.All#24](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#24)]
 [!code-vb[Reflection.DynamicMethod.All#24](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Invoke(object obj, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object[] parameters, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Invoke(System::Object ^ obj, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ parameters, System::Globalization::CultureInfo ^ culture);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="parameters" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="7ce34-526">Este parámetro se omite para los métodos dinámicos porque son estáticos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-526">This parameter is ignored for dynamic methods, because they are static.</span>
          </span>
          <span data-ttu-id="7ce34-527">Especifique <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-527">Specify <see langword="null" />.</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="7ce34-528">Combinación bit a bit de los valores de <see cref="T:System.Reflection.BindingFlags" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-528">A bitwise combination of <see cref="T:System.Reflection.BindingFlags" /> values.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="7ce34-529">Objeto <see cref="T:System.Reflection.Binder" /> que permite el enlace, la conversión de tipos de argumentos, la llamada de miembros y la recuperación de objetos <see cref="T:System.Reflection.MemberInfo" /> mediante reflexión.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-529">A <see cref="T:System.Reflection.Binder" /> object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span>
          </span>
          <span data-ttu-id="7ce34-530">Si <c>binder</c> es <see langword="null" />, se usará el enlazador predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-530">If <c>binder</c> is <see langword="null" />, the default binder is used.</span>
          </span>
          <span data-ttu-id="7ce34-531">Para obtener más información, vea <see cref="T:System.Reflection.Binder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-531">For more details, see <see cref="T:System.Reflection.Binder" />.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="7ce34-532">Lista de argumentos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-532">An argument list.</span>
          </span>
          <span data-ttu-id="7ce34-533">Esta es una matriz de argumentos con el mismo número, orden y tipo que los parámetros del método al que se va a invocar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-533">This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked.</span>
          </span>
          <span data-ttu-id="7ce34-534">Si no hay parámetros, este parámetro debe ser <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-534">If there are no parameters this parameter should be <see langword="null" />.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="7ce34-535">Instancia de <see cref="T:System.Globalization.CultureInfo" /> usada para regir la conversión de tipos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-535">An instance of <see cref="T:System.Globalization.CultureInfo" /> used to govern the coercion of types.</span>
          </span>
          <span data-ttu-id="7ce34-536">Si es <see langword="null" />, se utiliza <see cref="T:System.Globalization.CultureInfo" /> para el subproceso actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-536">If this is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span>
          </span>
          <span data-ttu-id="7ce34-537">Por ejemplo, esta información es necesaria para convertir correctamente un objeto <see cref="T:System.String" /> que representa 1000 en un valor <see cref="T:System.Double" />, ya que 1000 se representa de manera diferente en referencias culturales diferentes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-537">For example, this information is needed to correctly convert a <see cref="T:System.String" /> that represents 1000 to a <see cref="T:System.Double" /> value, because 1000 is represented differently by different cultures.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-538">Invoca el método dinámico usando los parámetros especificados, bajo las restricciones del enlazador especificado, con la información de la referencia cultural especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-538">Invokes the dynamic method using the specified parameters, under the constraints of the specified binder, with the specified culture information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-539">
            <see cref="T:System.Object" /> que contiene el valor devuelto del método invocado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-539">A <see cref="T:System.Object" /> containing the return value of the invoked method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-540">Además de las excepciones enumeradas, el código que realiza la llamada debe estar preparado para detectar las excepciones producidas por el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-540">In addition to the listed exceptions, the calling code should be prepared to catch any exceptions thrown by the dynamic method.</span></span>  
  
 <span data-ttu-id="7ce34-541">Ejecutar un método dinámico con un delegado creado por el <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método es más eficaz que ejecutarlo con la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-541">Executing a dynamic method with a delegate created by the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method is more efficient than executing it with the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method.</span></span>  
  
 <span data-ttu-id="7ce34-542">Llamar a la <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> método o la <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> método finaliza el método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-542">Calling the <xref:System.Reflection.Emit.DynamicMethod.Invoke%2A> method or the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method completes the dynamic method.</span></span> <span data-ttu-id="7ce34-543">Cualquiera aún más si se intenta modificar el método dinámico, como modificar las definiciones de parámetro o emitir más lenguaje intermedio de Microsoft (MSIL), se omite; se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="7ce34-543">Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</span></span>  
  
 <span data-ttu-id="7ce34-544">Todos los métodos dinámicos son estáticos, por lo que el `obj` siempre se omite el parámetro.</span><span class="sxs-lookup"><span data-stu-id="7ce34-544">All dynamic methods are static, so the `obj` parameter is always ignored.</span></span> <span data-ttu-id="7ce34-545">Para tratar un método dinámico como si fuera un método de instancia, utilice el <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> sobrecarga que toma una instancia de objeto.</span><span class="sxs-lookup"><span data-stu-id="7ce34-545">To treat a dynamic method as if it were an instance method, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%28System.Type%2CSystem.Object%29> overload that takes an object instance.</span></span>  
  
 <span data-ttu-id="7ce34-546">Si el método dinámico no tiene parámetros, el valor de `parameters` debe ser `null`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-546">If the dynamic method has no parameters, the value of `parameters` should be `null`.</span></span> <span data-ttu-id="7ce34-547">En caso contrario, el número, tipo y orden de los elementos de la matriz de parámetros deben ser idénticos al número, tipo y orden de los parámetros del método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-547">Otherwise the number, type, and order of elements in the parameters array should be identical to the number, type, and order of parameters of the dynamic method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-548">Llama a esta sobrecarga del método la <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> sobrecarga del método se hereda de la <xref:System.Reflection.MethodBase> de la clase, por lo que las observaciones anteriores se aplican a ambas sobrecargas.</span><span class="sxs-lookup"><span data-stu-id="7ce34-548">This method overload is called by the <xref:System.Reflection.MethodBase.Invoke%28System.Object%2CSystem.Object%5B%5D%29> method overload inherited from the <xref:System.Reflection.MethodBase> class, so the preceding remarks apply to both overloads.</span></span>  
  
 <span data-ttu-id="7ce34-549">Este método no exigir permisos directamente, pero al invocar el método dinámico puede dar lugar a las peticiones de seguridad, en función del método.</span><span class="sxs-lookup"><span data-stu-id="7ce34-549">This method does not demand permissions directly, but invoking the dynamic method can result in security demands, depending on the method.</span></span> <span data-ttu-id="7ce34-550">Por ejemplo, no las peticiones se realizan para los métodos dinámicos hospedados de forma anónima que se crean con el `restrictedSkipVisibility` parámetro establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="7ce34-550">For example, no demands are made for anonymously hosted dynamic methods that are created with the `restrictedSkipVisibility` parameter set to `false`.</span></span> <span data-ttu-id="7ce34-551">Por otro lado, si crea un método con `restrictedSkipVisibility` establecido en `true` por lo que puede tener acceso a un miembro oculto de un ensamblado de destino, el método producirá una demanda de los permisos del ensamblado de destino más <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-551">On the other hand, if you create a method with `restrictedSkipVisibility` set to `true` so it can access a hidden member of a target assembly, the method will cause a demand for the permissions of the target assembly plus <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess?displayProperty=nameWithType> flag.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-552">Versiones anteriores a la [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], este método requerido <xref:System.Security.Permissions.ReflectionPermission> con el <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> marca.</span><span class="sxs-lookup"><span data-stu-id="7ce34-552">Prior to the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method required <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess> flag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-553">En el ejemplo de código siguiente se invoca un método dinámico con enlace exacto, utilizando la referencia cultural inglés de Estados Unidos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-553">The following code example invokes a dynamic method with exact binding, using the US-English culture.</span></span> <span data-ttu-id="7ce34-554">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-554">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#4](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#4)]
 [!code-csharp[Reflection.DynamicMethod.All#4](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#4)]
 [!code-vb[Reflection.DynamicMethod.All#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="7ce34-555">No se admite la convención de llamada <see cref="F:System.Reflection.CallingConventions.VarArgs" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-555">The <see cref="F:System.Reflection.CallingConventions.VarArgs" /> calling convention is not supported.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetParameterCountException">
          <span data-ttu-id="7ce34-556">El número de elementos de <paramref name="parameters" /> no coincide con el número de parámetros del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-556">The number of elements in <paramref name="parameters" /> does not match the number of parameters in the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7ce34-557">El tipo de uno o más elementos de <paramref name="parameters" /> no coincide con el tipo del parámetro correspondiente del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-557">The type of one or more elements of <paramref name="parameters" /> does not match the type of the corresponding parameter of the dynamic method.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.TargetInvocationException">
          <span data-ttu-id="7ce34-558">El método dinámico está asociado con un módulo, no está hospedado de forma anónima y se construyó con el parámetro <paramref name="skipVisibility" /> establecido en <see langword="false" />, pero tiene acceso a los miembros que no son <see langword="public" /> o <see langword="internal" /> (<see langword="Friend" /> en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-558">The dynamic method is associated with a module, is not anonymously hosted, and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but the dynamic method accesses members that are not <see langword="public" /> or <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).</span>
          </span>
          <span data-ttu-id="7ce34-559">-o bien- El método dinámico se hospeda de forma anónima y se construyó con <paramref name="skipVisibility" /> establecido en <see langword="false" />, pero accede a miembros que no son <see langword="public" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-559">-or-  The dynamic method is anonymously hosted and was constructed with <paramref name="skipVisibility" /> set to <see langword="false" />, but it accesses members that are not <see langword="public" />.</span>
          </span>
          <span data-ttu-id="7ce34-560">-o bien- El método dinámico contiene código no comprobable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-560">-or-  The dynamic method contains unverifiable code.</span>
          </span>
          <span data-ttu-id="7ce34-561">Vea la sección "Comprobación" en Comentarios para <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-561">See the "Verification" section in Remarks for <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public override bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="7ce34-562">
            <see cref="T:System.Type" /> que representa el tipo de atributo personalizado que se va a buscar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-562">A <see cref="T:System.Type" /> representing the type of custom attribute to search for.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="7ce34-563">
            <see langword="true" /> para buscar la cadena de herencia del método con el fin de encontrar los atributos personalizados; <see langword="false" /> para comprobar solo el método actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-563">
              <see langword="true" /> to search the method's inheritance chain to find the custom attributes; <see langword="false" /> to check only the current method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7ce34-564">Indica si se ha definido el tipo de atributo personalizado especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-564">Indicates whether the specified custom attribute type is defined.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-565">
            <see langword="true" /> si está definido el tipo de atributo personalizado especificado, en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-565">
              <see langword="true" /> if the specified custom attribute type is defined; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-566">Para los métodos dinámicos, especificar `true` para `inherit` no tiene ningún efecto.</span><span class="sxs-lookup"><span data-stu-id="7ce34-566">For dynamic methods, specifying `true` for `inherit` has no effect.</span></span> <span data-ttu-id="7ce34-567">Métodos dinámicos no tengan ninguna cadena de herencia.</span><span class="sxs-lookup"><span data-stu-id="7ce34-567">Dynamic methods have no inheritance chain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-568">Atributos personalizados no se admiten actualmente en métodos dinámicos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-568">Custom attributes are not currently supported on dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-569">Obtiene un valor que indica si el método dinámico actual es crítico para la seguridad o crítico para la seguridad y disponible desde código transparente y, por tanto, puede realizar operaciones críticas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-569">Gets a value that indicates whether the current dynamic method is security-critical or security-safe-critical, and therefore can perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-570">
            <see langword="true" /> si el método dinámico actual es crítico para la seguridad o es crítico para la seguridad y disponible desde código transparente; <see langword="false" /> si es transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-570">
              <see langword="true" /> if the current dynamic method is security-critical or security-safe-critical; <see langword="false" /> if it is transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-571">El <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, y <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> propiedades notifican el nivel de transparencia del método dinámico determinado por common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="7ce34-571">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7ce34-572">Las combinaciones de estas propiedades se muestran en la tabla siguiente:</span><span class="sxs-lookup"><span data-stu-id="7ce34-572">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7ce34-573">Nivel de seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-573">Security level</span></span>|<span data-ttu-id="7ce34-574">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7ce34-574">IsSecurityCritical</span></span>|<span data-ttu-id="7ce34-575">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7ce34-575">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7ce34-576">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7ce34-576">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7ce34-577">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-577">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7ce34-578">Crítico seguro</span><span class="sxs-lookup"><span data-stu-id="7ce34-578">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7ce34-579">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-579">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7ce34-580">Usar estas propiedades es mucho más fácil que examinar las anotaciones de seguridad de un ensamblado y sus tipos, comprobar el nivel de confianza actual e intentar duplicar las reglas del runtime.</span><span class="sxs-lookup"><span data-stu-id="7ce34-580">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="7ce34-581">La transparencia de un método dinámico depende del módulo que está asociado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-581">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="7ce34-582">Si el método dinámico está asociado a un tipo en lugar de un módulo, su transparencia depende del módulo que contiene el tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-582">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="7ce34-583">Los métodos dinámicos no tienen anotaciones de seguridad, de modo que están asignados a la transparencia de forma predeterminada para el módulo asociado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-583">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="7ce34-584">Métodos dinámicos hospedados de forma anónima siempre son transparentes, porque el módulo proporcionado por el sistema que los contiene es transparente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-584">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="7ce34-585">La transparencia de un método dinámico que está asociado a un ensamblado de confianza (es decir, un ensamblado con nombre seguro que se instala en la caché global de ensamblados) se describe en la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-585">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="7ce34-586">Anotación de ensamblado</span><span class="sxs-lookup"><span data-stu-id="7ce34-586">Assembly annotation</span></span>|<span data-ttu-id="7ce34-587">Transparencia de nivel 1</span><span class="sxs-lookup"><span data-stu-id="7ce34-587">Level 1 transparency</span></span>|<span data-ttu-id="7ce34-588">Transparencia de nivel 2</span><span class="sxs-lookup"><span data-stu-id="7ce34-588">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="7ce34-589">Totalmente transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-589">Fully transparent</span></span>|<span data-ttu-id="7ce34-590">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-590">Transparent</span></span>|<span data-ttu-id="7ce34-591">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-591">Transparent</span></span>|  
    |<span data-ttu-id="7ce34-592">Totalmente crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-592">Fully critical</span></span>|<span data-ttu-id="7ce34-593">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-593">Critical</span></span>|<span data-ttu-id="7ce34-594">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-594">Critical</span></span>|  
    |<span data-ttu-id="7ce34-595">Transparencia mixta</span><span class="sxs-lookup"><span data-stu-id="7ce34-595">Mixed transparency</span></span>|<span data-ttu-id="7ce34-596">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-596">Transparent</span></span>|<span data-ttu-id="7ce34-597">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-597">Transparent</span></span>|  
    |<span data-ttu-id="7ce34-598">Independiente de la seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-598">Security-agnostic</span></span>|<span data-ttu-id="7ce34-599">Crítico para la seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-599">Safe-critical</span></span>|<span data-ttu-id="7ce34-600">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-600">Critical</span></span>|  
  
     <span data-ttu-id="7ce34-601">Por ejemplo, si asocia un método dinámico con un tipo que está en mscorlib.dll, que tiene el nivel 2 transparencia mixta, el método dinámico es transparente y no puede ejecutar el código crítico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-601">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="7ce34-602">Para obtener información acerca de los niveles de transparencia, consulte [código transparente en seguridad, nivel 1](~/docs/framework/misc/security-transparent-code-level-1.md) y [código transparente en seguridad, nivel 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-602">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7ce34-603">Asociar un método dinámico con un módulo en un ensamblado de nivel 1 de confianza que es independiente de la seguridad, como System.dll, no permite la elevación de confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-603">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="7ce34-604">Si el conjunto de permisos del código que llama al método dinámico no incluye el conjunto de permisos concedidos de System.dll (es decir, plena confianza), <xref:System.Security.SecurityException> se produce cuando se llama al método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-604">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="7ce34-605">La transparencia de un método dinámico que está asociado a un ensamblado de confianza parcial depende de cómo se carga el ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-605">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="7ce34-606">Si el ensamblado se carga con confianza parcial (por ejemplo, en un dominio de aplicación en espacio aislado), el runtime omite las anotaciones de seguridad del ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-606">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="7ce34-607">El ensamblado y todos sus tipos y miembros, incluidos los métodos dinámicos, se tratan como transparente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-607">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="7ce34-608">El tiempo de ejecución presta atención a las anotaciones de seguridad únicamente si el ensamblado de confianza parcial se carga con plena confianza (por ejemplo, en el dominio de aplicación predeterminado de una aplicación de escritorio).</span><span class="sxs-lookup"><span data-stu-id="7ce34-608">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="7ce34-609">En ese caso, el tiempo de ejecución asigna el método dinámico de transparencia predeterminado para los métodos según las anotaciones del ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-609">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="7ce34-610">Para obtener más información acerca de la reflexión emitir y transparencia, consulte [problemas de seguridad en la emisión de reflexión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-610">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="7ce34-611">Para obtener información acerca de las transparencias, consulte [cambios de seguridad](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-611">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7ce34-612">El método dinámico no tiene un cuerpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-612">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public override bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-613">Obtiene un valor que indica si el método dinámico actual es crítico para la seguridad y disponible desde código transparente en el nivel de confianza actual; es decir, si puede realizar operaciones críticas y está disponible desde código transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-613">Gets a value that indicates whether the current dynamic method is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-614">
            <see langword="true" /> si el método dinámico es crítico para la seguridad y disponible desde código transparente en el nivel de confianza actual; <see langword="false" /> si es crítico para la seguridad o transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-614">
              <see langword="true" /> if the dynamic method is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-615">El <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, y <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> propiedades notifican el nivel de transparencia del método dinámico determinado por common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="7ce34-615">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7ce34-616">Las combinaciones de estas propiedades se muestran en la tabla siguiente:</span><span class="sxs-lookup"><span data-stu-id="7ce34-616">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7ce34-617">Nivel de seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-617">Security level</span></span>|<span data-ttu-id="7ce34-618">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7ce34-618">IsSecurityCritical</span></span>|<span data-ttu-id="7ce34-619">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7ce34-619">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7ce34-620">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7ce34-620">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7ce34-621">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-621">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7ce34-622">Crítico seguro</span><span class="sxs-lookup"><span data-stu-id="7ce34-622">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7ce34-623">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-623">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7ce34-624">Usar estas propiedades es mucho más fácil que examinar las anotaciones de seguridad de un ensamblado y sus tipos, comprobar el nivel de confianza actual e intentar duplicar las reglas del runtime.</span><span class="sxs-lookup"><span data-stu-id="7ce34-624">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="7ce34-625">La transparencia de un método dinámico depende del módulo que está asociado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-625">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="7ce34-626">Si el método dinámico está asociado a un tipo en lugar de un módulo, su transparencia depende del módulo que contiene el tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-626">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="7ce34-627">Los métodos dinámicos no tienen anotaciones de seguridad, de modo que están asignados a la transparencia de forma predeterminada para el módulo asociado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-627">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="7ce34-628">Métodos dinámicos hospedados de forma anónima siempre son transparentes, porque el módulo proporcionado por el sistema que los contiene es transparente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-628">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="7ce34-629">La transparencia de un método dinámico que está asociado a un ensamblado de confianza (es decir, un ensamblado con nombre seguro que se instala en la caché global de ensamblados) se describe en la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-629">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="7ce34-630">Anotación de ensamblado</span><span class="sxs-lookup"><span data-stu-id="7ce34-630">Assembly annotation</span></span>|<span data-ttu-id="7ce34-631">Transparencia de nivel 1</span><span class="sxs-lookup"><span data-stu-id="7ce34-631">Level 1 transparency</span></span>|<span data-ttu-id="7ce34-632">Transparencia de nivel 2</span><span class="sxs-lookup"><span data-stu-id="7ce34-632">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="7ce34-633">Totalmente transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-633">Fully transparent</span></span>|<span data-ttu-id="7ce34-634">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-634">Transparent</span></span>|<span data-ttu-id="7ce34-635">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-635">Transparent</span></span>|  
    |<span data-ttu-id="7ce34-636">Totalmente crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-636">Fully critical</span></span>|<span data-ttu-id="7ce34-637">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-637">Critical</span></span>|<span data-ttu-id="7ce34-638">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-638">Critical</span></span>|  
    |<span data-ttu-id="7ce34-639">Transparencia mixta</span><span class="sxs-lookup"><span data-stu-id="7ce34-639">Mixed transparency</span></span>|<span data-ttu-id="7ce34-640">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-640">Transparent</span></span>|<span data-ttu-id="7ce34-641">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-641">Transparent</span></span>|  
    |<span data-ttu-id="7ce34-642">Independiente de la seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-642">Security-agnostic</span></span>|<span data-ttu-id="7ce34-643">Crítico para la seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-643">Safe-critical</span></span>|<span data-ttu-id="7ce34-644">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-644">Critical</span></span>|  
  
     <span data-ttu-id="7ce34-645">Por ejemplo, si asocia un método dinámico con un tipo que está en mscorlib.dll, que tiene el nivel 2 transparencia mixta, el método dinámico es transparente y no puede ejecutar el código crítico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-645">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="7ce34-646">Para obtener información acerca de los niveles de transparencia, consulte [código transparente en seguridad, nivel 1](~/docs/framework/misc/security-transparent-code-level-1.md) y [código transparente en seguridad, nivel 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-646">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7ce34-647">Asociar un método dinámico con un módulo en un ensamblado de nivel 1 de confianza que es independiente de la seguridad, como System.dll, no permite la elevación de confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-647">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="7ce34-648">Si el conjunto de permisos del código que llama al método dinámico no incluye el conjunto de permisos concedidos de System.dll (es decir, plena confianza), <xref:System.Security.SecurityException> se produce cuando se llama al método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-648">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="7ce34-649">La transparencia de un método dinámico que está asociado a un ensamblado de confianza parcial depende de cómo se carga el ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-649">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="7ce34-650">Si el ensamblado se carga con confianza parcial (por ejemplo, en un dominio de aplicación en espacio aislado), el runtime omite las anotaciones de seguridad del ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-650">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="7ce34-651">El ensamblado y todos sus tipos y miembros, incluidos los métodos dinámicos, se tratan como transparente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-651">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="7ce34-652">El tiempo de ejecución presta atención a las anotaciones de seguridad únicamente si el ensamblado de confianza parcial se carga con plena confianza (por ejemplo, en el dominio de aplicación predeterminado de una aplicación de escritorio).</span><span class="sxs-lookup"><span data-stu-id="7ce34-652">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="7ce34-653">En ese caso, el tiempo de ejecución asigna el método dinámico de transparencia predeterminado para los métodos según las anotaciones del ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-653">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="7ce34-654">Para obtener más información acerca de la reflexión emitir y transparencia, consulte [problemas de seguridad en la emisión de reflexión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-654">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="7ce34-655">Para obtener información acerca de las transparencias, consulte [cambios de seguridad](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-655">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7ce34-656">El método dinámico no tiene un cuerpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-656">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public override bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-657">Obtiene un valor que indica si el método dinámico actual es transparente en el nivel de confianza actual y, por tanto, no puede realizar operaciones críticas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-657">Gets a value that indicates whether the current dynamic method is transparent at the current trust level, and therefore cannot perform critical operations.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-658">Es <see langword="true" /> si el método dinámico es transparente para la seguridad en el nivel de confianza actual; de lo contrario, es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-658">
              <see langword="true" /> if the dynamic method is security-transparent at the current trust level; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-659">El <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, y <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> propiedades notifican el nivel de transparencia del método dinámico determinado por common language runtime (CLR).</span><span class="sxs-lookup"><span data-stu-id="7ce34-659">The <xref:System.Reflection.Emit.DynamicMethod.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent%2A> properties report the transparency level of the dynamic method as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="7ce34-660">Las combinaciones de estas propiedades se muestran en la tabla siguiente:</span><span class="sxs-lookup"><span data-stu-id="7ce34-660">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="7ce34-661">Nivel de seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-661">Security level</span></span>|<span data-ttu-id="7ce34-662">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="7ce34-662">IsSecurityCritical</span></span>|<span data-ttu-id="7ce34-663">IsSecuritySafeCritical</span><span class="sxs-lookup"><span data-stu-id="7ce34-663">IsSecuritySafeCritical</span></span>|<span data-ttu-id="7ce34-664">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="7ce34-664">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="7ce34-665">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-665">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="7ce34-666">Crítico seguro</span><span class="sxs-lookup"><span data-stu-id="7ce34-666">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="7ce34-667">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-667">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="7ce34-668">Usar estas propiedades es mucho más fácil que examinar las anotaciones de seguridad de un ensamblado y sus tipos, comprobar el nivel de confianza actual e intentar duplicar las reglas del runtime.</span><span class="sxs-lookup"><span data-stu-id="7ce34-668">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
 <span data-ttu-id="7ce34-669">La transparencia de un método dinámico depende del módulo que está asociado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-669">The transparency of a dynamic method depends on the module it is associated with.</span></span> <span data-ttu-id="7ce34-670">Si el método dinámico está asociado a un tipo en lugar de un módulo, su transparencia depende del módulo que contiene el tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-670">If the dynamic method is associated with a type rather than a module, its transparency depends on the module that contains the type.</span></span> <span data-ttu-id="7ce34-671">Los métodos dinámicos no tienen anotaciones de seguridad, de modo que están asignados a la transparencia de forma predeterminada para el módulo asociado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-671">Dynamic methods do not have security annotations, so they are assigned the default transparency for the associated module.</span></span>  
  
-   <span data-ttu-id="7ce34-672">Métodos dinámicos hospedados de forma anónima siempre son transparentes, porque el módulo proporcionado por el sistema que los contiene es transparente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-672">Anonymously hosted dynamic methods are always transparent, because the system-provided module that contains them is transparent.</span></span>  
  
-   <span data-ttu-id="7ce34-673">La transparencia de un método dinámico que está asociado a un ensamblado de confianza (es decir, un ensamblado con nombre seguro que se instala en la caché global de ensamblados) se describe en la tabla siguiente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-673">The transparency of a dynamic method that is associated with a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is described in the following table.</span></span>  
  
    |<span data-ttu-id="7ce34-674">Anotación de ensamblado</span><span class="sxs-lookup"><span data-stu-id="7ce34-674">Assembly annotation</span></span>|<span data-ttu-id="7ce34-675">Transparencia de nivel 1</span><span class="sxs-lookup"><span data-stu-id="7ce34-675">Level 1 transparency</span></span>|<span data-ttu-id="7ce34-676">Transparencia de nivel 2</span><span class="sxs-lookup"><span data-stu-id="7ce34-676">Level 2 transparency</span></span>|  
    |-------------------------|--------------------------|--------------------------|  
    |<span data-ttu-id="7ce34-677">Totalmente transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-677">Fully transparent</span></span>|<span data-ttu-id="7ce34-678">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-678">Transparent</span></span>|<span data-ttu-id="7ce34-679">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-679">Transparent</span></span>|  
    |<span data-ttu-id="7ce34-680">Totalmente crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-680">Fully critical</span></span>|<span data-ttu-id="7ce34-681">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-681">Critical</span></span>|<span data-ttu-id="7ce34-682">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-682">Critical</span></span>|  
    |<span data-ttu-id="7ce34-683">Transparencia mixta</span><span class="sxs-lookup"><span data-stu-id="7ce34-683">Mixed transparency</span></span>|<span data-ttu-id="7ce34-684">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-684">Transparent</span></span>|<span data-ttu-id="7ce34-685">Transparente</span><span class="sxs-lookup"><span data-stu-id="7ce34-685">Transparent</span></span>|  
    |<span data-ttu-id="7ce34-686">Independiente de la seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-686">Security-agnostic</span></span>|<span data-ttu-id="7ce34-687">Crítico para la seguridad</span><span class="sxs-lookup"><span data-stu-id="7ce34-687">Safe-critical</span></span>|<span data-ttu-id="7ce34-688">Crítico</span><span class="sxs-lookup"><span data-stu-id="7ce34-688">Critical</span></span>|  
  
     <span data-ttu-id="7ce34-689">Por ejemplo, si asocia un método dinámico con un tipo que está en mscorlib.dll, que tiene el nivel 2 transparencia mixta, el método dinámico es transparente y no puede ejecutar el código crítico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-689">For example, if you associate a dynamic method with a type that is in mscorlib.dll, which has level 2 mixed transparency, the dynamic method is transparent and cannot execute critical code.</span></span> <span data-ttu-id="7ce34-690">Para obtener información acerca de los niveles de transparencia, consulte [código transparente en seguridad, nivel 1](~/docs/framework/misc/security-transparent-code-level-1.md) y [código transparente en seguridad, nivel 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-690">For information about transparency levels, see [Security-Transparent Code, Level 1](~/docs/framework/misc/security-transparent-code-level-1.md) and [Security-Transparent Code, Level 2](~/docs/framework/misc/security-transparent-code-level-2.md).</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7ce34-691">Asociar un método dinámico con un módulo en un ensamblado de nivel 1 de confianza que es independiente de la seguridad, como System.dll, no permite la elevación de confianza.</span><span class="sxs-lookup"><span data-stu-id="7ce34-691">Associating a dynamic method with a module in a trusted level 1 assembly that is security-agnostic, such as System.dll, does not permit elevation of trust.</span></span> <span data-ttu-id="7ce34-692">Si el conjunto de permisos del código que llama al método dinámico no incluye el conjunto de permisos concedidos de System.dll (es decir, plena confianza), <xref:System.Security.SecurityException> se produce cuando se llama al método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-692">If the grant set of the code that calls the dynamic method does not include the grant set of System.dll (that is, full trust), <xref:System.Security.SecurityException> is thrown when the dynamic method is called.</span></span>  
  
-   <span data-ttu-id="7ce34-693">La transparencia de un método dinámico que está asociado a un ensamblado de confianza parcial depende de cómo se carga el ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-693">The transparency of a dynamic method that is associated with a partially trusted assembly depends on how the assembly is loaded.</span></span> <span data-ttu-id="7ce34-694">Si el ensamblado se carga con confianza parcial (por ejemplo, en un dominio de aplicación en espacio aislado), el runtime omite las anotaciones de seguridad del ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-694">If the assembly is loaded with partial trust (for example, into a sandboxed application domain), the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="7ce34-695">El ensamblado y todos sus tipos y miembros, incluidos los métodos dinámicos, se tratan como transparente.</span><span class="sxs-lookup"><span data-stu-id="7ce34-695">The assembly and all its types and members, including dynamic methods, are treated as transparent.</span></span> <span data-ttu-id="7ce34-696">El tiempo de ejecución presta atención a las anotaciones de seguridad únicamente si el ensamblado de confianza parcial se carga con plena confianza (por ejemplo, en el dominio de aplicación predeterminado de una aplicación de escritorio).</span><span class="sxs-lookup"><span data-stu-id="7ce34-696">The runtime pays attention to security annotations only if the partial-trust assembly is loaded with full trust (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="7ce34-697">En ese caso, el tiempo de ejecución asigna el método dinámico de transparencia predeterminado para los métodos según las anotaciones del ensamblado.</span><span class="sxs-lookup"><span data-stu-id="7ce34-697">In that case, the runtime assigns the dynamic method the default transparency for methods according to the assembly's annotations.</span></span>  
  
 <span data-ttu-id="7ce34-698">Para obtener más información acerca de la reflexión emitir y transparencia, consulte [problemas de seguridad en la emisión de reflexión](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-698">For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).</span></span> <span data-ttu-id="7ce34-699">Para obtener información acerca de las transparencias, consulte [cambios de seguridad](~/docs/framework/security/security-changes.md).</span><span class="sxs-lookup"><span data-stu-id="7ce34-699">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7ce34-700">El método dinámico no tiene un cuerpo de método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-700">The dynamic method doesn't have a method body.</span>
          </span>
        </exception>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical" />
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical" />
      </Docs>
    </Member>
    <Member MemberName="MethodHandle">
      <MemberSignature Language="C#" Value="public override RuntimeMethodHandle MethodHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeMethodHandle MethodHandle" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodHandle As RuntimeMethodHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeMethodHandle MethodHandle { RuntimeMethodHandle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeMethodHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-701">No se admite para los métodos dinámicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-701">Not supported for dynamic methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-702">No se admite para los métodos dinámicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-702">Not supported for dynamic methods.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="7ce34-703">No se permite para los métodos dinámicos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-703">Not allowed for dynamic methods.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MethodImplementationFlags">
      <MemberSignature Language="C#" Value="public override System.Reflection.MethodImplAttributes MethodImplementationFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MethodImplAttributes MethodImplementationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodImplAttributes MethodImplementationFlags { System::Reflection::MethodImplAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodImplAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public override System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-704">Obtiene el módulo con el que está asociado lógicamente el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-704">Gets the module with which the dynamic method is logically associated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-705">
            <see cref="T:System.Reflection.Module" /> al que está asociado el método dinámico actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-705">The <see cref="T:System.Reflection.Module" /> with which the current dynamic method is associated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-706">Si un módulo se especificó cuando se creó el método dinámico, esta propiedad devuelve ese módulo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-706">If a module was specified when the dynamic method was created, this property returns that module.</span></span> <span data-ttu-id="7ce34-707">Si se especificó un tipo como propietario cuando se creó el método dinámico, esta propiedad devuelve el módulo que contiene ese tipo.</span><span class="sxs-lookup"><span data-stu-id="7ce34-707">If a type was specified as the owner when the dynamic method was created, this property returns the module which contains that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-708">El siguiente código en el ejemplo se muestra la <xref:System.Reflection.Emit.DynamicMethod.Module%2A> propiedad de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-708">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.Module%2A> property of a dynamic method.</span></span> <span data-ttu-id="7ce34-709">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-709">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#26](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#26)]
 [!code-csharp[Reflection.DynamicMethod.All#26](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#26)]
 [!code-vb[Reflection.DynamicMethod.All#26](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-710">Obtiene el nombre del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-710">Gets the name of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-711">Nombre simple del método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-711">The simple name of the method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="7ce34-712">No es necesario para los métodos dinámicos de nombre.</span><span class="sxs-lookup"><span data-stu-id="7ce34-712">It is not necessary to name dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-713">En el ejemplo de código siguiente se muestra el nombre de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-713">The following code example displays the name of a dynamic method.</span></span> <span data-ttu-id="7ce34-714">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-714">This code example is part of a larger example provided for  the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#27](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#27)]
 [!code-csharp[Reflection.DynamicMethod.All#27](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#27)]
 [!code-vb[Reflection.DynamicMethod.All#27](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-715">Obtiene la clase que se usó en la reflexión para obtener el método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-715">Gets the class that was used in reflection to obtain the method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-716">Siempre es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-716">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-717">Esta propiedad devuelve siempre `null` para los métodos dinámicos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-717">This property always returns `null` for dynamic methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-718">En el ejemplo de código siguiente se muestra el tipo reflejado de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-718">The following code example displays the reflected type of a dynamic method.</span></span> <span data-ttu-id="7ce34-719">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-719">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#28](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#28)]
 [!code-csharp[Reflection.DynamicMethod.All#28](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#28)]
 [!code-vb[Reflection.DynamicMethod.All#28](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnParameter">
      <MemberSignature Language="C#" Value="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ParameterInfo ReturnParameter" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnParameter As ParameterInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ParameterInfo ^ ReturnParameter { System::Reflection::ParameterInfo ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ParameterInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-720">Obtiene el parámetro devuelto del método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-720">Gets the return parameter of the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-721">Siempre es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-721">Always <see langword="null" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-722">Esta propiedad devuelve siempre `null` para los métodos dinámicos.</span><span class="sxs-lookup"><span data-stu-id="7ce34-722">This property always returns `null` for dynamic methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnType">
      <MemberSignature Language="C#" Value="public override Type ReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReturnType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-723">Obtiene el tipo de valor devuelto para el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-723">Gets the type of return value for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-724">
            <see cref="T:System.Type" /> que representa el tipo del valor devuelto del método actual; <see cref="T:System.Void" /> si el método no tiene ningún tipo de valor devuelto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-724">A <see cref="T:System.Type" /> representing the type of the return value of the current method; <see cref="T:System.Void" /> if the method has no return type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-725">Si `null` se especificó para el tipo de valor devuelto cuando se creó el método dinámico, esta propiedad devuelve <xref:System.Void?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7ce34-725">If `null` was specified for the return type when the dynamic method was created, this property returns <xref:System.Void?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-726">En el ejemplo de código siguiente se muestra el tipo de valor devuelto de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-726">The following code example displays the return type of a dynamic method.</span></span> <span data-ttu-id="7ce34-727">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-727">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#30](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#30)]
 [!code-csharp[Reflection.DynamicMethod.All#30](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#30)]
 [!code-vb[Reflection.DynamicMethod.All#30](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnTypeCustomAttributes">
      <MemberSignature Language="C#" Value="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::ICustomAttributeProvider ^ ReturnTypeCustomAttributes { System::Reflection::ICustomAttributeProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-728">Obtiene los atributos personalizados del tipo de valor devuelto para el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-728">Gets the custom attributes of the return type for the dynamic method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7ce34-729">Un objeto <see cref="T:System.Reflection.ICustomAttributeProvider" /> que representa los atributos personalizados del tipo de valor devuelto para el método dinámico.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-729">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> representing the custom attributes of the return type for the dynamic method.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-730">Atributos personalizados no se admiten en el tipo de valor devuelto de un método dinámico, por lo que la matriz de atributos personalizados devuelta por la <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> método siempre está vacío.</span><span class="sxs-lookup"><span data-stu-id="7ce34-730">Custom attributes are not supported on the return type of a dynamic method, so the array of custom attributes returned by the <xref:System.Reflection.ICustomAttributeProvider.GetCustomAttributes%2A> method is always empty.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-731">En el ejemplo de código siguiente se muestra cómo mostrar los atributos personalizados del tipo de valor devuelto de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-731">The following code example shows how to display the custom attributes of the return type of a dynamic method.</span></span> <span data-ttu-id="7ce34-732">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-732">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#31](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#31)]
 [!code-csharp[Reflection.DynamicMethod.All#31](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#31)]
 [!code-vb[Reflection.DynamicMethod.All#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.Emit.DynamicMethod.ReturnType" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicMethod.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7ce34-733">Devuelve la firma del método, representada como una cadena.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-733">Returns the signature of the method, represented as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7ce34-734">Cadena que representa la firma del método.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7ce34-734">A string representing the method signature.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7ce34-735">La firma incluye solo los tipos y el nombre del método, si existe.</span><span class="sxs-lookup"><span data-stu-id="7ce34-735">The signature includes only types and the method name, if any.</span></span> <span data-ttu-id="7ce34-736">No se incluyen los nombres de parámetro.</span><span class="sxs-lookup"><span data-stu-id="7ce34-736">Parameter names are not included.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7ce34-737">El siguiente código en el ejemplo se muestra la <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> método de un método dinámico.</span><span class="sxs-lookup"><span data-stu-id="7ce34-737">The following code example displays the <xref:System.Reflection.Emit.DynamicMethod.ToString%2A> method of a dynamic method.</span></span> <span data-ttu-id="7ce34-738">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Reflection.Emit.DynamicMethod> clase.</span><span class="sxs-lookup"><span data-stu-id="7ce34-738">This code example is part of a larger example provided for the <xref:System.Reflection.Emit.DynamicMethod> class.</span></span>  
  
 [!code-cpp[Reflection.DynamicMethod.All#32](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection.DynamicMethod.All/cpp/source.cpp#32)]
 [!code-csharp[Reflection.DynamicMethod.All#32](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection.DynamicMethod.All/CS/source.cs#32)]
 [!code-vb[Reflection.DynamicMethod.All#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection.DynamicMethod.All/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>