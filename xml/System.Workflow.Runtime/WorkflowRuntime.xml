<Type Name="WorkflowRuntime" FullName="System.Workflow.Runtime.WorkflowRuntime">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b56222b135353cb74ae07f5080a11e67e2b1dc21" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32695054" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WorkflowRuntime : IDisposable, IServiceProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WorkflowRuntime extends System.Object implements class System.IDisposable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Workflow.Runtime.WorkflowRuntime" />
  <TypeSignature Language="VB.NET" Value="Public Class WorkflowRuntime&#xA;Implements IDisposable, IServiceProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowRuntime : IDisposable, IServiceProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Workflow.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa el entorno de ejecución configurable proporcionado por el motor en tiempo de ejecución de flujo de trabajo para los flujos de trabajo.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  
  
 <xref:System.Workflow.Runtime.WorkflowRuntime> expone la funcionalidad requerida por una aplicación host y servicios para configurar y controlar el motor en tiempo de ejecución de flujo de trabajo y recibir notificaciones de los cambios realizados en el motor en tiempo de ejecución de flujo de trabajo y en cualquiera de sus instancias de flujo de trabajo.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. Proporciona ejemplos de cómo utilizar el constructor <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> y <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A>, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> y los métodos <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. El código también muestra la forma recomendada de crear un objeto <xref:System.Workflow.Runtime.WorkflowInstance> en un host del flujo de trabajo utilizando el método <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>. También muestra cómo establecer controladores de eventos para <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted>, <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> y los eventos <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkID=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para la ejecución de subprocesos.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> se inicializa con los valores de propiedad predeterminados y contiene los servicios centrales predeterminados. Para configurar también el motor en tiempo de ejecución de flujo de trabajo, puede agregar y quitar los servicios utilizando <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> y <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A>, y puede establecer <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>. Una vez configurado <xref:System.Workflow.Runtime.WorkflowRuntime>, llame al <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> para iniciar el motor en tiempo de ejecución de flujo de trabajo y sus servicios.  
  
 En la siguiente tabla se muestran los valores iniciales de las propiedades de una instancia de la clase <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
|Propiedad.|Valor inicial|  
|--------------|-------------------|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A>|"WorkflowRuntime"|  
|<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A>|`false`|  
  
 Los servicios centrales predeterminados son: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> y <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host de flujos de trabajo. Proporciona un ejemplo de cómo utilizar el constructor <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> para crear una instancia de <xref:System.Workflow.Runtime.WorkflowRuntime> y tener acceso a sus métodos y eventos.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkID=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (string configSectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string configSectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (configSectionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::String ^ configSectionName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="configSectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="configSectionName">El nombre de una sección <see langword="workflowSettings" /> válida en el archivo de configuración de la aplicación.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> utilizando la sección especificada del archivo de configuración de aplicación.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime> se inicializa según los valores de la sección especificada por `configSectionName` en el archivo de configuración de la aplicación. `configSectionName` debe corresponder a válido `workflowSettings` sección de un archivo de configuración.  
  
 Cuando el motor de tiempo de ejecución de flujo de trabajo se configura mediante un archivo de configuración de aplicación, carga y crea instancias de clases de los tipos enumerados en la `Services` sección del archivo de configuración. Cuando el motor en tiempo de ejecución de flujo de trabajo construye estas clases, busca constructores de clase con las firmas siguientes en este orden:  
  
1.  Servicio (tiempo de ejecución WorkflowRuntime, parámetros NameValueCollection)  
  
2.  Servicio (tiempo de ejecución WorkflowRuntime)  
  
3.  Servicio (parámetros NameValueCollection)  
  
4.  Servicio()  
  
 Todas las clases de servicio cargadas desde un archivo de configuración deben implementar por lo menos una de estas firmas de constructor.  
  
 Para obtener más información, vea <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="configSectionName" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">Una sección <see langword="workflowSettings" /> válida no se pudo encontrar en el archivo de configuración de la aplicación.</exception>
        <exception cref="T:System.InvalidOperationException">Un <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> ya existe para este dominio de aplicación.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowRuntime (System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Workflow.Runtime.Configuration.WorkflowRuntimeSection settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.#ctor(System.Workflow.Runtime.Configuration.WorkflowRuntimeSection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (settings As WorkflowRuntimeSection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowRuntime(System::Workflow::Runtime::Configuration::WorkflowRuntimeSection ^ settings);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="settings" Type="System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />
      </Parameters>
      <Docs>
        <param name="settings">Objeto <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> utilizando los valores del <see cref="T:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection" /> especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor proporciona un mecanismo para configurar el motor en tiempo de ejecución de flujo de trabajo mediante una llamada al método única para los hosts que no utilizan un archivo de configuración de aplicación. Hay muchas razones para no utilizar el archivo de configuración de aplicación. Un host puede ejecutarse en un entorno que no permita la utilización de archivos de configuración; por ejemplo, en entornos de confianza que no permiten la lectura del archivo de configuración de la aplicación por razones de seguridad. Además, puede que un host quiera utilizar un mecanismo de configuración de propiedad; por ejemplo, el host puede almacenar la configuración del motor en tiempo de ejecución de flujo de trabajo en una base de datos SQL.  
  
 El motor en tiempo de ejecución de flujo de trabajo carga y crea instancias de clases de los tipos contenidos en <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.Services%2A?displayProperty=nameWithType>. Cuando el motor en tiempo de ejecución de flujo de trabajo construye estas clases, busca constructores de clase con las firmas siguientes en este orden:  
  
1.  Servicio (tiempo de ejecución WorkflowRuntime, parámetros NameValueCollection)  
  
2.  Servicio (tiempo de ejecución WorkflowRuntime)  
  
3.  Servicio (parámetros NameValueCollection)  
  
4.  Servicio()  
  
 Todas las clases de servicio especificadas en `settings` deben implementar por lo menos una de estas firmas de constructor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settings" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.InvalidOperationException">Un <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> ya existe para este dominio de aplicación.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddService">
      <MemberSignature Language="C#" Value="public void AddService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.AddService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddService(System::Object ^ service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Objeto que representa el servicio que se va añadir.</param>
        <summary>Agrega el servicio especificado al motor en tiempo de ejecución de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede configurar el motor en tiempo de ejecución de flujo de trabajo agregando servicios centrales. Los servicios centrales son los que derivan de cualquiera de las clases base de servicio siguientes: la clase <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> y la clase <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Servicios centrales pueden agregarse sólo cuando el motor de tiempo de ejecución de flujo de trabajo no se está ejecutando; es decir, cuando <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> es `false`. <xref:System.Workflow.Runtime.WorkflowRuntime> también se puede utilizar como contenedor de almacenamiento para otros servicios que pueden ser utilizados por otros flujos de trabajo o por aplicaciones en ejecución en un host. Si agrega un servicio no central derivado de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> después de que el motor en tiempo de ejecución del flujo de trabajo se haya iniciado, <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> llamará al método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> implementado por ese servicio.  
  
> [!NOTE]
>  <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> aplica la restricción de que ninguno de los dos servicios del mismo <xref:System.Type> podrá agregarse a <xref:System.Workflow.Runtime.WorkflowRuntime>. Sin embargo, puede agregar varios servicios que derivan de la misma clase base.  Puede haber sólo uno servicio derivado de cada una de las clases base de servicio siguientes en <xref:System.Workflow.Runtime.WorkflowRuntime>: la clase <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> y la clase <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService>.  Si agrega varios servicios derivados de una de estas clases, por ejemplo, dos servicios de persistencia, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> lanzará un <xref:System.InvalidOperationException>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. Proporciona ejemplo de cómo utilizar el método <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> para agregar <xref:System.Workflow.Activities.ExternalDataExchangeService> y <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> al motor en tiempo de ejecución de flujo de trabajo.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkId=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Se eliminará <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="service" /> ya se registró con el motor en tiempo de ejecución de flujo de trabajo.  
  
 O bien  
  
 <paramref name="service" /> es un servicio central y el motor en tiempo de ejecución de flujo de trabajo ya está en ejecución (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> es <see langword="true" />).</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateWorkflow">
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una instancia de flujo de trabajo utilizando los parámetros especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el motor en tiempo de ejecución de flujo de trabajo no se inició, los métodos <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> llaman a <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Consulte <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> para obtener una lista de posibles excepciones. Después de crear la instancia de flujo de trabajo, llame <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A?displayProperty=nameWithType> en el objeto <xref:System.Workflow.Runtime.WorkflowInstance> devuelto por el método <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> para comenzar su ejecución.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="workflowType">El <see cref="T:System.Type" /> del flujo de trabajo que se va a crear.</param>
        <summary>Crea una nueva instancia de flujo de trabajo utilizando el <see cref="T:System.Type" />del flujo de trabajo especificado.</summary>
        <returns>La instancia de flujo de trabajo creada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de que se cree <xref:System.Workflow.Runtime.WorkflowInstance>, se ejecuta en él la validación. Si se producen errores de validación, se inicia <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Esto funciona bien para los escenarios simples, pero en un entorno del servidor, volver a validar un flujo de trabajo para cada activación podría sobrecargarse de forma innecesaria.  
  
 Para obtener más información acerca de cómo deshabilitar la validación, consulte <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cuál es la manera recomendada para crear un objeto <xref:System.Workflow.Runtime.WorkflowInstance> en un host de flujo de trabajo mediante el método <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A>.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkID=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> que contiene la definición de flujo de trabajo.</param>
        <summary>Crea una instancia de flujo de trabajo utilizando el <see cref="T:System.Xml.XmlReader" /> especificado.</summary>
        <returns>La instancia de flujo de trabajo creada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La instancia de flujo de trabajo se crea a partir de un archivo de definición de flujo de trabajo XAML al cual hace referencia <xref:System.Xml.XmlReader>.  
  
 Antes de que se cree <xref:System.Workflow.Runtime.WorkflowInstance>, se ejecuta en él la validación. Si se producen errores de validación, se inicia <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Esto funciona bien para los escenarios simples, pero en un entorno del servidor, volver a validar un flujo de trabajo para cada activación podría sobrecargarse de forma innecesaria.  
  
 Para obtener más información acerca de cómo deshabilitar la validación, consulte <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo crear un flujo de trabajo determinado a partir de una definición de flujo de trabajo basada en XAML determinada.  
  
```  
static void Main(string[] args)  
{  
    using (WorkflowRuntime workflowRuntime = new WorkflowRuntime())  
    {  
        AutoResetEvent waitHandle = new AutoResetEvent(false);  
        workflowRuntime.WorkflowCompleted += delegate(object sender, WorkflowCompletedEventArgs e)  
        {  
            waitHandle.Set();  
        };  
        workflowRuntime.WorkflowTerminated += delegate(object sender, WorkflowTerminatedEventArgs e)  
        {  
            Console.WriteLine(e.Exception.Message);  
            waitHandle.Set();  
        };  
  
        TypeProvider typeProvider = new TypeProvider(null);  
        // Add referenced assemblies, if needed  
        // typeProvider.AddAssembly(...);  
        workflowRuntime.AddService(typeProvider);  
  
        using (XmlReader reader = XmlReader.Create("Workflow1.xoml"))  
        {  
            WorkflowInstance instance = workflowRuntime.CreateWorkflow(reader);  
            instance.Start();  
        }  
  
        waitHandle.WaitOne();  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Se eliminará <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowType">El <see cref="T:System.Type" /> del flujo de trabajo que se va a crear.</param>
        <param name="namedArgumentValues">Un <see cref="T:System.Collections.Generic.Dictionary`2" /> de objetos con clave por cadena que representa los argumentos para el flujo de trabajo.</param>
        <summary>Crea una instancia de flujo de trabajo utilizando los <see cref="T:System.Type" /> del flujo de trabajo especificados y los argumentos al flujo de trabajo contenido en el <see cref="T:System.Collections.Generic.Dictionary`2" /> especificado.</summary>
        <returns>La instancia de flujo de trabajo creada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de que se cree <xref:System.Workflow.Runtime.WorkflowInstance>, se ejecuta en él la validación. Si se producen errores de validación, se inicia <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Esto funciona bien para los escenarios simples, pero en un entorno del servidor, volver a validar un flujo de trabajo para cada activación podría sobrecargarse de forma innecesaria.  
  
 Para obtener más información acerca de cómo deshabilitar la validación, consulte <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Para obtener un ejemplo de paso de parámetros a `CreateWorkflow`, consulte [flujo de trabajo con parámetros de ejemplo](http://go.microsoft.com/fwlink/?LinkId=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (Type workflowType, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Type workflowType, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowType As Type, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(Type ^ workflowType, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowType" Type="System.Type" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowType">El <see cref="T:System.Type" /> del flujo de trabajo que se va a crear.</param>
        <param name="namedArgumentValues">Un <see cref="T:System.Collections.Generic.Dictionary`2" /> de objetos con clave asignada por una cadena que representa los argumentos para el flujo de trabajo.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> de <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> específico que se va a crear.</param>
        <summary>Crea una instancia de flujo de trabajo utilizando los parámetros especificados.</summary>
        <returns>La instancia de flujo de trabajo creada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de que se cree <xref:System.Workflow.Runtime.WorkflowInstance>, se ejecuta en él la validación. Si se producen errores de validación, se inicia <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Esto funciona bien para los escenarios simples, pero en un entorno del servidor, volver a validar un flujo de trabajo para cada activación podría sobrecargarse de forma innecesaria.  
  
 Para obtener más información acerca de cómo deshabilitar la validación, consulte <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 `instanceId` del flujo de trabajo para los flujos de trabajo en ejecución cargados por <xref:System.Workflow.Runtime.WorkflowRuntime> deben ser únicos. Si usted pasa un `instanceId` para crear un flujo de trabajo y un flujo de trabajo en ejecución ya lo está utilizando `instanceId`, se iniciará un <xref:System.InvalidOperationException>.  
  
 Para obtener un ejemplo de paso de parámetros a `CreateWorkflow`, consulte [flujo de trabajo con parámetros de ejemplo](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object)) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> que contiene la definición de flujo de trabajo.</param>
        <param name="rulesReader">Una clase <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">Un <see cref="T:System.Collections.Generic.Dictionary`2" /> de objetos con clave asignada por una cadena que representa los argumentos para el flujo de trabajo.</param>
        <summary>Crea una instancia de flujo de trabajo utilizando los objetos <see cref="T:System.Xml.XmlReader" /> y los argumentos contenidos en el <see cref="T:System.Collections.Generic.Dictionary`2" /> especificado.</summary>
        <returns>La instancia de flujo de trabajo creada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La instancia de flujo de trabajo se crea a partir de la definición de flujo de trabajo a la cual hace referencia <xref:System.Xml.XmlReader> y los argumentos proporcionados por `namedArgumentValues`.  
  
 Antes de que se cree <xref:System.Workflow.Runtime.WorkflowInstance>, se ejecuta en él la validación. Si se producen errores de validación, se inicia <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Esto funciona bien para los escenarios simples, pero en un entorno del servidor, volver a validar un flujo de trabajo para cada activación podría sobrecargarse de forma innecesaria.  
  
 Para obtener más información acerca de cómo deshabilitar la validación, consulte <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 Para obtener un ejemplo de paso de parámetros a `CreateWorkflow`, consulte [flujo de trabajo con parámetros de ejemplo](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Para obtener un ejemplo del uso de las reglas definidas en XML, vea [IfElse con reglas de ejemplo](http://go.microsoft.com/fwlink/?LinkId=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowDefinitionReader" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Se eliminará <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance CreateWorkflow (System.Xml.XmlReader workflowDefinitionReader, System.Xml.XmlReader rulesReader, System.Collections.Generic.Dictionary&lt;string,object&gt; namedArgumentValues, Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance CreateWorkflow(class System.Xml.XmlReader workflowDefinitionReader, class System.Xml.XmlReader rulesReader, class System.Collections.Generic.Dictionary`2&lt;string, object&gt; namedArgumentValues, valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow(System.Xml.XmlReader,System.Xml.XmlReader,System.Collections.Generic.Dictionary{System.String,System.Object},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateWorkflow (workflowDefinitionReader As XmlReader, rulesReader As XmlReader, namedArgumentValues As Dictionary(Of String, Object), instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ CreateWorkflow(System::Xml::XmlReader ^ workflowDefinitionReader, System::Xml::XmlReader ^ rulesReader, System::Collections::Generic::Dictionary&lt;System::String ^, System::Object ^&gt; ^ namedArgumentValues, Guid instanceId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflowDefinitionReader" Type="System.Xml.XmlReader" />
        <Parameter Name="rulesReader" Type="System.Xml.XmlReader" />
        <Parameter Name="namedArgumentValues" Type="System.Collections.Generic.Dictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="workflowDefinitionReader">
          <see cref="T:System.Xml.XmlReader" /> que contiene la definición de flujo de trabajo.</param>
        <param name="rulesReader">Una clase <see cref="T:System.Xml.XmlReader" />.</param>
        <param name="namedArgumentValues">Un <see cref="T:System.Collections.Generic.Dictionary`2" /> de objetos con clave asignada por una cadena que representa los argumentos para el flujo de trabajo.</param>
        <param name="instanceId">
          <see cref="T:System.Guid" /> de <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> específico que se va a crear.</param>
        <summary>Crea una instancia de flujo de trabajo utilizando los parámetros especificados.</summary>
        <returns>La instancia de flujo de trabajo creada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Antes de que se cree <xref:System.Workflow.Runtime.WorkflowInstance>, se ejecuta en él la validación. Si se producen errores de validación, se inicia <xref:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException>. Esto funciona bien para los escenarios simples, pero en un entorno del servidor, volver a validar un flujo de trabajo para cada activación podría sobrecargarse de forma innecesaria.  
  
 Para obtener más información acerca de cómo deshabilitar la validación, consulte <xref:System.Workflow.Runtime.Configuration.WorkflowRuntimeSection.ValidateOnCreate%2A>.  
  
 `instanceId` del flujo de trabajo para los flujos de trabajo en ejecución cargados por <xref:System.Workflow.Runtime.WorkflowRuntime> deben ser únicos. Si usted pasa un `instanceId` para crear un flujo de trabajo y un flujo de trabajo en ejecución ya lo está utilizando `instanceId`, se iniciará un <xref:System.InvalidOperationException>.  
  
 Para obtener un ejemplo de paso de parámetros a `CreateWorkflow`, consulte [flujo de trabajo con parámetros de ejemplo](http://go.microsoft.com/fwlink/?LinkID=157403).  
  
 Para obtener un ejemplo del uso de las reglas definidas en XML, vea [IfElse con reglas de ejemplo](http://go.microsoft.com/fwlink/?LinkID=157404).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workflowType" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera los recursos que usa <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para cerrar correctamente <xref:System.Workflow.Runtime.WorkflowRuntime>, debería llamar a <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> después de haber llamado a <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>. Esto ocurre porque la llamada al método <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> deja <xref:System.Workflow.Runtime.WorkflowRuntime> en estado no utilizable. <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> libera los recursos utilizados por el tiempo de ejecución cerrando los identificadores de archivos abiertos, las conexiones a bases de datos, etc., pero no descarga las instancias de flujo de trabajo ni detiene los servicios ni hace ninguna de las otras acciones que hace <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
 Se debería llamar a <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> solo cuando la aplicación host necesite liberar los recursos utilizados por <xref:System.Workflow.Runtime.WorkflowRuntime> antes de ser liberados automáticamente por el recolector de elementos no utilizados. Para obtener información general sobre <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
   
  
## Examples  
 En el siguiente ejemplo se muestra cómo llamar <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> en un objeto <xref:System.Workflow.Runtime.WorkflowRuntime>. En este ejemplo, se llama al método <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A> desde el controlador de eventos FormClosing para el formulario principal de la aplicación; esto garantiza que se limpiarán correctamente los objetos creados por el motor en tiempo de ejecución cuando se cierre la aplicación. Este ejemplo es de la [ejemplo de aplicación de voz](http://go.microsoft.com/fwlink/?LinkId=157405).  
  
 [!code-csharp[WF_Samples#108](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#108)]
 [!code-vb[WF_Samples#108](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;object&gt; GetAllServices (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;object&gt; GetAllServices(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices (serviceType As Type) As ReadOnlyCollection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Object ^&gt; ^ GetAllServices(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <see cref="T:System.Type" /> que los servicios deben implementar para que se devuelva.</param>
        <summary>Recupera todos los servicios agregados al motor en tiempo de ejecución de flujo de trabajo que implementa o deriva de un <see cref="T:System.Type" /> especificado.</summary>
        <returns>Servicios que implementan o derivan del <see cref="T:System.Type" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> vacío indica que ningún servicio que implemente o derive del <xref:System.Type> especificado se ha agregado al motor en tiempo de ejecución de flujo de trabajo.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra cómo recuperar todos los servicios de un tipo determinado desde el objeto <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#19](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#19)]
 [!code-vb[WF_Samples#19](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">Se eliminará <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllServices&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; GetAllServices&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!!T&gt; GetAllServices&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetAllServices``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllServices(Of T) () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ GetAllServices();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">El tipo de servicio.</typeparam>
        <summary>Recupera todos los servicios agregados al motor en tiempo de ejecución de flujo de trabajo que implementa o deriva del tipo genérico especificado.</summary>
        <returns>Servicios que implementan o derivan del tipo genérico especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> vacío indica que no se agregó ningún servicio al motor en tiempo de ejecución de flujo de trabajo que implementa o deriva del tipo genérico especificado.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra cómo recuperar todos los servicios de un tipo determinado desde el objeto <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#6](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#6)]
 [!code-vb[WF_Samples#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Se eliminará <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLoadedWorkflows">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Workflow.Runtime.WorkflowInstance&gt; GetLoadedWorkflows() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetLoadedWorkflows" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLoadedWorkflows () As ReadOnlyCollection(Of WorkflowInstance)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Workflow::Runtime::WorkflowInstance ^&gt; ^ GetLoadedWorkflows();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Workflow.Runtime.WorkflowInstance&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene una colección que contiene todas las instancias de flujo de trabajo actualmente cargadas en la memoria.</summary>
        <returns>Un <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> para cada instancia de flujo de trabajo actualmente cargada en la memoria.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tenga en cuenta que, a diferencia de <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>, este método no lanza ninguna <xref:System.InvalidOperationException> si no se inicia el tiempo de ejecución.  
  
   
  
## Examples  
 En el siguiente ejemplo de código se muestra cómo utilizar una colección de flujos de trabajo cargados de un objeto <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#18](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#18)]
 [!code-vb[WF_Samples#18](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Se eliminará <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService (serviceType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetService(Type ^ serviceType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">
          <see cref="T:System.Type" /> del servicio que se va a recuperar.</param>
        <summary>Recupera un servicio del <see cref="T:System.Type" /> especificado del motor en tiempo de ejecución de flujo de trabajo.</summary>
        <returns>El servicio de a clase <see cref="T:System.Type" /> especificada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> inicia <xref:System.InvalidOperationException> si existe más de un servicio para el <xref:System.Type> especificado. Por consiguiente, debería utilizar uno de los métodos sobrecargados de <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> si es posible que varios servicios del tipo especificado estén presentes en <xref:System.Workflow.Runtime.WorkflowRuntime>. Por ejemplo, el motor en ejecución del flujo de trabajo puede tener varios servicios de seguimiento. Si solicita un servicio de seguimiento especificando la clase base <xref:System.Workflow.Runtime.Tracking.TrackingService>, es posible que se produzca una excepción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> ya se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException">Se buscó más de un servicio de tipo <paramref name="serviceType" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetService&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetService&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetService``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetService(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetService();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">El tipo de servicio.</typeparam>
        <summary>Recupera un servicio del tipo genérico especificado desde el motor en tiempo de ejecución de flujo de trabajo.</summary>
        <returns>Un servicio del tipo genérico especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.GetService%2A> inicia <xref:System.InvalidOperationException> si más de un servicio existe para el tipo genérico especificado. Por consiguiente, debería utilizar uno de los métodos sobrecargados de <xref:System.Workflow.Runtime.WorkflowRuntime.GetAllServices%2A> si es posible que varios servicios del tipo genérico estén presentes en <xref:System.Workflow.Runtime.WorkflowRuntime>. Por ejemplo, el motor en ejecución del flujo de trabajo puede tener varios servicios de seguimiento. Si solicita un servicio de seguimiento especificando la clase base <xref:System.Workflow.Runtime.Tracking.TrackingService>, es posible que se produzca una excepción.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo recuperar un servicio único de un objeto <xref:System.Workflow.Runtime.WorkflowRuntime>; en este caso, un servicio de tipo <xref:System.Workflow.Runtime.Hosting.ManualWorkflowSchedulerService>. Este ejemplo es de la [ejemplo de subprocesamiento de flujo de trabajo](http://go.microsoft.com/fwlink/?LinkId=157350).  
  
 [!code-csharp[WF_Samples#28](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#28)]
 [!code-vb[WF_Samples#28](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> ya se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException">Se encontró más de un servicio del tipo genérico.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetWorkflow">
      <MemberSignature Language="C#" Value="public System.Workflow.Runtime.WorkflowInstance GetWorkflow (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Workflow.Runtime.WorkflowInstance GetWorkflow(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetWorkflow (instanceId As Guid) As WorkflowInstance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Workflow::Runtime::WorkflowInstance ^ GetWorkflow(Guid instanceId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Workflow.Runtime.WorkflowInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">
          <see cref="T:System.Guid" /> de una instancia de flujo de trabajo.</param>
        <summary>Recupera la instancia de flujo de trabajo que tiene el <see cref="T:System.Guid" /> especificado.</summary>
        <returns>
          <see cref="T:System.Workflow.Runtime.WorkflowInstance" /> que tiene el <see cref="T:System.Guid" /> especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si `instanceId` especifica una instancia de flujo de trabajo que no está actualmente en la memoria, la instancia de flujo de trabajo se carga en la memoria y se programa para la ejecución. Por ejemplo, una vez anulada una instancia de flujo de trabajo, puede llamar a <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> para volver a cargar la instancia de flujo de trabajo en la memoria. En este caso, el último estado conservado de la instancia de flujo de trabajo se carga en la memoria por el servicio de persistencia.  
  
   
  
## Examples  
 El siguiente ejemplo de código muestra un método `ReloadWorkflow` que llama al método <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>. El método `ReloadWorkflow` forma parte de una clase mayor que tiene una propiedad `Runtime` para tener acceso a todos los métodos, propiedades y eventos de la clase <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 Este ejemplo de código forma parte de la [ejemplo de servicio de persistencia personalizado](http://go.microsoft.com/fwlink/?LinkId=157351) ejemplo.  
  
> [!NOTE]
>  En el ejemplo, la llamada a <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> es redundante porque <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> y los métodos <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> utilizan el mismo método auxiliar interno para cargar la instancia de flujo de trabajo en la memoria.  
  
 [!code-csharp[WF_Samples#265](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#265)]
 [!code-vb[WF_Samples#265](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#265)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No se inicia el tiempo de ejecución del flujo de trabajo.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStarted">
      <MemberSignature Language="C#" Value="public bool IsStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStarted" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStarted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si se inició el motor en tiempo de ejecución de flujo de trabajo.</summary>
        <value>
          <see langword="true" /> si se inició el motor en tiempo de ejecución de flujo de trabajo; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> indica que los servicios de tiempo de ejecución de flujo de trabajo se están ejecutando. <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> es `false` hasta que el host llame <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A>. Sigue siendo `true` hasta que el host llame <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A>.  
  
> [!NOTE]
>  No pueden agregar servicios centrales al motor en tiempo de ejecución de flujo de trabajo mientras se está ejecutando. Los servicios centrales son servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, la clase <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> y la clase <xref:System.Workflow.Runtime.Tracking.TrackingService>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo tener acceso a la propiedad <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> de un objeto <xref:System.Workflow.Runtime.WorkflowRuntime>. En este ejemplo, si se inicia el tiempo de ejecución, se imprime un mensaje en la consola.  
  
 [!code-csharp[WF_Samples#21](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#21)]
 [!code-vb[WF_Samples#21](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Workflow.Runtime.WorkflowRuntime.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre asociado a <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</summary>
        <value>El nombre asociado a esta <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede establecer <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> mientras el flujo de trabajo se ejecuta el motor en tiempo de ejecución (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> es `true`).  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo tener acceso a la propiedad <xref:System.Workflow.Runtime.WorkflowRuntime.Name%2A> de un objeto <xref:System.Workflow.Runtime.WorkflowRuntime>. En este ejemplo, el nombre del tiempo de ejecución está establecido en "Tiempo de ejecución Principal."  
  
 [!code-csharp[WF_Samples#20](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#20)]
 [!code-vb[WF_Samples#20](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Se produce un intento para establecer <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> en un <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> que se elimina.</exception>
        <exception cref="T:System.InvalidOperationException">Se produce un intento para establecer <see cref="P:System.Workflow.Runtime.WorkflowRuntime.Name" /> mientras el motor en tiempo de ejecución de flujo de trabajo está en ejecución.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveService">
      <MemberSignature Language="C#" Value="public void RemoveService (object service);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveService(object service) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.RemoveService(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveService (service As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveService(System::Object ^ service);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="service" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="service">Objeto que representa el servicio que se va eliminar.</param>
        <summary>Quita el servicio especificado del motor en tiempo de ejecución de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede quitar un servicio principal mientras se ejecuta el motor de tiempo de ejecución de flujo de trabajo (<xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> es `true`). Los servicios centrales son servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> y la clase <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Si `service` deriva de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>, <xref:System.Workflow.Runtime.WorkflowRuntime.RemoveService%2A> llama al método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> implementado por `service`.  
  
   
  
## Examples  
 En el ejemplo siguiente, <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> se agrega y quita de <xref:System.Workflow.Runtime.WorkflowRuntime>.  
  
 [!code-csharp[WF_Samples#16](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#16)]
 [!code-vb[WF_Samples#16](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="service" /> es una referencia nula (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> ya se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException">El motor en tiempo de ejecución de flujo de trabajo se inició (<see cref="P:System.Workflow.Runtime.WorkflowRuntime.IsStarted" /> es <see langword="true" />) y <paramref name="service" /> es un servicio central.  
  
 \- o -  
  
 <paramref name="service" /> no se registró con el motor en tiempo de ejecución de flujo de trabajo.</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicesExceptionNotHandled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt; ServicesExceptionNotHandled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled" />
      <MemberSignature Language="VB.NET" Value="Public Event ServicesExceptionNotHandled As EventHandler(Of ServicesExceptionNotHandledEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::ServicesExceptionNotHandledEventArgs ^&gt; ^ ServicesExceptionNotHandled;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.ServicesExceptionNotHandledEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando un servicio derivado de la clase <see cref="T:System.Workflow.Runtime.Hosting.WorkflowRuntimeService" /> llama <see cref="M:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent(System.Exception,System.Guid)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un servicio que se deriva de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> puede llamar al método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A> para informar a los suscriptores al evento <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> de que se produjo una excepción que no se pudo controlar durante su ejecución. Puede suscribirse a este evento para implementar un mecanismo de recuperación.  
  
 Se genera este evento cuando el motor en tiempo de ejecución de flujo de trabajo no ha creado todavía una instancia de flujo de trabajo y se produce una excepción. En este escenario, la única manera de informar a una aplicación host que se produjo una excepción es generar este evento. Sin embargo, el motor en tiempo de ejecución del flujo de trabajo no lo llama directamente. En su lugar, el motor en tiempo de ejecución de flujo de trabajo entrega una excepción a la instancia de flujo de trabajo o, si no hay ninguna instancia, vuelve al llamador, que en este caso es realmente el servicio que dispara este evento. Si crea su propia persistencia o servicio programador, tendrá que implementar este evento usted mismo a través del método base <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.RaiseServicesExceptionNotHandledEvent%2A>.  
  
 Para el evento <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled>, el remitente contendrá <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contendrá <xref:System.Guid> de la instancia de flujo de trabajo que estaba utilizando el servicio y el <xref:System.Exception> que no se pudo controlar.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.ServicesExceptionNotHandled> a un controlador de eventos, un método denominado `OnExceptionNotHandled`.  
  
 Este ejemplo de código forma parte de la [ejemplo de servicio de persistencia personalizado](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Started" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Started" />
      <MemberSignature Language="VB.NET" Value="Public Event Started As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Started;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el motor en tiempo de ejecución de flujo de trabajo se inicia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> método genera el <xref:System.Workflow.Runtime.WorkflowRuntime.Started> evento después de validar la configuración del servicio de núcleo del motor de tiempo de ejecución de flujo de trabajo, se invoca el <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> método implementado por cada uno de sus servicios que derivan de la <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> clase y ha establecido <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> a `true`. No hay ninguna garantía sobre el orden con el que el motor en tiempo de ejecución de flujo de trabajo inicia los servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>. Alguno de estos servicios del motor en tiempo de ejecución de flujo de trabajo pueden depender de la funcionalidad proporcionada por otro de estos servicios para completar sus tareas de inicio. Los servicios del motor en tiempo de ejecución de flujo de trabajo pueden invalidar el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStarted%2A?displayProperty=nameWithType> para realizar cualquier tarea de inicio final que requiere la compatibilidad de otros servicios de motor en tiempo de ejecución de flujo de trabajo cuando se genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started>.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 En el ejemplo siguiente, un controlador de eventos se agrega al evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started> de <xref:System.Workflow.Runtime.WorkflowRuntime>. En este ejemplo, el controlador es un método anónimo que imprime un mensaje simple en la consola.  
  
 [!code-csharp[WF_Samples#15](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#15)]
 [!code-vb[WF_Samples#15](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartRuntime">
      <MemberSignature Language="C#" Value="public void StartRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StartRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StartRuntime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inicia el motor en tiempo de ejecución de flujo de trabajo y los servicios correspondientes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método comprueba que existe un conjunto válido de servicios centrales y, a continuación, inicia los servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Debe haber uno y sólo uno de cada uno de los siguientes servicios básicos: un flujo de trabajo `CommitWorkBatch` servicio derivado de la <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService> derivan la clase base y un servicio de programador la <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService> clase base.  Si faltan uno o ambos de estos servicios principales, el motor de tiempo de ejecución de flujo de trabajo proporciona el servicio predeterminado adecuado: <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowCommitWorkBatchService> del flujo de trabajo `CommitWorkBatch` servicio y <xref:System.Workflow.Runtime.Hosting.DefaultWorkflowSchedulerService> para el servicio de programador. El servicio de persistencia es opcional, pero solamente puede haber uno presente. Después de haber validado la configuración del servicio, <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> llama <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Start%2A> en todos los servicios que se derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  Finalmente, el motor en tiempo de ejecución de flujo de trabajo establece <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> y genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Started>.  
  
 No pueden agregar o quitar los servicios centrales después de que el motor en tiempo de ejecución de flujo de trabajo se haya iniciado. Los servicios centrales son servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowSchedulerService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowCommitWorkBatchService>, la clase <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> y la clase <xref:System.Workflow.Runtime.Tracking.TrackingService>.  Si llama a <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> mientras el motor en tiempo de ejecución de flujo de trabajo está en ejecución, no se realiza ninguna acción.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código llama <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> después de que <xref:System.Workflow.Runtime.WorkflowRuntime.%23ctor%2A> cree una instancia <xref:System.Workflow.Runtime.WorkflowRuntime> y después llama <xref:System.Workflow.Runtime.WorkflowRuntime.AddService%2A> para agregar los servicios al tiempo de ejecución. También llama <xref:System.Workflow.Runtime.WorkflowRuntime.StartRuntime%2A> antes de que se produzca cualquier otro procesamiento.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkId=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Se eliminará <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
        <exception cref="T:System.InvalidOperationException">Hay más que un flujo de trabajo de servicio <see langword="CommitWorkBatch" /> registrado con este <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
 O bien  
  
 Hay más de un servicio programador registrado con este <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.  
  
 O bien  
  
 Hay más de un servicio de persistencia registrado con este <see cref="T:System.Workflow.Runtime.WorkflowRuntime" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt; Stopped" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.Stopped" />
      <MemberSignature Language="VB.NET" Value="Public Event Stopped As EventHandler(Of WorkflowRuntimeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowRuntimeEventArgs ^&gt; ^ Stopped;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowRuntimeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando el motor en tiempo de ejecución de flujo de trabajo se detiene.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> después de haber invocado el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.Stop%2A> implementado por cada uno de sus servicios que derivan de la clase <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService>.  No hay ninguna garantía sobre el orden en que se detienen estos servicios de motor en tiempo de ejecución de flujo de trabajo y algunos de estos servicios pueden necesitar conservar alguna funcionalidad basada en otros servicios hasta que también se detengan. Dichos servicios pueden invalidar el método <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService.OnStopped%2A?displayProperty=nameWithType> para realizar cualquier lógica de apagado residual cuando se genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped>.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 En el ejemplo siguiente, un controlador de eventos se agrega al evento <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> de <xref:System.Workflow.Runtime.WorkflowRuntime>. En este ejemplo, el controlador es un método anónimo que imprime un mensaje simple en la consola.  
  
 [!code-csharp[WF_Samples#14](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#14)]
 [!code-vb[WF_Samples#14](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRuntime">
      <MemberSignature Language="C#" Value="public void StopRuntime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopRuntime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Workflow.Runtime.WorkflowRuntime.StopRuntime" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopRuntime ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopRuntime();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Detiene el motor en tiempo de ejecución de flujo de trabajo y los servicios en tiempo de ejecución.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método hace que el motor de tiempo de ejecución de flujo de trabajo para cada uno de sus instancias de flujo de trabajo de descarga, detenga todos sus servicios que se derivan de la <xref:System.Workflow.Runtime.Hosting.WorkflowRuntimeService> clase, establezca <xref:System.Workflow.Runtime.WorkflowRuntime.IsStarted%2A> a `false`y generar el <xref:System.Workflow.Runtime.WorkflowRuntime.Stopped> eventos.  
  
 Para cerrar correctamente <xref:System.Workflow.Runtime.WorkflowRuntime>, llame a <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> antes de llamar a <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
 Para obtener más información, vea el método <xref:System.Workflow.Runtime.WorkflowRuntime.Dispose%2A>.  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. Se llama a <xref:System.Workflow.Runtime.WorkflowRuntime.StopRuntime%2A> después de que el host haya completado el resto del procesamiento asociado al tiempo de ejecución.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkId=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#259](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#259)]
 [!code-vb[WF_Samples#259](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#259)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Workflow.Runtime.WorkflowRuntime" /> ya se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="WorkflowAborted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowAborted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowAborted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowAborted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se anula una instancia de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> se produce después de haber borrado todo el trabajo pendiente de la instancia de flujo de trabajo, pero antes de que la instancia de flujo de trabajo se invalide en la memoria. Puede anular una instancia de flujo de trabajo llamando <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A?displayProperty=nameWithType>.  
  
 Para este evento, el remitente contendrá <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contendrá el <xref:System.Workflow.Runtime.WorkflowInstance> asociado al evento.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> a un controlador de eventos, un método denominado `OnWorkflowAborted`.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkID=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#141](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#141)]
 [!code-vb[WF_Samples#141](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#141)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowCompletedEventArgs&gt; WorkflowCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCompleted As EventHandler(Of WorkflowCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowCompletedEventArgs ^&gt; ^ WorkflowCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando una instancia de flujo de trabajo se ha completado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Se genera <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> después de que la instancia de flujo de trabajo se haya completado pero antes de que la instancia se invalide en memoria.  
  
 Para el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, el remitente incluye <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowCompletedEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> y los parámetros de salida.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> a un controlador de eventos, un método denominado `OnWorkflowCompleted`.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkId=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowCreated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowCreated As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowCreated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se crea una instancia de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> después de que la instancia de flujo de trabajo se haya construido completamente pero antes de que se procesen las actividades. Para este evento, el remitente contendrá <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contendrá el <xref:System.Workflow.Runtime.WorkflowInstance> asociado al evento.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkId=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCreated> a un controlador de eventos, un método denominado `OnWorkflowCreated`.  
  
 Este ejemplo de código forma parte de la [ejemplo de servicio de persistencia personalizado](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowIdled">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowIdled" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowIdled As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowIdled;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando una instancia de flujo de trabajo entra en el estado inactivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> cuando la instancia de flujo de trabajo entra en un estado inactivo; por ejemplo, cuando el flujo de trabajo está esperando a que una actividad <xref:System.Workflow.Activities.DelayActivity> se complete.  
  
 Para este evento, el remitente contendrá <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contendrá el <xref:System.Workflow.Runtime.WorkflowInstance> asociado al evento.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](https://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67(v=vs.100)).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> a un controlador de eventos, un método denominado `OnWorkflowIdled`.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkID=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#258](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#258)]
 [!code-vb[WF_Samples#258](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#258)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowLoaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowLoaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowLoaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando la instancia de flujo de trabajo se carga en la memoria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> se produce después de que el servicio de persistencia ha restaurado la instancia de flujo de trabajo, pero antes de que el motor en tiempo de ejecución de flujo de trabajo empiece a ejecutar una actividad.  
  
 Para el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>, el remitente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene el <xref:System.Workflow.Runtime.WorkflowInstance> asociado con el evento.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> a un controlador de eventos, un método denominado `OnWorkflowLoad`.  
  
 Este ejemplo de código forma parte de la [servicio de persistencia personalizado](http://go.microsoft.com/fwlink/?LinkID=157351) ejemplo.  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowPersisted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowPersisted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowPersisted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowPersisted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se conserva el estado de una instancia de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La instancia de flujo de trabajo puede conservarse por muchas razones. Por ejemplo, el host puede llamar a <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A?displayProperty=nameWithType> en una instancia de flujo de trabajo; o el motor en tiempo de ejecución de flujo de trabajo puede conservar una instancia de flujo de trabajo porque la instancia está inactiva o porque un ámbito atómico se ha completado. Si un servicio de persistencia se encuentra en <xref:System.Workflow.Runtime.WorkflowRuntime>, el tiempo de ejecución genera <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> después de que el estado de la instancia del flujo de trabajo se guarde en la memoria. Si un servicio de persistencia no está presente, el evento se sigue generando pero el estado de la instancia no se guarda. Si el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> se produce porque se descarga la instancia de flujo de trabajo, le seguirá un evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
 Para el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, el remitente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene el <xref:System.Workflow.Runtime.WorkflowInstance> asociado con el evento.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host de flujos de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> a un controlador de eventos, un método denominado `OnWorkflowPersisted`.  
  
 Este ejemplo de código forma parte de la [ejemplo de servicio de persistencia personalizado](http://go.microsoft.com/fwlink/?LinkID=15735).  
  
 [!code-csharp[WF_Samples#279](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#279)]
 [!code-vb[WF_Samples#279](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#279)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowResumed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowResumed" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowResumed As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowResumed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se reanuda la ejecución de una instancia de flujo de trabajo después de una suspensión.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> solo antes de que se programe la instancia de flujo de trabajo. El evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> normalmente se genera debido a una llamada explícita a <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType>. Sin embargo, el motor en tiempo de ejecución del flujo de trabajo puede suspender temporalmente una instancia para realizar una operación, por ejemplo, aplicar un cambio del flujo de trabajo. En este caso, el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> se genera cuando el tiempo de ejecución reanuda la ejecución de la instancia del flujo de trabajo que sigue a la operación.  
  
 Para el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>, el remitente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene el <xref:System.Workflow.Runtime.WorkflowInstance> asociado con el evento.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host de flujos de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> a un controlador de eventos, un método denominado `OnWorkflowResume`.  
  
 Este ejemplo de código forma parte de la [suspender y finalizar ejemplo](http://go.microsoft.com/fwlink/?LinkId=157402).  
  
 [!code-csharp[WF_Samples#171](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#171)]
 [!code-vb[WF_Samples#171](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#171)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowStarted" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowStarted As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowStarted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se ha iniciado una instancia de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El motor en tiempo de ejecución de flujo de trabajo genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> una vez iniciada la instancia de flujo de trabajo programando la actividad raíz para la ejecución. Para este evento, el remitente contendrá <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contendrá el <xref:System.Workflow.Runtime.WorkflowInstance> asociado al evento.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowStarted> a un controlador de eventos, un método denominado `OnWorkflowStarted`.  
  
 Este ejemplo de código forma parte de la [ejemplo de comunicación de Host](http://go.microsoft.com/fwlink/?LinkId=157406).  
  
 [!code-csharp[WF_Samples#297](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets38.cs#297)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowSuspended">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt; WorkflowSuspended" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowSuspended As EventHandler(Of WorkflowSuspendedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowSuspendedEventArgs ^&gt; ^ WorkflowSuspended;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se suspende una instancia de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una instancia de flujo de trabajo puede ser suspendida por el host a través de una llamada al método <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A>, por una actividad <xref:System.Workflow.ComponentModel.SuspendActivity>, o implícitamente por el motor en tiempo de ejecución de flujo de trabajo. Por ejemplo, el motor en tiempo de ejecución de flujo de trabajo suspende temporalmente la instancia cuando aplica cambios dinámicos a la instancia.  
  
 Para el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>, el remitente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> y una cadena que describe el motivo por el que se suspendió la instancia.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> a un controlador de eventos, un método denominado `OnWorkflowSuspended`.  
  
 Este ejemplo de código forma parte de la [suspender y finalizar ejemplo](http://go.microsoft.com/fwlink/?LinkID=157402).  
  
 [!code-csharp[WF_Samples#170](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#170)]
 [!code-vb[WF_Samples#170](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowTerminated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt; WorkflowTerminated" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowTerminated As EventHandler(Of WorkflowTerminatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowTerminatedEventArgs ^&gt; ^ WorkflowTerminated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando se finaliza una instancia de flujo de trabajo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El flujo de trabajo puede ser terminado por el host a través de una llamada al método <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>, por una actividad <xref:System.Workflow.ComponentModel.TerminateActivity> o por el motor en tiempo de ejecución de flujo de trabajo cuando se produce una excepción no controlada. El motor en tiempo de ejecución de flujo de trabajo genera el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> una vez finalizada la instancia de flujo de trabajo, pero antes de invalidarse en memoria.  
  
 Para el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted>, el remitente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> contiene <xref:System.Workflow.Runtime.WorkflowInstance> e información sobre la razón por la cual la instancia se finalizó en la propiedad <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs.Exception%2A?displayProperty=nameWithType>.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowCompleted> a un controlador de eventos, un método denominado `OnWorkflowCompleted`.  
  
 Este ejemplo de código forma parte de la [cancelar un flujo de trabajo](http://go.microsoft.com/fwlink/?LinkID=157346) ejemplo.  
  
 [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]
 [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkflowUnloaded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Workflow.Runtime.WorkflowEventArgs&gt; WorkflowUnloaded" />
      <MemberSignature Language="DocId" Value="E:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded" />
      <MemberSignature Language="VB.NET" Value="Public Event WorkflowUnloaded As EventHandler(Of WorkflowEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Workflow::Runtime::WorkflowEventArgs ^&gt; ^ WorkflowUnloaded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Workflow.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Workflow.Runtime.WorkflowEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se produce cuando la instancia de flujo de trabajo se descarga de la memoria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una instancia de flujo de trabajo puede descargarse de la memoria por una llamada explícita a <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>o implícitamente por el motor en tiempo de ejecución de flujo de trabajo, según su propia semántica. Por ejemplo, el motor de tiempo de ejecución de flujo de trabajo descarga una instancia de flujo de trabajo si la instancia se vuelve inactiva y el tiempo de ejecución tiene una <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService> agregado para el que <xref:System.Workflow.Runtime.Hosting.WorkflowPersistenceService.UnloadOnIdle%2A> es `true`.  
  
 El motor en tiempo de ejecución de flujo de trabajo genera el  
  
 Evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> una vez conservado correctamente el estado de la instancia de flujo de trabajo pero antes de que la instancia se invalide en la memoria. Por consiguiente, un evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowPersisted> precederá el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>.  
  
 Para el evento <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>, el remitente contiene <xref:System.Workflow.Runtime.WorkflowRuntime> y <xref:System.Workflow.Runtime.WorkflowEventArgs> contiene el <xref:System.Workflow.Runtime.WorkflowInstance> asociado con el evento.  
  
 Para obtener más información sobre el control de eventos, vea [consumir eventos](http://go.microsoft.com/fwlink/?LinkID=157352).  
  
   
  
## Examples  
 El ejemplo de código siguiente muestra cómo se puede utilizar la funcionalidad <xref:System.Workflow.Runtime.WorkflowRuntime> desde un host del flujo de trabajo. El código asocia <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> a un controlador de eventos, un método denominado `OnWorkflowUnload`.  
  
 Este ejemplo de código forma parte de la [ejemplo de servicio de persistencia personalizado](http://go.microsoft.com/fwlink/?LinkID=157351).  
  
 [!code-csharp[WF_Samples#271](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#271)]
 [!code-vb[WF_Samples#271](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#271)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>