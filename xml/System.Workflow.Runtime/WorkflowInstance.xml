<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WorkflowInstance.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5181673212b57e524c54cc9851648ca01d7c1e21c.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">181673212b57e524c54cc9851648ca01d7c1e21c</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>Represents a workflow instance.</source>
          <target state="translated">Representa una instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine.</source>
          <target state="translated">La clase <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> expone los métodos y propiedades que se pueden utilizar para controlar la ejecución de una instancia de flujo de trabajo; es esencialmente un proxy a la instancia de flujo de trabajo real utilizada por el motor en tiempo de ejecución de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> class.</source>
          <target state="translated">Un host o un servicio puede indicar al motor en tiempo de ejecución de flujo de trabajo que realice las acciones en una instancia de flujo de trabajo llamando a los métodos adecuados contenidos en la clase <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>If the requested action is not valid, for example, if the host calls <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.</source>
          <target state="translated">Si la acción solicitada no es válida, por ejemplo, si el host llama <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> en una instancia de flujo de trabajo que ya se ha completado, el motor en tiempo de ejecución de flujo de trabajo generará una excepción adecuada.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime.</source>
          <target state="translated">Si una instancia de flujo de trabajo no responde porque no se devuelve una llamada en la aplicación host, la única manera de recuperar la instancia es reiniciar el tiempo de ejecución.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Sin embargo, si la instancia se ha descargado de forma forzada, o se ha interrumpido o suspendido, se puede continuar llamando al método <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=nameWithType&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>The following code example demonstrates how you can create and start a <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> in a workflow host.</source>
          <target state="translated">El ejemplo de código siguiente muestra cómo puede crear e iniciar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> en un host del flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>The code creates an instance of the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, adds services to the runtime, and then demonstrates the recommended way to create a <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El código crea una instancia de <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, agrega los servicios al tiempo de ejecución y, a continuación, muestra la manera recomendada de crear un objeto <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>The code initializes <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> by calling the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A&gt;</ph> method and passing the previously created type to it.</source>
          <target state="translated">El código inicializa <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> llamando al método <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A&gt;</ph> y pasándole el tipo previamente creado.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> is started with the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> se inicia con la llamada al método <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</source>
          <target state="translated">Este ejemplo de código forma parte de la muestra de SDK Cancelar un Flujo de trabajo, del archivo Program.cs.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>For more information, see <bpt id="p1">[</bpt>Canceling a Workflow<ept id="p1">](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>cancelar un flujo de trabajo<ept id="p1">](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)</ept>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Workflow.Runtime.WorkflowInstance">
          <source>This type is thread safe.</source>
          <target state="translated">Este tipo es seguro para la ejecución de subprocesos.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>Aborts the workflow instance.</source>
          <target state="translated">Anula la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted.</source>
          <target state="translated">La instancia de flujo de trabajo se anula de forma sincrónica; es decir, el método vuelve después de que la instancia de flujo de trabajo haya sido anulada.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>The workflow runtime engine invalidates the workflow instance in memory and clears the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;</ph>.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo invalida la instancia de flujo de trabajo en la memoria y borra <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away.</source>
          <target state="translated">Si su instancia de flujo de trabajo utilizó un servicio de persistencia, no se tendrá en cuenta todo el trabajo realizado desde el último punto de persistencia.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>After it aborts the workflow instance, the workflow runtime engine raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted&gt;</ph> event.</source>
          <target state="translated">Después de anular la instancia de flujo de trabajo, el motor en tiempo de ejecución de flujo de trabajo genera el evento <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>You can call <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A&gt;</ph> to reload the workflow instance and start from its last persistence point.</source>
          <target state="translated">Puede llamar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A&gt;</ph> para recargar la instancia de flujo de trabajo e empezar desde su último punto de persistencia.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source><ph id="ph1">`Abort`</ph> is different from <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> in that while <ph id="ph3">`Abort`</ph> simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.</source>
          <target state="translated"><ph id="ph1">`Abort`</ph> es diferente de <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> en que <ph id="ph3">`Abort`</ph> simplemente borra la instancia de flujo de trabajo en memoria y se puede reiniciar desde el último punto de persistencia, Finalizar borra la instancia de flujo de trabajo en memoria e informa al servicio de persistencia de que la instancia se ha borrado de la memoria.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>For the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph>, this means that all state information for that workflow instance is deleted from the database upon termination.</source>
          <target state="translated">Para <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph>, esto significa que toda la información de estado para esa instancia de flujo de trabajo se elimina de la base de datos cuando se termina.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>You will not be able to reload the workflow instance from a previously stored persistence point.</source>
          <target state="translated">No podrá recargar la instancia de flujo de trabajo de un punto de persistencia previamente almacenado.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>The following example demonstrates calling Abort on a workflow instance of type Workflow1.</source>
          <target state="translated">El ejemplo siguiente muestra cómo se llama a Anular en una instancia de flujo de trabajo de tipo Workflow1.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Abort">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /&gt;</ph> specifying dynamic updates for the workflow instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /&gt;</ph> que especifica las actualizaciones dinámicas para la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
          <source>Applies changes to the workflow instance specified by the <ph id="ph1">&lt;see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /&gt;</ph> object.</source>
          <target state="translated">Aplica los cambios a la instancia de flujo de trabajo especificada por el objeto <ph id="ph1">&lt;see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
          <source>If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.</source>
          <target state="translated">Si aún no se ha suspendido la instancia de flujo de trabajo, el motor en tiempo de ejecución de flujo de trabajo suspende temporalmente la instancia antes de aplicar los cambios.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
          <source>The following example demonstrates calling ApplyWorkflowChanges to a <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El ejemplo siguiente muestra cómo se llama a ApplyWorkflowChanges a un objeto <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
          <source>This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.</source>
          <target state="translated">Este ejemplo es de la muestra de SDK Máquina de estados de la Clasificación, del archivo Mainform.cs.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
          <source>For more information, see the <bpt id="p1">[</bpt>Ordering State Machine Sample<ept id="p1">](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)</ept>.</source>
          <target state="translated">Para obtener más información, consulte el <bpt id="p1">[</bpt>ejemplo de máquina de estado de ordenación<ept id="p1">](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)</ept>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The name of the <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph>.</source>
          <target state="translated">Nombre del objeto <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The object to enqueue.</source>
          <target state="translated">Objeto que se va a poner en cola.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.IPendingWork" /&gt;</ph> that allows the sender to be notified when <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> is delivered.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.IPendingWork" /&gt;</ph> que permite notificar el remitente cuando se entrega <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>An object to be passed to the <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.IPendingWork" /&gt;</ph> methods.</source>
          <target state="translated">Objeto que se pasará a los métodos <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.IPendingWork" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>Posts a message to the specified workflow queue synchronously.</source>
          <target state="translated">Envía un mensaje a la cola del flujo de trabajo especificada sincrónicamente.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>Sends the <ph id="ph1">`item`</ph> to the specified <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph>.</source>
          <target state="translated">Envía el <ph id="ph1">`item`</ph> al <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>If you want to be notified when the message is delivered, you can implement <ph id="ph1">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> in your service and pass a <ph id="ph2">`workItem`</ph> and an <ph id="ph3">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> object to <ph id="ph4">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph>.</source>
          <target state="translated">Si quiere recibir una notificación cuando se entregue el mensaje, puede implementar <ph id="ph1">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> en su servicio y pasar <ph id="ph2">`workItem`</ph> y un objeto <ph id="ph3">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> a <ph id="ph4">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>If you do not want such notification, you can pass a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic) for <ph id="ph2">`pendingWork`</ph> and <ph id="ph3">`workItem`</ph>.</source>
          <target state="translated">Si no quiere recibir una notificación, puede pasar una referencia nula (<ph id="ph1">`Nothing`</ph> en Visual Basic) para <ph id="ph2">`pendingWork`</ph> y <ph id="ph3">`workItem`</ph>.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>When using this method with a state machine workflow, you might get an exception with the message "Queue '{0}' is not enabled."</source>
          <target state="translated">Al usar este método con un flujo de trabajo del equipo de estado, puede obtener una excepción con el mensaje "La cola '{0}' no está habilitada".</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>This happens when the current state of the state machine does not know how to handle a specific event.</source>
          <target state="translated">Esto sucede cuando el estado actual del equipo de estado no sabe cómo administrar un evento concreto.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>For example, when some state other than the current state contains the <ph id="ph1">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> that contains the <ph id="ph2">&lt;xref:System.Workflow.Activities.HandleExternalEventActivity&gt;</ph> that is represented by the queue '{0}'.</source>
          <target state="translated">Por ejemplo, cuando un estado distinto del estado actual contiene la <ph id="ph1">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> que contiene la <ph id="ph2">&lt;xref:System.Workflow.Activities.HandleExternalEventActivity&gt;</ph> que está representada por la cola' {0}.'</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>Messages are not guaranteed to be received by the workflow instance in the order that they were sent.</source>
          <target state="translated">No se garantiza que la instancia de flujo de trabajo envíe los mensajes en el orden en que se enviaron.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet.</source>
          <target state="translated">Por ejemplo, si al recibir un mensaje en una cola existente (Cola A) un flujo de trabajo crea otra cola (Cola B) que, a continuación, escucha otros mensaje enviados después del primer mensaje, es posible que el segundo mensaje llegue primero, y que no se reciba debido a que todavía no se ha creado su cola.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph>.)</source>
          <target state="translated">Para evitar este problema, no se debería enviar el segundo mensaje hasta que se compruebe la presencia de la segunda cola (utilizar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph>.)</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The following code example demonstrates how to use <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph>.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo utilizar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>When the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled&gt;</ph> event occurs, the <ph id="ph2">`OnWorkflowIdled`</ph> method defined in this example is called.</source>
          <target state="translated">Cuando se produce el evento <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled&gt;</ph>, se llama al método <ph id="ph2">`OnWorkflowIdled`</ph> definido en este ejemplo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>It determines which workflow is idled using the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A&gt;</ph> property and then gets a collection of queued items for the workflow instance by calling the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph> method.</source>
          <target state="translated">Determina qué flujo de trabajo está inactivo utilizando la propiedad <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A&gt;</ph> y, a continuación, obtiene una colección de elementos en cola para la instancia de flujo de trabajo llamando al método <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The code iterates over the collection to determine which activity is waiting for the event that idled the workflow.</source>
          <target state="translated">El código itera sobre la colección para determinar qué actividad está esperando para el evento que ralentizó el flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>It then sends an exception to the workflow queue using the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph> method along with the name of the event queue item.</source>
          <target state="translated">Envía a continuación una excepción a la cola del flujo de trabajo utilizando el método <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph> junto con el nombre del elemento de cola de evento.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</source>
          <target state="translated">Este ejemplo de código forma parte de la muestra de SDK Cancelar un Flujo de trabajo, del archivo Program.cs.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>For more information, see <bpt id="p1">[</bpt>Canceling a Workflow<ept id="p1">](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>cancelar un flujo de trabajo<ept id="p1">](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)</ept>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source><ph id="ph1">&lt;paramref name="queueName" /&gt;</ph> is a null reference (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="queueName" /&gt;</ph> es una referencia nula (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph> specified by <ph id="ph2">&lt;paramref name="queueName" /&gt;</ph> does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph> especificado por <ph id="ph2">&lt;paramref name="queueName" /&gt;</ph> no existe.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph> specified by <ph id="ph2">&lt;paramref name="queueName" /&gt;</ph> is not enabled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph> especificado por <ph id="ph2">&lt;paramref name="queueName" /&gt;</ph>no está habilitado.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The name of the <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph>.</source>
          <target state="translated">Nombre del objeto <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The object to enqueue.</source>
          <target state="translated">Objeto que se va a poner en cola.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.IPendingWork" /&gt;</ph> that allows the sender to be notified when <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept> is delivered.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.IPendingWork" /&gt;</ph> que permite notificar el remitente cuando se entrega <bpt id="p1">&lt;c&gt;</bpt>item<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>An object to be passed to the <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.IPendingWork" /&gt;</ph> methods.</source>
          <target state="translated">Objeto que se pasará a los métodos <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.IPendingWork" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>Posts a message to the specified workflow queue when the workflow is idle.</source>
          <target state="translated">Envía un mensaje a la cola del flujo de trabajo especificada cuando el flujo de trabajo está inactivo.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source><ph id="ph1">&lt;see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /&gt;</ph> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)" /&gt;</ph> espera hasta que el flujo de trabajo alcanza un punto inactivo y se pone a la cola después de comprobar que el programador del flujo de trabajo está inactivo (es decir, no se ejecuta ninguna operación activa).</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>Waits for the workflow instance to become idle and then sends the <ph id="ph1">`item`</ph> to the specified <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph>.</source>
          <target state="translated">Espera a que la instancia de flujo de trabajo se vuelva inactiva y, a continuación, envía <ph id="ph1">`item`</ph> al <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>If you call <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A&gt;</ph> while the workflow instance is suspended, the workflow runtime engine will throw an <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si usted llama <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A&gt;</ph> mientras se suspende la instancia de flujo de trabajo, el motor en tiempo de ejecución de flujo de trabajo iniciará <ph id="ph2">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>If you want to be notified when the message is delivered, you can implement <ph id="ph1">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> in your service and pass a <ph id="ph2">`workItem`</ph> and an <ph id="ph3">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> object to <ph id="ph4">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph>.</source>
          <target state="translated">Si quiere recibir una notificación cuando se entregue el mensaje, puede implementar <ph id="ph1">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> en su servicio y pasar <ph id="ph2">`workItem`</ph> y un objeto <ph id="ph3">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> a <ph id="ph4">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>If you do not want such notification, you can pass a null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic) for <ph id="ph2">`pendingWork`</ph> and <ph id="ph3">`workItem`</ph>.</source>
          <target state="translated">Si no quiere recibir una notificación, puede pasar una referencia nula (<ph id="ph1">`Nothing`</ph> en Visual Basic) para <ph id="ph2">`pendingWork`</ph> y <ph id="ph3">`workItem`</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>When you are using this method with a state machine workflow, you might get an exception that contains the message "Queue '{0}' is not enabled."</source>
          <target state="translated">Cuando utilice este método con un flujo de trabajo de equipo de estado, podría obtener una excepción que contiene el mensaje "Cola del mensaje' {0}' no está habilitado."</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>This occurs when the current state of the state machine does not know how to handle a specific event.</source>
          <target state="translated">Esto sucede cuando el estado actual del equipo de estado no sabe cómo administrar un evento específico.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>For example, when some state other than the current state contains the <ph id="ph1">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> that contains the <ph id="ph2">&lt;xref:System.Workflow.Activities.HandleExternalEventActivity&gt;</ph> that is represented by the queue '{0}'.</source>
          <target state="translated">Por ejemplo, cuando un estado distinto del estado actual contiene la <ph id="ph1">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> que contiene la <ph id="ph2">&lt;xref:System.Workflow.Activities.HandleExternalEventActivity&gt;</ph> que está representada por la cola' {0}.'</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The following example demonstrates sending information to a workflow instance using the <ph id="ph1">`EnqueueItemOnIdle`</ph> method.</source>
          <target state="translated">El ejemplo siguiente muestra cómo enviar información a una instancia de flujo de trabajo mediante el método <ph id="ph1">`EnqueueItemOnIdle`</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>First, a WorkflowInstance object is created and started; next, an object that implements the <ph id="ph1">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> interface is created.</source>
          <target state="translated">Primero, un objeto WorkflowInstance se crea y se inicia; después, se creará un objeto que implementa la interfaz <ph id="ph1">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source><ph id="ph1">`EnqueueItemOnIdle`</ph> is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.</source>
          <target state="translated"><ph id="ph1">`EnqueueItemOnIdle`</ph> a continuación, se llama, pasando los valores de cadena para el nombre de cola, el elemento en cola y el elemento de trabajo que se pasan a los métodos del objeto pendingWork.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source><ph id="ph1">&lt;paramref name="queueName" /&gt;</ph> is a null reference (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="queueName" /&gt;</ph> es una referencia nula (<ph id="ph2">&lt;see langword="Nothing" /&gt;</ph> en Visual Basic).</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The workflow instance is suspended.</source>
          <target state="translated">Se suspende la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph> specified by <ph id="ph2">&lt;paramref name="queueName" /&gt;</ph> does not exist.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph> especificado por <ph id="ph2">&lt;paramref name="queueName" /&gt;</ph> no existe.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph> specified by <ph id="ph2">&lt;paramref name="queueName" /&gt;</ph> is not enabled.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueue" /&gt;</ph> especificado por <ph id="ph2">&lt;paramref name="queueName" /&gt;</ph>no está habilitado.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)">
          <source>The object to compare.</source>
          <target state="translated">Objeto que se va a comparar.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)">
          <source>Returns a value that indicates whether the specified object is equal to the <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph>.</source>
          <target state="translated">Devuelve un valor que indica si el objeto especificado es igual a <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified object is equal to this <ph id="ph2">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph>; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el objeto especificado es igual a <ph id="ph2">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph>; en caso contrario, es <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)">
          <source>The object must be an instance of the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> class and have the same <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> as this <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</source>
          <target state="translated">El objeto debe ser una instancia de la clase <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> y tener el mismo <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> que <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode">
          <source>Returns the hash code for this workflow instance.</source>
          <target state="translated">Devuelve el código hash de esta instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode">
          <source>The hash code for this <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph>.</source>
          <target state="translated">Código hash de esta <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetHashCode">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A&gt;</ph> returns a hash code based on the value of <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A&gt;</ph> devuelve un código hash basado en el valor de <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
          <source>Retrieves the root activity for this workflow instance.</source>
          <target state="translated">Recupera la actividad raíz para esta instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
          <source>An <ph id="ph1">&lt;see cref="T:System.Workflow.ComponentModel.Activity" /&gt;</ph> object.</source>
          <target state="translated">Un objeto <ph id="ph1">&lt;see cref="T:System.Workflow.ComponentModel.Activity" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
          <source>You can use the root activity to navigate the activity hierarchy of the workflow.</source>
          <target state="translated">Puede utilizar la actividad raíz para navegar la jerarquía de la actividad del flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
          <source>This method is not thread safe, so the host should synchronize its calls to this method.</source>
          <target state="translated">Este método no es seguro para subprocesos por lo que el host debería sincronizar sus llamadas a este método.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
          <source>The following example demonstrates retrieving the workflow definition from a workflow instance.</source>
          <target state="translated">El ejemplo siguiente muestra cómo recuperar la definición de flujo de trabajo de una instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
          <source>This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.</source>
          <target state="translated">Este ejemplo es de la muestra de SDK Máquina de estados de la Clasificación, del archivo Mainform.cs.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition">
          <source>For more information, see the <bpt id="p1">[</bpt>Ordering State Machine Sample<ept id="p1">](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)</ept>.</source>
          <target state="translated">Para obtener más información, consulte el <bpt id="p1">[</bpt>ejemplo de máquina de estado de ordenación<ept id="p1">](http://msdn.microsoft.com/library/59272cf4-bc98-439c-bcfa-b66999ebce5c)</ept>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration">
          <source>Returns the next point in time that this <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph> is scheduled to be delivered a timer message.</source>
          <target state="translated">Devuelve el punto siguiente en el momento en que se programa <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph> para recibir un mensaje del temporizador.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration">
          <source>A DateTime value that represents the next <ph id="ph1">&lt;see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /&gt;</ph> time this <ph id="ph2">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph> will be delivered a timer message.</source>
          <target state="translated">Un valor DateTime que representa la hora <ph id="ph1">&lt;see cref="P:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt" /&gt;</ph> siguiente en que se entregará un mensaje del temporizador a <ph id="ph2">&lt;see cref="T:System.Workflow.Runtime.WorkflowInstance" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration">
          <source>The following example demonstrates using the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A&gt;</ph> method to determine if more workflow timer messages are enqueued.</source>
          <target state="translated">El ejemplo siguiente muestra cómo utilizar el método <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A&gt;</ph> para determinar si se ponen en cola más mensajes del temporizador de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration">
          <source>This example is from the WorkflowThreading SDK sample, from the Program.cs file.</source>
          <target state="translated">Este ejemplo es de la muestra de SDK de WorkflowThreading del archivo Program.cs.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration">
          <source>For more information, see <bpt id="p1">[</bpt>Workflow Threading Sample<ept id="p1">](http://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>ejemplo de subprocesamiento de flujo de trabajo<ept id="p1">](http://msdn.microsoft.com/library/5b650be7-09fa-47db-a2f6-523dc8ea5ee9)</ept>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>Gets a collection of <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /&gt;</ph> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.</source>
          <target state="translated">Obtiene una colección de los objetos <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /&gt;</ph> que contiene los elementos pendientes y las actividades subscritas para las colas del flujo de trabajo asociadas a esta instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> of <ph id="ph2">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /&gt;</ph> objects.</source>
          <target state="translated">Colección <ph id="ph1">&lt;see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /&gt;</ph> de objetos <ph id="ph2">&lt;see cref="T:System.Workflow.Runtime.WorkflowQueueInfo" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph> returns a collection of <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo&gt;</ph> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph> devuelve una colección de objetos <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo&gt;</ph>, cada uno de los cuales contiene información sobre el estado de una de las colas de flujo de trabajo asociadas a esta instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType&gt;</ph> contains the pending items for a <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph> and <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType&gt;</ph> contains a list of the activities that are subscribed for item delivery on a <ph id="ph4">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=nameWithType&gt;</ph> contiene los elementos pendientes de <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph> y <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=nameWithType&gt;</ph> contiene una lista de las actividades que se suscriben para la entrega del elemento en <ph id="ph4">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>The following code example demonstrates how you can use the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph> method to obtain information about the state of all workflow queues associated with a <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El ejemplo de código siguiente muestra cómo puede utilizar el método <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph> para obtener información sobre el estado de todas las colas de flujo de trabajo asociadas a un objeto <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>When the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled&gt;</ph> event occurs, the <ph id="ph2">`OnWorkflowIdled`</ph> method defined in this example is called.</source>
          <target state="translated">Cuando se produce el evento <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled&gt;</ph>, se llama al método <ph id="ph2">`OnWorkflowIdled`</ph> definido en este ejemplo.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>It determines which workflow is idled using the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A&gt;</ph> property and then gets a collection of queued items for the workflow instance by calling the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph> method.</source>
          <target state="translated">Determina qué flujo de trabajo está inactivo utilizando la propiedad <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A&gt;</ph> y, a continuación, obtiene una colección de elementos en cola para la instancia de flujo de trabajo llamando al método <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>The code iterates over the collection to determine which activity is waiting for the event that idled the workflow.</source>
          <target state="translated">El código itera sobre la colección para determinar qué actividad está esperando para el evento que ralentizó el flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>It then sends an exception to the workflow queue using the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph> method along with the name of the event queue item.</source>
          <target state="translated">Envía a continuación una excepción a la cola del flujo de trabajo utilizando el método <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph> junto con el nombre del elemento de cola de evento.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</source>
          <target state="translated">Este ejemplo de código forma parte de la muestra de SDK Cancelar un Flujo de trabajo, del archivo Program.cs.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>For more information, see <bpt id="p1">[</bpt>Canceling a Workflow<ept id="p1">](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>cancelar un flujo de trabajo<ept id="p1">](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)</ept>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
          <source>Gets the unique identifier for the workflow instance.</source>
          <target state="translated">Obtiene el identificador único de la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
          <source>The <ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> of the workflow instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Guid" /&gt;</ph> de la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
          <source>You can use <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> to reference the workflow instance.</source>
          <target state="translated">Puede utilizar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> para hacer referencia a la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
          <source>The following code example demonstrates how you can use the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> property to obtain information about a <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El ejemplo de código siguiente muestra cómo puede utilizar la propiedad <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> para obtener información sobre un objeto <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
          <source>The first code snippet creates a <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> variable named <ph id="ph2">`instanceId`</ph>.</source>
          <target state="translated">El primer fragmento de código crea una variable <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> denominada <ph id="ph2">`instanceId`</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
          <source>The second snippet uses the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> property as the first object in an <ph id="ph2">`OrderEventArgs`</ph> constructor call when the <ph id="ph3">`CallBackForApproval`</ph> method is called.</source>
          <target state="translated">El segundo fragmento de código utiliza la propiedad <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> como el primer objeto en una llamada de constructor <ph id="ph2">`OrderEventArgs`</ph> cuando se llama al método <ph id="ph3">`CallBackForApproval`</ph>.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
          <source>This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file.</source>
          <target state="translated">Este ejemplo de código forma la parte de la muestra de SDK Escuche, del archivo OrderServiceImple.cs.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.InstanceId">
          <source>For more information, see <bpt id="p1">[</bpt>Listen Sample<ept id="p1">](http://msdn.microsoft.com/library/1cec0e82-7544-429f-b717-0fc25eb42b7f)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>muestra escuche<ept id="p1">](http://msdn.microsoft.com/library/1cec0e82-7544-429f-b717-0fc25eb42b7f)</ept>.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Load">
          <source>Loads a previously unloaded workflow instance.</source>
          <target state="translated">Carga una instancia de flujo de trabajo previamente descargada.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Load">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> is synchronous; if the workflow instance can be loaded, <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> es sincrónico; si se puede cargar la instancia de flujo de trabajo, <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> devolverá cuando el motor en tiempo de ejecución de flujo de trabajo haya cargado en la memoria y haya programado la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Load">
          <source>The runtime raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded&gt;</ph> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.</source>
          <target state="translated">El tiempo de ejecución genera el evento <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded&gt;</ph> después de que el servicio de persistencia haya restaurado la instancia de flujo de trabajo en memoria, pero antes de que el motor en tiempo de ejecución de flujo de trabajo programe la instancia.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Load">
          <source>The following example demonstrates how to load a previously unloaded <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El ejemplo siguiente muestra cómo cargar un objeto <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> previamente descargado.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Load">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles">
          <source>Reload the tracking profiles for this workflow instance.</source>
          <target state="translated">Recargue los perfiles de seguimiento para esta instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles">
          <source>The runtime tracking infrastructure will reload each <ph id="ph1">&lt;xref:System.Workflow.Runtime.Tracking.TrackingProfile&gt;</ph> for this workflow instance associated with its tracking channels.</source>
          <target state="translated">La infraestructura del seguimiento en tiempo de ejecución recargará cada <ph id="ph1">&lt;xref:System.Workflow.Runtime.Tracking.TrackingProfile&gt;</ph> para esta instancia de flujo de trabajo asociada a sus canales del seguimiento.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles">
          <source>If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.</source>
          <target state="translated">Si aún no está en estado suspendido, la infraestructura del seguimiento en tiempo de ejecución suspende temporalmente el flujo de trabajo mientras se recargan los perfiles del seguimiento.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Resume">
          <source>Resumes execution of a previously suspended workflow instance.</source>
          <target state="translated">Reanuda la ejecución de una instancia de flujo de trabajo previamente suspendida.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Resume">
          <source>The host can call <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A&gt;</ph> to resume execution of a workflow instance that has been previously suspended.</source>
          <target state="translated">El host puede llamar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A&gt;</ph> para reanudar la ejecución de una instancia de flujo de trabajo suspendida previamente.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Resume">
          <source>If the workflow instance is not in the suspended state, no action is taken.</source>
          <target state="translated">Si la instancia de flujo de trabajo no está en estado suspendido, no se realiza ninguna acción.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Resume">
          <source>The runtime raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed&gt;</ph> event just before execution of the workflow instance is resumed.</source>
          <target state="translated">El tiempo de ejecución genera el evento <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed&gt;</ph> justo antes de que se reanude la ejecución de la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Resume">
          <source>The following example demonstrates calling Resume on a previously suspended workflow instance.</source>
          <target state="translated">El ejemplo siguiente muestra cómo llamar a Reanudar en una instancia de flujo de trabajo previamente suspendida.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Resume">
          <source>This example is from the Suspend and Terminate SDK sample.</source>
          <target state="translated">Este ejemplo pertenece a Suspenda y Finalice el ejemplo de SDK.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Resume">
          <source>For more information, see <bpt id="p1">[</bpt>Suspend and Terminate Sample<ept id="p1">](http://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>suspender y finalizar ejemplo<ept id="p1">](http://msdn.microsoft.com/library/f4dffa58-d01e-44fb-b5a1-3b283d2c4517)</ept>.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Resume">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>Starts the execution of the workflow instance.</source>
          <target state="translated">Inicia la ejecución de la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> calls <ph id="ph2">&lt;xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A&gt;</ph> on the root activity of this workflow instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> llama <ph id="ph2">&lt;xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A&gt;</ph> en la actividad raíz de esta instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>If <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> encounters an exception, it terminates the workflow instance by calling <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> with the <ph id="ph3">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the exception passed as the reason for the termination.</source>
          <target state="translated">Si <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> se encuentra con una excepción, finaliza la instancia de flujo de trabajo llamando <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> con la propiedad <ph id="ph3">&lt;xref:System.Exception.Message%2A&gt;</ph> de la excepción pasada como la razón para la finalización.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>The following code example demonstrates how you can use the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> method to start a <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> in a workflow host.</source>
          <target state="translated">El ejemplo de código siguiente muestra cómo puede utilizar el método <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> para iniciar <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> en un host del flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>The code creates an instance of the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, adds services to the runtime, and then demonstrates the recommended way to create a <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El código crea una instancia de <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, agrega los servicios al tiempo de ejecución y, a continuación, muestra la manera recomendada de crear un objeto <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>It creates a <ph id="ph1">&lt;xref:System.Type&gt;</ph> object and casts it to one of the workflow objects with which the host is associated.</source>
          <target state="translated">Crea un objeto <ph id="ph1">&lt;xref:System.Type&gt;</ph> y lo convierte a uno de los objetos de flujo de trabajo a los cuales el host está asociado.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>The code next initializes <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> by calling the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A&gt;</ph> method and passing the previously created type to it.</source>
          <target state="translated">Después, el código inicializa <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> llamando al método <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A&gt;</ph> y pasándole el tipo previamente creado.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>The <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> is started with the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> method call.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> se inicia con la llamada al método <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>This code example is part of the Canceling a Workflow SDK sample from the Program.cs file.</source>
          <target state="translated">Este ejemplo de código forma parte de la muestra de SDK Cancelar un Flujo de trabajo, del archivo Program.cs.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>For more information, see <bpt id="p1">[</bpt>Canceling a Workflow<ept id="p1">](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>cancelar un flujo de trabajo<ept id="p1">](http://msdn.microsoft.com/library/d5077f56-a78b-48e7-825c-f6c77c8e54fb)</ept>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>-or-</source>
          <target state="translated">O bien</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Start">
          <source>The workflow instance has already been started.</source>
          <target state="translated">Ya se ha iniciado la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
          <source>A description of the reason for suspending the workflow instance.</source>
          <target state="translated">Una descripción de la razón para suspender la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
          <source>Suspends the workflow instance.</source>
          <target state="translated">Suspende la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
          <source>The workflow instance is suspended in a synchronous manner.</source>
          <target state="translated">La instancia de flujo de trabajo se suspende de una manera sincrónica.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
          <source>If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended&gt;</ph> event and passes <ph id="ph2">`reason`</ph> in a <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ph>.</source>
          <target state="translated">Si se ya se ha suspendido la instancia de flujo de trabajo, no se realiza ninguna acción; de lo contrario, el motor en tiempo de ejecución de flujo de trabajo suspende la instancia de flujo de trabajo, genera el evento <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended&gt;</ph> y pasa <ph id="ph2">`reason`</ph> en <ph id="ph3">&lt;xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A&gt;</ph> does not unload the workflow instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A&gt;</ph> no descarga la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
          <source>The following code example demonstrates calling Suspend on a <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El ejemplo de código siguiente muestra cómo se llama a Suspender en un objeto <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>A description of the reason for terminating the workflow instance.</source>
          <target state="translated">Una descripción de la razón para finalizar la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>Terminates the workflow instance in a synchronous manner.</source>
          <target state="translated">Finaliza la instancia de flujo de trabajo de una forma sincrónica.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>The workflow instance is terminated in a synchronous manner.</source>
          <target state="translated">La instancia de flujo de trabajo se finaliza de una forma sincrónica.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>The host calls <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> to terminate the workflow instance.</source>
          <target state="translated">El host llama a <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> para finalizar la instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo borra la instancia de flujo de trabajo en memoria e informa al servicio de persistencia que se ha borrado la instancia de la memoria.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>For the <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph>, this means that all state information for that workflow instance is deleted from the database upon termination.</source>
          <target state="translated">Para <ph id="ph1">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph>, esto significa que toda la información de estado para esa instancia de flujo de trabajo se elimina de la base de datos cuando se termina.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>You will not be able to reload the workflow instance from a previously stored persistence point.</source>
          <target state="translated">No podrá recargar la instancia de flujo de trabajo de un punto de persistencia previamente almacenado.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the <ph id="ph1">`Terminate`</ph> method raises the <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated&gt;</ph> event and passes <ph id="ph3">`reason`</ph> in the <ph id="ph4">&lt;xref:System.Exception.Message%2A&gt;</ph> property of a <ph id="ph5">&lt;xref:System.Workflow.ComponentModel.WorkflowTerminatedException&gt;</ph> contained in the <ph id="ph6">&lt;xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ph>.</source>
          <target state="translated">Una vez borrada la instancia de flujo de trabajo en memoria y se informa al servicio de persistencia de la finalización, el método <ph id="ph1">`Terminate`</ph> genera el evento <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated&gt;</ph> y pasa <ph id="ph3">`reason`</ph> en la propiedad <ph id="ph4">&lt;xref:System.Exception.Message%2A&gt;</ph> de <ph id="ph5">&lt;xref:System.Workflow.ComponentModel.WorkflowTerminatedException&gt;</ph> contenida en <ph id="ph6">&lt;xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source><ph id="ph1">`Terminate`</ph> is different from <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A&gt;</ph> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, <ph id="ph3">`Abort`</ph> simply clears the in-memory workflow instance, which can then be restarted from the last persistence point.</source>
          <target state="translated"><ph id="ph1">`Terminate`</ph> es diferente de <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A&gt;</ph> en que Finalizar borra la instancia de flujo de trabajo en memoria e informa al servicio de persistencia de la finalización, <ph id="ph3">`Abort`</ph> simplemente borra la instancia de flujo de trabajo en memoria, que puede reiniciarse a continuación desde el último punto de persistencia.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>The following code example demonstrates calling Terminate on a <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El ejemplo de código siguiente muestra cómo se llama a Terminar en un objeto <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)">
          <source>The workflow runtime engine is not running.</source>
          <target state="translated">El motor en tiempo de ejecución de flujo de trabajo no está en ejecución.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.</source>
          <target state="translated">Descarga la instancia de flujo de trabajo de la memoria al almacén de persistencia cuando la instancia se suspende o está inactiva.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the workflow instance was unloaded; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si se descargara la instancia de flujo de trabajo; de lo contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>If the workflow instance is idle or suspended, <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> uses the persistence service to remove the workflow instance from memory and persist it to a data store.</source>
          <target state="translated">Si la instancia de flujo de trabajo está inactiva o suspendida, <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> utiliza el servicio de persistencia para quitar la instancia de flujo de trabajo de la memoria y conservarla en un almacén de datos.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>If there is no persistence service registered with the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si no hay ningún servicio de persistencia registrado con <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> inicia <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>If the workflow instance is successfully persisted, the runtime raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded&gt;</ph> event, and returns <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Si la instancia de flujo de trabajo se almacena correctamente, el tiempo de ejecución genera el <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded&gt;</ph> evento y devuelve <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> returns <ph id="ph2">`false`</ph> if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> Devuelve <ph id="ph2">`false`</ph> si la instancia de flujo de trabajo ya se ha descargado, ha terminado, se ha anulado o ya se ha completado.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>The host can use <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> to reclaim system resources from an idle workflow.</source>
          <target state="translated">El host puede utilizar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> para reclamar los recursos del sistema de un flujo de trabajo inactivo.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>The following example demonstrates using the TryUnload method to unload a workflow when the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled&gt;</ph> event fires.</source>
          <target state="translated">El ejemplo siguiente muestra cómo utilizar el método TryUnload para descargar un flujo de trabajo cuando se desencadena el evento <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>This example is from the Using Persistence Services SDK sample, from the Program.cs file.</source>
          <target state="translated">Este ejemplo pertenece a la muestra de SDK de Utilizar Servicios de Persistencia, del archivo Program.cs.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>For more information, see <bpt id="p1">[</bpt>Using Persistence Services Sample<ept id="p1">](http://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6)</ept>.</source>
          <target state="translated">Para obtener más información, consulte <bpt id="p1">[</bpt>ejemplo de uso de servicios de persistencia<ept id="p1">](http://msdn.microsoft.com/library/3176b7e7-ae49-4d5c-802b-85032d6ebde6)</ept>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.TryUnload">
          <source>There is no persistence service registered with the workflow runtime engine.</source>
          <target state="translated">No hay ningún servicio de persistencia registrado con el motor en tiempo de ejecución de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>Unloads the workflow instance from memory to the persistence store.</source>
          <target state="translated">Descarga la instancia de flujo de trabajo desde la memoria al almacén de persistencia.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.</source>
          <target state="translated">Esta llamada se bloquea hasta que finalice el trabajo actualmente programado o hasta el final de un ámbito de transacción.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> is synchronous; that is, it returns after completing any action that it performs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> es sincrónica; es decir, se devuelve después de completar cualquier acción que realice.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>If the workflow instance is not idle, the runtime waits until the instance can be interrupted.</source>
          <target state="translated">Si la instancia de flujo de trabajo no está inactiva, el motor en tiempo de ejecución espera hasta que se pueda interrumpir la instancia.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <ph id="ph1">&lt;xref:System.Workflow.ComponentModel.Activity.Execute%2A&gt;</ph> method.</source>
          <target state="translated">Sólo se puede interrumpir una instancia una vez finalizado el elemento de trabajo actualmente programado. Generalmente, esto se produce cuando la Actividad actualmente en ejecución vuelve de su método <ph id="ph1">&lt;xref:System.Workflow.ComponentModel.Activity.Execute%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>However, if the instance is executing a <ph id="ph1">&lt;xref:System.Workflow.ComponentModel.TransactionScopeActivity&gt;</ph>, the transaction scope must complete execution before the instance can be interrupted.</source>
          <target state="translated">Sin embargo, si la instancia está ejecutando una <ph id="ph1">&lt;xref:System.Workflow.ComponentModel.TransactionScopeActivity&gt;</ph>, el ámbito de transacción debe completar la ejecución antes de que se pueda interrumpir la instancia.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store.</source>
          <target state="translated">A continuación, la descarga utiliza el servicio de persistencia para quitar la instancia de flujo de trabajo de la memoria y lo conserva en un almacén de datos.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>If there is no persistence service registered with the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">Si no hay ningún servicio de persistencia registrado con <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> inicia <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>If the workflow instance is successfully persisted, the runtime raises the <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded&gt;</ph> event.</source>
          <target state="translated">Si se conserva la instancia de flujo de trabajo correctamente, el tiempo de ejecución genera el evento <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>The host can use <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> to reclaim system resources from an idle workflow.</source>
          <target state="translated">El host puede utilizar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> para reclamar los recursos del sistema de un flujo de trabajo inactivo.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>The following example demonstrates calling <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> on a <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">En el siguiente ejemplo se muestra cómo llamar <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> en un objeto <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Workflow.Runtime.WorkflowInstance.Unload">
          <source>There is no persistence service registered with the workflow runtime engine.</source>
          <target state="translated">No hay ningún servicio de persistencia registrado con el motor en tiempo de ejecución de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime">
          <source>Gets the <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowRuntime" /&gt;</ph> for this workflow instance.</source>
          <target state="translated">Obtiene el estado de <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowRuntime" /&gt;</ph> para esta instancia de flujo de trabajo.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime">
          <source>A <ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowRuntime" /&gt;</ph> that represents the execution environment in which this workflow instance is running.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Workflow.Runtime.WorkflowRuntime" /&gt;</ph> que representa el entorno de ejecución en el que esta instancia de flujo de trabajo se está ejecutando.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime">
          <source>The following example demonstrates accessing the executing <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph> of a <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> object.</source>
          <target state="translated">El ejemplo siguiente muestra cómo tener acceso a la ejecución <ph id="ph1">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph> de un <ph id="ph2">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> objeto.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>