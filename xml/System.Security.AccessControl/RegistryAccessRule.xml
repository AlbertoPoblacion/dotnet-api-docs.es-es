<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="62c3253705ce2579586fdcfa198c3e0977ef242d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30490449" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa un conjunto de derechos de acceso concedidos o denegados para un usuario o grupo. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Security.AccessControl.RegistryAccessRule> clase es parte de un conjunto de clases que .NET Framework proporciona para administrar la seguridad de control de acceso de Windows en claves del registro. Para obtener información general de estas clases y su relación con las estructuras de control de acceso de Windows subyacentes, vea <xref:System.Security.AccessControl.RegistrySecurity>.  
  
> [!NOTE]
>  Seguridad de control de acceso de Windows solo puede aplicarse a las claves del registro. No se puede aplicar a pares de clave/valor individuales almacenados en una clave.  
  
 Para obtener una lista de las reglas que se aplican actualmente a una clave del registro, use el <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> método para obtener un <xref:System.Security.AccessControl.RegistrySecurity> objeto y, a continuación, usar su <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> método para obtener una colección de <xref:System.Security.AccessControl.RegistryAccessRule> objetos.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> objetos no se asignan uno a uno con entradas de control de acceso en la lista de acceso de control discrecional (DACL) subyacente. Cuando obtiene el conjunto de todas las reglas de acceso para una clave del registro, el conjunto contiene el número mínimo de reglas actualmente necesarias para expresar todas las entradas de control de acceso.  
  
> [!NOTE]
>  Las entradas de control de acceso subyacentes cambian al aplicar y quitar las reglas. La información de las reglas se combina si es posible, para mantener el menor número de entradas de control de acceso. Por lo tanto, al leer la lista actual de reglas, no podría ser exactamente igual que la lista de todas las reglas que ha agregado.  
  
 Use <xref:System.Security.AccessControl.RegistryAccessRule> objetos para especificar los derechos de acceso para permitir o denegar a un usuario o grupo. Un <xref:System.Security.AccessControl.RegistryAccessRule> objeto siempre representa permite acceso o deniega el acceso, nunca ambos.  
  
 Para aplicar una regla a una clave del registro, utilice la <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> método para obtener la <xref:System.Security.AccessControl.RegistrySecurity> objeto. Modificar el <xref:System.Security.AccessControl.RegistrySecurity> objeto mediante el uso de sus métodos para agregar la regla y, a continuación, usar el <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> método para volver a adjuntar el objeto de seguridad.  
  
> [!IMPORTANT]
>  Cambios realizados en un <xref:System.Security.AccessControl.RegistrySecurity> objeto no afectan a los niveles de acceso de la clave del registro hasta que llame a la <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> método para asignar el objeto de seguridad alterado a la clave del registro.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> los objetos son inmutables. Seguridad de una clave del registro se modifica utilizando los métodos de la <xref:System.Security.AccessControl.RegistrySecurity> clase para agregar o quitar reglas; tal y como lo hace, se modifican las entradas de control de acceso subyacentes.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra las reglas de acceso con herencia y propagación. El ejemplo se crea un <xref:System.Security.AccessControl.RegistrySecurity> objeto, a continuación, crea y agrega dos reglas que tienen el <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> marca. La primera regla no tiene ningún indicadores de propagación, mientras la segunda tiene <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> y <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 El programa muestra las reglas en la <xref:System.Security.AccessControl.RegistrySecurity> del objeto y, a continuación, utiliza el objeto para crear una subclave. El programa crea a un elemento secundario subclave y una una subclave y, a continuación, muestra la seguridad para cada subclave. Por último, el programa elimina las claves de prueba.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.AccessControl.RegistryAccessRule" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Usuario o grupo al que se aplica la regla. Debe ser de tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> o de un tipo que, como <see cref="T:System.Security.Principal.NTAccount" />, se pueda convertir al tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Combinación bit a bit de valores de <see cref="T:System.Security.AccessControl.RegistryRights" /> que indica los derechos concedidos o denegados.</param>
        <param name="type">Uno de los valores de <see cref="T:System.Security.AccessControl.AccessControlType" /> que indica si se conceden o deniegan los derechos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.AccessControl.RegistryAccessRule" />, que especifica el usuario o grupo al que se aplica la regla, los derechos de acceso y si se conceden o deniegan los derechos de acceso especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor especifica la herencia y propagación de forma predeterminada. Es decir, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> y <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> especifica un valor no válido.  
  
 O bien  
  
 <paramref name="type" /> especifica un valor no válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> es <see langword="null" />.  
  
 O bien  
  
 <paramref name="eventRights" /> es cero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> no es de tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />, ni de un tipo que, como <see cref="T:System.Security.Principal.NTAccount" />, se pueda convertir al tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nombre del usuario o grupo al que se aplica la regla.</param>
        <param name="registryRights">Combinación bit a bit de valores de <see cref="T:System.Security.AccessControl.RegistryRights" /> que indica los derechos concedidos o denegados.</param>
        <param name="type">Uno de los valores de <see cref="T:System.Security.AccessControl.AccessControlType" /> que indica si se conceden o deniegan los derechos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.AccessControl.RegistryAccessRule" />, que especifica el nombre del usuario o grupo al que se aplica la regla, los derechos de acceso y si se conceden o deniegan los derechos de acceso especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor especifica la herencia y propagación de forma predeterminada. Es decir, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> y <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 Este constructor es equivalente a crear una <xref:System.Security.Principal.NTAccount> objeto, pasando `identity` a la <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> constructor y pasar el recién creado <xref:System.Security.Principal.NTAccount> el objeto a la <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea reglas de acceso del registro y se agregan a un <xref:System.Security.AccessControl.RegistrySecurity> objeto y muestra cómo las reglas que conceden y deniegan derechos permanecen aparte, mientras las reglas compatibles del mismo tipo se combina.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> especifica un valor no válido.  
  
 O bien  
  
 <paramref name="type" /> especifica un valor no válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="registryRights" /> es cero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> es <see langword="null" />.  
  
 O bien  
  
 <paramref name="identity" /> es una cadena de longitud cero.  
  
 O bien  
  
 <paramref name="identity" /> tiene más de 512 caracteres.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Usuario o grupo al que se aplica la regla. Debe ser de tipo <see cref="T:System.Security.Principal.SecurityIdentifier" /> o de un tipo que, como <see cref="T:System.Security.Principal.NTAccount" />, se pueda convertir al tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Combinación bit a bit de valores de <see cref="T:System.Security.AccessControl.RegistryRights" /> que especifica los derechos concedidos o denegados.</param>
        <param name="inheritanceFlags">Combinación bit a bit de marcadores <see cref="T:System.Security.AccessControl.InheritanceFlags" /> que especifica cómo se heredan los derechos de acceso de otros objetos.</param>
        <param name="propagationFlags">Combinación bit a bit de marcadores <see cref="T:System.Security.AccessControl.PropagationFlags" /> que especifica cómo se propagan los derechos de acceso a otros objetos.</param>
        <param name="type">Uno de los valores de <see cref="T:System.Security.AccessControl.AccessControlType" /> que especifica si se conceden o deniegan los derechos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.AccessControl.RegistryAccessRule" />, que especifica el usuario o grupo al que se aplica la regla, los derechos de acceso, los marcadores de herencia y de propagación, y si se conceden o deniegan los derechos de acceso especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas las claves del registro son contenedores, por lo que es la única marca de herencia que es significativa para las claves del registro la <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> marca. Si no se especifica este marcador, los indicadores de propagación se omiten y se ve afectada sólo la clave inmediata. Si el indicador está presente, la regla se propaga como se muestra en la tabla siguiente. La tabla se da por supuesto que hay una subclave S con una subclave CS secundaria y una subclave GS. Es decir, la ruta de acceso para la segunda subclave S\CS\GS.  
  
|Indicadores de propagación|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 El modelo para la segunda subclave secundaria rige todas las subclaves contenidas en esa segunda subclave.  
  
 Por ejemplo, si la <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> marca se especifica para `inheritanceFlags` y <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> se especifica la marca de propagación para `propagationFlags`, esta regla no se aplica a la subclave inmediata, pero se aplican a todas sus subclaves secundarias inmediatas y a todas las subclaves que contienen.  
  
> [!NOTE]
>  Aunque se puede especificar el <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> una marca para `inheritanceFlags`, no hay ningún punto de hacerlo. Para los fines de control de acceso, los pares de nombre/valor de una subclave no son objetos independientes. Los derechos de acceso a los pares de nombre/valor son controlados por los derechos de la subclave. Además, dado que todas las subclaves son contenedores (es decir, pueden contener otras subclaves), no se ven afectados por la <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> marca. Por último, especificar el <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> marca complica de manera innecesaria el mantenimiento de reglas, puesto que interfiere con la combinación de las reglas de otro modo serían compatibles.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> especifica un valor no válido.  
  
 O bien  
  
 <paramref name="type" /> especifica un valor no válido.  
  
 O bien  
  
 <paramref name="inheritanceFlags" /> especifica un valor no válido.  
  
 O bien  
  
 <paramref name="propagationFlags" /> especifica un valor no válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> es <see langword="null" />.  
  
 O bien  
  
 <paramref name="registryRights" /> es cero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> no es de tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />, ni de un tipo que, como <see cref="T:System.Security.Principal.NTAccount" />, se pueda convertir al tipo <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Nombre del usuario o grupo al que se aplica la regla.</param>
        <param name="registryRights">Combinación bit a bit de valores de <see cref="T:System.Security.AccessControl.RegistryRights" /> que indica los derechos concedidos o denegados.</param>
        <param name="inheritanceFlags">Combinación bit a bit de marcadores <see cref="T:System.Security.AccessControl.InheritanceFlags" /> que especifica cómo se heredan los derechos de acceso de otros objetos.</param>
        <param name="propagationFlags">Combinación bit a bit de marcadores <see cref="T:System.Security.AccessControl.PropagationFlags" /> que especifica cómo se propagan los derechos de acceso a otros objetos.</param>
        <param name="type">Uno de los valores de <see cref="T:System.Security.AccessControl.AccessControlType" /> que especifica si se conceden o deniegan los derechos.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.AccessControl.RegistryAccessRule" />, que especifica el nombre del usuario o grupo al que se aplica la regla, los derechos de acceso, los marcadores de herencia y de propagación y si se conceden o deniegan los derechos de acceso especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas las claves del registro son contenedores, por lo que es la única marca de herencia que es significativa para las claves del registro la <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> marca. Si no se especifica este marcador, los indicadores de propagación se omiten y se ve afectada sólo la clave inmediata. Si el indicador está presente, la regla se propaga como se muestra en la tabla siguiente. La tabla se da por supuesto que hay una subclave S con una subclave CS secundaria y una subclave GS. Es decir, la ruta de acceso para la segunda subclave S\CS\GS.  
  
|Indicadores de propagación|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 El modelo para la segunda subclave secundaria rige todas las subclaves contenidas en esa segunda subclave.  
  
 Por ejemplo, si la <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> marca se especifica para `inheritanceFlags` y <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> se especifica la marca de propagación para `propagationFlags`, esta regla no se aplica a la subclave inmediata, pero se aplican a todas sus subclaves secundarias inmediatas y a todas las subclaves que contienen.  
  
> [!NOTE]
>  Aunque se puede especificar el <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> una marca para `inheritanceFlags`, no hay ningún punto de hacerlo. Para los fines de control de acceso, los pares de nombre/valor de una subclave no son objetos independientes. Los derechos de acceso a los pares de nombre/valor son controlados por los derechos de la subclave. Además, dado que todas las subclaves son contenedores (es decir, pueden contener otras subclaves), no se ven afectados por la <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> marca. Por último, especificar el <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> marca complica de manera innecesaria el mantenimiento de reglas, puesto que interfiere con la combinación de las reglas de otro modo serían compatibles.  
  
 Este constructor es equivalente a crear una <xref:System.Security.Principal.NTAccount> objeto, pasando `identity` a la <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> constructor y pasar el recién creado <xref:System.Security.Principal.NTAccount> el objeto a la <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra las reglas de acceso con herencia y propagación. El ejemplo se crea un <xref:System.Security.AccessControl.RegistrySecurity> objeto y, a continuación, crea y agrega dos reglas que tienen el <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> marca. La primera regla no tiene ningún indicadores de propagación, mientras la segunda tiene <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> y <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 El programa muestra las reglas en la <xref:System.Security.AccessControl.RegistrySecurity> objeto y, a continuación, utiliza el <xref:System.Security.AccessControl.RegistrySecurity> objeto que se va a crear una subclave. El programa crea a un elemento secundario subclave y una una subclave y, a continuación, muestra las reglas para cada subclave. Por último, el programa elimina las claves de prueba.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="registryRights" /> especifica un valor no válido.  
  
 O bien  
  
 <paramref name="type" /> especifica un valor no válido.  
  
 O bien  
  
 <paramref name="inheritanceFlags" /> especifica un valor no válido.  
  
 O bien  
  
 <paramref name="propagationFlags" /> especifica un valor no válido.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eventRights" /> es cero.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> es <see langword="null" />.  
  
 O bien  
  
 <paramref name="identity" /> es una cadena de longitud cero.  
  
 O bien  
  
 <paramref name="identity" /> tiene más de 512 caracteres.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los derechos concedidos o denegados por la regla de acceso.</summary>
        <value>Combinación bit a bit de valores <see cref="T:System.Security.AccessControl.RegistryRights" /> que indica los derechos concedidos o denegados mediante la regla de acceso.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> los objetos son inmutables. Puede crear una nueva regla de acceso que representa un usuario diferente, derechos diferentes u otra <xref:System.Security.AccessControl.AccessControlType>, pero no se puede modificar una regla de acceso existente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>