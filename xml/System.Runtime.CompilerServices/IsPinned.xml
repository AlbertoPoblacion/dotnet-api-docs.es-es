<Type Name="IsPinned" FullName="System.Runtime.CompilerServices.IsPinned">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="502eed1d76224f206754bfb65513bda10fe3dcce" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsPinned" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsPinned extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsPinned" />
  <TypeSignature Language="VB.NET" Value="Public Class IsPinned" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsPinned abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="845cf-101">Indica que una instancia modificada se ancla en memoria.</span>
      <span class="sxs-lookup">
        <span data-stu-id="845cf-101">Indicates that a modified instance is pinned in memory.</span>
      </span>
      <span data-ttu-id="845cf-102">Esta clase no puede heredarse.</span>
      <span class="sxs-lookup">
        <span data-stu-id="845cf-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="845cf-103">Los compiladores emiten modificadores personalizados dentro de los metadatos para cambiar la manera en que el compilador de just-in-time (JIT) administra los valores cuando el comportamiento predeterminado no es adecuado.</span><span class="sxs-lookup"><span data-stu-id="845cf-103">Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.</span></span>  <span data-ttu-id="845cf-104">Cuando el compilador JIT encuentra un modificador personalizado, controla el valor de la manera que especifica el modificador.</span><span class="sxs-lookup"><span data-stu-id="845cf-104">When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.</span></span>  <span data-ttu-id="845cf-105">Compiladores pueden aplicar modificadores personalizados a métodos, parámetros y valores devueltos.</span><span class="sxs-lookup"><span data-stu-id="845cf-105">Compilers can apply custom modifiers to methods, parameters, and return values.</span></span>  <span data-ttu-id="845cf-106">El compilador JIT debe responder a los modificadores requeridos pero puede pasar por alto los modificadores opcionales.</span><span class="sxs-lookup"><span data-stu-id="845cf-106">The JIT compiler must respond to required modifiers but can ignore optional modifiers.</span></span>  <span data-ttu-id="845cf-107">Un compilador de C++ podría emitir un modificador personalizado para describir cómo debe tratarse un byte en casos donde el compilador JIT trata los bytes de una manera que no es compatible con C++ de forma predeterminada.</span><span class="sxs-lookup"><span data-stu-id="845cf-107">A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default.</span></span>  
  
 <span data-ttu-id="845cf-108">Puede emitir modificadores personalizados en los metadatos utilizando una de las técnicas siguientes:</span><span class="sxs-lookup"><span data-stu-id="845cf-108">You can emit custom modifiers into metadata using one of the following techniques:</span></span>  
  
-   <span data-ttu-id="845cf-109">Uso de métodos en el <xref:System.Reflection.Emit.TypeBuilder> clase como <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, y <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span><span class="sxs-lookup"><span data-stu-id="845cf-109">Using methods in the <xref:System.Reflection.Emit.TypeBuilder> class such as <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, and <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.</span></span>  
  
-   <span data-ttu-id="845cf-110">Generar un archivo de instrucciones de lenguaje intermedio (MSIL) de Microsoft que contenga llamadas a `modopt` y `modreq`y ensamblando el archivo con el [Ilasm.exe (ensamblador de IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span><span class="sxs-lookup"><span data-stu-id="845cf-110">Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to `modopt` and `modreq`, and assembling the file with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
-   <span data-ttu-id="845cf-111">Uso de la API de reflexión no administrada.</span><span class="sxs-lookup"><span data-stu-id="845cf-111">Using the unmanaged reflection API.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="845cf-112">En el ejemplo siguiente se muestra cómo emitir una <xref:System.Runtime.CompilerServices.IsPinned> objeto en un ensamblado utilizando la reflexión.</span><span class="sxs-lookup"><span data-stu-id="845cf-112">The following example demonstrates how to emit an <xref:System.Runtime.CompilerServices.IsPinned> object into an assembly using reflection.</span></span>  
  
 [!code-cpp[Runtime.CompilerServices.IsPinned#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsPinned/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>