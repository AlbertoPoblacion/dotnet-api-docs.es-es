<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d9da23e46abca945ab08d35ba7f1bfa23870ae72" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36636874" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <TypeSignature Language="VB.NET" Value="Public Class IsLong" />
  <TypeSignature Language="C++ CLI" Value="public ref class IsLong abstract sealed" />
  <TypeSignature Language="F#" Value="type IsLong = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Indica que un entero modificado es un valor <see langword="long" /> de C++ estándar. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El estándar de C++ indica que un `long` valor y un valor entero son tipos distintos.  Sin embargo, se representan mediante `ELEMENT_TYPE_I4` en un ensamblado.  Para distinguir un `long` de un entero en C++, el compilador de Microsoft C++ agrega el <xref:System.Runtime.CompilerServices.IsLong> modificador en cualquier instancia de un `long` cuando la instancia es emite.  Este proceso es muy importante para mantener la seguridad de tipos de nivel de lenguaje.  
  
 Los compiladores emiten modificadores personalizados dentro de los metadatos para cambiar la manera en que el compilador de just-in-time (JIT) administra los valores cuando el comportamiento predeterminado no es adecuado.  Cuando el compilador JIT encuentra un modificador personalizado, controla el valor de la manera que especifica el modificador.  Compiladores pueden aplicar modificadores personalizados a métodos, parámetros y valores devueltos.  El compilador JIT debe responder a los modificadores requeridos pero puede pasar por alto los modificadores opcionales.  
  
 Puede emitir modificadores personalizados en los metadatos utilizando una de las técnicas siguientes:  
  
-   Uso de métodos en el <xref:System.Reflection.Emit.TypeBuilder> clase como <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, y <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>.  
  
-   Generar un archivo de instrucciones de lenguaje intermedio (MSIL) de Microsoft que contenga llamadas a `modopt` y `modreq`y ensamblando el archivo con el [Ilasm.exe (ensamblador de IL)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  
  
-   Uso de la API de reflexión no administrada.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo emitir una <xref:System.Runtime.CompilerServices.IsLong> objeto en un ensamblado utilizando la reflexión.  
  
 [!code-cpp[Runtime.CompilerServices.IsLong#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>