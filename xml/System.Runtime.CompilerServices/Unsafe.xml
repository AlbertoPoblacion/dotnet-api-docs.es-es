<Type Name="Unsafe" FullName="System.Runtime.CompilerServices.Unsafe">
  <TypeSignature Language="C#" Value="public static class Unsafe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Unsafe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.Unsafe" />
  <TypeSignature Language="VB.NET" Value="Public Class Unsafe" />
  <TypeSignature Language="C++ CLI" Value="public ref class Unsafe abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="5c899-101">Contiene funciones genéricas de nivel bajo para manipular punteros.</span><span class="sxs-lookup"><span data-stu-id="5c899-101">Contains generic, low-level functionality for manipulating pointers.</span></span>
      </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, int elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-102">El tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-102">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-103">Referencia a la que se agregará el desplazamiento.</span><span class="sxs-lookup"><span data-stu-id="5c899-103">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="5c899-104">Desplazamiento que se va a sumar.</span><span class="sxs-lookup"><span data-stu-id="5c899-104">The offset to add.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-105">Agrega un desplazamiento de elemento a la referencia especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-105">Adds an element offset to the given reference.</span></span>
        </summary>
        <returns><span data-ttu-id="5c899-106">Nueva referencia que refleja la suma del desplazamiento al puntero.</span><span class="sxs-lookup"><span data-stu-id="5c899-106">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Add&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Add&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Add``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Add(T % source, IntPtr elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-107">El tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-107">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-108">Referencia a la que se agregará el desplazamiento.</span><span class="sxs-lookup"><span data-stu-id="5c899-108">The reference to add the offset to.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="5c899-109">Desplazamiento que se va a sumar.</span><span class="sxs-lookup"><span data-stu-id="5c899-109">The offset to add.</span></span></param>
        <summary><span data-ttu-id="5c899-110">Agrega un desplazamiento de elemento a la referencia especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-110">Adds an element offset to the given reference.</span></span></summary>
        <returns><span data-ttu-id="5c899-111">Nueva referencia que refleja la suma del desplazamiento al puntero.</span><span class="sxs-lookup"><span data-stu-id="5c899-111">A new reference that reflects the addition of offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AddByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AddByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AddByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AddByteOffset(T % source, IntPtr byteOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-112">El tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-112">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-113">Referencia a la que se agregará el desplazamiento.</span><span class="sxs-lookup"><span data-stu-id="5c899-113">The reference to add the offset to.</span></span></param>
        <param name="byteOffset"><span data-ttu-id="5c899-114">Desplazamiento que se va a sumar.</span><span class="sxs-lookup"><span data-stu-id="5c899-114">The offset to add.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-115">Agrega un desplazamiento de bytes a la referencia especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-115">Adds a byte offset to the given reference.</span></span>
        </summary>
        <returns><span data-ttu-id="5c899-116">Nueva referencia que refleja la suma del desplazamiento de bytes al puntero.</span><span class="sxs-lookup"><span data-stu-id="5c899-116">A new reference that reflects the addition of byte offset to pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreSame&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool AreSame&lt;T&gt; (ref T left, ref T right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreSame&lt;T&gt;(!!T&amp; left, !!T&amp; right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AreSame``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AreSame(Of T) (ByRef left As T, ByRef right As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool AreSame(T % left, T % right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="left" Type="T&amp;" RefType="ref" />
        <Parameter Name="right" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-117">El tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-117">The type of reference.</span></span></typeparam>
        <param name="left"><span data-ttu-id="5c899-118">Primera referencia que se comparará.</span><span class="sxs-lookup"><span data-stu-id="5c899-118">The first reference to compare.</span></span></param>
        <param name="right"><span data-ttu-id="5c899-119">Segunda referencia que se comparará.</span><span class="sxs-lookup"><span data-stu-id="5c899-119">The second reference to compare.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-120">Determina si las referencias especificadas apuntan a la misma ubicación.</span><span class="sxs-lookup"><span data-stu-id="5c899-120">Determines whether the specified references point to the same location.</span></span>
        </summary>
        <returns>
          <span data-ttu-id="5c899-121"><see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> apuntan a la misma ubicación; de lo contrario, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5c899-121"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> point to the same location; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T As&lt;T&gt; (object o) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T As&lt;class T&gt;(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of T As Class) (o As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T As(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-122">El tipo que el objeto se convertirán a.</span><span class="sxs-lookup"><span data-stu-id="5c899-122">The type which the object will be cast to.</span></span></typeparam>
        <param name="o"><span data-ttu-id="5c899-123">Objeto que se convertirá.</span><span class="sxs-lookup"><span data-stu-id="5c899-123">The object to cast.</span></span></param>
        <summary><span data-ttu-id="5c899-124">Convierte el objeto indicado al tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="5c899-124">Casts the given object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="5c899-125">Objeto original, convertido al tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="5c899-125">The original object, casted to the given type.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="As&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static TTo As&lt;TFrom,TTo&gt; (ref TFrom source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TTo As&lt;TFrom, TTo&gt;(!!TFrom&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.As``2(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function As(Of TFrom, TTo) (ByRef source As TFrom) As TTo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; static TTo % As(TFrom % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTo@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom" />
        <TypeParameter Name="TTo" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="TFrom&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="5c899-126">El tipo de referencia a reinterpretar...</span><span class="sxs-lookup"><span data-stu-id="5c899-126">The type of reference to reinterpret..</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="5c899-127">El tipo deseado de la referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-127">The desired type of the reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-128">Referencia que se reinterpretará.</span><span class="sxs-lookup"><span data-stu-id="5c899-128">The reference to reinterpret.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-129">Reinterpreta la referencia especificada como una referencia a un valor del tipo <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="5c899-129">Reinterprets the given reference as a reference to a value of type <typeparamref name="TTo" />.</span></span>
        </summary>
        <returns><span data-ttu-id="5c899-130">Referencia a un valor del tipo <typeparamref name="TTo" />.</span><span class="sxs-lookup"><span data-stu-id="5c899-130">A reference to a value of type <typeparamref name="TTo" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPointer&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void* AsPointer&lt;T&gt; (ref T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void* AsPointer&lt;T&gt;(!!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsPointer``1(``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void* AsPointer(T % value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void*</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-131">Tipo del objeto.</span><span class="sxs-lookup"><span data-stu-id="5c899-131">The type of object.</span></span></typeparam>
        <param name="value"><span data-ttu-id="5c899-132">Objeto cuyo puntero se obtendrá.</span><span class="sxs-lookup"><span data-stu-id="5c899-132">The object whose pointer is obtained.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-133">Devuelve un puntero al parámetro by-ref especificado.</span><span class="sxs-lookup"><span data-stu-id="5c899-133">Returns a pointer to the given by-ref parameter.</span></span>
        </summary>
        <returns><span data-ttu-id="5c899-134">Puntero al valor especificado.</span><span class="sxs-lookup"><span data-stu-id="5c899-134">A pointer to the given value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T AsRef&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.AsRef``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % AsRef(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-135">El tipo de la ubicación interpretado.</span><span class="sxs-lookup"><span data-stu-id="5c899-135">The type of the interpreted location.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-136">Ubicación del valor al que se hará referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-136">The location of the value to reference.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-137">Reinterpreta la ubicación especificada como una referencia a un valor del tipo <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="5c899-137">Reinterprets the given location as a reference to a value of type <typeparamref name="T" />.</span></span>
        </summary>
        <returns><span data-ttu-id="5c899-138">Referencia a un valor del tipo <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="5c899-138">A reference to a value of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr ByteOffset&lt;T&gt; (ref T origin, ref T target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ByteOffset&lt;T&gt;(!!T&amp; origin, !!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ByteOffset``1(``0@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ByteOffset(Of T) (ByRef origin As T, ByRef target As T) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static IntPtr ByteOffset(T % origin, T % target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="origin" Type="T&amp;" RefType="ref" />
        <Parameter Name="target" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-139">El tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-139">The type of reference.</span></span></typeparam>
        <param name="origin"><span data-ttu-id="5c899-140">Referencia de origen.</span><span class="sxs-lookup"><span data-stu-id="5c899-140">The reference to origin.</span></span></param>
        <param name="target"><span data-ttu-id="5c899-141">Referencia de destino.</span><span class="sxs-lookup"><span data-stu-id="5c899-141">The reference to target.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-142">Determina el desplazamiento de bytes desde el origen al destino a partir de las referencias especificadas.</span><span class="sxs-lookup"><span data-stu-id="5c899-142">Determines the byte offset from origin to target from the given references.</span></span>
        </summary>
        <returns><span data-ttu-id="5c899-143">Desplazamiento de bytes desde el origen al destino (es decir, <paramref name="target" /> - <paramref name="origin" />).</span><span class="sxs-lookup"><span data-stu-id="5c899-143">Byte offset from origin to target i.e. <paramref name="target" /> - <paramref name="origin" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (void* destination, ref T source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(void* destination, !!T&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(System.Void*,``0@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(void* destination, T % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-144">El tipo del valor que se va a copiar.</span><span class="sxs-lookup"><span data-stu-id="5c899-144">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="5c899-145">Ubicación donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-145">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="5c899-146">Referencia al valor que se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-146">A reference to the value to copy.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-147">Copia un valor del tipo <typeparamref name="T" /> en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-147">Copies a value of type <typeparamref name="T" /> to the given location.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Copy&lt;T&gt; (ref T destination, void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy&lt;T&gt;(!!T&amp; destination, void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Copy``1(``0@,System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Copy(T % destination, void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="T&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-148">El tipo del valor que se va a copiar.</span><span class="sxs-lookup"><span data-stu-id="5c899-148">The type of value to copy.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="5c899-149">Ubicación donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-149">The location to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="5c899-150">Puntero al valor que se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-150">A pointer to the value to copy.</span></span></param>
        <summary>
           <span data-ttu-id="5c899-151">Copia un valor del tipo <typeparamref name="T" /> en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-151">Copies a value of type <typeparamref name="T" /> to the given location.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlock (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5c899-152">Dirección de destino donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-152">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="5c899-153">Dirección de origen desde donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-153">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="5c899-154">Número de bytes que se van a copiar.</span><span class="sxs-lookup"><span data-stu-id="5c899-154">The number of bytes to copy.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-155">Copia bytes desde la dirección de origen a la dirección de destino.</span><span class="sxs-lookup"><span data-stu-id="5c899-155">Copies bytes from the source address to the destination address.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlock">
      <MemberSignature Language="C#" Value="public static void CopyBlock (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlock(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlock(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlock(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5c899-156">Dirección de destino donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-156">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="5c899-157">Dirección de origen desde donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-157">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="5c899-158">Número de bytes que se van a copiar.</span><span class="sxs-lookup"><span data-stu-id="5c899-158">The number of bytes to copy.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-159">Copia bytes desde la dirección de origen a la dirección de destino.</span><span class="sxs-lookup"><span data-stu-id="5c899-159">Copies bytes from the source address to the destination address.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (ref byte destination, ref byte source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(unsigned int8&amp; destination, unsigned int8&amp; source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Byte@,System.Byte@,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyBlockUnaligned (ByRef destination As Byte, ByRef source As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(System::Byte % destination, System::Byte % source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5c899-160">Dirección de destino donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-160">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="5c899-161">Dirección de origen desde donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-161">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="5c899-162">Número de bytes que se van a copiar.</span><span class="sxs-lookup"><span data-stu-id="5c899-162">The number of bytes to copy.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-163">Copia bytes desde la dirección de origen a la dirección de destino sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</span><span class="sxs-lookup"><span data-stu-id="5c899-163">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span>
          </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void CopyBlockUnaligned (void* destination, void* source, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyBlockUnaligned(void* destination, void* source, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(System.Void*,System.Void*,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyBlockUnaligned(void* destination, void* source, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="source" Type="System.Void*" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="5c899-164">Dirección de destino donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-164">The destination address to copy to.</span></span></param>
        <param name="source"><span data-ttu-id="5c899-165">Dirección de origen desde donde se copiará.</span><span class="sxs-lookup"><span data-stu-id="5c899-165">The source address to copy from.</span></span></param>
        <param name="byteCount"><span data-ttu-id="5c899-166">Número de bytes que se van a copiar.</span><span class="sxs-lookup"><span data-stu-id="5c899-166">The number of bytes to copy.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-167">Copia bytes desde la dirección de origen a la dirección de destino sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</span><span class="sxs-lookup"><span data-stu-id="5c899-167">Copies bytes from the source address to the destination address without assuming architecture dependent alignment of the addresses.</span></span>
          </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlock (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="5c899-168">Dirección del inicio del bloque de memoria que se inicializará.</span><span class="sxs-lookup"><span data-stu-id="5c899-168">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="5c899-169">Valor con el que se inicializará el bloque.</span><span class="sxs-lookup"><span data-stu-id="5c899-169">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="5c899-170">Número de bytes que se inicializarán.</span><span class="sxs-lookup"><span data-stu-id="5c899-170">The number of bytes to initialize.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-171">Inicializa un bloque de memoria en la ubicación indicada con un valor inicial especificado.</span><span class="sxs-lookup"><span data-stu-id="5c899-171">Initializes a block of memory at the given location with a given initial value.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlock">
      <MemberSignature Language="C#" Value="public static void InitBlock (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlock(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlock(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlock(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="5c899-172">Dirección del inicio del bloque de memoria que se inicializará.</span><span class="sxs-lookup"><span data-stu-id="5c899-172">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="5c899-173">Valor con el que se inicializará el bloque.</span><span class="sxs-lookup"><span data-stu-id="5c899-173">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="5c899-174">Número de bytes que se inicializarán.</span><span class="sxs-lookup"><span data-stu-id="5c899-174">The number of bytes to initialize.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-175">Inicializa un bloque de memoria en la ubicación indicada con un valor inicial especificado.</span><span class="sxs-lookup"><span data-stu-id="5c899-175">Initializes a block of memory at the given location with a given initial value.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (ref byte startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(unsigned int8&amp; startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Byte@,System.Byte,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InitBlockUnaligned (ByRef startAddress As Byte, value As Byte, byteCount As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(System::Byte % startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="5c899-176">Dirección del inicio del bloque de memoria que se inicializará.</span><span class="sxs-lookup"><span data-stu-id="5c899-176">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="5c899-177">Valor con el que se inicializará el bloque.</span><span class="sxs-lookup"><span data-stu-id="5c899-177">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="5c899-178">Número de bytes que se inicializarán.</span><span class="sxs-lookup"><span data-stu-id="5c899-178">The number of bytes to initialize.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-179">Inicializa un bloque de memoria en la ubicación indicada con un valor inicial especificado sin tener en cuenta la alineación dependiente de la arquitectura de la dirección.</span><span class="sxs-lookup"><span data-stu-id="5c899-179">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span>
          </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitBlockUnaligned">
      <MemberSignature Language="C#" Value="public static void InitBlockUnaligned (void* startAddress, byte value, uint byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InitBlockUnaligned(void* startAddress, unsigned int8 value, unsigned int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(System.Void*,System.Byte,System.UInt32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InitBlockUnaligned(void* startAddress, System::Byte value, System::UInt32 byteCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startAddress" Type="System.Void*" />
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="byteCount" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="startAddress"><span data-ttu-id="5c899-180">Dirección del inicio del bloque de memoria que se inicializará.</span><span class="sxs-lookup"><span data-stu-id="5c899-180">The address of the start of the memory block to initialize.</span></span></param>
        <param name="value"><span data-ttu-id="5c899-181">Valor con el que se inicializará el bloque.</span><span class="sxs-lookup"><span data-stu-id="5c899-181">The value to initialize the block to.</span></span></param>
        <param name="byteCount"><span data-ttu-id="5c899-182">Número de bytes que se inicializarán.</span><span class="sxs-lookup"><span data-stu-id="5c899-182">The number of bytes to initialize.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-183">Inicializa un bloque de memoria en la ubicación indicada con un valor inicial especificado sin tener en cuenta la alineación dependiente de la arquitectura de la dirección.</span><span class="sxs-lookup"><span data-stu-id="5c899-183">Initializes a block of memory at the given location with a given initial value without assuming architecture dependent alignment of the address.</span></span>
          </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Read``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T Read(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-184">El tipo que se leerá.</span><span class="sxs-lookup"><span data-stu-id="5c899-184">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-185">Ubicación desde donde se leerá.</span><span class="sxs-lookup"><span data-stu-id="5c899-185">The location to read from.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-186">Lee un valor del tipo <typeparamref name="T" /> desde la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-186">Reads a value of type <typeparamref name="T" /> from the given location.</span></span>
         </summary>
        <returns><span data-ttu-id="5c899-187">Objeto del tipo <typeparamref name="T" /> leído desde la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-187">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (ref byte source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(unsigned int8&amp; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadUnaligned(Of T) (ByRef source As Byte) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(System::Byte % source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-188">El tipo que se leerá.</span><span class="sxs-lookup"><span data-stu-id="5c899-188">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-189">Ubicación desde donde se leerá.</span><span class="sxs-lookup"><span data-stu-id="5c899-189">The location to read from.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-190">Lee un valor del tipo <typeparamref name="T" /> desde la ubicación especificada sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</span><span class="sxs-lookup"><span data-stu-id="5c899-190">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span>
          </summary>
        <returns><span data-ttu-id="5c899-191">Objeto del tipo <typeparamref name="T" /> leído desde la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-191">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T ReadUnaligned&lt;T&gt; (void* source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T ReadUnaligned&lt;T&gt;(void* source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.ReadUnaligned``1(System.Void*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T ReadUnaligned(void* source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Void*" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-192">El tipo que se leerá.</span><span class="sxs-lookup"><span data-stu-id="5c899-192">The type to read.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-193">Ubicación desde donde se leerá.</span><span class="sxs-lookup"><span data-stu-id="5c899-193">The location to read from.</span></span></param>
        <summary>
          <span data-ttu-id="5c899-194">Lee un valor del tipo <typeparamref name="T" /> desde la ubicación especificada sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</span><span class="sxs-lookup"><span data-stu-id="5c899-194">Reads a value of type <typeparamref name="T" /> from the given location without assuming architecture dependent alignment of the addresses.</span></span>
          </summary>
        <returns><span data-ttu-id="5c899-195">Objeto del tipo <typeparamref name="T" /> leído desde la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-195">An object of type <typeparamref name="T" /> read from the given location.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SizeOf``1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SizeOf(Of T) () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static int SizeOf();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-196">El tipo de objeto cuyo tamaño se recupera.</span><span class="sxs-lookup"><span data-stu-id="5c899-196">The type of object whose size is retrieved.</span></span></typeparam>
        <summary><span data-ttu-id="5c899-197">Devuelve el tamaño de un objeto del parámetro de tipo especificado.</span><span class="sxs-lookup"><span data-stu-id="5c899-197">Returns the size of an object of the given type parameter.</span></span></summary>
        <returns><span data-ttu-id="5c899-198">Tamaño del objeto del tipo <typeparamref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="5c899-198">The size of an object of type <typeparamref name="T" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, int elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, int32 elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, int elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-199">El tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-199">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-200">Referencia que se restará del desplazamiento.</span><span class="sxs-lookup"><span data-stu-id="5c899-200">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="5c899-201">Desplazamiento que se va a restar.</span><span class="sxs-lookup"><span data-stu-id="5c899-201">The offset to subtract.</span></span></param>
        <summary><span data-ttu-id="5c899-202">Resta un desplazamiento de elemento de la referencia especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-202">Subtracts an element offset from the given reference.</span></span></summary>
        <returns><span data-ttu-id="5c899-203">Nueva referencia que refleja la resta del desplazamiento del puntero.</span><span class="sxs-lookup"><span data-stu-id="5c899-203">A new reference that reflects the subraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Subtract&lt;T&gt; (ref T source, IntPtr elementOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Subtract&lt;T&gt;(!!T&amp; source, native int elementOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Subtract``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract(Of T) (ByRef source As T, elementOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % Subtract(T % source, IntPtr elementOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="elementOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-204">El tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-204">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-205">Referencia que se restará del desplazamiento.</span><span class="sxs-lookup"><span data-stu-id="5c899-205">The reference to subtract the offset from.</span></span></param>
        <param name="elementOffset"><span data-ttu-id="5c899-206">Desplazamiento que se va a restar.</span><span class="sxs-lookup"><span data-stu-id="5c899-206">The offset to subtract.</span></span></param>
        <summary>
        <span data-ttu-id="5c899-207">Resta un desplazamiento de elemento de la referencia especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-207">Subtracts an element offset from the given reference.</span></span>
        </summary>
        <returns><span data-ttu-id="5c899-208">Nueva referencia que refleja la resta del desplazamiento del puntero.</span><span class="sxs-lookup"><span data-stu-id="5c899-208">A new reference that reflects the subraction of offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractByteOffset&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T SubtractByteOffset&lt;T&gt; (ref T source, IntPtr byteOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T SubtractByteOffset&lt;T&gt;(!!T&amp; source, native int byteOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.SubtractByteOffset``1(``0@,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractByteOffset(Of T) (ByRef source As T, byteOffset As IntPtr) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % SubtractByteOffset(T % source, IntPtr byteOffset);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T@</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="T&amp;" RefType="ref" />
        <Parameter Name="byteOffset" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-209">El tipo de referencia.</span><span class="sxs-lookup"><span data-stu-id="5c899-209">The type of reference.</span></span></typeparam>
        <param name="source"><span data-ttu-id="5c899-210">Referencia que se restará del desplazamiento.</span><span class="sxs-lookup"><span data-stu-id="5c899-210">The reference to subtract the offset from.</span></span></param>
        <param name="bytesOffset"><span data-ttu-id="5c899-211">Desplazamiento que se va a restar.</span><span class="sxs-lookup"><span data-stu-id="5c899-211">The offset to subtract.</span></span></param>
        <param name="byteOffset">To be added.</param>
        <summary>
        <span data-ttu-id="5c899-212">Resta un desplazamiento de bytes de la referencia especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-212">Subtracts a byte offset from the given reference.</span></span>
        </summary>
        <returns><span data-ttu-id="5c899-213">Nueva referencia que refleja la resta del desplazamiento de bytes del puntero.</span><span class="sxs-lookup"><span data-stu-id="5c899-213">A new reference that reflects the subraction of byte offset from pointer.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.Write``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Write(void* destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-214">El tipo de valor que se escribirá.</span><span class="sxs-lookup"><span data-stu-id="5c899-214">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="5c899-215">Ubicación donde se escribirá.</span><span class="sxs-lookup"><span data-stu-id="5c899-215">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="5c899-216">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="5c899-216">The value to write.</span></span></param>
        <summary>
        <span data-ttu-id="5c899-217">Escribe un valor del tipo <typeparamref name="T" /> en la ubicación especificada.</span><span class="sxs-lookup"><span data-stu-id="5c899-217">Writes a value of type <typeparamref name="T" /> to the given location.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (ref byte destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(unsigned int8&amp; destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Byte@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteUnaligned(Of T) (ByRef destination As Byte, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(System::Byte % destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-218">El tipo de valor que se escribirá.</span><span class="sxs-lookup"><span data-stu-id="5c899-218">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="5c899-219">Ubicación donde se escribirá.</span><span class="sxs-lookup"><span data-stu-id="5c899-219">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="5c899-220">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="5c899-220">The value to write.</span></span></param>
        <summary>
        <span data-ttu-id="5c899-221">Escribe un valor del tipo <typeparamref name="T" /> en la ubicación especificada sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</span><span class="sxs-lookup"><span data-stu-id="5c899-221">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteUnaligned&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void WriteUnaligned&lt;T&gt; (void* destination, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteUnaligned&lt;T&gt;(void* destination, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.Unsafe.WriteUnaligned``1(System.Void*,``0)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void WriteUnaligned(void* destination, T value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.CompilerServices.Unsafe</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Void*" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="5c899-222">El tipo de valor que se escribirá.</span><span class="sxs-lookup"><span data-stu-id="5c899-222">The type of value to write.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="5c899-223">Ubicación donde se escribirá.</span><span class="sxs-lookup"><span data-stu-id="5c899-223">The location to write to.</span></span></param>
        <param name="value"><span data-ttu-id="5c899-224">Valor que se va a escribir.</span><span class="sxs-lookup"><span data-stu-id="5c899-224">The value to write.</span></span></param>
        <summary>
        <span data-ttu-id="5c899-225">Escribe un valor del tipo <typeparamref name="T" /> en la ubicación especificada sin tener en cuenta la alineación dependiente de la arquitectura de las direcciones.</span><span class="sxs-lookup"><span data-stu-id="5c899-225">Writes a value of type <typeparamref name="T" /> to the given location without assuming architecture dependent alignment of the addresses.</span></span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>