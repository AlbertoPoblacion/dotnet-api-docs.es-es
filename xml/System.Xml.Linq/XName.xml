<Type Name="XName" FullName="System.Xml.Linq.XName">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e3ff53886d4e9e6cdd7246f72367203e391a117f" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32088936" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XName : IEquatable&lt;System.Xml.Linq.XName&gt;, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit XName extends System.Object implements class System.IEquatable`1&lt;class System.Xml.Linq.XName&gt;, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Linq.XName" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XName&#xA;Implements IEquatable(Of XName), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XName sealed : IEquatable&lt;System::Xml::Linq::XName ^&gt;, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XDocument</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Linq</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xml.Linq.XName&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.KnownType(typeof(System.Xml.Linq.NameSerializer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5953a-101">Representa un nombre de un atributo o un elemento XML.</span>
      <span class="sxs-lookup">
        <span data-stu-id="5953a-101">Represents a name of an XML element or attribute.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-102">Los nombres XML incluyen un espacio de nombres y un nombre local.</span><span class="sxs-lookup"><span data-stu-id="5953a-102">XML names include a namespace and a local name.</span></span> <span data-ttu-id="5953a-103">A *nombre completo* es la combinación del espacio de nombres y el nombre local.</span><span class="sxs-lookup"><span data-stu-id="5953a-103">A *fully qualified name* is the combination of the namespace and local name.</span></span>  
  
## <a name="creating-an-xname-object"></a><span data-ttu-id="5953a-104">Creación de un objeto XName</span><span class="sxs-lookup"><span data-stu-id="5953a-104">Creating an XName Object</span></span>  
 <span data-ttu-id="5953a-105"><xref:System.Xml.Linq.XName> no contiene ningún constructor público.</span><span class="sxs-lookup"><span data-stu-id="5953a-105"><xref:System.Xml.Linq.XName> does not contain any public constructors.</span></span> <span data-ttu-id="5953a-106">En su lugar, esta clase proporciona una conversión implícita de <xref:System.String> que le permite crear un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-106">Instead, this class provides an implicit conversion from <xref:System.String> that allows you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-107">El lugar más comunes que se usa esta conversión es al construir un elemento o atributo: el primer argumento para el <xref:System.Xml.Linq.XElement> constructor es un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-107">The most common place you use this conversion is when constructing an element or attribute: The first argument to the <xref:System.Xml.Linq.XElement> constructor is an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-108">Pasando una cadena, aprovechar las ventajas de la conversión implícita.</span><span class="sxs-lookup"><span data-stu-id="5953a-108">By passing a string, you take advantage of the implicit conversion.</span></span> <span data-ttu-id="5953a-109">El código siguiente crea un elemento con un nombre que se encuentra en ningún espacio de nombres:</span><span class="sxs-lookup"><span data-stu-id="5953a-109">The following code creates an element with a name that is in no namespace:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
Console.WriteLine(root);  
```  
  
 <span data-ttu-id="5953a-110">En Visual Basic, es más adecuado usar literales XML:</span><span class="sxs-lookup"><span data-stu-id="5953a-110">In Visual Basic, it is more appropriate to use XML literals:</span></span>  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="5953a-111">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-111">This example produces the following output:</span></span>  
  
```xml  
<ElementName>content</ElementName>  
```  
  
 <span data-ttu-id="5953a-112">Asigne una cadena a un <xref:System.Xml.Linq.XName> usa la conversión implícita de <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="5953a-112">Assigning a string to an <xref:System.Xml.Linq.XName> uses the implicit conversion from <xref:System.String>.</span></span>  
  
 <span data-ttu-id="5953a-113">El ejemplo de Visual Basic se crea el <xref:System.Xml.Linq.XElement> utilizan literales XML.</span><span class="sxs-lookup"><span data-stu-id="5953a-113">The Visual Basic example creates the <xref:System.Xml.Linq.XElement> using XML literals.</span></span> <span data-ttu-id="5953a-114">Aunque se utilizan literales XML, un <xref:System.Xml.Linq.XName> objeto se crea para el <xref:System.Xml.Linq.XElement>.</span><span class="sxs-lookup"><span data-stu-id="5953a-114">Even though XML literals are used, an <xref:System.Xml.Linq.XName> object is created for the <xref:System.Xml.Linq.XElement>.</span></span>  
  
 <span data-ttu-id="5953a-115">Además, puede llamar a la <xref:System.Xml.Linq.XName.Get%2A> método para un <xref:System.Xml.Linq.XName> objeto.</span><span class="sxs-lookup"><span data-stu-id="5953a-115">In addition, you can call the <xref:System.Xml.Linq.XName.Get%2A> method for an <xref:System.Xml.Linq.XName> object.</span></span> <span data-ttu-id="5953a-116">Sin embargo, la manera recomendada es usar la conversión implícita de cadena.</span><span class="sxs-lookup"><span data-stu-id="5953a-116">However, the recommended way is to use the implicit conversion from string.</span></span>  
  
## <a name="creating-an-xname-in-a-namespace"></a><span data-ttu-id="5953a-117">Creación de un XName en un Namespace</span><span class="sxs-lookup"><span data-stu-id="5953a-117">Creating an XName in a Namespace</span></span>  
 <span data-ttu-id="5953a-118">Al igual que con XML, un <xref:System.Xml.Linq.XName> puede estar en un espacio de nombres, o puede estar en ningún espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="5953a-118">As with XML, an <xref:System.Xml.Linq.XName> can be in a namespace, or it can be in no namespace.</span></span>  
  
 <span data-ttu-id="5953a-119">En C#, el enfoque recomendado para crear un <xref:System.Xml.Linq.XName> en un espacio de nombres es declarar los <xref:System.Xml.Linq.XNamespace> de objeto, utilice la invalidación del operador de suma.</span><span class="sxs-lookup"><span data-stu-id="5953a-119">For C#, the recommended approach for creating an <xref:System.Xml.Linq.XName> in a namespace is to declare the <xref:System.Xml.Linq.XNamespace> object, then use the override of the addition operator.</span></span>  
  
 <span data-ttu-id="5953a-120">En Visual Basic, el enfoque recomendado es utilizar literales XML y declaraciones de espacio de nombres global para crear XML que se encuentra en un espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="5953a-120">For Visual Basic, the recommended approach is to use XML literals and global namespace declarations to create XML that is in a namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <ElementName>content</ElementName>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-121">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-121">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
## <a name="creating-an-xname-in-no-namespace"></a><span data-ttu-id="5953a-122">Creación de un XName en ningún Namespace</span><span class="sxs-lookup"><span data-stu-id="5953a-122">Creating an XName in no Namespace</span></span>  
 <span data-ttu-id="5953a-123">El <xref:System.Xml.Linq.XName.Namespace%2A> propiedad de un <xref:System.Xml.Linq.XName> se garantiza que el objeto no puede ser nulo.</span><span class="sxs-lookup"><span data-stu-id="5953a-123">The <xref:System.Xml.Linq.XName.Namespace%2A> property of an <xref:System.Xml.Linq.XName> object is guaranteed to not be null.</span></span> <span data-ttu-id="5953a-124">Si el <xref:System.Xml.Linq.XName> en ningún espacio de nombres, la <xref:System.Xml.Linq.XName.Namespace%2A> propiedad se establecerá en <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="5953a-124">If the <xref:System.Xml.Linq.XName> is in no namespace, then the <xref:System.Xml.Linq.XName.Namespace%2A> property will be set to <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span> <span data-ttu-id="5953a-125">El código siguiente se muestra cómo hacerlo:</span><span class="sxs-lookup"><span data-stu-id="5953a-125">The following code demonstrates this:</span></span>  
  
```csharp  
XElement root = new XElement("ElementName", "content");  
if (root.Name.Namespace == XNamespace.None)  
    Console.WriteLine("The element is in no namespace.");  
else  
    Console.WriteLine("The element is in a namespace.");  
```  
  
```vb  
Dim root As XElement = <ElementName>content</ElementName>  
If (root.Name.Namespace Is XNamespace.None) Then  
    Console.WriteLine("The element is in no namespace.")  
Else  
    Console.WriteLine("The element is in a namespace.")  
End If  
```  
  
 <span data-ttu-id="5953a-126">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-126">This example produces the following output:</span></span>  
  
```  
The element is in no namespace.  
```  
  
## <a name="using-expanded-names"></a><span data-ttu-id="5953a-127">Usar nombres expandidos</span><span class="sxs-lookup"><span data-stu-id="5953a-127">Using Expanded Names</span></span>  
 <span data-ttu-id="5953a-128">También puede crear un <xref:System.Xml.Linq.XName> de un nombre XML expandido en el formulario `{namespace}localname`:</span><span class="sxs-lookup"><span data-stu-id="5953a-128">You can also create an <xref:System.Xml.Linq.XName> from a expanded XML name in the form `{namespace}localname`:</span></span>  
  
```csharp  
XElement root = new XElement("{http://www.adventure-works.com}ElementName", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Dim root As XElement = New XElement("{http://www.adventure-works.com}ElementName", "content")  
Console.WriteLine(root)  
```  
  
 <span data-ttu-id="5953a-129">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-129">This example produces the following output:</span></span>  
  
```xml  
<ElementName xmlns="http://www.adventure-works.com">content</ElementName>  
```  
  
 <span data-ttu-id="5953a-130">Tenga en cuenta que la creación de un <xref:System.Xml.Linq.XName> a través de un nombre expandido es menos eficaz que crear un <xref:System.Xml.Linq.XNamespace> objeto y utilizar la invalidación del operador de suma.</span><span class="sxs-lookup"><span data-stu-id="5953a-130">Be aware that creating an <xref:System.Xml.Linq.XName> through an expanded name is less efficient than creating an <xref:System.Xml.Linq.XNamespace> object and using the override of the addition operator.</span></span> <span data-ttu-id="5953a-131">También es menos eficaz que importar un espacio de nombres global y utilizar literales XML en Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="5953a-131">It is also less efficient than importing a global namespace and using XML literals in Visual Basic.</span></span>  
  
 <span data-ttu-id="5953a-132">Si crea un <xref:System.Xml.Linq.XName> con un nombre expandido, LINQ to XML debe buscar la instancia subdividida de un espacio de nombres.</span><span class="sxs-lookup"><span data-stu-id="5953a-132">If you create an <xref:System.Xml.Linq.XName> using an expanded name, LINQ to XML must find the atomized instance of a namespace.</span></span> <span data-ttu-id="5953a-133">Este trabajo se debe repetir para cada uso de un nombre expandido.</span><span class="sxs-lookup"><span data-stu-id="5953a-133">This work must be repeated for every use of an expanded name.</span></span> <span data-ttu-id="5953a-134">Este tiempo adicional es probable que sea insignificante al escribir consultas LINQ; Sin embargo, puede ser significativo al crear un árbol XML grande.</span><span class="sxs-lookup"><span data-stu-id="5953a-134">This additional time is likely to be negligible when writing LINQ queries; however, it might be significant when creating a large XML tree.</span></span>  
  
## <a name="xname-objects-are-atomized"></a><span data-ttu-id="5953a-135">Objetos XName se subdividen</span><span class="sxs-lookup"><span data-stu-id="5953a-135">XName Objects are Atomized</span></span>  
 <span data-ttu-id="5953a-136"><xref:System.Xml.Linq.XName> se garantiza que los objetos se subdividen; es decir, si dos <xref:System.Xml.Linq.XName> objetos tienen exactamente el mismo espacio de nombres y exactamente el mismo nombre local, compartirán la misma instancia.</span><span class="sxs-lookup"><span data-stu-id="5953a-136"><xref:System.Xml.Linq.XName> objects are guaranteed to be atomized; that is, if two <xref:System.Xml.Linq.XName> objects have exactly the same namespace and exactly the same local name, they will share the same instance.</span></span> <span data-ttu-id="5953a-137">Los operadores de comparación e igualdad también se proporcionan explícitamente para este propósito.</span><span class="sxs-lookup"><span data-stu-id="5953a-137">The equality and comparison operators are also provided explicitly for this purpose.</span></span>  
  
 <span data-ttu-id="5953a-138">Entre otras ventajas, esta característica permite una ejecución más rápida de las consultas.</span><span class="sxs-lookup"><span data-stu-id="5953a-138">Among other benefits, this feature allows for faster execution of queries.</span></span> <span data-ttu-id="5953a-139">Si quiere filtrar en el nombre de elementos o atributos, las comparaciones expresadas en predicados usan la comparación de identidad, no la comparación de valores.</span><span class="sxs-lookup"><span data-stu-id="5953a-139">When filtering on the name of elements or attributes, the comparisons expressed in predicates use identity comparison, not value comparison.</span></span> <span data-ttu-id="5953a-140">Es mucho más rápido para determinar que dos referencias realmente hacen referencia al mismo objeto que comparar dos cadenas.</span><span class="sxs-lookup"><span data-stu-id="5953a-140">It is much faster to determine that two references actually refer to the same object than to compare two strings.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="5953a-141">
            <see cref="T:System.Xml.Linq.XName" /> que se va a comparar con el <see cref="T:System.Xml.Linq.XName" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-141">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5953a-142">Determina si el objeto <see cref="T:System.Xml.Linq.XName" /> especificado es igual a este objeto <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-142">Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-143">
            <see langword="true" /> si el objeto <see cref="T:System.Xml.Linq.XName" /> especificado es igual al objeto <see cref="T:System.Xml.Linq.XName" /> actual; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-143">
              <see langword="true" /> if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-144">Para dos <xref:System.Xml.Linq.XName> objetos sean iguales, deben tener el mismo nombre expandido.</span><span class="sxs-lookup"><span data-stu-id="5953a-144">For two <xref:System.Xml.Linq.XName> objects to be equal, they must have the same expanded name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Get">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="5953a-145">Obtiene un objeto <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-145">Gets an <see cref="T:System.Xml.Linq.XName" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-146">Este método proporciona sobrecargas que le permiten crear un <xref:System.Xml.Linq.XName> de un nombre XML expandido.</span><span class="sxs-lookup"><span data-stu-id="5953a-146">This method provides overloads that allow you to create an <xref:System.Xml.Linq.XName> from a expanded XML name.</span></span> <span data-ttu-id="5953a-147">Puede crear un <xref:System.Xml.Linq.XName> de una cadena con el formato `{namespace}localname`, o desde un espacio de nombres y un nombre local, especificados por separado.</span><span class="sxs-lookup"><span data-stu-id="5953a-147">You can create an <xref:System.Xml.Linq.XName> from a string in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="5953a-148">Una forma mucho más habitual y fácil de crear un <xref:System.Xml.Linq.XName> consiste en usar la conversión implícita de cadena.</span><span class="sxs-lookup"><span data-stu-id="5953a-148">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span> <span data-ttu-id="5953a-149">Para crear un nombre que se encuentra en un espacio de nombres, el enfoque común consiste en usar la sobrecarga del operador de suma que le permite combinar un <xref:System.Xml.Linq.XNamespace> objeto y una cadena.</span><span class="sxs-lookup"><span data-stu-id="5953a-149">To create a name that is in a namespace, the common approach is to use the addition operator overload that allows you to combine an <xref:System.Xml.Linq.XNamespace> object and a string.</span></span>  
  
 <span data-ttu-id="5953a-150">Para obtener más información y ejemplos, vea [Cómo: crear un documento con espacios de nombres (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span><span class="sxs-lookup"><span data-stu-id="5953a-150">For more information and examples, see [How to: Create a Document with Namespaces (C#) (LINQ to XML)](http://msdn.microsoft.com/library/af4a595e-ffb2-4187-a61b-d5ed71642c4c).</span></span>  
  
 <span data-ttu-id="5953a-151">Para obtener más información sobre el uso de espacios de nombres en Visual Basic, consulte [espacios de nombres en Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span><span class="sxs-lookup"><span data-stu-id="5953a-151">For more information on using namespaces in Visual Basic, see [Namespaces in Visual Basic (LINQ to XML)](http://msdn.microsoft.com/library/10b7ba7b-518c-4f14-899f-892575d14dcc).</span></span>  
  
 <span data-ttu-id="5953a-152">Dado que <xref:System.Xml.Linq.XName> se subdividen los objetos, si hay una existente <xref:System.Xml.Linq.XName> con exactamente el mismo nombre, la variable asignada hará referencia a las existentes <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-152">Because <xref:System.Xml.Linq.XName> objects are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-153">Si no existen <xref:System.Xml.Linq.XName>, un nuevo uno se crea y se inicializa.</span><span class="sxs-lookup"><span data-stu-id="5953a-153">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ expandedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName">
          <span data-ttu-id="5953a-154">
            <see cref="T:System.String" /> que contiene un nombre XML expandido en el formato <c>{namespace}localname</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-154">A <see cref="T:System.String" /> that contains an expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5953a-155">Recibe un objeto <see cref="T:System.Xml.Linq.XName" /> de un nombre expandido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-155">Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-156">Objeto <see cref="T:System.Xml.Linq.XName" /> construido a partir del nombre expandido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-156">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-157">Este método contiene sobrecargas que le permiten crear un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-157">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-158">Puede crear de un nombre XML expandido en el formulario `{namespace}localname`, o desde un espacio de nombres y un nombre local, especificados por separado.</span><span class="sxs-lookup"><span data-stu-id="5953a-158">You can create it from a expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="5953a-159">Una forma mucho más habitual y fácil de crear un <xref:System.Xml.Linq.XName> consiste en usar la conversión implícita de cadena.</span><span class="sxs-lookup"><span data-stu-id="5953a-159">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="5953a-160">Dado que <xref:System.Xml.Linq.XName> se subdividen, si hay una existente <xref:System.Xml.Linq.XName> con exactamente el mismo nombre, la variable asignada hará referencia a las existentes <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-160">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-161">Si no existen <xref:System.Xml.Linq.XName>, un nuevo uno se crea y se inicializa.</span><span class="sxs-lookup"><span data-stu-id="5953a-161">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5953a-162">En el ejemplo siguiente se muestra el uso de este método.</span><span class="sxs-lookup"><span data-stu-id="5953a-162">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("{http://www.adventure-works.com}Root");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred approach for specifying the XName in the  
// constructor of XElement.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-163">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-163">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static System.Xml.Linq.XName Get (string localName, string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Linq.XName Get(string localName, string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Get (localName As String, namespaceName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Linq::XName ^ Get(System::String ^ localName, System::String ^ namespaceName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="5953a-164">Nombre local (incompleto).</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-164">A local (unqualified) name.</span>
          </span>
        </param>
        <param name="namespaceName">
          <span data-ttu-id="5953a-165">Espacio de nombres XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-165">An XML namespace.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5953a-166">Recibe un objeto <see cref="T:System.Xml.Linq.XName" /> de un nombre local y un espacio de nombres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-166">Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-167">Objeto <see cref="T:System.Xml.Linq.XName" /> creado a partir del nombre local y el espacio de nombres especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-167">An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-168">Este método contiene sobrecargas que le permiten crear un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-168">This method contains overloads that allow you to create an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-169">Puede crear de un nombre XML expandido en el formulario `{namespace}localname`, o desde un espacio de nombres y un nombre local, especificados por separado.</span><span class="sxs-lookup"><span data-stu-id="5953a-169">You can create it from an expanded XML name in the form `{namespace}localname`, or from a namespace and a local name, specified separately.</span></span>  
  
 <span data-ttu-id="5953a-170">Una forma mucho más habitual y fácil de crear un <xref:System.Xml.Linq.XName> consiste en usar la conversión implícita de cadena.</span><span class="sxs-lookup"><span data-stu-id="5953a-170">A much more common and easier way to create an <xref:System.Xml.Linq.XName> is to use the implicit conversion from string.</span></span>  
  
 <span data-ttu-id="5953a-171">Dado que <xref:System.Xml.Linq.XName> se subdividen, si hay una existente <xref:System.Xml.Linq.XName> con exactamente el mismo nombre, la variable asignada hará referencia a las existentes <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-171">Because <xref:System.Xml.Linq.XName> are atomized, if there is an existing <xref:System.Xml.Linq.XName> with exactly the same name, the assigned variable will refer to the existing <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-172">Si no existen <xref:System.Xml.Linq.XName>, un nuevo uno se crea y se inicializa.</span><span class="sxs-lookup"><span data-stu-id="5953a-172">If there is no existing <xref:System.Xml.Linq.XName>, a new one will be created and initialized.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5953a-173">En el ejemplo siguiente se muestra el uso de este método.</span><span class="sxs-lookup"><span data-stu-id="5953a-173">The following example shows the use of this method.</span></span>  
  
```csharp  
XName name = XName.Get("Root", "http://www.adventure-works.com");  
XElement el = new XElement(name, "content");  
Console.WriteLine(el);  
  
// This is the preferred form.  
XNamespace aw = "http://www.adventure-works.com";  
XElement el2 = new XElement(aw + "Root", "content");  
Console.WriteLine(el2);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim name As XName = XName.Get("{http://www.adventure-works.com}Root")  
        Dim el As XElement = New XElement(name, "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach for specifying an XName in a namespace  
        ' for Visual Basic is to import a global namespace.  
        Dim el2 As XElement = <Root>content</Root>  
        Console.WriteLine(el2)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-174">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-174">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5953a-175">Obtiene un código hash de este objeto <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-175">Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-176">Valor de tipo <see cref="T:System.Int32" /> que contiene el código hash para el <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-176">An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-177">Este método actúa como función hash para <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-177">This method serves as a hash function for <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-178">Puede usar <xref:System.Xml.Linq.XName.GetHashCode%2A> en algoritmos hash y en estructuras de datos como una tabla hash.</span><span class="sxs-lookup"><span data-stu-id="5953a-178">You can use <xref:System.Xml.Linq.XName.GetHashCode%2A> in hashing algorithms, or in data structures such as a hash table.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5953a-179">Obtiene la parte local (incompleta) del nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-179">Gets the local (unqualified) part of the name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5953a-180">
            <see cref="T:System.String" /> que contiene la parte local (incompleta) del nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-180">A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-181">Esta propiedad se garantiza que no sea `null`.</span><span class="sxs-lookup"><span data-stu-id="5953a-181">This property is guaranteed to not be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5953a-182">En el ejemplo siguiente se muestra el uso de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="5953a-182">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-183">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-183">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.Linq.XName.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public System.Xml.Linq.XNamespace Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Linq.XNamespace Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As XNamespace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Linq::XNamespace ^ Namespace { System::Xml::Linq::XNamespace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XNamespace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5953a-184">Obtiene la parte de espacio de nombres del nombre completo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-184">Gets the namespace part of the fully qualified name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5953a-185">
            <see cref="T:System.Xml.Linq.XNamespace" /> que contiene la parte de espacio de nombres del nombre.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-185">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-186">Se garantiza que la propiedad <xref:System.Xml.Linq.XName.Namespace%2A> no sea `null`.</span><span class="sxs-lookup"><span data-stu-id="5953a-186">The <xref:System.Xml.Linq.XName.Namespace%2A> property is guaranteed to not be `null`.</span></span> <span data-ttu-id="5953a-187">Si un <xref:System.Xml.Linq.XName> está en ningún espacio de nombres, esta propiedad devuelve <xref:System.Xml.Linq.XNamespace.None%2A>.</span><span class="sxs-lookup"><span data-stu-id="5953a-187">If an <xref:System.Xml.Linq.XName> is in no namespace, this property returns <xref:System.Xml.Linq.XNamespace.None%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5953a-188">En el ejemplo siguiente se muestra el uso de esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="5953a-188">The following example shows the use of this property.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-189">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-189">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NamespaceName">
      <MemberSignature Language="C#" Value="public string NamespaceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Linq.XName.NamespaceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NamespaceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NamespaceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="5953a-190">Devuelve el URI del <see cref="T:System.Xml.Linq.XNamespace" /> para este <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-190">Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="5953a-191">El URI del <see cref="T:System.Xml.Linq.XNamespace" /> para este <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-191">The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-192">Se trata de una propiedad para obtener el nombre de espacio de nombres de un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-192">This is a convenience property to get the namespace name from an <xref:System.Xml.Linq.XName>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5953a-193">Este ejemplo crea un elemento en un espacio de nombres y, a continuación, imprime el espacio de nombres del elemento.</span><span class="sxs-lookup"><span data-stu-id="5953a-193">This example creates an element in a namespace, and then prints the element's namespace.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root");  
Console.WriteLine(root.Name.NamespaceName);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root/>  
        Console.WriteLine(root.Name.NamespaceName)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-194">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-194">This example produces the following output:</span></span>  
  
```  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="5953a-195">Primer objeto <see cref="T:System.Xml.Linq.XName" /> que se va a comparar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-195">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="5953a-196">Segundo objeto <see cref="T:System.Xml.Linq.XName" /> que se va a comparar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-196">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5953a-197">Devuelve un valor que indica si dos instancias de <see cref="T:System.Xml.Linq.XName" /> son iguales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-197">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-198">
            <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-198">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-199">Las sobrecargas de operador `==` y `!=` se incluyen para habilitar las comparaciones entre <xref:System.Xml.Linq.XName> y un `string`, como`element.Name == "SomeElementName"`.</span><span class="sxs-lookup"><span data-stu-id="5953a-199">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a `string`, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="5953a-200">Los operadores de igualdad de referencia predefinidos en C# requieren que un operando se pueda convertir al tipo del otro a través de las conversiones de referencia.</span><span class="sxs-lookup"><span data-stu-id="5953a-200">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="5953a-201">Estos operadores no tienen en cuenta la conversión implícita de cadena a <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-201">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="5953a-202">En el ejemplo siguiente se muestra algunas comparaciones entre <xref:System.Xml.Linq.XName> cadenas y objetos.</span><span class="sxs-lookup"><span data-stu-id="5953a-202">The following example shows some comparisons between <xref:System.Xml.Linq.XName> objects and strings.</span></span>  
  
```csharp  
XName xn;  
xn = XName.Get("Root");  
Console.WriteLine(xn == "Root");  
  
xn = XName.Get("Root", "http://www.adventure-works.com");  
Console.WriteLine(xn == "{http://www.adventure-works.com}Root");  
  
XElement root = new XElement("Root", "content");  
Console.WriteLine(root.Name == "Root");  
```  
  
```vb  
Dim xn As XName  
xn = XName.Get("Root")  
Console.WriteLine(xn = "Root")  
  
xn = XName.Get("Root", "http://www.adventure-works.com")  
Console.WriteLine(xn = "{http://www.adventure-works.com}Root")  
  
Dim root As XElement = New XElement("Root", "content")  
Console.WriteLine(root.Name = "Root")  
```  
  
 <span data-ttu-id="5953a-203">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-203">This example produces the following output:</span></span>  
  
```  
True  
True  
True  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator System.Xml.Linq.XName (string expandedName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class System.Xml.Linq.XName op_Implicit(string expandedName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (expandedName As String) As XName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator System::Xml::Linq::XName ^(System::String ^ expandedName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Linq.XName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expandedName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expandedName">
          <span data-ttu-id="5953a-204">Cadena que contiene un nombre XML expandido en el formato <c>{namespace}localname</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-204">A string that contains an expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5953a-205">Convierte una cadena con formato como un nombre XML expandido (es decir, <c>{namespace}localname</c>) en un objeto <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-205">Converts a string formatted as an expanded XML name (that is,<c>{namespace}localname</c>) to an <see cref="T:System.Xml.Linq.XName" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-206">Objeto <see cref="T:System.Xml.Linq.XName" /> construido a partir del nombre expandido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-206">An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-207">Se usa este operador implícito al crear un <xref:System.Xml.Linq.XElement> o <xref:System.Xml.Linq.XAttribute> pasando una cadena al constructor adecuado.</span><span class="sxs-lookup"><span data-stu-id="5953a-207">You are using this implicit operator when you create an <xref:System.Xml.Linq.XElement> or <xref:System.Xml.Linq.XAttribute> by passing a string to the appropriate constructor.</span></span>  
  
## Examples  
 <span data-ttu-id="5953a-208">En el ejemplo siguiente se crea un <xref:System.Xml.Linq.XName> asignándole una cadena, que invoca este operador de conversión implícita.</span><span class="sxs-lookup"><span data-stu-id="5953a-208">The following example creates an <xref:System.Xml.Linq.XName> by assigning a string to it, which invokes this implicit conversion operator.</span></span>  
  
```csharp  
XElement el = new XElement("{http://www.adventure-works.com}Root", "content");  
Console.WriteLine(el);  
  
// The preferred approach is to initialize an XNamespace object  
// and use the overload of the addition operator.  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
Console.WriteLine(root);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim el As XElement = New XElement("{http://www.adventure-works.com}Root", "content")  
        Console.WriteLine(el)  
  
        ' The preferred approach is to import a global namespace and   
        ' use an XML literal.  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-209">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-209">This example produces the following output:</span></span>  
  
```  
<Root xmlns="http://www.adventure-works.com">content</Root>  
<Root xmlns="http://www.adventure-works.com">content</Root>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xml.Linq.XName left, System.Xml.Linq.XName right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xml.Linq.XName left, class System.Xml.Linq.XName right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As XName, right As XName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xml::Linq::XName ^ left, System::Xml::Linq::XName ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Xml.Linq.XName" />
        <Parameter Name="right" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="5953a-210">Primer objeto <see cref="T:System.Xml.Linq.XName" /> que se va a comparar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-210">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="5953a-211">Segundo objeto <see cref="T:System.Xml.Linq.XName" /> que se va a comparar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-211">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5953a-212">Devuelve un valor que indica si dos instancias de <see cref="T:System.Xml.Linq.XName" /> no son iguales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-212">Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-213">
            <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-213">
              <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-214">Las sobrecargas de operador `==` y `!=` se incluyen para habilitar las comparaciones entre <xref:System.Xml.Linq.XName> y una cadena, como`element.Name == "SomeElementName"`.</span><span class="sxs-lookup"><span data-stu-id="5953a-214">The operator overloads `==` and `!=` are included to enable comparisons between <xref:System.Xml.Linq.XName> and a string, such as`element.Name == "SomeElementName"`.</span></span> <span data-ttu-id="5953a-215">Los operadores de igualdad de referencia predefinidos en C# requieren que un operando se pueda convertir al tipo del otro a través de las conversiones de referencia.</span><span class="sxs-lookup"><span data-stu-id="5953a-215">The predefined reference equality operators in C# require one operand to be convertible to the type of the other through reference conversions only.</span></span> <span data-ttu-id="5953a-216">Estos operadores no tienen en cuenta la conversión implícita de cadena a <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-216">These operators do not consider the implicit conversion from string to <xref:System.Xml.Linq.XName>.</span></span>  
  
## Examples  
 <span data-ttu-id="5953a-217">En el ejemplo de C# siguiente se compara un <xref:System.Xml.Linq.XName> objeto a una cadena, que invoca este operador.</span><span class="sxs-lookup"><span data-stu-id="5953a-217">The following C# example compares an <xref:System.Xml.Linq.XName> object to a string, which invokes this operator.</span></span>  
  
```csharp  
XNamespace aw = "http://www.adventure-works.com";  
XElement root = new XElement(aw + "Root", "content");  
  
Console.WriteLine(root.Name != "{http://www.adventure-works.com}Root");  
  
// the following is the preferred idiom  
Console.WriteLine(root.Name != aw + "Root");  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name <> "{http://www.adventure-works.com}Root")  
  
        ' the following is the preferred idiom  
        Console.WriteLine(root.Name <> GetXmlNamespace() + "Root")  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-218">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-218">This example produces the following output:</span></span>  
  
```  
False  
False  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals">
      <MemberSignature Language="C#" Value="bool IEquatable&lt;XName&gt;.Equals (System.Xml.Linq.XName other);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(class System.Xml.Linq.XName other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#IEquatable&lt;System#Xml#Linq#XName&gt;#Equals(System.Xml.Linq.XName)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As XName) As Boolean Implements IEquatable(Of XName).Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IEquatable&lt;System.Xml.Linq.XName&gt;.Equals(System::Xml::Linq::XName ^ other) = IEquatable&lt;System::Xml::Linq::XName ^&gt;::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xml.Linq.XName" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="5953a-219">
            <see cref="T:System.Xml.Linq.XName" /> que se compara con este <see cref="T:System.Xml.Linq.XName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-219">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5953a-220">Indica si el <see cref="T:System.Xml.Linq.XName" /> actual es igual al <see cref="T:System.Xml.Linq.XName" /> especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-220">Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-221">
            <see langword="true" /> si este objeto <see cref="T:System.Xml.Linq.XName" /> es igual al objeto <see cref="T:System.Xml.Linq.XName" /> especificado; de lo contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-221">
              <see langword="true" /> if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="5953a-222">
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se rellena con datos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-222">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="5953a-223">Destino (vea <see cref="T:System.Runtime.Serialization.StreamingContext" />) de esta serialización.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-223">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="5953a-224">Rellena <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para serializar el objeto de destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-224">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5953a-225">Este método se usa internamente para serializar gráficos de objetos que contienen objetos XML LINQ to.</span><span class="sxs-lookup"><span data-stu-id="5953a-225">This method is used internally to serialize object graphs that contain LINQ to XML objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Linq.XName.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XDocument</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Linq</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5953a-226">Devuelve el nombre XML expandido en el formato <c>{namespace}localname</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-226">Returns the expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="5953a-227">
            <see cref="T:System.String" /> que contiene el nombre XML expandido en el formato <c>{namespace}localname</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="5953a-227">A <see cref="T:System.String" /> that contains the expanded XML name in the format <c>{namespace}localname</c>.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5953a-228">El ejemplo siguiente se llama <xref:System.Console.WriteLine%2A>, pasando un <xref:System.Xml.Linq.XName>.</span><span class="sxs-lookup"><span data-stu-id="5953a-228">The following example calls <xref:System.Console.WriteLine%2A>, passing an <xref:System.Xml.Linq.XName>.</span></span> <span data-ttu-id="5953a-229">Esto hace que el <xref:System.Xml.Linq.XName.ToString%2A> método al que llamar.</span><span class="sxs-lookup"><span data-stu-id="5953a-229">This causes the <xref:System.Xml.Linq.XName.ToString%2A> method to be called.</span></span>  
  
```csharp  
XNamespace ns = "http://www.adventure-works.com";  
XElement root = new XElement(ns + "Root", "content");  
Console.WriteLine(root.Name);  
Console.WriteLine(root.Name.LocalName);  
Console.WriteLine(root.Name.Namespace);  
```  
  
```vb  
Imports <xmlns="http://www.adventure-works.com">  
  
Module Module1  
    Sub Main()  
        Dim root As XElement = <Root>content</Root>  
        Console.WriteLine(root.Name)  
        Console.WriteLine(root.Name.LocalName)  
        Console.WriteLine(root.Name.Namespace)  
    End Sub  
End Module  
```  
  
 <span data-ttu-id="5953a-230">Este ejemplo produce el siguiente resultado:</span><span class="sxs-lookup"><span data-stu-id="5953a-230">This example produces the following output:</span></span>  
  
```  
{http://www.adventure-works.com}Root  
Root  
http://www.adventure-works.com  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>