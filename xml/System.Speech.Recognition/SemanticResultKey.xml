<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="728e6be010dd9f35fb50a4b7205ec14cbb4aa2d2" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36608250" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Asocia una cadena de clave a valores <see cref="T:System.Speech.Recognition.SemanticResultValue" /> para definir objetos <see cref="T:System.Speech.Recognition.SemanticValue" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es la unidad básica de expresión semántica en System.Speech el <xref:System.Speech.Recognition.SemanticValue>, que es un par de clave/valor.  
  
 Usar <xref:System.Speech.Recognition.SemanticResultKey> objetos, etiqueta <xref:System.Speech.Recognition.SemanticResultValue> instancias contenidas en <xref:System.Speech.Recognition.GrammarBuilder> objetos y cadenas de modo que los valores con facilidad pueden tener acceso desde <xref:System.Speech.Recognition.SemanticValue> instancias en el reconocimiento.  
  
 Puede usar <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey> objetos, junto con <xref:System.Speech.Recognition.GrammarBuilder> y <xref:System.Speech.Recognition.Choices> objetos, para definir la estructura de la semántica de una gramática de reconocimiento de voz. Para obtener acceso a la información semántica en un resultado de reconocimiento, obtener una instancia de <xref:System.Speech.Recognition.SemanticValue> a través de la <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> propiedad <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
 Para obtener más información sobre el uso de <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey> los objetos, vea [SemanticResultValue descripción y los objetos de SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c) y [mediante un SemanticResultKey para extraer un SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa) en el [Guía de programación de voz de sistema de .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Recognition.Grammar> reconocer la entrada de contraseña de la forma "mi contraseña es...", donde la entrada real coincide con un carácter comodín.  
  
 El carácter comodín se etiqueta con una clave semántica y el <xref:System.Speech.Recognition.Grammar.SpeechRecognized> controlador comprueba la presencia de esta etiqueta para comprobar que se ha producido una entrada de contraseña.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Crea una instancia de <see cref="T:System.Speech.Recognition.SemanticResultKey" /> y asocia la clave a los componentes de gramática.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los constructores para <xref:System.Speech.Recognition.SemanticResultKey> especificar una etiqueta de texto (la clave semántica) y un conjunto de componentes de gramática para agregar a una gramática de reconocimiento de voz.  
  
 La gramática de componentes se pueden especifica como una matriz de <xref:System.Speech.Recognition.GrammarBuilder> objetos, o como una matriz de <xref:System.String> instancias.  
  
 Si se usan los componentes de la gramática de reconocimiento, puede tener acceso a la devuelta <xref:System.Speech.Recognition.SemanticValue> con la etiqueta de texto proporcionada al constructor de <xref:System.Speech.Recognition.SemanticResultKey> como una clave semántica. El <xref:System.Speech.Recognition.SemanticValue.Value%2A> propiedad de la <xref:System.Speech.Recognition.SemanticValue> instancia vendrá determinada por los componentes de gramática utilizados en la definición de <xref:System.Speech.Recognition.SemanticResultKey>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">La etiqueta que se usará como clave semántica para tener acceso a la instancia de <see cref="T:System.Speech.Recognition.SemanticValue" /> asociada a los objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" /> especificados por el argumento <c>builders</c>.</param>
        <param name="builders">Matriz de componentes de gramática que se asociarán a un objeto <see cref="T:System.Speech.Recognition.SemanticValue" /> accesible por medio de la etiqueta definida en <c>semanticResultKey</c>.</param>
        <summary>Asigna una clave semántica a uno o más objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" /> usados para crear una gramática de reconocimiento de voz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debido a conversiones implícitas, la `builders` admite el argumento <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, y <xref:System.String> objetos también. Para obtener más información sobre las conversiones implícitas, vea <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.  
  
 Al realizar una operación de reconocimiento, el <xref:System.Speech.Recognition.GrammarBuilder> objetos proporcionados en el `builders` argumento se tratan como secuencial. Por ejemplo, si el siguiente <xref:System.Speech.Recognition.SemanticResultValue> se usa para construir un <xref:System.Speech.Recognition.Grammar>, entrada para el motor de reconocimiento debe contener las palabras "el veloz murciélago" en la secuencia que se reconozcan.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 El `semanticResultKey` argumento contiene la etiqueta usada para tener acceso a la <xref:System.Speech.Recognition.SemanticValue> que pueden obtenerse.  
  
 El <xref:System.Speech.Recognition.SemanticValue.Value%2A> de la <xref:System.Speech.Recognition.SemanticValue> viene determinado por la <xref:System.Speech.Recognition.GrammarBuilder> instancias proporcionadas por el `builders` parámetro.  
  
 Si el <xref:System.Speech.Recognition.GrammarBuilder> objetos no contienen ninguna instancia de la definición de <xref:System.Speech.Recognition.SemanticResultValue>, el valor de la <xref:System.Speech.Recognition.SemanticValue> es `null`.  
  
 Si el <xref:System.Speech.Recognition.GrammarBuilder> objetos proporcionados en el `builders` parámetro proporcionar un etiquetado (no asociada a un <xref:System.Speech.Recognition.SemanticResultKey> objeto) <xref:System.Speech.Recognition.SemanticResultValue> instancia que se usa la lógica de reconocimiento, esa instancia de <xref:System.Speech.Recognition.SemanticResultValue> definirá la <xref:System.Speech.Recognition.SemanticValue.Value%2A>propiedad de la <xref:System.Speech.Recognition.SemanticValue> que se genera.  
  
 Debe haber uno y solo uno, no etiquetado <xref:System.Speech.Recognition.SemanticResultValue> de instancia de la <xref:System.Speech.Recognition.GrammarBuilder> objetos especificados por la `builders` parámetro. Si varias instancias de no etiquetado <xref:System.Speech.Recognition.SemanticResultValue> están asociadas a la <xref:System.Speech.Recognition.SemanticResultKey>, cada uno intenta el conjunto el valor de la <xref:System.Speech.Recognition.SemanticValue> producidos en el resultado del reconocimiento. Esta operación no está permitida y el reconocedor generará una excepción cuando intenta usar un <xref:System.Speech.Recognition.Grammar> siguieron como un <xref:System.Speech.Recognition.SemanticResultKey> instancia.  
  
 Instancias de <xref:System.Speech.Recognition.SemanticResultValue> contenidos en el <xref:System.Speech.Recognition.GrammarBuilder> objetos especificados por la `builders` parámetro y ya está asociada con otra <xref:System.Speech.Recognition.SemanticResultKey> no tienen ningún efecto en la actual <xref:System.Speech.Recognition.SemanticResultKey> instancia.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Recognition.Grammar> reconocer la entrada de contraseña de la forma "mi contraseña es...", donde la entrada real coincide con un carácter comodín.  
  
 El carácter comodín se etiqueta por un <xref:System.Speech.Recognition.SpeechRecognizer> cuyo valor de clave es "Password". El <xref:System.Speech.Recognition.Grammar.SpeechRecognized> controlador comprueba la presencia de esta etiqueta, obtiene la entrada de audio de la contraseña y comprueba la contraseña.  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey">Etiqueta que se usará para tener acceso a la instancia de <see cref="T:System.Speech.Recognition.SemanticValue" /> asociada a los objetos <see cref="T:System.String" /> especificados por el argumento <c>phrases</c>.</param>
        <param name="phrases">Uno o más objetos <see cref="T:System.String" />, cuyo texto concatenado se asociará a un objeto <see cref="T:System.Speech.Recognition.SemanticValue" /> accesible con la etiqueta definida en <c>semanticResultKey</c>.</param>
        <summary>Asigna una clave semántica a una o más instancias de <see cref="T:System.String" /> usadas para crear una gramática de reconocimiento de voz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al realizar una operación de reconocimiento, el <xref:System.String> objetos usados en el `phrases` parámetro se trata como secuencial. Por ejemplo, si el siguiente <xref:System.Speech.Recognition.SemanticResultValue> se usa para construir un <xref:System.Speech.Recognition.Grammar>, entrada para el motor de reconocimiento debe contener las palabras "el veloz murciélago" en la secuencia que se reconozcan.  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 El `semanticResultKey` argumento determina la clave usada para tener acceso a la <xref:System.Speech.Recognition.SemanticValue> que pueden obtenerse.  
  
 Si se construye una <xref:System.Speech.Recognition.Grammar> con un <xref:System.Speech.Recognition.GrammarBuilder> objeto que contiene una clave semántica con una matriz de objetos de cadena, la <xref:System.Speech.Recognition.SemanticValue.Value%2A> de la <xref:System.Speech.Recognition.SemanticValue> generada por una operación de reconocimiento será la cadena utilizada en el reconocimiento. En el ejemplo anterior, esto significa que <xref:System.Speech.Recognition.SemanticValue.Value%2A> sería "el veloz murciélago".  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Recognition.Grammar> desde una <xref:System.Speech.Recognition.GrammarBuilder> objeto que usa un <xref:System.Speech.Recognition.SemanticResultKey>, que está definido por una matriz de <xref:System.String> objetos.  
  
 Un motor de reconocimiento con el <xref:System.Speech.Recognition.Grammar> creado se reconoce la frase "color rojo cero azul verde". La semántica de la <xref:System.Speech.Recognition.RecognizedPhrase> devuelto por reconocimiento contendrá un <xref:System.Speech.Recognition.SemanticValue> con un <xref:System.Speech.Recognition.SemanticValue.Value%2A> "azul rojo verde". Puede tener acceso a la <xref:System.Speech.Recognition.SemanticValue> con la etiqueta "code".  
  
 Debido la `SemanticResultValue("zero", 5)` anexa a la <xref:System.Speech.Recognition.GrammarBuilder>, la raíz <xref:System.Speech.Recognition.SemanticValue> objeto en el <xref:System.Speech.Recognition.RecognizedPhrase> tendrá un valor de 5.  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una instancia de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construida a partir de la instancia de <see cref="T:System.Speech.Recognition.SemanticResultKey" /> actual.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El uso de <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> equivale a utilizar el <xref:System.Speech.Recognition.GrammarBuilder> constructor que toma <xref:System.Speech.Recognition.SemanticResultKey> como un argumento (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Recognition.Grammar> objeto que admite comandos para cambiar el color de fondo.  
  
 A <xref:System.Speech.Recognition.Choices> objeto (`colorChoice`) que contiene la lista de opciones para los colores de fondo se rellena mediante la <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> método con <xref:System.Speech.Recognition.GrammarBuilder> instancias. El <xref:System.Speech.Recognition.GrammarBuilder> instancias se obtienen a través de la <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> método en el <xref:System.Speech.Recognition.SemanticResultValue> objetos creados a partir de las cadenas de color.  
  
 A <xref:System.Speech.Recognition.GrammarBuilder> , a continuación, se obtiene mediante una llamada a <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> en un <xref:System.Speech.Recognition.SemanticResultKey> instancia, que se usará para las opciones de semántica en la clave `colorChoice`.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>