<Type Name="SpeechUI" FullName="System.Speech.Recognition.SpeechUI">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="024efe46a0ae942529029573a258ba81f7a3440e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30526179" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechUI" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechUI extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechUI" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechUI" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechUI" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="9dad2-101">Proporciona información de texto y estado acerca de operaciones de reconocimiento que se van a mostrar en la interfaz de usuario de la plataforma de voz.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9dad2-101">Provides text and status information on recognition operations to be displayed in the Speech platform user interface.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dad2-102">Los miembros de la <xref:System.Speech.Recognition.SpeechUI> clase puede usarse para indicar comentarios exacto para el usuario final a través de la interfaz de usuario de reconocimiento de voz.</span><span class="sxs-lookup"><span data-stu-id="9dad2-102">The members of the <xref:System.Speech.Recognition.SpeechUI> class can be used to indicate exact feedback to the end user through the speech recognition user interface.</span></span> <span data-ttu-id="9dad2-103">Una aplicación puede devolver información de correcto o con errores con esta clase y texto arbitrario.</span><span class="sxs-lookup"><span data-stu-id="9dad2-103">An application can return arbitrary text and success/failure information using this class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dad2-104">El ejemplo siguiente es un controlador para el <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="9dad2-104">The following example is a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="9dad2-105">Este evento es utilizado por un <xref:System.Speech.Recognition.Grammar> que está diseñado para controlar la entrada de contraseña en el formato "mi contraseña es...".</span><span class="sxs-lookup"><span data-stu-id="9dad2-105">This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input in the form "My password is …".</span></span>  
  
 <span data-ttu-id="9dad2-106">Si una contraseña no está presente o no es válido, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> envía información de error a la interfaz de usuario de la plataforma de voz.</span><span class="sxs-lookup"><span data-stu-id="9dad2-106">If a password is not present, or not valid, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> sends error information to the Speech platform user interface.</span></span>  
  
```  
  
grammar.SpeechRecognized +=   
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else   
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() +   
              "BadPwd" + (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SendTextFeedback">
      <MemberSignature Language="C#" Value="public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SendTextFeedback(class System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SendTextFeedback (result As RecognitionResult, feedback As String, isSuccessfulAction As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SendTextFeedback(System::Speech::Recognition::RecognitionResult ^ result, System::String ^ feedback, bool isSuccessfulAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Speech.Recognition.RecognitionResult" />
        <Parameter Name="feedback" Type="System.String" />
        <Parameter Name="isSuccessfulAction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="9dad2-107">Instancia válida <see cref="T:System.Speech.Recognition.RecognitionResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dad2-107">A valid <see cref="T:System.Speech.Recognition.RecognitionResult" /> instance.</span>
          </span>
        </param>
        <param name="feedback">
          <span data-ttu-id="9dad2-108">
            <see cref="T:System.String" /> que contiene un comentario sobre la operación de reconocimiento que generó <see cref="T:System.Speech.Recognition.RecognitionResult" /><c>result</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dad2-108">A <see cref="T:System.String" /> containing a comment about the recognition operation that produced the <see cref="T:System.Speech.Recognition.RecognitionResult" /><c>result</c>.</span>
          </span>
        </param>
        <param name="isSuccessfulAction">
          <span data-ttu-id="9dad2-109">Valor <see langword="bool" /> que indica si la aplicación consideró correcta la operación de reconocimiento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dad2-109">A <see langword="bool" /> indicating whether the application deemed the recognition operation a success.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9dad2-110">Envía texto de estado y descriptivo a la interfaz de usuario de la plataforma de voz acerca del estado de una operación de reconocimiento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dad2-110">Sends status and descriptive text to the Speech platform user interface about the status of a recognition operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9dad2-111">Es <see langword="true" /> si la información proporcionada al método (<paramref name="Feedback" /> e <paramref name="isSuccessfulAction" />) se puso correctamente a disposición de la interfaz de usuario de la plataforma de voz, y es <see langword="false" /> si la operación no se realizó correctamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9dad2-111">
              <see langword="true" /> if the information provided to the method (<paramref name="Feedback" />, and <paramref name="isSuccessfulAction" />) was successfully made available to the Speech platform user interface, and <see langword="false" /> if the operation failed.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9dad2-112"><xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> puede utilizarse para indicar que una operación de reconocimiento no cumple determinados criterios, incluso si la entrada reconocida.</span><span class="sxs-lookup"><span data-stu-id="9dad2-112"><xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> can be used to indicate that a recognition operation failed to meet certain criteria, even if the input was recognized.</span></span>  
  
 <span data-ttu-id="9dad2-113">Un ejemplo es la comprobación de información de código de seguridad, donde la entrada reconocida totalmente, pero la información de comprobación no es correcto.</span><span class="sxs-lookup"><span data-stu-id="9dad2-113">An example is the verification of security code information, where the input was fully recognized, but the verification information was wrong.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9dad2-114">El ejemplo siguiente es un controlador para un <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="9dad2-114">The following example is a handler for a <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="9dad2-115">Este evento es utilizado por un <xref:System.Speech.Recognition.Grammar> que está diseñado para controlar la entrada de contraseña del formulario, "mi contraseña es...".</span><span class="sxs-lookup"><span data-stu-id="9dad2-115">This event is used by a <xref:System.Speech.Recognition.Grammar> that is designed to handle password input of the form, "My password is …".</span></span>  
  
 <span data-ttu-id="9dad2-116">Si una contraseña no está presente o no es válido, **SendTextFeedback** se utiliza para enviar información de error a la interfaz de usuario de la plataforma de voz.</span><span class="sxs-lookup"><span data-stu-id="9dad2-116">If a password is not present, or not valid, **SendTextFeedback** is used to send error information to the Speech platform user interface.</span></span>  
  
```  
  
grammar.SpeechRecognized +=  
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else  
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
              result.Words[3],  
              result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() + "BadPwd" +   
               (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>