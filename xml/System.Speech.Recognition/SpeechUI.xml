<Type Name="SpeechUI" FullName="System.Speech.Recognition.SpeechUI">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="024efe46a0ae942529029573a258ba81f7a3440e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30526179" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechUI" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechUI extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechUI" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechUI" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechUI" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona información de texto y estado acerca de operaciones de reconocimiento que se van a mostrar en la interfaz de usuario de la plataforma de voz.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los miembros de la <xref:System.Speech.Recognition.SpeechUI> clase puede usarse para indicar comentarios exacto para el usuario final a través de la interfaz de usuario de reconocimiento de voz. Una aplicación puede devolver información de correcto o con errores con esta clase y texto arbitrario.  
  
   
  
## Examples  
 El ejemplo siguiente es un controlador para el <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos. Este evento es utilizado por un <xref:System.Speech.Recognition.Grammar> que está diseñado para controlar la entrada de contraseña en el formato "mi contraseña es...".  
  
 Si una contraseña no está presente o no es válido, <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> envía información de error a la interfaz de usuario de la plataforma de voz.  
  
```  
  
grammar.SpeechRecognized +=   
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else   
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() +   
              "BadPwd" + (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="SendTextFeedback">
      <MemberSignature Language="C#" Value="public static bool SendTextFeedback (System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SendTextFeedback(class System.Speech.Recognition.RecognitionResult result, string feedback, bool isSuccessfulAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechUI.SendTextFeedback(System.Speech.Recognition.RecognitionResult,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SendTextFeedback (result As RecognitionResult, feedback As String, isSuccessfulAction As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SendTextFeedback(System::Speech::Recognition::RecognitionResult ^ result, System::String ^ feedback, bool isSuccessfulAction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.Speech.Recognition.RecognitionResult" />
        <Parameter Name="feedback" Type="System.String" />
        <Parameter Name="isSuccessfulAction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="result">Instancia válida <see cref="T:System.Speech.Recognition.RecognitionResult" />.</param>
        <param name="feedback">
          <see cref="T:System.String" /> que contiene un comentario sobre la operación de reconocimiento que generó <see cref="T:System.Speech.Recognition.RecognitionResult" /><c>result</c>.</param>
        <param name="isSuccessfulAction">Valor <see langword="bool" /> que indica si la aplicación consideró correcta la operación de reconocimiento.</param>
        <summary>Envía texto de estado y descriptivo a la interfaz de usuario de la plataforma de voz acerca del estado de una operación de reconocimiento.</summary>
        <returns>
          Es <see langword="true" /> si la información proporcionada al método (<paramref name="Feedback" /> e <paramref name="isSuccessfulAction" />) se puso correctamente a disposición de la interfaz de usuario de la plataforma de voz, y es <see langword="false" /> si la operación no se realizó correctamente.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Recognition.SpeechUI.SendTextFeedback%2A> puede utilizarse para indicar que una operación de reconocimiento no cumple determinados criterios, incluso si la entrada reconocida.  
  
 Un ejemplo es la comprobación de información de código de seguridad, donde la entrada reconocida totalmente, pero la información de comprobación no es correcto.  
  
   
  
## Examples  
 El ejemplo siguiente es un controlador para un <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos. Este evento es utilizado por un <xref:System.Speech.Recognition.Grammar> que está diseñado para controlar la entrada de contraseña del formulario, "mi contraseña es...".  
  
 Si una contraseña no está presente o no es válido, **SendTextFeedback** se utiliza para enviar información de error a la interfaz de usuario de la plataforma de voz.  
  
```  
  
grammar.SpeechRecognized +=  
delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
{  
  SemanticValue semantics = eventArgs.Result.Semantics;  
  RecognitionResult result=eventArgs.Result;  
  
  if (!semantics.ContainsKey("Password"))   
  {  
    SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
  }  
  else  
  {  
    RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
              result.Words[3],  
              result.Words[result.Words.Count - 1]);  
    MemoryStream pwdMemoryStream = new MemoryStream();  
    pwdAudio.WriteToAudioStream(pwdMemoryStream);  
    if (!IsValidPwd(pwdMemoryStream))   
    {  
      string badPwd = System.IO.Path.GetTempPath() + "BadPwd" +   
               (new Random()).Next().ToString() + ".wav";  
      FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
      pwdAudio.WriteToWaveStream(waveStream);  
      waveStream.Flush();  
      waveStream.Close();  
      SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
    }  
  }  
};  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>