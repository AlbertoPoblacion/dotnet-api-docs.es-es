<Type Name="Choices" FullName="System.Speech.Recognition.Choices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4ceb6ba04ac6c11de88fb6f61708b6adbb682b36" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51890897" /></Metadata><TypeSignature Language="C#" Value="public class Choices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Choices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Choices" />
  <TypeSignature Language="VB.NET" Value="Public Class Choices" />
  <TypeSignature Language="C++ CLI" Value="public ref class Choices" />
  <TypeSignature Language="F#" Value="type Choices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_oneOf.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un conjunto de alternativas en las restricciones de una gramática de reconocimiento de voz.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Speech.Recognition.Choices> objeto representa un componente de una frase que puede tener uno de varios valores. Utilice esta clase al crear una gramática de reconocimiento de voz de un <xref:System.Speech.Recognition.GrammarBuilder> objeto.  
  
 Por ejemplo, un <xref:System.Speech.Recognition.Choices> objeto podría representar el componente *colorChoice* de la frase, "cambiar el color a *colorChoice*", donde los valores aceptables para *colorChoice* son "rojo" o "verde" o "blue".  
  
> [!NOTE]
>  Para usar un <xref:System.Speech.Recognition.Choices> como un componente opcional en una frase, cree el <xref:System.Speech.Recognition.Choices> y agregarlo a un <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> objeto con `minRepeat` y `maxRepeat` establecido en 0 y 1, respectivamente. Frases que contienen los componentes opcionales se pueden reconocer o no se habla el componente opcional.  
  
 El <xref:System.Speech.Recognition.Choices> clase realiza las mismas funciones como la `one-of` elemento XML definido por el [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0](https://www.w3.org/TR/speech-grammar/) y es similar a la <xref:System.Speech.Recognition.SrgsGrammar.SrgsOneOf> clase en el <xref:System.Speech.Recognition.SrgsGrammar> espacio de nombres.  
  
 Para obtener más información acerca de cómo definir una gramática de reconocimiento de voz, consulte [el reconocimiento de voz](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) y [crear GrammarBuilder gramáticas](https://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una gramática de reconocimiento de voz para la frase, "establecido en segundo plano en *colorChoice*", donde *colorChoice* puede ser uno de los colores definidos. El <xref:System.Speech.Recognition.GrammarBuilder> se utiliza para definir las restricciones de la gramática.  
  
```csharp  
  
private Grammar CreateColorGrammar()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  colorChoice.Add(new string[] {"cyan", "yellow", "magenta"});  
  
  // Construct the phrase.  
  GrammarBuilder builder = new GrammarBuilder("Set background to");  
  builder.Append(colorChoice);  
  
  // Create a grammar for the phrase.  
  Grammar colorGrammar = new Grammar(builder);  
  colorGrammar.Name = "SetBackground";  
  
  return colorGrammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=15143">Especificación de gramática de reconocimiento de voz (SRGS)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Choices" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede construir un <xref:System.Speech.Recognition.Choices> objeto utilizando un constructor predeterminado (que devuelve un objeto vacío) de un grupo de <xref:System.String> objetos, o un conjunto de <xref:System.Speech.Recognition.GrammarBuilder> objetos.  
  
 Dado que el <xref:System.Speech.Recognition.GrammarBuilder> objeto admite la conversión implícita de <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey>, un <xref:System.Speech.Recognition.Choices> pueden construirse a partir de una matriz de estos objetos mediante una conversión.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa <xref:System.Speech.Recognition.Choices> objetos para crear dos listas de alternativas.  
  
 La primera <xref:System.Speech.Recognition.Choices> objeto se construye a partir de una matriz de <xref:System.String> objetos. El otro <xref:System.Speech.Recognition.Choices> objeto se construye a partir de una matriz de <xref:System.Speech.Recognition.GrammarBuilder> objetos que se han convertido implícitamente mediante una conversión.  
  
 El ejemplo se usa un <xref:System.Speech.Recognition.GrammarBuilder> objeto para ensamblar una frase, mediante el <xref:System.Speech.Recognition.Choices> objetos y dos cadenas adicionales, que pueden usarse para reconocer la voz de entrada en forma de "Call [contactlList] en [phoneType] teléfono", por ejemplo "Juana de llamada de teléfono móvil".  
  
```  
public GrammarBuilder ChoicesContructor2 ()  
{  
    GrammarBuilder gb = new GrammarBuilder ();  
    Choices phoneType = new Choices (new string[] {"cell", "home", "work"});  
    Choices contactList = new Choices (new GrammarBuilder[] {(GrammarBuilder) "Mark", (GrammarBuilder) "Jane", (GrammarBuilder) "Frank"});  
    gb.Append ("Call");  
    gb.Append (contactList);  
    gb.Append ("on");  
    gb.Append (phoneType);  
    gb.Append ("phone");  
    return gb;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Choices" /> que contiene un conjunto vacío de alternativas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor devuelve un conjunto de vacío válido, de alternativas. Puede agregar alternativas mediante cualquiera de los <xref:System.Speech.Recognition.Choices.Add%2A> métodos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa <xref:System.Speech.Recognition.Choices> y <xref:System.Speech.Recognition.GrammarBuilder> objetos para crear una frase que se puede usar para reconocer la entrada de voz, como "Anne llamada en su celda" y "Jaime llamada en su teléfono de trabajo". El ejemplo usa conversiones implícitas del <xref:System.Speech.Recognition.Choices> y <xref:System.String> a <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices alternateChoices" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Una matriz que contiene el conjunto de alternativas.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Choices" /> desde una matriz que contiene uno o más objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada <xref:System.Speech.Recognition.GrammarBuilder> en `alternateChoices` define una alternativa. Si `alternateChoices` es una matriz vacía, el constructor devuelve un conjunto vacío de alternativas. Puede agregar alternativas mediante cualquiera de los <xref:System.Speech.Recognition.Choices.Add%2A> métodos.  
  
 El constructor produce una <xref:System.ArgumentNullException> cuando `alternateChoices` es `null` o cuando cualquiera de los elementos de matriz son `null`.  
  
 Dado que el <xref:System.Speech.Recognition.GrammarBuilder> proporciona compatibilidad para la conversión implícita de <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultValue>, y <xref:System.Speech.Recognition.SemanticResultKey> objetos a <xref:System.Speech.Recognition.GrammarBuilder> instancias, correctamente utilizando las conversiones, este constructor también se puede utilizar para crear un <xref:System.Speech.Recognition.Choices> objeto de una lista de cualquier combinación de estos objetos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa `Choices` y <xref:System.Speech.Recognition.GrammarBuilder> objetos para crear un <xref:System.Speech.Recognition.Grammar> frases como "Anne llamada en su celda" y "Jaime llamada en su teléfono de trabajo". El ejemplo usa conversiones implícitas del `Choices` y <xref:System.String> a <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Choices (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Choices(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.Choices : string[] -&gt; System.Speech.Recognition.Choices" Usage="new System.Speech.Recognition.Choices phrases" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Una matriz que contiene el conjunto de alternativas.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Choices" /> desde una matriz que contiene uno o más objetos <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cada <xref:System.String> en `phrases` define una alternativa. El motor de reconocimiento de voz puede utilizar cualquiera de los elementos de la matriz de cadena para que coincida con la entrada de voz. Si `phrases` es una matriz vacía, el constructor devuelve un conjunto vacío de alternativas. Puede agregar alternativas mediante cualquiera de los <xref:System.Speech.Recognition.Choices.Add%2A> métodos.  
  
 El constructor produce una <xref:System.ArgumentNullException> cuando `phrases` es `null` o cualquiera de los elementos de matriz son `null`. El constructor produce una <xref:System.ArgumentException> si cualquier elemento de la matriz es una cadena vacía ("").  
  
   
  
## Examples  
 En el ejemplo siguiente se usa <xref:System.Speech.Recognition.Choices> y <xref:System.Speech.Recognition.GrammarBuilder> objetos para crear un <xref:System.Speech.Recognition.Grammar> para las frases como "Anne llamada en su celda" y "Jaime llamada en su teléfono de trabajo". El ejemplo usa conversiones implícitas del `Choices` y <xref:System.String> a <xref:System.Speech.Recognition.GrammarBuilder>.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Agrega elementos al conjunto de alternativas.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params System.Speech.Recognition.GrammarBuilder[] alternateChoices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Speech.Recognition.GrammarBuilder[] alternateChoices) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray alternateChoices As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ alternateChoices);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Speech.Recognition.GrammarBuilder[] -&gt; unit" Usage="choices.Add alternateChoices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alternateChoices" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="alternateChoices">Objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" /> que se van a agregar a este objeto <see cref="T:System.Speech.Recognition.Choices" />.</param>
        <summary>Agrega una matriz que contiene uno o más objetos <see cref="T:System.Speech.Recognition.GrammarBuilder" /> al conjunto de alternativas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debido a la compatibilidad para la conversión implícita de <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, y <xref:System.Speech.Recognition.SemanticResultValue> objetos a <xref:System.Speech.Recognition.GrammarBuilder>, estas clases se pueden agregar a un <xref:System.Speech.Recognition.Choices> también la instancia.  
  
 Si `alternateChoices` es una matriz vacía, este método no actualiza el conjunto de alternativas.  
  
 Las aplicaciones pueden usar ambos <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> y <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> agregar alternativas a un <xref:System.Speech.Recognition.Choices> objeto.  
  
 Este método produce una <xref:System.ArgumentNullException> cuando `alternateChoices` es `null` o cualquiera de los elementos de matriz son `null`.  
  
   
  
## Examples  
 El ejemplo siguiente crea una gramática de reconocimiento de voz para frases como "Anne llamada en su celda" y "Jaime llamada en su teléfono de trabajo". El ejemplo utiliza ambas sobrecargas de los <xref:System.Speech.Recognition.Choices.Add%2A> método de generación de la gramática.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.Add(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="member this.Add : string[] -&gt; unit" Usage="choices.Add phrases" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="phrases">Las cadenas para agregar a este objeto <see cref="T:System.Speech.Recognition.Choices" />.</param>
        <summary>Agrega una matriz que contiene uno o más objetos <see cref="T:System.String" /> al conjunto de alternativas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las aplicaciones pueden usar ambos <xref:System.Speech.Recognition.Choices.Add%28System.String%5B%5D%29> y <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> agregar alternativas a un <xref:System.Speech.Recognition.Choices> objeto.  
  
 Si `phrases` es una matriz vacía, este método no actualiza el conjunto de alternativas.  
  
 Este método produce una <xref:System.ArgumentNullException> cuando `phrases` es `null` o cualquiera de los elementos de matriz son `null`. Este método produce una <xref:System.ArgumentException> si cualquier elemento de la matriz es una cadena vacía ("").  
  
   
  
## Examples  
 El ejemplo siguiente crea una gramática de reconocimiento de voz para frases similar a "Anne llamada en su celda" y "Jaime llamada en su teléfono de trabajo". El ejemplo utiliza ambas sobrecargas de los <xref:System.Speech.Recognition.Choices.Add%2A> método de generación de la gramática.  
  
```csharp  
public Grammar CreatePhonePhrase()  
{  
  
  // Create alternatives for female names and add a phrase.  
  GrammarBuilder females = new Choices(new string[] { "Anne", "Mary" });  
  females.Append("on her");  
  
  // Create alternatives for male names and add a phrase.  
  GrammarBuilder males = new Choices(new string[] { "James", "Sam" });  
  males.Append("on his");  
  
  // Create a Choices object that contains an array of alternative  
  // GrammarBuilder objects.  
  Choices people = new Choices();  
  people.Add(new Choices(new GrammarBuilder[] {females, males}));  
  
  // Create a Choices object that contains a set of alternative phone types.  
  Choices phoneType = new Choices();  
  phoneType.Add(new string[] { "cell", "home", "work" });  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append("call");  
  gb.Append(people);  
  gb.Append(phoneType);  
  gb.Append(new GrammarBuilder("phone"), 0, 1);  
  
  return new Grammar(gb);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Choices.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="choices.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un objeto <see cref="T:System.Speech.Recognition.GrammarBuilder" /> desde este objeto <see cref="T:System.Speech.Recognition.Choices" />.</summary>
        <returns>Valor <see cref="T:System.Speech.Recognition.GrammarBuilder" /> que coincide con este objeto <see cref="T:System.Speech.Recognition.Choices" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Speech.Recognition.GrammarBuilder> devuelto por este método es equivalente a uno devuelto por cualquiera de las siguientes.  
  
-   Una llamada a la <xref:System.Speech.Recognition.GrammarBuilder.%23ctor%2A> constructor con este objeto como parámetro.  
  
-   Uso implícito o explícito convertir de este objeto en un <xref:System.Speech.Recognition.GrammarBuilder>.  
  
   
  
## Examples  
 El ejemplo siguiente crea una gramática de reconocimiento de voz para cambiar el color de fondo.  
  
```csharp  
  
private Grammar CreateColorChoice()  
{  
  
  // Create a Choices object that contains a set of alternative colors.  
  Choices colorChoice = new Choices(new string[] {"red", "green", "blue"});  
  
  // Construct the phrase.  
  GrammarBuilder gb = new GrammarBuilder();  
  gb.Append(new Choices(new string[] {"Set", "Change"}));  
  gb.Append("background to");  
  gb.Append(colorChoice.ToGrammarBuilder());  
  
  Grammar grammar = new Grammar(gb);  
  grammar.Name = "modify background color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
      </Docs>
    </Member>
  </Members>
</Type>