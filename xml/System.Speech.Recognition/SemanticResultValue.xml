<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a24449f3387d13bac2e04e95a7f249063d934211" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37755819" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un valor semántico y, opcionalmente, asocia el valor a un componente de una gramática de reconocimiento de voz.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El uso de <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey> objetos, junto con <xref:System.Speech.Recognition.GrammarBuilder> y <xref:System.Speech.Recognition.Choices>, es la manera más fácil de diseñar una estructura semántica para un <xref:System.Speech.Recognition.Grammar>. Se tiene acceso a información semántica de una frase obteniendo una instancia de <xref:System.Speech.Recognition.SemanticValue>, mediante el <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> propiedad <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
> [!NOTE]
>  Los valores administrados por <xref:System.Speech.Recognition.SemanticResultValue> define objetos <xref:System.Object> las instancias que se pasan a sus constructores. El tipo subyacente de este <xref:System.Object> debe ser `bool`, `int`, `float`, o `string`. Cualquier otro tipo impedirá que la construcción de un <xref:System.Speech.Recognition.Grammar> instancia con el <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 El uso típico de un <xref:System.Speech.Recognition.SemanticResultValue> instancia asocia la instancia a un componente reconocible de un <xref:System.Speech.Recognition.Grammar>, por ejemplo, una frase, una regla, o un <xref:System.Speech.Recognition.Choices> objeto. Si el componente asociado se usa como parte de una operación de reconocimiento, la <xref:System.Speech.Recognition.SemanticResultValue> se utiliza para definir un valor en la semántica de la frase de contraseña devuelta.  
  
 Existen dos métodos básicos para asociar un <xref:System.Speech.Recognition.SemanticResultValue> instancia con un elemento de gramática, según el constructor usado para crear el <xref:System.Speech.Recognition.SemanticResultValue>.  
  
-   Si solo el valor (especificado por una instancia de <xref:System.Object>) se usa para construir un <xref:System.Speech.Recognition.SemanticResultValue> objeto, el <xref:System.Speech.Recognition.SemanticResultValue> está asociado con el componente de gramática que le precede, además un <xref:System.Speech.Recognition.GrammarBuilder> objeto.  
  
     Por ejemplo, en el fragmento de código siguiente, si un <xref:System.Speech.Recognition.Grammar> construido mediante este <xref:System.Speech.Recognition.GrammarBuilder> instancia reconoce la palabra "background", un valor de `true` se establece en la semántica de la frase reconocida.  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     Para obtener más información, vea la descripción de <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.  
  
-   Si una frase del valor de cadena o específico de <xref:System.Speech.Recognition.GrammarBuilder> instancia se usa, junto con un <xref:System.Object> que especifica un <xref:System.Speech.Recognition.SemanticResultValue> valor, que el valor se asocia automáticamente con la frase del valor de cadena o el <xref:System.Speech.Recognition.GrammarBuilder> instancia.  Si la frase o <xref:System.Speech.Recognition.GrammarBuilder> objeto se usa en el proceso de reconocimiento, el valor se asignará a la semántica de la frase reconocida.  
  
     En el ejemplo siguiente se muestra cómo hacerlo y es funcionalmente equivalente al ejemplo anterior, que utiliza llamadas explícitas a <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> y <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>. Si la lógica de reconocimiento utiliza la palabra "background", el valor `true` se agregará a la semántica reconocida.  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     Para obtener más información, vea la descripción de <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> y <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.  
  
 Que va a usar un <xref:System.Speech.Recognition.Grammar> en el reconocimiento, todos los <xref:System.Speech.Recognition.SemanticResultValue> instancias deben estar asociadas con uno de los <xref:System.Speech.Recognition.SemanticValue> objetos usados por el que <xref:System.Speech.Recognition.Grammar>. Esto se hace mediante la asociación de una clave semántica con las <xref:System.Speech.Recognition.SemanticResultValue>.  
  
 Claves semánticas se pueden adjuntar explícitamente a un <xref:System.Speech.Recognition.SemanticResultValue>, utilizando un <xref:System.Speech.Recognition.SemanticResultKey> objeto.  <xref:System.Speech.Recognition.SemanticResultValue> instancias explícitamente no se adjunta a una clave están asociadas a la clave raíz de la predeterminada <xref:System.Speech.Recognition.SemanticValue>.  
  
 Después de un <xref:System.Speech.Recognition.SemanticResultValue> se ha utilizado para establecer el <xref:System.Speech.Recognition.SemanticValue.Value%2A>, independientemente de que se etiqueta con la clave raíz predeterminada o por cualquier determinados <xref:System.Speech.Recognition.SemanticResultKey>, ese valor no debe modificarse o se producirá una excepción durante las operaciones de reconocimiento.  
  
 En el ejemplo siguiente, se producirá una excepción porque establece y, a continuación, modifica la raíz <xref:System.Speech.Recognition.SemanticValue.Value%2A> de un <xref:System.Speech.Recognition.Grammar>.  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 Por otro lado, se permite el código en el ejemplo siguiente. Aunque definen varias instancias de <xref:System.Speech.Recognition.SemanticResultValue>, se incluyen en un <xref:System.Speech.Recognition.Choices> objeto y solo uno nunca se usará para establecer el valor de la clave `bgOrfgText`.  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```  
  
 Para obtener más información sobre el uso de <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey> objetos, vea [SemanticResultValue comprensión y objetos SemanticResultKey](http://msdn.microsoft.com/library/0fea1236-5261-4608-89b3-9ce9ffc22a1c) y [mediante un SemanticResultKey para extraer un SemanticResultValue](http://msdn.microsoft.com/library/198e29b8-845f-4cec-a25e-f55c0eaf46aa) en el [Guía de programación de voz del sistema de .NET Framework 4.0](http://msdn.microsoft.com/library/610116c7-3817-40ff-857b-5d41e8511043).  
  
   
  
## Examples  
 El ejemplo siguiente devuelve un <xref:System.Speech.Recognition.Grammar> que reconoce el comando "Set/cambio/Alter primer o segundo plano... [lista de color] ".  <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey> instancias (junto con <xref:System.Speech.Recognition.Choices> y <xref:System.Speech.Recognition.GrammarBuilder> objetos) se usan para definir la semántica que se puede analizar en el reconocimiento.  La semántica analizada determinará el color que se ha solicitado y si es el primer o segundo plano que se va a modificar.  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.SemanticResultValue" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `SemanticResultValue` constructores admiten la especificación de un <xref:System.Object> instancia con un tipo de datos subyacente de `bool`, `int`, `float`, o `string`.  
  
 Puede crear un constructor un `SemanticResultValue` instancia en cualquiera de estas dos situaciones:  
  
-   El `SemanticResultValue` instancia debe estar asociada explícitamente a un elemento de gramática cuando se usa un <xref:System.Speech.Recognition.GrammarBuilder> para construir un <xref:System.Speech.Recognition.Grammar>.  
  
-   El `SemanticResultValue` ya está asociada con una frase del valor de cadena o un <xref:System.Speech.Recognition.GrammarBuilder> objeto.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">El valor que administra <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Debe ser del tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> o <see langword="string" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.SemanticResultValue" /> y especifica un valor semántico.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un `SemanticResultValue` devuelta por este constructor no está asociado con ningún elemento de gramática determinada. La asociación debe hacerse explícita mediante el uso de la instancia de `SemanticResultValue` junto con <xref:System.Speech.Recognition.GrammarBuilder>.  
  
 Por ejemplo, en el fragmento de código siguiente, si un <xref:System.Speech.Recognition.Grammar> construido mediante este <xref:System.Speech.Recognition.GrammarBuilder> instancia reconoce la palabra "background", un valor de `true` se establece en la semántica de la frase reconocida.  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 El ejemplo siguiente devuelve un <xref:System.Speech.Recognition.Grammar> que reconoce el comando "Set/cambio/Alter primer o segundo plano... [lista de color] ". <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey> instancias (junto con <xref:System.Speech.Recognition.Choices> y <xref:System.Speech.Recognition.GrammarBuilder> objetos) se usan para definir la semántica que se puede analizar en el reconocimiento.  La semántica analizada determinará el color que se ha solicitado y si es el primer o segundo plano que se va a modificar.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">Un componente de la gramática que se usará en el reconocimiento.</param>
        <param name="value">El valor que administra <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Debe ser del tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> o <see langword="string" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.SemanticResultValue" /> y asocia un valor semántico con un objeto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el elemento de gramática especificada por <xref:System.Speech.Recognition.GrammarBuilder> se usa en la lógica de reconocimiento, `value` se establecerá en la semántica de la salida reconocida.  
  
 En el fragmento de código siguiente, si la lógica de reconocimiento se construye con la <xref:System.Speech.Recognition.GrammarBuilder> instancia (`myGb`) usa el <xref:System.Speech.Recognition.Choices> objeto (`myChoice`) identificar la entrada, el valor `true` se agrega a la semántica reconocida.  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 Como <xref:System.Speech.Recognition.GrammarBuilder> admite la conversión implícita para <xref:System.Speech.Recognition.Choices>, `SemanticResultValue`, y <xref:System.Speech.Recognition.SemanticResultKey>, este constructor puede usar también esos objetos.  
  
   
  
## Examples  
 El ejemplo siguiente devuelve un <xref:System.Speech.Recognition.Grammar> que reconoce el comando "Set/cambio/Alter primer o segundo plano... [lista de color] ". <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey> instancias (junto con <xref:System.Speech.Recognition.Choices> y <xref:System.Speech.Recognition.GrammarBuilder> objetos) se usan para definir la semántica que se puede analizar en el reconocimiento.  La semántica analizada determinará el color que se ha solicitado y si es el primer o segundo plano que se va a modificar.  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">Una frase que se usará en el reconocimiento.</param>
        <param name="value">El valor que administra <see cref="T:System.Speech.Recognition.SemanticResultValue" />. Debe ser del tipo <see langword="bool" />, <see langword="int" />, <see langword="float" /> o <see langword="string" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.SemanticResultValue" /> y asocia un valor semántico con un objeto <see cref="T:System.String" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la cadena especificada por `phrase` se usa en la lógica de reconocimiento, `value` se establecerá en la semántica de la salida reconocida.  
  
 En el siguiente fragmento de código, si la lógica de reconocimiento se construye con la <xref:System.Speech.Recognition.GrammarBuilder> instancia (`myGb`) utiliza la cadena "Mi hipoteca" identificar la entrada, el valor `true` se agregará a la semántica reconocida.  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 El ejemplo siguiente devuelve un <xref:System.Speech.Recognition.Grammar> que reconoce el comando "Set/cambio/Alter primer o segundo plano... [lista de color] ". <xref:System.Speech.Recognition.SemanticResultValue> y <xref:System.Speech.Recognition.SemanticResultKey> instancias (junto con <xref:System.Speech.Recognition.Choices> y <xref:System.Speech.Recognition.GrammarBuilder> objetos) se usan para definir la semántica que se puede analizar en el reconocimiento.  La semántica analizada determinará el color que se ha solicitado y si es el primer o segundo plano que se va a modificar.  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una instancia de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construida a partir de la instancia de <see cref="T:System.Speech.Recognition.SemanticResultValue" /> actual.</summary>
        <returns>Devuelve una instancia de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> construida a partir de la instancia de <see cref="T:System.Speech.Recognition.SemanticResultValue" /> actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El uso de <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> equivale a usar el <xref:System.Speech.Recognition.GrammarBuilder> constructor que toma un <xref:System.Speech.Recognition.SemanticResultValue> como un argumento (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea <xref:System.Speech.Recognition.Grammar> objetos que admiten los comandos para cambiar el color de fondo.  
  
 Un <xref:System.Speech.Recognition.Choices> objeto (`colorChoice`) que contiene la lista de opciones para los colores de fondo se rellena mediante la <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> método con <xref:System.Speech.Recognition.GrammarBuilder> instancias que se obtienen de la <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> método en el `SemanticResultValue` objetos creados de las cadenas de color.  
  
 Un <xref:System.Speech.Recognition.GrammarBuilder> , a continuación, se obtiene mediante una llamada a <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> en un <xref:System.Speech.Recognition.SemanticResultKey> instancia, que se usará para las opciones de semánticas en la clave del `colorChoice` instancia.  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>