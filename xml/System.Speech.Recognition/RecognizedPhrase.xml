<Type Name="RecognizedPhrase" FullName="System.Speech.Recognition.RecognizedPhrase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7b4bcf1096859683fe6b5c969f81cc456020402" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529519" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedPhrase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedPhrase extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedPhrase" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedPhrase" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedPhrase" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Contiene información detallada, generada por el reconocedor de voz, sobre la entrada reconocida.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase contiene información detallada sobre palabras y frases que se procesan durante las operaciones de reconocimiento de voz, incluidas las siguientes:  
  
-   El <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> referencias de propiedad el <xref:System.Speech.Recognition.Grammar> que el reconocedor se usa para identificar la entrada.  
  
-   El <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> propiedad contiene el texto normalizado para la frase.  
  
-   El <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> propiedad hace referencia a la información semántica contenida en el resultado. La información semántica es un diccionario de los nombres de claves y datos semánticos asociados.  
  
-   El <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad contiene una colección ordenada de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos que representan cada uno de ellos reconocen la palabra en la entrada. Cada unidad de word contiene formato de presentación, formato léxico e información de pronunciación de la palabra correspondiente.  
  
-   El <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> propiedad contiene información acerca de la sustitución de word especializadas.  
  
-   El <xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A> y <xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> propiedades contienen información acerca de las alternativas de reconocimiento que tienen la pronunciación iguales o similar.  
  
-   El valor de la <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> propiedad indica el grado de certeza, asignado por el reconocedor de voz, que una frase reconocida coincide con la entrada.  
  
 El reconocedor de voz devuelve resultados de reconocimiento en un <xref:System.Speech.Recognition.RecognitionResult> objeto, que hereda de <xref:System.Speech.Recognition.RecognizedPhrase>. El resultado del reconocimiento <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propiedad contiene una colección ordenada de <xref:System.Speech.Recognition.RecognizedPhrase> objetos, cada uno de los cuales es una coincidencia posible para la entrada al reconocedor.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un controlador para un <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, o <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> eventos y parte de la información asociada a la <xref:System.Speech.Recognition.RecognitionResult> objeto. La clase <xref:System.Speech.Recognition.RecognitionResult> se deriva de la clase <xref:System.Speech.Recognition.RecognizedPhrase>.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
  </Docs>
  <Members>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor, asignado por el reconocedor, que representa la probabilidad de coincidencia de <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> con una entrada determinada.</summary>
        <value>Una medida relativa de la certeza de reconocimiento correcto de una frase. El valor está entre 0,0 y 1,0, de poca a mucha confianza, respectivamente.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Las puntuaciones de confianza no indican la probabilidad absoluta que una frase se reconozca correctamente. En su lugar, las puntuaciones de confianza proporcionan un mecanismo para comparar la precisión relativa de varias alternativas de reconocimiento para una entrada determinada. Esto facilita devolver el resultado del reconocimiento sean más preciso. Por ejemplo, si una frase reconocida tiene una puntuación de confianza de 0,8, esto no significa que la frase tiene un 80% de probabilidad de ser la coincidencia correcta para la entrada.  Significa que la frase es más probable que sean la coincidencia correcta para la entrada que otros resultados que tienen confianza puntuaciones inferior 0,8.  
  
 Una puntuación de confianza por sí mismo no es significativa a menos que tenga resultados alternativos para comparar, desde la misma operación de reconocimiento o desde los reconocimientos anteriores de la misma entrada. Los valores se utilizan para clasificar candidato alternativo frases devueltos por la <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propiedad <xref:System.Speech.Recognition.RecognitionResult> objetos.  
  
 Valores de confianza son relativas y únicos para cada motor de reconocimiento. Los valores de confianza que devuelve dos motores de reconocimiento diferentes no se pueden comparar significativamente.  
  
 Un motor de reconocimiento de voz puede asignar una puntuación de confianza baja a la entrada de voz por diversos motivos, incluidos interferencias de fondo, inarticulate voz, o palabras imprevistos o secuencias de word. Si la aplicación utiliza un <xref:System.Speech.Recognition.SpeechRecognitionEngine> instancia, puede modificar el nivel de confianza en qué voz es aceptado o rechazado con uno de los datos proporcionados por el <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> métodos. Umbrales de confianza para el reconocedor compartido, administrado por <xref:System.Speech.Recognition.SpeechRecognizer>, están asociados a un perfil de usuario y almacena en el registro de Windows. Las aplicaciones no deben escribir cambios en el registro de las propiedades del reconocedor compartido.  
  
 El <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propiedad de la <xref:System.Speech.Recognition.RecognitionResult> objeto contiene una colección ordenada de <xref:System.Speech.Recognition.RecognizedPhrase> objetos, cada uno de los cuales es una coincidencia posible para la entrada al reconocedor. Las alternativas se ordenan de mayor a menor confianza.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra un controlador para un <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, o <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> eventos. En el ejemplo se muestra información asociada con el <xref:System.Speech.Recognition.RecognitionResult> objeto, algunas de las cuales se deriva de <xref:System.Speech.Recognition.RecognizedPhrase>. El controlador muestra las puntuaciones de confianza para una frase reconocida, así como para alternativas de reconocimiento.  
  
```csharp  
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Recognition result summary:");  
  Console.WriteLine(  
    "  Recognized phrase: {0}\n" +   
    "  Confidence score {1}\n" +   
    "  Grammar used: {2}\n",   
    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  
  
  // Display the semantic values in the recognition result.  
  Console.WriteLine("  Semantic results:");  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine("    The {0} city is {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  Console.WriteLine("  Word summary: ");  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    Console.WriteLine(  
      "    Lexical form ({1})" +  
      " Pronunciation ({0})" +  
      " Display form ({2})",  
      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  
  }  
  
  // Display information about the audio in the recognition result.  
  Console.WriteLine("  Input audio summary:\n" +  
    "    Candidate Phrase at:       {0} mSec\n" +  
    "    Phrase Length:             {1} mSec\n" +  
    "    Input State Time:          {2}\n" +  
    "    Input Format:              {3}\n",  
    e.Result.Audio.AudioPosition,  
    e.Result.Audio.Duration,  
    e.Result.Audio.StartTime,  
    e.Result.Audio.Format.EncodingFormat);  
  
  // Display information about the alternate recognitions in the recognition result.  
  Console.WriteLine("  Alternate phrase collection:");  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine("    Phrase: " + phrase.Text);  
    Console.WriteLine("    Confidence score: " + phrase.Confidence);  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="ConstructSmlFromSemantics">
      <MemberSignature Language="C#" Value="public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics" />
      <MemberSignature Language="VB.NET" Value="Public Function ConstructSmlFromSemantics () As IXPathNavigable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XPath::IXPathNavigable ^ ConstructSmlFromSemantics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XPath.IXPathNavigable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un documento de lenguaje de marcado semántico (SML) para la información semántica en el objeto <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <returns>Devuelve una descripción SML de la semántica del objeto <see cref="T:System.Speech.Recognition.RecognizedPhrase" /> como un objeto navegable [XPath](http://msdn.microsoft.com/library/ms256115.aspx).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener información sobre el lenguaje de marcado semántico (SML), consulte el [referencia del lenguaje de marcado semántico](http://msdn.microsoft.com/library/f9d83443-2cac-49bc-a447-210feda62f5d).  
  
   
  
## Examples  
 En el ejemplo siguiente, un método devuelve una cadena que contiene el SML para la semántica de una frase reconocida.  
  
```  
private string GetSemanticsSML(RecognizedPhrase result)  
{  
  if (result.Semantics.Count > 0)  
  {  
    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  
  }  
  else  
  {  
    return null;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Grammar">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.Grammar Grammar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.Grammar Grammar" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Grammar" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammar As Grammar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::Grammar ^ Grammar { System::Speech::Recognition::Grammar ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.Speech.Recognition.Grammar" /> que el reconocedor de voz utilizó para devolver <see cref="T:System.Speech.Recognition.RecognizedPhrase" />.</summary>
        <value>El objeto de gramática que el reconocedor de voz usó para identificar la entrada.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName="HomophoneGroupId">
      <MemberSignature Language="C#" Value="public int HomophoneGroupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HomophoneGroupId" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HomophoneGroupId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HomophoneGroupId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el identificador del grupo homófono para la frase.</summary>
        <value>El identificador del grupo homófono para la frase.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El reconocedor de voz asigna un identificador de grupo a todas las alternativas de reconocimiento que tienen la misma pronunciación. Para cada alternativo que tenga una pronunciación única, el reconocedor crea un grupo homófono. El reconocedor de voz genera el nuevo grupo de identificadores para cada operación de reconocimiento, y los identificadores no se puede usar para comparar las alternativas de generados a partir de las operaciones de reconocimiento independientes.  
  
 Por ejemplo, para obtener un resultado de reconocimiento que contenía a las alternativas de "el indicador", "la cola" y "el valor de ale", las dos primeras alternativas pertenezca a un grupo homófono y último alternativo sea el único miembro de un segundo grupo homófono.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      </Docs>
    </Member>
    <Member MemberName="Homophones">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Homophones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Homophones" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Homophones" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Homophones As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Homophones { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de las alternativas de reconocimiento que tienen la misma pronunciación que esta frase reconocida.</summary>
        <value>Una colección de solo lectura de las alternativas de reconocimiento que tienen la misma pronunciación que esta frase reconocida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad devuelve a todas las otras alternativas de reconocimiento que tienen la misma pronunciación que esta frase reconocida.  
  
 Por ejemplo, para obtener un resultado de reconocimiento que contenía las alternativas, "el indicador" y "la cola", la colección homófonos para la primera alternativa, "el indicador", contendría la segunda frase, "la cola". La colección homófonos para la segunda alternativa, "final", contendría la primera frase, "el indicador".  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementWordUnits">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Speech.Recognition.ReplacementText&gt; ReplacementWordUnits" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementWordUnits As Collection(Of ReplacementText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ ReplacementWordUnits { System::Collections::ObjectModel::Collection&lt;System::Speech::Recognition::ReplacementText ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Speech.Recognition.ReplacementText&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene información sobre el texto que el reconocedor de voz cambió como parte de la normalización de texto a voz.</summary>
        <value>Una colección de objetos <see cref="T:System.Speech.Recognition.ReplacementText" /> que describen las secciones de texto que el reconocedor de voz reemplazó cuando normalizó la entrada reconocida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como parte del proceso de reconocimiento de voz, el reconocedor de voz normaliza la entrada reconocida en un formato de presentación.  
  
 Por ejemplo, la entrada de voz, "veinticinco dólares", genera un resultado de reconocimiento donde la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad contiene las palabras, "20", "cinco" y "dólares" y el <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> propiedad contiene la frase, "$25,00". Para obtener más información acerca de la normalización de texto, vea el <xref:System.Speech.Recognition.ReplacementText> clase.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="T:System.Speech.Recognition.ReplacementText" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Semantics">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.SemanticValue Semantics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.SemanticValue Semantics" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Semantics" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Semantics As SemanticValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::SemanticValue ^ Semantics { System::Speech::Recognition::SemanticValue ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.SemanticValue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la información semántica asociada a la frase reconocida.</summary>
        <value>Información semántica asociada a la frase reconocida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una gramática de reconocimiento de voz puede incluir información semántica. Cuando un reconocedor de voz genera un resultado de reconocimiento de gramática de este tipo, la información semántica podría incluirse en el resultado de reconocimiento, según las reglas de la gramática y la entrada para el reconocimiento. Para obtener más información acerca de la información semántica, consulte [descripción semántica resultados](http://msdn.microsoft.com/library/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005) y <xref:System.Speech.Recognition.SemanticResultKey> y <xref:System.Speech.Recognition.SemanticResultValue> clases.  
  
   
  
## Examples  
 En el ejemplo siguiente se define un método que obtiene información semántica específica de una frase reconocida. Cuando este método vuelve, contiene el valor de la clave semántica, o null si el valor no se ha recuperado. Este método busca solo las claves de nivel superior. Puesto que la información semántica se incluyen en un árbol de valores, deben tener acceso a las claves de nivel inferior a través del valor devuelto de semántica.  
  
```  
static bool TryGetSemanticValue(  
      RecognizedPhrase phrase, string key, out SemanticValue value)  
{  
  value = null;  
  bool found = phrase.Semantics.ContainsKey(key);  
  if (found)  
  {  
    value = phrase.Semantics[key];  
  }  
  
  return found;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SemanticResultKey" />
        <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
        <altmember cref="T:System.Speech.Recognition.SemanticValue" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el texto normalizado generado por un reconocedor de voz desde la entrada reconocida.</summary>
        <value>El texto normalizado generado por un reconocedor de voz desde la entrada reconocida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Como parte del proceso de reconocimiento de voz, el reconocedor de voz realiza la normalización de texto a voz de la entrada reconocida en un formato de presentación.  
  
 Por ejemplo, la entrada de voz, "veinticinco dólares", genera un resultado de reconocimiento donde la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad contiene las palabras, "20", "cinco" y "dólares" y el <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> propiedad contiene la frase, "$25,00". Para obtener más información acerca de la normalización de texto, consulte <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="Words">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt; Words { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedWordUnit&gt; Words" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Words As ReadOnlyCollection(Of RecognizedWordUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ Words { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedWordUnit&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene las palabras generadas por un reconocedor de voz desde la entrada reconocida.</summary>
        <value>La colección de objetos <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> generados por un reconocedor de voz para la entrada reconocida.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad contiene las palabras generadas a partir de los datos por el reconocedor de voz antes de la normalización de texto a voz del reconocedor del resultado.  
  
 Por ejemplo, la entrada de voz, "veinticinco dólares", genera un resultado de reconocimiento donde la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad contiene las palabras, "20", "cinco" y "dólares" y el <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> propiedad contiene la frase, "$25,00". Para obtener más información acerca de la normalización de texto, consulte <xref:System.Speech.Recognition.ReplacementText>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Text" />
      </Docs>
    </Member>
  </Members>
</Type>