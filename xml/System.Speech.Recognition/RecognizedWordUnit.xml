<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="db8bbe70a61c7c005c717610d08e20178651bffc" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30529829" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="276c7-101">Proporciona la unidad atómica de voz reconocida.</span>
      <span class="sxs-lookup">
        <span data-stu-id="276c7-101">Provides the atomic unit of recognized speech.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="276c7-102">Todos los resultados devueltos por un motor de reconocimiento se construyen de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos.</span><span class="sxs-lookup"><span data-stu-id="276c7-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="276c7-103">Una matriz de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos es accesible para cualquier operación de reconocimiento a través de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad en la <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="276c7-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="276c7-104">Además de proporcionar una medida de certeza de reconocimiento (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) un <xref:System.Speech.Recognition.RecognizedWordUnit> instancia proporciona:</span><span class="sxs-lookup"><span data-stu-id="276c7-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="276c7-105">Representaciones de texto normalizado y exacto (o léxicos) para una palabra reconocida.</span><span class="sxs-lookup"><span data-stu-id="276c7-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="276c7-106">Para obtener más información, vea <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> y <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span><span class="sxs-lookup"><span data-stu-id="276c7-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="276c7-107">Información de pronunciación usando caracteres de un alfabeto fonético compatible, como el alfabeto fonético internacional (IPA) o el conjunto teléfono Universal (UPS).</span><span class="sxs-lookup"><span data-stu-id="276c7-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="276c7-108">Para obtener más información, vea <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span><span class="sxs-lookup"><span data-stu-id="276c7-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="276c7-109">El formato de impresión.</span><span class="sxs-lookup"><span data-stu-id="276c7-109">Formatting for printing.</span></span> <span data-ttu-id="276c7-110">Para obtener más información, consulte el <xref:System.Speech.Recognition.DisplayAttributes> clase y su <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="276c7-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="276c7-111">En el ejemplo siguiente se muestra una rutina de la utilidad (`stringFromWordArray`) que genera cadenas.</span><span class="sxs-lookup"><span data-stu-id="276c7-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="276c7-112">Las cadenas contienen la salida léxico (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normaliza el texto (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), o caracteres fonéticos desde el alfabeto fonético internacional (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="276c7-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="276c7-113">Se da formato a cadenas utilizando <xref:System.Speech.Recognition.DisplayAttributes> obtienen los objetos de la <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propiedad desde una <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos.</span><span class="sxs-lookup"><span data-stu-id="276c7-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="276c7-114">El <xref:System.Speech.Recognition.RecognizedWordUnit> obtienen los objetos de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad en la <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="276c7-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="276c7-115">El texto normalizado para una palabra reconocida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-115">The normalized text for a recognized word.</span>
          </span>
          <span data-ttu-id="276c7-116">Este valor puede ser <see langword="null" />, "" o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="confidence">
          <span data-ttu-id="276c7-117">Un valor <see langword="float" /> de 0,0 a 1,0 que indican la certeza de reconocimiento de palabras.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span>
          </span>
        </param>
        <param name="pronunciation">
          <span data-ttu-id="276c7-118">La ortografía fonética de una palabra reconocida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-118">The phonetic spelling of a recognized word.</span>
          </span>
          <span data-ttu-id="276c7-119">Este valor puede ser <see langword="null" />, "" o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="lexicalForm">
          <span data-ttu-id="276c7-120">El texto no normalizado para una palabra reconocida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-120">The unnormalized text for a recognized word.</span>
          </span>
          <span data-ttu-id="276c7-121">Este argumento es obligatorio y no puede ser <see langword="null" />, "" o <see cref="F:System.String.Empty" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span>
          </span>
        </param>
        <param name="displayAttributes">
          <span data-ttu-id="276c7-122">Define el uso del espacio en blanco para mostrar palabras reconocidas.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-122">Defines the use of white space to display recognized words.</span>
          </span>
        </param>
        <param name="audioPosition">
          <span data-ttu-id="276c7-123">La ubicación de la palabra reconocida en el flujo de entrada de audio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-123">The location of the recognized word in the audio input stream.</span>
          </span>
          <span data-ttu-id="276c7-124">Este valor puede ser <see cref="F:System.TimeSpan.Zero" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span>
          </span>
        </param>
        <param name="audioDuration">
          <span data-ttu-id="276c7-125">La longitud de la entrada de audio correspondiente a la palabra reconocida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-125">The length of the audio input corresponding to the recognized word.</span>
          </span>
          <span data-ttu-id="276c7-126">Este valor puede ser <see cref="F:System.TimeSpan.Zero" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="276c7-127">Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="276c7-128">Si `text` o `pronunciation` son `null`, "", o <xref:System.String.Empty> y <xref:System.Speech.Recognition.RecognizedWordUnit> se utiliza en una operación de reconocimiento, el motor de reconocimiento generará los valores apropiados en ningún resultado <xref:System.Speech.Recognition.RecognizedWordUnit> instancia.</span><span class="sxs-lookup"><span data-stu-id="276c7-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="276c7-129">Dirigir la construcción de <xref:System.Speech.Recognition.RecognizedWordUnit> instancias normalmente se usa solo cuando se emula operaciones de reconocimiento mediante la <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> o <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> métodos de la <xref:System.Speech.Recognition.SpeechRecognitionEngine> clase y la <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> o <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> métodos de la <xref:System.Speech.Recognition.SpeechRecognizer> clase.</span><span class="sxs-lookup"><span data-stu-id="276c7-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="276c7-130">Para aplicaciones reales, no crear directamente <xref:System.Speech.Recognition.RecognizedWordUnit>, en su lugar obtenerlo a través de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad en la <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="276c7-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="276c7-131">En el siguiente ejemplo es una prueba bastante elaborada de emulación, donde palabras nuevas son generadas a partir de la entrada y pasa en el emulador y, a continuación, comprobar.</span><span class="sxs-lookup"><span data-stu-id="276c7-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="276c7-132">Obtiene un valor, asignado por el reconocedor, que representa la probabilidad de coincidencia de una palabra reconocida con una entrada determinada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-132">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="276c7-133">Una medida relativa de la certeza de reconocimiento correcto de una palabra.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-133">A relative measure of the certainty of correct recognition for a word.</span>
          </span>
          <span data-ttu-id="276c7-134">El valor está entre 0,0 y 1,0, de poca a mucha confianza, respectivamente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-134">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="276c7-135">Las puntuaciones de confianza no indican la probabilidad absoluta que una palabra se reconozca correctamente.</span><span class="sxs-lookup"><span data-stu-id="276c7-135">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="276c7-136">En su lugar, las puntuaciones de confianza proporcionan un mecanismo para comparar la precisión relativa de varias alternativas de reconocimiento para una entrada determinada.</span><span class="sxs-lookup"><span data-stu-id="276c7-136">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="276c7-137">Esto facilita devolver el resultado del reconocimiento sean más preciso.</span><span class="sxs-lookup"><span data-stu-id="276c7-137">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="276c7-138">Por ejemplo, si una palabra reconocida tiene una puntuación de confianza de 0,8, esto no significa que la palabra tiene un 80% de probabilidad de ser la coincidencia correcta para la entrada.</span><span class="sxs-lookup"><span data-stu-id="276c7-138">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="276c7-139">Significa que la palabra es más probable que sean la coincidencia correcta para la entrada que otros resultados que tienen confianza puntuaciones inferior 0,8.</span><span class="sxs-lookup"><span data-stu-id="276c7-139">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="276c7-140">Una puntuación de confianza por sí mismo no es significativa a menos que tenga resultados alternativos para comparar, desde la misma operación de reconocimiento o desde los reconocimientos anteriores de la misma entrada.</span><span class="sxs-lookup"><span data-stu-id="276c7-140">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="276c7-141">Los valores devueltos por <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> son relativas y únicos para cada motor de reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="276c7-141">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="276c7-142">No hay ninguna definición de cómo se comparan los valores de confianza entre dos motores de reconocimiento diferente, ni el <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> de persona <xref:System.Speech.Recognition.RecognizedWordUnit> objetos definen el <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> de un <xref:System.Speech.Recognition.RecognizedPhrase>.</span><span class="sxs-lookup"><span data-stu-id="276c7-142">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="276c7-143">Un motor de reconocimiento de voz puede asignar una puntuación de confianza baja a la entrada de voz por diversos motivos, incluidos interferencias de fondo, inarticulate voz, o palabras imprevistos o secuencias de word.</span><span class="sxs-lookup"><span data-stu-id="276c7-143">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="276c7-144">Si la aplicación utiliza un <xref:System.Speech.Recognition.SpeechRecognitionEngine> instancia, puede modificar el nivel de confianza en qué voz es aceptado o rechazado con uno de los datos proporcionados por el <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="276c7-144">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="276c7-145">Umbrales de confianza para el reconocedor compartido, administrado por <xref:System.Speech.Recognition.SpeechRecognizer>, están asociados a un perfil de usuario y almacena en el registro de Windows.</span><span class="sxs-lookup"><span data-stu-id="276c7-145">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="276c7-146">Las aplicaciones no deben escribir cambios en el registro de las propiedades del reconocedor compartido.</span><span class="sxs-lookup"><span data-stu-id="276c7-146">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="276c7-147">Obtiene la información de formato usada para crear el resultado de texto de la instancia actual <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-147">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="276c7-148">Especifica el uso de espacio en blanco para mostrar el contenido de un objeto <see cref="T:System.Speech.Recognition.RecognizedWordUnit" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-148">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="276c7-149">El <xref:System.Speech.Recognition.DisplayAttributes> objeto devuelto por la <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propiedad especifica los espacios iniciales y finales que se usará con una palabra determinada, si existe.</span><span class="sxs-lookup"><span data-stu-id="276c7-149">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="276c7-150">Para obtener más información sobre cómo usar esta información de formato, vea el <xref:System.Speech.Recognition.DisplayAttributes> enumeración.</span><span class="sxs-lookup"><span data-stu-id="276c7-150">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="276c7-151">En el ejemplo siguiente se muestra una rutina de la utilidad (`stringFromWordArray`) que genera una cadena con el formato de una de estas tres maneras: léxicamente (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), o forma fonética (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="276c7-151">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="276c7-152">La salida de texto se obtiene de la <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> propiedad en un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que se obtiene de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad en un <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="276c7-152">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="276c7-153">Obtiene el texto sin normalizar de una palabra reconocida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-153">Gets the unnormalized text of a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="276c7-154">Devuelve un objeto <see cref="T:System.String" /> que contiene el texto de una palabra reconocida, sin ninguna normalización.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-154">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="276c7-155">En la mayoría de los casos, los valores devueltos por <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> y <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> son idénticas.</span><span class="sxs-lookup"><span data-stu-id="276c7-155">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="276c7-156">Sin embargo, los motores de reconocimiento pueden usar normalización de voz para devolver más fácil de usar o coloquiales representaciones de texto de entrada de audio.</span><span class="sxs-lookup"><span data-stu-id="276c7-156">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="276c7-157">Normalización de voz es el uso de construcciones especiales o símbolos para expresar la voz en la escritura.</span><span class="sxs-lookup"><span data-stu-id="276c7-157">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="276c7-158">Por ejemplo, normalización puede reemplazar las palabras "un dólar y dieciséis centavos" con "$1.16" en el texto de salida.</span><span class="sxs-lookup"><span data-stu-id="276c7-158">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="276c7-159">En el ejemplo siguiente se muestra una rutina de la utilidad que genera texto en uno de estos tres formatos: léxico (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) y fonética (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="276c7-159">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="276c7-160">Se obtiene el resultado de texto de un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que se obtiene de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad en la <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="276c7-160">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="276c7-161">Obtiene la ortografía fonética de una palabra reconocida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-161">Gets the phonetic spelling of a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="276c7-162">Una cadena de caracteres de un alfabeto fonético admitido, como el Alfabeto fonético internacional (IPA) o el Conjunto telefónico universal (UPS).</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-162">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="276c7-163">El contenido de <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicar qué pronunciación utiliza el motor de reconocimiento de voz para que coincida con la entrada de voz a uno de sus cargado <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="276c7-163">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="276c7-164">Pronunciaciones pueden definirse en los léxico interno del motor de reconocimiento de voz, en un documento de biblioteca de objetos que se vincula desde una gramática de reconocimiento en cargado <xref:System.Speech.Recognition.Grammar> objeto o insertadas en una gramática de reconocimiento en cargado <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="276c7-164">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="276c7-165">Un motor de reconocimiento de voz también puede crear las pronunciaciones raro palabras cuyas pronunciaciones no estén definidas en una biblioteca de objetos o gramática a la que el motor de reconocimiento de voz tiene acceso actualmente.</span><span class="sxs-lookup"><span data-stu-id="276c7-165">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="276c7-166">Muchas fuentes Unicode basado en Windows, como Courier New, admiten la visualización de cadenas de IPA.</span><span class="sxs-lookup"><span data-stu-id="276c7-166">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="276c7-167">Para obtener más información, consulte [alfabeto fonético internacional](http://go.microsoft.com/fwlink/?LinkId=58363).</span><span class="sxs-lookup"><span data-stu-id="276c7-167">For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="276c7-168">En el ejemplo siguiente se muestra una rutina de la utilidad que genera una cadena con uno de estos tres formatos posibles: léxico (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) y fonética (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="276c7-168">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="276c7-169">Se obtiene el resultado de texto de un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que se obtiene de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad en la <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="276c7-169">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="276c7-170">Obtiene el texto normalizado para una palabra reconocida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-170">Gets the normalized text for a recognized word.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="276c7-171">Una cadena que contiene la salida de texto normalizado para una palabra de entrada especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="276c7-171">A string that contains the normalized text output for a given input word.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="276c7-172">En la mayoría de los casos, los valores devueltos por <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> y <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> serán idénticos.</span><span class="sxs-lookup"><span data-stu-id="276c7-172">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="276c7-173">Sin embargo, los motores de reconocimiento pueden usar normalización de voz para devolver más fácil de usar o coloquiales representaciones de texto de entrada de audio.</span><span class="sxs-lookup"><span data-stu-id="276c7-173">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="276c7-174">Normalización de voz es el uso de construcciones especiales o símbolos para expresar la voz en la escritura.</span><span class="sxs-lookup"><span data-stu-id="276c7-174">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="276c7-175">Por ejemplo, normalización puede reemplazar las palabras "un dólar y dieciséis centavos" con "$1.16" en el texto de salida.</span><span class="sxs-lookup"><span data-stu-id="276c7-175">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="276c7-176">En el ejemplo siguiente se muestra una rutina de la utilidad que genera una cadena en uno de estos tres formatos: léxico (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalizado (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) y fonética (mediante <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span><span class="sxs-lookup"><span data-stu-id="276c7-176">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="276c7-177">Se obtiene el resultado de texto de un <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> de <xref:System.Speech.Recognition.RecognizedWordUnit> objetos, que se obtiene de la <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> propiedad en la <xref:System.Speech.Recognition.RecognizedPhrase> objeto.</span><span class="sxs-lookup"><span data-stu-id="276c7-177">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>