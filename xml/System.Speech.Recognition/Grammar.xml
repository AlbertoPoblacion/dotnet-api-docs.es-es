<Type Name="Grammar" FullName="System.Speech.Recognition.Grammar">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0590aacd1e6d847c085bb5c1a57748b1e452d7fa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30531169" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Grammar extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.Grammar" />
  <TypeSignature Language="VB.NET" Value="Public Class Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Un objeto en tiempo de ejecución que hace referencia a una gramática de reconocimiento de voz, que una aplicación puede usar para definir las restricciones para el reconocimiento de voz.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una gramática de reconocimiento de voz es un conjunto de reglas y restricciones que definen lo que un motor de reconocimiento de voz pueda reconocer como entrada significativo. Para obtener más información sobre cómo crear y usar las gramáticas de reconocimiento de voz, consulte [el reconocimiento de voz](http://msdn.microsoft.com/library/6a7dc524-07fc-4862-8d48-8c10dc64b919), [crear gramáticas mediante XML](http://msdn.microsoft.com/library/2d799487-49c6-4cc9-b42f-f71cd3824fe1), [crear gramáticas utilizando GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae), y [crear gramáticas usando SrgsGrammar](http://msdn.microsoft.com/library/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906).  
  
 Tras crear una gramática, debe generar en un <xref:System.Speech.Recognition.Grammar> del objeto que se puede cargar un motor de reconocimiento de voz y que la aplicación puede usar en tiempo de ejecución para administrar el reconocimiento de voz. Puede usar un <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor para crear un <xref:System.Speech.Recognition.Grammar> de la instancia de un <xref:System.Speech.Recognition.GrammarBuilder> o un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objeto, o desde un archivo o una <xref:System.IO.Stream> que contiene una descripción de una gramática en un formato compatible. Los formatos admitidos incluyen lo siguiente:  
  
-   Archivos de formato XML que cumplen con el W3C [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramáticas de que se han compilado en un archivo binario con una extensión de archivo .cfg  
  
 Constructores de gramática que acepten los archivos de gramática de formato XML en sus argumentos compilan las gramáticas XML a un formato binario para optimizar de carga y de consumo por un motor de reconocimiento de voz. Puede reducir la cantidad de tiempo necesario para construir un <xref:System.Speech.Recognition.Grammar> objeto desde una gramática XML con formato mediante la compilación de la gramática de antemano, mediante uno de los <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> métodos.  
  
 Motor de reconocimiento de voz de la aplicación, como administrado por un <xref:System.Speech.Recognition.SpeechRecognizer> o <xref:System.Speech.Recognition.SpeechRecognitionEngine> de objetos, puede cargar varias gramáticas de reconocimiento de voz. La aplicación de forma independiente puede habilitar o deshabilitar gramáticas individuales estableciendo el <xref:System.Speech.Recognition.Grammar.Enabled%2A> propiedad y modificar el comportamiento de reconocimiento a través de <xref:System.Speech.Recognition.Grammar> propiedades, como el <xref:System.Speech.Recognition.Grammar.Priority%2A> y <xref:System.Speech.Recognition.Grammar.Weight%2A> propiedades.  
  
 La gramática <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento se desencadena cuando la entrada coincide con una ruta de acceso a través de la gramática.  
  
> [!NOTE]
>  Es un procedimiento recomendado de comprobar la seguridad de cualquier URI o un archivo DLL que se utilizan para crear un <xref:System.Speech.Recognition.Grammar> objeto.  
>   
>  Windows y la plataforma de voz proporcionan seguridad para aplicaciones de construir un <xref:System.Speech.Recognition.Grammar> instancia desde un archivo DLL o desde una gramática que admite secuencias de comandos.  
>   
>  Secuencias de comandos <xref:System.Speech.Recognition.Grammar> objetos siempre se ejecutan como si descargado desde una página web en el `Internet Zone`. Common Language Runtime (CLR) aísla cualquier archivo DLL cargado para obtener una definición de gramática.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un <xref:System.Speech.Recognition.Grammar> objeto desde una gramática de reconocimiento de voz definida en un archivo XML (cities.xml). El contenido del archivo cities.xml aparece en el siguiente ejemplo XML.  
  
```csharp  
// Load a cities grammar from a local file and return the grammar object.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item> Seattle </item>  
      <item> Los Angeles </item>  
      <item> New York </item>  
      <item> Miami </item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
    <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar un <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor para crear un <xref:System.Speech.Recognition.Grammar> de la instancia de un <xref:System.Speech.Recognition.GrammarBuilder> o <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> objeto, o desde un archivo o una <xref:System.IO.Stream> que contiene una descripción de una gramática en un formato compatible. Los formatos admitidos incluyen lo siguiente:  
  
-   Archivos de formato XML que cumplen con el W3C [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramáticas de que se han compilado en un archivo binario con una extensión de archivo .cfg  
  
 Constructores de gramática que acepten los archivos de gramática de formato XML en sus argumentos compilan las gramáticas XML a un formato binario para optimizar de carga y de consumo por un motor de reconocimiento de voz. Puede reducir la cantidad de tiempo necesario para construir un <xref:System.Speech.Recognition.Grammar> objeto desde una gramática XML con formato mediante la compilación de la gramática de antemano, mediante uno de los <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> métodos.  
  
 Una gramática de reconocimiento de voz puede definir una regla de raíz. Para crear un <xref:System.Speech.Recognition.Grammar> objeto que especifica qué regla que desea utilizar como su regla raíz, use un constructor que acepta el `ruleName` parámetro.  
  
 Para crear un <xref:System.Speech.Recognition.Grammar> objeto que especifica un URI base para resolver las referencias de regla relativa, utilice un constructor que toma el `baseUri` parámetro.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Grammar ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Grammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Una secuencia que describe una gramática de reconocimiento de voz en un formato compatible.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un objeto <see cref="T:System.IO.Stream" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no pasa ningún parámetro al controlador de inicialización y la descripción no debe definir un controlador de inicialización que requiere argumentos.  
  
 Este constructor puede crear un <xref:System.Speech.Recognition.Grammar> instancia a partir de los siguientes formatos:  
  
-   Archivos de formato XML que cumplen con el W3C [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramáticas de que se han compilado en un archivo binario con una extensión de archivo .cfg  
  
 Este constructor compila los archivos de gramática de formato XML a un formato binario para optimizar de carga y de consumo por un motor de reconocimiento de voz. Puede reducir la cantidad de tiempo necesario para construir un <xref:System.Speech.Recognition.Grammar> objeto desde una gramática XML con formato mediante la compilación de la gramática de antemano, mediante uno de los <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> métodos.  
  
 Una gramática SRGS puede definir una regla de raíz. Para crear un <xref:System.Speech.Recognition.Grammar> desde una secuencia de objetos y especificar una regla de raíz, utilice la <xref:System.Speech.Recognition.Grammar.%23ctor%2A> o <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor.  
  
 Para crear un <xref:System.Speech.Recognition.Grammar> desde una secuencia de objetos y especificar un URI base que se utiliza para resolver las referencias de regla relativa, utilice el <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una gramática de reconocimiento de voz desde un archivo SRGS local (cities.xml) mediante una secuencia de archivos. El contenido del archivo cities.xml aparece después de ejemplo de C#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream and    
// return the new grammar.   
private static Grammar CreateGrammarFromStream()  
{  
  string fileName = @"c:\temp\cities.xml";  
  Grammar citiesGrammar =  
    new Grammar(new FileStream(fileName, FileMode.Open));  
  citiesGrammar.Name = "Stream Cities Grammar";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> describe una gramática que no contiene una regla raíz.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">El flujo no contiene una descripción completa de una gramática o describe una gramática que contiene una referencia de regla que no se puede resolver.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.GrammarBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::GrammarBuilder ^ builder);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">Una instancia de <see cref="T:System.Speech.Recognition.GrammarBuilder" /> que contiene las restricciones para la gramática de reconocimiento de voz.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un objeto <see cref="T:System.Speech.Recognition.GrammarBuilder" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener más información sobre el uso de la <xref:System.Speech.Recognition.GrammarBuilder> clase define ninguna gramática, consulte [crear gramáticas usando GrammarBuilder](http://msdn.microsoft.com/library/7e2cc577-cb05-4318-9da3-7c8675d3d9ae).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un uso de gramática de reconocimiento de voz <xref:System.Speech.Recognition.Choices> y <xref:System.Speech.Recognition.GrammarBuilder> objetos. El <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor crea un <xref:System.Speech.Recognition.Grammar> objeto desde el <xref:System.Speech.Recognition.GrammarBuilder> objeto.  
  
```csharp  
  
// Create a grammar using a GrammarBuilder and return the new grammar.   
private static Grammar CreateGrammarBuilderGrammar()  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  
  Choices cityChoice = new Choices (new string[]   
  {"Seattle", "New York", "Miami", "Los Angeles"});  
  
  builder.Append("I would like to fly from");  
  builder.Append(cityChoice);  
  builder.Append("to");  
  builder.Append(cityChoice);  
  
  Grammar citiesGrammar = new Grammar(builder);  
  citiesGrammar.Name = "GrammarBuilder Cities Grammar";  
  
  return citiesGrammar;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.GrammarBuilder" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Restricciones de la gramática de reconocimiento de voz.</param>
        <summary>Inicializa una nueva instancia de una clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un objeto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no pasa ningún parámetro al controlador de inicialización y el <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> no debe contener un controlador de inicialización que requiere argumentos.  
  
 Un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> puede tener una regla de raíz. Para crear un <xref:System.Speech.Recognition.Grammar> objeto que especifica una regla de raíz, use la <xref:System.Speech.Recognition.Grammar.%23ctor%2A> o <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor.  
  
 Para crear un reconocimiento de voz <xref:System.Speech.Recognition.Grammar> desde una <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> y especificar un URI base que se utiliza para resolver las referencias de regla relativa, utilice el <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una gramática de reconocimiento de voz en un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instancia, lo que, a continuación, se usa para construir un <xref:System.Speech.Recognition.Grammar> objeto.  
  
```csharp  
private static Grammar CreateSrgsDocumentGrammar()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Cities rule and add it to the document.  
  SrgsRule citiesRule = new SrgsRule("Cities");  
  
  SrgsOneOf cityChoice = new SrgsOneOf();  
  cityChoice.Add(new SrgsItem("Seattle"));  
  cityChoice.Add(new SrgsItem("Los Angeles"));  
  cityChoice.Add(new SrgsItem("New York"));  
  cityChoice.Add(new SrgsItem("Miami"));  
  
  citiesRule.Add(cityChoice);  
  document.Rules.Add(citiesRule);  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("I would like to fly from");  
  item.Add(new SrgsRuleRef(citiesRule));  
  item.Add(new SrgsText("to"));  
  item.Add(new SrgsRuleRef(citiesRule));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the Grammar object.  
  Grammar citiesGrammar = new Grammar(document);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar";  
  
  return citiesGrammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="srgsDocument" /> no contiene una regla raíz.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contiene una referencia de regla que no se puede resolver.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">La ruta de acceso del archivo que describe una gramática de reconocimiento de voz en un formato admitido.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un archivo.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no pasa ningún parámetro al controlador de inicialización y la descripción no debe definir un controlador de inicialización que requiere argumentos.  
  
 Este constructor puede crear un <xref:System.Speech.Recognition.Grammar> instancia a partir de los siguientes formatos:  
  
-   Archivos de formato XML que cumplen con el W3C [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramáticas de que se han compilado en un archivo binario con una extensión de archivo .cfg  
  
 Este constructor compila los archivos de gramática de formato XML a un formato binario para optimizar de carga y de consumo por un motor de reconocimiento de voz. Puede reducir la cantidad de tiempo necesario para construir un <xref:System.Speech.Recognition.Grammar> objeto desde una gramática XML con formato mediante la compilación de la gramática de antemano, mediante uno de los <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> métodos.  
  
 Una gramática SRGS puede definir una regla de raíz. Para crear un <xref:System.Speech.Recognition.Grammar> de una cadena de objetos y especificar una regla de raíz, utilice la <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor.  
  
 Para crear un <xref:System.Speech.Recognition.Grammar> objeto que especifica un URI base que se utiliza para resolver las referencias de regla relativa, abra el archivo en una secuencia de archivo y use el <xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=nameWithType> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga una gramática de reconocimiento de voz desde un archivo SRGS local para generar un <xref:System.Speech.Recognition.Grammar> objeto. El contenido del archivo cities.xml aparece en el ejemplo XML que sigue el ejemplo de C#.  
  
```csharp  
// Load a cities grammar from a local file and  
// return the new grammar.   
private static Grammar CreateGrammarFromFile()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml");  
  citiesGrammar.Name = "SRGS File Cities Grammar";  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contiene la cadena vacía (""), o el archivo describe una gramática que no contiene una regla raíz.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">El archivo no contiene una descripción válida ni describe una gramática que contiene una referencia de regla que no se puede resolver.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream">Una secuencia que describe una gramática de reconocimiento de voz en un formato compatible.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de la descripción de la gramática.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un <see cref="T:System.IO.Stream" /> y especifica una regla raíz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no pasa ningún parámetro al controlador de inicialización y la descripción no debe definir un controlador de inicialización que requiere argumentos.  
  
 Este constructor puede crear un <xref:System.Speech.Recognition.Grammar> instancia a partir de los siguientes formatos:  
  
-   Archivos de formato XML que cumplen con el W3C [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramáticas de que se han compilado en un archivo binario con una extensión de archivo .cfg  
  
 Este constructor compila los archivos de gramática de formato XML a un formato binario para optimizar de carga y de consumo por un motor de reconocimiento de voz. Puede reducir la cantidad de tiempo necesario para construir un <xref:System.Speech.Recognition.Grammar> objeto desde una gramática XML con formato mediante la compilación de la gramática de antemano, mediante uno de los <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> métodos.  
  
 Para crear un <xref:System.Speech.Recognition.Grammar> desde una secuencia y especificar un URI base que se utiliza para resolver las referencias de regla relativa, utilice el <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga un archivo local de SRGS (cities.xml) desde una secuencia de archivos y especifica una regla que se usará como la raíz de la gramática. El contenido del archivo cities.xml aparece en el ejemplo XML que sigue el ejemplo de C#.  
  
```csharp  
  
// Load a cities grammar from an I/O stream, use a specific  
// rule as the root of the grammar, and return the new grammar.   
private static Grammar CreateGrammarFromStream2()  
{  
  FileInfo file = new FileInfo(@"c:\temp\cities.xml");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), "Main");  
  citiesGrammar.Name = "Stream Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> no se puede resolver o no es público, o <paramref name="ruleName" /> es <see langword="null" /> y la descripción de gramática no define una regla raíz.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">El flujo no contiene una descripción válida o describe una gramática que contiene una referencia de regla que no se puede resolver.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Restricciones de la gramática de reconocimiento de voz.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <summary>Inicializa una nueva instancia de una clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un objeto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> y especifica una regla raíz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no pasa ningún parámetro al controlador de inicialización y el <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> no debe contener un controlador de inicialización que requiere argumentos.  
  
 Para crear un <xref:System.Speech.Recognition.Grammar> objeto desde un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> y especificar un URI base que se utiliza para resolver las referencias de regla relativa, utilice el <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una gramática de reconocimiento de voz en un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de la instancia y especifica una regla que se usará como la regla de raíz de la gramática. El ejemplo se crea un <xref:System.Speech.Recognition.Grammar> objeto desde el <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> de instancia y los carga en el motor de reconocimiento de voz.  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Speech.Recognition.SrgsGrammar;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create the SrgsDocument.  
        SrgsDocument document = new SrgsDocument();  
  
        // Create the Cities rule and add it to the document.  
        SrgsRule citiesRule = new SrgsRule("Cities");  
        citiesRule.Scope = SrgsRuleScope.Public;  
  
        SrgsOneOf cityChoice = new SrgsOneOf();  
        cityChoice.Add(new SrgsItem("Seattle"));  
        cityChoice.Add(new SrgsItem("Los Angeles"));  
        cityChoice.Add(new SrgsItem("New York"));  
        cityChoice.Add(new SrgsItem("Miami"));  
  
        citiesRule.Add(cityChoice);  
        document.Rules.Add(citiesRule);  
  
        // Create the Main rule and add it to the document.  
        SrgsRule mainRule = new SrgsRule("Main");  
        mainRule.Scope = SrgsRuleScope.Public;  
  
        mainRule.Add(new SrgsItem("I would like to fly from"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
        mainRule.Add(new SrgsItem("to"));  
        mainRule.Add(new SrgsRuleRef(citiesRule));  
  
        document.Rules.Add(mainRule);  
  
        // Create the Grammar object and specify which rule to use as the root.  
        Grammar citiesGrammar = new Grammar(document,"Main");  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(citiesGrammar);  
  
        // Attach a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting aynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> no se puede resolver o no es público, o <paramref name="ruleName" /> es <see langword="null" /> y <paramref name="srgsDocument" /> no contiene una regla raíz.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contiene una referencia de regla que no se puede resolver.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">La ruta de acceso del archivo que describe una gramática de reconocimiento de voz en un formato admitido.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de la descripción de la gramática.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un archivo y especifica una regla raíz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no pasa ningún parámetro al controlador de inicialización y la descripción no debe definir un controlador de inicialización que requiere argumentos.  
  
 Este constructor puede crear un <xref:System.Speech.Recognition.Grammar> instancia a partir de los siguientes formatos:  
  
-   Archivos de formato XML que cumplen con el W3C [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramáticas de que se han compilado en un archivo binario con una extensión de archivo .cfg  
  
 Este constructor compila los archivos de gramática de formato XML a un formato binario para optimizar de carga y de consumo por un motor de reconocimiento de voz. Puede reducir la cantidad de tiempo necesario para construir un <xref:System.Speech.Recognition.Grammar> objeto desde una gramática XML con formato mediante la compilación de la gramática de antemano, mediante uno de los <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> métodos.  
  
 Para crear un <xref:System.Speech.Recognition.Grammar> que especifica un URI base que se utiliza para resolver las referencias de regla relativa, abra una secuencia de archivo para el archivo y use el <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructor.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga un archivo local de SRGS (cities.xml) de un archivo y especifica una regla que se usará como la raíz de la gramática. El contenido del archivo cities.xml aparece en el ejemplo XML que sigue el ejemplo de C#.  
  
```csharp  
  
// Load a cities grammar from a local file, use a specific  
// rule as the root of the grammar, and return the new grammar.  
private static Grammar CreateGrammarFromFile2()  
{  
  Grammar citiesGrammar = new Grammar(@"c:\temp\cities.xml", "Main");  
  citiesGrammar.Name = "SRGS File Cities Grammar 2";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> no se puede resolver o no es público, <paramref name="path" /> es la cadena vacía (""), o <paramref name="ruleName" /> es <see langword="null" /> y la descripción de gramática no define una regla raíz.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">El archivo no contiene una descripción válida ni describe una gramática que contiene una referencia de regla que no se puede resolver.</exception>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> conectado a un objeto de entrada-salida (incluidos archivos, recursos de Visual Studio y archivos DLL) que contiene una especificación de gramática.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de la descripción de la gramática.</param>
        <param name="parameters">Parámetros que se pasarán al controlador de inicialización especificado por la propiedad <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> para el punto de entrada o la regla raíz de <see cref="T:System.Speech.Recognition.Grammar" /> que se va a crear. Este parámetro puede ser null.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un <see cref="T:System.IO.Stream" /> y especifica una regla raíz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También se pueden especificar parámetros para un controlador de inicialización.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> está conectado con una gramática que:  
  
-   No contiene la regla especificada en <paramref name="ruleName" />  
  
-   Requiere parámetros de inicialización distintos de los especificados en <paramref name="parameters" />  
  
-   Contiene una referencia de regla relativa que no puede resolver la regla <see cref="T:System.Uri" /> base predeterminada para las gramáticas</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="stream">Una secuencia que describe una gramática de reconocimiento de voz en un formato compatible.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de la descripción de la gramática.</param>
        <param name="baseUri">El URI base para resolver cualquier referencia de regla relativa en la descripción de gramática, o <see langword="null" />.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un flujo, especifica una regla raíz y define un Identificador uniforme de recursos (URI) base para resolver las referencias relativas de la regla.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no pasa ningún parámetro al controlador de inicialización y la descripción no debe definir un controlador de inicialización que requiere argumentos.  
  
 Este constructor puede crear un <xref:System.Speech.Recognition.Grammar> instancia a partir de los siguientes formatos:  
  
-   Archivos de formato XML que cumplen con el W3C [especificación de gramática de reconocimiento de voz (SRGS) versión 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)  
  
-   Gramáticas de que se han compilado en un archivo binario con una extensión de archivo .cfg  
  
 Este constructor compila los archivos de gramática de formato XML a un formato binario para optimizar de carga y de consumo por un motor de reconocimiento de voz. Puede reducir la cantidad de tiempo necesario para construir un <xref:System.Speech.Recognition.Grammar> objeto desde una gramática XML con formato mediante la compilación de la gramática de antemano, mediante uno de los <xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> métodos.  
  
 Este constructor no valida `baseUri`. Sin embargo, el `LoadGrammar` método de un <xref:System.Speech.Recognition.SpeechRecognitionEngine> o <xref:System.Speech.Recognition.SpeechRecognizer> objeto produce una excepción si no se puede resolver todas las referencias de regla en la descripción de la gramática. Si `baseUri` no `null`, el `LoadGrammar` método utiliza el URI para resolver las referencias de regla que de lo contrario no se puede resolver. Si `baseUri` representa un archivo, la `LoadGrammar` utiliza el archivo designado y el directorio del archivo cuando intenta resolver las referencias de regla relativa.  
  
   
  
## Examples  
 En el ejemplo siguiente se carga un archivo SRGS local (shuttle.xml) desde una secuencia de archivos. El archivo contiene una referencia de las reglas relativas a una regla en el archivo cities.xml y especifica un URI base se utiliza para resolver la referencia de la regla. El contenido de los archivos shuttle.xml y cities.xml aparece en el ejemplo XML que siga el ejemplo de C#.  
  
```csharp  
  
private static Grammar CreateGrammarFromStream3()  
{  
  FileInfo file = new FileInfo(@".\shuttle.xml");  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  
  citiesGrammar.Name = "Stream Cities Grammar 3";  
  return citiesGrammar;  
}  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- shuttle.xml:   
    Defines an SRGS grammar for asking about a shuttle service. This grammar  
    references a Cities rule that is defined in the cities.xml grammar. -->  
  
  <rule id="Main">  
    <item>  
      Can I get a shuttle in  
      <ruleref uri="cities.xml#Cities"/>  
    </item>  
  </rule>  
</grammar>  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> no se puede resolver o no es público, o <paramref name="ruleName" /> es <see langword="null" /> y la descripción de gramática no define una regla raíz.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">El flujo no contiene una descripción válida o describe una gramática que contiene una referencia de regla que no se puede resolver.</exception>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Una instancia de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> que contiene las restricciones para la gramática de reconocimiento de voz.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de la descripción de la gramática.</param>
        <param name="parameters">Parámetros que se pasarán al controlador de inicialización especificado por la propiedad <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> para el punto de entrada o la regla raíz de <see cref="T:System.Speech.Recognition.Grammar" /> que se va a crear. Este parámetro puede ser null.</param>
        <summary>Inicializa una nueva instancia de la clase de <see cref="T:System.Speech.Recognition.Grammar" /> a partir de una instancia de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, y especifica que el nombre de una regla sea el punto de entrada a la gramática.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También se pueden especificar parámetros para un controlador de inicialización.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   Alguno de los parámetros contiene un valor no válido.  
  
-   El <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> especificado por <paramref name="srgsDocument" /> no contiene la regla especificada por <paramref name="ruleName" />.  
  
-   El contenido de los parámetros de matriz no coincide con los argumentos de ninguno de los controladores de inicialización de la regla.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Restricciones de la gramática de reconocimiento de voz.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />.</param>
        <param name="baseUri">El URI base para resolver cualquier referencia de regla relativa en <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, o <see langword="null" />.</param>
        <summary>Inicializa una nueva instancia de una clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un objeto <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, especifica una regla raíz y define un Identificador uniforme de recursos (URI) base para resolver las referencias relativas de la regla.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no pasa ningún parámetro al controlador de inicialización y el <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> no debe contener un controlador de inicialización que requiere argumentos.  
  
 Este constructor no valida `baseUri`. Sin embargo, el `LoadGrammar` método de un <xref:System.Speech.Recognition.SpeechRecognitionEngine> o <xref:System.Speech.Recognition.SpeechRecognizer> objeto produce una excepción si no se puede resolver todas las referencias de regla en la descripción de la gramática. Si `baseUri` no `null`, el `LoadGrammar` método utiliza el URI para resolver las referencias de regla que de lo contrario no se puede resolver. Si `baseUri` representa un archivo, la `LoadGrammar` método usa el archivo designado y el directorio del archivo cuando intenta resolver las referencias de regla relativa.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea una gramática de reconocimiento de voz en un <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> que contiene una referencia de regla relativa al archivo cities.xml y especifica un URI que se utiliza para resolver la referencia de la regla. El contenido del archivo cities.xml aparece en el ejemplo XML que sigue el ejemplo de C#.  
  
```csharp  
  
private static Grammar CreateSrgsDocumentGrammar3()  
{  
  // Create the SrgsDocument.  
  SrgsDocument document = new SrgsDocument();  
  
  // Create the Main rule and add it to the document.  
  SrgsRule mainRule = new SrgsRule("Main");  
  mainRule.Scope = SrgsRuleScope.Public;  
  
  SrgsItem item = new SrgsItem("Can I get a shuttle in");  
  
  // Create a relative URI for the cities rule.  
  Uri ruleUri = new Uri("cities.xml#Cities", UriKind.Relative);  
  
  item.Add(new SrgsRuleRef(ruleUri));  
  
  mainRule.Add(item);  
  document.Rules.Add(mainRule);  
  
  // Set the root rule.  
  document.Root = mainRule;  
  
  // Create the grammar.  
  Uri baseUri = new Uri(@"file://c:\temp\");  
  Grammar citiesGrammar = new Grammar(document, null, baseUri);  
  citiesGrammar.Name = "SrgsDocument Cities Grammar 3";  
  
  return citiesGrammar;  
}  
  
```  
  
```xml  
  
<?xml version="1.0" encoding="UTF-8" ?>  
<grammar version="1.0" xml:lang="en-US"  
         xmlns="http://www.w3.org/2001/06/grammar"  
         tag-format="semantics/1.0" root="Main">  
  
  <!-- cities.xml:   
    Defines an SRGS grammar for requesting a flight. This grammar includes  
    a Cities rule that lists the cities that can be used for departures  
    and destinations. -->  
  
  <rule id="Main">  
    <item>  
      I would like to fly from <ruleref uri="#Cities"/>  
      to <ruleref uri="#Cities"/>  
    </item>  
  </rule>  
  
  <rule id="Cities" scope="public">  
    <one-of>  
      <item>Seattle</item>  
      <item>Los Angeles</item>  
      <item>New York</item>  
      <item>Miami</item>  
    </one-of>  
  </rule>  
</grammar>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ruleName" /> no se puede resolver o no es público, o <paramref name="ruleName" /> es <see langword="null" /> y <paramref name="srgsDocument" /> no contiene una regla raíz.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="srgsDocument" /> es <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="srgsDocument" /> contiene una referencia de regla que no se puede resolver.</exception>
        <altmember cref="N:System.Speech.Recognition.SrgsGrammar" />
        <altmember cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (string path, string ruleName, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, string ruleName, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ruleName As String, parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::String ^ path, System::String ^ ruleName, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="path">La ruta de acceso a un archivo, incluidos los archivos DLL, que contiene una especificación de gramática.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de la descripción de la gramática.</param>
        <param name="parameters">Parámetros que se pasarán al controlador de inicialización especificado por la propiedad <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> para el punto de entrada o la regla raíz de <see cref="T:System.Speech.Recognition.Grammar" /> que se va a crear. Este parámetro puede ser null.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de un archivo que contiene una definición de gramática y especifica que el nombre de una regla sea el punto de entrada a la gramática.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También se pueden especificar parámetros para un controlador de inicialización.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   Alguno de los parámetros contiene un valor no válido.  
  
-   El archivo especificado por <paramref name="path" /> no contiene ninguna gramática válida o la regla especificada en <paramref name="ruleName" />.  
  
-   El contenido de los parámetros de matriz no coincide con los argumentos de ninguno de los controladores de inicialización de la regla.  
  
-   La gramática tiene una referencia de regla relativa que la regla <see cref="T:System.Uri" /> base predeterminada no puede resolver para las gramáticas.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::IO::Stream ^ stream, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> conectado a un objeto de entrada-salida (incluidos archivos, recursos de Visual Studio y archivos DLL) que contiene una especificación de gramática.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de la descripción de la gramática.</param>
        <param name="baseUri">El URI base para resolver cualquier referencia de regla relativa en la descripción de gramática, o <see langword="null" />.</param>
        <param name="parameters">Parámetros que se pasarán al controlador de inicialización especificado por la propiedad <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> para el punto de entrada o la regla raíz de <see cref="T:System.Speech.Recognition.Grammar" /> que se va a crear. Este parámetro puede ser null.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> de <see cref="T:System.IO.Stream" /> y especifica una regla raíz y un URI base para resolver las referencias relativas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También se pueden especificar parámetros para un controlador de inicialización.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   Alguno de los parámetros contiene un valor no válido.  
  
-   <paramref name="stream" /> está conectado con una gramática que no contiene la regla especificada por <paramref name="ruleName" />.  
  
-   El contenido de los parámetros de matriz no coincide con los argumentos de ninguno de los controladores de inicialización de la regla.  
  
-   La gramática contiene una referencia de regla relativa que la regla <see cref="T:System.Uri" /> base predeterminada no puede resolver para las gramáticas o el URI proporcionado por <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, class System.Uri baseUri, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Grammar(System::Speech::Recognition::SrgsGrammar::SrgsDocument ^ srgsDocument, System::String ^ ruleName, Uri ^ baseUri, cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="srgsDocument" Type="System.Speech.Recognition.SrgsGrammar.SrgsDocument" />
        <Parameter Name="ruleName" Type="System.String" />
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="srgsDocument">Una instancia de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> que contiene las restricciones para la gramática de reconocimiento de voz.</param>
        <param name="ruleName">El identificador de la regla que se va a usar como punto de entrada de la gramática de reconocimiento de voz o <see langword="null" /> para usar la regla raíz predeterminada de la descripción de la gramática.</param>
        <param name="baseUri">El URI base para resolver cualquier referencia de regla relativa en la descripción de gramática, o <see langword="null" />.</param>
        <param name="parameters">Parámetros que se pasarán al controlador de inicialización especificado por la propiedad <see cref="P:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit" /> para el punto de entrada o la regla raíz de <see cref="T:System.Speech.Recognition.Grammar" /> que se va a crear. Este parámetro puede ser null.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.Grammar" /> a partir de una instancia de <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" />, y especifica que el nombre de una regla sea el punto de entrada a la gramática y un URI base para resolver las referencias relativas.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 También se pueden especificar parámetros para un controlador de inicialización.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">-   Alguno de los parámetros contiene un valor no válido.  
  
-   El <see cref="T:System.Speech.Recognition.SrgsGrammar.SrgsDocument" /> especificado por <paramref name="srgsDocument" /> no contiene la regla especificada en <paramref name="ruleName" />.  
  
-   El contenido de los parámetros de matriz no coincide con los argumentos de ninguno de los controladores de inicialización de la regla.  
  
-   La gramática tiene una referencia de regla relativa que la regla <see cref="T:System.Uri" /> base predeterminada no puede resolver para las gramáticas o el URI proporcionado por <paramref name="baseUri" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que controla si <see cref="T:System.Speech.Recognition.Grammar" /> se puede usar por un módulo de reconocimiento de voz para realizar el reconocimiento.</summary>
        <value>El <see langword="Enabled" /> propiedad devuelve <see langword="true" /> si un reconocedor de voz puede llevar a cabo reconocimiento con la gramática de reconocimiento de voz; en caso contrario, la propiedad devuelve <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una instancia de <xref:System.Speech.Recognition.Grammar> puede habilitarse o deshabilitarse independientemente de que se va a cargar por un motor de reconocimiento de voz.  
  
   
  
## Examples  
 En el ejemplo siguiente se escribe información sobre un <xref:System.Speech.Recognition.Grammar> el objeto a la [consola](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="IsStg">
      <MemberSignature Language="C#" Value="protected internal virtual bool IsStg { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStg" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.IsStg" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property IsStg As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool IsStg { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene si una gramática está fuertemente tipada.</summary>
        <value>La propiedad <see langword="IsStg" /> devuelve <see langword="true" /> si la gramática está fuertemente tipada; de lo contrario, la propiedad devuelve <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fuertemente tipadas <xref:System.Speech.Recognition.Grammar> objeto (`IsStg` es igual a `true`) puede devolver resultados fuertemente tipada (objetos, en lugar de texto sin formato) a una aplicación cliente. Por ejemplo, podría devolver una gramática fuertemente tipado <xref:System.DateTime> objetos en lugar de la entrada reconocida sin formato.  
  
 Puede implementar fuertemente tipada de las gramáticas de asociar código a las reglas de gramática. Como un motor de reconocimiento procesa una regla determinada, toma como entrada los resultados parciales actuales, se ejecuta el código asociado y la información de texto se convierte en objetos de tipo completo. Esto permite que un cliente realizar más fácilmente el uso de comprobación semántica mejorada, la compatibilidad con varias referencias culturales y la lógica de gramática interno.  
  
 Instancias de fuertemente tipado <xref:System.Speech.Recognition.Grammar> normalmente obtienen los objetos de recursos en un ensamblado como un <xref:System.Type> de Common Language Runtime (CLR). Los tipos localizados que se utilizan para admitir varios idiomas son algunos ejemplos de estas <xref:System.Speech.Recognition.Grammar> objetos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Heredar las gramáticas fuertemente tipado <see cref="T:System.Speech.Recognition.Grammar" /> necesita invalidar el comportamiento predeterminado de <see langword="IsStg" />, que consiste en devolver <see langword="false" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public bool Loaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loaded" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Loaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Loaded { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene si un objeto <see cref="T:System.Speech.Recognition.Grammar" /> ha sido cargado por un reconocedor de voz.</summary>
        <value>La propiedad <see langword="Loaded" /> devuelve <see langword="true" /> si la gramática de reconocimiento de voz a la que se hace referencia está cargada actualmente en un módulo de reconocimiento de voz; si no la propiedad devuelve <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una vez un <xref:System.Speech.Recognition.Grammar> se han cargado, los valores de <xref:System.Speech.Recognition.Grammar.Weight%2A>, y <xref:System.Speech.Recognition.Grammar.Priority%2A> no se puede cambiar.  
  
   
  
## Examples  
 En el ejemplo siguiente se escribe información sobre un <xref:System.Speech.Recognition.Grammar> el objeto a la [consola](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="LoadLocalizedGrammarFromType">
      <MemberSignature Language="C#" Value="public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, params object[] onInitParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType(class System.Type type, object[] onInitParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Speech::Recognition::Grammar ^ LoadLocalizedGrammarFromType(Type ^ type, ... cli::array &lt;System::Object ^&gt; ^ onInitParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.Grammar</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="onInitParameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">En un ensamblado, el <see cref="T:System.Type" /> de un objeto basado en <see cref="T:System.Speech.Recognition.Grammar" />.</param>
        <param name="onInitParameters">Parámetros que se pasarán a un método de inicialización del objeto localizado basado en <see cref="T:System.Speech.Recognition.Grammar" />. Este parámetro puede ser null.</param>
        <summary>El método <see langword="LoadLocalizedGrammarFromType" /> devuelve una instancia localizada de un objeto <see cref="T:System.Speech.Recognition.Grammar" /> derivado de <see cref="T:System.Type" />.</summary>
        <returns>El método <see langword="LoadLocalizedGrammarFromType" /> devuelve un objeto válido basándose en <see cref="T:System.Speech.Recognition.Grammar" />, o <see langword="null" /> si se ha producido un error.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Adaptado gramáticas obtenidas con `LoadLocalizedGrammarFromType` son normalmente fuertemente tipada (consulte <xref:System.Speech.Recognition.Grammar.IsStg%2A> para obtener más información acerca de las gramáticas fuertemente tipadas). Si `onInitParameters` es una referencia nula (Nothing en Visual Basic) la versión traducida gramática debe tener ningún método de inicialización, o un método que no toma ningún argumento.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de un objeto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La propiedad <see langword="Name" /> devuelve el nombre del objeto <see cref="T:System.Speech.Recognition.Grammar" />. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se crea dos <xref:System.Speech.Recognition.Grammar> objetos, uno por dígitos y otro para las fracciones. Los objetos de gramática se les asignan las prioridades y pesos relativos y nombres y cargados por un reconocedor de voz en curso. El `CreateDigitsGrammar`, `CreateFractionsGrammar`, y `recognizer_SpeechRecognized` métodos no se muestra aquí.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Priority { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de prioridad de un objeto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La propiedad <see langword="Priority" /> devuelve un valor entero que representa la prioridad relativa de un <see cref="T:System.Speech.Recognition.Grammar" /> concreto. El intervalo es de -128 a 127 inclusive. El valor predeterminado es 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `Priority` propiedad se utiliza para seleccionar una gramática cuando más de una gramática generará un resultado de reconocimiento idéntico. Si un reconocedor de voz tiene más de una gramática de reconocimiento voz cargado y habilitado que coinciden con la entrada, y la búsqueda de coincidencias es el mejor resultado del reconocedor, entonces el reconocedor utiliza la gramática que tiene el mejor `Priority`. Si las gramáticas que generan el resultado del reconocimiento idéntico también tienen el mismo `Priority` valor, entonces la gramática que el reconocedor utiliza es indefinida.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea dos <xref:System.Speech.Recognition.Grammar> objetos, uno por dígitos y otro para las fracciones. El <xref:System.Speech.Recognition.Grammar> objetos se les asignan las prioridades y pesos relativos y nombres y se cargan por un reconocedor de voz en curso. El `CreateDigitsGrammar`, `CreateFractionsGrammar`, y `recognizer_SpeechRecognized` métodos no se muestra aquí.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Weight" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="ResourceName">
      <MemberSignature Language="C#" Value="protected string ResourceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.ResourceName" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::String ^ ResourceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor con el nombre de un recurso binario usado para cargar el <see cref="T:System.Speech.Recognition.Grammar" /> actual.</summary>
        <value>La propiedad <see langword="ResourceName" /> devuelve el nombre del recurso binario del que se cargó la gramática fuertemente tipada, usado por <see cref="T:System.Speech.Recognition.Grammar" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleName">
      <MemberSignature Language="C#" Value="public string RuleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RuleName" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.RuleName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RuleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RuleName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la regla raíz o el punto de entrada de un objeto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>La propiedad <see langword="RuleName" /> devuelve el identificador de la regla raíz de la gramática de reconocimiento de voz a la que se hace referencia. El valor predeterminado es <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para construir un <xref:System.Speech.Recognition.Grammar> objeto y establecer el nombre de su regla de raíz, utilice uno de los <xref:System.Speech.Recognition.Grammar.%23ctor%2A> constructores que toma el `ruleName` parámetro.  
  
 Si la regla de raíz de un <xref:System.Speech.Recognition.Grammar> no tiene ningún nombre, la propiedad devuelve `null`.  
  
 Las reglas de raíz de <xref:System.Speech.Recognition.Grammar> instancias construyen a partir de <xref:System.Speech.Recognition.GrammarBuilder> objetos suelen no tienen ningún nombre, por lo que <xref:System.Speech.Recognition.Grammar.RuleName%2A> devuelve `null`.  
  
   
  
## Examples  
 En el ejemplo siguiente se escribe información sobre un <xref:System.Speech.Recognition.Grammar> el objeto a la [consola](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
  
private static void DumpGrammarStatus(Grammar item)  
{  
  Console.WriteLine("Grammar name is {0}:", item.Name);  
  Console.WriteLine("  The Grammar {0} loaded.",  
    item.Loaded ? "is" : "is not");  
  Console.WriteLine("  The Grammar {0} enabled.",  
    item.Enabled ? "is" : "is not");  
  if (item.RuleName != null)  
  {  
    Console.WriteLine("  The root rule is {0}.", item.RuleName);  
  }  
  else  
  {  
    Console.WriteLine("  The Grammar does not specify a root rule.");  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Se genera cuando un reconocedor de voz realiza el reconocimiento usando el objeto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El reconocedor de voz también genera un `SpeechRecognized` eventos cuando lo reconoce las entradas. El <xref:System.Speech.Recognition.Grammar> del objeto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento se produce antes que el reconocedor de voz `SpeechRecognized` eventos. Para obtener más información, consulte el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, y <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> eventos.  
  
 Todas las tareas específicas a una gramática determinada siempre deben controlarse con controladores para la <xref:System.Speech.Recognition.Grammar> del objeto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el uso de un controlador de eventos para el <xref:System.Speech.Recognition.Grammar> del objeto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos. Genera los resultados de reconocimiento en el [consola](http://go.microsoft.com/fwlink/?LinkId=159613).  
  
```csharp  
public partial class Form1 : Form  
{  
  SpeechRecognitionEngine sre;  
  
  public Form1()  
  {  
  InitializeComponent();  
  
  // Create an in-process speech recognizer.  
  sre = new SpeechRecognitionEngine();  
  
  // Configure input to the speech recognizer.  
  sre.SetInputToDefaultAudioDevice();  
  
  // Create a simple grammar and load it.  
  Grammar testGrammar = new Grammar(new GrammarBuilder("testing"));  
  sre.LoadGrammarAsync(testGrammar);  
  
  // Add a handler for the grammar's speech recognized event.  
  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  
  
  // Start asynchronous speech recognition.  
  sre.RecognizeAsync();  
  }  
  
  // Handle the grammar's SpeechRecognized event, output the recognized text.  
  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
  {  
    Console.WriteLine("Recognized text: " + e.Result.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
    <Member MemberName="StgInit">
      <MemberSignature Language="C#" Value="protected void StgInit (object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void StgInit(object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.Grammar.StgInit(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub StgInit (parameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void StgInit(cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="parameters">Parámetros que se pasarán para inicializar la gramática fuertemente tipada. Este parámetro puede ser NULL.</param>
        <summary>El método <see langword="StgInit" /> inicializa una gramática fuertemente tipada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Fuertemente tipadas <xref:System.Speech.Recognition.Grammar> objeto (`IsStg` es igual a `true`) puede devolver resultados fuertemente tipada (objetos, en lugar de texto sin formato) a una aplicación cliente. Por ejemplo, podría devolver una gramática fuertemente tipado <xref:System.DateTime> objetos en lugar de la entrada reconocida sin formato.  
  
 Puede implementar fuertemente tipada de las gramáticas de asociar código a las reglas de gramática. Como un motor de reconocimiento procesa una regla determinada, toma como entrada los resultados parciales actuales, se ejecuta el código asociado y la información de texto se convierte en objetos de tipo completo. Esto permite que un cliente realizar más fácilmente el uso de comprobación semántica mejorada, la compatibilidad con varias referencias culturales y la lógica de gramática interno.  
  
 Instancias de fuertemente tipado <xref:System.Speech.Recognition.Grammar> normalmente obtienen los objetos de recursos en un ensamblado como un <xref:System.Type> de Common Language Runtime (CLR). Los tipos localizados que se utilizan para admitir varios idiomas son algunos ejemplos de estas <xref:System.Speech.Recognition.Grammar> objetos.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Si una gramática fuertemente tipado requiere inicialización, <see langword="StgInit" /> debe llamarse en un constructor o un método de inicialización.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Weight">
      <MemberSignature Language="C#" Value="public float Weight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Weight" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.Grammar.Weight" />
      <MemberSignature Language="VB.NET" Value="Public Property Weight As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Weight { float get(); void set(float value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor del ancho en píxeles del objeto <see cref="T:System.Speech.Recognition.Grammar" />.</summary>
        <value>El <see langword="Weight" /> devuelve de la propiedad que indica el peso relativo que se debe asignar una instancia del motor de reconocimiento la gramática al procesar la entrada de voz de valor de punto flotante. El intervalo es de 0,0 a 1,.0 inclusive. El valor predeterminado es 1.0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debido a la complejidad del uso de un motor de reconocimiento de **peso**, su efecto en el rendimiento de una gramática determinada no es directamente predecible que la del <xref:System.Speech.Recognition.Grammar.Priority%2A>.  
  
 El reconocimiento de voz es un sistema ponderado. Evalúa todas las rutas de acceso de reconocimiento posibles basadas en una combinación del peso de la gramática, los pesos definidos para alternativas dentro de la gramática y las probabilidades definidas por los modelos de voz. El motor de reconocimiento de voz usa la combinación de estos pesos y las probabilidades para rangos reconocimientos alternativas posibles. Las gramáticas con ponderaciones mayores aportará más a la clasificación de alternativas de reconocimiento de las gramáticas con pesos inferior.  
  
 El efecto de la <xref:System.Speech.Recognition.Grammar.Weight%2A> la propiedad en un reconocedor de voz es dependiente de la implementación del reconocedor. Aunque el <xref:System.Speech.Recognition.Grammar.Weight%2A> propiedad puede utilizarse para optimizar la precisión del reconocimiento de voz para una aplicación, se debe usar solo controla después práctico de diagnóstico de un entorno determinado reconocimiento y con toda la información sobre el motor de reconocimiento en uso.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea dos <xref:System.Speech.Recognition.Grammar> objetos, uno por dígitos y otro para las fracciones. El <xref:System.Speech.Recognition.Grammar> objetos se les asignan las prioridades y pesos relativos y nombres y se cargan por un reconocedor de voz en curso. El `CreateDigitsGrammar`, `CreateFractionsGrammar`, y `recognizer_SpeechRecognized` métodos no se muestra aquí.  
  
```csharp  
  
// Create a Grammar for recognizing numeric digits.  
Grammar digitsGrammar = CreateDigitsGrammar();  
digitsGrammar.Name = "Digits Grammar";  
digitsGrammar.Priority = 2;  
digitsGrammar.Weight = 0.6f;  
  
// Create a Grammar for recognizing fractions.  
Grammar fractionsGrammar = CreateFractionsGrammar();  
fractionsGrammar.Name = "Fractions Grammar";  
fractionsGrammar.Priority = 1;  
fractionsGrammar.Weight = 1f;  
  
// Create an in-process speech recognizer.  
SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  
  
recognizer.SpeechRecognized +=  
  new EventHandler<SpeechRecognizedEventArgs>(  
    recognizer_SpeechRecognized);  
  
// Load the digits and fractions Grammar objects.  
recognizer.LoadGrammar(digitsGrammar);  
recognizer.LoadGrammar(fractionsGrammar);  
  
// Start recognition.  
recognizer.SetInputToDefaultAudioDevice();  
recognizer.RecognizeAsync(RecognizeMode.Multiple);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.Grammar.Loaded" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Enabled" />
        <altmember cref="P:System.Speech.Recognition.Grammar.Priority" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
      </Docs>
    </Member>
  </Members>
</Type>