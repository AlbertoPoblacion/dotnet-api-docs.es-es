<Type Name="SpeechRecognizer" FullName="System.Speech.Recognition.SpeechRecognizer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="54dafc58fe7a053f0a0275a5b17ff4fd4b6eea8e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36409724" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SpeechRecognizer : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognizer extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognizer" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognizer&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognizer : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognizer = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="d327f-101">Provides access to the shared speech recognition service available on the Windows desktop.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d327f-101">Provides access to the shared speech recognition service available on the Windows desktop.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-102">Las aplicaciones utilizan el reconocedor compartido para acceder el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-102">Applications use the shared recognizer to access Windows Speech Recognition.</span></span> <span data-ttu-id="d327f-103">Use la <xref:System.Speech.Recognition.SpeechRecognizer> va a agregar a la experiencia del usuario de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-103">Use the <xref:System.Speech.Recognition.SpeechRecognizer> object to add to the Windows speech user experience.</span></span>  
  
 <span data-ttu-id="d327f-104">Esta clase proporciona control sobre los distintos aspectos del proceso de reconocimiento de voz:</span><span class="sxs-lookup"><span data-stu-id="d327f-104">This class provides control over various aspects of the speech recognition process:</span></span>  
  
-   <span data-ttu-id="d327f-105">Para administrar las gramáticas de reconocimiento de voz, use la <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>, y <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A>.</span><span class="sxs-lookup"><span data-stu-id="d327f-105">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A>, and <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A>.</span></span>  
  
-   <span data-ttu-id="d327f-106">Para obtener información acerca de voz actual operaciones de reconocimiento, suscribirse a la <xref:System.Speech.Recognition.SpeechRecognizer>del <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, y <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-106">To get information about current speech recognition operations, subscribe to the <xref:System.Speech.Recognition.SpeechRecognizer>’s <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events.</span></span>  
  
-   <span data-ttu-id="d327f-107">Para ver o modificar el número de resultados alternativos devuelve el reconocedor, use la <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-107">To view or modify the number of alternate results the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> property.</span></span> <span data-ttu-id="d327f-108">El reconocedor devuelve resultados de reconocimiento en un <xref:System.Speech.Recognition.RecognitionResult> objeto.</span><span class="sxs-lookup"><span data-stu-id="d327f-108">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="d327f-109">Para obtener acceso o supervisar el estado del reconocedor compartido, utilice la <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, y <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> propiedades y la <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged>, y <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-109">To access or monitor the state of the shared recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, and <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> properties and the <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred>, <xref:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged>, and <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> events.</span></span>  
  
-   <span data-ttu-id="d327f-110">Para sincronizar los cambios al reconocedor, use la <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-110">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="d327f-111">El reconocedor compartido usa más de un subproceso para realizar tareas.</span><span class="sxs-lookup"><span data-stu-id="d327f-111">The shared recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="d327f-112">Para emular la entrada para el reconocedor compartido, utilice la <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> y <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="d327f-112">To emulate input to the shared recognizer, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="d327f-113">La configuración de reconocimiento de voz de Windows se administra mediante el uso de la **propiedades de voz** cuadro de diálogo de la **el Panel de Control**.</span><span class="sxs-lookup"><span data-stu-id="d327f-113">The configuration of Windows Speech Recognition is managed by the use of the **Speech Properties** dialog in the **Control Panel**.</span></span> <span data-ttu-id="d327f-114">Esta interfaz se utiliza para seleccionar el motor de reconocimiento de voz de escritorio de forma predeterminada y language, el dispositivo de entrada de audio y el comportamiento de suspensión del reconocimiento de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-114">This interface is used to select the default desktop speech recognition engine and language, the audio input device, and the sleep behavior of speech recognition.</span></span> <span data-ttu-id="d327f-115">Si se cambia la configuración de reconocimiento de voz de Windows mientras se ejecuta la aplicación, (por ejemplo, si el reconocimiento de voz está deshabilitado o se cambia el idioma de entrada), el cambio afecta a todos los <xref:System.Speech.Recognition.SpeechRecognizer> objetos.</span><span class="sxs-lookup"><span data-stu-id="d327f-115">If the configuration of Windows Speech Recognition is changed while the application is running, (for instance, if speech recognition is disabled or the input language is changed), the change affects all <xref:System.Speech.Recognition.SpeechRecognizer> objects.</span></span>  
  
 <span data-ttu-id="d327f-116">Para crear un reconocedor de voz en el proceso que es independiente del reconocimiento de voz de Windows, use la <xref:System.Speech.Recognition.SpeechRecognitionEngine> clase.</span><span class="sxs-lookup"><span data-stu-id="d327f-116">To create an in-process speech recognizer that is independent of Windows Speech Recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d327f-117">Llame siempre a <xref:System.Speech.Recognition.SpeechRecognizer.Dispose%2A> antes de liberar la última referencia al reconocedor de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-117">Always call <xref:System.Speech.Recognition.SpeechRecognizer.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="d327f-118">En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llama al objeto de reconocedor `Finalize` método.</span><span class="sxs-lookup"><span data-stu-id="d327f-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-119">En el siguiente ejemplo es parte de una aplicación de consola que se carga una gramática de reconocimiento de voz y muestra la entrada emulado asincrónica, los resultados del reconocimiento asociados y los eventos asociados generados por el reconocedor de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-119">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  <span data-ttu-id="d327f-120">Si no se está ejecutando el reconocimiento de voz de Windows, a continuación, inicie esta aplicación también se iniciará el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-120">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="d327f-121">Si el reconocimiento de voz de Windows se encuentra en la **espera** estado, a continuación, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> siempre devuelve null.</span><span class="sxs-lookup"><span data-stu-id="d327f-121">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.   
        // This matches the grammar and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.  
        // This does not match the grammar or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the SpeechRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognizer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d327f-122">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-122">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-123">Cada <xref:System.Speech.Recognition.SpeechRecognizer> objeto mantiene un conjunto independiente de las gramáticas de reconocimiento de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-123">Each <xref:System.Speech.Recognition.SpeechRecognizer> object maintains a separate set of speech recognition grammars.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-124">En el siguiente ejemplo es parte de una aplicación de consola que se carga una gramática de reconocimiento de voz y muestra la entrada emulado asincrónica, los resultados del reconocimiento asociados y los eventos asociados generados por el reconocedor de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-124">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="d327f-125">Si no se está ejecutando el reconocimiento de voz de Windows, a continuación, inicie esta aplicación también se iniciará el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-125">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="d327f-126">Si el reconocimiento de voz de Windows se encuentra en la **espera** estado, a continuación, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> siempre devuelve null.</span><span class="sxs-lookup"><span data-stu-id="d327f-126">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.   
        // This matches the grammar and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // Start asynchronous emulated recognition.  
        // This does not match the grammar or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the SpeechRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-127">Gets the format of the audio being received by the speech recognizer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-127">Gets the format of the audio being received by the speech recognizer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-128">El formato de entrada de audio para el reconocimiento de voz, o <see langword="null" /> si no se ha configurado la entrada para el reconocimiento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-128">The audio input format for the speech recognizer, or <see langword="null" /> if the input to the recognizer is not configured.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-129">Gets the level of the audio being received by the speech recognizer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-129">Gets the level of the audio being received by the speech recognizer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-130">El nivel de audio de la entrada para el reconocimiento de voz, comprendido entre 0 y 100.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-130">The audio level of the input to the speech recognizer, from 0 through 100.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-131">Occurs when the shared recognizer reports the level of its audio input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-131">Occurs when the shared recognizer reports the level of its audio input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-132">El reconocedor genera este evento varias veces por segundo.</span><span class="sxs-lookup"><span data-stu-id="d327f-132">The recognizer raises this event multiple times per second.</span></span> <span data-ttu-id="d327f-133">En el equipo en el que se ejecuta la aplicación en función de la frecuencia con la que se genera el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-133">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="d327f-134">Para obtener el nivel de audio en el momento del evento, use la <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> propiedad del asociado <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="d327f-134">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="d327f-135">Para obtener el nivel de audio actual de la entrada al reconocedor, use el reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-135">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="d327f-136">Cuando se crea un delegado para un `AudioLevelUpdated` evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-136">When you create a delegate for an `AudioLevelUpdated` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-137">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-137">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-138">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-138">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-139">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-139">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-140">En el ejemplo siguiente se agrega un controlador para el `AudioLevelUpdated` eventos a un <xref:System.Speech.Recognition.SpeechRecognizer> objeto.</span><span class="sxs-lookup"><span data-stu-id="d327f-140">The following example adds a handler for the `AudioLevelUpdated` event to a <xref:System.Speech.Recognition.SpeechRecognizer> object.</span></span> <span data-ttu-id="d327f-141">El controlador genera el nuevo nivel de audio en la consola.</span><span class="sxs-lookup"><span data-stu-id="d327f-141">The handler outputs the new audio level to the console.</span></span>  
  
```csharp  
private SpeechRecognizer recognizer;  
  
// Initialize the SpeechRecognizer object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognizer();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
    new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-142">Gets the current location in the audio stream being generated by the device that is providing input to the speech recognizer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-142">Gets the current location in the audio stream being generated by the device that is providing input to the speech recognizer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-143">La ubicación actual en la secuencia de entrada audio del reconocedor de voz a través del cual ha recibido una entrada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-143">The current location in the speech recognizer's audio input stream through which it has received input.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-144">El reconocedor compartido recibe la entrada mientras se ejecuta el reconocimiento de voz de escritorio.</span><span class="sxs-lookup"><span data-stu-id="d327f-144">The shared recognizer receives input while the desktop speech recognition is running.</span></span>  
  
 <span data-ttu-id="d327f-145">El `AudioPosition` propiedad hace referencia la posición del dispositivo de entrada en su secuencia de audio generado.</span><span class="sxs-lookup"><span data-stu-id="d327f-145">The `AudioPosition` property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="d327f-146">Por el contrario, el <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> propiedad hace referencia a posición del reconocedor en el procesamiento de entrada de audio.</span><span class="sxs-lookup"><span data-stu-id="d327f-146">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property references the recognizer's position in processing audio input.</span></span> <span data-ttu-id="d327f-147">Estas posiciones pueden ser diferentes.</span><span class="sxs-lookup"><span data-stu-id="d327f-147">These positions can be different.</span></span>  <span data-ttu-id="d327f-148">Por ejemplo, si ha recibido el reconocimiento de entrada para que TI no tiene aún genera un resultado de reconocimiento, a continuación, el valor de la <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> propiedad es menor que el valor de la <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-148">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-149">En el ejemplo siguiente, el reconocedor de voz compartido usa una gramática dictado para que coincida con la entrada de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-149">In the following example, the shared speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="d327f-150">Un controlador para el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> evento se escribe en la consola el <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, y <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> cuando el reconocedor de voz detecta la voz en su entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-150">A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognizer.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Add handlers for events.  
      recognizer.LoadGrammarCompleted +=   
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
      recognizer.SpeechRecognized +=   
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.StateChanged +=   
        new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
      recognizer.SpeechDetected +=   
        new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load the grammar object to the recognizer.  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Recognizer audio position: " + recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Write the name of the loaded grammar to the console.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-151">Occurs when the recognizer encounters a problem in the audio signal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-151">Occurs when the recognizer encounters a problem in the audio signal.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-152">Para obtener el problema, use la <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> propiedad del asociado <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="d327f-152">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="d327f-153">Cuando se crea un delegado para un `AudioSignalProblemOccurred` evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-153">When you create a delegate for an `AudioSignalProblemOccurred` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-154">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-154">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-155">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-155">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-156">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-156">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-157">En el ejemplo siguiente se define un controlador de eventos que recopila información sobre un `AudioSignalProblemOccurred` eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-157">The following example defines an event handler that gathers information about an `AudioSignalProblemOccurred` event.</span></span>  
  
```  
private SpeechRecognizer recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognizer();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognizer.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-158">Gets the state of the audio being received by the speech recognizer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-158">Gets the state of the audio being received by the speech recognizer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-159">El estado de la entrada de audio al reconocedor de voz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-159">The state of the audio input to the speech recognizer.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-160">Occurs when the state changes in the audio being received by the recognizer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-160">Occurs when the state changes in the audio being received by the recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-161">Para obtener el estado de audio en el momento del evento, use la <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> propiedad del asociado <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="d327f-161">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="d327f-162">Para obtener el estado actual de audio de la entrada al reconocedor, use el reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-162">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> property.</span></span> <span data-ttu-id="d327f-163">Para obtener más información sobre el estado de audio, consulte el <xref:System.Speech.Recognition.AudioState> enumeración.</span><span class="sxs-lookup"><span data-stu-id="d327f-163">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="d327f-164">Cuando se crea un delegado para un `AudioStateChanged` evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-164">When you create a delegate for an `AudioStateChanged` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-165">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-165">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-166">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-166">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-167">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-167">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-168">En el ejemplo siguiente se utiliza un controlador para el `AudioStateChanged` del nuevo evento para el reconocimiento de escritura <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> en la consola cada vez que se cambia mediante un miembro de la <xref:System.Speech.Recognition.AudioState> enumeración.</span><span class="sxs-lookup"><span data-stu-id="d327f-168">The following example uses a handler for the `AudioStateChanged` event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognizer.AudioState%2A> to the console each time it changes using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.StateChanged +=  
          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Put the recognizer into Listening mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        Console.WriteLine();  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-169">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-169">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognizer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d327f-170">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-170">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognizer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="d327f-171">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-171">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-172">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object and releases resources used during the session.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-172">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object and releases resources used during the session.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-173">Emulates input to the shared speech recognizer, using text instead of audio for synchronous speech recognition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-173">Emulates input to the shared speech recognizer, using text instead of audio for synchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-174">Estos métodos omiten la entrada de audio del sistema.</span><span class="sxs-lookup"><span data-stu-id="d327f-174">These methods bypass the system audio input.</span></span> <span data-ttu-id="d327f-175">Esto puede resultar útil cuando se está probando o depurar una aplicación o gramática.</span><span class="sxs-lookup"><span data-stu-id="d327f-175">This can be helpful when you are testing or debugging an application or grammar.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d327f-176">Si el reconocimiento de voz de Windows se encuentra en la **espera** estado, a continuación, estos métodos devuelven `null`.</span><span class="sxs-lookup"><span data-stu-id="d327f-176">If Windows Speech Recognition is in the **Sleeping** state, then these methods return `null`.</span></span>  
  
 <span data-ttu-id="d327f-177">El reconocedor compartido genera el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, y <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos como si no se emula la operación de reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="d327f-177">The shared recognizer raises the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="d327f-178">El reconocedor omite las líneas nuevas y el espacio en blanco adicional y trata los signos de puntuación como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="d327f-178">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d327f-179">El <xref:System.Speech.Recognition.RecognitionResult> objeto generado por el reconocedor compartido en respuesta a la entrada emulado tiene un valor de `null` para su <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-179">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the shared recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="d327f-180">Para emular el reconocimiento de asincrónico, use la <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-180">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="d327f-181">The input for the recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-181">The input for the recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-182">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for synchronous speech recognition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-182">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for synchronous speech recognition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d327f-183">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-183">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-184">Los identificadores de las que se incluyen con la Vista y Windows 7 Omitir mayúsculas y minúsculas y ancho de caracteres al aplicar reglas de gramática en la frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-184">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="d327f-185">Para obtener más información acerca de este tipo de comparación, vea el <xref:System.Globalization.CompareOptions> valores de enumeración <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> y <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="d327f-185">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="d327f-186">Los identificadores de también omite las líneas nuevas y el espacio en blanco adicional y tratan la puntuación como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="d327f-186">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-187">En el ejemplo siguiente se carga una gramática de ejemplo para el reconocedor compartido y emula la entrada para el reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="d327f-187">The following example loads a sample grammar to the shared recognizer and emulates input to the recognizer.</span></span> <span data-ttu-id="d327f-188">Si no se está ejecutando el reconocimiento de voz de Windows, a continuación, inicie esta aplicación también se iniciará el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-188">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="d327f-189">Si el reconocimiento de voz de Windows se encuentra en la **espera** estado, a continuación, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> siempre devuelve null.</span><span class="sxs-lookup"><span data-stu-id="d327f-189">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> always returns null.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        RecognitionResult result;  
  
        // This EmulateRecognize call matches the grammar and returns a  
        // recognition result.  
        result = recognizer.EmulateRecognize("testing testing");  
        OutputResult(result);  
  
        // This EmulateRecognize call does not match the grammar and   
        // returns null.  
        result = recognizer.EmulateRecognize("testing one two three");  
        OutputResult(result);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Output information about a recognition result to the console.  
    private static void OutputResult(RecognitionResult result)  
    {  
      if (result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">
          <span data-ttu-id="d327f-190">An array of word units that contains the input for the recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-190">An array of word units that contains the input for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="d327f-191">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-191">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-192">Emulates input of specific words to the shared speech recognizer, using text instead of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-192">Emulates input of specific words to the shared speech recognizer, using text instead of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d327f-193">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-193">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-194">Este método crea un <xref:System.Speech.Recognition.RecognitionResult> objeto con la información proporcionada en el `wordUnits` parámetro.</span><span class="sxs-lookup"><span data-stu-id="d327f-194">This method creates a <xref:System.Speech.Recognition.RecognitionResult> object using the information provided in the `wordUnits` parameter.</span></span>  
  
 <span data-ttu-id="d327f-195">Usa el reconocimiento de la `compareOptions` cuando se aplica reglas de gramática para la frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-195">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="d327f-196">Los identificadores de las que se incluyen con la Vista y Windows 7 Omitir mayúsculas y minúsculas si la <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> o <xref:System.Globalization.CompareOptions.IgnoreCase> valor está presente.</span><span class="sxs-lookup"><span data-stu-id="d327f-196">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="d327f-197">Los identificadores de siempre omitir el ancho de caracteres y nunca omitir el tipo de Kana.</span><span class="sxs-lookup"><span data-stu-id="d327f-197">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="d327f-198">Los identificadores de también omite las líneas nuevas y el espacio en blanco adicional y trata los signos de puntuación como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="d327f-198">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="d327f-199">Para obtener más información sobre el ancho de caracteres y el tipo de Kana, consulte el <xref:System.Globalization.CompareOptions> enumeración.</span><span class="sxs-lookup"><span data-stu-id="d327f-199">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognizer.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="d327f-200">The input phrase for the recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-200">The input phrase for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="d327f-201">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-201">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-202">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-202">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d327f-203">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-203">The recognition result for the recognition operation, or <see langword="null" />, if the operation is not successful or Windows Speech Recognition is in the **Sleeping** state.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-204">Usa el reconocimiento de la `compareOptions` cuando se aplica reglas de gramática para la frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-204">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="d327f-205">Los identificadores de las que se incluyen con la Vista y Windows 7 Omitir mayúsculas y minúsculas si la <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> o <xref:System.Globalization.CompareOptions.IgnoreCase> valor está presente.</span><span class="sxs-lookup"><span data-stu-id="d327f-205">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="d327f-206">Los identificadores de siempre omitir el ancho de caracteres y nunca omitir el tipo de Kana.</span><span class="sxs-lookup"><span data-stu-id="d327f-206">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="d327f-207">Los identificadores de también omite las líneas nuevas y el espacio en blanco adicional y trata los signos de puntuación como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="d327f-207">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="d327f-208">Para obtener más información sobre el ancho de caracteres y el tipo de Kana, consulte el <xref:System.Globalization.CompareOptions> enumeración.</span><span class="sxs-lookup"><span data-stu-id="d327f-208">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-209">Emulates input to the shared speech recognizer, using text instead of audio for asynchronous speech recognition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-209">Emulates input to the shared speech recognizer, using text instead of audio for asynchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-210">Estos métodos omiten la entrada de audio del sistema.</span><span class="sxs-lookup"><span data-stu-id="d327f-210">These methods bypass the system audio input.</span></span> <span data-ttu-id="d327f-211">Esto puede resultar útil cuando se está probando o depurar una aplicación o gramática.</span><span class="sxs-lookup"><span data-stu-id="d327f-211">This can be helpful when you are testing or debugging an application or grammar.</span></span>  
  
 <span data-ttu-id="d327f-212">El reconocedor compartido genera el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, y <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos como si no se emula la operación de reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="d327f-212">The shared recognizer raises the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="d327f-213">Cuando el reconocedor completa la operación de reconocimiento asincrónica, se produce la <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-213">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="d327f-214">El reconocedor omite las líneas nuevas y el espacio en blanco adicional y trata los signos de puntuación como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="d327f-214">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d327f-215">Si el reconocimiento de voz de Windows se encuentra en la **espera** estado, a continuación, el reconocedor compartido no procesa la entrada y no genera el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> y eventos relacionados, pero que todavía genera el <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-215">If Windows Speech Recognition is in the **Sleeping** state, then the shared recognizer does not process input and does not raise the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> and related events, but still raises the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d327f-216">El <xref:System.Speech.Recognition.RecognitionResult> objeto generado por el reconocedor compartido en respuesta a la entrada emulado tiene un valor de `null` para su <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-216">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the shared recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="d327f-217">Para emular el reconocimiento sincrónico, utilizan el <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-217">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="d327f-218">The input for the recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-218">The input for the recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-219">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for asynchronous speech recognition.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-219">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for asynchronous speech recognition.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-220">Los identificadores de las que se incluyen con la Vista y Windows 7 Omitir mayúsculas y minúsculas y ancho de caracteres al aplicar reglas de gramática en la frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-220">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="d327f-221">Para obtener más información acerca de este tipo de comparación, vea el <xref:System.Globalization.CompareOptions> valores de enumeración <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> y <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="d327f-221">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="d327f-222">Los identificadores de también omite las líneas nuevas y el espacio en blanco adicional y tratan la puntuación como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="d327f-222">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-223">En el siguiente ejemplo es parte de una aplicación de consola que se carga una gramática de reconocimiento de voz y muestra la entrada emulado asincrónica, los resultados del reconocimiento asociados y los eventos asociados generados por el reconocedor de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-223">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="d327f-224">Si no se está ejecutando el reconocimiento de voz de Windows, a continuación, inicie esta aplicación también se iniciará el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-224">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="d327f-225">Si el reconocimiento de voz de Windows se encuentra en la **espera** estado, a continuación, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> siempre devuelve null.</span><span class="sxs-lookup"><span data-stu-id="d327f-225">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar   
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.   
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">
          <span data-ttu-id="d327f-226">An array of word units that contains the input for the recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-226">An array of word units that contains the input for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="d327f-227">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-227">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-228">Emulates input of specific words to the shared speech recognizer, using text instead of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-228">Emulates input of specific words to the shared speech recognizer, using text instead of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-229">Este método crea un <xref:System.Speech.Recognition.RecognitionResult> objeto con la información proporcionada en el `wordUnits` parámetro.</span><span class="sxs-lookup"><span data-stu-id="d327f-229">This method creates a <xref:System.Speech.Recognition.RecognitionResult> object using the information provided in the `wordUnits` parameter.</span></span>  
  
 <span data-ttu-id="d327f-230">Usa el reconocimiento de la `compareOptions` cuando se aplica reglas de gramática para la frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-230">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="d327f-231">Los identificadores de las que se incluyen con la Vista y Windows 7 Omitir mayúsculas y minúsculas si la <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> o <xref:System.Globalization.CompareOptions.IgnoreCase> valor está presente.</span><span class="sxs-lookup"><span data-stu-id="d327f-231">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="d327f-232">Los identificadores de siempre omitir el ancho de caracteres y nunca omitir el tipo de Kana.</span><span class="sxs-lookup"><span data-stu-id="d327f-232">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="d327f-233">Los identificadores de también omite las líneas nuevas y el espacio en blanco adicional y trata los signos de puntuación como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="d327f-233">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="d327f-234">Para obtener más información sobre el ancho de caracteres y el tipo de Kana, consulte el <xref:System.Globalization.CompareOptions> enumeración.</span><span class="sxs-lookup"><span data-stu-id="d327f-234">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognizer.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">
          <span data-ttu-id="d327f-235">The input phrase for the recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-235">The input phrase for the recognition operation.</span>
          </span>
        </param>
        <param name="compareOptions">
          <span data-ttu-id="d327f-236">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-236">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-237">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-237">Emulates input of a phrase to the shared speech recognizer, using text instead of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-238">Usa el reconocimiento de la `compareOptions` cuando se aplica reglas de gramática para la frase de entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-238">The recognizer uses the `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="d327f-239">Los identificadores de las que se incluyen con la Vista y Windows 7 Omitir mayúsculas y minúsculas si la <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> o <xref:System.Globalization.CompareOptions.IgnoreCase> valor está presente.</span><span class="sxs-lookup"><span data-stu-id="d327f-239">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="d327f-240">Los identificadores de siempre omitir el ancho de caracteres y nunca omitir el tipo de Kana.</span><span class="sxs-lookup"><span data-stu-id="d327f-240">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="d327f-241">Los identificadores de también omite las líneas nuevas y el espacio en blanco adicional y trata los signos de puntuación como entrada literal.</span><span class="sxs-lookup"><span data-stu-id="d327f-241">The recognizers also ignore new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="d327f-242">Para obtener más información sobre el ancho de caracteres y el tipo de Kana, consulte el <xref:System.Globalization.CompareOptions> enumeración.</span><span class="sxs-lookup"><span data-stu-id="d327f-242">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-243">Occurs when the shared recognizer finalizes an asynchronous recognition operation for emulated input.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-243">Occurs when the shared recognizer finalizes an asynchronous recognition operation for emulated input.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-244">Cada <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> método comienza una operación asincrónica de reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="d327f-244">Each <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="d327f-245">La genera reconocedor el `EmulateRecognizeCompleted` eventos cuando finaliza la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="d327f-245">The recognizer raises the `EmulateRecognizeCompleted` event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="d327f-246">La operación asincrónica de reconocimiento puede generar el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, y <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-246">The asynchronous recognition operation can raise the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events.</span></span> <span data-ttu-id="d327f-247">El <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> evento es el último ese evento que genera el reconocedor para una operación determinada.</span><span class="sxs-lookup"><span data-stu-id="d327f-247">The <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="d327f-248">Cuando se crea un delegado para un `EmulateRecognizeCompleted` evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-248">When you create a delegate for an `EmulateRecognizeCompleted` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-249">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-249">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-250">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-250">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-251">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-251">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-252">En el siguiente ejemplo es parte de una aplicación de consola que se carga una gramática de reconocimiento de voz y muestra la entrada emulado asincrónica, los resultados del reconocimiento asociados y los eventos asociados generados por el reconocedor de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-252">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="d327f-253">Si no se está ejecutando el reconocimiento de voz de Windows, a continuación, inicie esta aplicación también se iniciará el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-253">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="d327f-254">Si el reconocimiento de voz de Windows se encuentra en la **espera** , a continuación, el modo <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> siempre devuelve null.</span><span class="sxs-lookup"><span data-stu-id="d327f-254">If Windows Speech Recognition is in the **Sleeping** mode, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=   
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-255">Gets or sets a value that indicates whether this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object is ready to process speech.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-255">Gets or sets a value that indicates whether this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object is ready to process speech.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-256">
            <see langword="true" /> Si este <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> objeto está realizando el reconocimiento de voz; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-256">
              <see langword="true" /> if this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object is performing speech recognition; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-257">Cambios a esta propiedad no afectan a otras instancias de la <xref:System.Speech.Recognition.SpeechRecognizer> clase.</span><span class="sxs-lookup"><span data-stu-id="d327f-257">Changes to this property do not affect other instances of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="d327f-258">De forma predeterminada, el valor de la <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> propiedad es `true` para una instancia de la instancia recién creada de <xref:System.Speech.Recognition.SpeechRecognizer>.</span><span class="sxs-lookup"><span data-stu-id="d327f-258">By default, the value of the <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property is `true` for a newly instantiated instance of <xref:System.Speech.Recognition.SpeechRecognizer>.</span></span> <span data-ttu-id="d327f-259">Mientras está deshabilitado el reconocedor, ninguna de las gramáticas de reconocimiento de voz del reconocedor está disponible para las operaciones de reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="d327f-259">While the recognizer is disabled, none of the recognizer's speech recognition grammars are available for recognition operations.</span></span> <span data-ttu-id="d327f-260">Configuración del reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> propiedad no tiene ningún efecto en el reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-260">Setting the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property has no effect on the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognizer.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-261">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> instance.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-261">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-262">Una colección de los <see cref="T:System.Speech.Recognition.Grammar" /> objetos que la aplicación se carga en la instancia actual del reconocedor compartido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-262">A collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that the application loaded into the current instance of the shared recognizer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-263">Esta propiedad no devuelve ninguna voz gramáticas de reconocimiento cargadas por otra aplicación.</span><span class="sxs-lookup"><span data-stu-id="d327f-263">This property does not return any speech recognition grammars loaded by another application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-264">En el ejemplo siguiente se envía la información en la consola para cada gramática de reconocimiento de voz cargada en el reconocedor de voz compartido.</span><span class="sxs-lookup"><span data-stu-id="d327f-264">The following example outputs information to the console for each speech recognition grammar loaded into the shared speech recognizer.</span></span>  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        Grammar sampleGrammar = new Grammar(new GrammarBuilder("sample phrase"));  
        sampleGrammar.Name = "Sample Grammar";  
        recognizer.LoadGrammar(sampleGrammar);  
  
        OutputGrammarList(recognizer);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void OutputGrammarList(SpeechRecognizer recognizer)  
    {  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      if (grammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in grammars)  
        {  
          Console.WriteLine("  Grammar: {0}",  
            (g.Name != null) ? g.Name : "<no name>");  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
    }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="d327f-265">The speech recognition grammar to load.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-265">The speech recognition grammar to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-266">Loads a speech recognition grammar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-266">Loads a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-267">El reconocedor compartido produce una excepción si la gramática de reconocimiento de voz ya está cargada, se va a cargar de forma asincrónica o no ha podido cargar en cualquier reconocedor.</span><span class="sxs-lookup"><span data-stu-id="d327f-267">The shared recognizer throws an exception if the speech recognition grammar is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="d327f-268">Si se está ejecutando el reconocedor, las aplicaciones deben utilizar <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> para pausar el motor de reconocimiento de voz antes de cargar, descargar, habilitar o deshabilitar una gramática.</span><span class="sxs-lookup"><span data-stu-id="d327f-268">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="d327f-269">Para cargar de forma asincrónica una gramática de reconocimiento de voz, utilice el <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-269">To load a speech recognition grammar asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-270">En el siguiente ejemplo es parte de una aplicación de consola que se carga una gramática de reconocimiento de voz y muestra la entrada emulado asincrónica, los resultados del reconocimiento asociados y los eventos asociados generados por el reconocedor de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-270">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="d327f-271">Si no se está ejecutando el reconocimiento de voz de Windows, a continuación, inicie esta aplicación también se iniciará el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-271">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span> <span data-ttu-id="d327f-272">Si el reconocimiento de voz de Windows se encuentra en la **espera** estado, a continuación, <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> siempre devuelve null.</span><span class="sxs-lookup"><span data-stu-id="d327f-272">If Windows Speech Recognition is in the **Sleeping** state, then <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> always returns null.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Initialize an instance of the shared recognizer.  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar   
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Recognition result = {0}",  
          e.Result.Text ?? "<no text>");  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }   
  
    // Handle the EmulateRecognizeCompleted event.   
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("No result generated.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="d327f-273">The speech recognition grammar to load.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-273">The speech recognition grammar to load.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-274">Asynchronously loads a speech recognition grammar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-274">Asynchronously loads a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-275">Cuando el reconocedor completa esta operación asincrónica, se produce un <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-275">When the recognizer completes this asynchronous operation, it raises a <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="d327f-276">El reconocedor produce una excepción si la gramática de reconocimiento de voz ya está cargada, se va a cargar de forma asincrónica o no ha podido cargar en cualquier reconocedor.</span><span class="sxs-lookup"><span data-stu-id="d327f-276">The recognizer throws an exception if the speech recognition grammar is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="d327f-277">Si se está ejecutando el reconocedor, las aplicaciones deben utilizar <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> para pausar el motor de reconocimiento de voz antes de cargar, descargar, habilitar o deshabilitar una gramática.</span><span class="sxs-lookup"><span data-stu-id="d327f-277">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="d327f-278">Para cargar una gramática de reconocimiento de voz de forma sincrónica, utilice la <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-278">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-279">Occurs when the recognizer finishes the asynchronous loading of a speech recognition grammar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-279">Occurs when the recognizer finishes the asynchronous loading of a speech recognition grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-280">El reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> método inicia una operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="d327f-280">The recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="d327f-281">La genera reconocedor el `LoadGrammarCompleted` eventos cuando se complete la operación.</span><span class="sxs-lookup"><span data-stu-id="d327f-281">The recognizer raises the `LoadGrammarCompleted` event when it completes the operation.</span></span> <span data-ttu-id="d327f-282">Para obtener la <xref:System.Speech.Recognition.Grammar> objeto que carga el reconocedor, utilice la <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> propiedad del asociado <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="d327f-282">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="d327f-283">Para obtener el actual <xref:System.Speech.Recognition.Grammar> objetos que se ha cargado el reconocedor, usar el reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-283">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="d327f-284">Cuando se crea un delegado para un `LoadGrammarCompleted` evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-284">When you create a delegate for a `LoadGrammarCompleted` event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-285">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-285">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-286">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-286">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-287">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-287">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-288">En el ejemplo siguiente se crea un reconocedor de voz compartido y, a continuación, crea dos tipos de las gramáticas para reconocer palabras específicas y para aceptar dictado libre.</span><span class="sxs-lookup"><span data-stu-id="d327f-288">The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="d327f-289">El ejemplo carga todas las gramáticas creadas al reconocedor de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="d327f-289">The example asynchronously loads all the created grammars to the recognizer.</span></span> <span data-ttu-id="d327f-290">Controladores para el reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> y <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos escriben en la consola el nombre de la gramática que se usó para realizar el reconocimiento y el texto del resultado de reconocimiento, respectivamente.</span><span class="sxs-lookup"><span data-stu-id="d327f-290">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> events write to the console the name of the grammar that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Add a handler for the StateChanged event.  
        recognizer.StateChanged +=  
          new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
        // Create "yesno" grammar.  
        Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah}" });  
        SemanticResultValue yesValue =  
            new SemanticResultValue(yesChoices, (bool)true);  
        Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
        SemanticResultValue noValue =  
            new SemanticResultValue(noChoices, (bool)false);  
        SemanticResultKey yesNoKey =  
            new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
        Grammar yesnoGrammar = new Grammar(yesNoKey);  
        yesnoGrammar.Name = "yesNo";  
  
        // Create "done" grammar.  
        Grammar doneGrammar =  
          new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
        doneGrammar.Name = "Done";  
  
        // Create dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation";  
  
        // Load grammars to the recognizer.  
        recognizer.LoadGrammarAsync(yesnoGrammar);  
        recognizer.LoadGrammarAsync(doneGrammar);  
        recognizer.LoadGrammarAsync(dictation);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Put the shared speech recognizer into "listening" mode.   
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-291">Gets or sets the maximum number of alternate recognition results that the shared recognizer returns for each recognition operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-291">Gets or sets the maximum number of alternate recognition results that the shared recognizer returns for each recognition operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-292">El número máximo de resultados alternativos que el reconocedor de voz se devuelve para cada operación de reconocimiento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-292">The maximum number of alternate results that the speech recognizer returns for each recognition operation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-293">El <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> propiedad de la <xref:System.Speech.Recognition.RecognitionResult> clase contiene la colección de <xref:System.Speech.Recognition.RecognizedPhrase> objetos que representan otros interpretaciones de los candidatos de la entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-293">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent other candidate interpretations of the input.</span></span>  
  
 <span data-ttu-id="d327f-294">El valor predeterminado de <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> es 10.</span><span class="sxs-lookup"><span data-stu-id="d327f-294">The default value for <xref:System.Speech.Recognition.SpeechRecognizer.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Alternates" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="PauseRecognizerOnRecognition">
      <MemberSignature Language="C#" Value="public bool PauseRecognizerOnRecognition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PauseRecognizerOnRecognition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      <MemberSignature Language="VB.NET" Value="Public Property PauseRecognizerOnRecognition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PauseRecognizerOnRecognition { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PauseRecognizerOnRecognition : bool with get, set" Usage="System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-295">Gets or sets a value that indicates whether the shared recognizer pauses recognition operations while an application is handling a <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-295">Gets or sets a value that indicates whether the shared recognizer pauses recognition operations while an application is handling a <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-296">
            <see langword="true" /> Si espera a que el reconocedor compartido al procesar entrada mientras lleva a cabo cualquier aplicación el <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> evento; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-296">
              <see langword="true" /> if the shared recognizer waits to process input while any application is handling the <see cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" /> event; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-297">Establezca esta propiedad en `true`, si dentro de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> controlador de eventos que la aplicación necesita cambiar el estado del servicio de reconocimiento de voz o cambiar las gramáticas de reconocimiento de voz de cargar o habilitado antes que el servicio de reconocimiento de voz procesa más de entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-297">Set this property to `true`, if within the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler your application needs to change the state of the speech recognition service or change the loaded or enabled speech recognition grammars before the speech recognition service processes more input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d327f-298">Establecer el <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> propiedad `true` hace que cada uno de ellos <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> controlador de eventos en todas las aplicaciones para bloquear el servicio de reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-298">Setting the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> property to `true` causes each <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler in every application to block the Windows speech recognition service.</span></span>  
  
 <span data-ttu-id="d327f-299">Para sincronizar los cambios realizados en el reconocedor compartido con el estado de la aplicación, use la <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-299">To synchronize the changes to the shared recognizer with your application state, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="d327f-300">Cuando <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> es `true`, durante la ejecución de la <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> el servicio de reconocimiento de voz de controlador se pone en pausa y se almacena en búfer nueva entrada de audio cuando llega.</span><span class="sxs-lookup"><span data-stu-id="d327f-300">When <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> is `true`, during the execution of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> handler the speech recognition service pauses and buffers new audio input as it arrives.</span></span> <span data-ttu-id="d327f-301">Una vez el <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> sale de controlador de eventos, el servicio reanuda el reconocimiento de voz reconocimiento y comenzará a procesar la información de su búfer de entrada.</span><span class="sxs-lookup"><span data-stu-id="d327f-301">Once the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event handler exits, the speech recognition service resumes recognition and starts processing information from its input buffer.</span></span>  
  
 <span data-ttu-id="d327f-302">Para habilitar o deshabilitar el servicio de reconocimiento de voz, utilice el <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-302">To enable or disable the speech recognition service, use the <xref:System.Speech.Recognition.SpeechRecognizer.Enabled%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-303">Gets the current location of the recognizer in the audio input that it is processing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-303">Gets the current location of the recognizer in the audio input that it is processing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-304">La posición del reconocedor en la entrada de audio que se está procesando.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-304">The position of the recognizer in the audio input that it is processing.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-305">El `RecognizerAudioPosition` propiedad hace referencia a posición del reconocedor en el procesamiento de su entrada de audio.</span><span class="sxs-lookup"><span data-stu-id="d327f-305">The `RecognizerAudioPosition` property references the recognizer's position in processing its audio input.</span></span> <span data-ttu-id="d327f-306">Por el contrario, el <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> propiedad hace referencia la posición del dispositivo de entrada en su secuencia de audio generado.</span><span class="sxs-lookup"><span data-stu-id="d327f-306">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="d327f-307">Estas posiciones pueden ser diferentes.</span><span class="sxs-lookup"><span data-stu-id="d327f-307">These positions can be different.</span></span> <span data-ttu-id="d327f-308">Por ejemplo, si ha recibido el reconocimiento de entrada para que TI no tiene aún genera un resultado de reconocimiento, a continuación, el valor de la <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> propiedad es menor que el valor de la <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-308">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognizer.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-309">Gets information about the shared speech recognizer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-309">Gets information about the shared speech recognizer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-310">Información sobre el reconocedor de voz compartido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-310">Information about the shared speech recognizer.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-311">Esta propiedad devuelve información sobre el reconocedor de voz en uso por el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-311">This property returns information about the speech recognizer in use by Windows Speech Recognition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-312">En el ejemplo siguiente se envía información sobre el reconocedor compartido en la consola.</span><span class="sxs-lookup"><span data-stu-id="d327f-312">The following example sends information about the shared recognizer to the console.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SharedRecognizer  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
        Console.WriteLine("Recognizer information for the shared recognizer:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.State" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-313">Occurs when the recognizer pauses to synchronize recognition and other operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-313">Occurs when the recognizer pauses to synchronize recognition and other operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-314">Las aplicaciones deben utilizar <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> para pausar una instancia en ejecución de <xref:System.Speech.Recognition.SpeechRecognizer> antes de modificar su <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="d327f-314">Applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognizer> before modifying its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="d327f-315">Por ejemplo, mientras el <xref:System.Speech.Recognition.SpeechRecognizer> está en pausa, puede cargar, descargar, habilitar y deshabilitar <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="d327f-315">For example, while the <xref:System.Speech.Recognition.SpeechRecognizer> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="d327f-316">El <xref:System.Speech.Recognition.SpeechRecognizer> genera este evento cuando esté listo para aceptar las modificaciones.</span><span class="sxs-lookup"><span data-stu-id="d327f-316">The <xref:System.Speech.Recognition.SpeechRecognizer> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="d327f-317">Cuando se crea un delegado para un <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-317">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-318">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-318">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-319">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-319">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-320">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-320">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-321">En el ejemplo siguiente se muestra una aplicación de consola que carga y descarga <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="d327f-321">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="d327f-322">La aplicación utiliza el <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> método para solicitar el motor de reconocimiento de voz para hacer una pausa para que puedan recibir una actualización.</span><span class="sxs-lookup"><span data-stu-id="d327f-322">The application uses the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="d327f-323">La aplicación, a continuación, carga o descarga un <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="d327f-323">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="d327f-324">En cada actualización, un controlador para <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> evento escribe el nombre y el estado de la que se han cargado actualmente <xref:System.Speech.Recognition.Grammar> objetos en la consola.</span><span class="sxs-lookup"><span data-stu-id="d327f-324">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="d327f-325">Tal y como se cargan y descargan gramáticas, la aplicación primero reconoce los nombres de animales de granja de servidores, los nombres de animales de granja de servidores y los nombres de frutas y, luego, solo los nombres de frutas.</span><span class="sxs-lookup"><span data-stu-id="d327f-325">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Create the first grammar - Farm.  
      Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
      GrammarBuilder farm = new GrammarBuilder(animals);  
      Grammar farmAnimals = new Grammar(farm);  
      farmAnimals.Name = "Farm";  
  
      // Create the second grammar - Fruit.  
      Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
      GrammarBuilder favorite = new GrammarBuilder(fruit);  
      Grammar favoriteFruit = new Grammar(favorite);  
      favoriteFruit.Name = "Fruit";  
  
      // Attach event handlers.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.RecognizerUpdateReached +=  
        new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
      recognizer.StateChanged +=   
        new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
      // Load the Farm grammar.  
      recognizer.LoadGrammar(farmAnimals);  
      Console.WriteLine("Grammar Farm is loaded");  
  
      // Pause to recognize farm animals.  
      Thread.Sleep(7000);  
      Console.WriteLine();  
  
      // Request an update and load the Fruit grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.LoadGrammarAsync(favoriteFruit);  
      Thread.Sleep(5000);  
  
      // Request an update and unload the Farm grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.UnloadGrammar(farmAnimals);  
      Thread.Sleep(5000);  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
      if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  Grammar {0} is loaded and is {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-326">Requests that the shared recognizer pause and update its state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-326">Requests that the shared recognizer pause and update its state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-327">Utilice este método para sincronizar cambios con el reconocedor compartido.</span><span class="sxs-lookup"><span data-stu-id="d327f-327">Use this method to synchronize changes to the shared recognizer.</span></span> <span data-ttu-id="d327f-328">Por ejemplo, si carga o descarga una gramática de reconocimiento de voz mientras el reconocedor está procesando la entrada, use este método y el <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos para sincronizar el comportamiento de la aplicación con el estado del reconocedor.</span><span class="sxs-lookup"><span data-stu-id="d327f-328">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="d327f-329">Cuando se llama a este método, el reconocedor pone en pausa o se hayan completado las operaciones asincrónicas y genera un <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-329">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="d327f-330">Un <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> controlador de eventos, a continuación, puede modificar el estado del reconocedor entre operaciones de reconocimiento.</span><span class="sxs-lookup"><span data-stu-id="d327f-330">A <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span>  
  
 <span data-ttu-id="d327f-331">Cuando se llama a este método:</span><span class="sxs-lookup"><span data-stu-id="d327f-331">When this method is called:</span></span>  
  
-   <span data-ttu-id="d327f-332">Si el reconocedor no está procesando la entrada, el reconocedor genera inmediatamente el <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-332">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="d327f-333">Si el reconocedor procesa la entrada que se compone de latencia o ruido de fondo, el reconocedor se detiene la operación de reconocimiento y genera el <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-333">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="d327f-334">Si el reconocedor procesa la entrada que no constan de latencia o ruido de fondo, el reconocedor completa la operación de reconocimiento y, a continuación, genera el <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-334">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="d327f-335">Mientras se lleva a cabo el reconocimiento de la <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos:</span><span class="sxs-lookup"><span data-stu-id="d327f-335">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="d327f-336">El reconocedor no procesa la entrada y el valor de la <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> propiedad sigue siendo el mismo.</span><span class="sxs-lookup"><span data-stu-id="d327f-336">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="d327f-337">El reconocedor continúa recopilar de entrada y el valor de la <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> puede cambiar la propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-337">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> property can change.</span></span>  
  
 <span data-ttu-id="d327f-338">Para cambiar si el reconocedor compartido se detiene temporalmente las operaciones de reconocimiento mientras lleva a cabo una aplicación un <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos, use la <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-338">To change whether the shared recognizer pauses recognition operations while an application is handling a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event, use the <xref:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-339">En el ejemplo siguiente se muestra una aplicación de consola que carga y descarga <xref:System.Speech.Recognition.Grammar> objetos.</span><span class="sxs-lookup"><span data-stu-id="d327f-339">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="d327f-340">La aplicación utiliza el <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> método para solicitar el motor de reconocimiento de voz para hacer una pausa para que puedan recibir una actualización.</span><span class="sxs-lookup"><span data-stu-id="d327f-340">The application uses the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="d327f-341">La aplicación, a continuación, carga o descarga un <xref:System.Speech.Recognition.Grammar> objeto.</span><span class="sxs-lookup"><span data-stu-id="d327f-341">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="d327f-342">En cada actualización, un controlador para <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> evento escribe el nombre y el estado de la que se han cargado actualmente <xref:System.Speech.Recognition.Grammar> objetos en la consola.</span><span class="sxs-lookup"><span data-stu-id="d327f-342">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="d327f-343">Tal y como se cargan y descargan gramáticas, la aplicación primero reconoce los nombres de animales de granja de servidores, los nombres de animales de granja de servidores y los nombres de frutas y, luego, solo los nombres de frutas.</span><span class="sxs-lookup"><span data-stu-id="d327f-343">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      recognizer = new SpeechRecognizer();  
  
      // Create the first grammar - Farm.  
      Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
      GrammarBuilder farm = new GrammarBuilder(animals);  
      Grammar farmAnimals = new Grammar(farm);  
      farmAnimals.Name = "Farm";  
  
      // Create the second grammar - Fruit.  
      Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
      GrammarBuilder favorite = new GrammarBuilder(fruit);  
      Grammar favoriteFruit = new Grammar(favorite);  
      favoriteFruit.Name = "Fruit";  
  
      // Attach event handlers.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
      recognizer.RecognizerUpdateReached +=  
        new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
  
      // Check to see if recognizer is loaded, wait if it is not loaded.  
      if (recognizer.State != RecognizerState.Listening)  
      {  
        Thread.Sleep(5000);  
  
        // Put recognizer in listening state.  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
  
      // Load the Farm grammar.  
      recognizer.LoadGrammar(farmAnimals);  
      Console.WriteLine("Grammar Farm is loaded");  
  
      // Pause to recognize farm animals.  
      Thread.Sleep(7000);  
      Console.WriteLine();  
  
      // Request an update and load the Fruit grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.LoadGrammarAsync(favoriteFruit);  
      Thread.Sleep(5000);  
  
      // Request an update and unload the Farm grammar.  
      recognizer.RequestRecognizerUpdate();  
      recognizer.UnloadGrammar(farmAnimals);  
      Thread.Sleep(5000);  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    public static void recognizer_RecognizerUpdateReached(object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      // At the update, get the names and enabled status of the currently loaded grammars.  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  Grammar {0} is loaded and is {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.PauseRecognizerOnRecognition" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d327f-344">Requests that the shared recognizer pause and update its state.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-344">Requests that the shared recognizer pause and update its state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-345">Cuando se genera el reconocimiento de la <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos, el <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propiedad de la <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> es `null`.</span><span class="sxs-lookup"><span data-stu-id="d327f-345">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="d327f-346">Para proporcionar un token de usuario, utilice la <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> o <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-346">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="d327f-347">Para especificar un desplazamiento de posición de audio, use la <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-347">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="d327f-348">User-defined information that contains information for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-348">User-defined information that contains information for the operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-349">Requests that the shared recognizer pause and update its state and provides a user token for the associated event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-349">Requests that the shared recognizer pause and update its state and provides a user token for the associated event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-350">Cuando se genera el reconocimiento de la <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos, el <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propiedad de la <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contiene el valor de la `userToken` parámetro.</span><span class="sxs-lookup"><span data-stu-id="d327f-350">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="d327f-351">Para especificar un desplazamiento de posición de audio, use la <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-351">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognizer.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken">
          <span data-ttu-id="d327f-352">User-defined information that contains information for the operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-352">User-defined information that contains information for the operation.</span>
          </span>
        </param>
        <param name="audioPositionAheadToRaiseUpdate">
          <span data-ttu-id="d327f-353">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" /> to delay the request.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-353">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" /> to delay the request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-354">Requests that the shared recognizer pause and update its state and provides an offset and a user token for the associated event.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-354">Requests that the shared recognizer pause and update its state and provides an offset and a user token for the associated event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-355">El reconocedor no iniciará la solicitud de actualización de reconocedor hasta que el reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> es igual a la actual <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> más el valor de la `audioPositionAheadToRaiseUpdate` parámetro.</span><span class="sxs-lookup"><span data-stu-id="d327f-355">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> plus the value of the `audioPositionAheadToRaiseUpdate` parameter.</span></span>  
  
 <span data-ttu-id="d327f-356">Cuando se genera el reconocimiento de la <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> eventos, el <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> propiedad de la <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contiene el valor de la `userToken` parámetro.</span><span class="sxs-lookup"><span data-stu-id="d327f-356">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-357">Occurs when the recognizer detects input that it can identify as speech.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-357">Occurs when the recognizer detects input that it can identify as speech.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-358">El reconocedor compartido puede generar este evento en respuesta a las entradas.</span><span class="sxs-lookup"><span data-stu-id="d327f-358">The shared recognizer can raise this event in response to input.</span></span> <span data-ttu-id="d327f-359">El <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> propiedad del asociado <xref:System.Speech.Recognition.SpeechDetectedEventArgs> objeto indica la ubicación en el flujo de entrada que detecta el el reconocedor de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-359">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="d327f-360">Para obtener más información, consulte el <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> y <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> propiedades y la <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> y <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="d327f-360">For more information see the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition%2A> properties and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="d327f-361">Cuando se crea un delegado para un <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-361">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-362">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-362">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-363">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-363">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-364">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-364">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-365">En el siguiente ejemplo es parte de una aplicación de consola para elegir ciudades de origen y destino de un vuelo.</span><span class="sxs-lookup"><span data-stu-id="d327f-365">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="d327f-366">La aplicación reconoce frases como "desea Volar desde Miami a Chicago."</span><span class="sxs-lookup"><span data-stu-id="d327f-366">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="d327f-367">El ejemplo se utiliza la <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> eventos al informe el <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> se detecta la voz de cada vez.</span><span class="sxs-lookup"><span data-stu-id="d327f-367">The example uses the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognizer.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=   
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.RecognizerAudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-368">Occurs when the recognizer has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-368">Occurs when the recognizer has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-369">El reconocedor compartido puede generar este evento cuando la entrada es ambigua.</span><span class="sxs-lookup"><span data-stu-id="d327f-369">The shared recognizer can raise this event when the input is ambiguous.</span></span> <span data-ttu-id="d327f-370">Por ejemplo, para una gramática de reconocimiento de voz que admite el reconocimiento del "nuevo juego vuelva" o "new game", "nuevo juego," es una entrada ambigua y "new game" es una entrada ambigua.</span><span class="sxs-lookup"><span data-stu-id="d327f-370">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="d327f-371">Cuando se crea un delegado para un <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-371">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-372">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-372">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-373">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-373">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-374">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-374">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-375">En el ejemplo siguiente se reconoce frases como "Mostrar la lista de intérpretes en la categoría jazz".</span><span class="sxs-lookup"><span data-stu-id="d327f-375">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="d327f-376">El ejemplo se utiliza la <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> eventos para mostrar fragmentos de frase incompletos en la consola, tal como se reconocen.</span><span class="sxs-lookup"><span data-stu-id="d327f-376">The example uses the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=   
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechHypothesizedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-377">Occurs when the recognizer receives input that does not match any of the speech recognition grammars it has loaded.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-377">Occurs when the recognizer receives input that does not match any of the speech recognition grammars it has loaded.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-378">El reconocedor compartido genera este evento si se determina que entrada no coincide con la confianza suficiente cualquiera de las gramáticas de reconocimiento de voz cargado.</span><span class="sxs-lookup"><span data-stu-id="d327f-378">The shared recognizer raises this event if it determines that input does not match with sufficient confidence any of the loaded speech recognition grammars.</span></span> <span data-ttu-id="d327f-379">El <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propiedad de la <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contiene los rechazados <xref:System.Speech.Recognition.RecognitionResult> objeto.</span><span class="sxs-lookup"><span data-stu-id="d327f-379">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
 <span data-ttu-id="d327f-380">Umbrales de confianza para el reconocedor compartido, administrado por <xref:System.Speech.Recognition.SpeechRecognizer>, están asociados a un perfil de usuario y almacena en el registro de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-380">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="d327f-381">Las aplicaciones no deben escribir cambios en el registro de las propiedades del reconocedor compartido.</span><span class="sxs-lookup"><span data-stu-id="d327f-381">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 <span data-ttu-id="d327f-382">Cuando se crea un delegado para un <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-382">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-383">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-383">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-384">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-384">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-385">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-385">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-386">En el ejemplo siguiente se reconoce frases como "Mostrar la lista de intérpretes en la categoría jazz" o "Mostrar totalmente confiable de álbumes".</span><span class="sxs-lookup"><span data-stu-id="d327f-386">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="d327f-387">En el ejemplo se utiliza un controlador para el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> eventos para mostrar una notificación en la consola cuando no se puede hacer coincidir con el contenido de la gramática con confianza suficiente para generar un reconocimiento correcto de entrada de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-387">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient confidence to produce a successful recognition.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer =  
         new SpeechRecognizer())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=   
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-388">Occurs when the recognizer receives input that matches one of its speech recognition grammars.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-388">Occurs when the recognizer receives input that matches one of its speech recognition grammars.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-389">La genera reconocedor el `SpeechRecognized` eventos si se determina con suficiente confianza que la entrada coincide con una de las gramáticas de reconocimiento de voz cargado y están habilitados.</span><span class="sxs-lookup"><span data-stu-id="d327f-389">The recognizer raises the `SpeechRecognized` event if it determines with sufficient confidence that input matches one of the loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="d327f-390">El <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> propiedad de la <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contiene el aceptadas <xref:System.Speech.Recognition.RecognitionResult> objeto.</span><span class="sxs-lookup"><span data-stu-id="d327f-390">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
 <span data-ttu-id="d327f-391">Umbrales de confianza para el reconocedor compartido, administrado por <xref:System.Speech.Recognition.SpeechRecognizer>, están asociados a un perfil de usuario y almacena en el registro de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-391">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="d327f-392">Las aplicaciones no deben escribir cambios en el registro de las propiedades del reconocedor compartido.</span><span class="sxs-lookup"><span data-stu-id="d327f-392">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 <span data-ttu-id="d327f-393">Cuando el reconocedor recibe la entrada que coincida con una gramática el <xref:System.Speech.Recognition.Grammar> objeto puede generar el <xref:System.Speech.Recognition.Grammar.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-393">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="d327f-394">El <xref:System.Speech.Recognition.Grammar> del objeto <xref:System.Speech.Recognition.Grammar.SpeechRecognized> evento se produce antes que el reconocedor de voz <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-394">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="d327f-395">Cuando se crea un delegado para un <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-395">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-396">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-396">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-397">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-397">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-398">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-398">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-399">En el siguiente ejemplo es parte de una aplicación de consola que se carga una gramática de reconocimiento de voz y muestra la entrada de voz para el reconocedor compartido, los resultados del reconocimiento asociados y los eventos asociados generados por el reconocedor de voz.</span><span class="sxs-lookup"><span data-stu-id="d327f-399">The following example is part of a console application that loads a speech recognition grammar and demonstrates speech input to the shared recognizer, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="d327f-400">Si no se está ejecutando el reconocimiento de voz de Windows, a continuación, inicie esta aplicación también se iniciará el reconocimiento de voz de Windows.</span><span class="sxs-lookup"><span data-stu-id="d327f-400">If Windows Speech Recognition is not running, then starting this application will also start Windows Speech Recognition.</span></span>  
  
 <span data-ttu-id="d327f-401">Habla de entrada como "Quiero Volar de Chicago a Miami" desencadenará una <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-401">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span> <span data-ttu-id="d327f-402">La frase "Volar me de Houston a Chicago" de habla no se desencadenará una <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> eventos.</span><span class="sxs-lookup"><span data-stu-id="d327f-402">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="d327f-403">En el ejemplo se utiliza un controlador para el <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> reconoce el evento para mostrar correctamente la semántica que se contienen en la consola y frases.</span><span class="sxs-lookup"><span data-stu-id="d327f-403">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize a shared speech recognition engine.  
    {  
      using (SpeechRecognizer recognizer = new SpeechRecognizer())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="T:System.Speech.Recognition.SpeechRecognizedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.RecognizerState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognizer.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As RecognizerState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerState State { System::Speech::Recognition::RecognizerState get(); };" />
      <MemberSignature Language="F#" Value="member this.State : System.Speech.Recognition.RecognizerState" Usage="System.Speech.Recognition.SpeechRecognizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-404">Gets the state of a <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-404">Gets the state of a <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d327f-405">El estado de la <see langword="SpeechRecognizer" /> objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-405">The state of the <see langword="SpeechRecognizer" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-406">Esta propiedad de solo lectura indica si el reconocedor compartido residente en Windows en el `Stopped` o `Listening` estado.</span><span class="sxs-lookup"><span data-stu-id="d327f-406">This read-only property indicates whether the shared recognizer resident in Windows is in the `Stopped` or the `Listening` state.</span></span> <span data-ttu-id="d327f-407">Para obtener más información, vea la enumeración <xref:System.Speech.Recognition.RecognizerState>.</span><span class="sxs-lookup"><span data-stu-id="d327f-407">For more information, see the <xref:System.Speech.Recognition.RecognizerState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.StateChangedEventArgs&gt; StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognizer.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event StateChanged As EventHandler(Of StateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::StateChangedEventArgs ^&gt; ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; " Usage="member this.StateChanged : System.EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.StateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d327f-408">Occurs when the running state of the Windows Desktop Speech Technology recognition engine changes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-408">Occurs when the running state of the Windows Desktop Speech Technology recognition engine changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-409">El reconocedor compartido genera este evento cuando cambia el estado de reconocimiento de voz de Windows para la <xref:System.Speech.Recognition.RecognizerState.Listening> o <xref:System.Speech.Recognition.RecognizerState.Stopped> estado.</span><span class="sxs-lookup"><span data-stu-id="d327f-409">The shared recognizer raises this event when the state of Windows Speech Recognition changes to the <xref:System.Speech.Recognition.RecognizerState.Listening> or <xref:System.Speech.Recognition.RecognizerState.Stopped> state.</span></span>  
  
 <span data-ttu-id="d327f-410">Para obtener el estado del reconocedor compartido en el momento del evento, use la <xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A> propiedad del asociado <xref:System.Speech.Recognition.StateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="d327f-410">To get the state of the shared recognizer at the time of the event, use the <xref:System.Speech.Recognition.StateChangedEventArgs.RecognizerState%2A> property of the associated <xref:System.Speech.Recognition.StateChangedEventArgs>.</span></span> <span data-ttu-id="d327f-411">Para obtener el estado actual del reconocedor compartido, use el reconocedor <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="d327f-411">To get the current state of the shared recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognizer.State%2A> property.</span></span>  
  
 <span data-ttu-id="d327f-412">Cuando se crea un delegado para un <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> evento, se identifica el método que controlará el evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-412">When you create a delegate for a <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event, you identify the method that will handle the event.</span></span> <span data-ttu-id="d327f-413">Para asociar el evento al controlador, se debe agregar una instancia del delegado al evento.</span><span class="sxs-lookup"><span data-stu-id="d327f-413">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="d327f-414">Siempre que se produce el evento, se llama a su controlador, a menos que se quite el delegado.</span><span class="sxs-lookup"><span data-stu-id="d327f-414">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="d327f-415">Para obtener más información sobre los delegados de controladores de eventos, vea [delegados y eventos](http://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="d327f-415">For more information about event-handler delegates, see [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d327f-416">En el ejemplo siguiente se crea un reconocedor de voz compartido y, a continuación, crea dos tipos de las gramáticas para reconocer palabras específicas y para aceptar dictado libre.</span><span class="sxs-lookup"><span data-stu-id="d327f-416">The following example creates a shared speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="d327f-417">El ejemplo carga todas las gramáticas creadas al reconocedor de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="d327f-417">The example asynchronously loads all the created grammars to the recognizer.</span></span>  <span data-ttu-id="d327f-418">Un controlador para el <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> evento utiliza el <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> método para colocar el reconocimiento de Windows en modo de "escucha".</span><span class="sxs-lookup"><span data-stu-id="d327f-418">A handler for the <xref:System.Speech.Recognition.SpeechRecognizer.StateChanged> event uses the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> method to put Windows Recognition in "listening" mode.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognizer recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize a shared speech recognition engine.  
      recognizer = new SpeechRecognizer();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted += new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Add a handler for the StateChanged event.  
      recognizer.StateChanged += new EventHandler<StateChangedEventArgs>(recognizer_StateChanged);  
  
      // Create "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yah}" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "nah" });  
      SemanticResultValue noValue = new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Put the shared speech recognizer into "listening" mode.  
    static void  recognizer_StateChanged(object sender, StateChangedEventArgs e)  
    {  
     if (e.RecognizerState != RecognizerState.Stopped)  
      {  
        recognizer.EmulateRecognizeAsync("Start listening");  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void  recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
     Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void  recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
     string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
      }  
  
      // Add exception handling code here.  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerState" />
        <altmember cref="T:System.Speech.Recognition.StateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.State" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognizer.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d327f-419">Unloads all speech recognition grammars from the shared recognizer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-419">Unloads all speech recognition grammars from the shared recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-420">Si el reconocedor actualmente está cargando una gramática asincrónicamente, este método espera hasta que se cargue la gramática, antes de que descarga todas las gramáticas del reconocedor.</span><span class="sxs-lookup"><span data-stu-id="d327f-420">If the recognizer is currently loading a grammar asynchronously, this method waits until the grammar is loaded, before it unloads all of the recognizer's grammars.</span></span>  
  
 <span data-ttu-id="d327f-421">Para descargar una gramática concreta, utilice el <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-421">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognizer.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognizer.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">
          <span data-ttu-id="d327f-422">The grammar to unload.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-422">The grammar to unload.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d327f-423">Unloads a specified speech recognition grammar from the shared recognizer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d327f-423">Unloads a specified speech recognition grammar from the shared recognizer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d327f-424">Si se está ejecutando el reconocedor, las aplicaciones deben utilizar <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> para pausar el motor de reconocimiento de voz antes de cargar, descargar, habilitar o deshabilitar una gramática.</span><span class="sxs-lookup"><span data-stu-id="d327f-424">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognizer.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span> <span data-ttu-id="d327f-425">Para descargar todas las gramáticas, utilice la <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A> método.</span><span class="sxs-lookup"><span data-stu-id="d327f-425">To unload all grammars, use the <xref:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Grammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognizer.UnloadAllGrammars" />
      </Docs>
    </Member>
  </Members>
</Type>