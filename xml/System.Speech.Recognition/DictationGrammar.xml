<Type Name="DictationGrammar" FullName="System.Speech.Recognition.DictationGrammar">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8a9e1eaa194231c8436fba54e4f887133b57bdd0" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64097742" /></Metadata><TypeSignature Language="C#" Value="public class DictationGrammar : System.Speech.Recognition.Grammar" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DictationGrammar extends System.Speech.Recognition.Grammar" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.DictationGrammar" />
  <TypeSignature Language="VB.NET" Value="Public Class DictationGrammar&#xA;Inherits Grammar" />
  <TypeSignature Language="C++ CLI" Value="public ref class DictationGrammar : System::Speech::Recognition::Grammar" />
  <TypeSignature Language="F#" Value="type DictationGrammar = class&#xA;    inherit Grammar" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.Grammar</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Representa una gramática de reconocimiento de voz usada para el dictado de texto libre.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase proporciona aplicaciones con un modelo de lenguaje predefinido que puede procesar la entrada del usuario de voz en texto. Esta clase admite predeterminadas y personalizadas <xref:System.Speech.Recognition.DictationGrammar> objetos. Para obtener información acerca de cómo seleccionar una gramática de dictado, consulte el <xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29> constructor.  
  
 De forma predeterminada, el <xref:System.Speech.Recognition.DictationGrammar> modelo de lenguaje es libre de contexto. No hace uso de palabras específicas o de word a fin de identificar e interpretar la entrada de audio. Para agregar contexto a la gramática de dictado, use el <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> método.  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.DictationGrammar> los objetos no admiten la <xref:System.Speech.Recognition.Grammar.Priority%2A> propiedad. <xref:System.Speech.Recognition.DictationGrammar> se produce un <xref:System.NotSupportedException> si <xref:System.Speech.Recognition.Grammar.Priority%2A> está establecido.  
  
   
  
## Examples  
 El siguiente ejemplo crea tres gramáticas de dictado, agregarlos a un nuevo <xref:System.Speech.Recognition.SpeechRecognitionEngine> de objetos y devuelve el nuevo objeto. La gramática de la primera es la gramática de dictado predeterminada. La gramática de la segunda es la gramática de dictado de ortografía. La gramática de la tercera es la gramática de dictado predeterminada que incluye una frase de contexto. El <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> método se utiliza para asociar la frase de contexto con la gramática de dictado después de cargarlo a la <xref:System.Speech.Recognition.SpeechRecognitionEngine> objeto.  
  
```csharp  
  
private SpeechRecognitionEngine LoadDictationGrammars()  
{  
  
  // Create a default dictation grammar.  
  DictationGrammar defaultDictationGrammar = new DictationGrammar();  
  defaultDictationGrammar.Name = "default dictation";  
  defaultDictationGrammar.Enabled = true;  
  
  // Create the spelling dictation grammar.  
  DictationGrammar spellingDictationGrammar =  
    new DictationGrammar("grammar:dictation#spelling");  
  spellingDictationGrammar.Name = "spelling dictation";  
  spellingDictationGrammar.Enabled = true;  
  
  // Create the question dictation grammar.  
  DictationGrammar customDictationGrammar =  
    new DictationGrammar("grammar:dictation");  
  customDictationGrammar.Name = "question dictation";  
  customDictationGrammar.Enabled = true;  
  
  // Create a SpeechRecognitionEngine object and add the grammars to it.  
  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  
  recoEngine.LoadGrammar(defaultDictationGrammar);  
  recoEngine.LoadGrammar(spellingDictationGrammar);  
  recoEngine.LoadGrammar(customDictationGrammar);  
  
  // Add a context to customDictationGrammar.  
  customDictationGrammar.SetDictationContext("How do you", null);  
  
  return recoEngine;  
}  
  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.DictationGrammar" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.DictationGrammar" /> para la gramática de dictado predeterminada proporcionada por la tecnología Windows Desktop Speech.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La gramática de dictado predeterminada emula las prácticas estándar dictado, incluida la puntuación. No se admite la ortografía de una palabra.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DictationGrammar (string topic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string topic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topic As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DictationGrammar(System::String ^ topic);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.DictationGrammar : string -&gt; System.Speech.Recognition.DictationGrammar" Usage="new System.Speech.Recognition.DictationGrammar topic" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topic" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="topic">Identificador de recursos universal (URI) conforme a XML que especifica la gramática de dictado, ya sea <c>grammar:dictation</c> o <c>grammar:dictation#spelling</c>.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Speech.Recognition.DictationGrammar" /> con una gramática de dictado específica.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La plataforma de voz usa una sintaxis especializada de URI para definir la gramática de dictado personalizado. El valor `grammar:dictation` indica la gramática de dictado predeterminada. El valor `grammar:dictation#spelling` indica la gramática de dictado de ortografía.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictationContext">
      <MemberSignature Language="C#" Value="public void SetDictationContext (string precedingText, string subsequentText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictationContext(string precedingText, string subsequentText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDictationContext (precedingText As String, subsequentText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDictationContext(System::String ^ precedingText, System::String ^ subsequentText);" />
      <MemberSignature Language="F#" Value="member this.SetDictationContext : string * string -&gt; unit" Usage="dictationGrammar.SetDictationContext (precedingText, subsequentText)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="precedingText" Type="System.String" />
        <Parameter Name="subsequentText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="precedingText">Texto que indica el principio de un contexto de dictado.</param>
        <param name="subsequentText">Texto que indica el final de un contexto de dictado.</param>
        <summary>Agrega un contexto a una gramática de dictado que un objeto <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> o <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> ha cargado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 De forma predeterminada, la gramática de dictado no hace uso de palabras específicas o de word a fin de identificar e interpretar la entrada de audio. Cuando se agrega un contexto a una gramática de dictado, usa el motor de reconocimiento de la `precedingText` y `subsequentText` para identificar cuándo se debe interpretar la voz como un dictado.  
  
> [!NOTE]
>  Se debe cargar una gramática de dictado por una <xref:System.Speech.Recognition.SpeechRecognizer> o <xref:System.Speech.Recognition.SpeechRecognitionEngine> objeto antes de poder usar <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> para agregar un contexto.  
  
 En la tabla siguiente se describe cómo el motor de reconocimiento usa los dos parámetros para determinar cuándo se debe usar la gramática de dictado.  
  
|`precedingText`|`subsequentText`|Descripción|  
|---------------------|----------------------|-----------------|  
|no `null`|no `null`|El motor de reconocimiento utiliza los términos para frases de candidatos posibles corchete angular de cierre.|  
|`null`|no `null`|Usa el motor de reconocimiento del `subsequentText` para finalizar el dictado.|  
|no `null`|`null`|Usa el motor de reconocimiento del `precedingText` para iniciar el dictado.|  
|`null`|`null`|El motor de reconocimiento no usa un contexto cuando se usa la gramática de dictado.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
  </Members>
</Type>