<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommittableTransaction.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5e29b4ca4f99af2e899c40f7e2588bbeb984e5e4a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e29b4ca4f99af2e899c40f7e2588bbeb984e5e4a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Transactions.CommittableTransaction">
          <source>Describes a committable transaction.</source>
          <target state="translated">Describe una transacción confirmable.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>The <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> class provides an explicit way for applications to use a transaction, as opposed to using the <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class implicitly.</source>
          <target state="translated">La clase <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> proporciona a las aplicaciones una manera explícita de utilizar una transacción, a diferencia de utilizar implícitamente la clase <ph id="ph2">&lt;xref:System.Transactions.TransactionScope&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, the application writer needs to specifically call the <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> methods in order to commit or abort the transaction.</source>
          <target state="translated">A diferencia de la clase <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph>, el sistema de escritura de la aplicación ha de llamar específicamente a los métodos <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> y <ph id="ph3">&lt;xref:System.Transactions.Transaction.Rollback%2A&gt;</ph> para confirmar o anular la transacción.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>However, only the creator of a transaction can commit the transaction.</source>
          <target state="translated">Sin embargo, solo el creador de una transacción puede confirmar la transacción.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Therefore, copies of a committable transaction, obtained through the <ph id="ph1">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> method are not committable.</source>
          <target state="translated">Por lo tanto, copias de una transacción confirmable, obtenido a través de la <ph id="ph1">&lt;xref:System.Transactions.Transaction.Clone%2A&gt;</ph> método no son confirmable.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>We recommend that you create implicit transactions using the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> class, so that the ambient transaction context is automatically managed for you.</source>
          <target state="translated">Le recomendamos que cree transacciones implícitas mediante la <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> de la clase, por lo que el contexto de transacción de ambiente se administra automáticamente.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You should also use the <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> class for applications that require the use of the same transaction across multiple function calls or multiple thread calls.</source>
          <target state="translated">También debe utilizar el <ph id="ph1">&lt;xref:System.Transactions.TransactionScope&gt;</ph> y <ph id="ph2">&lt;xref:System.Transactions.DependentTransaction&gt;</ph> clase para las aplicaciones que requieren el uso de la misma transacción en varias llamadas de función o varias llamadas de subprocesos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>For more information on this model, see the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Para obtener más información sobre este modelo, vea el <bpt id="p1">[</bpt>implementar un implícita Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> tema.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Creating a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> does not automatically set the ambient transaction, which is the transaction your code executes in.</source>
          <target state="translated">Crear un <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> no se establece automáticamente la transacción de ambiente, que es la transacción se ejecuta el código en.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You can get or set the ambient transaction by calling the static <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> property of the global <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> object.</source>
          <target state="translated">Puede obtener o establecer la transacción ambiente llamando el método estático <ph id="ph1">&lt;xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType&gt;</ph> propiedad de la información global <ph id="ph2">&lt;xref:System.Transactions.Transaction&gt;</ph> objeto.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>For more information on ambient transactions, see the " Managing Transaction Flow using TransactionScopeOption" section of the <bpt id="p1">[</bpt>Implementing An Implicit Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> topic.</source>
          <target state="translated">Para obtener más información sobre transacciones de ambiente, vea la sección "Managing flujo de la transacción mediante TransactionScopeOption" de la <bpt id="p1">[</bpt>implementar un implícita Transaction Using Transaction Scope<ept id="p1">](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)</ept> tema.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>If the ambient transaction is not set, any operation on a resource manager is not part of that transaction.</source>
          <target state="translated">Si no se establece la transacción de ambiente, cualquier operación en un administrador de recursos no es parte de esa transacción.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>You need to explicitly set and reset the ambient transaction to ensure that resource managers operate under the right transaction context.</source>
          <target state="translated">Debe establecer explícitamente y restablecer la transacción ambiente para asegurarse de que los administradores de recursos funcionan bajo el contexto de transacción correcto.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Until a <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> has been committed, all the resources involved with the transaction are still locked.</source>
          <target state="translated">Hasta que un <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> tiene ha confirmado, todos los recursos relacionados con la transacción todavía están bloqueados.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>A <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> object cannot be reused.</source>
          <target state="translated">No se puede reutilizar un objeto <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>Once it has been committed or rolled back, it cannot be used again in a transaction or set as the current ambient transaction context.</source>
          <target state="translated">Una vez que se ha confirmado o revertido, no se puede volver a usar en una transacción ni establecer como el contexto de transacción de ambiente actual.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>The following sample creates two new instances of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, commits and rolls back them respectively.</source>
          <target state="translated">El ejemplo siguiente crea dos nuevas instancias de <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph>, confirma y deshacen respectivamente.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Transactions.CommittableTransaction">
          <source>This type is thread safe.</source>
          <target state="translated">Este tipo es seguro para la ejecución de subprocesos.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="T:System.Transactions.CommittableTransaction">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>The following sample creates a new instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> and commits it.</source>
          <target state="translated">El ejemplo siguiente crea una nueva instancia de <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> y lo confirma.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Se intenta crear una transacción bajo Windows 98, Windows 98 Segunda Edición o Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>The maximum amount of time the transaction can exist, before it is aborted.</source>
          <target state="translated">El tiempo máximo que la transacción puede existir, antes de anularse.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class with the specified <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> value.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> con el valor <ph id="ph2">&lt;paramref name="timeout" /&gt;</ph> especificado.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Se intenta crear una transacción bajo Windows 98, Windows 98 Segunda Edición o Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> structure that describes the transaction options to use for the new transaction.</source>
          <target state="translated">Estructura <ph id="ph1">&lt;see cref="T:System.Transactions.TransactionOptions" /&gt;</ph> que describe las opciones de transacción que se van a utilizar para la nueva transacción.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> class with the specified transaction options.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.Transactions.CommittableTransaction" /&gt;</ph> con las opciones de transacción especificadas.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>The following sample creates a new instance of <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> with options, and aborts it.</source>
          <target state="translated">El ejemplo siguiente crea una nueva instancia de <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction&gt;</ph> con opciones y se anula.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source>An attempt to create a transaction under Windows 98, Windows 98 Second Edition or Windows Millennium Edition.</source>
          <target state="translated">Se intenta crear una transacción bajo Windows 98, Windows 98 Segunda Edición o Windows Millennium Edition.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
          <source><ph id="ph1">&lt;paramref name="options" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="options" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>Begins an attempt to commit the transaction asynchronously.</source>
          <target state="translated">Comienza un intento de confirmar la transacción de forma asincrónica.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> interface that can be used by the caller to check the status of the asynchronous operation, or to wait for the operation to complete.</source>
          <target state="translated">El llamador puede utilizar una interfaz <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> para comprobar el estado de la operación asincrónica o esperar a que se realice la operación.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>This method returns immediately, before the transaction has been completed.</source>
          <target state="translated">Este método vuelve inmediatamente, antes de que se ha completado la transacción.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>The transaction then commits on a different thread, and the <ph id="ph1">`asyncCallback`</ph> delegate is invoked when it has completed.</source>
          <target state="translated">La transacción, a continuación, se confirma en otro subproceso y el <ph id="ph1">`asyncCallback`</ph> delegado se invoca cuando se ha completado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>After this method is called, you do not receive the outcome of the transaction until you call <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.</source>
          <target state="translated">Después de que se llama a este método, no recibirá el resultado de la transacción hasta que se llama <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
          <source>The commit process may complete synchronously inside this method call.</source>
          <target state="translated">El proceso de confirmación puede finalizar sincrónicamente dentro de esta llamada al método.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Attempts to commit the transaction.</source>
          <target state="translated">Intenta confirmar la transacción.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>When this method is called, all objects that have registered to participate in the transaction are polled and can independently indicate their vote to either commit or roll back the transaction.</source>
          <target state="translated">Cuando se llama a este método, todos los objetos que se han registrado para participar en la transacción se sondean y pueden indicar por separado su votación para confirmar o revertir la transacción.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>If any participant votes to roll back the transaction, it is rolled back and this method throws a <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> exception.</source>
          <target state="translated">Si cualquier participante vota para revertir la transacción, ésta se revierte y este método produce una <ph id="ph1">&lt;xref:System.Transactions.TransactionException&gt;</ph> excepción.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>This is a normal occurrence for a transaction and your code should catch and process such exceptions.</source>
          <target state="translated">Esto es algo normal para una transacción y el código debe detectar y procesar tales excepciones.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> bloquear hasta que se complete la primera fase de procesamiento de transacciones.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.</source>
          <target state="translated">La primera fase finaliza después de todos los administradores de recursos e inscripciones en la transacción han votado en el resultado de la transacción y el <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> ha decidido confirmar o anular la transacción.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">La segunda fase de procesamiento siempre es asincrónica.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">Por lo tanto, no hay ninguna garantía de que los datos recién confirmados desde dentro de una transacción determinada estarán disponibles inmediatamente después al no usar otra transacción para ver estos datos.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>Because this method blocks until the first phase of transaction processing is complete, you should be extremely careful when using this method in a Windows Form (WinForm) application, or a deadlock can occur.</source>
          <target state="translated">Dado que puede producirse este método se bloquea hasta que la primera fase de procesamiento de transacciones se complete, debe tener mucho cuidado al usar este método en una aplicación de Windows Forms (WinForm), o a un interbloqueo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>If you call this method inside one WinForm Control event (for example, clicking a button), and use the synchronous <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method to direct the control to perform some UI tasks (for example, changing colors) in the middle of processing the transaction, a deadlock will happen.</source>
          <target state="translated">Si se llama a este método dentro de un evento de WinForm Control (por ejemplo, al hacer clic en un botón) y se usa sincrónico <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> método para dirigir el control para realizar algunas tareas de interfaz de usuario (por ejemplo, cambiar los colores) durante el procesamiento de la transacción, se producirá un interbloqueo.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>This is because the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> method is synchronous and blocks the worker thread until the UI thread finishes its job.</source>
          <target state="translated">Esto es porque el <ph id="ph1">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> método es sincrónico y bloquea el subproceso de trabajo hasta que el subproceso de interfaz de usuario finaliza su trabajo.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>However, in our scenario, the UI thread is also waiting for the worker thread to commit the transaction.</source>
          <target state="translated">Sin embargo, en nuestro escenario, el subproceso de interfaz de usuario también está esperando para que el subproceso de trabajo confirmar la transacción.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>The result is that none is able to proceed and the scope waits indefinitely for the Commit to finish.</source>
          <target state="translated">El resultado es que no se podrá realizar y el ámbito espera indefinidamente a que finalice la ejecución.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source>You should use <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> rather than <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> wherever possible, because it is asynchronous and thus less prone to deadlock.</source>
          <target state="translated">Debe usar <ph id="ph1">&lt;xref:System.Windows.Forms.Control.BeginInvoke%2A&gt;</ph> en lugar de <ph id="ph2">&lt;xref:System.Windows.Forms.Control.Invoke%2A&gt;</ph> siempre que sea posible, porque es asincrónico y, por tanto, menos propenso a generar un interbloqueo.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> is called on a transaction and the transaction becomes <ph id="ph2">&lt;see cref="F:System.Transactions.TransactionStatus.InDoubt" /&gt;</ph>.</source>
          <target state="translated">Se llama al método <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> en una transacción y la transacción pasa a ser <ph id="ph2">&lt;see cref="F:System.Transactions.TransactionStatus.InDoubt" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.Commit">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> is called and the transaction rolls back for the first time.</source>
          <target state="translated">Se llama al método <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.Commit" /&gt;</ph> y se deshace la transacción por primera vez.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>Ends an attempt to commit the transaction asynchronously.</source>
          <target state="translated">Finaliza un intento de confirmar la transacción de forma asincrónica.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>You should call this method in the callback delegate specified as a parameter to the <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> method, when you have finished any cleanup work associated with the asynchronous commitment.</source>
          <target state="translated">Debe llamar a este método en el delegado de devolución de llamada especificado como un parámetro a la <ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.BeginCommit%2A&gt;</ph> método, cuando haya terminado cualquier trabajo de limpieza asociado a la confirmación asincrónica.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>You can also call this method early without waiting for the delegate.</source>
          <target state="translated">También puede llamar a este método al principio sin tener que esperar el delegado.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>If, by the time you call this method, the transaction has not completed, this method waits for its completion.</source>
          <target state="translated">Si, en el momento en que se llama a este método, no ha completado la transacción, este método espera su finalización.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The <ph id="ph1">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> property returned by <ph id="ph2">`asyncResult`</ph> is always <ph id="ph3">`false`</ph>, even if the operation completed synchronously.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IAsyncResult.CompletedSynchronously%2A&gt;</ph> propiedad devuelta por <ph id="ph2">`asyncResult`</ph> siempre es <ph id="ph3">`false`</ph>, incluso si la operación se ha completado sincrónicamente.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> block until the first phase of transaction processing is complete.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Transactions.CommittableTransaction.Commit%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.Transactions.CommittableTransaction.EndCommit%2A&gt;</ph> bloquear hasta que se complete la primera fase de procesamiento de transacciones.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The first phase ends after all resource managers and enlistments in the transaction have voted on the transaction outcome and the <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> has durably decided to commit or abort the transaction.</source>
          <target state="translated">La primera fase finaliza después de todos los administradores de recursos e inscripciones en la transacción han votado en el resultado de la transacción y el <ph id="ph1">&lt;xref:System.Transactions.TransactionManager&gt;</ph> ha decidido confirmar o anular la transacción.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>The second phase of processing is always asynchronous.</source>
          <target state="translated">La segunda fase de procesamiento siempre es asincrónica.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source>Therefore, there is no guarantee that data just committed from within a given transaction will be immediately available afterwards when not using another transaction to view this data.</source>
          <target state="translated">Por lo tanto, no hay ninguna garantía de que los datos recién confirmados desde dentro de una transacción determinada estarán disponibles inmediatamente después al no usar otra transacción para ver estos datos.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
          <source><ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> is called and the transaction rolls back for the first time.</source>
          <target state="translated">Se llama al método <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> y se deshace la transacción por primera vez.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
          <source>Gets the object provided as the last parameter of the <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> method call.</source>
          <target state="translated">Obtiene el objeto proporcionado como el último parámetro de la llamada al método <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
          <source>The object provided as the last parameter of the <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph> method call.</source>
          <target state="translated">Objeto proporcionado como el último parámetro de la llamada al método <ph id="ph1">&lt;see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated">Obtiene <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se utiliza para esperar a que finalice una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se utiliza para esperar a que finalice una operación asincrónica.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source>Gets an indication of whether the asynchronous commit operation completed synchronously.</source>
          <target state="translated">Obtiene una indicación que especifica si la operación de confirmación asincrónica ha finalizado sincrónicamente.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the asynchronous commit operation completed synchronously; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la operación de confirmación asincrónica ha finalizado sincrónicamente; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
          <source>This property always returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> even if the operation completed synchronously.</source>
          <target state="translated">Esta propiedad siempre devuelve <ph id="ph1">&lt;see langword="false" /&gt;</ph> aún cuando la operación finalice sincrónicamente.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
          <source>Gets an indication whether the asynchronous commit operation has completed.</source>
          <target state="translated">Obtiene una indicación que especifica si la operación de confirmación asincrónica ha finalizado.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation is complete; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si la operación se ha completado; en caso contrario, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>