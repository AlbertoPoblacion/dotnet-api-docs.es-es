<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="97a920f61b9b131d328d66e3be820d13c431fae9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36558500" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a permission that uses a <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> implementation to determine if access to a resource should be granted to the active principal. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> clase proporciona la capacidad de realizar comprobaciones de acceso imperativas mediante el uso de la <xref:System.Security.Claims.ClaimsAuthorizationManager> que está configurado para una aplicación. Al invocar el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método o el método estático <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método, puede proporcionar protección a los recursos desde dentro de la ruta de acceso de ejecución del código según la directiva de autorización definida para el Administrador de autenticación de notificaciones. El acceso declarativo comprueba puede realizarse mediante la <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> clase.  
  
> [!IMPORTANT]
>  El <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> clase utiliza el Administrador de autorización de notificaciones configurado por el <xref:System.IdentityModel.Configuration.IdentityConfiguration> que se establece en el <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> propiedad. Esto es cierto en todos los casos, incluso en escenarios donde no se utiliza WS-Federation; Por ejemplo, las aplicaciones Web (WCF) activas y las aplicaciones de consola. Puede especificar el Administrador de autorización de notificaciones en la configuración o mediante programación. Para especificar el Administrador de autorización de notificaciones en un archivo de configuración, establezca el [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento bajo un [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) elemento y asegúrese de que esta configuración de identidad se hace referencia a la [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elemento que se carga en tiempo de ejecución (por ejemplo, mediante establecer el `identityConfigurationName` atributo). Para establecer el Administrador de autorización de notificaciones mediante programación, proporcione un controlador para el <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> eventos.  
  
 En un nivel, la funcionalidad proporcionada por <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> es similar a las comprobaciones de acceso basado en roles (RBAC) proporcionadas a través de la <xref:System.Security.Permissions.PrincipalPermission> clase; sin embargo, la <xref:System.Security.Claims.ClaimsAuthorizationManager> clase realiza comprobaciones en función de las notificaciones presentadas por la entidad de seguridad activa. Esto permite mucha más granularidad que está disponible a través de RBAC puro, donde normalmente se recopilan muchos permisos en una única función. Quizás, lo que es más importante, autorización basada en notificaciones permite mejor separación de directiva de autorización y lógica empresarial porque puede que el permiso se exijan para una acción específica en un recurso en el código y la directiva de back-end puede usarse para configurar las notificaciones que el debe poseer la presentación de entidad con el fin de satisfacer la demanda. Al igual que RBAC, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> realiza una comprobación de acceso basado en usuario, es decir, a diferencia de la seguridad de acceso del código implementada por clases que derivan de la <xref:System.Security.CodeAccessPermission> clase y utilizar un recorrido de pila para asegurarse de que todos los llamadores del código tienen un permiso, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>realiza su comprobación solo en la entidad de seguridad actual.  
  
 El método estático <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método comprueba el acceso para una acción especificada en un recurso especificado. El recurso y la acción son cadenas y normalmente son URI. También se puede inicializar una instancia de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> con una acción y un recurso y llaman a la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método. Aunque el constructor toma solo un único recurso y la acción, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos se pueden combinar a través de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> y <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. Un permiso que se creó mediante el uso de estos métodos puede contener varios pares de acción del recurso.  
  
 Ambos métodos determinan el acceso mediante la invocación de la <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método para el Administrador de autorización de notificaciones configurada con un <xref:System.Security.Claims.AuthorizationContext> formada por la entidad de seguridad activa (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>), el recurso y la acción. Producen un <xref:System.Security.SecurityException> si la entidad de seguridad actual no está autorizado para realizar la acción en el recurso; de lo contrario, la ejecución continúa.  
  
 En el caso de un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> que contiene varios pares de acción del recurso, el <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método se invoca para cada uno de los pares de acción de recursos incluidos en el permiso.  Para la llamada a <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> sea correcta, el principal activo debe estar autorizado para todos los pares de acción de recursos incluidos en el permiso.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo proteger un recurso mediante el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método, el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método, o un <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> declaración. En cada caso, se ignora el número <xref:System.Security.Claims.ClaimsAuthorizationManager> se invoca para evaluar la entidad de seguridad actual en el recurso especificado y la acción. Si la entidad de seguridad actual no está autorizado para la acción especificada en el recurso especificado, un <xref:System.Security.SecurityException> se inicia; en caso contrario, la ejecución continúa.  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 El siguiente XML muestra la configuración mínima necesaria para usar una autorización de notificaciones personalizadas con el Administrador de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> clase. Debe, como mínimo, declarar tanto la `system.identityModel` y `system.identityModel.services` secciones en el `<configSection>` elemento y, a continuación, especifique el Administrador de autorización en un [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)elemento en la configuración de la identidad predeterminada. Esto garantizará que se hace referencia a su administrador de autorización de la configuración de la federación de forma predeterminada. Como alternativa, puede especificar el nombre de la configuración de identidad con la que el Administrador de autorización se especifica en el `identityConfigurationName` atributo de la [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elemento.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">The resource on which the principal should be authorized.</param>
        <param name="action">The action for which the principal should be authorized.</param>
        <summary>Creates a new instance of the <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objeto se inicializa con el par de acción de recurso especificada. Puede llamar a la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método para realizar una comprobación de acceso.  
  
 Aunque el constructor toma solo un único recurso y la acción, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos se pueden combinar a través de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> y <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. El permiso creado a través de estos métodos puede contener varios pares de acción del recurso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="resource" /> is <see langword="null" /> or an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="action" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">The resource on which the principal should be authorized.</param>
        <param name="action">The action for which the principal should be authorized.</param>
        <summary>Checks if the current principal is authorized to perform the specified action on the specified resource.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La entidad de seguridad debe estar autorizada para la acción especificada en el recurso especificado o el <xref:System.Security.SecurityException> se produce la excepción.  
  
 El <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> se invoca el método para el Administrador de autorización de notificaciones configurada con un <xref:System.Security.Claims.AuthorizationContext> formada por la entidad de seguridad activa (<xref:System.Threading.Thread.CurrentPrincipal%2A>), el recurso y la acción.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo proteger un recurso mediante el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método. El Administrador de autorización de notificaciones configurada se invoca para evaluar la entidad de seguridad actual en el recurso especificado y la acción. Si la entidad de seguridad actual no está autorizado para la acción especificada en el recurso especificado, un <xref:System.Security.SecurityException> se inicia; en caso contrario, la ejecución continúa.  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current principal is not assignable from <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  -or-  There is no <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> configured.</exception>
        <exception cref="T:System.Security.SecurityException">The authorization check failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a copy of the current <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> instance.</summary>
        <returns>A <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> copied from the current instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Checks if the current principal is authorized for the resource-action pairs associated with the current instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Debe tener permisos de la entidad de seguridad actual para todos los pares de acción del recurso asociados a esta instancia o el <xref:System.Security.SecurityException> se produce la excepción.  
  
 Aunque el constructor toma solo un único recurso y la acción, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos se pueden combinar a través de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> y <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. El permiso creado a través de estos métodos puede contener varios pares de acción del recurso.  
  
 El <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método invoca el <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método para el Administrador de autorización de notificaciones configurada con un <xref:System.Security.Claims.AuthorizationContext> formada por la entidad de seguridad activa (<xref:System.Threading.Thread.CurrentPrincipal%2A>), el recurso y la acción para cada uno de los pares de acción del recurso que contiene en el permiso. Para el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> lleve a cabo correctamente la activa debe tener permisos de entidad de seguridad de todos los pares de acción del recurso que se encuentran en el permiso.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo proteger un recurso mediante el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método. El Administrador de autorización de notificaciones configurada se invoca para evaluar la entidad de seguridad actual en el recurso especificado y la acción. Si la entidad de seguridad actual no está autorizado para la acción especificada en el recurso especificado, un <xref:System.Security.SecurityException> se inicia; en caso contrario, la ejecución continúa.  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The current principal is not assignable from <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  -or-  There is no <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> configured.</exception>
        <exception cref="T:System.Security.SecurityException">The authorization check failed.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">The XML encoding to use to reconstruct the permission.</param>
        <summary>Reconstructs the current permission and its state from the specified XML encoding.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reconstruye un permiso de la codificación XML creado por una llamada a la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">The encoding contains unrecognized elements or attributes or improperly formed XML.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">The permission to intersect with the current permission. It must be an instance of <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Returns a permission that is the intersection of the current permission and the specified permission.</summary>
        <returns>A new <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> that represents the intersection of the current permission and the specified permission; or <see langword="null" /> if <paramref name="target" /> is <paramref name="null" /> or is not an instance of <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El permiso que se devuelve tiene los pares de acción del recurso que se encontraban en el permiso actual y en el permiso especificado. Pares de acción del recurso que existían en solo uno u otro de los permisos no se incluyen. Para una <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> sea correcta en el nuevo permiso, la entidad de seguridad actual solo necesita estar autorizada para los pares de acción de recursos que son comunes para el permiso actual y el permiso especificado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">The permission to be tested for the subset relationship. It must be an instance of <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Returns a value that indicates whether current permission is a subset of the specified permission.</summary>
        <returns>
          <see langword="true" /> if current permission is a subset of the specified permission; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El permiso actual es un subconjunto del permiso especificado si todos los pares de acción de recursos incluidos en el permiso actual también están presentes en el permiso especificado. Si `target` es `null` o no es una instancia de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> devuelve `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a value that indicates whether the permission is unrestricted.</summary>
        <returns>
          <see langword="true" /> if the permission is unrestricted; otherwise, <see langword="false" />. Always returns <see langword="true" /> indicating that permission is unrestricted.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the XML encoded form of the current permission and its state.</summary>
        <returns>The XML encoded form of the current permission and its state.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La entidad de seguridad se puede reconstruir desde su formato XML codificado mediante una llamada a la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">The permission to combine with current permission. It must be of type <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Returns a new permission that is the union of the current permission and the specified permission. <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> object that has all of the resource-action pairs that are present in the current instance and the target instance.</summary>
        <returns>A new <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> that represents the union of the current permission and the specified permission; or <see langword="null" /> if <paramref name="target" /> is <paramref name="null" /> or is not an instance of <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tiene el permiso que se devuelve todos los pares de acción del recurso que se encuentran en el permiso actual y todos los pares de acción del recurso que supone que el permiso especificado. Para una <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> sea correcta en el nuevo permiso, debe tener permisos de la entidad de seguridad actual para todos los pares de acción del recurso que existían en el permiso actual y todos los pares de acción del recurso que existían en el permiso especificado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>