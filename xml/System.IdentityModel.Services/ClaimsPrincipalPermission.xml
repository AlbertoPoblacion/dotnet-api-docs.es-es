<Type Name="ClaimsPrincipalPermission" FullName="System.IdentityModel.Services.ClaimsPrincipalPermission">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eeb199be9aad43189f1b9fc4e545b8d607add347" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52740732" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClaimsPrincipalPermission : System.Security.IPermission, System.Security.ISecurityEncodable, System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit ClaimsPrincipalPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.Permissions.IUnrestrictedPermission" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClaimsPrincipalPermission&#xA;Implements IPermission, ISecurityEncodable, IUnrestrictedPermission" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsPrincipalPermission sealed : System::Security::IPermission, System::Security::ISecurityEncodable, System::Security::Permissions::IUnrestrictedPermission" />
  <TypeSignature Language="F#" Value="type ClaimsPrincipalPermission = class&#xA;    interface IPermission&#xA;    interface ISecurityEncodable&#xA;    interface IUnrestrictedPermission" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.Permissions.IUnrestrictedPermission</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un permiso que usa una implementación de <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> para determinar si se debe conceder acceso a un recurso a la entidad de seguridad activa. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> clase proporciona la capacidad de realizar comprobaciones de acceso imperativas utilizando el <xref:System.Security.Claims.ClaimsAuthorizationManager> que está configurado para una aplicación. Al invocar el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> estático o método <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método, puede proporcionar protección a los recursos desde dentro de la ruta de acceso de ejecución del código según la directiva de autorización definida para el Administrador de autenticación de notificaciones. Se pueden realizar mediante el uso de comprobaciones de acceso declarativa la <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> clase.  
  
> [!IMPORTANT]
>  El <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> clase usa el Administrador de autorización de notificaciones configurado por el <xref:System.IdentityModel.Configuration.IdentityConfiguration> que se establece en el <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> propiedad. Esto es cierto en todos los casos, incluso en escenarios donde no se utiliza WS-Federation; Por ejemplo, las aplicaciones Web (WCF) activas y las aplicaciones de consola. Puede especificar el Administrador de autorización de notificaciones en la configuración o mediante programación. Para especificar el Administrador de autorización de notificaciones en un archivo de configuración, establezca el [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md) elemento bajo un [ &lt;identityConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) elemento y asegúrese de que se hace referencia a esta configuración de identidad por el [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elemento cargado por el tiempo de ejecución (por ejemplo, mediante establecer el `identityConfigurationName` atributo). Para establecer el Administrador de autorización de notificaciones mediante programación, proporcione un controlador para el <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=nameWithType> eventos.  
  
 En un nivel, la funcionalidad proporcionada por <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> es similar a las comprobaciones de acceso basado en roles (RBAC) proporcionadas a través de la <xref:System.Security.Permissions.PrincipalPermission> clase; sin embargo, la <xref:System.Security.Claims.ClaimsAuthorizationManager> clase realiza comprobaciones en función de las notificaciones presentadas por la entidad de seguridad activa. Esto permite mucha más granularidad de lo que está disponible a través de RBAC puro, donde se suelen recopilar muchos permisos en una única función. Quizás, lo que es más importante, la autorización basada en notificaciones permite mejor separación de la directiva de autorización y lógica de negocios porque se puede solicitar permiso para una acción específica en un recurso en el código y la directiva de back-end puede usarse para configurar las notificaciones que el presentación de entidad debe poseer con el fin de satisfacer la demanda. Como RBAC, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> realiza una comprobación de acceso basado en usuario, es decir, a diferencia de la seguridad de acceso del código implementada por clases que derivan de la <xref:System.Security.CodeAccessPermission> clase y utilizar un recorrido de pila para asegurarse de que todos los llamadores del código tienen un permiso, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>realiza su comprobación solo en la entidad de seguridad actual.  
  
 Estático <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método comprueba el acceso para una acción especificada en un recurso especificado. El recurso y la acción son cadenas y normalmente son identificadores URI. También puede inicializar una instancia de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> con una acción y un recurso y la llamada la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método. Aunque el constructor solo toma un único recurso y una acción, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos se pueden combinar a través de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> y <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. Un permiso que se creó mediante el uso de estos métodos puede contener varios pares de recurso-acción.  
  
 Ambos métodos determinan el acceso mediante la invocación de la <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método para el Administrador de autorización de notificaciones configurada con una <xref:System.Security.Claims.AuthorizationContext> formada por la entidad de seguridad activa (<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>), el recurso y la acción. Inician un <xref:System.Security.SecurityException> si la entidad de seguridad actual no está autorizado para realizar la acción en el recurso; de lo contrario, la ejecución continúa.  
  
 En el caso de un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> que contiene varios pares de recurso-acción, el <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método se invoca para cada uno de los pares de recurso-acción contenidos en el permiso.  Para la llamada a <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> para tener éxito, la entidad de seguridad activa debe estar autorizada para todos los pares de recurso-acción contenidos en el permiso.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo proteger un recurso mediante el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método, el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método, o un <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> declaración. En cada caso, el configurado <xref:System.Security.Claims.ClaimsAuthorizationManager> se invoca para evaluar la entidad de seguridad actual en el recurso especificado y la acción. Si la entidad de seguridad actual no está autorizado para la acción especificada en el recurso especificado, un <xref:System.Security.SecurityException> se inicia; de lo contrario, la ejecución continúa.  
  
 [!code-csharp[WifCppWithCam#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#1)]  
  
 El siguiente XML muestra la configuración mínima necesaria para usar una autorización de notificaciones personalizadas con el administrador la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> clase. Debe, como mínimo, declara ambos el `system.identityModel` y `system.identityModel.services` secciones en el `<configSection>` elemento y, a continuación, especifique el Administrador de autorización en un [ &lt;claimsAuthorizationManager&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager.md)elemento en la configuración de la identidad predeterminada. Esto garantizará que se hace referencia a su administrador de autorización de la configuración de federación de forma predeterminada. Como alternativa, puede especificar el nombre de la configuración de la identidad bajo la que el Administrador de autorización se especifica en el `identityConfigurationName` atributo de la [ &lt;federationConfiguration&gt; ](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/federationconfiguration.md) elemento.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>  
<configuration>  
  <configSections>  
    <!-- WIF configuration sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    <section name="system.identityModel.services" type="System.IdentityModel.Services.Configuration.SystemIdentityModelServicesSection, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
  </configSections>  
  
  <startup>  
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />  
  </startup>  
  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type ="MyClaimsAuthorizationManager.MyClaimsAuthorizationManager, MyClaimsAuthorizationManager"/>  
    </identityConfiguration>  
  </system.identityModel>  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute" />
    <altmember cref="P:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration" />
    <altmember cref="T:System.Security.Claims.ClaimsAuthorizationManager" />
    <related type="Article" href="https://msdn.microsoft.com/library/8b14054c-6d07-46ab-ab58-03f14beac0f2">&lt;federationConfiguration&gt;</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsPrincipalPermission (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsPrincipalPermission(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.Services.ClaimsPrincipalPermission : string * string -&gt; System.IdentityModel.Services.ClaimsPrincipalPermission" Usage="new System.IdentityModel.Services.ClaimsPrincipalPermission (resource, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">El recurso en el que se debe autorizar la entidad de seguridad.</param>
        <param name="action">La acción para la que debe autorizarse la entidad de seguridad.</param>
        <summary>Crea una nueva instancia de la clase <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objeto se inicializa con el par de acción de recurso especificado. Puede llamar a la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método para realizar una comprobación de acceso.  
  
 Aunque el constructor solo toma un único recurso y una acción, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos se pueden combinar a través de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> y <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. El permiso creado a través de estos métodos puede contener varios pares de recurso-acción.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="resource" /> es <see langword="null" /> o una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="action" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public static void CheckAccess (string resource, string action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CheckAccess(string resource, string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CheckAccess (resource As String, action As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CheckAccess(System::String ^ resource, System::String ^ action);" />
      <MemberSignature Language="F#" Value="static member CheckAccess : string * string -&gt; unit" Usage="System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess (resource, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime's behavior would rely on changing data")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="System.String" />
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resource">El recurso en el que se debe autorizar la entidad de seguridad.</param>
        <param name="action">La acción para la que debe autorizarse la entidad de seguridad.</param>
        <summary>Comprueba si la entidad de seguridad actual está autorizada para realizar la acción especificada en el recurso especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La entidad de seguridad debe estar autorizada para la acción especificada en el recurso especificado o el <xref:System.Security.SecurityException> es una excepción.  
  
 El <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> se invoca el método del Administrador de autorización de notificaciones configurada con una <xref:System.Security.Claims.AuthorizationContext> formada por la entidad de seguridad activa (<xref:System.Threading.Thread.CurrentPrincipal%2A>), el recurso y la acción.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo proteger un recurso mediante el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.CheckAccess%2A> método. El Administrador de autorización de notificaciones configurada se invoca para evaluar la entidad de seguridad actual en el recurso especificado y la acción. Si la entidad de seguridad actual no está autorizado para la acción especificada en el recurso especificado, un <xref:System.Security.SecurityException> se inicia; de lo contrario, la ejecución continúa.  
  
 [!code-csharp[WifCppWithCam#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La entidad de seguridad actual no se puede asignar desde <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  
  
O bien 
No hay <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> configurados.</exception>
        <exception cref="T:System.Security.SecurityException">La comprobación de la autorización no se pudo realizar.</exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Copy();" />
      <MemberSignature Language="F#" Value="abstract member Copy : unit -&gt; System.Security.IPermission&#xA;override this.Copy : unit -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime's behavior would rely on changing data")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Security", "CA2103:ReviewImperativeSecurity", Justification="It is expected that the runtime’s behavior would rely on changing data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve una copia de la instancia actual de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</summary>
        <returns><see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> que se ha copiado de la instancia actual.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit&#xA;override this.Demand : unit -&gt; unit" Usage="claimsPrincipalPermission.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Comprueba si la entidad de seguridad actual está autorizada para los pares de recurso-acción asociados a la instancia actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La entidad de seguridad actual debe estar autorizada para todos los pares de recurso-acción asociados con esta instancia o el <xref:System.Security.SecurityException> es una excepción.  
  
 Aunque el constructor solo toma un único recurso y una acción, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> objetos se pueden combinar a través de la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Union%2A> y <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect%2A> métodos. El permiso creado a través de estos métodos puede contener varios pares de recurso-acción.  
  
 El <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> invoca el método la <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A?displayProperty=nameWithType> método para el Administrador de autorización de notificaciones configurada con una <xref:System.Security.Claims.AuthorizationContext> formada por la entidad de seguridad activa (<xref:System.Threading.Thread.CurrentPrincipal%2A>), el recurso y la acción para cada uno de los pares de recurso-acción contenidos en el permiso. Para el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> se realice correctamente activo entidad de seguridad debe estar autorizado para todos los pares de recurso-acción contenidas en el permiso.  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo proteger un recurso mediante el <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> método. El Administrador de autorización de notificaciones configurada se invoca para evaluar la entidad de seguridad actual en el recurso especificado y la acción. Si la entidad de seguridad actual no está autorizado para la acción especificada en el recurso especificado, un <xref:System.Security.SecurityException> se inicia; de lo contrario, la ejecución continúa.  
  
 [!code-csharp[WifCppWithCam#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcppwithcam/cs/wifcppwithcam/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">La entidad de seguridad actual no se puede asignar desde <see cref="T:System.Security.Claims.ClaimsPrincipal" />.  
  
O bien 
No hay <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> configurados.</exception>
        <exception cref="T:System.Security.SecurityException">La comprobación de la autorización no se pudo realizar.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public void FromXml (System.Security.SecurityElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FromXml (element As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void FromXml(System::Security::SecurityElement ^ element);" />
      <MemberSignature Language="F#" Value="abstract member FromXml : System.Security.SecurityElement -&gt; unit&#xA;override this.FromXml : System.Security.SecurityElement -&gt; unit" Usage="claimsPrincipalPermission.FromXml element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="element">Codificación XML que se usa para reconstruir el permiso.</param>
        <summary>Reconstruye el permiso actual y su estado de la codificación XML especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Reconstruye un permiso de la codificación XML creado por una llamada a la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml%2A> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="element" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">La codificación contiene elementos o atributos no reconocidos, o XML con formado incorrecto.</exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Intersect : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Intersect target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso que forma una intersección con el permiso actual. Debe ser una instancia de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Devuelve un permiso nuevo que es la intersección del permiso actual y el permiso especificado.</summary>
        <returns>Nueva <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> que representa la intersección del permiso actual y del permiso especificado o <see langword="null" /> si <paramref name="target" /> es <paramref name="null" /> o no es una instancia de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El permiso que se devuelve tiene sólo los pares de recurso-acción que estaban presentes en el permiso actual y en el permiso especificado. No se incluyen los pares de recurso-acción que existían en solo uno u otro de los permisos. Para un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> para tener éxito en el nuevo permiso, la entidad de seguridad actual solo debe tener autorización para los pares de recurso-acción comúnmente al permiso actual y el permiso especificado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : System.Security.IPermission -&gt; bool&#xA;override this.IsSubsetOf : System.Security.IPermission -&gt; bool" Usage="claimsPrincipalPermission.IsSubsetOf target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso que se va a probar para la relación del subconjunto. Debe ser una instancia de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Devuelve un valor que indica si el permiso actual es un subconjunto del permiso especificado.</summary>
        <returns><see langword="true" /> si el permiso actual es un subconjunto del permiso especificado; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El permiso actual es un subconjunto del permiso especificado si todos los pares de recurso-acción contenidos en el permiso actual también están presentes en el permiso especificado. Si `target` es `null` o no es una instancia de <xref:System.IdentityModel.Services.ClaimsPrincipalPermission>, <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.IsSubsetOf%2A> devuelve `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnrestricted">
      <MemberSignature Language="C#" Value="public bool IsUnrestricted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnrestricted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.IsUnrestricted" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUnrestricted () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsUnrestricted();" />
      <MemberSignature Language="F#" Value="abstract member IsUnrestricted : unit -&gt; bool&#xA;override this.IsUnrestricted : unit -&gt; bool" Usage="claimsPrincipalPermission.IsUnrestricted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve un valor que indica si el permiso es no restringido.</summary>
        <returns>Es <see langword="true" /> si el permiso no está restringido; en caso contrario, es <see langword="false" />. Siempre devuelve <see langword="true" />, que indica que el permiso no está limitado.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::SecurityElement ^ ToXml();" />
      <MemberSignature Language="F#" Value="abstract member ToXml : unit -&gt; System.Security.SecurityElement&#xA;override this.ToXml : unit -&gt; System.Security.SecurityElement" Usage="claimsPrincipalPermission.ToXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Devuelve el formato codificado XML del permiso actual y su estado.</summary>
        <returns>Formato codificado XML del permiso actual y su estado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La entidad de seguridad se puede reconstruir desde su formato XML codificado mediante una llamada a la <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.FromXml%2A> método.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.ClaimsPrincipalPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ target);" />
      <MemberSignature Language="F#" Value="abstract member Union : System.Security.IPermission -&gt; System.Security.IPermission&#xA;override this.Union : System.Security.IPermission -&gt; System.Security.IPermission" Usage="claimsPrincipalPermission.Union target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Permiso para combinar con el permiso actual. Debe ser del tipo <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</param>
        <summary>Devuelve un permiso nuevo que es la unión del permiso actual y el permiso especificado. Objeto <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> que tiene todos los pares de recurso-acción presentes en la instancia actual y la instancia de destino.</summary>
        <returns>Nueva <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" /> que representa la unión del permiso actual y del permiso especificado o <see langword="null" /> si <paramref name="target" /> es <paramref name="null" /> o no es una instancia de <see cref="T:System.IdentityModel.Services.ClaimsPrincipalPermission" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tiene el permiso que se devuelve todos los pares de recurso-acción presentes en el permiso actual y todos los pares de recurso-acción que están presentan en el permiso especificado. Para un <xref:System.IdentityModel.Services.ClaimsPrincipalPermission.Demand%2A> para tener éxito en el nuevo permiso, la entidad de seguridad actual debe estar autorizada para todos los pares de recurso-acción que existían en el permiso actual y todos los pares de recurso-acción que existían en el permiso especificado.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>