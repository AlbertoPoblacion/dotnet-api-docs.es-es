<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1b83b7cb358be3a46e68daac29ed99f5f5e062e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36527820" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Representa el texto que debe mantenerse confidencial (por ejemplo, mediante su eliminación de la memoria del equipo cuando ya no se necesite). Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString> es un tipo de cadena que proporciona una medida de seguridad. Intenta evitar almacenar cadenas potencialmente confidenciales en la memoria de proceso como texto sin formato.  (Para conocer las limitaciones, sin embargo, consulte la [¿es seguro SecureString?](#HowSecure) sección.) El valor de una instancia de <xref:System.Security.SecureString> automáticamente está protegido mediante un mecanismo compatible con la plataforma subyacente cuando se inicializa la instancia o cuando se modifica el valor. La aplicación puede volver la instancia inalterable y evitar la modificación posterior al invocar el <xref:System.Security.SecureString.MakeReadOnly%2A> método.  
  
 La longitud máxima de un <xref:System.Security.SecureString> instancia es de 65.536 caracteres.  
  
> [!IMPORTANT]
>  Este tipo implementa la <xref:System.IDisposable> interfaz. Cuando haya terminado de utilizar una instancia del tipo, debe eliminar del mismo directa o indirectamente. Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque. Para deshacerse de él indirectamente, use una construcción de lenguaje como `using` (en C#) o `Using` (en Visual Basic). Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.  
  
 La <xref:System.Security.SecureString> clase y sus miembros no son visibles para COM. Para obtener más información, vea <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  
  
 En esta sección:  
  
 [Cadena de vs. SecureString](#vsString)   
 [Operaciones de SecureString](#Ops)   
 [SecureString e interoperabilidad](#interop)   
 [¿Es seguro SecureString?](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>Cadena frente a SecureString  
 Una instancia de la <xref:System.String?displayProperty=nameWithType> clase es inmutable y, cuando ya no necesite, no se pueden programar mediante programación para la recolección; es decir, la instancia es de solo lectura después de crearlo, y no es posible predecir cuándo la instancia será elimina de la memoria de equipo. Dado que <xref:System.String?displayProperty=nameWithType> las instancias son inmutables, las operaciones que parecen modificar una instancia existente realmente crean una copia del mismo para manipular. Por lo tanto, si un <xref:System.String> objeto contiene información confidencial, como una contraseña, tarjeta de crédito o datos personales, existe un riesgo para la información se pueda revelar una vez utilizada, porque la aplicación no puede eliminar los datos de la memoria del equipo .  
  
 A <xref:System.Security.SecureString> objeto es similar a una <xref:System.String> porque tiene un valor de texto del objeto. Sin embargo, el valor de un <xref:System.Security.SecureString> está anclado en la memoria de objetos, puede usar un mecanismo de protección, como cifrado, proporcionado por el sistema operativo subyacente, se puede modificar hasta que la aplicación lo marque como de solo lectura y puede eliminarse de la memoria del equipo ya sea mediante la aplicación que llama a la <xref:System.Security.SecureString.Dispose%2A> método o por el recolector de elementos no utilizados de .NET Framework.  
  
 Para obtener una explicación de las limitaciones de la <xref:System.Security.SecureString> de clases, consulte la [¿es seguro SecureString?](#HowSecure) sección.  
  
 [Volver al principio](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>Operaciones de SecureString  
 La <xref:System.Security.SecureString> clase incluye miembros que le permiten hacer lo siguiente:  
  
 Crear una instancia de un <xref:System.Security.SecureString> objeto  
 Cree instancias de un <xref:System.Security.SecureString> objeto mediante una llamada a su constructor sin parámetros.  
  
 Agregar caracteres a un <xref:System.Security.SecureString> objeto  
 Puede agregar un único carácter a la vez a un <xref:System.Security.SecureString> objeto mediante una llamada a su <xref:System.Security.SecureString.AppendChar%2A> o <xref:System.Security.SecureString.InsertAt%2A> método.  
  
> [!IMPORTANT]
>  A <xref:System.Security.SecureString> objeto nunca debe crearse desde un <xref:System.String>, ya que los datos confidenciales ya están sujeto a las consecuencias de persistencia de memoria de inmutable <xref:System.String> clase. La mejor manera de construir un <xref:System.Security.SecureString> objeto es de un origen no administrado de un carácter a la vez, como el <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> método.  
  
 Quite los caracteres de un <xref:System.Security.SecureString> objeto  
 Puede reemplazar un carácter individual mediante una llamada a la <xref:System.Security.SecureString.SetAt%2A> método, quitar un carácter individual mediante una llamada a la <xref:System.Security.SecureString.RemoveAt%2A> método o quitar todos los caracteres de la <xref:System.Security.SecureString> instancia mediante una llamada a la <xref:System.Security.SecureString.Clear%2A> método.  
  
 Realizar la <xref:System.Security.SecureString> objeto de solo lectura  
 Una vez haya definido la cadena que el <xref:System.Security.SecureString> representa el objeto, se llama a su <xref:System.Security.SecureString.MakeReadOnly%2A> método para crear la cadena de solo lectura.  
  
 Obtener información sobre la <xref:System.Security.SecureString> objeto  
 El <xref:System.Security.SecureString> clase tiene solo dos miembros que proporcionan información acerca de la cadena: su <xref:System.Security.SecureString.Length%2A> propiedad, lo que indica el número de unidades de código codificado en UTF16 en la cadena; y la <xref:System.Security.SecureString.IsReadOnly%2A>, método, que indica si la instancia es sólo lectura.  
  
 Liberar la memoria asignada a la <xref:System.Security.SecureString> instancia  
 Dado que <xref:System.Security.SecureString> implementa la <xref:System.IDisposable> interfaz, libere su memoria mediante una llamada a la <xref:System.Security.SecureString.Dispose%2A> método.  
  
 El <xref:System.Security.SecureString> clase no tiene ningún miembro que inspeccione, compare o convierta el valor de un <xref:System.Security.SecureString>. La ausencia de estos miembros le ayuda a proteger el valor de la instancia de una exposición accidental o malintencionada. Use los miembros adecuados de la <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> de la clase, como el <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> método, para manipular el valor de un <xref:System.Security.SecureString> objeto.  
  
 La biblioteca de clases de .NET Framework utilizadas comúnmente <xref:System.Security.SecureString> instancias de las maneras siguientes:  
  
-   Para proporcionar información de contraseña a un proceso mediante la <xref:System.Diagnostics.ProcessStartInfo> estructura o llamando a una sobrecarga de la <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> método que tiene un parámetro de tipo <xref:System.Security.SecureString>.  
  
-   Para proporcionar información de contraseña de red mediante una llamada a un <xref:System.Net.NetworkCredential> constructor de clase que tiene un parámetro de tipo <xref:System.Security.SecureString> o mediante la <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> propiedad.  
  
-   Para proporcionar información de contraseña de autenticación de SQL Server mediante una llamada a la <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> constructor o la recuperación del valor de la <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> propiedad.  
  
-   Para pasar una cadena a código no administrado. Para obtener más información, consulte el [SecureString e interoperabilidad](#interop) sección.  
  
 [Volver al principio](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString e interoperabilidad  
 Dado que el sistema operativo no admite directamente <xref:System.Security.SecureString>, debe convertir el valor de la <xref:System.Security.SecureString> objeto en el tipo de cadena necesario antes de pasar la cadena a un método nativo.  La <xref:System.Runtime.InteropServices.Marshal> clase tiene cinco métodos que hacen esto:  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, que convierte el <xref:System.Security.SecureString> cadena de valor a una cadena binaria (BSTR) reconocida COM.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> y <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, que copia el <xref:System.Security.SecureString> cadena de valor en una cadena ANSI en memoria no administrada.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> y <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, que copia el <xref:System.Security.SecureString> cadena de valor a una cadena Unicode en memoria no administrada.  
  
 Cada uno de estos métodos crea una cadena de texto no cifrado en memoria no administrada. Es responsabilidad del desarrollador a cero y libera esa memoria cuando ya no es necesario. Cada uno de los métodos de asignación de memoria y la conversión de cadenas tiene un método correspondiente a cero y liberar la memoria asignada:  
  
|Método de asignación y conversión|Cero y free (método)|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [Volver al principio](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>¿Es seguro SecureString?  
 Cuando se crea correctamente, un <xref:System.Security.SecureString> instancia proporciona más protección de datos que un <xref:System.String>. Al crear una cadena de un origen de un carácter a la vez, <xref:System.String> crea varios intermedio en la memoria, mientras que <xref:System.Security.SecureString> crea una sola instancia.  Colección de elementos no utilizados de <xref:System.String> objetos es no determinista. Además, porque no está anclada su memoria, el recolector de elementos no utilizados a realizar copias adicionales de <xref:System.String> valores al mover y compactar la memoria. En cambio, la memoria asignada a un <xref:System.Security.SecureString> objeto está anclado y se puede liberar esa memoria mediante una llamada a la <xref:System.Security.SecureString.Dispose%2A> método.  
  
 Aunque los datos se almacenan en un <xref:System.Security.SecureString> instancia es más segura que los datos almacenados en una <xref:System.String> de la instancia, hay limitaciones significativas en el nivel de seguridad un <xref:System.Security.SecureString> es la instancia. Se incluyen los siguientes:  
  
 Plataforma  
 En el sistema operativo Windows, el contenido de un <xref:System.Security.SecureString> se cifran la matriz de caracteres interno de la instancia. Sin embargo, si debido a falta de API o problemas de administración de claves, cifrado no está disponible en todas las plataformas. Debido a esta dependencia de la plataforma, <xref:System.Security.SecureString> no cifra el almacenamiento interno en plataforma distinta de Windows. Otras técnicas se utilizan en estas plataformas para proporcionar protección adicional.
  
 Duración  
 Incluso si la <xref:System.Security.SecureString> implementación es capaz de aprovechar las ventajas del cifrado, el texto sin formato asignado a la <xref:System.Security.SecureString> instancia puede quedar expuesta en momentos diferentes:  
  
-   Dado que Windows no ofrece una implementación de la cadena segura en el nivel de sistema operativo, .NET Framework aún que convertir el valor de cadena segura en su representación de texto sin formato para poder utilizarlo.  
  
-   Cada vez que se modifica el valor de la cadena segura mediante métodos como <xref:System.Security.SecureString.AppendChar%2A> o <xref:System.Security.SecureString.RemoveAt%2A>, se deben descifrar (es decir, convertir de regreso en texto sin formato), modificar y, a continuación, se vuelven a cifrar.  
  
-   Si la cadena segura se utiliza en una llamada de interoperabilidad, se debe convertir a una cadena ANSI, una cadena Unicode o una cadena binaria (BSTR). Para obtener más información, consulte el [SecureString e interoperabilidad](#interop) sección.  
  
 El intervalo de tiempo para el que el <xref:System.Security.SecureString> se expone el valor de la instancia se acorta simplemente en comparación con el <xref:System.String> clase.  
  
 Almacenamiento y uso  
 Por lo general, la <xref:System.Security.SecureString> clase define un mecanismo de almacenamiento para los valores de cadena que debe estar protegido o confidencial. Sin embargo, fuera de .NET Framework, donde se admite ningún mecanismo de uso <xref:System.Security.SecureString>. Esto significa que la cadena segura debe convertirse en un formato utilizable (normalmente una forma de texto no cifrado) que puede ser reconocido por su destino, y que el descifrado y la conversión deben aparecer en el espacio de usuario.  
  
 General, <xref:System.Security.SecureString> es más seguro que <xref:System.String> porque se limita la exposición de datos de cadena que depende. Sin embargo, esas cadenas todavía pueden quedar expuestas a cualquier proceso u operación que tiene acceso a la memoria sin formato, como un proceso malintencionado ejecutándose en el equipo host, un volcado de proceso o un archivo de intercambio visibles para el usuario. En lugar de usar <xref:System.Security.SecureString> para proteger las contraseñas, la alternativa recomendada es utilizar un identificador opaco a las credenciales que se almacenan fuera del proceso.  
  
 [Volver al principio](#top)  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar un <xref:System.Security.SecureString> para proteger la contraseña de un usuario para su uso como una credencial para iniciar un nuevo proceso.  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecureString" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecureString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se utiliza el valor predeterminado (o sin parámetros) constructor para crear instancias de un nuevo <xref:System.Security.SecureString> objeto. A continuación, llama el <xref:System.Security.SecureString.AppendChar%2A> método para agregar una matriz de caracteres.  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 En el ejemplo siguiente se crea un <xref:System.Security.SecureString> objeto desde el valor de un <xref:System.String> objeto.  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Error al proteger o desproteger el valor de esta instancia.</exception>
        <exception cref="T:System.NotSupportedException">Esta operación no se admite en esta plataforma.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Puntero a una matriz de objetos <see cref="T:System.Char" />.</param>
        <param name="length">Número de elementos de <c>valor</c> que se van a incluir en la nueva instancia.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecureString" /> desde una submatriz de objetos <see cref="T:System.Char" />.  Este constructor no es conforme a CLS. La alternativa conforme a CLS es <see cref="M:System.Security.SecureString.#ctor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor inicializa la nueva <xref:System.Security.SecureString> objeto para el número de caracteres en `value` especificado por `length`; a continuación, se cifra el valor de la instancia.  
  
 En C#, se define este constructor solo en el contexto de código no seguro.  
  
   
  
## Examples  
 El ejemplo siguiente crea un nuevo <xref:System.Security.SecureString> objeto pasando su constructor un puntero a una matriz de caracteres.  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="length" /> es menor que cero o mayor que 65 536.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Error al proteger o desproteger el valor de esta cadena segura.</exception>
        <exception cref="T:System.NotSupportedException">Esta operación no se admite en esta plataforma.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Carácter que se va a anexar a esta cadena segura.</param>
        <summary>Anexa un carácter al final de la cadena segura actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si la implementación usa un mecanismo de protección, como el cifrado, el valor de esta cadena segura, si existe, está protegido; `c` se anexa; a continuación, el nuevo valor de la cadena segura es volver a protegerlo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo el <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, y <xref:System.Security.SecureString.Clear%2A> métodos afecta al valor de un <xref:System.Security.SecureString> objeto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 En el ejemplo siguiente se muestra cómo el <xref:System.Security.SecureString.AppendChar%2A> y <xref:System.Security.SecureString.RemoveAt%2A> métodos pueden usarse para recopilar los caracteres de una contraseña.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException">Esta cadena segura es de sólo lectura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Esta operación haría que esta cadena segura tuviese más de 65 536 caracteres.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Error al proteger o desproteger el valor de esta cadena segura.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elimina el valor de la cadena segura actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La memoria del equipo que contiene el valor de esta cadena segura se pone a cero, a continuación, la longitud del valor de esta cadena segura se establece en cero.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo el <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, y <xref:System.Security.SecureString.Clear%2A> métodos afecta al valor de un <xref:System.Security.SecureString> objeto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException">Esta cadena segura es de sólo lectura.</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Crea una copia de la cadena segura actual.</summary>
        <returns>Un duplicado de esta cadena segura.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si una instancia de un <xref:System.Security.SecureString> está marcado como de solo lectura, la copia de esa instancia no será de solo lectura.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Error al proteger o desproteger el valor de esta cadena segura.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Libera todos los recursos utilizados por el objeto <see cref="T:System.Security.SecureString" /> actual.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Security.SecureString.Dispose%2A> método escribe ceros binarios a la memoria asignada que contiene el valor de este <xref:System.Security.SecureString> objeto, a continuación, libera la memoria asignada.  
  
 Para obtener más información, consulte [recolección](~/docs/standard/garbage-collection/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Posición de índice donde se inserta el parámetro <c>c</c>.</param>
        <param name="c">Carácter que se va a insertar.</param>
        <summary>Inserta un carácter en esta cadena segura en la posición de índice especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El índice está basado en cero; el primer carácter de esta cadena segura está en la posición de índice cero.  
  
 Si la implementación usa un mecanismo de protección, como el cifrado, el valor de la cadena segura, si existe, está protegido; `c` se inserta en la posición de índice especificada; a continuación, el nuevo valor es volver a protegerlo. El <xref:System.Security.SecureString.InsertAt%2A> método produce los mismos resultados que la <xref:System.Security.SecureString.AppendChar%2A> método, que inserta un carácter al final de una cadena segura, si la `index` parámetro de <xref:System.Security.SecureString.InsertAt%2A> se establece en la longitud de esta instancia.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo el <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, y <xref:System.Security.SecureString.Clear%2A> métodos afecta al valor de un <xref:System.Security.SecureString> objeto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException">Esta cadena segura es de sólo lectura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que cero o mayor que la longitud de la cadena segura en cuestión.  -o bien- Esta operación haría que esta cadena segura tuviese más de 65 536 caracteres.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Error al proteger o desproteger el valor de esta cadena segura.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indica si esta cadena segura está marcada como de sólo lectura.</summary>
        <returns>
          <see langword="true" /> si esta cadena segura está marcada como de sólo lectura; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Después de una instancia de <xref:System.Security.SecureString> está marcado como de sólo lectura por la <xref:System.Security.SecureString.MakeReadOnly%2A> método, cualquier intento de modificar el valor de la instancia se inicia genera un <xref:System.InvalidOperationException>. Use la <xref:System.Security.SecureString.IsReadOnly%2A> método para probar si un <xref:System.Security.SecureString> es de solo lectura antes de intentar modificarla.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de caracteres de la cadena segura actual.</summary>
        <value>Número de objetos <see cref="T:System.Char" /> de esta cadena segura.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Security.SecureString.Length%2A> propiedad devuelve el número de <xref:System.Char> objetos en este caso, no el número de caracteres Unicode. Un carácter Unicode podría estar representado por más de un <xref:System.Char> objeto.  
  
 La longitud máxima de un <xref:System.Security.SecureString> instancia es de 65.536 caracteres.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Hace que el valor de texto de esta cadena segura sea de sólo lectura.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inicializar el valor de texto de una instancia de la <xref:System.Security.SecureString> clase con la <xref:System.Security.SecureString.%23ctor%2A> constructores y modifique el valor con el <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, y <xref:System.Security.SecureString.AppendChar%2A> métodos.  
  
 Una vez realizadas las modificaciones finales, use la <xref:System.Security.SecureString.MakeReadOnly%2A> método para hacer que el valor de la instancia sea inmutable (de solo lectura). Después de que el valor está marcado como de solo lectura, cualquier intento posterior de modificar, se produce un <xref:System.InvalidOperationException>.  
  
 El efecto de invocar <xref:System.Security.SecureString.MakeReadOnly%2A> es permanente porque la <xref:System.Security.SecureString> clase no ofrece ningún medio para convertir la cadena segura modificable de nuevo. Use la <xref:System.Security.SecureString.IsReadOnly%2A> método para comprobar si una instancia de <xref:System.Security.SecureString> es de solo lectura.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo el <xref:System.Security.SecureString.AppendChar%2A> y <xref:System.Security.SecureString.RemoveAt%2A> métodos pueden usarse para recopilar los caracteres de una contraseña. Después de recopila la contraseña, se realiza de solo lectura.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Posición de índice de un carácter en esta cadena segura.</param>
        <summary>Quita de esta cadena segura el carácter que se encuentra en la posición de índice especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El índice está basado en cero; el primer carácter de esta instancia está en la posición de índice cero.  
  
 Si la implementación usa un mecanismo de protección, como el cifrado, el valor de esta cadena segura, si existe, está protegido; se quita el carácter que ocupa la posición de índice especificada; a continuación, el nuevo valor es volver a protegerlo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo el <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, y <xref:System.Security.SecureString.Clear%2A> métodos afecta al valor de un <xref:System.Security.SecureString> objeto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 En el ejemplo siguiente se muestra cómo el <xref:System.Security.SecureString.AppendChar%2A> y <xref:System.Security.SecureString.RemoveAt%2A> métodos pueden usarse para recopilar los caracteres de una contraseña.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException">Esta cadena segura es de sólo lectura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que cero o mayor o igual que la longitud de la cadena segura en cuestión.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Error al proteger o desproteger el valor de esta cadena segura.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Posición de índice de un carácter existente en esta cadena segura</param>
        <param name="c">Carácter que reemplaza el carácter existente.</param>
        <summary>Reemplaza con otro carácter el carácter existente en la posición de índice especificada.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El índice está basado en cero; el primer carácter de esta instancia está en la posición de índice cero.  
  
 Si la implementación usa un mecanismo de protección, como el cifrado, el valor de la cadena segura, si existe, está protegido; `c` se asigna a la posición de índice especificada; a continuación, el nuevo valor es volver a protegerlo.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo el <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, y <xref:System.Security.SecureString.Clear%2A> métodos afecta al valor de un <xref:System.Security.SecureString> objeto.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Esta cadena segura ya se ha eliminado.</exception>
        <exception cref="T:System.InvalidOperationException">Esta cadena segura es de sólo lectura.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="index" /> es menor que cero o mayor o igual que la longitud de la cadena segura en cuestión.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Error al proteger o desproteger el valor de esta cadena segura.</exception>
      </Docs>
    </Member>
  </Members>
</Type>