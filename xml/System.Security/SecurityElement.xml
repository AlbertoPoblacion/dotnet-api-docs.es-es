<Type Name="SecurityElement" FullName="System.Security.SecurityElement">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9e13ab606e9616d0c4f55d43e917229c2a09f97" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecurityElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit SecurityElement extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecurityElement" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecurityElement" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityElement sealed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="34c01-101">Representa el modelo de objetos XML para codificar objetos de seguridad.</span>
      <span class="sxs-lookup">
        <span data-stu-id="34c01-101">Represents the XML object model for encoding security objects.</span>
      </span>
      <span data-ttu-id="34c01-102">Esta clase no puede heredarse.</span>
      <span class="sxs-lookup">
        <span data-stu-id="34c01-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-103">Esta clase está diseñada para ser una implementación ligera de un modelo de objetos XML simple para su uso en el sistema de seguridad y no para su uso como un modelo de objetos XML general.</span><span class="sxs-lookup"><span data-stu-id="34c01-103">This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model.</span></span> <span data-ttu-id="34c01-104">Esta documentación supone un conocimiento básico de XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-104">This documentation assumes a basic knowledge of XML.</span></span>  
  
 <span data-ttu-id="34c01-105">El modelo de objetos XML simple para un elemento consta de las siguientes partes:</span><span class="sxs-lookup"><span data-stu-id="34c01-105">The simple XML object model for an element consists of the following parts:</span></span>  
  
-   <span data-ttu-id="34c01-106">La etiqueta es el nombre del elemento.</span><span class="sxs-lookup"><span data-stu-id="34c01-106">The tag is the element name.</span></span>  
  
-   <span data-ttu-id="34c01-107">Los atributos son cero o más pares de atributo de nombre/valor en el elemento.</span><span class="sxs-lookup"><span data-stu-id="34c01-107">The attributes are zero or more name/value attribute pairs on the element.</span></span>  
  
-   <span data-ttu-id="34c01-108">Los elementos secundarios son cero o más elementos anidados dentro de `<tag>` y `</tag>`.</span><span class="sxs-lookup"><span data-stu-id="34c01-108">The children are zero or more elements nested within `<tag>` and `</tag>`.</span></span>  
  
 <span data-ttu-id="34c01-109">Se recomienda encarecidamente que se usa la representación en forma de XML basado en atributos para expresar los elementos de seguridad y sus valores.</span><span class="sxs-lookup"><span data-stu-id="34c01-109">It is strongly suggested that attribute based XML representation is used to express security elements and their values.</span></span> <span data-ttu-id="34c01-110">Esto significa que las propiedades de un elemento se expresan como atributos y valores de propiedad se expresan como valores de atributo.</span><span class="sxs-lookup"><span data-stu-id="34c01-110">This means properties of an element are expressed as attributes and property values are expressed as attribute values.</span></span> <span data-ttu-id="34c01-111">Evite anidar texto dentro de etiquetas.</span><span class="sxs-lookup"><span data-stu-id="34c01-111">Avoid nesting text within tags.</span></span> <span data-ttu-id="34c01-112">Para cualquier `<tag>text</tag>` representación en forma de una representación de tipo `<tag value="text"/>` suele estar disponible.</span><span class="sxs-lookup"><span data-stu-id="34c01-112">For any `<tag>text</tag>` representation a representation of type `<tag value="text"/>` is usually available.</span></span> <span data-ttu-id="34c01-113">Mediante esta representación XML basada en atributos aumenta la legibilidad y permite que facilita la portabilidad WMI de la serialización XML resultante.</span><span class="sxs-lookup"><span data-stu-id="34c01-113">Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.</span></span>  
  
 <span data-ttu-id="34c01-114">Un nombre de atributo debe tener al menos un carácter y no puede ser `null`.</span><span class="sxs-lookup"><span data-stu-id="34c01-114">An attribute name must be one character or longer, and cannot be `null`.</span></span> <span data-ttu-id="34c01-115">Si se usa la representación de los valores basados en elementos, elementos con un texto de cadena que es `null` se representan en el `<tag/>` formulario; en caso contrario, el texto está delimitado por el `<tag>` y `</tag>` símbolos (tokens).</span><span class="sxs-lookup"><span data-stu-id="34c01-115">If element-based value representation is used, elements with a text string that is `null` are represented in the `<tag/>` form; otherwise, text is delimited by the `<tag>` and `</tag>` tokens.</span></span> <span data-ttu-id="34c01-116">Ambas formas se pueden combinar con atributos, que se muestran si está presente.</span><span class="sxs-lookup"><span data-stu-id="34c01-116">Both forms can be combined with attributes, which are shown if present.</span></span>  
  
 <span data-ttu-id="34c01-117">Las etiquetas, atributos y texto de elementos, si está presente, siempre distinguen mayúsculas de minúsculas.</span><span class="sxs-lookup"><span data-stu-id="34c01-117">The tags, attributes, and text of elements, if present, are always case-sensitive.</span></span> <span data-ttu-id="34c01-118">El formulario XML contiene comillas y secuencias de escape en caso necesario.</span><span class="sxs-lookup"><span data-stu-id="34c01-118">The XML form contains quotations and escapes where necessary.</span></span> <span data-ttu-id="34c01-119">Los valores de cadena que incluyen caracteres no válidos para su uso en XML que se producen en un <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="34c01-119">String values that include characters invalid for use in XML result in an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="34c01-120">Estas reglas se aplican a todas las propiedades y métodos.</span><span class="sxs-lookup"><span data-stu-id="34c01-120">These rules apply to all properties and methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="34c01-121">Por motivos de rendimiento, la validez del carácter solo se comprueba cuando el elemento se codifica en formato de texto XML y no en cada conjunto de una propiedad o método.</span><span class="sxs-lookup"><span data-stu-id="34c01-121">For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method.</span></span> <span data-ttu-id="34c01-122">Métodos estáticos permiten comprobación explícitos cuando sea necesario.</span><span class="sxs-lookup"><span data-stu-id="34c01-122">Static methods allow explicit checking where needed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-123">En el ejemplo siguiente se muestra el uso de los miembros de la <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-123">The following example shows the use of members of the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#1)]
 [!code-csharp[SecurityElementMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#1)]
 [!code-vb[SecurityElementMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="34c01-124">Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityElement" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-124">Initializes a new instance of the <see cref="T:System.Security.SecurityElement" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecurityElement (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tag As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecurityElement(System::String ^ tag);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
          <span data-ttu-id="34c01-125">Nombre de etiqueta de un elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-125">The tag name of an XML element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-126">Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityElement" /> con la etiqueta especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-126">Initializes a new instance of the <see cref="T:System.Security.SecurityElement" /> class with the specified tag.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-127">El `tag` parámetro debe constar de un nombre de etiqueta XML válido.</span><span class="sxs-lookup"><span data-stu-id="34c01-127">The `tag` parameter must consist of a valid XML tag name.</span></span> <span data-ttu-id="34c01-128">Utilice <xref:System.Security.SecurityElement.Escape%2A> para quitar caracteres no válidos de la cadena.</span><span class="sxs-lookup"><span data-stu-id="34c01-128">Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-129">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.%23ctor%2A> constructor para crear un nuevo <xref:System.Security.SecurityElement> objeto.</span><span class="sxs-lookup"><span data-stu-id="34c01-129">The following code shows the use of  the <xref:System.Security.SecurityElement.%23ctor%2A> constructor to create a new <xref:System.Security.SecurityElement> object.</span></span>  <span data-ttu-id="34c01-130">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-130">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#2](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#2)]
 [!code-csharp[SecurityElementMembers#2](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#2)]
 [!code-vb[SecurityElementMembers#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-131">El parámetro <paramref name="tag" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-131">The <paramref name="tag" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34c01-132">El parámetro <paramref name="tag" /> no es válido en XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-132">The <paramref name="tag" /> parameter is invalid in XML.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecurityElement (string tag, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tag, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (tag As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecurityElement(System::String ^ tag, System::String ^ text);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
          <span data-ttu-id="34c01-133">Nombre de etiqueta del elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-133">The tag name of the XML element.</span>
          </span>
        </param>
        <param name="text">
          <span data-ttu-id="34c01-134">Contenido del texto en el elemento.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-134">The text content within the element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-135">Inicializa una nueva instancia de la clase <see cref="T:System.Security.SecurityElement" /> con la etiqueta y el texto especificados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-135">Initializes a new instance of the <see cref="T:System.Security.SecurityElement" /> class with the specified tag and text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-136">Si el `text` parámetro es `null` este constructor produce un elemento idéntico al constructor predeterminado.</span><span class="sxs-lookup"><span data-stu-id="34c01-136">If the `text` parameter is `null` this constructor produces an element identical to the default constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-137">El parámetro <paramref name="tag" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-137">The <paramref name="tag" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34c01-138">Los parámetros <paramref name="tag" /> o <paramref name="text" /> no son válidos en XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-138">The <paramref name="tag" /> parameter or <paramref name="text" /> parameter is invalid in XML.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public void AddAttribute (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAttribute(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.AddAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAttribute (name As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAttribute(System::String ^ name, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="34c01-139">El nombre del atributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-139">The name of the attribute.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="34c01-140">El valor del atributo.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-140">The value of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-141">Agrega un atributo de nombre/valor a un elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-141">Adds a name/value attribute to an XML element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-142">Nombres y valores de atributos sólo deben contener caracteres de atributo XML válidos.</span><span class="sxs-lookup"><span data-stu-id="34c01-142">Names and values in attributes should only contain valid XML attribute characters.</span></span> <span data-ttu-id="34c01-143">Nombres de atributo XML deben ser únicos.</span><span class="sxs-lookup"><span data-stu-id="34c01-143">XML attribute names must be unique.</span></span> <span data-ttu-id="34c01-144">Utilice <xref:System.Security.SecurityElement.Escape%2A> para quitar caracteres no válidos de la cadena.</span><span class="sxs-lookup"><span data-stu-id="34c01-144">Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.</span></span>  
  
 <span data-ttu-id="34c01-145">No hay ninguna compatibilidad para cadenas entre comillas, por lo que las cadenas de pares nombre/valor no deben contener comillas u otros caracteres que requieren comillas.</span><span class="sxs-lookup"><span data-stu-id="34c01-145">There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-146">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.AddAttribute%2A> método para agregar un atributo de nombre/valor a un elemento XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-146">The following code shows the use of the <xref:System.Security.SecurityElement.AddAttribute%2A> method to add a name/value attribute to an XML element.</span></span> <span data-ttu-id="34c01-147">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-147">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#4](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#4)]
 [!code-csharp[SecurityElementMembers#4](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#4)]
 [!code-vb[SecurityElementMembers#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-148">Los parámetros <paramref name="name" /> o <paramref name="value" /> son <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-148">The <paramref name="name" /> parameter or <paramref name="value" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34c01-149">Los parámetros <paramref name="name" /> o <paramref name="value" /> no son válidos en XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-149">The <paramref name="name" /> parameter or <paramref name="value" /> parameter is invalid in XML.</span>
          </span>
          <span data-ttu-id="34c01-150">O bien</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-150">-or-</span>
          </span>
          <span data-ttu-id="34c01-151">Ya existe un atributo con el nombre especificado por el parámetro <paramref name="name" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-151">An attribute with the name specified by the <paramref name="name" /> parameter already exists.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public void AddChild (System.Security.SecurityElement child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddChild(class System.Security.SecurityElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.AddChild(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddChild (child As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddChild(System::Security::SecurityElement ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="child">
          <span data-ttu-id="34c01-152">Elemento secundario que se va a agregar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-152">The child element to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-153">Agrega un elemento secundario al elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-153">Adds a child element to the XML element.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-154">El elemento secundario se agrega a continuación todos los elementos secundarios previamente existentes.</span><span class="sxs-lookup"><span data-stu-id="34c01-154">The child element is added following any previously existing child elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-155">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.AddChild%2A> método para agregar un elemento secundario al elemento XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-155">The following code shows the use of the <xref:System.Security.SecurityElement.AddChild%2A> method to add a child element to the XML element.</span></span>  <span data-ttu-id="34c01-156">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-156">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#5](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#5)]
 [!code-csharp[SecurityElementMembers#5](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#5)]
 [!code-vb[SecurityElementMembers#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-157">El parámetro <paramref name="child" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-157">The <paramref name="child" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Attribute">
      <MemberSignature Language="C#" Value="public string Attribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Attribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.Attribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Attribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Attribute(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="34c01-158">Nombre del atributo que se va a buscar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-158">The name of the attribute for which to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-159">Busca un atributo por su nombre en un elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-159">Finds an attribute by name in an XML element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-160">Valor asociado al atributo con nombre o <see langword="null" /> si no existe ningún atributo con el nombre <paramref name="name" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-160">The value associated with the named attribute, or <see langword="null" /> if no attribute with <paramref name="name" /> exists.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-161">Con XML como se indica a continuación, `Attribute("B")` devolvería "456".</span><span class="sxs-lookup"><span data-stu-id="34c01-161">With XML as follows, `Attribute("B")` would return "456".</span></span>  
  
```  
<thetag A="123" B="456" C="789">text</thetag>  
```  
  
   
  
## Examples  
 <span data-ttu-id="34c01-162">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.Attribute%2A> método para buscar un atributo por nombre.</span><span class="sxs-lookup"><span data-stu-id="34c01-162">The following code shows the use of the <xref:System.Security.SecurityElement.Attribute%2A> method to find an attribute by name.</span></span> <span data-ttu-id="34c01-163">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-163">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#13](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#13)]
 [!code-csharp[SecurityElementMembers#13](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#13)]
 [!code-vb[SecurityElementMembers#13](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-164">El parámetro <paramref name="name" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-164">The <paramref name="name" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Hashtable Attributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecurityElement.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public Property Attributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Hashtable ^ Attributes { System::Collections::Hashtable ^ get(); void set(System::Collections::Hashtable ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="34c01-165">Obtiene o establece los atributos de un elemento XML como pares nombre/valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-165">Gets or sets the attributes of an XML element as name/value pairs.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="34c01-166">Objeto <see cref="T:System.Collections.Hashtable" /> de los valores de atributo del elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-166">The <see cref="T:System.Collections.Hashtable" /> object for the attribute values of the XML element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-167">Cada atributo se almacena en el <xref:System.Collections.Hashtable> como un par de nombre/valor.</span><span class="sxs-lookup"><span data-stu-id="34c01-167">Each attribute is stored in the <xref:System.Collections.Hashtable> as a name/value pair.</span></span>  
  
 <span data-ttu-id="34c01-168">Nombres y valores de los atributos deben contener solo caracteres de atributo XML válidos.</span><span class="sxs-lookup"><span data-stu-id="34c01-168">Names and values in attributes should contain only valid XML attribute characters.</span></span> <span data-ttu-id="34c01-169">Utilice <xref:System.Security.SecurityElement.Escape%2A> para quitar caracteres no válidos de la cadena.</span><span class="sxs-lookup"><span data-stu-id="34c01-169">Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.</span></span>  
  
 <span data-ttu-id="34c01-170">No hay ninguna compatibilidad para cadenas entre comillas, por lo que las cadenas de pares nombre/valor no deben contener comillas u otros caracteres que requieren comillas.</span><span class="sxs-lookup"><span data-stu-id="34c01-170">There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-171">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.Attributes%2A> propiedad que se va a obtener un atributo de un elemento XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-171">The following code shows the use of the <xref:System.Security.SecurityElement.Attributes%2A> property to get an attribute of an XML element.</span></span> <span data-ttu-id="34c01-172">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-172">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#15](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#15)]
 [!code-csharp[SecurityElementMembers#15](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#15)]
 [!code-vb[SecurityElementMembers#15](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="34c01-173">El nombre o valor del objeto <see cref="T:System.Collections.Hashtable" /> no es válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-173">The name or value of the <see cref="T:System.Collections.Hashtable" /> object is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34c01-174">El nombre no es un nombre del atributo XML válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-174">The name is not a valid XML attribute name.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Collections.ArrayList Children { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ArrayList Children" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecurityElement.Children" />
      <MemberSignature Language="VB.NET" Value="Public Property Children As ArrayList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ArrayList ^ Children { System::Collections::ArrayList ^ get(); void set(System::Collections::ArrayList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ArrayList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="34c01-175">Obtiene o establece la matriz de elementos secundarios del elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-175">Gets or sets the array of child elements of the XML element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="34c01-176">Elementos secundarios solicitados del elemento XML como elementos de seguridad.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-176">The ordered child elements of the XML element as security elements.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-177">Si un <xref:System.Security.SecurityElement> contiene <xref:System.Security.SecurityElement.Text%2A> y <xref:System.Security.SecurityElement.Children%2A>, <xref:System.Security.SecurityElement.Text%2A> aparecerán en primer lugar.</span><span class="sxs-lookup"><span data-stu-id="34c01-177">If a <xref:System.Security.SecurityElement> contains both <xref:System.Security.SecurityElement.Text%2A> and <xref:System.Security.SecurityElement.Children%2A>, <xref:System.Security.SecurityElement.Text%2A> will appear first.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-178">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.Children%2A> propiedad que se va a obtener la matriz de elementos secundarios del elemento XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-178">The following code shows the use of the <xref:System.Security.SecurityElement.Children%2A> property to get the array of child elements of the XML element.</span></span> <span data-ttu-id="34c01-179">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-179">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#14](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#14)]
 [!code-csharp[SecurityElementMembers#14](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#14)]
 [!code-vb[SecurityElementMembers#14](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34c01-180">
            <see langword="null" /> es un elemento secundario del nodo XML principal.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-180">A child of the XML parent node is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecurityElement Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecurityElement ^ Copy();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="34c01-181">Crea y devuelve una copia idéntica del objeto <see cref="T:System.Security.SecurityElement" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-181">Creates and returns an identical copy of the current <see cref="T:System.Security.SecurityElement" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-182">Copia del objeto <see cref="T:System.Security.SecurityElement" /> actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-182">A copy of the current <see cref="T:System.Security.SecurityElement" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-183">La copia incluye tanto el <xref:System.Security.SecurityElement.Children%2A> y <xref:System.Security.SecurityElement.Attributes%2A> propiedades.</span><span class="sxs-lookup"><span data-stu-id="34c01-183">The copy includes both the <xref:System.Security.SecurityElement.Children%2A> and <xref:System.Security.SecurityElement.Attributes%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public bool Equal (System.Security.SecurityElement other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equal(class System.Security.SecurityElement other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.Equal(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equal (other As SecurityElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equal(System::Security::SecurityElement ^ other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="34c01-184">Objeto de elemento XML con el que se comparará el objeto de elemento XML actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-184">An XML element object to which to compare the current XML element object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-185">Compara dos objetos de elementos XML para determinar si son iguales.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-185">Compares two XML element objects for equality.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-186">El valor es <see langword="true" /> si la etiqueta, los nombres y valores de los atributos, elementos secundarios y campos de texto del elemento XML actual son idénticos a los correspondientes en el parámetro <paramref name="other" />; en caso contrario, el valor es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-186">
              <see langword="true" /> if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-187">Si hay elementos secundarios, comparación amplía a ellos de forma recursiva.</span><span class="sxs-lookup"><span data-stu-id="34c01-187">If there are child elements, comparison extends recursively to them.</span></span>  
  
 <span data-ttu-id="34c01-188">No hay ninguna compatibilidad para comparar diferentes representaciones XML de los mismos caracteres.</span><span class="sxs-lookup"><span data-stu-id="34c01-188">There is no support for comparing different XML representations of the same characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-189">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.Equal%2A> método para comparar dos elementos XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-189">The following code shows the use of the <xref:System.Security.SecurityElement.Equal%2A> method to compare two XML elements.</span></span> <span data-ttu-id="34c01-190">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-190">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#22](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#22)]
 [!code-csharp[SecurityElementMembers#22](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#22)]
 [!code-vb[SecurityElementMembers#22](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Escape">
      <MemberSignature Language="C#" Value="public static string Escape (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Escape(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.Escape(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Escape (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Escape(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">
          <span data-ttu-id="34c01-191">Cadena en la que se crean los caracteres de escape no válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-191">The string within which to escape invalid characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-192">Reemplaza caracteres XML no válidos en una cadena por sus equivalentes válidos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-192">Replaces invalid XML characters in a string with their valid XML equivalent.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-193">Cadena de entrada con los caracteres no válidos reemplazados.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-193">The input string with invalid characters replaced.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-194">Utilice este método para reemplazar caracteres no válidos en una cadena antes de utilizar la cadena en un <xref:System.Security.SecurityElement>.</span><span class="sxs-lookup"><span data-stu-id="34c01-194">Use this method to replace invalid characters in a string before using the string in a <xref:System.Security.SecurityElement>.</span></span> <span data-ttu-id="34c01-195">Si se usan caracteres no válidos en un <xref:System.Security.SecurityElement> sin caracteres de escape, un <xref:System.ArgumentException> se produce.</span><span class="sxs-lookup"><span data-stu-id="34c01-195">If invalid characters are used in a <xref:System.Security.SecurityElement> without being escaped, an <xref:System.ArgumentException> is thrown.</span></span>  
  
 <span data-ttu-id="34c01-196">La siguiente tabla muestra los caracteres XML no válidos y sus secuencias de escape equivalentes.</span><span class="sxs-lookup"><span data-stu-id="34c01-196">The following table shows the invalid XML characters and their escaped equivalents.</span></span>  
  
|<span data-ttu-id="34c01-197">Carácter XML no válido</span><span class="sxs-lookup"><span data-stu-id="34c01-197">invalid XML Character</span></span>|<span data-ttu-id="34c01-198">Reemplazado por</span><span class="sxs-lookup"><span data-stu-id="34c01-198">Replaced With</span></span>|  
|---------------------------|-------------------|  
|<span data-ttu-id="34c01-199">"\<"</span><span class="sxs-lookup"><span data-stu-id="34c01-199">"\<"</span></span>|<span data-ttu-id="34c01-200">"&lt;"</span><span class="sxs-lookup"><span data-stu-id="34c01-200">"&lt;"</span></span>|  
|<span data-ttu-id="34c01-201">">"</span><span class="sxs-lookup"><span data-stu-id="34c01-201">">"</span></span>|<span data-ttu-id="34c01-202">"&gt;"</span><span class="sxs-lookup"><span data-stu-id="34c01-202">"&gt;"</span></span>|  
|<span data-ttu-id="34c01-203">"\\""</span><span class="sxs-lookup"><span data-stu-id="34c01-203">"\\""</span></span>|<span data-ttu-id="34c01-204">"&quot;"</span><span class="sxs-lookup"><span data-stu-id="34c01-204">"&quot;"</span></span>|  
|<span data-ttu-id="34c01-205">"\\'"</span><span class="sxs-lookup"><span data-stu-id="34c01-205">"\\'"</span></span>|<span data-ttu-id="34c01-206">"&apos;"</span><span class="sxs-lookup"><span data-stu-id="34c01-206">"&apos;"</span></span>|  
|<span data-ttu-id="34c01-207">"&"</span><span class="sxs-lookup"><span data-stu-id="34c01-207">"&"</span></span>|<span data-ttu-id="34c01-208">"&amp;"</span><span class="sxs-lookup"><span data-stu-id="34c01-208">"&amp;"</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="34c01-209">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.Escape%2A> caracteres de método para reemplazar un XML no válido en una cadena con su equivalente XML válido.</span><span class="sxs-lookup"><span data-stu-id="34c01-209">The following code shows the use of the <xref:System.Security.SecurityElement.Escape%2A> method to replace invalid XML characters in a string with their valid XML equivalent.</span></span> <span data-ttu-id="34c01-210">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-210">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#19](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#19)]
 [!code-csharp[SecurityElementMembers#19](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#19)]
 [!code-vb[SecurityElementMembers#19](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static System.Security.SecurityElement FromString (string xml);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.SecurityElement FromString(string xml) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.FromString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromString (xml As String) As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Security::SecurityElement ^ FromString(System::String ^ xml);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xml" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xml">
          <span data-ttu-id="34c01-211">Cadena codificada en XML desde la que se va a crear el elemento de seguridad.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-211">The XML-encoded string from which to create the security element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-212">Crea un elemento de seguridad de una cadena codificada en XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-212">Creates a security element from an XML-encoded string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-213">Un <see cref="T:System.Security.SecurityElement" /> creado a partir de XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-213">A <see cref="T:System.Security.SecurityElement" /> created from the XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-214">No use comillas simples en la cadena XML; en su lugar, utilice caracteres de escape las comillas dobles.</span><span class="sxs-lookup"><span data-stu-id="34c01-214">Do not use single quotation marks in the XML string; instead, use escaped double quotation marks.</span></span> <span data-ttu-id="34c01-215">Por ejemplo, en lugar de "`<value name='Company'>Microsoft</value>"` usar"`<value name=\"Company\">Microsoft</value>"`.</span><span class="sxs-lookup"><span data-stu-id="34c01-215">For example, instead of "`<value name='Company'>Microsoft</value>"` use "`<value name=\"Company\">Microsoft</value>"`.</span></span>  
  
 <span data-ttu-id="34c01-216">Uso de comillas simples puede dar lugar a que cualquiera que se produzca una excepción o, en algunos casos, las comillas simples se tratan como texto en la cadena.</span><span class="sxs-lookup"><span data-stu-id="34c01-216">Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.XmlSyntaxException">
          <span data-ttu-id="34c01-217">
            <paramref name="xml" /> contiene uno o más caracteres de comillas simples.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-217">
              <paramref name="xml" /> contains one or more single quotation mark characters.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-218">
            <paramref name="xml" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-218">
              <paramref name="xml" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsValidAttributeName">
      <MemberSignature Language="C#" Value="public static bool IsValidAttributeName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidAttributeName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.IsValidAttributeName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValidAttributeName (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValidAttributeName(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="34c01-219">Nombre del atributo cuya validez se va a comprobar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-219">The attribute name to test for validity.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-220">Determina si una cadena es un nombre de atributo válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-220">Determines whether a string is a valid attribute name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-221">El valor es <see langword="true" /> si el parámetro <paramref name="name" /> es un nombre de atributo XML válido; en caso contrario, el valor es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-221">
              <see langword="true" /> if the <paramref name="name" /> parameter is a valid XML attribute name; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-222">Este método puede utilizarse para probar un atributo antes de agregarlo a un elemento de seguridad.</span><span class="sxs-lookup"><span data-stu-id="34c01-222">This method can be used to test an attribute before adding it to a security element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-223">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.IsValidAttributeName%2A> método para determinar si una cadena es un nombre de atributo válido.</span><span class="sxs-lookup"><span data-stu-id="34c01-223">The following code shows the use of the <xref:System.Security.SecurityElement.IsValidAttributeName%2A> method to determine whether a string is a valid attribute name.</span></span> <span data-ttu-id="34c01-224">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-224">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#6](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#6)]
 [!code-csharp[SecurityElementMembers#6](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#6)]
 [!code-vb[SecurityElementMembers#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidAttributeValue">
      <MemberSignature Language="C#" Value="public static bool IsValidAttributeValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidAttributeValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.IsValidAttributeValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValidAttributeValue (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValidAttributeValue(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="34c01-225">Valor del atributo cuya validez se va a comprobar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-225">The attribute value to test for validity.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-226">Determina si una cadena es un nombre de atributo válido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-226">Determines whether a string is a valid attribute value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-227">El valor es <see langword="true" /> si el parámetro <paramref name="value" /> es un valor de atributo XML válido; en caso contrario, el valor es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-227">
              <see langword="true" /> if the <paramref name="value" /> parameter is a valid XML attribute value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-228">Este método puede utilizarse para probar un atributo antes de agregarlo a un elemento de seguridad.</span><span class="sxs-lookup"><span data-stu-id="34c01-228">This method can be used to test an attribute before adding it to a security element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-229">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.IsValidAttributeValue%2A> método para determinar si una cadena es un valor de atributo válido.</span><span class="sxs-lookup"><span data-stu-id="34c01-229">The following code shows the use of the <xref:System.Security.SecurityElement.IsValidAttributeValue%2A> method to determine whether a string is a valid attribute value.</span></span> <span data-ttu-id="34c01-230">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-230">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#7](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#7)]
 [!code-csharp[SecurityElementMembers#7](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#7)]
 [!code-vb[SecurityElementMembers#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidTag">
      <MemberSignature Language="C#" Value="public static bool IsValidTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidTag(string tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.IsValidTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValidTag (tag As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValidTag(System::String ^ tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
          <span data-ttu-id="34c01-231">Etiqueta cuya validez se va a comprobar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-231">The tag to test for validity.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-232">Determina si una cadena es una etiqueta válida.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-232">Determines whether a string is a valid tag.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-233">El valor es <see langword="true" /> si el parámetro <paramref name="tag" /> es una etiqueta de atributo XML válida; en caso contrario, el valor es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-233">
              <see langword="true" /> if the <paramref name="tag" /> parameter is a valid XML tag; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-234">Esto puede usarse para probar un <xref:System.Security.SecurityElement.Tag%2A> antes de establecerla.</span><span class="sxs-lookup"><span data-stu-id="34c01-234">This can be used to test a <xref:System.Security.SecurityElement.Tag%2A> before setting it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-235">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.IsValidTag%2A> método para determinar si una cadena es una etiqueta de atributo válido.</span><span class="sxs-lookup"><span data-stu-id="34c01-235">The following code shows the use of the <xref:System.Security.SecurityElement.IsValidTag%2A> method to determine whether a string is a valid attribute tag.</span></span> <span data-ttu-id="34c01-236">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-236">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#10](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#10)]
 [!code-csharp[SecurityElementMembers#10](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#10)]
 [!code-vb[SecurityElementMembers#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidText">
      <MemberSignature Language="C#" Value="public static bool IsValidText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.IsValidText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsValidText (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsValidText(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="34c01-237">Texto cuya validez se va a comprobar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-237">The text to test for validity.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-238">Determina si una cadena es válida como texto dentro de un elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-238">Determines whether a string is valid as text within an XML element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-239">El valor es <see langword="true" /> si el parámetro <paramref name="text" /> es un elemento de texto XML válido; en caso contrario, el valor es <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-239">
              <see langword="true" /> if the <paramref name="text" /> parameter is a valid XML text element; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-240">Este método puede utilizarse para probar <xref:System.Security.SecurityElement.Text%2A> antes de establecerla.</span><span class="sxs-lookup"><span data-stu-id="34c01-240">This method can be used to test <xref:System.Security.SecurityElement.Text%2A> before setting it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-241">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.IsValidText%2A> método para determinar si una cadena es válida como texto de elemento XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-241">The following code shows the use of the <xref:System.Security.SecurityElement.IsValidText%2A> method to determine whether a string is valid as XML element text.</span></span> <span data-ttu-id="34c01-242">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-242">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#9](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#9)]
 [!code-csharp[SecurityElementMembers#9](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#9)]
 [!code-vb[SecurityElementMembers#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForChildByTag">
      <MemberSignature Language="C#" Value="public System.Security.SecurityElement SearchForChildByTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecurityElement SearchForChildByTag(string tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.SearchForChildByTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchForChildByTag (tag As String) As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecurityElement ^ SearchForChildByTag(System::String ^ tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
          <span data-ttu-id="34c01-243">Etiqueta que se va a buscar en los elementos secundarios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-243">The tag for which to search in child elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-244">Busca un elemento secundario por su nombre de etiqueta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-244">Finds a child by its tag name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-245">El primer elemento XML secundario con el valor de etiqueta especificado o <see langword="null" /> si no existe ningún elemento secundario con <paramref name="tag" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-245">The first child XML element with the specified tag value, or <see langword="null" /> if no child element with <paramref name="tag" /> exists.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-246">Con XML como se indica a continuación, `SearchForChildByTag("second")` devolvería el elemento secundario `<second>`.</span><span class="sxs-lookup"><span data-stu-id="34c01-246">With XML as follows, `SearchForChildByTag("second")` would return the child element `<second>`.</span></span>  
  
```  
<thetag A="123" B="456" C="789"> <first>text1</first>  
       <second>text2</second></thetag>  
```  
  
   
  
## Examples  
 <span data-ttu-id="34c01-247">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.SearchForChildByTag%2A> método para buscar un elemento secundario por su nombre de etiqueta.</span><span class="sxs-lookup"><span data-stu-id="34c01-247">The following code shows the use of the <xref:System.Security.SecurityElement.SearchForChildByTag%2A> method to find a child by its tag name.</span></span> <span data-ttu-id="34c01-248">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-248">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#17](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#17)]
 [!code-csharp[SecurityElementMembers#17](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#17)]
 [!code-vb[SecurityElementMembers#17](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-249">El parámetro <paramref name="tag" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-249">The <paramref name="tag" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SearchForTextOfTag">
      <MemberSignature Language="C#" Value="public string SearchForTextOfTag (string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string SearchForTextOfTag(string tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.SearchForTextOfTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SearchForTextOfTag (tag As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ SearchForTextOfTag(System::String ^ tag);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tag">
          <span data-ttu-id="34c01-250">Etiqueta que se va a buscar en los elementos secundarios.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-250">The tag for which to search in child elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="34c01-251">Busca un elemento secundario por su nombre de etiqueta y devuelve el texto que contiene.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-251">Finds a child by its tag name and returns the contained text.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-252">Contenido del texto del primer elemento secundario con el valor de etiqueta especificado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-252">The text contents of the first child element with the specified tag value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-253">Este método es equivalente a la siguiente:</span><span class="sxs-lookup"><span data-stu-id="34c01-253">This method is equivalent to the following:</span></span>  
  
 [!code-cpp[System.Security.SecurityElement#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securityelement/cpp/remarks.cpp#1)]
 [!code-csharp[System.Security.SecurityElement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securityelement/cs/remarks.cs#1)]
 [!code-vb[System.Security.SecurityElement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.security.securityelement/vb/remarks.vb#1)]  
  
 <span data-ttu-id="34c01-254">Con XML como se indica a continuación, `SearchForTextOfTag("second")` devolvería "text2".</span><span class="sxs-lookup"><span data-stu-id="34c01-254">With XML as follows, `SearchForTextOfTag("second")` would return "text2".</span></span>  
  
```  
<thetag A="123" B="456" C="789"> <first>text1</first>  
    <second>text2</second></thetag>  
```  
  
   
  
## Examples  
 <span data-ttu-id="34c01-255">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.SearchForTextOfTag%2A> método para buscar un elemento secundario por su nombre de etiqueta y devolver el texto que contiene.</span><span class="sxs-lookup"><span data-stu-id="34c01-255">The following code shows the use of the <xref:System.Security.SecurityElement.SearchForTextOfTag%2A> method to find a child by its tag name and return the contained text.</span></span> <span data-ttu-id="34c01-256">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-256">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#18](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#18)]
 [!code-csharp[SecurityElementMembers#18](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#18)]
 [!code-vb[SecurityElementMembers#18](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-257">
            <paramref name="tag" /> es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-257">
              <paramref name="tag" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecurityElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Tag { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="34c01-258">Obtiene o establece el nombre de etiqueta de un elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-258">Gets or sets the tag name of an XML element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="34c01-259">Nombre de etiqueta de un elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-259">The tag name of an XML element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-260">En XML, la etiqueta que aparece en el script tal como aparece a continuación:</span><span class="sxs-lookup"><span data-stu-id="34c01-260">In XML, the tag appears in the script as appears below:</span></span>  
  
```  
<tag attributes>text</tag>  
```  
  
 <span data-ttu-id="34c01-261">Si este elemento tiene elementos secundarios, los elementos secundarios reemplazará `text`.</span><span class="sxs-lookup"><span data-stu-id="34c01-261">If this element has child elements, the children will replace `text`.</span></span>  
  
 <span data-ttu-id="34c01-262">Asigne sólo cadenas de etiqueta XML válidas para esta propiedad.</span><span class="sxs-lookup"><span data-stu-id="34c01-262">Assign only valid XML tag strings to this property.</span></span> <span data-ttu-id="34c01-263">Utilice <xref:System.Security.SecurityElement.Escape%2A> para quitar caracteres no válidos de la cadena.</span><span class="sxs-lookup"><span data-stu-id="34c01-263">Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-264">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.Tag%2A> propiedad que se va a obtener el nombre de etiqueta de un elemento XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-264">The following code shows the use of the <xref:System.Security.SecurityElement.Tag%2A> property to get the tag name of an XML element.</span></span> <span data-ttu-id="34c01-265">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-265">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#11](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#11)]
 [!code-csharp[SecurityElementMembers#11](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#11)]
 [!code-vb[SecurityElementMembers#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="34c01-266">La etiqueta es <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-266">The tag is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34c01-267">La etiqueta no es válida en XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-267">The tag is not valid in XML.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecurityElement.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="34c01-268">Obtiene o establece el texto dentro de un elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-268">Gets or sets the text within an XML element.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="34c01-269">Valor del texto dentro de un elemento XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-269">The value of the text within an XML element.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-270">El texto no debe contener caracteres especiales de XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-270">The text should not contain XML special characters.</span></span> <span data-ttu-id="34c01-271">Utilice <xref:System.Security.SecurityElement.Escape%2A> para quitar caracteres no válidos de la cadena.</span><span class="sxs-lookup"><span data-stu-id="34c01-271">Use <xref:System.Security.SecurityElement.Escape%2A> to remove invalid characters from the string.</span></span>  
  
 <span data-ttu-id="34c01-272">Si un <xref:System.Security.SecurityElement> contiene <xref:System.Security.SecurityElement.Text%2A> y <xref:System.Security.SecurityElement.Children%2A>, <xref:System.Security.SecurityElement.Text%2A> aparecerán en primer lugar.</span><span class="sxs-lookup"><span data-stu-id="34c01-272">If a <xref:System.Security.SecurityElement> contains both <xref:System.Security.SecurityElement.Text%2A> and <xref:System.Security.SecurityElement.Children%2A>, <xref:System.Security.SecurityElement.Text%2A> will appear first.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="34c01-273">El código siguiente muestra el uso de la <xref:System.Security.SecurityElement.Text%2A> propiedad que se va a obtener el texto de un elemento XML.</span><span class="sxs-lookup"><span data-stu-id="34c01-273">The following code shows the use of the <xref:System.Security.SecurityElement.Text%2A> property to get the text of an XML element.</span></span> <span data-ttu-id="34c01-274">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Security.SecurityElement> clase.</span><span class="sxs-lookup"><span data-stu-id="34c01-274">This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.</span></span>  
  
 [!code-cpp[SecurityElementMembers#12](~/samples/snippets/cpp/VS_Snippets_CLR/SecurityElementMembers/CPP/SecurityElementMembers.cpp#12)]
 [!code-csharp[SecurityElementMembers#12](~/samples/snippets/csharp/VS_Snippets_CLR/SecurityElementMembers/CS/securityelementmembers.cs#12)]
 [!code-vb[SecurityElementMembers#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecurityElementMembers/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="34c01-275">El texto no es válido en XML.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-275">The text is not valid in XML.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityElement.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="34c01-276">Crea la representación de cadena de un elemento XML y los atributos, elementos secundarios y texto que lo constituyen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-276">Produces a string representation of an XML element and its constituent attributes, child elements, and text.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="34c01-277">Elemento XML y su contenido.</span>
          <span class="sxs-lookup">
            <span data-stu-id="34c01-277">The XML element and its contents.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="34c01-278">Este método es útil para la depuración para ver la representación XML del elemento.</span><span class="sxs-lookup"><span data-stu-id="34c01-278">This method is useful in debugging to see the XML representation of the element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>