<Type Name="StronglyTypedResourceBuilder" FullName="System.Resources.Tools.StronglyTypedResourceBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="73821694b44de6d89969923dba3f331aa67d31f0" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51903117" /></Metadata><TypeSignature Language="C#" Value="public static class StronglyTypedResourceBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit StronglyTypedResourceBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Resources.Tools.StronglyTypedResourceBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class StronglyTypedResourceBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class StronglyTypedResourceBuilder abstract sealed" />
  <TypeSignature Language="F#" Value="type StronglyTypedResourceBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona compatibilidad para los recursos fuertemente tipados. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, los recursos de separan el código del contenido dentro de una aplicación. Creación y consumo de estos recursos resulta más fácil desarrollar aplicaciones localizables. En .NET Framework, normalmente se usan recursos mediante el uso de la <xref:System.Resources.ResourceManager> (clase), que contiene métodos que proporcionan acceso a recursos específicos de la referencia cultural en tiempo de ejecución. Para obtener más información sobre la creación y consumo de recursos, consulte [Resources in Desktop Apps](https://msdn.microsoft.com/library/8ad495d4-2941-40cf-bf64-e82e85825890).  
  
 Compatibilidad de recursos fuertemente tipados es una característica de tiempo de compilación que encapsula el acceso a los recursos creando clases que contienen un conjunto de estático, de sólo lectura (`get`) las propiedades. Esto proporciona una manera alternativa para consumir los recursos en lugar de llamar el <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> y <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> métodos.  
  
 Proporciona la funcionalidad básica para la compatibilidad con recursos fuertemente tipados el <xref:System.Resources.Tools.StronglyTypedResourceBuilder> clase (así como el `/str` la opción de línea de comandos en el [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)). La salida de la <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> método es una clase que contiene propiedades fuertemente tipadas que coinciden con los recursos que se hace referencia en el parámetro de entrada. Esta clase proporciona acceso de solo lectura a los recursos que están disponibles en el archivo procesado.  
  
   
  
## Examples  
 El ejemplo siguiente genera una clase denominada `DemoResources` que está escrito en C# o Visual Basic (en función de código de fuente del ejemplo). Esta clase está en el `DemoApp` espacio de nombres y tiene propiedades que devuelven el mapa de bits de un logotipo y el nombre de una aplicación. El ejemplo llama a un `CreateResourceFile` método para crear el archivo .resw es necesario y requiere que un archivo de mapa de bits llamado Logo.bmp se encuentra en el directorio actual del ejemplo. El ejemplo de código usa el siguiente archivo de recursos, denominado demo.resx:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/example1.cs#1)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/example1.vb#1)]  
  
 El código de aplicación, a continuación, puede usar la clase como sigue:  
  
 [!code-csharp[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/cs/demoresources.cs#2)]
 [!code-vb[System.Resources.Tools.StronglyTypedResourceBuilder.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.tools.stronglytypedresourcebuilder.class/vb/demoresources.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Genera un archivo de clase que contiene propiedades fuertemente tipadas que coinciden con los recursos especificados en el parámetro de entrada.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Colección <see cref="T:System.Collections.IDictionary" /> en la que cada par clave-valor de entrada del diccionario es el nombre de un recurso y el valor del recurso.</param>
        <param name="baseName">Nombre de la clase que se va a generar.</param>
        <param name="generatedCodeNamespace">Espacio de nombres de la clase que se va a generar.</param>
        <param name="codeProvider">Clase <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> que proporciona el lenguaje en el que se generará la clase.</param>
        <param name="internalClass"><see langword="true" /> para generar una clase interna; <see langword="false" /> para generar una clase pública.</param>
        <param name="unmatchable">Matriz que contiene el nombre de cada recurso para el que no se puede generar una propiedad. Normalmente, no se puede generar una propiedad porque el nombre del recurso no es un identificador válido.</param>
        <summary>Genera un archivo de clase que contiene propiedades fuertemente tipadas que coinciden con los recursos a los que se hace referencia en la colección especificada.</summary>
        <returns>Un contenedor <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> método para generar una clase que proporciona un contenedor fuertemente tipado, de solo lectura para tener acceso a los recursos que se encuentran en el `resourceList` parámetro.  
  
 La <xref:System.Resources.Tools.StronglyTypedResourceBuilder> clase omite cualquier nombre de recurso que comienza con los caracteres "$" o ">>". Los nombres de recurso "Culture" y "ResourceManager" son identificadores no válidos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />, <paramref name="basename" /> o <paramref name="codeProvider" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un nombre de nodo de recursos no coincide con su clave en <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nombre de un archivo .resx utilizado como entrada.</param>
        <param name="baseName">Nombre de la clase que se va a generar.</param>
        <param name="generatedCodeNamespace">Espacio de nombres de la clase que se va a generar.</param>
        <param name="codeProvider">Clase <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> que proporciona el lenguaje en el que se generará la clase.</param>
        <param name="internalClass"><see langword="true" /> para generar una clase interna; <see langword="false" /> para generar una clase pública.</param>
        <param name="unmatchable">Matriz <see cref="T:System.String" /> que contiene el nombre de cada recurso para el que no se puede generar una propiedad. Normalmente, no se puede generar una propiedad porque el nombre del recurso no es un identificador válido.</param>
        <summary>Genera un archivo de clase que contiene propiedades fuertemente tipadas que coinciden con los recursos del archivo .resx especificado.</summary>
        <returns>Un contenedor <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> método para generar una clase que proporciona acceso fuertemente tipado, de solo lectura a los recursos que se encuentran en el `resxFile` parámetro.  
  
 La <xref:System.Resources.Tools.StronglyTypedResourceBuilder> clase omite cualquier nombre de recurso que comienza con los caracteres "$" o ">>". Los nombres de recurso "Culture" y "ResourceManager" son identificadores no válidos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="basename" /> o <paramref name="codeProvider" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(class System.Collections.IDictionary resourceList, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.Collections.IDictionary,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resourceList As IDictionary, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::Collections::IDictionary ^ resourceList, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.IDictionary * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceList" Type="System.Collections.IDictionary" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceList">Colección <see cref="T:System.Collections.IDictionary" /> en la que cada par clave-valor de entrada del diccionario es el nombre de un recurso y el valor del recurso.</param>
        <param name="baseName">Nombre de la clase que se va a generar.</param>
        <param name="generatedCodeNamespace">Espacio de nombres de la clase que se va a generar.</param>
        <param name="resourcesNamespace">Espacio de nombres del recurso que se va a generar.</param>
        <param name="codeProvider">Objeto <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> que proporciona el lenguaje en el que se generará la clase.</param>
        <param name="internalClass"><see langword="true" /> para generar una clase interna; <see langword="false" /> para generar una clase pública.</param>
        <param name="unmatchable">Matriz <see cref="T:System.String" /> que contiene el nombre de cada recurso para el que no se puede generar una propiedad. Normalmente, no se puede generar una propiedad porque el nombre del recurso no es un identificador válido.</param>
        <summary>Genera un archivo de clase que contiene propiedades fuertemente tipadas que coinciden con los recursos a los que se hace referencia en la colección especificada.</summary>
        <returns>Un contenedor <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga permite usar el `resourcesNamespace` parámetro para especificar el espacio de nombres para los recursos generados. En este caso, el código generado aparece como sigue:  
  
```  
System.Resources.ResourceManager rm = new System.Resources.ResourceManager("<resourceNamespace>.<baseName>",typeof(baseName).Assembly);  
```  
  
 En la mayoría de los casos, no es necesario llamar a este método desde el código de aplicación.  
  
 La <xref:System.Resources.Tools.StronglyTypedResourceBuilder> clase omite cualquier nombre de recurso que comienza con los caracteres "$" o ">>". Los nombres de recurso "Culture" y "ResourceManager" son identificadores no válidos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceList" />, <paramref name="basename" /> o <paramref name="codeProvider" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Un nombre de nodo de recursos no coincide con su clave en <paramref name="resourceList" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.CodeDom.CodeCompileUnit Create (string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, out string[] unmatchable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.CodeCompileUnit Create(string resxFile, string baseName, string generatedCodeNamespace, string resourcesNamespace, class System.CodeDom.Compiler.CodeDomProvider codeProvider, bool internalClass, [out] string[]&amp; unmatchable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.Create(System.String,System.String,System.String,System.String,System.CodeDom.Compiler.CodeDomProvider,System.Boolean,System.String[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (resxFile As String, baseName As String, generatedCodeNamespace As String, resourcesNamespace As String, codeProvider As CodeDomProvider, internalClass As Boolean, ByRef unmatchable As String()) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::CodeCompileUnit ^ Create(System::String ^ resxFile, System::String ^ baseName, System::String ^ generatedCodeNamespace, System::String ^ resourcesNamespace, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider, bool internalClass, [Runtime::InteropServices::Out] cli::array &lt;System::String ^&gt; ^ % unmatchable);" />
      <MemberSignature Language="F#" Value="static member Create : string * string * string * string * System.CodeDom.Compiler.CodeDomProvider * bool *  -&gt; System.CodeDom.CodeCompileUnit" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.Create (resxFile, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, unmatchable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resxFile" Type="System.String" />
        <Parameter Name="baseName" Type="System.String" />
        <Parameter Name="generatedCodeNamespace" Type="System.String" />
        <Parameter Name="resourcesNamespace" Type="System.String" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
        <Parameter Name="internalClass" Type="System.Boolean" />
        <Parameter Name="unmatchable" Type="System.String[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resxFile">Nombre de un archivo .resx utilizado como entrada.</param>
        <param name="baseName">Nombre de la clase que se va a generar.</param>
        <param name="generatedCodeNamespace">Espacio de nombres de la clase que se va a generar.</param>
        <param name="resourcesNamespace">Espacio de nombres del recurso que se va a generar.</param>
        <param name="codeProvider">Clase <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> que proporciona el lenguaje en el que se generará la clase.</param>
        <param name="internalClass"><see langword="true" /> para generar una clase interna; <see langword="false" /> para generar una clase pública.</param>
        <param name="unmatchable">Matriz <see cref="T:System.String" /> que contiene el nombre de cada recurso para el que no se puede generar una propiedad. Normalmente, no se puede generar una propiedad porque el nombre del recurso no es un identificador válido.</param>
        <summary>Genera un archivo de clase que contiene propiedades fuertemente tipadas que coinciden con los recursos del archivo .resx especificado.</summary>
        <returns>Un contenedor <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use la <xref:System.Resources.Tools.StronglyTypedResourceBuilder.Create%2A> método para generar una clase que proporciona acceso fuertemente tipado, de solo lectura a los recursos que se encuentran en el `resxFile` parámetro.  
  
 La <xref:System.Resources.Tools.StronglyTypedResourceBuilder> clase omite cualquier nombre de recurso que comienza con los caracteres "$" o ">>". Los nombres de recurso "Culture" y "ResourceManager" son identificadores no válidos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="basename" /> o <paramref name="codeProvider" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyResourceName">
      <MemberSignature Language="C#" Value="public static string VerifyResourceName (string key, System.CodeDom.Compiler.CodeDomProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string VerifyResourceName(string key, class System.CodeDom.Compiler.CodeDomProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName(System.String,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function VerifyResourceName (key As String, provider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ VerifyResourceName(System::String ^ key, System::CodeDom::Compiler::CodeDomProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member VerifyResourceName : string * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName (key, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="provider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="key">Cadena que se va a comprobar y, si es necesario, convertir en un nombre de recurso válido.</param>
        <param name="provider">Objeto <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> que especifica el lenguaje de destino que se va a utilizar.</param>
        <summary>Genera una cadena de recurso válida tomando como base la cadena de entrada y el proveedor de código especificados.</summary>
        <returns>El nombre de recurso válido derivado del parámetro <paramref name="key" />. Los tokens que no sean válidos se reemplazarán por el carácter de subrayado (_) o <see langword="null" /> si la cadena derivada todavía contiene caracteres no válidos de acuerdo con el lenguaje especificado por el parámetro <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el `key` parámetro es una cadena de caracteres válida, se devuelve esa cadena. Si el `key` parámetro es una cadena no válida o una cadena que contiene caracteres no válidos, el <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> método intenta generar una cadena válida según el `key` y `provider` parámetros. Si se puede generar una cadena válida, se devuelve esa cadena; en caso contrario, `null` se devuelve.  
  
 Si el `key` parámetro es una cadena vacía (""), se devuelve una cadena que consta de un carácter de subrayado (_). Si el `key` parámetro no es una cadena vacía, el <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> método compara cada carácter de la cadena a un conjunto de tokens no válidos según el idioma especificado por el `provider` parámetro. Cualquier carácter no válido en la cadena se reemplaza por un carácter de subrayado. Los caracteres que se reemplazará con un carácter de subrayado son los siguientes:  
  
 ' ' (espacio), U + 00A0 (espacio de no separación), '.' (punto), ',' (coma), ';' (punto y coma), '&#124;', ' ~', ' @', '#', '%', ' ^', '&', ' *', '+', '-', '/', '\\','\<', ' > ','?', ' [', ']', '(',')', ' {', '}', ' "' (comillas), '' '(apóstrofe)':', y '!'.  
  
> [!NOTE]
>  Los recursos fuertemente tipados no permiten el uso de palabras clave del lenguaje (como `if`, `for`, etc.) como nombres de clave de recurso. Sin embargo, el <xref:System.CodeDom> patrón de diseño permite el uso de palabras clave del lenguaje anteponiendo la palabra clave con el carácter de subrayado. El <xref:System.Resources.Tools.StronglyTypedResourceBuilder.VerifyResourceName%2A> llamadas al método el <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A> método para aplicar este diseño. Por ejemplo, si usa un nombre de recurso que es el mismo que una palabra clave del lenguaje, como `for`, el nombre aparece como `_for` en la clase de recurso fuertemente tipado generado.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="key" /> o <paramref name="provider" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>