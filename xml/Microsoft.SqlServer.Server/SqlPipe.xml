<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7d2492efd855dc4576dfb178dcc4a5f1819b815" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36729853" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Permite a los procedimientos almacenados administrados que se ejecutan en un proceso de una base de datos de SQL Server devolver los resultados al llamador. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Una instancia de esta clase debe ponerse a disposición para los procedimientos almacenados administrados a través de la <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> propiedad de la <xref:Microsoft.SqlServer.Server.SqlContext> clase.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza <xref:System.Data.SqlClient.SqlConnection> y <xref:System.Data.SqlClient.SqlCommand> para seleccionar filas de un origen de datos en un procedimiento almacenado. El ejemplo se utiliza un <xref:Microsoft.SqlServer.Server.SqlPipe> para ejecutar el comando y enviar los resultados al cliente.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Objeto <see cref="T:System.Data.SqlClient.SqlCommand" /> que se va a ejecutar.</param>
        <summary>Ejecuta el comando pasado como parámetro y envía los resultados al cliente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Además de los resultados reales, otros errores y mensajes también se envían directamente al cliente.  
  
 Parámetros de salida y valores devueltos no se envían al cliente; están disponibles para el llamador, a través de la colección de parámetros del objeto command.  
  
 Si el comando no está enlazado a una conexión en proceso, un <xref:System.InvalidOperationException> se produce. Este método no se admite en los comandos enlazados a las conexiones que se establecen fuera del proceso.  
  
 Si hay errores en la <xref:System.Data.SqlClient.SqlCommand> objeto que se envió, las excepciones se envían a la canalización, pero también se envía una copia para llamar a código administrado. Si el código de llamada no detecta la excepción, se propague hacia arriba en la pila en el código de Transact-SQL y aparecer dos veces en el resultado. Si el código de llamada sí detecta la excepción, el consumidor de la canalización aún verá el error, pero no habrá errores duplicados.  
  
   
  
## Examples  
 En el ejemplo siguiente se utiliza <xref:System.Data.SqlClient.SqlConnection> y <xref:System.Data.SqlClient.SqlCommand> para seleccionar filas de un origen de datos en un procedimiento almacenado. El ejemplo se utiliza un <xref:Microsoft.SqlServer.Server.SqlPipe> para ejecutar el comando y enviar los resultados al cliente.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad <paramref name="command" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Este método no se admite en los comandos enlazados a las conexiones que se establecen fuera del proceso.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> está en el modo de devolver al cliente los conjuntos de resultados únicos. Esta propiedad es de sólo lectura.</summary>
        <value>Su valor es <see langword="true" /> si se ha llamado al método <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> y <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> está en el modo de devolver al cliente los conjuntos de resultados únicos; de lo contrario, es <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Envía los resultados directamente al cliente o al consumidor actual de los resultados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El **enviar** método envía datos directamente al cliente o autor de la llamada. Normalmente es el cliente que consume los resultados de la **canalización** método, pero en el caso de CLR anidado procedimientos almacenados del consumidor de los resultados también puede ser un procedimiento almacenado. Por ejemplo, Procedure1 llama <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> con el texto de comando "EXEC Procedure2". Procedure2 también es un procedimiento almacenado administrado. Si Procedure2 llama ahora a <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, la fila se envía al lector de Procedure1, no al cliente.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Conjunto de resultados de una sola fila enviado al cliente: un objeto <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />.</param>
        <summary>Envía un conjunto de resultados de una sola fila directamente al cliente o al consumidor actual de los resultados.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad <paramref name="record" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Conjunto de resultados multifila que se va a enviar al cliente: un objeto <see cref="T:System.Data.SqlClient.SqlDataReader" />.</param>
        <summary>Envía un conjunto de resultados multifila directamente al cliente o al consumidor actual de los resultados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Data.SqlClient.SqlDataReader> objeto que se pasa como un parámetro tiene columnas ocultas, esas columnas no se propagan al conjunto de resultados que se envía al cliente.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad <paramref name="reader" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Cadena de mensaje que se va a enviar al cliente.</param>
        <summary>Envía un mensaje de la cadena directamente al cliente o al consumidor actual de los resultados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de mensaje se envía como un mensaje informativo al cliente. Las aplicaciones cliente pueden escuchar los mensajes a través de diferentes mecanismos, dependiendo de lo datos acceso aplicación interfaz de programación (API) que utilizan. Por ejemplo, si el cliente utiliza ADO.NET, los mensajes se transmiten a través de la <xref:System.Data.SqlClient.SqlConnection.InfoMessage> eventos.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> método para enviar una cadena de mensaje directamente al cliente.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="message" /> supera los 4.000 caracteres.</exception>
        <exception cref="T:System.ArgumentNullException">La propiedad <paramref name="message" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marca el fin de un conjunto de resultados y devuelve la instancia de <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> al estado inicial.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los procedimientos almacenados administrados pueden enviar conjuntos de resultados a clientes que no están implementando un <xref:System.Data.SqlClient.SqlDataReader>. Este método, junto con <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> y <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, permite a los procedimientos almacenados enviar conjuntos de resultados personalizados al cliente.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:Microsoft.SqlServer.Server.SqlDataRecord> y su <xref:Microsoft.SqlServer.Server.SqlMetaData>. En el ejemplo, a continuación, marca el principio de un conjunto de resultados mediante el <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> método, envía las entradas con datos de ejemplo se devuelve al cliente mediante la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> método y las marcas de final del resultado se establece con el <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> método.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">No se ha llamado previamente al método <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Objeto <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> con los valores de columna de la fila que se va a enviar al cliente. El esquema del registro debe coincidir con el esquema descrito por los metadatos del objeto <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> pasados al método <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</param>
        <summary>Devuelve al cliente una fila de datos única.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los procedimientos almacenados administrados pueden enviar conjuntos de resultados a clientes que no están implementando un <xref:System.Data.SqlClient.SqlDataReader>. Este método, junto con <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> y <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, permite que los procedimientos almacenados enviar conjuntos de resultados personalizados al cliente.  
  
 El <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> método envía una sola fila de datos al cliente. Filas posteriormente se devuelve al llamador mediante una llamada a <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, una vez por cada fila que se va a enviar. Después de que todas las filas se ha enviado, una llamada a la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> método es necesario para marcar el final del conjunto de resultados.  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:Microsoft.SqlServer.Server.SqlDataRecord> y su <xref:Microsoft.SqlServer.Server.SqlMetaData>. En el ejemplo, a continuación, marca el principio de un conjunto de resultados mediante el <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> método, envía las entradas con datos de ejemplo se devuelve al cliente mediante la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> método y las marcas de final del resultado se establece con el <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> método.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad <paramref name="record" /> es <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">No se ha llamado previamente al método <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Objeto <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> del que se extraen los metadatos que se utilizan para describir el conjunto de resultados.</param>
        <summary>Marca el inicio de un conjunto de resultados que se va a devolver al cliente y utiliza el parámetro de registro para generar los metadatos que describen el conjunto de resultados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los procedimientos almacenados administrados pueden enviar conjuntos de resultados a clientes que no están implementando un <xref:System.Data.SqlClient.SqlDataReader>. Este método, junto con <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> y <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, permite a los procedimientos almacenados enviar conjuntos de resultados personalizados al cliente.  
  
 El <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> método marca el principio de un conjunto de resultados y utiliza el parámetro de registro para construir los metadatos que describen el conjunto de resultados. Todas las filas subsiguientes, enviadas mediante el <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> método, debe coincidir con la definición de los metadatos.  
  
 Tenga en cuenta que la llamada a after <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, solo <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> y <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> se puede llamar. Cualquier otro método en la misma instancia de <xref:Microsoft.SqlServer.Server.SqlPipe> produce una <xref:System.InvalidOperationException>. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> establece <xref:Microsoft.SqlServer.Server.SqlPipe> al estado inicial donde se pueden llamar a otros métodos.  
  
 Después de que devuelve el control a Transact-SQL de ejecución de CLR, no intente utilizar una variable estática o local inicializada en la memoria CLR. Por ejemplo, no almacene una instancia de un proceso de la clase, por ejemplo `SQLDataRecord`, que se utilizará después de que devuelve el control de CLR. Una excepción es el `SQLMetaData` en process (clase).  
  
   
  
## Examples  
 En el ejemplo siguiente se crea un nuevo <xref:Microsoft.SqlServer.Server.SqlDataRecord> y su <xref:Microsoft.SqlServer.Server.SqlMetaData>. En el ejemplo, a continuación, marca el principio de un conjunto de resultados mediante el <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> método, envía las entradas con datos de ejemplo se devuelve al cliente mediante la <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> método y las marcas de final del resultado se establece con el <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> método.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La propiedad <paramref name="record" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="record" /> no tiene columnas o no se ha inicializado.</exception>
        <exception cref="T:System.InvalidOperationException">Se ha invocado un método distinto de <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> o <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> después del método <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>