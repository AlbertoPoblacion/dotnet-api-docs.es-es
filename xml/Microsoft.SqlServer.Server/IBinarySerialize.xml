<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="157b7f9d99f86f738487f8bcb055cc79df91f759" />
    <Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="09/22/2018" />
    <Meta Name="ms.locfileid" Value="46664084" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona una implementación personalizada para el tipo definido por el usuario (UDT) y la serialización y deserialización de agregados definidos por el usuario.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tipos definidos por el usuario (UDT) y agregados definidos por el usuario son necesarios para definir un formato de almacenamiento, que puede ser <xref:Microsoft.SqlServer.Server.Format>.`Native` o <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` permite que SQL Server controlar la serialización y deserialización automáticamente, pero el formato tiene restricciones en el tipo de tipos que puede controlar. <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` permite que los tipos definidos por el usuario y agregados controlar su propia serialización. Tipos definidos por el usuario y agregados se deben marcar con <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` en el `SqlUserDefinedType` o `SqlUserDefinedAggregate` de atributo y debe implementar la <xref:Microsoft.SqlServer.Server.IBinarySerialize> interfaz.  
  
 Tenga en cuenta que incluso con la serialización personalizada, el tamaño total de cada instancia debe ser en el límite máximo permitido, actualmente 8000 bytes.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">Secuencia de <see cref="T:System.IO.BinaryReader" /> desde la que se deserializa el objeto.</param>
        <summary>Genera un tipo definido por el usuario (UDT) o un agregado definido por el usuario a partir de su formato binario.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> método debe reconstituir el objeto utilizando la información escrita por el <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> método.  
  
   
  
## Examples  
 El ejemplo siguiente muestra la implementación de la <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> método de un UDT, que utiliza un <xref:System.IO.BinaryReader> para deserializar un UDT almacenado previamente. En este ejemplo se da por supuesto que el UDT tiene dos propiedades de datos: `StringValue` y `DoubleValue`.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">Secuencia de <see cref="T:System.IO.BinaryWriter" /> en la que se serializa el UDT o el agregado definido por el usuario.</param>
        <summary>Convierte un tipo definido por el usuario (UDT) o un agregado definido por el usuario en su formato binario, para que se pueda almacenar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Escribir información suficiente para la secuencia binaria para permitir el <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> método para reconstituir el UDT o agregado definido por el usuario.  
  
   
  
## Examples  
 El ejemplo siguiente muestra la implementación de la <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> método de un UDT, que utiliza un <xref:System.IO.BinaryWriter> para serializar el UDT en el formato binario definido por el usuario. El propósito de rellenar el carácter nulo es para asegurarse de que el valor de cadena esté completamente separado del valor de tipo double, poder comparar un UDT a otro en el código de Transact-SQL, los bytes de cadena se comparan con los bytes de cadena y doble byte se compara en tipo doble bytes.  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>