<Namespace Name="System.Xml">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b9d93fd68b550f524fd02f3cb0af6df61ab8e864" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="34758855" />
  </Metadata>
  <Docs>
    <summary>El espacio de nombres <see cref="N:System.Xml" /> proporciona compatibilidad basada en estándares para procesar XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="std"></a>   
## <a name="supported-standards"></a>Estándares compatibles  
 El <xref:System.Xml> espacio de nombres admite estos estándares:  
  
-   XML 1.0, incluida la compatibilidad con DTD: [http://www.w3.org/TR/2006/REC-xml-20060816/](http://www.w3.org/TR/2006/REC-xml-20060816/)  
  
-   Espacios de nombres XML, ambos nivel de la secuencia y DOM: [http://www.w3.org/TR/REC-xml-names/](http://www.w3.org/TR/REC-xml-names/)  
  
-   Esquemas XML: [http://www.w3.org/2001/XMLSchema](http://www.w3.org/2001/XMLSchema)  
  
-   Expresiones de XPath: [http://www.w3.org/TR/xpath](http://www.w3.org/TR/xpath)  
  
-   Transformaciones XSLT: [http://www.w3.org/TR/xslt](http://www.w3.org/TR/xslt)  
  
-   Nivel 1 principal del DOM: [http://www.w3.org/TR/REC-DOM-Level-1/](http://www.w3.org/TR/REC-DOM-Level-1/)  
  
-   Nivel 2 principal del DOM: [http://www.w3.org/TR/DOM-Level-2/](http://www.w3.org/TR/DOM-Level-2/)  
  
 Consulte la sección [diferencias con respecto a las especificaciones W3C](#diff) dos casos en que las clases XML difieren de las recomendaciones de W3C.  
  
<a name="related"></a>   
## <a name="related-namespaces"></a>Espacios de nombres relacionados  
 .NET Framework también proporciona otros espacios de nombres para las operaciones relacionadas con XML. Para obtener una lista, descripciones y vínculos, vea el [espacios de nombres System.Xml](http://msdn.microsoft.com/library/gg145036.aspx) página Web.  
  
<a name="async"></a>   
## <a name="processing-xml-asynchronously"></a>Procesamiento asincrónico de XML  
 El <xref:System.Xml.XmlReader?displayProperty=nameWithType> y <xref:System.Xml.XmlWriter?displayProperty=nameWithType> clases incluyen una serie de métodos asincrónicos que se basan en el. Estos métodos pueden identificarse por la cadena "Async" al final de sus nombres. Con estos métodos, puede escribir código asincrónico que es similar al código sincrónico, y puede migrar fácilmente el código sincrónico existente en código asincrónico.  
  
-   Usar los métodos asincrónicos en aplicaciones donde hay latencia de la secuencia de red significativo. Evite usar las API asincrónicas para operaciones de lectura/escritura de secuencia de archivo local o de secuencia de memoria. La secuencia de entrada <xref:System.Xml.XmlTextReader>, y <xref:System.Xml.XmlTextWriter> debe admitir operaciones asincrónicas también. En caso contrario, todavía se bloqueará los subprocesos por las operaciones de E/S.  
  
-   No se recomienda mezclar las llamadas a funciones sincrónicas y asincrónicas, porque es posible que olvidó usar la `await` palabra clave o use una API sincrónica, donde es necesaria una asincrónica.  
  
-   No establezca la <xref:System.Xml.XmlReaderSettings.Async%2A?displayProperty=nameWithType> o <xref:System.Xml.XmlWriterSettings.Async%2A?displayProperty=nameWithType> marca `true` si no piensa utilizar un método asincrónico.  
  
-   Si ha olvidado especificar el `await` palabra clave cuando se llama a un método asincrónico, los resultados son no deterministas: es posible que reciba el resultado esperado o una excepción.  
  
-   Cuando un <xref:System.Xml.XmlReader> objeto está leyendo un nodo de texto grande, podría almacenar en caché sólo un valor de texto parcial y devolver el nodo de texto, por lo que recuperar el <xref:System.Xml.XmlReader.Value%2A?displayProperty=nameWithType> propiedad podría estar bloqueada por una operación de E/S. Utilice la <xref:System.Xml.XmlReader.GetValueAsync%2A?displayProperty=nameWithType> método para obtener el valor de texto en modo asincrónico, o use el <xref:System.Xml.XmlReader.ReadValueChunkAsync%2A?displayProperty=nameWithType> bloquear el método para leer un texto grande en fragmentos.  
  
-   Cuando se usa un <xref:System.Xml.XmlWriter> de objeto, llame a la <xref:System.Xml.XmlWriter.FlushAsync%2A?displayProperty=nameWithType> método antes de llamar a <xref:System.Xml.XmlWriter.Close%2A?displayProperty=nameWithType> para evitar el bloqueo de una operación de E/S.  
  
<a name="diff"></a>   
## <a name="differences-from-the-w3c-specs"></a>Diferencias con respecto a las especificaciones del W3C  
 En dos casos que implican las restricciones en los componentes de esquema del grupo de modelo, el <xref:System.Xml> difiere de espacio de nombres de las recomendaciones de W3C.  
  
 **Coherencia en las declaraciones de elemento:**  
  
 En algunos casos, cuando se usan grupos de sustitución, la <xref:System.Xml> implementación no satisface el "esquema componente restricción: declaraciones de elemento coherentes," que se describe en el [restricciones en Model Group Schema Components ](http://go.microsoft.com/fwlink/?LinkId=137029) sección de la especificación de W3C.  
  
 Por ejemplo, el esquema siguiente incluye los elementos que tienen el mismo nombre pero se utilizan diferentes tipos en el mismo modelo de contenido y los grupos de sustitución. Esto debería producir un error, pero <xref:System.Xml> compila y valida el esquema sin errores.  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
   <xs:element name="e1" type="t1"/>  
   <xs:complexType name="t1"/>  
  
   <xs:element name="e2" type="t2" substitutionGroup="e1"/>  
      <xs:complexType name="t2">  
         <xs:complexContent>  
            <xs:extension base="t1">  
         </xs:extension>  
      </xs:complexContent>  
   </xs:complexType>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1"/>  
         <xs:element name="e2" type="xs:int"/>  
      </xs:sequence>  
   </xs:complexType>  
</xs:schema>  
```  
  
 En este esquema, el tipo `t3` contiene una secuencia de elementos. Debido a la sustitución, la referencia al elemento `e1` de la secuencia puede generar el elemento `e1` del tipo `t1` o el elemento `e2` del tipo `t2`. El último caso daría como resultado una secuencia de dos `e2` elementos, donde uno es de tipo `t2` y la otra es de tipo `xs:int`.  
  
 **Atribución de partículas exclusivas:**  
  
 En las siguientes condiciones, el <xref:System.Xml> implementación no satisface el "esquema componente restricción: atribución de partículas únicas," que se describe en el [restricciones en Model Group Schema Components](http://go.microsoft.com/fwlink/?LinkId=137029) sección de la especificación de W3C.  
  
-   Uno de los elementos del grupo hace referencia a otro elemento.  
  
-   El elemento referenciado es un elemento de encabezado de un grupo de sustituciones.  
  
-   El grupo de sustitución contiene un elemento que tiene el mismo nombre que uno de los elementos en el grupo.  
  
-   La cardinalidad del elemento que hace referencia el elemento de encabezado de grupo de sustitución y el elemento con el mismo nombre como un elemento de grupo de sustitución no se corrige (minOccurs < maxOccurs).  
  
-   La definición del elemento que hace referencia el grupo de sustituciones precede a la definición del elemento con el mismo nombre que un elemento de grupo de sustitución.  
  
 Por ejemplo, en el esquema que figura más abajo, el modelo de contenido es ambiguo y debería generar un error de compilación, pero <xref:System.Xml> compila el esquema sin errores.  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
  <xs:element name="e1" type="xs:int"/>  
  <xs:element name="e2" type="xs:int" substitutionGroup="e1"/>  
  
  <xs:complexType name="t3">  
    <xs:sequence>  
      <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
      <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
    </xs:sequence>  
  </xs:complexType>  
  
  <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 Si intenta validar el siguiente código XML con el esquema anterior, la validación se producirá un error con el siguiente mensaje: "el elemento 'e3' tiene secundario no válido elemento 'e2'." y un <xref:System.Xml.Schema.XmlSchemaValidationException> se producirá la excepción.  
  
```xml  
<e3>  
  <e2>1</e2>  
  <e2>2</e2>  
</e3>  
```  
  
 Para solucionar este problema, puede intercambiar las declaraciones de elemento en el documento XSD. Por ejemplo:  
  
```xml  
<xs:sequence>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 se transforma en:  
  
```xml  
<xs:sequence>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 Este es otro ejemplo del mismo problema:  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
   <xs:element name="e1" type="xs:string"/>  
   <xs:element name="e2" type="xs:string" substitutionGroup="e1"/>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
         <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
      </xs:sequence>  
   </xs:complexType>  
   <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 Si intenta validar el siguiente código XML con el esquema anterior, la validación se producirá un error con la siguiente excepción: "excepción no controlada: System.Xml.Schema.XmlSchemaValidationException: el elemento 'e2' no es válido: el valor 'abc' no es válido según su tipo de datos 'http://www.w3.org/2001/XMLSchema:int': la cadena 'abc' no es un valor de Int32 válido. "
  
```xml  
<e3><e2>abc</e2></e3>  
```  
  
<a name="security"></a>   
## <a name="security-considerations"></a>Consideraciones de seguridad  
 Los tipos y miembros en el <xref:System.Xml> espacio de nombres se basan en el [sistema de seguridad de .NET](~/docs/standard/security/index.md). Las secciones siguientes tratan problemas de seguridad que son específicas de las tecnologías XML.
  
 Tenga en cuenta también que cuando se usa el <xref:System.Xml> tipos y miembros, si el XML contiene datos que tiene posibles implicaciones de privacidad, deberá implementar la aplicación de forma que respeten la privacidad de los usuarios finales.
  
 **Acceso externo**  
  
 Hay varias tecnologías XML que tienen la capacidad de recuperar otros documentos durante el procesamiento. Por ejemplo, una definición de tipo de documento (DTD) puede residir en el documento que se está analizando. La DTD también puede encontrarse en un documento externo al que hace referencia el documento que se está analizando. El lenguaje de definición de esquemas XML (XSD) y las tecnologías XSLT también tienen la capacidad de incluir información de otros archivos. Estos recursos externos pueden presentar algunos problemas de seguridad. Por ejemplo, conviene asegurarse de que la aplicación recupera los archivos solo desde sitios de confianza y que el archivo recupera no contiene datos malintencionados.  
  
 La <xref:System.Xml.XmlUrlResolver> clase se utiliza para cargar documentos XML y para resolver recursos externos como entidades, DTD o esquemas e importar o incluir directivas.  
  
 Puede invalidar esta clase y especificar el <xref:System.Xml.XmlResolver> objeto va a usar. Utilice la clase <xref:System.Xml.XmlSecureResolver> si necesita abrir un recurso que no controla o que no es de confianza. <xref:System.Xml.XmlSecureResolver> contiene un <xref:System.Xml.XmlResolver> y le permite restringir los recursos a los que tiene acceso el <xref:System.Xml.XmlResolver> subyacente.  
  
 **Denegación de servicio**  
  
 Las siguientes acciones se consideran menos vulnerables a ataques de denegación de servicio, porque las clases <xref:System.Xml> incluyen un medio de protección frente a dichos ataques.  
  
-   Análisis de datos XML de texto.  
  
-   Analizar datos XML binarios si los datos XML binarios fue generados por Microsoft SQL Server.  
  
-   Escritura de fragmentos y documentos XML desde orígenes de datos al sistema de archivos, secuencias, <xref:System.IO.TextWriter> o <xref:System.Text.StringBuilder>.  
  
-   Carga de documentos en el objeto del Modelo de objetos de documento (DOM) si se utiliza un objeto <xref:System.Xml.XmlReader> y <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> establecido en <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType>.  
  
-   Navegación por el objeto DOM.  
  
 No es recomendable realizar las siguientes acciones si le preocupan los ataques de denegación de servicio o si trabaja en un entorno que no es de confianza.  
  
-   Procesamiento de DTD.  
  
-   Procesamiento de esquemas. Esto incluye agregar un esquema que no es de confianza a la colección de esquemas, compilar un esquema que no es de confianza y realizar la validación utilizando un esquema que no es de confianza.  
  
-   Procesamiento de XSLT.  
  
-   Análisis de cualquier flujo arbitrario de datos XML binarios proporcionados por el usuario.  
  
-   Operaciones DOM como, por ejemplo, consultas, ediciones, movimiento de subárboles entre documentos y guardado de objetos DOM.  
  
 Si le preocupa la denegación de problemas del servicio o si trabaja con orígenes de confianza, no habilite el procesamiento de DTD. Esto está deshabilitado de forma predeterminada en <xref:System.Xml.XmlReader> objetos que el <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> método crea.  
  
> [!NOTE]
>  <xref:System.Xml.XmlTextReader> permite el procesamiento de DTD de manera predeterminada. Utilice la propiedad <xref:System.Xml.XmlTextReader.DtdProcessing%2A?displayProperty=nameWithType> para deshabilitar esta característica.  
  
 Si tiene habilitado el procesamiento de DTD, puede usar el <xref:System.Xml.XmlSecureResolver> clase para restringir los recursos que la <xref:System.Xml.XmlReader> puede tener acceso. También puede diseñar la aplicación para que el procesamiento de XML es la memoria y restricciones de tiempo. Por ejemplo, puede configurar los límites de tiempo de espera en la aplicación ASP.NET.  
  
 **Consideraciones de procesamiento**  
  
 Dado que los documentos XML pueden incluir referencias a otros archivos, resulta complicado determinar cuánta potencia de procesamiento será necesaria para analizar un documento XML. Por ejemplo, los documentos XML pueden incluir una DTD. Si la DTD contiene entidades anidadas o modelos de contenido complejos, podría ser necesario un tiempo de procesamiento elevado para analizar el documento.  
  
 Si utiliza <xref:System.Xml.XmlReader>, puede limitar el tamaño del documento a analizar estableciendo la propiedad <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=nameWithType>. Puede limitar el número de caracteres que resultan de expandir las entidades estableciendo la propiedad <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=nameWithType>. Para ver ejemplos de cómo establecer estas propiedades, vea los temas de referencia correspondientes.  
  
 Las tecnologías XSD y XSLT tienen capacidades adicionales que pueden afectar al rendimiento del procesamiento. Por ejemplo, es posible construir un esquema XML cuyo procesamiento requiere una cantidad sustancial de tiempo cuando se evalúa en un documento relativamente pequeño. También es posible incrustar bloques de scripts en una hoja de estilos XSLT. Ambos casos suponen una amenaza de seguridad a la aplicación.  
  
 Al crear una aplicación que utiliza el <xref:System.Xml.Xsl.XslCompiledTransform> clase, debe tener en cuenta los siguientes elementos y sus implicaciones:  
  
-   El script XSLT está deshabilitado de manera predeterminada. El script XSLT solo se debería habilitar si necesita compatibilidad con scripts o si está trabajando en un entorno de total confianza.  
  
-   La función `document()` XSLT está deshabilitada de manera predeterminada. Si habilita la función `document()`, restrinja los recursos a los que se tiene acceso pasando un objeto <xref:System.Xml.XmlSecureResolver> al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType>.  
  
-   Los objetos de extensión están habilitados de manera predeterminada. Si se pasa un objeto <xref:System.Xml.Xsl.XsltArgumentList> que contiene objetos de extensión al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType>, los objetos de extensión se utilizan.  
  
-   Las hojas de estilos XLST pueden incluir referencias a otros archivos y bloques de scripts incrustados. Un usuario malintencionado puede aprovecharse de esta característica para proporcionarle datos u hojas de estilos que, cuando se ejecutan, pueden hacer que el sistema los procese hasta que el equipo se quede sin recursos.  
  
-   Aplicaciones XSLT que se ejecutan en un entorno de confianza mixto pueden producir suplantaciones de hoja de estilo. Por ejemplo, un usuario malintencionado podría cargar un objeto con una hoja de estilos perjudicial y pasárselo a otro usuario que, a continuación, llama al método <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> y ejecuta la transformación.  
  
 Estos problemas de seguridad se pueden mitigar si no se habilitan los scripts o la función `document()` a menos que la hoja de estilos provenga de un origen de confianza, y si no se aceptan objetos <xref:System.Xml.Xsl.XslCompiledTransform>, hojas de estilos XSLT o datos de origen XML de un origen que no es de confianza.  
  
 **Control de excepciones**  
  
 Las excepciones producidas por componentes de nivel inferior pueden revelar información de ruta de acceso que no desea que expone a la aplicación. Las aplicaciones deben detectar las excepciones y procesarlas adecuadamente.  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Xml.Xsl" />
    <altmember cref="N:System.Xml.Schema" />
    <altmember cref="N:System.Xml.Linq" />
  </Docs>
</Namespace>