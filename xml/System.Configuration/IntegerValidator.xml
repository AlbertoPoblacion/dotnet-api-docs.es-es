<Type Name="IntegerValidator" FullName="System.Configuration.IntegerValidator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed9809612f3075e188e85ba8decc7f1fbed33af1" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30379519" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class IntegerValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IntegerValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IntegerValidator" />
  <TypeSignature Language="VB.NET" Value="Public Class IntegerValidator&#xA;Inherits ConfigurationValidatorBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class IntegerValidator : System::Configuration::ConfigurationValidatorBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Valida un valor <see cref="T:System.Int32" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La <xref:System.Configuration.IntegerValidator> clase se utiliza para garantizar que un entero cumple determinados criterios. Los criterios de validación se establecen cuando una instancia de la <xref:System.Configuration.IntegerValidator> se crea la clase. El <xref:System.Configuration.IntegerValidator.%23ctor%2A> constructor con dos parámetros garantiza que el entero que se está comprobando cumple con un mínimo y un valor máximo. El <xref:System.Configuration.IntegerValidator.%23ctor%2A> constructor con tres parámetros comprueba los valores mínimo y el máximo <xref:System.Int32> valores, así como si el valor que se debe validar está dentro del intervalo especificado. El <xref:System.Configuration.IntegerValidator.%23ctor%2A> constructor con cuatro parámetros comprueba los tres parámetros anteriores y también comprueba si el <xref:System.Int32> valor es igual a una resolución específica.  
  
 El <xref:System.Configuration.IntegerValidator.CanValidate%2A> método determina si el tipo de objeto que se va a validar coincide con el tipo esperado. El objeto que se va a validar se pasa como un parámetro de la <xref:System.Configuration.IntegerValidator.Validate%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Configuration.IntegerValidator> tipo.  
  
 [!code-csharp[System.Configuration.IntegerValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#1)]
 [!code-vb[System.Configuration.IntegerValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Configuration.IntegerValidator" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Integer, maxValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntegerValidator(int minValue, int maxValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue">Un objeto <see cref="T:System.Int32" /> que especifica el valor mínimo.</param>
        <param name="maxValue">Un objeto <see cref="T:System.Int32" /> que especifica el valor máximo.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Configuration.IntegerValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esto <xref:System.Configuration.IntegerValidator.%23ctor%2A> constructor garantiza que el entero que se está comprobando cumple con una longitud máxima y mínima.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue, bool rangeIsExclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue, bool rangeIsExclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Integer, maxValue As Integer, rangeIsExclusive As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntegerValidator(int minValue, int maxValue, bool rangeIsExclusive);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
        <Parameter Name="rangeIsExclusive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="minValue">Un objeto <see cref="T:System.Int32" /> que especifica el valor mínimo.</param>
        <param name="maxValue">Un objeto <see cref="T:System.Int32" /> que especifica el valor máximo.</param>
        <param name="rangeIsExclusive">
          <see langword="true" /> para especificar que el intervalo de validación es exclusivo. El término "incluido" significa que el valor que se va a validar debe estar dentro del intervalo especificado; "exclusivo" significa que debe estar por debajo del mínimo o por encima del máximo.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Configuration.IntegerValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Al crear una instancia de la <xref:System.Configuration.IntegerValidator> (clase), esto <xref:System.Configuration.IntegerValidator.%23ctor%2A> constructor comprueba tanto los valores mínimo y máximo <xref:System.Int32> valores, así como si el intervalo de validación es exclusivo. Cuando el `rangeIsExclusive` parámetro está establecido en `true`, <xref:System.Int32> valor no debe estar comprendido entre el `minValue` y `maxValue` valores de parámetro.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el <xref:System.Configuration.IntegerValidator.%23ctor%2A> constructor. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Configuration.IntegerValidator> clase.  
  
 [!code-csharp[System.Configuration.IntegerValidator#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#2)]
 [!code-vb[System.Configuration.IntegerValidator#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue, bool rangeIsExclusive, int resolution);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue, bool rangeIsExclusive, int32 resolution) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (minValue As Integer, maxValue As Integer, rangeIsExclusive As Boolean, resolution As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntegerValidator(int minValue, int maxValue, bool rangeIsExclusive, int resolution);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
        <Parameter Name="rangeIsExclusive" Type="System.Boolean" />
        <Parameter Name="resolution" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue">Objeto <see cref="T:System.Int32" /> que especifica la longitud mínima del valor del entero.</param>
        <param name="maxValue">Objeto <see cref="T:System.Int32" /> que especifica la longitud máxima del valor del entero.</param>
        <param name="rangeIsExclusive">Valor <see cref="T:System.Boolean" /> que especifica si el intervalo de validación es exclusivo.</param>
        <param name="resolution">Objeto <see cref="T:System.Int32" /> que especifica un valor con el que debe coincidir el entero.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Configuration.IntegerValidator" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Int32> debe ser igual al valor que se está validando el `resolution` valor para pasar la validación.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="resolution" /> es menor que <see langword="0" />.  
  
 \- o -  
  
 <paramref name="minValue" /> es mayor que <paramref name="maxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.CanValidate(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanValidate(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Tipo del objeto.</param>
        <summary>Determina si se puede validar el tipo del objeto.</summary>
        <returns>
          Es <see langword="true" /> si el valor del parámetro <paramref name="type" /> coincide con un valor <see cref="T:System.Int32" />; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Configuration.IntegerValidator.CanValidate%2A>. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Configuration.IntegerValidator> clase.  
  
 [!code-csharp[System.Configuration.IntegerValidator#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#3)]
 [!code-vb[System.Configuration.IntegerValidator#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.Validate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Validate (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Validate(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Valor que se va a validar.</param>
        <summary>Determina si el valor de un objeto es válido.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un <xref:System.Configuration.IntegerValidator> objeto contiene las reglas necesarias para validar un objeto de entero. Las reglas se establecen cuando una instancia de la <xref:System.Configuration.IntegerValidator> se crea la clase. El objeto de entero que se va a validar se pasa como un parámetro de la <xref:System.Configuration.IntegerValidator.Validate%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo utilizar el método <xref:System.Configuration.IntegerValidator.Validate%2A>. Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <xref:System.Configuration.IntegerValidator> clase.  
  
 [!code-csharp[System.Configuration.IntegerValidator#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#4)]
 [!code-vb[System.Configuration.IntegerValidator#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
      </Docs>
    </Member>
  </Members>
</Type>