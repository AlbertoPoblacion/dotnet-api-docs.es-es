<Type Name="IPersistComponentSettings" FullName="System.Configuration.IPersistComponentSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5677725efafffdc6505a5ad61b0bbab74e1352a8" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37687462" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPersistComponentSettings" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPersistComponentSettings" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IPersistComponentSettings" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPersistComponentSettings" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPersistComponentSettings" />
  <TypeSignature Language="F#" Value="type IPersistComponentSettings = interface" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Define la funcionalidad estándar para los controles o bibliotecas que almacenan y recuperan la configuración de aplicación.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalmente, puede agregar compatibilidad de configuración de aplicación a una aplicación mediante la creación de una clase contenedora de configuración, que se deriva de <xref:System.Configuration.ApplicationSettingsBase>y, a continuación, agregar propiedades especiales a esta clase. Sin embargo, este enfoque no encapsula suficientemente configuración de la aplicación para un control para que su contenedor está separado de los detalles. El <xref:System.Configuration.IPersistComponentSettings> interfaz proporciona una aplicación con una interfaz estándar para comunicar solicitudes de cambio de estado de configuración de aplicación a un módulo de biblioteca, el componente o control. Herramientas de tiempo de diseño también dependen de esta interfaz para administrar correctamente los controles y componentes.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ApplicationSettingsBase" />
  </Docs>
  <Members>
    <Member MemberName="LoadComponentSettings">
      <MemberSignature Language="C#" Value="public void LoadComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member LoadComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.LoadComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Atribuye la configuración de aplicación del control a sus propiedades correspondientes y actualiza el estado del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En general, el <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> método realiza dos operaciones esenciales:  
  
-   Hace que cada instancia de la configuración de aplicación contenida el control para actualizar los valores de sus propiedades de configuración de la aplicación, normalmente mediante una llamada a su <xref:System.Configuration.ApplicationSettingsBase.Reload%2A> métodos.  
  
-   Según sea necesario, actualiza las propiedades generales que dependen de estas opciones de volver a cargar las propiedades. Por ejemplo, si la clase de configuración contiene un `location` propiedad de configuración, <xref:System.Configuration.IPersistComponentSettings.LoadComponentSettings%2A> debe asegurarse de que el control <xref:System.Windows.Forms.Control.Location%2A> propiedad se actualiza para reflejar esta configuración ha vuelto a cargar.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reload" />
      </Docs>
    </Member>
    <Member MemberName="ResetComponentSettings">
      <MemberSignature Language="C#" Value="public void ResetComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member ResetComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.ResetComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Restablece los valores predeterminados de las propiedades de configuración de aplicación del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La implementación de la <xref:System.Configuration.IPersistComponentSettings.ResetComponentSettings%2A> método normalmente llama a la <xref:System.Configuration.ApplicationSettingsBase.Reset%2A> método en cada instancia de una clase de configuración de aplicación contiene.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Reset" />
      </Docs>
    </Member>
    <Member MemberName="SaveComponentSettings">
      <MemberSignature Language="C#" Value="public void SaveComponentSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveComponentSettings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveComponentSettings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveComponentSettings();" />
      <MemberSignature Language="F#" Value="abstract member SaveComponentSettings : unit -&gt; unit" Usage="iPersistComponentSettings.SaveComponentSettings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Conserva las propiedades de configuración de aplicación del control.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> método escribe los valores de propiedades de configuración de aplicación del control en el almacén de datos asociados. La técnica de serialización y el almacén de datos utiliza el método viene determinada por el proveedor de configuración asociado con cada clase de configuración a través de la <xref:System.Configuration.SettingsProviderAttribute>. Puede invalidar la elección del proveedor de configuración mediante el uso de la <xref:System.Configuration.ISettingsProviderService> interfaz.  
  
> [!NOTE]
>  Si el <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propiedad es `true`, el control debe llamar a <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> en su propio <xref:System.Windows.Forms.Control.Dispose%2A> método para que los datos de configuración del control se almacenan automáticamente antes de que finalice la aplicación.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings" />
        <altmember cref="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings" />
        <altmember cref="T:System.Configuration.SettingsProvider" />
        <altmember cref="T:System.Configuration.LocalFileSettingsProvider" />
        <altmember cref="T:System.Configuration.SettingsProviderAttribute" />
        <altmember cref="T:System.Configuration.ISettingsProviderService" />
      </Docs>
    </Member>
    <Member MemberName="SaveSettings">
      <MemberSignature Language="C#" Value="public bool SaveSettings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveSettings" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveSettings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveSettings { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SaveSettings : bool with get, set" Usage="System.Configuration.IPersistComponentSettings.SaveSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si el control debe conservar automáticamente sus propiedades de configuración de aplicación.</summary>
        <value>
          <see langword="true" /> si el control debe conservar automáticamente su estado; en caso contrario, <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si un control contiene datos de configuración, normalmente conservará estos datos en respuesta a una llamada explícita a la <xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> método o a veces implícita cuando el control <xref:System.Windows.Forms.Control.Dispose%2A> se invoca el método. El <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propiedad determina si un control continúa automáticamente sus datos de configuración cuando se elimina.  
  
 El valor predeterminado de <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> depende de la implementación del control. La documentación para el control debe indicar si usa la configuración de la aplicación, qué datos se conservan y lo que el valor predeterminado de la <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> es la propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra la manera adecuada para un control comprobar el valor de la <xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A> propiedad antes de intentar conservar automáticamente sus datos de configuración.  
  
 `protected override void Dispose( bool disposing ) {`  
  
 `if(disposing) {`  
  
 `try {`  
  
 `if (SaveSettings) {`  
  
 `SaveComponentSettings();`  
  
 `}`  
  
 `}`  
  
 `finally {`  
  
 `//...`  
  
 `}`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="M:System.Configuration.SettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="SettingsKey">
      <MemberSignature Language="C#" Value="public string SettingsKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SettingsKey" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberSignature Language="VB.NET" Value="Public Property SettingsKey As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SettingsKey { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SettingsKey : string with get, set" Usage="System.Configuration.IPersistComponentSettings.SettingsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el valor de la clave de configuración de aplicación para la instancia actual del control.</summary>
        <value>
          <see cref="T:System.String" /> que contiene la clave de configuración para la instancia actual del control.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use el <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> propiedad que se va a eliminar la ambigüedad de los grupos de propiedades de configuración de la aplicación cuando hay varias instancias de la misma clase de contenedor. Por ejemplo, si un control contiene una clase contenedora asociada, a continuación, colocar varias instancias del mismo control en la misma aplicación darán normalmente como resultado varias instancias de la clase contenedora. Se requiere una clave de configuración solo cuando los datos de configuración es diferente en una base por instancia; Por ejemplo, la ubicación de los controles colocados dinámicamente.  
  
 Las siguientes reglas generales se aplican al uso de <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A>:  
  
-   Un control, como cualquier clase, puede contener cero o más clases de configuración de aplicación, derivada de <xref:System.Configuration.ApplicationSettingsBase>. Cada clase de configuración contiene su propio <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> propiedad, lo que ayuda a eliminar la ambigüedad de varias instancias de esa clase.  
  
-   Un control debe separar sus datos por instancia y sus datos compartidos en las clases de configuración diferentes.  
  
-   Para un control con los datos de configuración por instancia, el `get` descriptor de acceso de la <xref:System.Configuration.IPersistComponentSettings.SettingsKey%2A> propiedad, de forma predeterminada el <xref:System.Windows.Forms.Control.Name%2A> del control. En la mayoría de los casos, el nombre del control será único dentro de una aplicación. Si el control contiene solo datos de configuración compartidos `get` , de forma predeterminada `null`.  
  
-   El `set` descriptor de acceso para esta propiedad debe implementarse para distinguir entre las clases de configuración que contiene datos de configuración compartidos y por instancia. Para cada clase de configuración que contiene los datos por instancia, `set` sólo debe atravesar la <xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=nameWithType> propiedad de la clase de configuración. Para las clases de configuración que contiene los datos compartidos, `set` no debería realizar ninguna acción para esa clase de configuración.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings" />
        <altmember cref="P:System.Configuration.ApplicationSettingsBase.SettingsKey" />
      </Docs>
    </Member>
  </Members>
</Type>