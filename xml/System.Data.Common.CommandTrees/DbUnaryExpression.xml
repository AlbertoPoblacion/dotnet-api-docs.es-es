<Type Name="DbUnaryExpression" FullName="System.Data.Common.CommandTrees.DbUnaryExpression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2314e92a734033d4c67727d38a47ad235b3c017b" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30376689" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class DbUnaryExpression : System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DbUnaryExpression extends System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.DbUnaryExpression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DbUnaryExpression&#xA;Inherits DbExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class DbUnaryExpression abstract : System::Data::Common::CommandTrees::DbExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.CommandTrees.DbExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Implementa la funcionalidad básica requerida por las expresiones que aceptan un argumento con una expresión sencilla.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta clase es una clase base auxiliar en la que se basan las clases siguientes.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Argument">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression Argument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression Argument" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbUnaryExpression.Argument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Argument As DbExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::CommandTrees::DbExpression ^ Argument { System::Data::Common::CommandTrees::DbExpression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el objeto <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> que define el argumento.</summary>
        <value>
          <see cref="T:System.Data.Common.CommandTrees.DbExpression" /> que define el argumento.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Los tipos de expresión derivados pueden realizar comprobaciones de tipo más estrictas cuando se establece la propiedad <xref:System.Data.Common.CommandTrees.DbUnaryExpression.Argument%2A>. Por ejemplo, <xref:System.Data.Common.CommandTrees.DbDistinctExpression> requiere que la expresión del argumento tenga un tipo de resultado de colección. Normalmente, los tipos de expresión derivados no permitirán que <xref:System.Data.Common.CommandTrees.DbUnaryExpression.Argument%2A> se establezca en una expresión con un tipo de resultado que no sea igual o no se pueda promover al tipo de resultado del valor actual.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">La expresión es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">La expresión no está asociada al árbol de comandos de una <see cref="T:System.Data.Common.CommandTrees.DbUnaryExpression" />, o su tipo de resultado no es igual o no se puede promover al tipo necesario para el argumento.</exception>
      </Docs>
    </Member>
  </Members>
</Type>