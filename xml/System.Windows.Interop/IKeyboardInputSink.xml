<Type Name="IKeyboardInputSink" FullName="System.Windows.Interop.IKeyboardInputSink">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3120cf880fee3bfbee4ccce673b07364bc06400a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30658679" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IKeyboardInputSink" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IKeyboardInputSink" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.IKeyboardInputSink" />
  <TypeSignature Language="VB.NET" Value="Public Interface IKeyboardInputSink" />
  <TypeSignature Language="C++ CLI" Value="public interface class IKeyboardInputSink" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Proporciona a los componentes un receptor del teclado que administra el desplazamiento mediante tabulación, los aceleradores y las teclas de acceso en los límites de interoperabilidad y entre los identificadores de ventana (HWND). Esta interfaz implementa la administración de los mensajes del teclado en escenarios de interoperación de WPF-Win32.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Un receptor de teclado controla la entrada procedente de determinados subconjuntos del modelo de entrada de teclado general para [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] y [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]y permite que se procesen y se dirigen a HWND que no sea uno con el foco de teclado actual de entrada de teclado.  
  
 Si su componente contiene otros componentes y mantiene un orden de tabulación, también debe implementar el componente <xref:System.Windows.Interop.IKeyboardInputSite> y realizar un seguimiento de qué componente tiene el foco.  
  
 Para obtener una descripción de la arquitectura de entrada implementada específicamente para [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] interoperabilidad, vea [Windows Forms y WPF Interoperability Input Architecture](~/docs/framework/wpf/advanced/windows-forms-and-wpf-interoperability-input-architecture.md).  
  
 <xref:System.Windows.Interop.HwndSource> y <xref:System.Windows.Interop.HwndHost> cada implemente el <xref:System.Windows.Interop.IKeyboardInputSink> interfaz a través de definiciones de interfaz explícita. Las definiciones explícitas proporcionan comportamientos predeterminados y también puede tener acceso si es necesario a través de un <xref:System.Windows.Interop.IKeyboardInputSink> interfaz convierte de <xref:System.Windows.Interop.HwndSource> o <xref:System.Windows.Interop.HwndHost>.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="T:System.Windows.Interop.HwndHost" />
  </Docs>
  <Members>
    <Member MemberName="HasFocusWithin">
      <MemberSignature Language="C#" Value="public bool HasFocusWithin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasFocusWithin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin" />
      <MemberSignature Language="VB.NET" Value="Public Function HasFocusWithin () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasFocusWithin();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene un valor que indica si el receptor o uno de los componentes que contiene tiene el foco.</summary>
        <returns>
          <see langword="true" /> si el receptor o uno de los componentes que contiene tiene el foco; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es necesario para el reenvío de <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> llamadas a los componentes secundarios tiene el foco desde el <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> implementación. Llame a <xref:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin%2A> recursivamente hasta que llegue al nivel de foco específico y su reenvío <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> no existe.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />
        <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputSite">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.IKeyboardInputSite KeyboardInputSite { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Interop.IKeyboardInputSite KeyboardInputSite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardInputSite As IKeyboardInputSite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Interop::IKeyboardInputSite ^ KeyboardInputSite { System::Windows::Interop::IKeyboardInputSite ^ get(); void set(System::Windows::Interop::IKeyboardInputSite ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.IKeyboardInputSite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece una referencia a la interfaz <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> del contenedor del componente.</summary>
        <value>Una referencia a la interfaz <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> del contenedor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inicialmente, esta propiedad debe establecerse en `null`. Establecerá cualquier contenedor que agreguen el receptor a su lista de componentes <xref:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite%2A> antes de llamar a cualquier otro método y se puede establecer varias veces después de eso. Debe establecer la propiedad en `null` antes de la eliminación.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="OnMnemonic">
      <MemberSignature Language="C#" Value="public bool OnMnemonic (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMnemonic(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function OnMnemonic (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool OnMnemonic(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">Mensaje de las teclas de acceso y los datos asociados. No modifique esta estructura de mensaje. Se pasa por referencia debido únicamente a razones de rendimiento.</param>
        <param name="modifiers">Teclas modificadoras.</param>
        <summary>Se llama a este método cuando se invoca una de las teclas de acceso de este receptor.</summary>
        <returns>
          Es <see langword="true" /> si se ha administrado el mensaje; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] mensaje debe ser WM_CHAR, WM_SYSCHAR, WM_DEADCHAR o WM_SYSDEADCHAR.  
  
 Si el componente ha tenido componentes, se debe pasar el mensaje en el componente de implementación mediante una llamada cada contenida <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A> método.  
  
 Una interfaz que devuelve `true` de <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> no llamará a <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>. Pueden elegir las implementaciones para realizar la combinación de teclas específica todos control en <xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A>y omitir <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
        <altmember cref="T:System.Windows.Input.AccessKeyManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterKeyboardInputSink">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSink (System.Windows.Interop.IKeyboardInputSink sink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSink(class System.Windows.Interop.IKeyboardInputSink sink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterKeyboardInputSink (sink As IKeyboardInputSink) As IKeyboardInputSite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Interop::IKeyboardInputSite ^ RegisterKeyboardInputSink(System::Windows::Interop::IKeyboardInputSink ^ sink);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.IKeyboardInputSite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sink" Type="System.Windows.Interop.IKeyboardInputSink" />
      </Parameters>
      <Docs>
        <param name="sink">Receptor <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> del componente contenido.</param>
        <summary>Registra la interfaz <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> de un componente contenido.</summary>
        <returns>Sitio <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> del componente contenido.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Componentes con componentes secundarios deben mantener colecciones internas de sitios y usar este método para agregar un nuevo receptor y devolver el nuevo sitio. Solo debe mantener la colección de sitios, dado que el receptor puede obtenerse a partir del sitio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabInto">
      <MemberSignature Language="C#" Value="public bool TabInto (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TabInto(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Function TabInto (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TabInto(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">Especifica si el foco debería establecerse en la primera o última posición de tabulación.</param>
        <summary>Establece el foco en la primera o última posición de tabulación del receptor.</summary>
        <returns>
          <see langword="true" /> si el foco se ha establecido tal y como se solicitó; <see langword="false" />, si no hay ninguna posición de tabulación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.FocusNavigationDirection.First> y <xref:System.Windows.Input.FocusNavigationDirection.Last> son los únicos valores pertinentes que se deben pasar a este método en el <xref:System.Windows.Input.TraversalRequest>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAccelerator">
      <MemberSignature Language="C#" Value="public bool TranslateAccelerator (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TranslateAccelerator(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslateAccelerator (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TranslateAccelerator(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">El mensaje y los datos asociados. No modifique esta estructura. Se pasa por referencia debido únicamente a razones de rendimiento.</param>
        <param name="modifiers">Teclas modificadoras.</param>
        <summary>Procesa la entrada de teclado en el nivel de mensajes de pulsación de teclas.</summary>
        <returns>
          <see langword="true" /> si el mensaje está controlado por la implementación del método; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El mensaje debe ser WM_KEYDOWN o WM_SYSKEYDOWN.  
  
 Si el componente no puede administrar las traducciones de entrada y tiene componentes secundarios que pueden tener traducciones, normalmente llama <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> método en el componente secundario que contiene el foco actual antes de devolver un resultado.  
  
 Si el mensaje no se puede controlar inmediatamente, vuelva a puede enviar desde el <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> implementación si es necesario y, a continuación, vuelva `false`.  
  
 Un escenario principal para traducir las teclas de aceleración es controlar el mensaje de keydown VK_TAB y determinar si se debe establecer el foco dentro del componente, llamar a <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A> a un componente secundario o llamar a <xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A> en el registro primario de sitio porque la secuencia de tabulación ha alcanzado los límites del principio o al final. Ciertos componentes pueden optar por no administrar la tecla tab en este modo.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      </Docs>
    </Member>
    <Member MemberName="TranslateChar">
      <MemberSignature Language="C#" Value="public bool TranslateChar (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TranslateChar(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Function TranslateChar (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TranslateChar(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">El mensaje y los datos asociados. No modifique esta estructura. Se pasa por referencia debido únicamente a razones de rendimiento.</param>
        <param name="modifiers">Teclas modificadoras.</param>
        <summary>Procesa los mensajes de entrada WM_CHAR, WM_SYSCHAR, WM_DEADCHAR y WM_SYSDEADCHAR antes de llamar a <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />.</summary>
        <returns>
          <see langword="true" /> si el mensaje se ha procesado y no debe llamarse a <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />; de lo contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si implementa este método para devolver `true`, no se llamará la arquitectura de entrada <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A> para ese mensaje de tecla.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>