<Type Name="Stream" FullName="System.IO.Stream">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f796c63ceb316c8533bd75b2bb24d5c056458998" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36484003" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Stream : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Stream extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Stream" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Stream&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stream abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Stream = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2e157-101">Provides a generic view of a sequence of bytes.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e157-101">Provides a generic view of a sequence of bytes.</span>
      </span>
      <span data-ttu-id="2e157-102">This is an abstract class.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2e157-102">This is an abstract class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-103"><xref:System.IO.Stream> es la clase base abstracta de todas las secuencias.</span><span class="sxs-lookup"><span data-stu-id="2e157-103"><xref:System.IO.Stream> is the abstract base class of all streams.</span></span> <span data-ttu-id="2e157-104">Una secuencia es una abstracción de una secuencia de bytes como, por ejemplo, un archivo, un dispositivo de entrada/salida, una canalización de comunicación entre procesos o un socket TCP/IP.</span><span class="sxs-lookup"><span data-stu-id="2e157-104">A stream is an abstraction of a sequence of bytes, such as a file, an input/output device, an inter-process communication pipe, or a TCP/IP socket.</span></span> <span data-ttu-id="2e157-105">La <xref:System.IO.Stream> clase y sus clases derivadas proporcionan una vista genérica de estos diferentes tipos de entrada y salida y aislar el programador de los detalles específicos del sistema operativo y los dispositivos subyacentes.</span><span class="sxs-lookup"><span data-stu-id="2e157-105">The <xref:System.IO.Stream> class and its derived classes provide a generic view of these different types of input and output, and isolate the programmer from the specific details of the operating system and the underlying devices.</span></span>  
  
 <span data-ttu-id="2e157-106">Las secuencias comprenden tres operaciones fundamentales:</span><span class="sxs-lookup"><span data-stu-id="2e157-106">Streams involve three fundamental operations:</span></span>  
  
-   <span data-ttu-id="2e157-107">Puede leer en secuencias.</span><span class="sxs-lookup"><span data-stu-id="2e157-107">You can read from streams.</span></span> <span data-ttu-id="2e157-108">Lectura es la transferencia de datos desde una secuencia a una estructura de datos, como una matriz de bytes.</span><span class="sxs-lookup"><span data-stu-id="2e157-108">Reading is the transfer of data from a stream into a data structure, such as an array of bytes.</span></span>  
  
-   <span data-ttu-id="2e157-109">Puede escribir en secuencias.</span><span class="sxs-lookup"><span data-stu-id="2e157-109">You can write to streams.</span></span> <span data-ttu-id="2e157-110">Escritura es la transferencia de datos de una estructura de datos en una secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-110">Writing is the transfer of data from a data structure into a stream.</span></span>  
  
-   <span data-ttu-id="2e157-111">Las secuencias pueden admitir operaciones de búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2e157-111">Streams can support seeking.</span></span> <span data-ttu-id="2e157-112">Operaciones de búsqueda hace referencia a consultar y modificar la posición actual dentro de un flujo.</span><span class="sxs-lookup"><span data-stu-id="2e157-112">Seeking refers to querying and modifying the current position within a stream.</span></span> <span data-ttu-id="2e157-113">Buscar capacidad depende del tipo de almacén de copia de seguridad tiene una secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-113">Seek capability depends on the kind of backing store a stream has.</span></span> <span data-ttu-id="2e157-114">Por ejemplo, secuencias de red no tienen ningún concepto unificado de la posición actual y, por tanto, normalmente no admite operaciones de búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2e157-114">For example, network streams have no unified concept of a current position, and therefore typically do not support seeking.</span></span>  
  
 <span data-ttu-id="2e157-115">Algunas de las más usan de secuencias que heredan de <xref:System.IO.Stream> son <xref:System.IO.FileStream>, y <xref:System.IO.MemoryStream>.</span><span class="sxs-lookup"><span data-stu-id="2e157-115">Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.</span></span>  
  
 <span data-ttu-id="2e157-116">Dependiendo del origen de datos subyacente o un repositorio, secuencias podrían admitir solo algunas de estas características.</span><span class="sxs-lookup"><span data-stu-id="2e157-116">Depending on the underlying data source or repository, streams might support only some of these capabilities.</span></span> <span data-ttu-id="2e157-117">También puede consultar un flujo para sus capacidades mediante la <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, y <xref:System.IO.Stream.CanSeek%2A> propiedades de la <xref:System.IO.Stream> clase.</span><span class="sxs-lookup"><span data-stu-id="2e157-117">You can query a stream for its capabilities by using the <xref:System.IO.Stream.CanRead%2A>, <xref:System.IO.Stream.CanWrite%2A>, and <xref:System.IO.Stream.CanSeek%2A> properties of the <xref:System.IO.Stream> class.</span></span>  
  
 <span data-ttu-id="2e157-118">El <xref:System.IO.Stream.Read%2A> y <xref:System.IO.Stream.Write%2A> métodos leer y escribir datos en una variedad de formatos.</span><span class="sxs-lookup"><span data-stu-id="2e157-118">The <xref:System.IO.Stream.Read%2A> and <xref:System.IO.Stream.Write%2A> methods read and write data in a variety of formats.</span></span> <span data-ttu-id="2e157-119">Para las secuencias que admiten operaciones de búsqueda, use la <xref:System.IO.Stream.Seek%2A> y <xref:System.IO.Stream.SetLength%2A> métodos y la <xref:System.IO.Stream.Position%2A> y <xref:System.IO.Stream.Length%2A> propiedades para consultar y modificar la posición actual y la longitud de una secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-119">For streams that support seeking, use the <xref:System.IO.Stream.Seek%2A> and <xref:System.IO.Stream.SetLength%2A> methods and the <xref:System.IO.Stream.Position%2A> and <xref:System.IO.Stream.Length%2A> properties to query and modify the current position and length of a stream.</span></span>  
  
 <span data-ttu-id="2e157-120">Este tipo implementa la <xref:System.IDisposable> interfaz.</span><span class="sxs-lookup"><span data-stu-id="2e157-120">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="2e157-121">Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente.</span><span class="sxs-lookup"><span data-stu-id="2e157-121">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="2e157-122">Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque.</span><span class="sxs-lookup"><span data-stu-id="2e157-122">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="2e157-123">Para deshacerse de él indirectamente, use una construcción de lenguaje como `using` (en C#) o `Using` (en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="2e157-123">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="2e157-124">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.</span><span class="sxs-lookup"><span data-stu-id="2e157-124">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="2e157-125">Desechar un <xref:System.IO.Stream> objeto vacía los datos almacenados en búfer y llama a básicamente el <xref:System.IO.Stream.Flush%2A> método automáticamente.</span><span class="sxs-lookup"><span data-stu-id="2e157-125">Disposing a <xref:System.IO.Stream> object flushes any buffered data, and essentially calls the <xref:System.IO.Stream.Flush%2A> method for you.</span></span> <span data-ttu-id="2e157-126"><xref:System.IO.Stream.Dispose%2A> También libera los recursos del sistema operativo como identificadores de archivos, las conexiones de red o la memoria usada para cualquier búfer interno.</span><span class="sxs-lookup"><span data-stu-id="2e157-126"><xref:System.IO.Stream.Dispose%2A> also releases operating system resources such as file handles, network connections, or memory used for any internal buffering.</span></span> <span data-ttu-id="2e157-127">La <xref:System.IO.BufferedStream> clase proporciona la capacidad de ajuste de una secuencia almacenada en búfer en otra secuencia con el fin de mejorar la lectura y escritura de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="2e157-127">The <xref:System.IO.BufferedStream> class provides the capability of wrapping a buffered stream around another stream in order to improve read and write performance.</span></span>  
  
 <span data-ttu-id="2e157-128">A partir de la [!INCLUDE[net_v45](~/includes/net-v45-md.md)], la <xref:System.IO.Stream> clase incluye métodos asincrónicos para simplificar las operaciones asincrónicas.</span><span class="sxs-lookup"><span data-stu-id="2e157-128">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.IO.Stream> class includes async methods to simplify asynchronous operations.</span></span> <span data-ttu-id="2e157-129">Contiene un método asincrónico `Async` en su nombre, como <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, y <xref:System.IO.Stream.FlushAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e157-129">An async method contains `Async` in its name, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>.</span></span> <span data-ttu-id="2e157-130">Estos métodos permiten realizar operaciones de E/S de gran cantidad de recursos sin bloquear el subproceso principal.</span><span class="sxs-lookup"><span data-stu-id="2e157-130">These methods enable you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="2e157-131">Esta consideración de rendimiento es especialmente importante en una aplicación de la [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] o una aplicación de [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] en que una operación de streaming prolongada puede bloquear el subproceso de interfaz de usuario y hacer que parezca que una aplicación ha dejado de responder.</span><span class="sxs-lookup"><span data-stu-id="2e157-131">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2e157-132">Los métodos asincrónicos se usan junto con la `async` y `await` palabras clave en Visual Basic y C#.</span><span class="sxs-lookup"><span data-stu-id="2e157-132">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2e157-133">Cuando se utiliza en una [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] aplicación, <xref:System.IO.Stream> incluye dos métodos de extensión: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> y <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e157-133">When used in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app, <xref:System.IO.Stream> includes two extension methods: <xref:System.IO.WindowsRuntimeStreamExtensions.AsInputStream%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream%2A>.</span></span> <span data-ttu-id="2e157-134">Estos métodos convierten un <xref:System.IO.Stream> objeto en una secuencia de la [!INCLUDE[wrt](~/includes/wrt-md.md)].</span><span class="sxs-lookup"><span data-stu-id="2e157-134">These methods convert a <xref:System.IO.Stream> object to a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)].</span></span> <span data-ttu-id="2e157-135">También puede convertir una secuencia en la [!INCLUDE[wrt](~/includes/wrt-md.md)] a una <xref:System.IO.Stream> objeto mediante el uso de la <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> y <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="2e157-135">You can also convert a stream in the [!INCLUDE[wrt](~/includes/wrt-md.md)] to a <xref:System.IO.Stream> object by using the <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForRead%2A> and <xref:System.IO.WindowsRuntimeStreamExtensions.AsStreamForWrite%2A> methods.</span></span> <span data-ttu-id="2e157-136">Para obtener más información, vea [Cómo: convertir entre secuencias .NET Framework y secuencias de Windows en tiempo de ejecución](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</span><span class="sxs-lookup"><span data-stu-id="2e157-136">For more information, see [How to: Convert Between .NET Framework Streams and Windows Runtime Streams](~/docs/standard/io/how-to-convert-between-dotnet-streams-and-winrt-streams.md)</span></span>  
  
 <span data-ttu-id="2e157-137">Algunas implementaciones de secuencia realizan en un búfer local de los datos subyacentes para mejorar el rendimiento.</span><span class="sxs-lookup"><span data-stu-id="2e157-137">Some stream implementations perform local buffering of the underlying data to improve performance.</span></span> <span data-ttu-id="2e157-138">Para estas secuencias, puede usar el <xref:System.IO.Stream.Flush%2A> o <xref:System.IO.Stream.FlushAsync%2A> método para borrar los búferes internos y asegurarse de que todos los datos se ha escrito en el origen de datos o repositorio subyacente.</span><span class="sxs-lookup"><span data-stu-id="2e157-138">For such streams, you can use the <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.FlushAsync%2A> method to clear any internal buffers and ensure that all data has been written to the underlying data source or repository.</span></span>  
  
 <span data-ttu-id="2e157-139">Si necesita un flujo sin memoria auxiliar (también conocido como un depósito de bits), use el <xref:System.IO.Stream.Null> campo que desea recuperar una instancia de una secuencia que está diseñada para este propósito.</span><span class="sxs-lookup"><span data-stu-id="2e157-139">If you need a stream with no backing store (also known as a bit bucket), use the <xref:System.IO.Stream.Null> field to retrieve an instance of a stream that is designed for this purpose.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e157-140">En el ejemplo siguiente se muestra cómo utilizar dos <xref:System.IO.FileStream> objetos que se va a copiar los archivos de forma asincrónica desde un directorio a otro directorio.</span><span class="sxs-lookup"><span data-stu-id="2e157-140">The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another directory.</span></span> <span data-ttu-id="2e157-141">La clase <xref:System.IO.FileStream> se deriva de la clase <xref:System.IO.Stream>.</span><span class="sxs-lookup"><span data-stu-id="2e157-141">The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.</span></span> <span data-ttu-id="2e157-142">Observe que el controlador de eventos <xref:System.Web.UI.WebControls.Button.Click> para el control <xref:System.Windows.Controls.Button> está marcado con el modificador `async` porque llama a un método asincrónico.</span><span class="sxs-lookup"><span data-stu-id="2e157-142">Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]
 [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="2e157-143">
        <para>Cuando se implementa una clase derivada de <see cref="T:System.IO.Stream" />, se deben proporcionar implementaciones para la <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> y <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> métodos. Los métodos asincrónicos <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />, y <see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /> utilizan los métodos sincrónicos <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> y <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> en sus implementaciones. Por lo tanto, las implementaciones de <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> y <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> funcionarán correctamente con los métodos asincrónicos. Las implementaciones predeterminadas de <see cref="M:System.IO.Stream.ReadByte" /> y <see cref="M:System.IO.Stream.WriteByte(System.Byte)" /> crear una nueva matriz de byte único elemento y, a continuación, llamar a sus implementaciones del <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> y <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />. Al derivar de <see cref="T:System.IO.Stream" />, se recomienda reemplazar estos métodos para tener acceso al búfer interno y, si tiene una, para mejorar considerablemente el rendimiento. También debe proporcionar implementaciones de <see cref="P:System.IO.Stream.CanRead" />, <see cref="P:System.IO.Stream.CanSeek" />, <see cref="P:System.IO.Stream.CanWrite" />, <see cref="M:System.IO.Stream.Flush" />, <see cref="P:System.IO.Stream.Length" />, <see cref="P:System.IO.Stream.Position" />, <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />, y <see cref="M:System.IO.Stream.SetLength(System.Int64)" />.  No invalide el <see cref="M:System.IO.Stream.Close" /> método, en su lugar, coloca todo el <see cref="T:System.IO.Stream" /> lógica de limpieza en el <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> (método). Para obtener más información, consulte [implementando un Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="2e157-143">
          <para>When you implement a derived class of <see cref="T:System.IO.Stream" />, you must provide implementations for the <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> methods. The asynchronous methods <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />, <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />, and <see cref="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" /> use the synchronous methods <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> in their implementations. Therefore, your implementations of <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> will work correctly with the asynchronous methods. The default implementations of <see cref="M:System.IO.Stream.ReadByte" /> and <see cref="M:System.IO.Stream.WriteByte(System.Byte)" /> create a new single-element byte array, and then call your implementations of <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> and <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />. When you derive from <see cref="T:System.IO.Stream" />, we recommend that you override these methods to access your internal buffer, if you have one, for substantially better performance. You must also provide implementations of <see cref="P:System.IO.Stream.CanRead" />, <see cref="P:System.IO.Stream.CanSeek" />, <see cref="P:System.IO.Stream.CanWrite" />, <see cref="M:System.IO.Stream.Flush" />, <see cref="P:System.IO.Stream.Length" />, <see cref="P:System.IO.Stream.Position" />, <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />, and <see cref="M:System.IO.Stream.SetLength(System.Int64)" />.  Do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all the <see cref="T:System.IO.Stream" /> cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method. For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IO.FileStream" />
    <altmember cref="T:System.IO.MemoryStream" />
    <altmember cref="T:System.IO.BufferedStream" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Stream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Stream();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e157-144">Initializes a new instance of the <see cref="T:System.IO.Stream" /> class.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-144">Initializes a new instance of the <see cref="T:System.IO.Stream" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-145"><xref:System.IO.Stream> es la clase base abstracta de todas las secuencias.</span><span class="sxs-lookup"><span data-stu-id="2e157-145"><xref:System.IO.Stream> is the abstract base class of all streams.</span></span>  
  
 <span data-ttu-id="2e157-146">Algunas de las más usan de secuencias que heredan de <xref:System.IO.Stream> son <xref:System.IO.FileStream>, y <xref:System.IO.MemoryStream>.</span><span class="sxs-lookup"><span data-stu-id="2e157-146">Some of the more commonly used streams that inherit from <xref:System.IO.Stream> are <xref:System.IO.FileStream>, and <xref:System.IO.MemoryStream>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginRead (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="stream.BeginRead (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2e157-147">The buffer to read the data into.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-147">The buffer to read the data into.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2e157-148">The byte offset in <c>buffer</c> at which to begin writing data read from the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-148">The byte offset in <c>buffer</c> at which to begin writing data read from the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2e157-149">The maximum number of bytes to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-149">The maximum number of bytes to read.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="2e157-150">An optional asynchronous callback, to be called when the read is complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-150">An optional asynchronous callback, to be called when the read is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="2e157-151">A user-provided object that distinguishes this particular asynchronous read request from other requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-151">A user-provided object that distinguishes this particular asynchronous read request from other requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-152">Begins an asynchronous read operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-152">Begins an asynchronous read operation.</span>
          </span>
          <span data-ttu-id="2e157-153">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-153">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-154">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-154">An <see cref="T:System.IAsyncResult" /> that represents the asynchronous read, which could still be pending.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-155">En .NET Framework 4 y versiones anteriores, es necesario usar métodos como <xref:System.IO.Stream.BeginRead%2A> y <xref:System.IO.Stream.EndRead%2A> para implementar operaciones de E/S asincrónicas.</span><span class="sxs-lookup"><span data-stu-id="2e157-155">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="2e157-156">Estos métodos siguen estando disponibles en la [!INCLUDE[net_v45](~/includes/net-v45-md.md)] para admitir código heredado; sin embargo, los nuevos métodos asincrónicos, como <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, y <xref:System.IO.Stream.FlushAsync%2A>, ayuda implementar operaciones asincrónicas de E/S más fácilmente.</span><span class="sxs-lookup"><span data-stu-id="2e157-156">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="2e157-157">La implementación predeterminada de `BeginRead` en una secuencia de llamadas la <xref:System.IO.Stream.Read%2A> método sincrónicamente, lo que significa que `Read` puede bloquearse en algunas secuencias.</span><span class="sxs-lookup"><span data-stu-id="2e157-157">The default implementation of `BeginRead` on a stream calls the <xref:System.IO.Stream.Read%2A> method synchronously, which means that `Read` might block on some streams.</span></span> <span data-ttu-id="2e157-158">Sin embargo, las instancias de clases como `FileStream` y `NetworkStream` totalmente compatible con las operaciones asincrónicas si las instancias se han abierto de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="2e157-158">However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously.</span></span> <span data-ttu-id="2e157-159">Por lo tanto, las llamadas a `BeginRead` , no se bloqueará en esas secuencias.</span><span class="sxs-lookup"><span data-stu-id="2e157-159">Therefore, calls to `BeginRead` will not block on those streams.</span></span> <span data-ttu-id="2e157-160">Puede invalidar `BeginRead` (mediante delegados asincrónicos, por ejemplo) para proporcionar un comportamiento asincrónico.</span><span class="sxs-lookup"><span data-stu-id="2e157-160">You can override `BeginRead` (by using async delegates, for example) to provide asynchronous behavior.</span></span>  
  
 <span data-ttu-id="2e157-161">Pasar el `IAsyncResult` valor devuelto para el <xref:System.IO.Stream.EndRead%2A> método de la secuencia para determinar el número de bytes que se leyeron y para liberar recursos del sistema operativo utilizados en la lectura.</span><span class="sxs-lookup"><span data-stu-id="2e157-161">Pass the `IAsyncResult` return value to the <xref:System.IO.Stream.EndRead%2A> method of the stream to determine how many bytes were read and to release operating system resources used for reading.</span></span> <span data-ttu-id="2e157-162"><xref:System.IO.Stream.EndRead%2A> debe llamarse una vez por cada llamada a <xref:System.IO.Stream.BeginRead%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e157-162"><xref:System.IO.Stream.EndRead%2A> must be called once for every call to <xref:System.IO.Stream.BeginRead%2A>.</span></span> <span data-ttu-id="2e157-163">Puede hacerlo usando el mismo código que llama `BeginRead` o en una devolución de llamada pasado a `BeginRead`.</span><span class="sxs-lookup"><span data-stu-id="2e157-163">You can do this either by using the same code that called `BeginRead` or in a callback passed to `BeginRead`.</span></span>  
  
 <span data-ttu-id="2e157-164">La posición actual en la secuencia se actualiza cuando se emite la lectura o escritura asincrónica, no cuando finaliza la operación de E/S.</span><span class="sxs-lookup"><span data-stu-id="2e157-164">The current position in the stream is updated when the asynchronous read or write is issued, not when the I/O operation completes.</span></span>  
  
 <span data-ttu-id="2e157-165">Varias solicitudes asincrónicas simultáneas representan el orden de finalización de la solicitud no sabe con seguridad.</span><span class="sxs-lookup"><span data-stu-id="2e157-165">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="2e157-166">Use la <xref:System.IO.Stream.CanRead%2A> propiedad para determinar si la instancia actual admite operaciones de lectura.</span><span class="sxs-lookup"><span data-stu-id="2e157-166">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="2e157-167">Si una secuencia está cerrada o se pasa un argumento no válido, se producirán inmediatamente excepciones de `BeginRead`.</span><span class="sxs-lookup"><span data-stu-id="2e157-167">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginRead`.</span></span> <span data-ttu-id="2e157-168">Errores que se producen durante una solicitud de lectura asincrónica, como un error de disco durante la solicitud de E/S, tienen lugar en el subproceso del grupo y producir excepciones al llamar a `EndRead`.</span><span class="sxs-lookup"><span data-stu-id="2e157-168">Errors that occur during an asynchronous read request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndRead`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-169">Attempted an asynchronous read past the end of the stream, or a disk error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-169">Attempted an asynchronous read past the end of the stream, or a disk error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-170">One or more of the arguments is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-170">One or more of the arguments is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-171">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-171">Methods were called after the stream was closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-172">The current <see langword="Stream" /> implementation does not support the read operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-172">The current <see langword="Stream" /> implementation does not support the read operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginWrite (buffer As Byte(), offset As Integer, count As Integer, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="stream.BeginWrite (buffer, offset, count, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2e157-173">The buffer to write data from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-173">The buffer to write data from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2e157-174">The byte offset in <c>buffer</c> from which to begin writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-174">The byte offset in <c>buffer</c> from which to begin writing.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2e157-175">The maximum number of bytes to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-175">The maximum number of bytes to write.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="2e157-176">An optional asynchronous callback, to be called when the write is complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-176">An optional asynchronous callback, to be called when the write is complete.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="2e157-177">A user-provided object that distinguishes this particular asynchronous write request from other requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-177">A user-provided object that distinguishes this particular asynchronous write request from other requests.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-178">Begins an asynchronous write operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-178">Begins an asynchronous write operation.</span>
          </span>
          <span data-ttu-id="2e157-179">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-179">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-180">An <see langword="IAsyncResult" /> that represents the asynchronous write, which could still be pending.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-180">An <see langword="IAsyncResult" /> that represents the asynchronous write, which could still be pending.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-181">En .NET Framework 4 y versiones anteriores, es necesario usar métodos como <xref:System.IO.Stream.BeginWrite%2A> y <xref:System.IO.Stream.EndWrite%2A> para implementar operaciones de E/S asincrónicas.</span><span class="sxs-lookup"><span data-stu-id="2e157-181">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="2e157-182">Estos métodos siguen estando disponibles en la [!INCLUDE[net_v45](~/includes/net-v45-md.md)] para admitir código heredado; sin embargo, los nuevos métodos asincrónicos, como <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, y <xref:System.IO.Stream.FlushAsync%2A>, ayuda implementar operaciones asincrónicas de E/S más fácilmente.</span><span class="sxs-lookup"><span data-stu-id="2e157-182">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="2e157-183">La implementación predeterminada de `BeginWrite` en una secuencia de llamadas la <xref:System.IO.Stream.Write%2A> método sincrónicamente, lo que significa que `Write` puede bloquearse en algunas secuencias.</span><span class="sxs-lookup"><span data-stu-id="2e157-183">The default implementation of `BeginWrite` on a stream calls the <xref:System.IO.Stream.Write%2A> method synchronously, which means that `Write` might block on some streams.</span></span> <span data-ttu-id="2e157-184">Sin embargo, las instancias de clases como `FileStream` y `NetworkStream` totalmente compatible con las operaciones asincrónicas si las instancias se han abierto de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="2e157-184">However, instances of classes such as `FileStream` and `NetworkStream` fully support asynchronous operations if the instances have been opened asynchronously.</span></span> <span data-ttu-id="2e157-185">Por lo tanto, las llamadas a `BeginWrite` , no se bloqueará en esas secuencias.</span><span class="sxs-lookup"><span data-stu-id="2e157-185">Therefore, calls to `BeginWrite` will not block on those streams.</span></span> <span data-ttu-id="2e157-186">Puede invalidar `BeginWrite` (mediante delegados asincrónicos, por ejemplo) para proporcionar un comportamiento asincrónico.</span><span class="sxs-lookup"><span data-stu-id="2e157-186">You can override `BeginWrite` (by using async delegates, for example) to provide asynchronous behavior.</span></span>  
  
 <span data-ttu-id="2e157-187">Pasar el `IAsyncResult` devuelto por el método actual a <xref:System.IO.Stream.EndWrite%2A> para asegurarse de que la operación de escritura finalice y libere los recursos como corresponde.</span><span class="sxs-lookup"><span data-stu-id="2e157-187">Pass the `IAsyncResult` returned by the current method to <xref:System.IO.Stream.EndWrite%2A> to ensure that the write completes and frees resources appropriately.</span></span> <span data-ttu-id="2e157-188"><xref:System.IO.Stream.EndWrite%2A> debe llamarse una vez por cada llamada a <xref:System.IO.Stream.BeginWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e157-188"><xref:System.IO.Stream.EndWrite%2A> must be called once for every call to <xref:System.IO.Stream.BeginWrite%2A>.</span></span> <span data-ttu-id="2e157-189">Puede hacerlo usando el mismo código que llama `BeginWrite` o en una devolución de llamada pasado a `BeginWrite`.</span><span class="sxs-lookup"><span data-stu-id="2e157-189">You can do this either by using the same code that called `BeginWrite` or in a callback passed to `BeginWrite`.</span></span> <span data-ttu-id="2e157-190">Si se produce un error durante la escritura asincrónica, no se producirá una excepción hasta que `EndWrite` se llama con el `IAsyncResult` devuelto por este método.</span><span class="sxs-lookup"><span data-stu-id="2e157-190">If an error occurs during an asynchronous write, an exception will not be thrown until `EndWrite` is called with the `IAsyncResult` returned by this method.</span></span>  
  
 <span data-ttu-id="2e157-191">Si una secuencia se puede escribir, escribir al final de la secuencia, ésta expande la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-191">If a stream is writable, writing at the end of the stream expands the stream.</span></span>  
  
 <span data-ttu-id="2e157-192">La posición actual en la secuencia se actualiza al emitir la lectura o escritura asincrónica, no cuando finaliza la operación de E/S.</span><span class="sxs-lookup"><span data-stu-id="2e157-192">The current position in the stream is updated when you issue the asynchronous read or write, not when the I/O operation completes.</span></span> <span data-ttu-id="2e157-193">Varias solicitudes asincrónicas simultáneas representan el orden de finalización de la solicitud no sabe con seguridad.</span><span class="sxs-lookup"><span data-stu-id="2e157-193">Multiple simultaneous asynchronous requests render the request completion order uncertain.</span></span>  
  
 <span data-ttu-id="2e157-194">Use la <xref:System.IO.Stream.CanWrite%2A> propiedad para determinar si la instancia actual admite escritura.</span><span class="sxs-lookup"><span data-stu-id="2e157-194">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="2e157-195">Si una secuencia está cerrada o se pasa un argumento no válido, se producirán inmediatamente excepciones de `BeginWrite`.</span><span class="sxs-lookup"><span data-stu-id="2e157-195">If a stream is closed or you pass an invalid argument, exceptions are thrown immediately from `BeginWrite`.</span></span> <span data-ttu-id="2e157-196">Errores que se producen durante una solicitud de escritura asincrónica, como un error de disco durante la solicitud de E/S, tienen lugar en el subproceso del grupo y producir excepciones al llamar a `EndWrite`.</span><span class="sxs-lookup"><span data-stu-id="2e157-196">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and throw exceptions when calling `EndWrite`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-197">Attempted an asynchronous write past the end of the stream, or a disk error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-197">Attempted an asynchronous write past the end of the stream, or a disk error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-198">One or more of the arguments is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-198">One or more of the arguments is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-199">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-199">Methods were called after the stream was closed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-200">The current <see langword="Stream" /> implementation does not support the write operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-200">The current <see langword="Stream" /> implementation does not support the write operation.</span>
          </span>
        </exception>
        <altmember cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />
        <altmember cref="P:System.IO.Stream.CanWrite" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public abstract bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.IO.Stream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-201">When overridden in a derived class, gets a value indicating whether the current stream supports reading.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-201">When overridden in a derived class, gets a value indicating whether the current stream supports reading.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e157-202">
            <see langword="true" /> si la secuencia admite lectura; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-202">
              <see langword="true" /> if the stream supports reading; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-203">Si una clase derivada de <xref:System.IO.Stream> no admite la lectura, las llamadas a la <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, y <xref:System.IO.Stream.BeginRead%2A> métodos lanzan una <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="2e157-203">If a class derived from <xref:System.IO.Stream> does not support reading, calls to the <xref:System.IO.Stream.Read%2A>, <xref:System.IO.Stream.ReadByte%2A>, and <xref:System.IO.Stream.BeginRead%2A> methods throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="2e157-204">Si la secuencia está cerrada, esta propiedad devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="2e157-204">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e157-205">El siguiente es un ejemplo del uso de la `CanRead` propiedad.</span><span class="sxs-lookup"><span data-stu-id="2e157-205">The following is an example of using the `CanRead` property.</span></span>  
  
 [!code-cpp[Classic FileStream.CanRead Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CPP/source.cpp#1)]
 [!code-csharp[Classic FileStream.CanRead Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/CS/source.cs#1)]
 [!code-vb[Classic FileStream.CanRead Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileStream.CanRead Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public abstract bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.IO.Stream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-206">When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-206">When overridden in a derived class, gets a value indicating whether the current stream supports seeking.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e157-207">
            <see langword="true" /> si la secuencia admite búsquedas; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-207">
              <see langword="true" /> if the stream supports seeking; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-208">Si una clase derivada de <xref:System.IO.Stream> no admite búsquedas, las llamadas a <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, y <xref:System.IO.Stream.Seek%2A> producir un <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="2e157-208">If a class derived from <xref:System.IO.Stream> does not support seeking, calls to <xref:System.IO.Stream.Length%2A>, <xref:System.IO.Stream.SetLength%2A>, <xref:System.IO.Stream.Position%2A>, and <xref:System.IO.Stream.Seek%2A> throw a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="2e157-209">Si la secuencia está cerrada, esta propiedad devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="2e157-209">If the stream is closed, this property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public virtual bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.IO.Stream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-210">Gets a value that determines whether the current stream can time out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-210">Gets a value that determines whether the current stream can time out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e157-211">Un valor que determina si se puede agotar el tiempo de espera de la secuencia actual.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-211">A value that determines whether the current stream can time out.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-212">El <xref:System.IO.Stream.CanTimeout%2A> propiedad siempre devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="2e157-212">The <xref:System.IO.Stream.CanTimeout%2A> property always returns `false`.</span></span> <span data-ttu-id="2e157-213">Algunas implementaciones de secuencia requieren un comportamiento diferente, como <xref:System.Net.Sockets.NetworkStream>, que expira si se interrumpe o se pierde la conectividad de red.</span><span class="sxs-lookup"><span data-stu-id="2e157-213">Some stream implementations require different behavior, such as <xref:System.Net.Sockets.NetworkStream>, which times out if network connectivity is interrupted or lost.</span></span> <span data-ttu-id="2e157-214">Si está implementando una secuencia que debe ser capaz de tiempo de espera, se debe invalidar esta propiedad para devolver `true`.</span><span class="sxs-lookup"><span data-stu-id="2e157-214">If you are implementing a stream that must be able to time out, this property should be overridden to return `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IO.Stream.ReadTimeout" />
        <altmember cref="P:System.IO.Stream.WriteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public abstract bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.IO.Stream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-215">When overridden in a derived class, gets a value indicating whether the current stream supports writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-215">When overridden in a derived class, gets a value indicating whether the current stream supports writing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e157-216">
            <see langword="true" /> si el flujo admite escritura; en caso contrario, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-216">
              <see langword="true" /> if the stream supports writing; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-217">Si una clase derivada de <xref:System.IO.Stream> no admite la escritura, una llamada a <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, o <xref:System.IO.Stream.WriteByte%2A> produce una <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="2e157-217">If a class derived from <xref:System.IO.Stream> does not support writing, a call to <xref:System.IO.Stream.Write%2A>, <xref:System.IO.Stream.BeginWrite%2A>, or <xref:System.IO.Stream.WriteByte%2A> throws a <xref:System.NotSupportedException>.</span></span>  
  
 <span data-ttu-id="2e157-218">Si la secuencia está cerrada, esta propiedad devuelve `false`.</span><span class="sxs-lookup"><span data-stu-id="2e157-218">If the stream is closed, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e157-219">El siguiente es un ejemplo del uso de la `CanWrite` propiedad.</span><span class="sxs-lookup"><span data-stu-id="2e157-219">The following is an example of using the `CanWrite` property.</span></span>  
  
 [!code-cpp[Classic Stream.CanWrite Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stream.CanWrite Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/CS/source.cs#1)]
 [!code-vb[Classic Stream.CanWrite Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.CanWrite Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="stream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e157-220">Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-220">Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.</span>
          </span>
          <span data-ttu-id="2e157-221">Instead of calling this method, ensure that the stream is properly disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-221">Instead of calling this method, ensure that the stream is properly disposed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-222">Este método llama a <xref:System.IO.Stream.Dispose%2A>, especificando `true` para liberar todos los recursos.</span><span class="sxs-lookup"><span data-stu-id="2e157-222">This method calls <xref:System.IO.Stream.Dispose%2A>, specifying `true` to release all resources.</span></span> <span data-ttu-id="2e157-223">No es necesario llamar específicamente a la <xref:System.IO.Stream.Close%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2e157-223">You do not have to specifically call the <xref:System.IO.Stream.Close%2A> method.</span></span> <span data-ttu-id="2e157-224">En su lugar, asegúrese de que cada <xref:System.IO.Stream> el objeto se ha eliminado correctamente.</span><span class="sxs-lookup"><span data-stu-id="2e157-224">Instead, ensure that every <xref:System.IO.Stream> object is properly disposed.</span></span> <span data-ttu-id="2e157-225">Puede declarar <xref:System.IO.Stream> objetos dentro de un `using` bloque (o `Using` bloquear en Visual Basic) para asegurarse de que la secuencia y todos sus recursos se eliminan ni se puede llamar explícitamente el <xref:System.IO.Stream.Dispose%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2e157-225">You can declare <xref:System.IO.Stream> objects within a `using` block (or `Using` block in Visual Basic) to ensure that the stream and all of its resources are disposed, or you can explicitly call the <xref:System.IO.Stream.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="2e157-226">Vaciar la secuencia no hará que vacíe su correspondiente codificador subyacente a menos que se llame explícitamente a una implementación de <xref:System.IO.Stream.Flush%2A> o `Close`.</span><span class="sxs-lookup"><span data-stu-id="2e157-226">Flushing the stream will not flush its underlying encoder unless you explicitly call an implementation of <xref:System.IO.Stream.Flush%2A> or `Close`.</span></span> <span data-ttu-id="2e157-227">Establecer <xref:System.IO.StreamWriter.AutoFlush%2A> a `true` significa que los datos se vaciarán del búfer en la secuencia, pero el estado del codificador no se vaciará.</span><span class="sxs-lookup"><span data-stu-id="2e157-227">Setting <xref:System.IO.StreamWriter.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="2e157-228">Esto permite al codificador mantener su estado (caracteres parciales) para que sea posible codificar el siguiente bloque de caracteres correctamente.</span><span class="sxs-lookup"><span data-stu-id="2e157-228">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="2e157-229">Este escenario afecta a UTF8 y UTF7 donde ciertos caracteres se pueden codificar solo después de que el codificador reciba el carácter o caracteres adyacentes.</span><span class="sxs-lookup"><span data-stu-id="2e157-229">This scenario affects UTF8 and UTF7 where certain characters can be encoded only after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="2e157-230">Los intentos de manipular la secuencia después de que se ha cerrado la secuencia podrían producir un <xref:System.ObjectDisposedException>.</span><span class="sxs-lookup"><span data-stu-id="2e157-230">Attempts to manipulate the stream after the stream has been closed might throw an <xref:System.ObjectDisposedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="2e157-231">
            <para>En las clases derivadas, no Reemplace la <see cref="M:System.IO.Stream.Close" /> método, en su lugar, coloca todo el <see langword="Stream" /> lógica de limpieza en el <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> (método). Para obtener más información, consulte [implementando un Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-231">
              <para>In derived classes, do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all of the <see langword="Stream" /> cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method. For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-232">Reads the bytes from the current stream and writes them to another stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-232">Reads the bytes from the current stream and writes them to another stream.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyTo(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::IO::Stream ^ destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.IO.Stream -&gt; unit" Usage="stream.CopyTo destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="2e157-233">The stream to which the contents of the current stream will be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-233">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-234">Reads the bytes from the current stream and writes them to another stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-234">Reads the bytes from the current stream and writes them to another stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-235">Copiar comienza en la posición actual en la secuencia actual y no restablece la posición de la secuencia de destino una vez completada la operación de copia.</span><span class="sxs-lookup"><span data-stu-id="2e157-235">Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e157-236">En el ejemplo siguiente, se copia el contenido de un <xref:System.IO.FileStream> a una <xref:System.IO.MemoryStream>.</span><span class="sxs-lookup"><span data-stu-id="2e157-236">The following example copies the contents of a <xref:System.IO.FileStream> to a <xref:System.IO.MemoryStream>.</span></span>  
  
 [!code-csharp[System.IO.Stream.CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.stream.copyto/cs/program.cs#1)]
 [!code-vb[System.IO.Stream.CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.stream.copyto/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-237">
            <paramref name="destination" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-237">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-238">The current stream does not support reading.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-238">The current stream does not support reading.</span>
          </span>
          <span data-ttu-id="2e157-239">-or-  <paramref name="destination" /> does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-239">-or-  <paramref name="destination" /> does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-240">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-240">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-241">An I/O error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-241">An I/O error occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.IO.Stream destination, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.IO.Stream destination, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Stream, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(System::IO::Stream ^ destination, int bufferSize);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.IO.Stream * int -&gt; unit" Usage="stream.CopyTo (destination, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="2e157-242">The stream to which the contents of the current stream will be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-242">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2e157-243">The size of the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-243">The size of the buffer.</span>
          </span>
          <span data-ttu-id="2e157-244">This value must be greater than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-244">This value must be greater than zero.</span>
          </span>
          <span data-ttu-id="2e157-245">The default size is 81920.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-245">The default size is 81920.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-246">Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-246">Reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-247">Copiar comienza en la posición actual en la secuencia actual y no restablece la posición de la secuencia de destino una vez completada la operación de copia.</span><span class="sxs-lookup"><span data-stu-id="2e157-247">Copying begins at the current position in the current stream, and does not reset the position of the destination stream after the copy operation is complete.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-248">
            <paramref name="destination" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-248">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-249">
            <paramref name="bufferSize" /> is negative or zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-249">
              <paramref name="bufferSize" /> is negative or zero.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-250">The current stream does not support reading.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-250">The current stream does not support reading.</span>
          </span>
          <span data-ttu-id="2e157-251">-or-  <paramref name="destination" /> does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-251">-or-  <paramref name="destination" /> does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-252">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-252">Either the current stream or <paramref name="destination" /> were closed before the <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> method was called.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-253">An I/O error occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-253">An I/O error occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-254">Asynchronously reads the bytes from the current stream and writes them to another stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-254">Asynchronously reads the bytes from the current stream and writes them to another stream.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyToAsync (destination As Stream) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination);" />
      <MemberSignature Language="F#" Value="member this.CopyToAsync : System.IO.Stream -&gt; System.Threading.Tasks.Task" Usage="stream.CopyToAsync destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="2e157-255">The stream to which the contents of the current stream will be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-255">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-256">Asynchronously reads the bytes from the current stream and writes them to another stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-256">Asynchronously reads the bytes from the current stream and writes them to another stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-257">A task that represents the asynchronous copy operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-257">A task that represents the asynchronous copy operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-258">El <xref:System.IO.Stream.CopyToAsync%2A> método le permite realizar operaciones de E/S de gran cantidad de recursos sin bloquear el subproceso principal.</span><span class="sxs-lookup"><span data-stu-id="2e157-258">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="2e157-259">Esta consideración de rendimiento es especialmente importante en una aplicación de la [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] o una aplicación de [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] en que una operación de streaming prolongada puede bloquear el subproceso de interfaz de usuario y hacer que parezca que una aplicación ha dejado de responder.</span><span class="sxs-lookup"><span data-stu-id="2e157-259">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2e157-260">Los métodos asincrónicos se usan junto con la `async` y `await` palabras clave en Visual Basic y C#.</span><span class="sxs-lookup"><span data-stu-id="2e157-260">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2e157-261">Inicia la copia en la posición actual en la secuencia actual.</span><span class="sxs-lookup"><span data-stu-id="2e157-261">Copying begins at the current position in the current stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e157-262">En el ejemplo siguiente se muestra cómo utilizar dos <xref:System.IO.FileStream> objetos que se va a copiar los archivos de forma asincrónica desde un directorio a otro.</span><span class="sxs-lookup"><span data-stu-id="2e157-262">The following example demonstrates how to use two <xref:System.IO.FileStream> objects to asynchronously copy the files from one directory to another.</span></span> <span data-ttu-id="2e157-263">La clase <xref:System.IO.FileStream> se deriva de la clase <xref:System.IO.Stream>.</span><span class="sxs-lookup"><span data-stu-id="2e157-263">The <xref:System.IO.FileStream> class derives from the <xref:System.IO.Stream> class.</span></span>  <span data-ttu-id="2e157-264">Tenga en cuenta que la <xref:System.Web.UI.WebControls.Button.Click> controlador de eventos para el <xref:System.Windows.Controls.Button> control se marca con el `async` modificador porque llama a un método asincrónico</span><span class="sxs-lookup"><span data-stu-id="2e157-264">Notice that the <xref:System.Web.UI.WebControls.Button.Click> event handler for the <xref:System.Windows.Controls.Button> control is marked with the `async` modifier because it calls an asynchronous method</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#1](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example.cs#1)]
 [!code-vb[Asynchronous_File_IO_async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-265">
            <paramref name="destination" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-265">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-266">Either the current stream or the destination stream is disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-266">Either the current stream or the destination stream is disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-267">The current stream does not support reading, or the destination stream does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-267">The current stream does not support reading, or the destination stream does not support writing.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyToAsync (destination As Stream, bufferSize As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, int bufferSize);" />
      <MemberSignature Language="F#" Value="member this.CopyToAsync : System.IO.Stream * int -&gt; System.Threading.Tasks.Task" Usage="stream.CopyToAsync (destination, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="2e157-268">The stream to which the contents of the current stream will be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-268">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2e157-269">The size, in bytes, of the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-269">The size, in bytes, of the buffer.</span>
          </span>
          <span data-ttu-id="2e157-270">This value must be greater than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-270">This value must be greater than zero.</span>
          </span>
          <span data-ttu-id="2e157-271">The default size is 81920.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-271">The default size is 81920.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-272">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-272">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-273">A task that represents the asynchronous copy operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-273">A task that represents the asynchronous copy operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-274">El <xref:System.IO.Stream.CopyToAsync%2A> método le permite realizar operaciones de E/S de gran cantidad de recursos sin bloquear el subproceso principal.</span><span class="sxs-lookup"><span data-stu-id="2e157-274">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="2e157-275">Esta consideración de rendimiento es especialmente importante en una aplicación de la [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] o una aplicación de [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] en que una operación de streaming prolongada puede bloquear el subproceso de interfaz de usuario y hacer que parezca que una aplicación ha dejado de responder.</span><span class="sxs-lookup"><span data-stu-id="2e157-275">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2e157-276">Los métodos asincrónicos se usan junto con la `async` y `await` palabras clave en Visual Basic y C#.</span><span class="sxs-lookup"><span data-stu-id="2e157-276">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2e157-277">Inicia la copia en la posición actual en la secuencia actual.</span><span class="sxs-lookup"><span data-stu-id="2e157-277">Copying begins at the current position in the current stream.</span></span>  
  
 <span data-ttu-id="2e157-278">Para obtener un ejemplo de copiar datos entre dos secuencias, vea el <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="2e157-278">For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-279">
            <paramref name="destination" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-279">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-280">
            <paramref name="buffersize" /> is negative or zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-280">
              <paramref name="buffersize" /> is negative or zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-281">Either the current stream or the destination stream is disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-281">Either the current stream or the destination stream is disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-282">The current stream does not support reading, or the destination stream does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-282">The current stream does not support reading, or the destination stream does not support writing.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.CopyToAsync : System.IO.Stream * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="stream.CopyToAsync (destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyToAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task CopyToAsync (System.IO.Stream destination, int bufferSize, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task CopyToAsync(class System.IO.Stream destination, int32 bufferSize, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ CopyToAsync(System::IO::Stream ^ destination, int bufferSize, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member CopyToAsync : System.IO.Stream * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.CopyToAsync : System.IO.Stream * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="stream.CopyToAsync (destination, bufferSize, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.IO.Stream" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="destination">
          <span data-ttu-id="2e157-283">The stream to which the contents of the current stream will be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-283">The stream to which the contents of the current stream will be copied.</span>
          </span>
        </param>
        <param name="bufferSize">
          <span data-ttu-id="2e157-284">The size, in bytes, of the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-284">The size, in bytes, of the buffer.</span>
          </span>
          <span data-ttu-id="2e157-285">This value must be greater than zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-285">This value must be greater than zero.</span>
          </span>
          <span data-ttu-id="2e157-286">The default size is 81920.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-286">The default size is 81920.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2e157-287">The token to monitor for cancellation requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-287">The token to monitor for cancellation requests.</span>
          </span>
          <span data-ttu-id="2e157-288">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-288">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-289">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-289">Asynchronously reads the bytes from the current stream and writes them to another stream, using a specified buffer size and cancellation token.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-290">A task that represents the asynchronous copy operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-290">A task that represents the asynchronous copy operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-291">El <xref:System.IO.Stream.CopyToAsync%2A> método le permite realizar operaciones de E/S de gran cantidad de recursos sin bloquear el subproceso principal.</span><span class="sxs-lookup"><span data-stu-id="2e157-291">The <xref:System.IO.Stream.CopyToAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="2e157-292">Esta consideración de rendimiento es especialmente importante en una aplicación de la [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] o una aplicación de [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] en que una operación de streaming prolongada puede bloquear el subproceso de interfaz de usuario y hacer que parezca que una aplicación ha dejado de responder.</span><span class="sxs-lookup"><span data-stu-id="2e157-292">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2e157-293">Los métodos asincrónicos se usan junto con la `async` y `await` palabras clave en Visual Basic y C#.</span><span class="sxs-lookup"><span data-stu-id="2e157-293">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2e157-294">Si la operación se cancela antes de que finalice, la tarea devuelta contiene la <xref:System.Threading.Tasks.TaskStatus.Canceled> valor para el <xref:System.Threading.Tasks.Task.Status%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="2e157-294">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="2e157-295">Inicia la copia en la posición actual en la secuencia actual.</span><span class="sxs-lookup"><span data-stu-id="2e157-295">Copying begins at the current position in the current stream.</span></span>  
  
 <span data-ttu-id="2e157-296">Para obtener un ejemplo de copiar datos entre dos secuencias, vea el <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="2e157-296">For an example of copying between two streams, see the <xref:System.IO.Stream.CopyToAsync%28System.IO.Stream%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-297">
            <paramref name="destination" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-297">
              <paramref name="destination" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-298">
            <paramref name="buffersize" /> is negative or zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-298">
              <paramref name="buffersize" /> is negative or zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-299">Either the current stream or the destination stream is disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-299">Either the current stream or the destination stream is disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-300">The current stream does not support reading, or the destination stream does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-300">The current stream does not support reading, or the destination stream does not support writing.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWaitHandle">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.WaitHandle CreateWaitHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.WaitHandle CreateWaitHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.CreateWaitHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateWaitHandle () As WaitHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::WaitHandle ^ CreateWaitHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateWaitHandle : unit -&gt; System.Threading.WaitHandle&#xA;override this.CreateWaitHandle : unit -&gt; System.Threading.WaitHandle" Usage="stream.CreateWaitHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CreateWaitHandle will be removed eventually.  Please use "new ManualResetEvent(false)" instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e157-301">Allocates a <see cref="T:System.Threading.WaitHandle" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-301">Allocates a <see cref="T:System.Threading.WaitHandle" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-302">A reference to the allocated <see langword="WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-302">A reference to the allocated <see langword="WaitHandle" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-303">Cuando se llama por primera vez, el método actual crea un `WaitHandle` de objeto y lo devuelve.</span><span class="sxs-lookup"><span data-stu-id="2e157-303">When called for the first time, the current method creates a `WaitHandle` object and returns it.</span></span> <span data-ttu-id="2e157-304">En las llamadas posteriores, `CreateWaitHandle` devuelve una referencia a un nuevo identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="2e157-304">On subsequent calls, `CreateWaitHandle` returns a reference to a new wait handle.</span></span>  
  
 <span data-ttu-id="2e157-305">Utilice este método si se implementan los métodos asincrónicos y se requiere una forma de bloqueo <xref:System.IO.Stream.EndRead%2A> o <xref:System.IO.Stream.EndWrite%2A> hasta que se complete la operación asincrónica.</span><span class="sxs-lookup"><span data-stu-id="2e157-305">Use this method if you implement the asynchronous methods and require a way of blocking in <xref:System.IO.Stream.EndRead%2A> or <xref:System.IO.Stream.EndWrite%2A> until the asynchronous operation is complete.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-306">Releases all resources used by the <see cref="T:System.IO.Stream" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-306">Releases all resources used by the <see cref="T:System.IO.Stream" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="stream.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e157-307">Releases all resources used by the <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-307">Releases all resources used by the <see cref="T:System.IO.Stream" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-308">Este método desecha la secuencia escribiendo los cambios en el almacén de copia de seguridad y cerrando la secuencia para liberar recursos.</span><span class="sxs-lookup"><span data-stu-id="2e157-308">This method disposes the stream, by writing any changes to the backing store and closing the stream to release resources.</span></span>  
  
 <span data-ttu-id="2e157-309">Al llamar a `Dispose` permite que los recursos utilizados por el <xref:System.IO.Stream> se reasignen para otros fines.</span><span class="sxs-lookup"><span data-stu-id="2e157-309">Calling `Dispose` allows the resources used by the <xref:System.IO.Stream> to be reallocated for other purposes.</span></span> <span data-ttu-id="2e157-310">Para obtener más información acerca de `Dispose`, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md).</span><span class="sxs-lookup"><span data-stu-id="2e157-310">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="2e157-311">
            <para>Coloque toda la lógica de limpieza para el objeto de secuencia en <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />. No Reemplace <see cref="M:System.IO.Stream.Close" />.  Tenga en cuenta que, debido a los requisitos de compatibilidad con versiones anteriores, implementación de este método se diferencia de las instrucciones recomendadas para el patrón de Dispose.  Este método llama a <see cref="M:System.IO.Stream.Close" />, que llama a <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-311">
              <para>Place all cleanup logic for your stream object in <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />. Do not override <see cref="M:System.IO.Stream.Close" />.  Note that because of backward compatibility requirements, this method's implementation differs from the recommended guidance for the Dispose pattern.  This method calls <see cref="M:System.IO.Stream.Close" />, which then calls <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="stream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="2e157-312">
            <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-312">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-313">Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-313">Releases the unmanaged resources used by the <see cref="T:System.IO.Stream" /> and optionally releases the managed resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-314">Debe liberar todos los recursos mediante la especificación de `true` para `disposing`.</span><span class="sxs-lookup"><span data-stu-id="2e157-314">You should release all resources by specifying `true` for `disposing`.</span></span> <span data-ttu-id="2e157-315">Cuando `disposing` es `true`, también puede asegurar el flujo de datos se vacían al búfer subyacente y tener acceso a otros objetos susceptibles de finalización.</span><span class="sxs-lookup"><span data-stu-id="2e157-315">When `disposing` is `true`, the stream can also ensure data is flushed to the underlying buffer, and access other finalizable objects.</span></span>  <span data-ttu-id="2e157-316">Esto puede no ser posible cuando se llama desde un finalizador debido a la falta de ordenación entre los finalizadores.</span><span class="sxs-lookup"><span data-stu-id="2e157-316">This may not be possible when called from a finalizer due a lack of ordering among finalizers.</span></span>  
  
 <span data-ttu-id="2e157-317">Si la secuencia está usando un identificador del sistema operativo para comunicarse con su origen, considere la posibilidad de utilizar una subclase de <xref:System.Runtime.InteropServices.SafeHandle> para este propósito.</span><span class="sxs-lookup"><span data-stu-id="2e157-317">If your stream is using an operating system handle to communicate with its source, consider using a subclass of <xref:System.Runtime.InteropServices.SafeHandle> for this purpose.</span></span>  
  
 <span data-ttu-id="2e157-318">Se llama a este método público <xref:System.ComponentModel.Component.Dispose%2A> método y <xref:System.Object.Finalize%2A> método.</span><span class="sxs-lookup"><span data-stu-id="2e157-318">This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="2e157-319"><xref:System.ComponentModel.Component.Dispose%2A> se invoca el protegido <xref:System.IO.Stream.Dispose%2A> método con el `disposing` parámetro establecido en `true`.</span><span class="sxs-lookup"><span data-stu-id="2e157-319"><xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.Stream.Dispose%2A> method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="2e157-320"><xref:System.Object.Finalize%2A> invoca <xref:System.IO.Stream.Dispose%2A> con `disposing` establecido en `false`.</span><span class="sxs-lookup"><span data-stu-id="2e157-320"><xref:System.Object.Finalize%2A> invokes <xref:System.IO.Stream.Dispose%2A> with `disposing` set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="2e157-321">
            <para>En las clases derivadas, no Reemplace la <see cref="M:System.IO.Stream.Close" /> método, en su lugar, coloque toda la lógica de limpieza de secuencia en el <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> método.  <see cref="M:System.ComponentModel.Component.Dispose" /> puede recibir varias llamadas de otros objetos. Al invalidar <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see cref="M:System.ComponentModel.Component.Dispose" />. Para obtener más información sobre cómo implementar <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, vea [implementar un Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Para obtener más información acerca de <see cref="M:System.ComponentModel.Component.Dispose" /> y <see cref="M:System.Object.Finalize" />, consulte [limpieza seguridad Resources](~/docs/standard/garbage-collection/unmanaged.md) no administrado.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-321">
              <para>In derived classes, do not override the <see cref="M:System.IO.Stream.Close" /> method, instead, put all of the Stream cleanup logic in the <see cref="M:System.IO.Stream.Dispose(System.Boolean)" /> method.  <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects. When overriding <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />. For more information about how to implement <see cref="M:System.IO.Stream.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public virtual int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndRead : IAsyncResult -&gt; int&#xA;override this.EndRead : IAsyncResult -&gt; int" Usage="stream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="2e157-322">The reference to the pending asynchronous request to finish.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-322">The reference to the pending asynchronous request to finish.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-323">Waits for the pending asynchronous read to complete.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-323">Waits for the pending asynchronous read to complete.</span>
          </span>
          <span data-ttu-id="2e157-324">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-324">(Consider using <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-325">The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-325">The number of bytes read from the stream, between zero (0) and the number of bytes you requested.</span>
          </span>
          <span data-ttu-id="2e157-326">Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-326">Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-327">En .NET Framework 4 y versiones anteriores, es necesario usar métodos como <xref:System.IO.Stream.BeginRead%2A> y <xref:System.IO.Stream.EndRead%2A> para implementar operaciones de E/S asincrónicas.</span><span class="sxs-lookup"><span data-stu-id="2e157-327">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="2e157-328">Estos métodos siguen estando disponibles en la [!INCLUDE[net_v45](~/includes/net-v45-md.md)] para admitir código heredado; sin embargo, los nuevos métodos asincrónicos, como <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, y <xref:System.IO.Stream.FlushAsync%2A>, ayuda implementar operaciones asincrónicas de E/S más fácilmente.</span><span class="sxs-lookup"><span data-stu-id="2e157-328">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="2e157-329">Llame a `EndRead` para determinar el número de bytes leído de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-329">Call `EndRead` to determine how many bytes were read from the stream.</span></span>  
  
 <span data-ttu-id="2e157-330">`EndRead` se puede llamar una vez en cada <xref:System.IAsyncResult> de <xref:System.IO.Stream.BeginRead%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e157-330">`EndRead` can be called once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginRead%2A>.</span></span>  
  
 <span data-ttu-id="2e157-331">Este método se bloquea hasta que se haya completado la operación de E/S.</span><span class="sxs-lookup"><span data-stu-id="2e157-331">This method blocks until the I/O operation has completed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-332">
            <paramref name="asyncResult" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-332">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-333">A handle to the pending read operation is not available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-333">A handle to the pending read operation is not available.</span>
          </span>
          <span data-ttu-id="2e157-334">-or-  The pending operation does not support reading.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-334">-or-  The pending operation does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e157-335">
            <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-335">
              <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-336">The stream is closed or an internal error has occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-336">The stream is closed or an internal error has occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public virtual void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndWrite : IAsyncResult -&gt; unit&#xA;override this.EndWrite : IAsyncResult -&gt; unit" Usage="stream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <span data-ttu-id="2e157-337">A reference to the outstanding asynchronous I/O request.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-337">A reference to the outstanding asynchronous I/O request.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-338">Ends an asynchronous write operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-338">Ends an asynchronous write operation.</span>
          </span>
          <span data-ttu-id="2e157-339">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-339">(Consider using <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> instead.)</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-340">En .NET Framework 4 y versiones anteriores, es necesario usar métodos como <xref:System.IO.Stream.BeginWrite%2A> y <xref:System.IO.Stream.EndWrite%2A> para implementar operaciones de E/S asincrónicas.</span><span class="sxs-lookup"><span data-stu-id="2e157-340">In the .NET Framework 4 and earlier versions, you have to use methods such as <xref:System.IO.Stream.BeginWrite%2A> and <xref:System.IO.Stream.EndWrite%2A> to implement asynchronous I/O operations.</span></span> <span data-ttu-id="2e157-341">Estos métodos siguen estando disponibles en la [!INCLUDE[net_v45](~/includes/net-v45-md.md)] para admitir código heredado; sin embargo, los nuevos métodos asincrónicos, como <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, y <xref:System.IO.Stream.FlushAsync%2A>, ayuda implementar operaciones asincrónicas de E/S más fácilmente.</span><span class="sxs-lookup"><span data-stu-id="2e157-341">These methods are still available in the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] to support legacy code; however, the new async methods, such as <xref:System.IO.Stream.ReadAsync%2A>, <xref:System.IO.Stream.WriteAsync%2A>, <xref:System.IO.Stream.CopyToAsync%2A>, and <xref:System.IO.Stream.FlushAsync%2A>, help you implement asynchronous I/O operations more easily.</span></span>  
  
 <span data-ttu-id="2e157-342">`EndWrite` se debe llamar exactamente una vez en cada <xref:System.IAsyncResult> de <xref:System.IO.Stream.BeginWrite%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e157-342">`EndWrite` must be called exactly once on every <xref:System.IAsyncResult> from <xref:System.IO.Stream.BeginWrite%2A>.</span></span>  
  
 <span data-ttu-id="2e157-343">Este método se bloquea hasta que se haya completado la operación de E/S.</span><span class="sxs-lookup"><span data-stu-id="2e157-343">This method blocks until the I/O operation has completed.</span></span> <span data-ttu-id="2e157-344">Errores que se producen durante una solicitud de escritura asincrónica, como un error de disco durante la solicitud de E/S, tienen lugar en el subproceso del grupo y se hacen visibles en una llamada a `EndWrite`.</span><span class="sxs-lookup"><span data-stu-id="2e157-344">Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, occur on the thread pool thread and become visible upon a call to `EndWrite`.</span></span> <span data-ttu-id="2e157-345">Las excepciones producidas por el subproceso del grupo no serán visibles cuando se llama a `EndWrite`.</span><span class="sxs-lookup"><span data-stu-id="2e157-345">Exceptions thrown by the thread pool thread will not be visible when calling `EndWrite`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-346">
            <paramref name="asyncResult" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-346">
              <paramref name="asyncResult" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-347">A handle to the pending write operation is not available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-347">A handle to the pending write operation is not available.</span>
          </span>
          <span data-ttu-id="2e157-348">-or-  The pending operation does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-348">-or-  The pending operation does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e157-349">
            <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-349">
              <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-350">The stream is closed or an internal error has occurred.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-350">The stream is closed or an internal error has occurred.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit" Usage="stream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e157-351">When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-351">When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-352">Invalidar `Flush` en secuencias que implementan un búfer.</span><span class="sxs-lookup"><span data-stu-id="2e157-352">Override `Flush` on streams that implement a buffer.</span></span> <span data-ttu-id="2e157-353">Utilice este método para mover toda la información de un búfer subyacente a su destino, borrar el búfer, o ambos.</span><span class="sxs-lookup"><span data-stu-id="2e157-353">Use this method to move any information from an underlying buffer to its destination, clear the buffer, or both.</span></span> <span data-ttu-id="2e157-354">Según el estado del objeto, es posible que deba modificar la posición actual dentro de la secuencia (por ejemplo, si la secuencia subyacente admite operaciones de búsqueda).</span><span class="sxs-lookup"><span data-stu-id="2e157-354">Depending upon the state of the object, you might have to modify the current position within the stream (for example, if the underlying stream supports seeking).</span></span> <span data-ttu-id="2e157-355">Para obtener más información, consulte <xref:System.IO.Stream.CanSeek%2A>.</span><span class="sxs-lookup"><span data-stu-id="2e157-355">For additional information see <xref:System.IO.Stream.CanSeek%2A>.</span></span>  
  
 <span data-ttu-id="2e157-356">Cuando se usa el <xref:System.IO.StreamWriter> o <xref:System.IO.BinaryWriter> de clases, no se vuelca la base de <xref:System.IO.Stream> objeto.</span><span class="sxs-lookup"><span data-stu-id="2e157-356">When using the <xref:System.IO.StreamWriter> or <xref:System.IO.BinaryWriter> class, do not flush the base <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="2e157-357">En su lugar, utilice la clase <xref:System.IO.Stream.Flush%2A> o <xref:System.IO.Stream.Close%2A> método, que garantiza que los datos se vacían primero en la secuencia subyacente y, a continuación, se escribe en el archivo.</span><span class="sxs-lookup"><span data-stu-id="2e157-357">Instead, use the class's <xref:System.IO.Stream.Flush%2A> or <xref:System.IO.Stream.Close%2A> method, which makes sure that the data is flushed to the underlying stream first and then written to the file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-358">An I/O error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-358">An I/O error occurs.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FlushAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-359">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-359">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : unit -&gt; System.Threading.Tasks.Task" Usage="stream.FlushAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e157-360">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-360">Asynchronously clears all buffers for this stream and causes any buffered data to be written to the underlying device.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-361">A task that represents the asynchronous flush operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-361">A task that represents the asynchronous flush operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-362">Si una clase derivada, como <xref:System.IO.Compression.DeflateStream> o <xref:System.IO.Compression.GZipStream>, no se vuelca el búfer en su implementación de la <xref:System.IO.Stream.Flush%2A> método, el <xref:System.IO.Stream.FlushAsync%2A> método no vacía el búfer.</span><span class="sxs-lookup"><span data-stu-id="2e157-362">If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-363">The stream has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-363">The stream has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="stream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">
          <span data-ttu-id="2e157-364">The token to monitor for cancellation requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-364">The token to monitor for cancellation requests.</span>
          </span>
          <span data-ttu-id="2e157-365">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-365">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-366">Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-366">Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-367">A task that represents the asynchronous flush operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-367">A task that represents the asynchronous flush operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-368">Si la operación se cancela antes de que finalice, la tarea devuelta contiene la <xref:System.Threading.Tasks.TaskStatus.Canceled> valor para el <xref:System.Threading.Tasks.Task.Status%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="2e157-368">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="2e157-369">Si una clase derivada, como <xref:System.IO.Compression.DeflateStream> o <xref:System.IO.Compression.GZipStream>, no se vuelca el búfer en su implementación de la <xref:System.IO.Stream.Flush%2A> método, el <xref:System.IO.Stream.FlushAsync%2A> método no vacía el búfer.</span><span class="sxs-lookup"><span data-stu-id="2e157-369">If a derived class, such as <xref:System.IO.Compression.DeflateStream> or <xref:System.IO.Compression.GZipStream>, does not flush the buffer in its implementation of the <xref:System.IO.Stream.Flush%2A> method, the <xref:System.IO.Stream.FlushAsync%2A> method will not flush the buffer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-370">The stream has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-370">The stream has been disposed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public abstract long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.Length" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.IO.Stream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-371">When overridden in a derived class, gets the length in bytes of the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-371">When overridden in a derived class, gets the length in bytes of the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e157-372">Un valor Long que representa la longitud de la secuencia en bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-372">A long value representing the length of the stream in bytes.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-373">A class derived from <see langword="Stream" /> does not support seeking.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-373">A class derived from <see langword="Stream" /> does not support seeking.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-374">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-374">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.Stream Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.Stream Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.Stream.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As Stream " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::Stream ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.IO.Stream" Usage="System.IO.Stream.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-375">A <see langword="Stream" /> with no backing store.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-375">A <see langword="Stream" /> with no backing store.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-376">Use `Null` redirigir los resultados en una secuencia que no consumirá recursos del sistema operativo.</span><span class="sxs-lookup"><span data-stu-id="2e157-376">Use `Null` to redirect output to a stream that will not consume any operating system resources.</span></span> <span data-ttu-id="2e157-377">Cuando los métodos de `Stream` que proporcionan la escritura se invocan en `Null`, simplemente se devuelve la llamada y no se escriben datos.</span><span class="sxs-lookup"><span data-stu-id="2e157-377">When the methods of `Stream` that provide writing are invoked on `Null`, the call simply returns, and no data is written.</span></span> <span data-ttu-id="2e157-378">`Null` También implementa un `Read` método que devuelve cero sin leer datos.</span><span class="sxs-lookup"><span data-stu-id="2e157-378">`Null` also implements a `Read` method that returns zero without reading data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectInvariant">
      <MemberSignature Language="C#" Value="protected virtual void ObjectInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ObjectInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ObjectInvariant" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ObjectInvariant ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ObjectInvariant();" />
      <MemberSignature Language="F#" Value="abstract member ObjectInvariant : unit -&gt; unit&#xA;override this.ObjectInvariant : unit -&gt; unit" Usage="stream.ObjectInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Do not call or override this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e157-379">Provides support for a <see cref="T:System.Diagnostics.Contracts.Contract" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-379">Provides support for a <see cref="T:System.Diagnostics.Contracts.Contract" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public abstract long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.Position" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.IO.Stream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-380">When overridden in a derived class, gets or sets the position within the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-380">When overridden in a derived class, gets or sets the position within the current stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e157-381">Posición actual dentro de la secuencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-381">The current position within the stream.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-382">La secuencia debe admitir operaciones de búsqueda obtener o establecer la posición.</span><span class="sxs-lookup"><span data-stu-id="2e157-382">The stream must support seeking to get or set the position.</span></span> <span data-ttu-id="2e157-383">Use la <xref:System.IO.Stream.CanSeek%2A> propiedad para determinar si la secuencia admite búsquedas.</span><span class="sxs-lookup"><span data-stu-id="2e157-383">Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the stream supports seeking.</span></span>  
  
 <span data-ttu-id="2e157-384">Se admite la búsqueda en cualquier ubicación más allá de la longitud de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-384">Seeking to any location beyond the length of the stream is supported.</span></span>  
  
 <span data-ttu-id="2e157-385">El `Position` propiedad no mantener un seguimiento del número de bytes de la secuencia que se han consumido, omitido, o ambos.</span><span class="sxs-lookup"><span data-stu-id="2e157-385">The `Position` property does not keep track of the number of bytes from the stream that have been consumed, skipped, or both.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-386">An I/O error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-386">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-387">The stream does not support seeking.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-387">The stream does not support seeking.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-388">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-388">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public virtual int Read (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Read(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Read (buffer As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Read(Span&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member Read : Span&lt;byte&gt; -&gt; int&#xA;override this.Read : Span&lt;byte&gt; -&gt; int" Usage="stream.Read buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Read([out] unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member Read : byte[] * int * int -&gt; int" Usage="stream.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2e157-389">An array of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-389">An array of bytes.</span>
          </span>
          <span data-ttu-id="2e157-390">When this method returns, the buffer contains the specified byte array with the values between <c>offset</c> and (<c>offset</c> + <c>count</c> - 1) replaced by the bytes read from the current source.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-390">When this method returns, the buffer contains the specified byte array with the values between <c>offset</c> and (<c>offset</c> + <c>count</c> - 1) replaced by the bytes read from the current source.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2e157-391">The zero-based byte offset in <c>buffer</c> at which to begin storing the data read from the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-391">The zero-based byte offset in <c>buffer</c> at which to begin storing the data read from the current stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2e157-392">The maximum number of bytes to be read from the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-392">The maximum number of bytes to be read from the current stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-393">When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-393">When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-394">The total number of bytes read into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-394">The total number of bytes read into the buffer.</span>
          </span>
          <span data-ttu-id="2e157-395">This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-395">This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-396">Use la <xref:System.IO.Stream.CanRead%2A> propiedad para determinar si la instancia actual admite operaciones de lectura.</span><span class="sxs-lookup"><span data-stu-id="2e157-396">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span> <span data-ttu-id="2e157-397">Use la <xref:System.IO.Stream.ReadAsync%2A> método para leer de forma asincrónica en la secuencia actual.</span><span class="sxs-lookup"><span data-stu-id="2e157-397">Use the <xref:System.IO.Stream.ReadAsync%2A> method to read asynchronously from the current stream.</span></span>  
  
 <span data-ttu-id="2e157-398">Las implementaciones de este método leen un máximo de `count` secuencia de bytes a partir de la actual y almacenarlas en `buffer` empezando por `offset`.</span><span class="sxs-lookup"><span data-stu-id="2e157-398">Implementations of this method read a maximum of `count` bytes from the current stream and store them in `buffer` beginning at `offset`.</span></span> <span data-ttu-id="2e157-399">Avanza la posición actual dentro de la secuencia por el número de bytes leídos; Sin embargo, si se produce una excepción, no cambia la posición actual dentro de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-399">The current position within the stream is advanced by the number of bytes read; however, if an exception occurs, the current position within the stream remains unchanged.</span></span> <span data-ttu-id="2e157-400">Las implementaciones devuelven el número de bytes leídos.</span><span class="sxs-lookup"><span data-stu-id="2e157-400">Implementations return the number of bytes read.</span></span> <span data-ttu-id="2e157-401">La implementación se bloqueará hasta que pueda leerse al menos un byte de datos, en caso de que no hay datos disponibles.</span><span class="sxs-lookup"><span data-stu-id="2e157-401">The implementation will block until at least one byte of data can be read, in the event that no data is available.</span></span> <span data-ttu-id="2e157-402"><xref:System.IO.Stream.Read%2A> Devuelve 0 sólo cuando no hay más datos en la secuencia y se espera que no hay más (por ejemplo, un socket cerrado o el final del archivo).</span><span class="sxs-lookup"><span data-stu-id="2e157-402"><xref:System.IO.Stream.Read%2A> returns 0 only when there is no more data in the stream and no more is expected (such as a closed socket or end of file).</span></span> <span data-ttu-id="2e157-403">Una implementación es gratuita devolver menos bytes de los solicitados incluso si no se ha alcanzado el final de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-403">An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</span></span>  
  
 <span data-ttu-id="2e157-404">Utilice <xref:System.IO.BinaryReader> para leer los tipos de datos primitivos.</span><span class="sxs-lookup"><span data-stu-id="2e157-404">Use <xref:System.IO.BinaryReader> for reading primitive data types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e157-405">En el ejemplo siguiente se muestra cómo utilizar <xref:System.IO.Stream.Read%2A> para leer un bloque de datos.</span><span class="sxs-lookup"><span data-stu-id="2e157-405">The following example shows how to use <xref:System.IO.Stream.Read%2A> to read a block of data.</span></span>  
  
 [!code-cpp[Classic Stream.Read Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Stream.Read Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Stream.Read Example/CS/source.cs#1)]
 [!code-vb[Classic Stream.Read Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Stream.Read Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-406">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-406">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-407">
            <paramref name="buffer" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-407">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-408">
            <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-408">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-409">An I/O error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-409">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-410">The stream does not support reading.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-410">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-411">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-411">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-412">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-412">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;int&gt; ReadAsync (Memory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;int32&gt; ReadAsync(valuetype System.Memory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : Memory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;&#xA;override this.ReadAsync : Memory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;int&gt;" Usage="stream.ReadAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Memory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadAsync (buffer As Byte(), offset As Integer, count As Integer) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="member this.ReadAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="stream.ReadAsync (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2e157-413">The buffer to write the data into.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-413">The buffer to write the data into.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2e157-414">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-414">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2e157-415">The maximum number of bytes to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-415">The maximum number of bytes to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-416">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-416">Asynchronously reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-417">A task that represents the asynchronous read operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-417">A task that represents the asynchronous read operation.</span>
          </span>
          <span data-ttu-id="2e157-418">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-418">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span>
          </span>
          <span data-ttu-id="2e157-419">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-419">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-420">El <xref:System.IO.Stream.ReadAsync%2A> método le permite realizar operaciones de E/S de gran cantidad de recursos sin bloquear el subproceso principal.</span><span class="sxs-lookup"><span data-stu-id="2e157-420">The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="2e157-421">Esta consideración de rendimiento es especialmente importante en una aplicación de la [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] o una aplicación de [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] en que una operación de streaming prolongada puede bloquear el subproceso de interfaz de usuario y hacer que parezca que una aplicación ha dejado de responder.</span><span class="sxs-lookup"><span data-stu-id="2e157-421">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2e157-422">Los métodos asincrónicos se usan junto con la `async` y `await` palabras clave en Visual Basic y C#.</span><span class="sxs-lookup"><span data-stu-id="2e157-422">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2e157-423">Use la <xref:System.IO.Stream.CanRead%2A> propiedad para determinar si la instancia actual admite operaciones de lectura.</span><span class="sxs-lookup"><span data-stu-id="2e157-423">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e157-424">En el ejemplo siguiente se muestra cómo se leen desde un archivo de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="2e157-424">The following example shows how to read from a file asynchronously.</span></span> <span data-ttu-id="2e157-425">El ejemplo se utiliza la <xref:System.IO.FileStream> (clase), que se deriva de la <xref:System.IO.Stream> clase.</span><span class="sxs-lookup"><span data-stu-id="2e157-425">The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#4](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example4.cs#4)]
 [!code-vb[Asynchronous_File_IO_async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-426">
            <paramref name="buffer" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-426">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-427">
            <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-427">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-428">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-428">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-429">The stream does not support reading.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-429">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-430">The stream has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-430">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e157-431">The stream is currently in use by a previous read operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-431">The stream is currently in use by a previous read operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;int&gt; ^ ReadAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.ReadAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="stream.ReadAsync (buffer, offset, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2e157-432">The buffer to write the data into.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-432">The buffer to write the data into.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2e157-433">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-433">The byte offset in <c>buffer</c> at which to begin writing data from the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2e157-434">The maximum number of bytes to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-434">The maximum number of bytes to read.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2e157-435">The token to monitor for cancellation requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-435">The token to monitor for cancellation requests.</span>
          </span>
          <span data-ttu-id="2e157-436">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-436">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-437">Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-437">Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-438">A task that represents the asynchronous read operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-438">A task that represents the asynchronous read operation.</span>
          </span>
          <span data-ttu-id="2e157-439">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-439">The value of the <paramref name="TResult" /> parameter contains the total number of bytes read into the buffer.</span>
          </span>
          <span data-ttu-id="2e157-440">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-440">The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-441">El <xref:System.IO.Stream.ReadAsync%2A> método le permite realizar operaciones de E/S de gran cantidad de recursos sin bloquear el subproceso principal.</span><span class="sxs-lookup"><span data-stu-id="2e157-441">The <xref:System.IO.Stream.ReadAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="2e157-442">Esta consideración de rendimiento es especialmente importante en una aplicación de la [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] o una aplicación de [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] en que una operación de streaming prolongada puede bloquear el subproceso de interfaz de usuario y hacer que parezca que una aplicación ha dejado de responder.</span><span class="sxs-lookup"><span data-stu-id="2e157-442">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2e157-443">Los métodos asincrónicos se usan junto con la `async` y `await` palabras clave en Visual Basic y C#.</span><span class="sxs-lookup"><span data-stu-id="2e157-443">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2e157-444">Use la <xref:System.IO.Stream.CanRead%2A> propiedad para determinar si la instancia actual admite operaciones de lectura.</span><span class="sxs-lookup"><span data-stu-id="2e157-444">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="2e157-445">Si la operación se cancela antes de que finalice, la tarea devuelta contiene la <xref:System.Threading.Tasks.TaskStatus.Canceled> valor para el <xref:System.Threading.Tasks.Task.Status%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="2e157-445">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="2e157-446">Para obtener un ejemplo, vea el <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="2e157-446">For an example, see the <xref:System.IO.Stream.ReadAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-447">
            <paramref name="buffer" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-447">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-448">
            <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-448">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-449">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-449">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-450">The stream does not support reading.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-450">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-451">The stream has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-451">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e157-452">The stream is currently in use by a previous read operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-452">The stream is currently in use by a previous read operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public virtual int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.ReadByte" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadByte () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ReadByte();" />
      <MemberSignature Language="F#" Value="abstract member ReadByte : unit -&gt; int&#xA;override this.ReadByte : unit -&gt; int" Usage="stream.ReadByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2e157-453">Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-453">Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-454">The unsigned byte cast to an <see langword="Int32" />, or -1 if at the end of the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-454">The unsigned byte cast to an <see langword="Int32" />, or -1 if at the end of the stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-455">Use la <xref:System.IO.Stream.CanRead%2A> propiedad para determinar si la instancia actual admite operaciones de lectura.</span><span class="sxs-lookup"><span data-stu-id="2e157-455">Use the <xref:System.IO.Stream.CanRead%2A> property to determine whether the current instance supports reading.</span></span>  
  
 <span data-ttu-id="2e157-456">Los intentos de manipular la secuencia después de que se ha cerrado la secuencia podrían producir un <xref:System.ObjectDisposedException>.</span><span class="sxs-lookup"><span data-stu-id="2e157-456">Attempts to manipulate the stream after the stream has been closed could throw an <xref:System.ObjectDisposedException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-457">The stream does not support reading.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-457">The stream does not support reading.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-458">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-458">Methods were called after the stream was closed.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2e157-459">
            <para>La implementación predeterminada de <see langword="Stream" /> crea una nueva matriz de un solo byte y, a continuación, se llama <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />. Aunque esto es formalmente correcto, no es eficaz. Cualquier secuencia que posea un búfer interno debe reemplazar este método y proporcionar una versión mucho más eficaz que lea el búfer directamente, evitando la asignación adicional de matrices en cada llamada.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-459">
              <para>The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" />. While this is formally correct, it is inefficient. Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public virtual int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.IO.Stream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-460">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-460">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e157-461">Valor, en milisegundos, que determina durante cuánto tiempo la secuencia intentará realizar operaciones de lectura antes de que se agote el tiempo de espera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-461">A value, in miliseconds, that determines how long the stream will attempt to read before timing out.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e157-462">The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-462">The <see cref="P:System.IO.Stream.ReadTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2e157-463">
            <para>El <see cref="P:System.IO.Stream.ReadTimeout" /> propiedad se debe invalidar para proporcionar el comportamiento adecuado de la secuencia. Si la secuencia no es compatible con el tiempo de espera, esta propiedad debe producir una <see cref="T:System.InvalidOperationException" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-463">
              <para>The <see cref="P:System.IO.Stream.ReadTimeout" /> property should be overridden to provide the appropriate behavior for the stream. If the stream does not support timing out, this property should raise an <see cref="T:System.InvalidOperationException" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public abstract long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="abstract member Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="stream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">
          <span data-ttu-id="2e157-464">A byte offset relative to the <c>origin</c> parameter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-464">A byte offset relative to the <c>origin</c> parameter.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="2e157-465">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-465">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-466">When overridden in a derived class, sets the position within the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-466">When overridden in a derived class, sets the position within the current stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-467">The new position within the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-467">The new position within the current stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-468">Use la <xref:System.IO.Stream.CanSeek%2A> propiedad para determinar si la instancia actual admite búsquedas.</span><span class="sxs-lookup"><span data-stu-id="2e157-468">Use the <xref:System.IO.Stream.CanSeek%2A> property to determine whether the current instance supports seeking.</span></span>  
  
 <span data-ttu-id="2e157-469">Si `offset` es negativo, la nueva posición debe preceder a la posición especificada por `origin` por el número de bytes especificado por `offset`.</span><span class="sxs-lookup"><span data-stu-id="2e157-469">If `offset` is negative, the new position is required to precede the position specified by `origin` by the number of bytes specified by `offset`.</span></span> <span data-ttu-id="2e157-470">Si `offset` es cero (0), es necesaria que sea la posición especificada por la nueva posición `origin`.</span><span class="sxs-lookup"><span data-stu-id="2e157-470">If `offset` is zero (0), the new position is required to be the position specified by `origin`.</span></span> <span data-ttu-id="2e157-471">Si `offset` es positivo, la nueva posición se requiere para seguir a la posición especificada por `origin` por el número de bytes especificado por `offset`.</span><span class="sxs-lookup"><span data-stu-id="2e157-471">If `offset` is positive, the new position is required to follow the position specified by `origin` by the number of bytes specified by `offset`.</span></span>  
  
 <span data-ttu-id="2e157-472">Las clases derivadas de `Stream` que la búsqueda de soporte técnico debe invalidar este método para proporcionar la funcionalidad descrita anteriormente.</span><span class="sxs-lookup"><span data-stu-id="2e157-472">Classes derived from `Stream` that support seeking must override this method to provide the functionality described above.</span></span>  
  
 <span data-ttu-id="2e157-473">Se admite la búsqueda en cualquier ubicación más allá de la longitud de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-473">Seeking to any location beyond the length of the stream is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-474">An I/O error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-474">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-475">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-475">The stream does not support seeking, such as if the stream is constructed from a pipe or console output.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-476">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-476">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public abstract void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void SetLength(long value);" />
      <MemberSignature Language="F#" Value="abstract member SetLength : int64 -&gt; unit" Usage="stream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="2e157-477">The desired length of the current stream in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-477">The desired length of the current stream in bytes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-478">When overridden in a derived class, sets the length of the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-478">When overridden in a derived class, sets the length of the current stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-479">Si el valor especificado es menor que la longitud actual de la secuencia, se trunca la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-479">If the specified value is less than the current length of the stream, the stream is truncated.</span></span> <span data-ttu-id="2e157-480">Si el valor especificado es mayor que la longitud actual de la secuencia, se expande la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-480">If the specified value is larger than the current length of the stream, the stream is expanded.</span></span> <span data-ttu-id="2e157-481">Si la secuencia se expande, no se define el contenido de la secuencia entre la antigua y la nueva longitud.</span><span class="sxs-lookup"><span data-stu-id="2e157-481">If the stream is expanded, the contents of the stream between the old and the new length are not defined.</span></span>  
  
 <span data-ttu-id="2e157-482">Una secuencia debe admitir operaciones de escritura y de que deseen usar `SetLength` para que funcione.</span><span class="sxs-lookup"><span data-stu-id="2e157-482">A stream must support both writing and seeking for `SetLength` to work.</span></span>  
  
 <span data-ttu-id="2e157-483">Use la <xref:System.IO.Stream.CanWrite%2A> propiedad para determinar si la instancia actual admite operaciones de escritura y el <xref:System.IO.Stream.CanSeek%2A> propiedad para determinar si se admite la búsqueda.</span><span class="sxs-lookup"><span data-stu-id="2e157-483">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing, and the <xref:System.IO.Stream.CanSeek%2A> property to determine whether seeking is supported.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-484">An I/O error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-484">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-485">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-485">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-486">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-486">Methods were called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.IO.Stream Synchronized (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream Synchronized(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Synchronized(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ Synchronized(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.IO.Stream -&gt; System.IO.Stream" Usage="System.IO.Stream.Synchronized stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="2e157-487">The <see cref="T:System.IO.Stream" /> object to synchronize.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-487">The <see cref="T:System.IO.Stream" /> object to synchronize.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-488">Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-488">Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-489">A thread-safe <see cref="T:System.IO.Stream" /> object.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-489">A thread-safe <see cref="T:System.IO.Stream" /> object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-490">Este método devuelve una clase que contenga especificado <xref:System.IO.Stream> objeto y restringe el acceso a él desde varios subprocesos.</span><span class="sxs-lookup"><span data-stu-id="2e157-490">This method returns a class that wraps the specified <xref:System.IO.Stream> object and restricts access to it from multiple threads.</span></span> <span data-ttu-id="2e157-491">Todos los accesos a la <xref:System.IO.Stream> objeto será es seguro para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="2e157-491">All access to the <xref:System.IO.Stream> object will be thread safe.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-492">
            <paramref name="stream" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-492">
              <paramref name="stream" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;System::Byte&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : ReadOnlySpan&lt;byte&gt; -&gt; unit&#xA;override this.Write : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="stream.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : byte[] * int * int -&gt; unit" Usage="stream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2e157-493">An array of bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-493">An array of bytes.</span>
          </span>
          <span data-ttu-id="2e157-494">This method copies <c>count</c> bytes from <c>buffer</c> to the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-494">This method copies <c>count</c> bytes from <c>buffer</c> to the current stream.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2e157-495">The zero-based byte offset in <c>buffer</c> at which to begin copying bytes to the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-495">The zero-based byte offset in <c>buffer</c> at which to begin copying bytes to the current stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2e157-496">The number of bytes to be written to the current stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-496">The number of bytes to be written to the current stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-497">When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-497">When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-498">Use la <xref:System.IO.Stream.CanWrite%2A> propiedad para determinar si la instancia actual admite escritura.</span><span class="sxs-lookup"><span data-stu-id="2e157-498">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span> <span data-ttu-id="2e157-499">Use la <xref:System.IO.Stream.WriteAsync%2A> método escribir asincrónicamente en la secuencia actual.</span><span class="sxs-lookup"><span data-stu-id="2e157-499">Use the <xref:System.IO.Stream.WriteAsync%2A> method to write asynchronously to the current stream.</span></span>  
  
 <span data-ttu-id="2e157-500">Si la operación de escritura se realiza correctamente, la posición dentro de la secuencia avanza según el número de bytes escritos.</span><span class="sxs-lookup"><span data-stu-id="2e157-500">If the write operation is successful, the position within the stream advances by the number of bytes written.</span></span> <span data-ttu-id="2e157-501">Si se produce una excepción, no cambie la posición dentro de la secuencia.</span><span class="sxs-lookup"><span data-stu-id="2e157-501">If an exception occurs, the position within the stream remains unchanged.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-502">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-502">The sum of <paramref name="offset" /> and <paramref name="count" /> is greater than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-503">
            <paramref name="buffer" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-503">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-504">
            <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-504">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-505">An I/O error occured, such as the specified file cannot be found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-505">An I/O error occured, such as the specified file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-506">The stream does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-506">The stream does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-507">
            <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> was called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-507">
              <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" /> was called after the stream was closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-508">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-508">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask WriteAsync (ReadOnlyMemory&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask WriteAsync(valuetype System.ReadOnlyMemory`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : ReadOnlyMemory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&#xA;override this.WriteAsync : ReadOnlyMemory&lt;byte&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="stream.WriteAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAsync (buffer As Byte(), offset As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : byte[] * int * int -&gt; System.Threading.Tasks.Task" Usage="stream.WriteAsync (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2e157-509">The buffer to write data from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-509">The buffer to write data from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2e157-510">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-510">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2e157-511">The maximum number of bytes to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-511">The maximum number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-512">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-512">Asynchronously writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-513">A task that represents the asynchronous write operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-513">A task that represents the asynchronous write operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-514">El <xref:System.IO.Stream.WriteAsync%2A> método le permite realizar operaciones de E/S de gran cantidad de recursos sin bloquear el subproceso principal.</span><span class="sxs-lookup"><span data-stu-id="2e157-514">The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="2e157-515">Esta consideración de rendimiento es especialmente importante en una aplicación de la [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] o una aplicación de [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] en que una operación de streaming prolongada puede bloquear el subproceso de interfaz de usuario y hacer que parezca que una aplicación ha dejado de responder.</span><span class="sxs-lookup"><span data-stu-id="2e157-515">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2e157-516">Los métodos asincrónicos se usan junto con la `async` y `await` palabras clave en Visual Basic y C#.</span><span class="sxs-lookup"><span data-stu-id="2e157-516">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2e157-517">Use la <xref:System.IO.Stream.CanWrite%2A> propiedad para determinar si la instancia actual admite escritura.</span><span class="sxs-lookup"><span data-stu-id="2e157-517">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2e157-518">En el ejemplo siguiente se muestra cómo escribir asincrónicamente en un archivo.</span><span class="sxs-lookup"><span data-stu-id="2e157-518">The following example shows how to write asynchronously to a file.</span></span> <span data-ttu-id="2e157-519">El ejemplo se utiliza la <xref:System.IO.FileStream> (clase), que se deriva de la <xref:System.IO.Stream> clase.</span><span class="sxs-lookup"><span data-stu-id="2e157-519">The example uses the <xref:System.IO.FileStream> class, which derives from the <xref:System.IO.Stream> class.</span></span>  
  
 [!code-csharp[Asynchronous_File_IO_async#3](~/samples/snippets/csharp/VS_Snippets_CLR/Asynchronous_File_IO_async/cs/example3.cs#3)]
 [!code-vb[Asynchronous_File_IO_async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Asynchronous_File_IO_async/vb/example3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-520">
            <paramref name="buffer" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-520">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-521">
            <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-521">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-522">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-522">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-523">The stream does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-523">The stream does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-524">The stream has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-524">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e157-525">The stream is currently in use by a previous write operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-525">The stream is currently in use by a previous write operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 count, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : byte[] * int * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="stream.WriteAsync (buffer, offset, count, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="2e157-526">The buffer to write data from.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-526">The buffer to write data from.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="2e157-527">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-527">The zero-based byte offset in <c>buffer</c> from which to begin copying bytes to the stream.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="2e157-528">The maximum number of bytes to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-528">The maximum number of bytes to write.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="2e157-529">The token to monitor for cancellation requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-529">The token to monitor for cancellation requests.</span>
          </span>
          <span data-ttu-id="2e157-530">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-530">The default value is <see cref="P:System.Threading.CancellationToken.None" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-531">Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-531">Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2e157-532">A task that represents the asynchronous write operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-532">A task that represents the asynchronous write operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-533">El <xref:System.IO.Stream.WriteAsync%2A> método le permite realizar operaciones de E/S de gran cantidad de recursos sin bloquear el subproceso principal.</span><span class="sxs-lookup"><span data-stu-id="2e157-533">The <xref:System.IO.Stream.WriteAsync%2A> method enables you to perform resource-intensive I/O operations without blocking the main thread.</span></span> <span data-ttu-id="2e157-534">Esta consideración de rendimiento es especialmente importante en una aplicación de la [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] o una aplicación de [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] en que una operación de streaming prolongada puede bloquear el subproceso de interfaz de usuario y hacer que parezca que una aplicación ha dejado de responder.</span><span class="sxs-lookup"><span data-stu-id="2e157-534">This performance consideration is particularly important in a [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] app or [!INCLUDE[desktop_appname](~/includes/desktop-appname-md.md)] app where a time-consuming stream operation can block the UI thread and make your app appear as if it is not working.</span></span> <span data-ttu-id="2e157-535">Los métodos asincrónicos se usan junto con la `async` y `await` palabras clave en Visual Basic y C#.</span><span class="sxs-lookup"><span data-stu-id="2e157-535">The async methods are used in conjunction with the `async` and `await` keywords in Visual Basic and C#.</span></span>  
  
 <span data-ttu-id="2e157-536">Use la <xref:System.IO.Stream.CanWrite%2A> propiedad para determinar si la instancia actual admite escritura.</span><span class="sxs-lookup"><span data-stu-id="2e157-536">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 <span data-ttu-id="2e157-537">Si la operación se cancela antes de que finalice, la tarea devuelta contiene la <xref:System.Threading.Tasks.TaskStatus.Canceled> valor para el <xref:System.Threading.Tasks.Task.Status%2A> propiedad.</span><span class="sxs-lookup"><span data-stu-id="2e157-537">If the operation is canceled before it completes, the returned task contains the <xref:System.Threading.Tasks.TaskStatus.Canceled> value for the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span>  
  
 <span data-ttu-id="2e157-538">Para obtener un ejemplo, vea el <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="2e157-538">For an example, see the <xref:System.IO.Stream.WriteAsync%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="2e157-539">
            <paramref name="buffer" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-539">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="2e157-540">
            <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-540">
              <paramref name="offset" /> or <paramref name="count" /> is negative.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="2e157-541">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-541">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-542">The stream does not support writing.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-542">The stream does not support writing.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-543">The stream has been disposed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-543">The stream has been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e157-544">The stream is currently in use by a previous write operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-544">The stream is currently in use by a previous write operation.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public virtual void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Stream.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="abstract member WriteByte : byte -&gt; unit&#xA;override this.WriteByte : byte -&gt; unit" Usage="stream.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="2e157-545">The byte to write to the stream.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-545">The byte to write to the stream.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2e157-546">Writes a byte to the current position in the stream and advances the position within the stream by one byte.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-546">Writes a byte to the current position in the stream and advances the position within the stream by one byte.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2e157-547">Use la <xref:System.IO.Stream.CanWrite%2A> propiedad para determinar si la instancia actual admite escritura.</span><span class="sxs-lookup"><span data-stu-id="2e157-547">Use the <xref:System.IO.Stream.CanWrite%2A> property to determine whether the current instance supports writing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="2e157-548">An I/O error occurs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-548">An I/O error occurs.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="2e157-549">The stream does not support writing, or the stream is already closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-549">The stream does not support writing, or the stream is already closed.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="2e157-550">Methods were called after the stream was closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-550">Methods were called after the stream was closed.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2e157-551">
            <para>La implementación predeterminada de <see langword="Stream" /> crea una nueva matriz de un solo byte y, a continuación, se llama <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />. Aunque esto es formalmente correcto, no es eficaz. Cualquier secuencia que posea un búfer interno debe reemplazar este método y proporcionar una versión mucho más eficaz que escribe en el búfer directamente, evitando la asignación adicional de matrices en cada llamada.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-551">
              <para>The default implementation on <see langword="Stream" /> creates a new single-byte array and then calls <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />. While this is formally correct, it is inefficient. Any stream with an internal buffer should override this method and provide a much more efficient version that writes to the buffer directly, avoiding the extra array allocation on every call.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public virtual int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Stream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.IO.Stream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2e157-552">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-552">Gets or sets a value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2e157-553">Valor, en milisegundos, que determina durante cuánto tiempo la secuencia intentará realizar operaciones de escritura antes de que se agote el tiempo de espera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-553">A value, in miliseconds, that determines how long the stream will attempt to write before timing out.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="2e157-554">The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-554">The <see cref="P:System.IO.Stream.WriteTimeout" /> method always throws an <see cref="T:System.InvalidOperationException" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="2e157-555">
            <para>El <see cref="P:System.IO.Stream.WriteTimeout" /> propiedad se debe invalidar para proporcionar el comportamiento adecuado de la secuencia. Si la secuencia no es compatible con el tiempo de espera, esta propiedad debe producir una <see cref="T:System.InvalidOperationException" />.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="2e157-555">
              <para>The <see cref="P:System.IO.Stream.WriteTimeout" /> property should be overridden to provide the appropriate behavior for the stream. If the stream does not support timing out, this property should raise an <see cref="T:System.InvalidOperationException" />.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>