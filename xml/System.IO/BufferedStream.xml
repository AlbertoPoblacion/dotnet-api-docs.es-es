<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BufferedStream.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac50565905affcad56d23c9b51bc2aa664f02fdc654.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0565905affcad56d23c9b51bc2aa664f02fdc654</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.BufferedStream">
          <source>Adds a buffering layer to read and write operations on another stream.</source>
          <target state="translated">Agrega una capa de almacenamiento en búfer para las operaciones de lectura y escritura en otra secuencia.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.IO.BufferedStream">
          <source>This class cannot be inherited.</source>
          <target state="translated">Esta clase no puede heredarse.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>A buffer is a block of bytes in memory used to cache data, thereby reducing the number of calls to the operating system.</source>
          <target state="translated">Un búfer es un bloque de bytes de memoria utilizada para los datos de la caché, lo que reduce el número de llamadas al sistema operativo.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Buffers improve read and write performance.</source>
          <target state="translated">Búferes de mejoran la lectura y rendimiento de escritura.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>A buffer can be used for either reading or writing, but never both simultaneously.</source>
          <target state="translated">Puede utilizar un búfer para lectura o escritura, pero nunca para ambas al mismo tiempo.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>The <ph id="ph1">&lt;xref:System.IO.BufferedStream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.BufferedStream.Write%2A&gt;</ph> methods of <ph id="ph3">`BufferedStream`</ph> automatically maintain the buffer.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IO.BufferedStream.Read%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.IO.BufferedStream.Write%2A&gt;</ph> métodos de <ph id="ph3">`BufferedStream`</ph> mantener de forma automática el búfer.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>This type implements the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface.</source>
          <target state="translated">Este tipo implementa la <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interfaz.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>When you have finished using the type, you should dispose of it either directly or indirectly.</source>
          <target state="translated">Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>To dispose of the type directly, call its <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id="ph2">`try`</ph><ph id="ph3">/</ph><ph id="ph4">`catch`</ph> block.</source>
          <target state="translated">Para deshacerse del tipo directamente, llame a su <ph id="ph1">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> método en un <ph id="ph2">`try`</ph> <ph id="ph3">/</ph> <ph id="ph4">`catch`</ph> bloque.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>To dispose of it indirectly, use a language construct such as <ph id="ph1">`using`</ph> (in C#) or <ph id="ph2">`Using`</ph> (in Visual Basic).</source>
          <target state="translated">Para deshacerse de él indirectamente, use una construcción de lenguaje como <ph id="ph1">`using`</ph> (en C#) o <ph id="ph2">`Using`</ph> (en Visual Basic).</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>For more information, see the "Using an Object that Implements IDisposable" section in the <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> interface topic.</source>
          <target state="translated">Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <ph id="ph1">&lt;xref:System.IDisposable&gt;</ph> tema de la interfaz.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><ph id="ph1">`BufferedStream`</ph> can be composed around certain types of streams.</source>
          <target state="translated"><ph id="ph1">`BufferedStream`</ph> puede estar compuesto alrededor de determinados tipos de secuencias.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>It provides implementations for reading and writing bytes to an underlying data source or repository.</source>
          <target state="translated">Proporciona implementaciones para leer y escribir bytes en un origen de datos o repositorio subyacente.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> for reading and writing other data types.</source>
          <target state="translated">Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> y <ph id="ph2">&lt;xref:System.IO.BinaryWriter&gt;</ph> para leer y escribir otros tipos de datos.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><ph id="ph1">`BufferedStream`</ph> is designed to prevent the buffer from slowing down input and output when the buffer is not needed.</source>
          <target state="translated"><ph id="ph1">`BufferedStream`</ph> está diseñado para evitar que el búfer ralentice la entrada y salida cuando el búfer no es necesario.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>If you always read and write for sizes greater than the internal buffer size, then <ph id="ph1">`BufferedStream`</ph> might not even allocate the internal buffer.</source>
          <target state="translated">Si siempre lee y escribe tamaños mayores que el tamaño del búfer interno, a continuación, <ph id="ph1">`BufferedStream`</ph> incluso no asigne el búfer interno.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><ph id="ph1">`BufferedStream`</ph> also buffers reads and writes in a shared buffer.</source>
          <target state="translated"><ph id="ph1">`BufferedStream`</ph> también almacena en búfer las lecturas y escrituras en un búfer compartido.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>It is assumed that you will almost always be doing a series of reads or writes, but rarely alternate between the two of them.</source>
          <target state="translated">Se supone que casi siempre se estarán realizando una serie de lecturas o escrituras, pero que rara vez se alternará entre los dos de ellos.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>The following code examples show how to use the <ph id="ph1">`BufferedStream`</ph> class over the <ph id="ph2">`NetworkStream`</ph> class to increase the performance of certain I/O operations.</source>
          <target state="translated">Ejemplos de código siguientes muestran cómo usar el <ph id="ph1">`BufferedStream`</ph> clase sobre la <ph id="ph2">`NetworkStream`</ph> clase para aumentar el rendimiento de ciertas operaciones de E/S.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Start the server on a remote computer before starting the client.</source>
          <target state="translated">Inicie el servidor en un equipo remoto antes de iniciar al cliente.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Specify the remote computer name as a command-line argument when starting the client.</source>
          <target state="translated">Especifique el nombre del equipo remoto como un argumento de línea de comandos al iniciar al cliente.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>Vary the <ph id="ph1">`dataArraySize`</ph> and <ph id="ph2">`streamBufferSize`</ph> constants to view their effect on performance.</source>
          <target state="translated">Variar la <ph id="ph1">`dataArraySize`</ph> y <ph id="ph2">`streamBufferSize`</ph> constantes para ver su efecto en el rendimiento.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source>The first example shows the code that runs on the client, and the second example shows the code that runs on the server.</source>
          <target state="translated">El primer ejemplo muestra el código que se ejecuta en el cliente y el segundo ejemplo muestra el código que se ejecuta en el servidor.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><bpt id="p1">**</bpt>Example 1: Code that runs on the client<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Ejemplo 1: Código que se ejecuta en el cliente<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.BufferedStream">
          <source><bpt id="p1">**</bpt>Example 2: Code that runs on the server<ept id="p1">**</ept></source>
          <target state="translated"><bpt id="p1">**</bpt>Ejemplo 2: Código que se ejecuta en el servidor<ept id="p1">**</ept></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.IO.BufferedStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source>The current stream.</source>
          <target state="translated">Secuencia actual.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> class with a default buffer size of 4096 bytes.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> con un tamaño de búfer predeterminado de 4096 bytes.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source>A shared read/write buffer is allocated the first time a <ph id="ph1">`BufferedStream`</ph> object is initialized with this constructor.</source>
          <target state="translated">Se asigna un búfer de lectura/escritura compartido la primera vez un <ph id="ph1">`BufferedStream`</ph> objeto se inicializa con este constructor.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source>The shared buffer is not used if all reads and writes are greater than or equal to <ph id="ph1">`bufferSize`</ph>.</source>
          <target state="translated">El búfer compartido no se utiliza si todas las lecturas y escrituras son mayores o iguales a <ph id="ph1">`bufferSize`</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>The current stream.</source>
          <target state="translated">Secuencia actual.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>The buffer size in bytes.</source>
          <target state="translated">El tamaño del búfer en bytes.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> class with the specified buffer size.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.BufferedStream" /&gt;</ph> con el tamaño de búfer especificado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>A shared read/write buffer is allocated the first time a <ph id="ph1">`BufferedStream`</ph> object is initialized with this constructor.</source>
          <target state="translated">Se asigna un búfer de lectura/escritura compartido la primera vez un <ph id="ph1">`BufferedStream`</ph> objeto se inicializa con este constructor.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>The shared buffer is not used if all reads and writes are greater than or equal to <ph id="ph1">`bufferSize`</ph>.</source>
          <target state="translated">El búfer compartido no se utiliza si todas las lecturas y escrituras son mayores o iguales a <ph id="ph1">`bufferSize`</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="stream" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.#ctor(System.IO.Stream,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="bufferSize" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer to read the data into.</source>
          <target state="translated">El búfer en el que se leen los datos.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data read from the stream.</source>
          <target state="translated">Desplazamiento de bytes de <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> donde se va a empezar a escribir datos leídos de la secuencia.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Número máximo de bytes que se pueden leer.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An optional asynchronous callback, to be called when the read is complete.</source>
          <target state="translated">Devolución de llamada asincrónica opcional, a la que se llamará cuando haya finalizado la lectura.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous read request from other requests.</source>
          <target state="translated">Objeto proporcionado por el usuario que distingue esta solicitud de lectura asincrónica de otras.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous read operation.</source>
          <target state="translated">Comienza una operación de lectura asincrónica.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(Considere usar <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> en su lugar).</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that represents the asynchronous read, which could still be pending.</source>
          <target state="translated">Un objeto que representa la lectura asincrónica, que puede hallarse aún pendiente.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 y versiones anteriores, tendrá que usar métodos como <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> para implementar operaciones de archivo asincrónicas.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">Estos métodos siguen estando disponibles en la <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> para admitir código heredado; sin embargo, los nuevos métodos asincrónicos, como <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, y <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, ayuda implementar operaciones de archivo asincrónicas más fácilmente.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> must be called exactly once for every call to <ph id="ph2">&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> debe llamar exactamente una vez por cada llamada a <ph id="ph2">&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Failing to end a read process before beginning another read can cause undesirable behavior such as deadlock.</source>
          <target state="translated">Si no se finaliza un proceso de lectura antes de comenzar otra lectura puede provocar un comportamiento no deseado, como el interbloqueo.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Use the <ph id="ph1">&lt;xref:System.IO.BufferedStream.CanRead%2A&gt;</ph> property to determine whether the current instance supports reading.</source>
          <target state="translated">Use la <ph id="ph1">&lt;xref:System.IO.BufferedStream.CanRead%2A&gt;</ph> propiedad para determinar si la instancia actual admite operaciones de lectura.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;</ph> must be called with this <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to find out how many bytes were read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;</ph> se debe llamar a este <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> para averiguar el número de bytes que se leyeron.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Attempted an asynchronous read past the end of the stream.</source>
          <target state="translated">Se intentó realizar una lectura asincrónica después del final del flujo.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longitud del búfer menos <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es menor que <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The current stream does not support the read operation.</source>
          <target state="translated">La secuencia actual no admite la operación de escritura.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The buffer containing data to write to the current stream.</source>
          <target state="translated">Búfer que contiene los datos que se van a escribir en la secuencia actual.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin copying bytes to the current stream.</source>
          <target state="translated">Desplazamiento de bytes de base cero de <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> en donde se van a empezar a copiar bytes en la secuencia actual.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Número máximo de bytes que se pueden escribir.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The method to be called when the asynchronous write operation is completed.</source>
          <target state="translated">Método al que se va a llamar cuando se complete la operación de escritura asincrónica.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>A user-provided object that distinguishes this particular asynchronous write request from other requests.</source>
          <target state="translated">Objeto proporcionado por el usuario que distingue esta solicitud de lectura asincrónica de otras.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>Begins an asynchronous write operation.</source>
          <target state="translated">Comienza una operación de escritura asincrónica.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(Considere usar <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> en su lugar).</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>An object that references the asynchronous write which could still be pending.</source>
          <target state="translated">Objeto que hace referencia a la escritura asincrónica, que puede estar aún pendiente.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 y versiones anteriores, tendrá que usar métodos como <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> para implementar operaciones de archivo asincrónicas.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">Estos métodos siguen estando disponibles en la <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> para admitir código heredado; sin embargo, los nuevos métodos asincrónicos, como <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, y <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, ayuda implementar operaciones de archivo asincrónicas más fácilmente.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> must be called exactly once on every <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> from <ph id="ph3">&lt;xref:System.IO.BufferedStream.BeginWrite%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> se debe llamar exactamente una vez en cada <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> de <ph id="ph3">&lt;xref:System.IO.BufferedStream.BeginWrite%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> will block until the I/O operation has completed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> se bloqueará hasta que se complete la operación de E/S.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> length minus <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longitud de <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> menos <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> es menor que <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
          <source>The stream does not support writing.</source>
          <target state="translated">La secuencia no admite escritura.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.CanRead">
          <source>Gets a value indicating whether the current stream supports reading.</source>
          <target state="translated">Obtiene un valor que indica si la secuencia actual admite lectura.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanRead">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports reading; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or was opened with write-only access.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si la secuencia admite lectura; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> si la secuencia está cerrada o se abrió con acceso de solo escritura.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanRead">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support reading, calls to the <ph id="ph2">&lt;xref:System.IO.BufferedStream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.ReadByte%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>, and the <ph id="ph6">`Peek`</ph> methods of <ph id="ph7">&lt;xref:System.IO.StreamReader&gt;</ph>, <ph id="ph8">&lt;xref:System.IO.StringReader&gt;</ph>, and <ph id="ph9">&lt;xref:System.IO.TextReader&gt;</ph> throw a <ph id="ph10">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si una clase derivada de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> no admite la lectura, las llamadas a la <ph id="ph2">&lt;xref:System.IO.BufferedStream.Read%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.ReadByte%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph>y el <ph id="ph6">`Peek`</ph> métodos de <ph id="ph7">&lt;xref:System.IO.StreamReader&gt;</ph>, <ph id="ph8">&lt;xref:System.IO.StringReader&gt;</ph>, y <ph id="ph9">&lt;xref:System.IO.TextReader&gt;</ph> producir un <ph id="ph10">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanRead">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si la secuencia está cerrada, esta propiedad devuelve <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanRead">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.CanSeek">
          <source>Gets a value indicating whether the current stream supports seeking.</source>
          <target state="translated">Obtiene un valor que indica si la secuencia actual admite búsquedas.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports seeking; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or if the stream was constructed from an operating system handle such as a pipe or output to the console.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si la secuencia admite operaciones de búsqueda; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> si la secuencia está cerrada o si se construyó a partir de un identificador del sistema operativo como una canalización o una salida a la consola.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanSeek">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support seeking, calls to <ph id="ph2">&lt;xref:System.IO.BufferedStream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.BufferedStream.Position%2A&gt;</ph>, and <ph id="ph5">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> throw a <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si una clase derivada de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> no admite búsquedas, las llamadas a <ph id="ph2">&lt;xref:System.IO.BufferedStream.Length%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.IO.BufferedStream.Position%2A&gt;</ph>, y <ph id="ph5">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> producir un <ph id="ph6">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanSeek">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si la secuencia está cerrada, esta propiedad devuelve <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanSeek">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.CanWrite">
          <source>Gets a value indicating whether the current stream supports writing.</source>
          <target state="translated">Obtiene un valor que indica si la secuencia actual admite escritura.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the stream supports writing; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the stream is closed or was opened with read-only access.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si la secuencia admite escritura; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> si la secuencia está cerrada o se abrió con acceso de solo lectura.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanWrite">
          <source>If a class derived from <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> does not support writing, a call to <ph id="ph2">&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.Write%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.IO.BufferedStream.WriteByte%2A&gt;</ph> throws a <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">Si una clase derivada de <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> no admite la escritura, una llamada a <ph id="ph2">&lt;xref:System.IO.BufferedStream.SetLength%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.Write%2A&gt;</ph>, o <ph id="ph4">&lt;xref:System.IO.BufferedStream.WriteByte%2A&gt;</ph> produce una <ph id="ph5">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanWrite">
          <source>If the stream is closed, this property returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">Si la secuencia está cerrada, esta propiedad devuelve <ph id="ph1">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.CanWrite">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>The reference to the pending asynchronous request to wait for.</source>
          <target state="translated">Referencia a la solicitud asincrónica pendiente a la que se debe esperar.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>Waits for the pending asynchronous read operation to complete.</source>
          <target state="translated">Espera a que se complete la operación asincrónica de lectura que se encuentra pendiente.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(Considere usar <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> en su lugar).</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>The number of bytes read from the stream, between 0 (zero) and the number of bytes you requested.</source>
          <target state="translated">El número de bytes leídos de la secuencia, que se encuentra entre cero (0) y el número de bytes solicitado.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>Streams only return 0 only at the end of the stream, otherwise, they should block until at least 1 byte is available.</source>
          <target state="translated">Las secuencias solo devuelven 0 al final de la secuencia; de lo contrario, se deben bloquear hasta que haya al menos 1 byte disponible.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 y versiones anteriores, tendrá que usar métodos como <ph id="ph1">&lt;xref:System.IO.Stream.BeginRead%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.IO.Stream.EndRead%2A&gt;</ph> para implementar operaciones de archivo asincrónicas.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">Estos métodos siguen estando disponibles en la <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> para admitir código heredado; sin embargo, los nuevos métodos asincrónicos, como <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, y <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, ayuda implementar operaciones de archivo asincrónicas más fácilmente.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;</ph> must be called with this <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> to find out how many bytes were read.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndRead%2A&gt;</ph> se debe llamar a este <ph id="ph2">&lt;xref:System.IAsyncResult&gt;</ph> para averiguar el número de bytes que se leyeron.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndRead(System.IAsyncResult)">
          <source>This <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object was not created by calling <ph id="ph2">&lt;see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> on this class.</source>
          <target state="translated">Este objeto <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> no se creó mediante una llamada a <ph id="ph2">&lt;see cref="M:System.IO.BufferedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> en esta clase.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>The pending asynchronous request.</source>
          <target state="translated">Solicitud asincrónica pendiente.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>Ends an asynchronous write operation and blocks until the I/O operation is complete.</source>
          <target state="translated">Termina una operación de escritura asincrónica y se bloquea hasta que se completa la operación de E/S.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>(Consider using <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> instead.)</source>
          <target state="translated">(Considere usar <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" /&gt;</ph> en su lugar).</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>In the .NET Framework 4 and earlier versions, you have to use methods such as <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> to implement asynchronous file operations.</source>
          <target state="translated">.NET Framework 4 y versiones anteriores, tendrá que usar métodos como <ph id="ph1">&lt;xref:System.IO.Stream.BeginWrite%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.IO.Stream.EndWrite%2A&gt;</ph> para implementar operaciones de archivo asincrónicas.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>These methods are still available in the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> to support legacy code; however, the new async methods, such as <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, help you implement asynchronous file operations more easily.</source>
          <target state="translated">Estos métodos siguen estando disponibles en la <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> para admitir código heredado; sin embargo, los nuevos métodos asincrónicos, como <ph id="ph2">&lt;xref:System.IO.BufferedStream.ReadAsync%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.IO.BufferedStream.WriteAsync%2A&gt;</ph>, y <ph id="ph4">&lt;xref:System.IO.BufferedStream.FlushAsync%2A&gt;</ph>, ayuda implementar operaciones de archivo asincrónicas más fácilmente.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> must be called exactly once for every call to <ph id="ph2">&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.BufferedStream.EndWrite%2A&gt;</ph> debe llamar exactamente una vez por cada llamada a <ph id="ph2">&lt;xref:System.IO.BufferedStream.BeginRead%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>Failing to end a read process before beginning another read operation can cause deadlock or other undesirable behavior.</source>
          <target state="translated">Si no se finaliza un proceso de lectura antes de empezar otra operación de lectura puede producir un interbloqueo o cualquier otro comportamiento no deseado.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="asyncResult" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.EndWrite(System.IAsyncResult)">
          <source>This <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> object was not created by calling <ph id="ph2">&lt;see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> on this class.</source>
          <target state="translated">Este objeto <ph id="ph1">&lt;see cref="T:System.IAsyncResult" /&gt;</ph> no se creó mediante una llamada a <ph id="ph2">&lt;see cref="M:System.IO.BufferedStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /&gt;</ph> en esta clase.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Flush">
          <source>Clears all buffers for this stream and causes any buffered data to be written to the underlying device.</source>
          <target state="translated">Borra todos los búferes para esta secuencia y hace que los datos almacenados en búfer se escriban en el dispositivo subyacente.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>Flushing the stream will not flush its underlying encoder unless you explicitly call <ph id="ph1">`Flush`</ph> or <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>.</source>
          <target state="translated">Vaciar la secuencia no hará que vacíe su correspondiente codificador subyacente a menos que se llame explícitamente a <ph id="ph1">`Flush`</ph> o <ph id="ph2">&lt;xref:System.IO.Stream.Close%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>If you use the <ph id="ph1">&lt;xref:System.IO.BufferedStream.%23ctor%2A&gt;</ph> constructor, thus specifying the buffer size while creating the <ph id="ph2">`BufferedStream`</ph> object, the content is flushed when it reaches the buffer size.</source>
          <target state="translated">Si usas el <ph id="ph1">&lt;xref:System.IO.BufferedStream.%23ctor%2A&gt;</ph> constructor, lo que especifica el tamaño del búfer al crear el <ph id="ph2">`BufferedStream`</ph> de objeto, el contenido se vacía cuando se alcanza el tamaño del búfer.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>For example, code such as <ph id="ph1">`BufferedStream bs = new BufferedStream(bs, 5)`</ph> will flush the content when the buffer size reaches 5 bytes.</source>
          <target state="translated">Por ejemplo, un código como <ph id="ph1">`BufferedStream bs = new BufferedStream(bs, 5)`</ph> vaciará el contenido cuando el tamaño del búfer alcance 5 bytes.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>All the read and write methods of <ph id="ph1">`BufferedStream`</ph> automatically maintain the buffer, so there is no need to invoke <ph id="ph2">`Flush`</ph> when switching back and forth between reading and writing.</source>
          <target state="translated">Todos los métodos de lectura y escritura de <ph id="ph1">`BufferedStream`</ph> mantener de forma automática el búfer, por lo que no es necesario para invocar <ph id="ph2">`Flush`</ph> cuando se cambia y hacia atrás entre lectura y escritura.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Flush">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Flush">
          <source>The stream has been disposed.</source>
          <target state="translated">Se ha eliminado la secuencia.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Flush">
          <source>The data source or repository is not open.</source>
          <target state="translated">No está abierto ni el repositorio ni el origen de datos.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token para supervisar solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Asynchronously clears all buffers for this stream, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</source>
          <target state="translated">Borra asincrónicamente todos los búferes del flujo actual, hace que todos los datos almacenados en el búfer se escriban en el dispositivo subyacente y supervisa las solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Tarea que representa la operación de vaciado asincrónico.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Se ha eliminado la secuencia.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Length">
          <source>Gets the stream length in bytes.</source>
          <target state="translated">Obtiene la longitud de la secuencia en bytes.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Length">
          <source>The stream length in bytes.</source>
          <target state="translated">Longitud de la secuencia en bytes.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Length">
          <source>The underlying stream is <ph id="ph1">&lt;see langword="null" /&gt;</ph> or closed.</source>
          <target state="translated">La secuencia subyacente es <ph id="ph1">&lt;see langword="null" /&gt;</ph> o está cerrada.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Length">
          <source>The stream does not support seeking.</source>
          <target state="translated">La secuencia no admite búsqueda.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Length">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Se efectuó una llamada a los métodos después de cerrar la secuencia.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>Gets the position within the current stream.</source>
          <target state="translated">Obtiene la posición dentro de la secuencia actual.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Position">
          <source>The position within the current stream.</source>
          <target state="translated">Posición dentro de la secuencia actual.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Position">
          <source>The <ph id="ph1">`get`</ph> accessor invokes <ph id="ph2">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> to obtain the current position within the underlying stream and then adjusts this value according to the current position within the buffer.</source>
          <target state="translated">El <ph id="ph1">`get`</ph> descriptor de acceso, se invoca <ph id="ph2">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> para obtener la posición actual dentro de la secuencia subyacente y, a continuación, ajusta este valor según la posición actual dentro del búfer.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Position">
          <source>The <ph id="ph1">`set`</ph> accessor copies any data previously written to the buffer to the underlying stream, and then invokes <ph id="ph2">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">`set`</ph> descriptor de acceso copia los datos escritos anteriormente en el búfer en la secuencia subyacente y, a continuación, invoca <ph id="ph2">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.BufferedStream.Position">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">Se admite la búsqueda en cualquier ubicación más allá de la longitud de la secuencia.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>The value passed to <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph> is negative.</source>
          <target state="translated">El valor pasado a <ph id="ph1">&lt;see cref="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>An I/O error occurs, such as the stream being closed.</source>
          <target state="translated">Se produce un error de E/S, como el cierre de la secuencia.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>The stream does not support seeking.</source>
          <target state="translated">La secuencia no admite búsqueda.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.IO.BufferedStream.Position">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Se efectuó una llamada a los métodos después de cerrar la secuencia.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer to which bytes are to be copied.</source>
          <target state="translated">Búfer en el que se van a copiar los bytes.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The byte offset in the buffer at which to begin reading bytes.</source>
          <target state="translated">Desplazamiento de bytes en el búfer donde va a comenzar la lectura de bytes.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be read.</source>
          <target state="translated">Número de bytes que se va a leer.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Copies bytes from the current buffered stream to an array.</source>
          <target state="translated">Copia bytes, procedentes de la secuencia actual almacenada en el búfer, en una matriz.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into <ph id="ph1">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Número total de bytes leídos en <ph id="ph1">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or 0 if the end of the stream has been reached before any data can be read.</source>
          <target state="translated">Éste puede ser menor que el número de bytes solicitados si ese número de bytes no se encuentra disponible, o bien puede ser 0 si se alcanza el final de la secuencia antes de que puedan leerse datos.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`Read`</ph> method will return 0 only if the end of the stream is reached.</source>
          <target state="translated">El <ph id="ph1">`Read`</ph> método devolverá 0 solo si se alcanza el final de la secuencia.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>In all other cases, <ph id="ph1">`Read`</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">En todos los demás casos, <ph id="ph1">`Read`</ph> siempre lee al menos un byte de la secuencia antes de devolver.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>By definition, if no data is available from the stream upon a call to <ph id="ph1">`Read`</ph>, the <ph id="ph2">`Read`</ph> method returns 0 (the end of the stream is reached automatically).</source>
          <target state="translated">Por definición, si no hay datos disponibles en la secuencia tras una llamada a <ph id="ph1">`Read`</ph>, el <ph id="ph2">`Read`</ph> método devuelve 0 (el final de la secuencia se alcanza de forma automática).</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">Una implementación es gratuita devolver menos bytes de los solicitados incluso si no se ha alcanzado el final de la secuencia.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Use <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> for reading primitive data types.</source>
          <target state="translated">Utilice <ph id="ph1">&lt;xref:System.IO.BinaryReader&gt;</ph> para leer los tipos de datos primitivos.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Length of <ph id="ph1">&lt;paramref name="array" /&gt;</ph> minus <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longitud de <ph id="ph1">&lt;paramref name="array" /&gt;</ph> menos <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> es menor que <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is not open or is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La secuencia no está abierta o es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support reading.</source>
          <target state="translated">La secuencia no admite lectura.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Se efectuó una llamada a los métodos después de cerrar la secuencia.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">Búfer en el que se escriben los datos.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">Desplazamiento de bytes de <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> donde se van a empezar a escribir datos de la secuencia.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Número máximo de bytes que se pueden leer.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token para supervisar solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads a sequence of bytes from the current stream, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</source>
          <target state="translated">Lee de forma asincrónica una secuencia de bytes en la secuencia actual, se hace avanzar la posición dentro de la secuencia el número de bytes leídos y controla las solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Tarea que representa la operación de lectura asincrónica.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contiene el número total de bytes leídos en el búfer.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la secuencia.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>You can create a cancellation token by creating an instance of the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id="ph3">`cancellationToken`</ph> parameter.</source>
          <target state="translated">Puede crear un token de cancelación mediante la creación de una instancia de la <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> clase y pasar la <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> propiedad como el <ph id="ph3">`cancellationToken`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">La suma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> y <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es mayor que la longitud del búfer.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support reading.</source>
          <target state="translated">La secuencia no admite lectura.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Se ha eliminado la secuencia.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous read operation.</source>
          <target state="translated">Una operación de lectura anterior está usando actualmente la secuencia.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>Reads a byte from the underlying stream and returns the byte cast to an <ph id="ph1">&lt;see langword="int" /&gt;</ph>, or returns -1 if reading from the end of the stream.</source>
          <target state="translated">Lee un byte de la secuencia subyacente y devuelve el byte convertido en un <ph id="ph1">&lt;see langword="int" /&gt;</ph>, o devuelve -1 si se lee desde el final de la secuencia.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>The byte cast to an <ph id="ph1">&lt;see langword="int" /&gt;</ph>, or -1 if reading from the end of the stream.</source>
          <target state="translated">El byte convertido en un <ph id="ph1">&lt;see langword="int" /&gt;</ph> o -1 si se lee desde el final de la secuencia.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>An I/O error occurs, such as the stream being closed.</source>
          <target state="translated">Se produce un error de E/S, como el cierre de la secuencia.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>The stream does not support reading.</source>
          <target state="translated">La secuencia no admite lectura.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.ReadByte">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Se efectuó una llamada a los métodos después de cerrar la secuencia.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.ReadByte">
          <source>The default implementation on <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> creates a new single-byte array and then calls <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</source>
          <target state="translated">La implementación predeterminada de <ph id="ph1">&lt;see langword="Stream" /&gt;</ph> crea una nueva matriz de un solo byte y, a continuación, se llama <ph id="ph2">&lt;see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.ReadByte">
          <source>While this is formally correct, it is inefficient.</source>
          <target state="translated">Aunque esto es formalmente correcto, no es eficaz.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.ReadByte">
          <source>Any stream with an internal buffer should override this method and provide a much more efficient version that reads the buffer directly, avoiding the extra array allocation on every call.</source>
          <target state="translated">Cualquier secuencia que posea un búfer interno debe reemplazar este método y proporcionar una versión mucho más eficaz que lea el búfer directamente, evitando la asignación adicional de matrices en cada llamada.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A byte offset relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">Desplazamiento de bytes con respecto a <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>A value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> indicating the reference point from which to obtain the new position.</source>
          <target state="translated">Valor de tipo <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph> que indica el punto de referencia del que obtener la nueva posición.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the position within the current buffered stream.</source>
          <target state="translated">Establece la posición dentro de la secuencia almacenada en búfer actualmente.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position within the current buffered stream.</source>
          <target state="translated">Nueva posición dentro de la secuencia almacenada en el búfer actual.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is negative, the new position will precede the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`offset`</ph> es negativo, la nueva posición precederá a la posición especificada por <ph id="ph2">`origin`</ph> el número de bytes especificado mediante <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is 0, the new position will be the position specified by <ph id="ph2">`origin`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`offset`</ph> es 0, la nueva posición será la posición especificada por <ph id="ph2">`origin`</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>If <ph id="ph1">`offset`</ph> is positive, the new position will follow the position specified by <ph id="ph2">`origin`</ph> by the number of bytes specified by <ph id="ph3">`offset`</ph>.</source>
          <target state="translated">Si <ph id="ph1">`offset`</ph> es positivo, la nueva posición seguirá a la posición especificada por <ph id="ph2">`origin`</ph> el número de bytes especificado mediante <ph id="ph3">`offset`</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>When a <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> object is the base stream for a <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> object, calling the <ph id="ph3">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> method can cause the position of the stream to no longer match the position of the internal buffer in the reader.</source>
          <target state="translated">Cuando un <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> objeto es la secuencia base para un <ph id="ph2">&lt;xref:System.IO.StreamReader&gt;</ph> objeto, llamar a la <ph id="ph3">&lt;xref:System.IO.BufferedStream.Seek%2A&gt;</ph> método puede provocar que la posición de la secuencia que ya no coincide con la posición del búfer interno en el lector.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>To reset the internal buffer, call the <ph id="ph1">&lt;xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=nameWithType&gt;</ph> method; however, this method slows performance and should be called only when absolutely necessary.</source>
          <target state="translated">Para restablecer el búfer interno, llame a la <ph id="ph1">&lt;xref:System.IO.StreamReader.DiscardBufferedData%2A?displayProperty=nameWithType&gt;</ph> método; sin embargo, este método reduce el rendimiento y se debe llamar solo cuando sea absolutamente necesario.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Seeking to any location beyond the length of the stream is supported.</source>
          <target state="translated">Se admite la búsqueda en cualquier ubicación más allá de la longitud de la secuencia.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream is not open or is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La secuencia no está abierta o es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream does not support seeking.</source>
          <target state="translated">La secuencia no admite búsqueda.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Se efectuó una llamada a los métodos después de cerrar la secuencia.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>An integer indicating the desired length of the current buffered stream in bytes.</source>
          <target state="translated">Entero que indica la longitud deseada de la secuencia almacenada en el búfer actual en bytes.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>Sets the length of the buffered stream.</source>
          <target state="translated">Establece la longitud de la secuencia almacenada en el búfer.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>The buffer is flushed before setting the length of the underlying data source or repository.</source>
          <target state="translated">El búfer se vacíe antes de establecer la longitud del origen de datos subyacente o repositorio.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>If the specified value is less than the current length of the buffered stream, the buffered stream is truncated.</source>
          <target state="translated">Si el valor especificado es menor que la longitud actual de la secuencia almacenada en búfer, se trunca la transmisión almacenada en búfer.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>If the specified value is larger than the current length of the buffered stream, the buffered stream is expanded.</source>
          <target state="translated">Si el valor especificado es mayor que la longitud actual de la secuencia almacenada en búfer, se expande la secuencia almacenada en búfer.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>If the buffered stream is expanded, the contents of the buffered stream between the old and the new lengths are not defined.</source>
          <target state="translated">Si se expande la secuencia almacenada en búfer, no se define el contenido de la secuencia almacenada en búfer entre la antigua y las longitudes de nuevo.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source><ph id="ph1">`SetLength`</ph> flushes any buffered writes if necessary.</source>
          <target state="translated"><ph id="ph1">`SetLength`</ph> vacía las escrituras almacenadas en búfer si es necesario.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">`SetLength`</ph> to work.</source>
          <target state="translated">Una secuencia debe admitir operaciones de escritura y de que deseen usar <ph id="ph1">`SetLength`</ph> para que funcione.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>The stream is not open or is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La secuencia no está abierta o es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>The stream does not support both writing and seeking.</source>
          <target state="translated">La secuencia no admite operaciones de escritura ni de búsqueda.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.SetLength(System.Int64)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Se efectuó una llamada a los métodos después de cerrar la secuencia.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array from which to copy <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> bytes to the current buffered stream.</source>
          <target state="translated">Matriz de bytes desde la que se van a copiar bytes <bpt id="p1">&lt;c&gt;</bpt>count<ept id="p1">&lt;/c&gt;</ept> en la secuencia actual almacenada en el búfer.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The offset in the buffer at which to begin copying bytes to the current buffered stream.</source>
          <target state="translated">Desplazamiento en el búfer donde se comienzan a copiar bytes en la secuencia almacenada en el búfer actual.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to be written to the current buffered stream.</source>
          <target state="translated">Número de bytes que se deben escribir en la secuencia almacenada en el búfer actual.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Copies bytes to the buffered stream and advances the current position within the buffered stream by the number of bytes written.</source>
          <target state="translated">Copia bytes en la secuencia almacenada en el búfer y avanza la posición actual dentro de la secuencia almacenada en el búfer según el número de bytes escritos.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> class.</source>
          <target state="translated">Este ejemplo de código forma parte de un ejemplo mayor proporcionado para el <ph id="ph1">&lt;xref:System.IO.BufferedStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Length of <ph id="ph1">&lt;paramref name="array" /&gt;</ph> minus <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> is less than <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">La longitud de <ph id="ph1">&lt;paramref name="array" /&gt;</ph> menos <ph id="ph2">&lt;paramref name="offset" /&gt;</ph> es menor que <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">La secuencia está cerrada o es <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream does not support writing.</source>
          <target state="translated">La secuencia no admite escritura.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Se efectuó una llamada a los métodos después de cerrar la secuencia.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">Búfer del que se van a escribir datos.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">Desplazamiento de bytes de base cero de <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> desde donde se van a empezar a copiar bytes en la secuencia.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Número máximo de bytes que se pueden escribir.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token para supervisar solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">Escribe de forma asincrónica una secuencia de bytes en la secuencia actual, se hace avanzar la posición actual dentro de la secuencia por el número de bytes escritos y controla las solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Tarea que representa la operación de escritura asincrónica.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>You can create a cancellation token by creating an instance of the <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> class and passing the <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> property as the <ph id="ph3">`cancellationToken`</ph> parameter.</source>
          <target state="translated">Puede crear un token de cancelación mediante la creación de una instancia de la <ph id="ph1">&lt;xref:System.Threading.CancellationTokenSource&gt;</ph> clase y pasar la <ph id="ph2">&lt;xref:System.Threading.CancellationTokenSource.Token%2A&gt;</ph> propiedad como el <ph id="ph3">`cancellationToken`</ph> parámetro.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is negative.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="offset" /&gt;</ph> o <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The sum of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> and <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is larger than the buffer length.</source>
          <target state="translated">La suma de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> y <ph id="ph2">&lt;paramref name="count" /&gt;</ph> es mayor que la longitud del búfer.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream does not support writing.</source>
          <target state="translated">La secuencia no admite escritura.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream has been disposed.</source>
          <target state="translated">Se ha eliminado la secuencia.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The stream is currently in use by a previous write operation.</source>
          <target state="translated">La secuencia está actualmente en uso por una operación de escritura anterior.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source>A byte to write to the stream.</source>
          <target state="translated">Un byte que se va a escribir en la secuencia.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the buffered stream.</source>
          <target state="translated">Escribe un byte en la posición actual de la secuencia almacenada en el búfer.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source>The stream does not support writing.</source>
          <target state="translated">La secuencia no admite escritura.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source><ph id="ph1">&lt;paramref name="value" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.BufferedStream.WriteByte(System.Byte)">
          <source>Methods were called after the stream was closed.</source>
          <target state="translated">Se efectuó una llamada a los métodos después de cerrar la secuencia.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>