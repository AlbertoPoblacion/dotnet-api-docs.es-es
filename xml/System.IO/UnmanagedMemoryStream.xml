<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="UnmanagedMemoryStream.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b728a1edec5c6ce73a141a1907946387ff5086563a6.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a1edec5c6ce73a141a1907946387ff5086563a6</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Provides access to unmanaged blocks of memory from managed code.</source>
          <target state="translated">Proporciona acceso a los bloques de memoria no administrada desde el código administrado.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.</source>
          <target state="translated">Esta clase admite el acceso a memoria no administrada usando el modelo basado en secuencias existente y no requiere que el contenido en la memoria no administrada se copia en el montón.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IO.UnmanagedMemoryStream">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>The user does not have the required permission.</source>
          <target state="translated">El usuario no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">para tener acceso a memoria no administrada.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">Puntero a una ubicación de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The length of the memory to use.</source>
          <target state="translated">Longitud de la memoria que se va a utilizar.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class using the specified location and memory length.</source>
          <target state="translated">Inicializa una instancia nueva de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> utilizando la ubicación y la longitud de memoria especificadas.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>This constructor creates a new instance of the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class, and by default sets the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property to <ph id="ph3">`false`</ph> and the <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property to <ph id="ph5">`true`</ph>.</source>
          <target state="translated">Este constructor crea una nueva instancia de la <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase y, de forma predeterminada establece el <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> propiedad a <ph id="ph3">`false`</ph> y <ph id="ph4">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> propiedad a <ph id="ph5">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph> property is set to the value of the <ph id="ph2">`length`</ph> parameter and cannot be changed.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph> propiedad está establecida en el valor de la <ph id="ph2">`length`</ph> parámetro y no se puede cambiar.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The user does not have the required permission.</source>
          <target state="translated">El usuario no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="length" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> is large enough to cause an overflow.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="length" /&gt;</ph> es suficientemente alto como para causar un desbordamiento.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">para tener acceso a memoria no administrada.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">Búfer que va a contener la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">Posición de byte del búfer en la que va a comenzar la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">Longitud de la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset and length.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> en un búfer seguro con un desplazamiento y una longitud especificados.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">Puntero a una ubicación de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the memory to use.</source>
          <target state="translated">Longitud de la memoria que se va a utilizar.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">Cantidad total de memoria asignada a la secuencia.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values.</source>
          <target state="translated">Uno de los valores de <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class using the specified location, memory length, total amount of memory, and file access values.</source>
          <target state="translated">Inicializa una instancia nueva de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> utilizando los valores especificados de ubicación, longitud de memoria, cantidad total de memoria y acceso a archivos.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`length`</ph> parameter defines the current amount of memory in use.</source>
          <target state="translated">El <ph id="ph1">`length`</ph> parámetro define la cantidad actual de memoria en uso.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>If reading or appending data to the stream, the <ph id="ph1">`length`</ph> value should be equal to the amount of valid data in the stream to be read from or preserved.</source>
          <target state="translated">Si se leen o anexar datos a la secuencia, la <ph id="ph1">`length`</ph> valor debe ser igual a la cantidad de datos válidos en la secuencia que se leen del o conservado.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>If writing to the stream, this value should be zero.</source>
          <target state="translated">Si se escribe en la secuencia, este valor debe ser cero.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`capacity`</ph> parameter indicates the amount of total memory available.</source>
          <target state="translated">El <ph id="ph1">`capacity`</ph> parámetro indica la cantidad de memoria total disponible.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This value can describe a region that is longer than the length specified, or indicate a region that can be appended to.</source>
          <target state="translated">Este valor puede describir una región que supera la longitud especificada, o indicar una región que se puede anexar a.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Any attempt to write beyond this value will fail.</source>
          <target state="translated">Cualquier intento de escribir más allá de este valor se producirá un error.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">`access`</ph> parameter sets the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> properties.</source>
          <target state="translated">El <ph id="ph1">`access`</ph> conjuntos de parámetros del <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>, y <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> propiedades.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Note that specifying <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph> does not guarantee that the stream will be writable.</source>
          <target state="translated">Tenga en cuenta que si se especifica <ph id="ph1">&lt;xref:System.IO.FileAccess.Write&gt;</ph> no garantiza que la secuencia sea modificable.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.</source>
          <target state="translated">Los parámetros de acceso permiten al implementador crear un objeto cuya implementación puede coincidir con la secuencia real que se expone.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The user does not have the required permission.</source>
          <target state="translated">El usuario no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="length" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> value is less than zero.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is greater than the <ph id="ph2">&lt;paramref name="capacity" /&gt;</ph> value.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="length" /&gt;</ph> es mayor que el valor de <ph id="ph2">&lt;paramref name="capacity" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">para tener acceso a memoria no administrada.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">Búfer que va a contener la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">Posición de byte del búfer en la que va a comenzar la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">Longitud de la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">Modo de acceso a archivos para la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> en un búfer seguro con un desplazamiento, una longitud y un acceso a archivo especificados.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>Gets a value indicating whether a stream supports reading.</source>
          <target state="translated">Obtiene un valor que indica si una secuencia admite operaciones de lectura.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the object was created by a constructor with an <ph id="ph2">&lt;paramref name="access" /&gt;</ph> parameter that did not include reading the stream and if the stream is closed; otherwise, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> si un constructor creó el objeto con un parámetro <ph id="ph2">&lt;paramref name="access" /&gt;</ph> que no incluía la lectura de la secuencia y si la secuencia está cerrada; en caso contrario, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>This property indicates whether the current stream object supports reading.</source>
          <target state="translated">Esta propiedad indica si el objeto de secuencia actual admite lectura.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanRead">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property before attempting to display the contents to the console.</source>
          <target state="translated">En este ejemplo, un <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> objeto se pasa a un método que comprueba la <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> propiedad antes de intentar mostrar el contenido en la consola.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source>Gets a value indicating whether a stream supports seeking.</source>
          <target state="translated">Obtiene un valor que indica si una secuencia admite búsquedas.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the stream is closed; otherwise, <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> si la secuencia está cerrada; en caso contrario, <ph id="ph2">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanSeek">
          <source>This property indicates whether the current stream object supports seeking.</source>
          <target state="translated">Esta propiedad indica si el objeto de secuencia actual admite búsquedas.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>Gets a value indicating whether a stream supports writing.</source>
          <target state="translated">Obtiene un valor que indica si una secuencia admite operaciones de escritura.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if the object was created by a constructor with an <ph id="ph2">&lt;paramref name="access" /&gt;</ph> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> si el objeto fue creado por un constructor con un valor del parámetro <ph id="ph2">&lt;paramref name="access" /&gt;</ph> que admite la escritura o fue creado por un constructor que no tenía ningún parámetro, o si la secuencia está cerrada; en caso contrario, <ph id="ph3">&lt;see langword="true" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>This property indicates whether the current stream object supports writing.</source>
          <target state="translated">Esta propiedad indica si el objeto de secuencia actual admite escritura.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.CanWrite">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property before attempting to write the data to the stream.</source>
          <target state="translated">En este ejemplo, un <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> objeto se pasa a un método que comprueba la <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> propiedad antes de intentar escribir los datos en la secuencia.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).</source>
          <target state="translated">Obtiene la longitud de la secuencia (tamaño) o la cantidad total de memoria asignada a una secuencia (capacidad).</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>The size or capacity of the stream.</source>
          <target state="translated">El tamaño o la capacidad de la secuencia.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>This property returns the <ph id="ph1">`capacity`</ph> value provided to the constructor.</source>
          <target state="translated">Esta propiedad devuelve el <ph id="ph1">`capacity`</ph> valor proporcionado al constructor.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>If no <ph id="ph1">`capacity`</ph> value was specified when the stream was initialized, this property returns the stream length.</source>
          <target state="translated">Si no hay ningún <ph id="ph1">`capacity`</ph> valor se especificó cuando se inicializó la secuencia, esta propiedad devuelve la longitud de la secuencia.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Capacity">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to release both managed and unmanaged resources; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to release only unmanaged resources.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para liberar tanto recursos administrados como no administrados; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para liberar únicamente recursos no administrados.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> and optionally releases the managed resources.</source>
          <target state="translated">Libera los recursos no administrados que usa <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> y, de forma opcional, libera los recursos administrados.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>This method is called by the public <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.</source>
          <target state="translated">Se llama a este método público <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> método y <ph id="ph2">&lt;xref:System.Object.Finalize%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> method with the <ph id="ph3">`disposing`</ph> parameter set to <ph id="ph4">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> se invoca el protegido <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> método con el <ph id="ph3">`disposing`</ph> parámetro establecido en <ph id="ph4">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> with <ph id="ph3">`disposing`</ph> set to <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Object.Finalize%2A&gt;</ph> invoca <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> con <ph id="ph3">`disposing`</ph> establecido en <ph id="ph4">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>When the <ph id="ph1">`disposing`</ph> parameter is <ph id="ph2">`true`</ph>, this method releases all resources held by any managed objects that this <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> references.</source>
          <target state="translated">Cuando el parámetro <ph id="ph1">`disposing`</ph> es <ph id="ph2">`true`</ph>, este método libera todos los recursos retenidos por los objetos administrados a los que el control <ph id="ph3">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> hace referencia.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>This method invokes the <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.</source>
          <target state="translated">Este método invoca al método <ph id="ph1">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> de cada uno de los objetos a los que se hace referencia.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> can be called multiple times by other objects.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> puede recibir varias llamadas de otros objetos.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph> be careful not to reference objects that have been previously disposed of in an earlier call to <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</source>
          <target state="translated">Al reemplazar <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph> tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <ph id="ph2">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>For more information about how to implement <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>, see <bpt id="p1">[</bpt>Implementing a Dispose Method<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
          <target state="translated">Para obtener más información sobre cómo implementar <ph id="ph1">&lt;see cref="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)" /&gt;</ph>, consulte <bpt id="p1">[</bpt>implementa un método Dispose<ept id="p1">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
          <source>For more information about <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</source>
          <target state="translated">Para obtener más información acerca de <ph id="ph1">&lt;see cref="M:System.ComponentModel.Component.Dispose" /&gt;</ph> y <ph id="ph2">&lt;see cref="M:System.Object.Finalize" /&gt;</ph>, consulte <bpt id="p1">[</bpt>limpiar recursos no administrados<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> method so that no action is performed.</source>
          <target state="translated">Reemplaza el método <ph id="ph1">&lt;see cref="M:System.IO.Stream.Flush" /&gt;</ph> de modo que no se realice ninguna acción.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>This method performs no action for this class but is included as part of the <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> base class.</source>
          <target state="translated">Este método no realiza ninguna acción para esta clase, pero se incluye como parte de la <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph> clase base.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>Since any data is written to RAM, this method is redundant.</source>
          <target state="translated">Puesto que los datos se escriben en la memoria RAM, este método es redundante.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Flush">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token para supervisar solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Overrides the <ph id="ph1">&lt;see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /&gt;</ph> method so that the operation is cancelled if specified, but no other action is performed.</source>
          <target state="translated">Invalida el método <ph id="ph1">&lt;see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /&gt;</ph> para que la operación se cancele si se especifica, pero no se realiza ninguna otra acción.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>Available starting in .NET Framework 4.6</source>
          <target state="translated">Disponible a partir de .NET Framework 4.6</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous flush operation.</source>
          <target state="translated">Tarea que representa la operación de vaciado asincrónico.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
          <source>If the operation isn’t cancelled, the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> calls the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph> method, which means that no action performed.</source>
          <target state="translated">Si no se cancela la operación, el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> llamadas el <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph> método, lo que significa que se realice ninguna acción.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="T:System.IO.UnmanagedMemoryStream">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer, or by using a pointer to an unmanaged memory location.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> en un búfer seguro o utilizando un puntero a una ubicación de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>A pointer to an unmanaged memory location.</source>
          <target state="translated">Puntero a una ubicación de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the memory to use.</source>
          <target state="translated">Longitud de la memoria que se va a utilizar.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The total amount of memory assigned to the stream.</source>
          <target state="translated">Cantidad total de memoria asignada a la secuencia.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph> values.</source>
          <target state="translated">Uno de los valores de <ph id="ph1">&lt;see cref="T:System.IO.FileAccess" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class by using a pointer to an unmanaged memory location.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> utilizando un puntero a una ubicación de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This method is equivalent to the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph> constructor.</source>
          <target state="translated">Este método es equivalente a la <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph> constructor.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor.</source>
          <target state="translated">Admite métodos que necesitan inicializar el puntero antes de establecer las variables de secuencia y, por lo tanto, no se pueden llamar al constructor con parámetros.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Such methods should use the default constructor, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>, initialize the pointer, and then invoke the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph> method.</source>
          <target state="translated">Estos métodos deben utilizar el constructor predeterminado, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>, inicializar el puntero y, a continuación, invoque el <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The user does not have the required permission.</source>
          <target state="translated">El usuario no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> value is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El valor <ph id="ph1">&lt;paramref name="pointer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is less than zero.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="length" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> value is less than zero.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The <ph id="ph1">&lt;paramref name="length" /&gt;</ph> value is large enough to cause an overflow.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="length" /&gt;</ph> es suficientemente alto como para causar un desbordamiento.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>for accessing unmanaged memory.</source>
          <target state="translated">para tener acceso a memoria no administrada.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The buffer to contain the unmanaged memory stream.</source>
          <target state="translated">Búfer que va a contener la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The byte position in the buffer at which to start the unmanaged memory stream.</source>
          <target state="translated">Posición de byte del búfer en la que va a comenzar la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The length of the unmanaged memory stream.</source>
          <target state="translated">Longitud de la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>The mode of file access to the unmanaged memory stream.</source>
          <target state="translated">Modo de acceso a archivos para la secuencia de memoria no administrada.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> class in a safe buffer with a specified offset, length, and file access.</source>
          <target state="translated">Inicializa una nueva instancia de la clase <ph id="ph1">&lt;see cref="T:System.IO.UnmanagedMemoryStream" /&gt;</ph> en un búfer seguro con un desplazamiento, una longitud y un acceso a archivo especificados.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>Gets the length of the data in a stream.</source>
          <target state="translated">Obtiene la longitud de los datos de una secuencia.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The length of the data in the stream.</source>
          <target state="translated">La longitud de los datos de la secuencia.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>If unchanged since the stream was initialized, this property returns the length value provided to the constructor.</source>
          <target state="translated">Si no han cambiado desde la secuencia se ha inicializado, esta propiedad devuelve el valor de longitud proporcionado al constructor.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>If changes to the stream have occurred, this property reflects any changes to the length of the data.</source>
          <target state="translated">Si se han producido cambios en la secuencia, esta propiedad refleja los cambios realizados en la longitud de los datos.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Length">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>Gets or sets the current position in a stream.</source>
          <target state="translated">Obtiene o establece la posición actual en una secuencia.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The current position in the stream.</source>
          <target state="translated">La posición actual en la secuencia.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>When a stream is initialized, this property is set to zero.</source>
          <target state="translated">Cuando se inicializa una secuencia, esta propiedad se establece en cero.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> methods.</source>
          <target state="translated">Aunque puede establecer la posición de la secuencia más allá de la capacidad de la secuencia, no podrá tener acceso a dicha área mediante el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> y <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> métodos.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> will return 0 and <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> will throw a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> devolverá 0 y <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> producirá un <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>This support is primarily for design and code compatibility with basic stream operations.</source>
          <target state="translated">Esta compatibilidad es principalmente para la compatibilidad de diseño y el código con operaciones de secuencia básica.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.Position">
          <source>The position is set to a value that is less than zero, or the position is larger than <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> or results in overflow when added to the current pointer.</source>
          <target state="translated">La posición tiene un valor menor que cero, es mayor que <ph id="ph1">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph> o genera un desbordamiento cuando se agrega al puntero actual.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Gets or sets a byte pointer to a stream based on the current position in the stream.</source>
          <target state="translated">Obtiene o establece un puntero de byte a una secuencia basándose en la posición actual en la secuencia.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>A byte pointer.</source>
          <target state="translated">Un puntero de byte.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>To return a pointer to the entire stream, set the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph> property to zero, and then call this property.</source>
          <target state="translated">Para devolver un puntero a la secuencia completa, establezca el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph> propiedad a cero y, a continuación, llame a esta propiedad.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The current position is larger than the capacity of the stream.</source>
          <target state="translated">La posición actual es mayor que la capacidad de la secuencia.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The position is being set is not a valid position in the current stream.</source>
          <target state="translated">La posición que se establece no es una posición válida en la secuencia actual.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The pointer is being set to a lower value than the starting position of the stream.</source>
          <target state="translated">El puntero se establece en un valor menor que la posición inicial de la secuencia.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The stream was initialized for use with a <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph>.</source>
          <target state="translated">La secuencia se inicializó para su uso con <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeBuffer" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /&gt;</ph> property is valid only for streams that are initialized with a <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph> pointer.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /&gt;</ph> es válida únicamente para secuencias que se inicializan con un puntero de <ph id="ph2">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>for calling unmanaged code, such as calling native code with platform invoke or COM integration.</source>
          <target state="translated">para llamar a código no administrado, como llamar a código nativo con la plataforma de invocación o integración de COM.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</source>
          <target state="translated">Acción de seguridad: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IO.UnmanagedMemoryStream.PositionPointer">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>When this method returns, contains the specified byte array with the values between <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> and (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) replaced by the bytes read from the current source.</source>
          <target state="translated">Cuando este método finaliza, contiene la matriz de bytes especificada con los valores comprendidos entre <bpt id="p1">&lt;c&gt;</bpt>offset<ept id="p1">&lt;/c&gt;</ept> y (<bpt id="p2">&lt;c&gt;</bpt>offset<ept id="p2">&lt;/c&gt;</ept><ph id="ph1"> + </ph><bpt id="p3">&lt;c&gt;</bpt>count<ept id="p3">&lt;/c&gt;</ept> - 1) reemplazada por los bytes leídos del origen actual.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">Este parámetro se pasa sin inicializar.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin storing the data read from the current stream.</source>
          <target state="translated">Desplazamiento en bytes de base cero de <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> donde se comienzan a almacenar los datos leídos de la secuencia actual.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The maximum number of bytes to read from the current stream.</source>
          <target state="translated">Número máximo de bytes que se van a leer de la secuencia actual.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Reads the specified number of bytes into the specified array.</source>
          <target state="translated">Lee el número especificado de bytes y los introduce en la matriz especificada.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The total number of bytes read into the buffer.</source>
          <target state="translated">Número total de bytes leídos en el búfer.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</source>
          <target state="translated">Puede ser menor que el número de bytes solicitado si dicho número no está disponible, o puede ser cero (0) si se alcanza el final de la secuencia.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">`offset`</ph> parameter gives the offset of the byte in the <ph id="ph2">`array`</ph> parameter (the buffer index) at which to begin reading, and the <ph id="ph3">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.</source>
          <target state="translated">El <ph id="ph1">`offset`</ph> parámetro indica el desplazamiento del byte en el <ph id="ph2">`array`</ph> parámetro (índice de búfer) en que se va a comenzar la lectura y el <ph id="ph3">`count`</ph> parámetro proporciona el número máximo de bytes que se lee en esta secuencia.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The returned value is the actual number of bytes read, or zero if the end of the stream is reached.</source>
          <target state="translated">El valor devuelto es el número real de bytes leídos, o cero si se alcanza el final de la secuencia.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If the read operation is successful, the current position of the stream is advanced by the number of bytes read.</source>
          <target state="translated">Si la operación de lectura se realiza correctamente, la posición actual de la secuencia avanza por el número de bytes leídos.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If an exception occurs, the current position of the stream is unchanged.</source>
          <target state="translated">Si se produce una excepción, no se modifica la posición actual de la secuencia.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> method returns zero only after reaching the end of the stream.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> método devuelva cero únicamente después de alcanzar el final de la secuencia.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>Otherwise, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> always reads at least one byte from the stream before returning.</source>
          <target state="translated">En caso contrario, <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> siempre lee al menos un byte de la secuencia antes de devolver.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>If no data is available from the stream upon a call to <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>, the method will block until at least one byte of data can be returned.</source>
          <target state="translated">Si no hay datos disponibles en la secuencia tras una llamada a <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>, el método se bloqueará hasta que se puede devolver al menos un byte de datos.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.</source>
          <target state="translated">Una implementación es gratuita devolver menos bytes de los solicitados incluso si no se ha alcanzado el final de la secuencia.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying memory does not support reading.</source>
          <target state="translated">La memoria subyacente no admite operaciones de lectura.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /&gt;</ph> property is set to <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">La propiedad <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /&gt;</ph> se establece en <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is set to <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> debe establecerse en <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than zero.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> parameter is less than zero.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="count" /&gt;</ph> es menor que cero.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
          <source>The length of the buffer array minus the <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter is less than the <ph id="ph2">&lt;paramref name="count" /&gt;</ph> parameter.</source>
          <target state="translated">La longitud de la matriz de búferes menos el parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es menor que el parámetro <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write the data into.</source>
          <target state="translated">Búfer en el que se escriben los datos.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> at which to begin writing data from the stream.</source>
          <target state="translated">Desplazamiento de bytes de <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> donde se van a empezar a escribir datos de la secuencia.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to read.</source>
          <target state="translated">Número máximo de bytes que se pueden leer.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token para supervisar solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously reads the specified number of bytes into the specified array.</source>
          <target state="translated">Lee de manera asincrónica el número especificado de bytes y los introduce en la matriz especificada.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Available starting in .NET Framework 4.6</source>
          <target state="translated">Disponible a partir de .NET Framework 4.6</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous read operation.</source>
          <target state="translated">Tarea que representa la operación de lectura asincrónica.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The value of the <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> parameter contains the total number of bytes read into the buffer.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="TResult" /&gt;</ph> contiene el número total de bytes leídos en el búfer.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</source>
          <target state="translated">El valor del resultado puede ser menor que el número de bytes solicitados si el número de bytes disponibles actualmente es menor que el número solicitado o puede ser 0 (cero) si se ha llegado al final de la secuencia.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If an exception occurs during the read operation, it will be set as the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> of the property of the returned task.</source>
          <target state="translated">Si se produce una excepción durante la operación de lectura, se establecerá como el <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> de la propiedad de la tarea devuelta.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.</source>
          <target state="translated">Lee un byte de una secuencia y hace avanzar la posición dentro de la secuencia en un byte, o devuelve -1 si está al final de la secuencia.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The unsigned byte cast to an <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph> object, or -1 if at the end of the stream.</source>
          <target state="translated">Byte sin signo convertido en un objeto <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>, o -1 si está al final de la secuencia.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>Use this method to return integer values from the stream.</source>
          <target state="translated">Utilice este método para devolver valores enteros de la secuencia.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property before attempting to read and display the contents to the console.</source>
          <target state="translated">En este ejemplo, un <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> objeto se pasa a un método que comprueba la <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> propiedad antes de intentar leer y mostrar el contenido en la consola.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The underlying memory does not support reading.</source>
          <target state="translated">La memoria subyacente no admite operaciones de lectura.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.ReadByte">
          <source>The current position is at the end of the stream.</source>
          <target state="translated">La posición actual está al final de la secuencia.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The point relative to <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept> to begin seeking from.</source>
          <target state="translated">Punto, con respecto a <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>, a partir del que se va a empezar a buscar.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Specifies the beginning, the end, or the current position as a reference point for <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>, using a value of type <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</source>
          <target state="translated">Especifica el comienzo, el final o la posición actual como un punto de referencia para <bpt id="p1">&lt;c&gt;</bpt>origin<ept id="p1">&lt;/c&gt;</ept>, con un valor de tipo <ph id="ph1">&lt;see cref="T:System.IO.SeekOrigin" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>Sets the current position of the current stream to the given value.</source>
          <target state="translated">Establece la posición actual de la secuencia actual en el valor especificado.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The new position in the stream.</source>
          <target state="translated">Nueva posición en la secuencia.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>For more information about seeking, see <ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>.</source>
          <target state="translated">Para obtener más información sobre las búsquedas, consulte <ph id="ph1">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>An attempt was made to seek before the beginning of the stream.</source>
          <target state="translated">Se realizó un intento de búsqueda antes del principio de la secuencia.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> value is larger than the maximum size of the stream.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> es mayor que el tamaño máximo de la secuencia.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> is invalid.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="loc" /&gt;</ph> no es válido.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The length of the stream.</source>
          <target state="translated">Longitud de la secuencia.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>Sets the length of a stream to a specified value.</source>
          <target state="translated">Establece la longitud de una secuencia en un valor especificado.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the given value is less than the current length of the stream, the stream is truncated.</source>
          <target state="translated">Si el valor especificado es menor que la longitud actual de la secuencia, se trunca la secuencia.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the given value is larger than the current length of the stream, the stream is expanded.</source>
          <target state="translated">Si el valor especificado es mayor que la longitud actual de la secuencia, se expande la secuencia.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.</source>
          <target state="translated">Si la secuencia se expande, el contenido de la secuencia entre la antigua y las nuevas longitudes es indefinido.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>A stream must support both writing and seeking for <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph> to work.</source>
          <target state="translated">Una secuencia debe admitir operaciones de escritura y de que deseen usar <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph> para que funcione.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>An I/O error has occurred.</source>
          <target state="translated">Se produjo un error de E/S.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">La memoria subyacente no admite operaciones de escritura.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se realiza un intento de escritura en la secuencia y el valor de la propiedad <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The specified <ph id="ph1">&lt;paramref name="value" /&gt;</ph> exceeds the capacity of the stream.</source>
          <target state="translated">El valor especificado del parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> supera la capacidad de la secuencia.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
          <source>The specified <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is negative.</source>
          <target state="translated">El valor especificado del parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> es negativo.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The byte array from which to copy bytes to the current stream.</source>
          <target state="translated">Matriz de bytes de la que se copian bytes a la secuencia actual.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The offset in the buffer at which to begin copying bytes to the current stream.</source>
          <target state="translated">Posición de desplazamiento en el búfer donde se comienzan a copiar bytes a la secuencia actual.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write to the current stream.</source>
          <target state="translated">Número de bytes que se van a escribir en la secuencia actual.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writes a block of bytes to the current stream using data from a buffer.</source>
          <target state="translated">Escribe un bloque de bytes en la secuencia actual utilizando los datos de un búfer.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>Writing occurs at the current position in the stream.</source>
          <target state="translated">La escritura se produce en la posición actual en la secuencia.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">La memoria subyacente no admite operaciones de escritura.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se realiza un intento de escritura en la secuencia y el valor de la propiedad <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="count" /&gt;</ph> value is greater than the capacity of the stream.</source>
          <target state="translated">El valor de <ph id="ph1">&lt;paramref name="count" /&gt;</ph> es mayor que la capacidad de la secuencia.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The position is at the end of the stream capacity.</source>
          <target state="translated">La posición está al final de la capacidad de la secuencia.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>An I/O error occurs.</source>
          <target state="translated">Error de E/S.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>One of the specified parameters is less than zero.</source>
          <target state="translated">El valor de uno de los parámetros especificados es menor que cero.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> parameter minus the length of the <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> parameter is less than the <ph id="ph3">&lt;paramref name="count" /&gt;</ph> parameter.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> menos la longitud del parámetro <ph id="ph2">&lt;paramref name="buffer" /&gt;</ph> es menor que el valor del parámetro <ph id="ph3">&lt;paramref name="count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The buffer to write data from.</source>
          <target state="translated">Búfer del que se van a escribir datos.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The zero-based byte offset in <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> from which to begin copying bytes to the stream.</source>
          <target state="translated">Desplazamiento de bytes de base cero de <bpt id="p1">&lt;c&gt;</bpt>buffer<ept id="p1">&lt;/c&gt;</ept> desde donde se van a empezar a copiar bytes en la secuencia.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The maximum number of bytes to write.</source>
          <target state="translated">Número máximo de bytes que se pueden escribir.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The token to monitor for cancellation requests.</source>
          <target state="translated">Token para supervisar solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>The default value is <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</source>
          <target state="translated">El valor predeterminado es <ph id="ph1">&lt;see cref="P:System.Threading.CancellationToken.None" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.</source>
          <target state="translated">Escribe de forma asincrónica una secuencia de bytes en la secuencia actual, se hace avanzar la posición actual dentro de la secuencia por el número de bytes escritos y controla las solicitudes de cancelación.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>Available starting in .NET Framework 4.6</source>
          <target state="translated">Disponible a partir de .NET Framework 4.6</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>A task that represents the asynchronous write operation.</source>
          <target state="translated">Tarea que representa la operación de escritura asincrónica.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
          <source>If an exception occurs during the write operation, it will be set as the <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> of the property of the returned task.</source>
          <target state="translated">Si se produce una excepción durante la operación de escritura, se establecerá como el <ph id="ph1">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=nameWithType&gt;</ph> de la propiedad de la tarea devuelta.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>A byte value written to the stream.</source>
          <target state="translated">Valor de byte que se escribe en la secuencia.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>Writes a byte to the current position in the file stream.</source>
          <target state="translated">Escribe un byte en la posición actual de la secuencia de archivo.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The following code example demonstrates how to read from and write to unmanaged memory using the <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo leer y escribir en memoria no administrada usando el <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>A block of unmanaged memory is allocated and de-allocated using the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> class.</source>
          <target state="translated">Un bloque de memoria no administrada se asignan y se desasigna mediante la <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>In this example, an <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> object is passed to a method which checks the <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property before attempting to write the data to the stream.</source>
          <target state="translated">En este ejemplo, un <ph id="ph1">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> objeto se pasa a un método que comprueba la <ph id="ph2">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> propiedad antes de intentar escribir los datos en la secuencia.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The stream is closed.</source>
          <target state="translated">La secuencia está cerrada.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The underlying memory does not support writing.</source>
          <target state="translated">La memoria subyacente no admite operaciones de escritura.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>An attempt is made to write to the stream and the <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> property is <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Se realiza un intento de escritura en la secuencia y el valor de la propiedad <ph id="ph1">&lt;see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /&gt;</ph> es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> o -</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The current position is at the end of the capacity of the stream.</source>
          <target state="translated">La posición actual está al final de la capacidad de la secuencia.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
          <source>The supplied <ph id="ph1">&lt;paramref name="value" /&gt;</ph> causes the stream exceed its maximum capacity.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="value" /&gt;</ph> proporcionado hace que la secuencia supere su capacidad máxima.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>