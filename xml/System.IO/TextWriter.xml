<Type Name="TextWriter" FullName="System.IO.TextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="667e4bb25cd995f5d25eec9200ca35e1a3510860" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36483951" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TextWriter : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TextWriter extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.TextWriter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TextWriter&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextWriter abstract : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type TextWriter = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a writer that can write a sequential series of characters. This class is abstract.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.TextWriter> es la clase base abstracta de <xref:System.IO.StreamWriter> y <xref:System.IO.StringWriter>, que escriben caracteres en secuencias y cadenas, respectivamente. Cree una instancia de <xref:System.IO.TextWriter> para escribir un objeto en una cadena, escribir cadenas en un archivo o serializar XML. También puede utilizar una instancia de <xref:System.IO.TextWriter> para escribir texto en un almacén de respaldo personalizado utilizando las mismas API que utilizaría para una cadena o una secuencia, o para agregar compatibilidad con el formato de texto.  
  
 Todos los `Write` métodos de <xref:System.IO.TextWriter> tener tipos de datos primitivos como parámetros escriben los valores como cadenas.  
  
 De forma predeterminada, un <xref:System.IO.TextWriter> no es seguro para la ejecución de subprocesos. Consulte <xref:System.IO.TextWriter.Synchronized%2A?displayProperty=nameWithType> para un contenedor seguro para subprocesos.  
  
> [!IMPORTANT]
>  Este tipo implementa la <xref:System.IDisposable> interfaz. Cuando haya terminado de utilizar cualquier tipo que se deriva este tipo, debe eliminar del mismo directa o indirectamente. Para deshacerse del tipo directamente, llame a su <xref:System.IO.TextWriter.Dispose%2A> método en un `try` / `catch` bloque. Para deshacerse de él indirectamente, use una construcción de lenguaje como `using` (en C#) o `Using` (en Visual Basic). Para obtener más información, consulte Dispose y la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
   
  
## Examples  
 La clase <xref:System.IO.TextWriter> es abstracta. Por lo tanto, no inicializarlo en el código. El <xref:System.IO.StreamWriter> clase se deriva de <xref:System.IO.TextWriter> y proporciona implementaciones de los miembros para escribir en una secuencia. En el ejemplo siguiente se muestra cómo escribir dos líneas que se componen de valores de cadena a un archivo de texto usando el <xref:System.IO.StreamWriter.WriteLineAsync%28System.String%29> método.  
  
 Reemplace Dispose en una clase derivada para proporcionar  
  
 [!code-csharp[System.IO.StreamWriter#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.StreamWriter/CS/example23.cs#23)]
 [!code-vb[System.IO.StreamWriter#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.StreamWriter/VB/example23.vb#23)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Una clase derivada debe implementar la <see cref="M:System.IO.TextWriter.Write(System.Char)" /> método para crear una instancia útil de <see cref="T:System.IO.TextWriter" />.</para>
    </block>
    <altmember cref="T:System.IO.StreamWriter" />
    <altmember cref="T:System.IO.StringWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TextWriter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta sobrecarga del constructor si no desea proporcionar un valor para el <xref:System.IO.TextWriter.FormatProvider%2A> propiedad. Cuando el <xref:System.IO.TextWriter.FormatProvider%2A> propiedad es `null`, la referencia cultural del subproceso actual se utiliza para dar formato.  
  
 Utilice este constructor para las clases derivadas.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextWriter (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.#ctor(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (formatProvider As IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TextWriter(IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="new System.IO.TextWriter : IFormatProvider -&gt; System.IO.TextWriter" Usage="new System.IO.TextWriter formatProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> object that controls formatting.</param>
        <summary>Initializes a new instance of the <see cref="T:System.IO.TextWriter" /> class with the specified format provider.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta sobrecarga de constructor para proporcionar un valor para el <xref:System.IO.TextWriter.FormatProvider%2A> propiedad. El valor de la <xref:System.IO.TextWriter.FormatProvider%2A> propiedad especifica el formato específico de la referencia cultural que se usa cuando se llama a la <xref:System.IO.TextWriter.Write%2A> y <xref:System.IO.TextWriter.WriteLine%2A> métodos. Si no desea proporcionar un proveedor de formato, crear una instancia mediante el <xref:System.IO.TextWriter.%23ctor> constructor, que establece el <xref:System.IO.TextWriter.FormatProvider%2A> propiedad `null`. Cuando el <xref:System.IO.TextWriter.FormatProvider%2A> propiedad es `null`, la referencia cultural del subproceso actual se utiliza para dar formato.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="textWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the current writer and releases any system resources associated with the writer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta implementación de `Close` llamadas el <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=nameWithType> método y le pasa un `true` valor.  
  
 Vaciar la secuencia no hará que vacíe su correspondiente codificador subyacente a menos que se llame explícitamente a <xref:System.IO.TextWriter.Flush%2A> o `Close`. Establecer el <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType> propiedad `true` significa que los datos se vaciarán del búfer en la secuencia, pero el estado del codificador no se vaciará. Esto permite al codificador mantener su estado (caracteres parciales) para que sea posible codificar el siguiente bloque de caracteres correctamente. Este escenario afecta a UTF8 y UTF7 donde ciertos caracteres se pueden codificar solo después de que el codificador reciba el carácter o caracteres adyacentes.  
  
> [!NOTE]
>  En las clases derivadas, no invalide el <xref:System.IO.TextWriter.Close%2A> método. En su lugar, reemplace la <xref:System.IO.TextWriter.Dispose%28System.Boolean%29?displayProperty=nameWithType> método para agregar código para liberar recursos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreNewLine">
      <MemberSignature Language="C#" Value="protected char[] CoreNewLine;" />
      <MemberSignature Language="ILAsm" Value=".field family char[] CoreNewLine" />
      <MemberSignature Language="DocId" Value="F:System.IO.TextWriter.CoreNewLine" />
      <MemberSignature Language="VB.NET" Value="Protected CoreNewLine As Char() " />
      <MemberSignature Language="C++ CLI" Value="protected: cli::array &lt;char&gt; ^ CoreNewLine;" />
      <MemberSignature Language="F#" Value="val mutable CoreNewLine : char[]" Usage="System.IO.TextWriter.CoreNewLine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stores the newline characters used for this <see langword="TextWriter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Releases all resources used by the <see cref="T:System.IO.TextWriter" /> object.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by the <see cref="T:System.IO.TextWriter" /> object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Llame a <xref:System.IO.TextWriter.Dispose%2A> cuando haya terminado de usar <xref:System.IO.TextWriter>. El método <xref:System.IO.TextWriter.Dispose%2A> deja el <xref:System.IO.TextWriter> en un estado no utilizable. Después de llamar a <xref:System.IO.TextWriter.Dispose%2A>, debe liberar todas las referencias a la <xref:System.IO.TextWriter> para que el recolector de elementos no utilizados pueda reclamar la memoria que el <xref:System.IO.TextWriter> estaba ocupando.  
  
 Para obtener más información, consulte [limpiar recursos no administrados](~/docs/standard/garbage-collection/unmanaged.md) y [implementa un método Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 **Tenga en cuenta** llamada siempre <xref:System.IO.TextWriter.Dispose%2A> antes de liberar la última referencia a la <xref:System.IO.TextWriter>. En caso contrario, los recursos que está usando no se liberarán hasta que el recolector de elementos no utilizados llame al método <xref:System.IO.TextWriter> del objeto <xref:System.Object.Finalize%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally releases the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método es invocado por `Dispose` y <xref:System.Object.Finalize%2A>. De forma predeterminada, este método especifica la `disposing` parámetro como `true`. <xref:System.Object.Finalize%2A> Especifica la `disposing` parámetro como `false`.  
  
 Cuando el parámetro `disposing` es `true`, este método libera todos los recursos retenidos por los objetos administrados a los que el control <xref:System.IO.TextWriter> hace referencia. Este método invoca al método `Dispose` de cada uno de los objetos a los que se hace referencia.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IO.TextWriter.Dispose(System.Boolean)" /> puede recibir varias llamadas de otros objetos. Al reemplazar este método, tenga cuidado de no hacer referencia a objetos que se hayan eliminado en una llamada anterior a <see langword="Dispose" />. Para obtener más información acerca de cómo implementar este método, vea [implementar un Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Para obtener más información acerca de <see cref="M:System.IDisposable.Dispose" /> y <see cref="M:System.Object.Finalize" />, consulte [limpieza seguridad Resources](~/docs/standard/garbage-collection/unmanaged.md) no administrado.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public abstract System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.IO.TextWriter.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When overridden in a derived class, returns the character encoding in which the output is written.</summary>
        <value>Codificación de caracteres donde se escriben los resultados.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta propiedad es necesaria en algunos escenarios XML donde se debe escribir un encabezado que contiene la codificación utilizada por el `TextWriter`. Esto permite que el código XML consumir arbitrario `TextWriter` y genere el encabezado XML correcto.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public virtual void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Flush();" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit&#xA;override this.Flush : unit -&gt; unit" Usage="textWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método de forma predeterminada no hace nada, pero las clases derivadas pueden invalidar el método para proporcionar la funcionalidad adecuada.  
  
 Vaciar la secuencia no hará que vacíe su correspondiente codificador subyacente a menos que se llame explícitamente a `Flush` o <xref:System.IO.TextWriter.Close%2A>. Establecer <xref:System.IO.StreamWriter.AutoFlush%2A> a `true` significa que los datos se vaciarán del búfer en la secuencia, pero el estado del codificador no se vaciará. Esto permite al codificador mantener su estado (caracteres parciales) para que sea posible codificar el siguiente bloque de caracteres correctamente. Este escenario afecta a UTF8 y UTF7 donde ciertos caracteres sólo pueden codificarse después de que el codificador reciba el carácter o caracteres adyacentes.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.FlushAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FlushAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ FlushAsync();" />
      <MemberSignature Language="F#" Value="abstract member FlushAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.FlushAsync : unit -&gt; System.Threading.Tasks.Task" Usage="textWriter.FlushAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously clears all buffers for the current writer and causes any buffered data to be written to the underlying device.</summary>
        <returns>A task that represents the asynchronous flush operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The writer is currently in use by a previous write operation.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public virtual IFormatProvider FormatProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormatProvider : IFormatProvider" Usage="System.IO.TextWriter.FormatProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that controls formatting.</summary>
        <value>Objeto <see cref="T:System.IFormatProvider" /> para una referencia cultural específica o para las operaciones de formato de la referencia cultural actual si no se especificó otra referencia cultural.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor de la <xref:System.IO.TextWriter.FormatProvider%2A> propiedad especifica el formato específico de la referencia cultural que se usa cuando se llama a la <xref:System.IO.TextWriter.Write%2A> y <xref:System.IO.TextWriter.WriteLine%2A> métodos. Si no desea proporcionar un proveedor de formato, crear una instancia mediante el <xref:System.IO.TextWriter.%23ctor> constructor, que establece el <xref:System.IO.TextWriter.FormatProvider%2A> propiedad `null`. Cuando el <xref:System.IO.TextWriter.FormatProvider%2A> propiedad contiene `null`, la referencia cultural del subproceso actual se utiliza para dar formato.  
  
 Para obtener un ejemplo de creación de un archivo y escribir texto en un archivo, consulte [Cómo: escribir texto en un archivo](~/docs/standard/io/how-to-write-text-to-a-file.md). Para obtener un ejemplo de cómo leer texto desde un archivo, consulte [Cómo: leer texto desde un archivo](~/docs/standard/io/how-to-read-text-from-a-file.md). Para obtener un ejemplo de cómo leer y escribir en un archivo binario, vea [Cómo: leer y escribir en un Newly Created Data File](~/docs/standard/io/how-to-read-and-write-to-a-newly-created-data-file.md).  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public virtual string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.IO.TextWriter.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NewLine { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLine : string with get, set" Usage="System.IO.TextWriter.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the line terminator string used by the current <see langword="TextWriter" />.</summary>
        <value>Cadena de terminador de línea para el <see langword="TextWriter" /> actual.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La cadena de terminador de línea predeterminado es un retorno de carro seguido de una salto de línea ("\r\n").  
  
 La cadena de terminador de línea se escribe en la secuencia de texto cada vez que uno de los `WriteLine` se llama a métodos. En orden para el texto escrito por el `TextWriter` a ser legible por un <xref:System.IO.TextReader>, deben utilizarse únicamente "\n" o "\r\n" como cadenas de terminador. Si `NewLine` se establece en `null`, el carácter de nueva línea predeterminado se usa en su lugar.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.IO.TextWriter Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.IO.TextWriter Null" />
      <MemberSignature Language="DocId" Value="F:System.IO.TextWriter.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As TextWriter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::IO::TextWriter ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.IO.TextWriter" Usage="System.IO.TextWriter.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a <see langword="TextWriter" /> with no backing store that can be written to, but not read from.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use `Null` redirigir los resultados en una secuencia que no consumirá recursos del sistema operativo.  
  
 Cuando el <xref:System.IO.TextWriter.Write%2A?displayProperty=nameWithType> métodos se invocan en `Null`, simplemente se devuelve la llamada y ningún dato se escribe realmente en ningún almacén de respaldo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Synchronized">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Synchronized (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.TextWriter Synchronized(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Synchronized(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Synchronized (writer As TextWriter) As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::TextWriter ^ Synchronized(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="static member Synchronized : System.IO.TextWriter -&gt; System.IO.TextWriter" Usage="System.IO.TextWriter.Synchronized writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The <see langword="TextWriter" /> to synchronize.</param>
        <summary>Creates a thread-safe wrapper around the specified <see langword="TextWriter" />.</summary>
        <returns>A thread-safe wrapper.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todas las de escritura operaciones para el contenedor devuelto serán es seguro para subprocesos. Se llama a este método para asegurarse de que solo un subproceso a la vez puede ejecutar los métodos en el <xref:System.IO.TextWriter> instancia que se devuelve. Para obtener más información acerca de la sincronización y los subprocesos, vea [sincronizar datos para Multithreading](~/docs/standard/threading/synchronizing-data-for-multithreading.md).  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes data to a text string or stream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(bool value);" />
      <MemberSignature Language="F#" Value="abstract member Write : bool -&gt; unit&#xA;override this.Write : bool -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The <see langword="Boolean" /> value to write.</param>
        <summary>Writes the text representation of a <see langword="Boolean" /> value to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> método.  
  
 Este método da como resultado <xref:System.Boolean.TrueString?displayProperty=nameWithType> o <xref:System.Boolean.FalseString?displayProperty=nameWithType>.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(char value);" />
      <MemberSignature Language="F#" Value="abstract member Write : char -&gt; unit&#xA;override this.Write : char -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The character to write to the text stream.</param>
        <summary>Writes a character to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método de forma predeterminada no hace nada, pero las clases derivadas pueden invalidar el método para proporcionar la funcionalidad adecuada.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] -&gt; unit&#xA;override this.Write : char[] -&gt; unit" Usage="textWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array to write to the text stream.</param>
        <summary>Writes a character array to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A>.  
  
 Este método predeterminado llama el <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> método y pasa la matriz de caracteres completa. Si la matriz de caracteres es `null`, no se escribe nada.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Decimal value);" />
      <MemberSignature Language="F#" Value="abstract member Write : decimal -&gt; unit&#xA;override this.Write : decimal -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal value to write.</param>
        <summary>Writes the text representation of a decimal value to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IO.TextWriter.FormatProvider%2A> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(double value);" />
      <MemberSignature Language="F#" Value="abstract member Write : double -&gt; unit&#xA;override this.Write : double -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte floating-point value to write.</param>
        <summary>Writes the text representation of an 8-byte floating-point value to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.Double.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(int value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int -&gt; unit&#xA;override this.Write : int -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte signed integer to write.</param>
        <summary>Writes the text representation of a 4-byte signed integer to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.Int32.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(long value);" />
      <MemberSignature Language="F#" Value="abstract member Write : int64 -&gt; unit&#xA;override this.Write : int64 -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte signed integer to write.</param>
        <summary>Writes the text representation of an 8-byte signed integer to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.Int64.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 [Cómo: Escribir texto en un archivo](~/docs/standard/io/how-to-write-text-to-a-file.md)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : obj -&gt; unit&#xA;override this.Write : obj -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to write.</param>
        <summary>Writes the text representation of an object to the text string or stream by calling the <see langword="ToString" /> method on that object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga es equivalente a la <xref:System.IO.TextWriter.Write%28System.String%29> de sobrecarga.  
  
 Si el objeto especificado es `null`, no se realiza ninguna acción y no se produce ninguna excepción. En caso contrario, el objeto `ToString` método se llama para mostrar la representación de cadena y, a continuación, se escribe la cadena resultante en el flujo de salida. El <xref:System.IO.TextWriter.FormatProvider%2A> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(valuetype System.ReadOnlySpan`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member Write : ReadOnlySpan&lt;char&gt; -&gt; unit&#xA;override this.Write : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="textWriter.Write buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(float value);" />
      <MemberSignature Language="F#" Value="abstract member Write : single -&gt; unit&#xA;override this.Write : single -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte floating-point value to write.</param>
        <summary>Writes the text representation of a 4-byte floating-point value to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.Single.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Write : string -&gt; unit&#xA;override this.Write : string -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to write.</param>
        <summary>Writes a string to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga es equivalente a la <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> de sobrecarga.  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>.  
  
 Si `value` es `null`, no se escribirá nada en la secuencia de texto.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.String)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint32 -&gt; unit&#xA;override this.Write : uint32 -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte unsigned integer to write.</param>
        <summary>Writes the text representation of a 4-byte unsigned integer to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="abstract member Write : uint64 -&gt; unit&#xA;override this.Write : uint64 -&gt; unit" Usage="textWriter.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte unsigned integer to write.</param>
        <summary>Writes the text representation of an 8-byte unsigned integer to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj -&gt; unit&#xA;override this.Write : string * obj -&gt; unit" Usage="textWriter.Write (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The object to format and write.</param>
        <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza un formato compuesto para convertir el valor de un objeto en su representación de cadena e incrustar esa representación en una cadena. .NET proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de la característica de formato compuesto, vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información acerca de fecha y hora especificadores de formato, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Para obtener más información acerca de los especificadores de formato de enumeración, consulte [cadenas de formato de enumeración](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Para obtener más información sobre cómo dar formato, consulte [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `format` parámetro consta de cero o más ejecuciones de texto combinadas con cero o más marcadores de posición indizados, denominados elementos de formato, que corresponden a un objeto en la lista de parámetros de este método. El proceso de formato reemplaza cada elemento de formato con la representación de cadena del valor del objeto correspondiente.  
  
 La sintaxis de un elemento de formato es como sigue:  
  
 {*índice*[,*longitud*] [:*formatString*]}  
  
 Los elementos entre corchetes son opcionales. En esta tabla se describe cada elemento. Para obtener más información acerca de la característica, incluida la sintaxis de un elemento de formato, de formato compuesto vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|índice|La posición de base cero en la lista de parámetros del objeto que se le aplicará el formato. Si el objeto especificado por *índice* es `null`, el elemento de formato se reemplaza por <xref:System.String.Empty?displayProperty=nameWithType>. Puesto que esta sobrecarga tiene solo un objeto único en su parámetro de lista, el valor de *índice* siempre debe ser 0. Si no hay ningún parámetro en el *índice* posición, un <xref:System.FormatException> se produce.|  
|,*longitud*|El número mínimo de caracteres en la representación de cadena del parámetro. Si es positivo, el parámetro está alineado a la derecha; Si es negativo, está alineado a la izquierda.|  
|:*formatString*|Una cadena de formato estándar o personalizado que sea compatible con el objeto que se va a aplicarse. Valores posibles de *formatString* son los mismos que los valores admitidos por el objeto `ToString(string format)` método. Si *formatString* no se especifica e implementa el objeto de dar formato a la <xref:System.IFormattable> interfaz, `null` se pasa como el valor de la `format` parámetro que se usa como el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> cadena de formato.|  
  
 Las iniciales y finales de llaves, "{" y "}", son necesarios. Para especificar una única llave literal en `format`, especifique dos iniciales o finales llaves; es decir, "{{" o "}}".  
  
 . Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>.  
  
 Si no se hace referencia a un objeto especificado en la cadena de formato, se omite.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid composite format string.  -or-  The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj[] -&gt; unit&#xA;override this.Write : string * obj[] -&gt; unit" Usage="textWriter.Write (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg">An object array that contains zero or more objects to format and write.</param>
        <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object[])" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza un formato compuesto para convertir el valor de un objeto en su representación de cadena e incrustar esa representación en una cadena. .NET proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de la característica de formato compuesto, vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información acerca de fecha y hora especificadores de formato, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Para obtener más información acerca de los especificadores de formato de enumeración, consulte [cadenas de formato de enumeración](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Para obtener más información sobre cómo dar formato, consulte [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `format` parámetro consta de cero o más ejecuciones de texto combinadas con cero o más marcadores de posición indizados, denominados elementos de formato, que corresponden a un objeto en la lista de parámetros de este método. El proceso de formato reemplaza cada elemento de formato con la representación de cadena del valor del objeto correspondiente.  
  
 La sintaxis de un elemento de formato es como sigue:  
  
 {*índice*[,*longitud*] [:*formatString*]}  
  
 Los elementos entre corchetes son opcionales. En esta tabla se describe cada elemento. Para obtener más información acerca de la característica, incluida la sintaxis de un elemento de formato, de formato compuesto vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|índice|La posición de base cero en la lista de parámetros del objeto que se le aplicará el formato. Si el objeto especificado por *índice* es `null`, el elemento de formato se reemplaza por <xref:System.String.Empty?displayProperty=nameWithType>. Puesto que esta sobrecarga tiene una matriz en su parámetro de lista, el valor de *índice* siempre debe ser menor que la longitud de la matriz. Si no hay ningún parámetro en el *índice* posición, un <xref:System.FormatException> se produce.|  
|,*longitud*|El número mínimo de caracteres en la representación de cadena del parámetro. Si es positivo, el parámetro está alineado a la derecha; Si es negativo, está alineado a la izquierda.|  
|:*formatString*|Una cadena de formato estándar o personalizado que sea compatible con el objeto que se va a aplicarse. Valores posibles de *formatString* son los mismos que los valores admitidos por el objeto `ToString(string format)` método. Si *formatString* no se especifica e implementa el objeto de dar formato a la <xref:System.IFormattable> interfaz, `null` se pasa como el valor de la `format` parámetro que se usa como el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> cadena de formato.|  
  
 Las iniciales y finales de llaves, "{" y "}", son necesarios. Para especificar una única llave literal en `format`, especifique dos iniciales o finales llaves; es decir, "{{" o "}}".  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>.  
  
 Si no se hace referencia a un objeto especificado en la cadena de formato, se omite.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> or <paramref name="arg" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid composite format string.  -or-  The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="arg" /> array.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member Write : char[] * int * int -&gt; unit&#xA;override this.Write : char[] * int * int -&gt; unit" Usage="textWriter.Write (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array to write data from.</param>
        <param name="index">The character position in the buffer at which to start retrieving data.</param>
        <param name="count">The number of characters to write.</param>
        <summary>Writes a subarray of characters to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método escribirá `count` caracteres de datos en esta `TextWriter` desde el `buffer` matriz de caracteres a partir de posición `index`.  
  
 Esta sobrecarga es equivalente a la <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> sobrecarga para cada carácter en `buffer` entre `index` y (`index` + `count`).  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.Write(System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj * obj -&gt; unit&#xA;override this.Write : string * obj * obj -&gt; unit" Usage="textWriter.Write (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to format and write.</param>
        <param name="arg1">The second object to format and write.</param>
        <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza un formato compuesto para convertir el valor de un objeto en su representación de cadena e incrustar esa representación en una cadena. .NET proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de la característica de formato compuesto, vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información acerca de fecha y hora especificadores de formato, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Para obtener más información acerca de los especificadores de formato de enumeración, consulte [cadenas de formato de enumeración](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Para obtener más información sobre cómo dar formato, consulte [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `format` parámetro consta de cero o más ejecuciones de texto combinadas con cero o más marcadores de posición indizados, denominados elementos de formato, que corresponden a un objeto en la lista de parámetros de este método. El proceso de formato reemplaza cada elemento de formato con la representación de cadena del valor del objeto correspondiente.  
  
 La sintaxis de un elemento de formato es como sigue:  
  
 {*índice*[,*longitud*] [:*formatString*]}  
  
 Los elementos entre corchetes son opcionales. En esta tabla se describe cada elemento. Para obtener más información acerca de la característica, incluida la sintaxis de un elemento de formato, de formato compuesto vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|índice|La posición de base cero en la lista de parámetros del objeto que se le aplicará el formato. Si el objeto especificado por *índice* es `null`, el elemento de formato se reemplaza por <xref:System.String.Empty?displayProperty=nameWithType>. Puesto que esta sobrecarga tiene dos objetos en su parámetro de lista, el valor de *índice* siempre debe ser 0 o 1. Si no hay ningún parámetro en el *índice* posición, un <xref:System.FormatException> se produce.|  
|,*longitud*|El número mínimo de caracteres en la representación de cadena del parámetro. Si es positivo, el parámetro está alineado a la derecha; Si es negativo, está alineado a la izquierda.|  
|:*formatString*|Una cadena de formato estándar o personalizado que sea compatible con el objeto que se va a aplicarse. Valores posibles de *formatString* son los mismos que los valores admitidos por el objeto `ToString(string format)` método. Si *formatString* no se especifica e implementa el objeto de dar formato a la <xref:System.IFormattable> interfaz, `null` se pasa como el valor de la `format` parámetro que se usa como el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> cadena de formato.|  
  
 Las iniciales y finales de llaves, "{" y "}", son necesarios. Para especificar una única llave literal en `format`, especifique dos iniciales o finales llaves; es decir, "{{" o "}}".  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>.  
  
 Si no se hace referencia a un objeto especificado en la cadena de formato, se omite.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid composite format string.  -or-  The index of a format item is less than 0 (zero) or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="abstract member Write : string * obj * obj * obj -&gt; unit&#xA;override this.Write : string * obj * obj * obj -&gt; unit" Usage="textWriter.Write (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to format and write.</param>
        <param name="arg1">The second object to format and write.</param>
        <param name="arg2">The third object to format and write.</param>
        <summary>Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza un formato compuesto para convertir el valor de un objeto en su representación de cadena e incrustar esa representación en una cadena. .NET proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de la característica de formato compuesto, vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información acerca de fecha y hora especificadores de formato, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Para obtener más información acerca de los especificadores de formato de enumeración, consulte [cadenas de formato de enumeración](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Para obtener más información sobre cómo dar formato, consulte [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `format` parámetro consta de cero o más ejecuciones de texto combinadas con cero o más marcadores de posición indizados, denominados elementos de formato, que corresponden a un objeto en la lista de parámetros de este método. El proceso de formato reemplaza cada elemento de formato con la representación de cadena del valor del objeto correspondiente.  
  
 La sintaxis de un elemento de formato es como sigue:  
  
 {*índice*[,*longitud*] [:*formatString*]}  
  
 Los elementos entre corchetes son opcionales. En esta tabla se describe cada elemento. Para obtener más información acerca de la característica, incluida la sintaxis de un elemento de formato, de formato compuesto vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|índice|La posición de base cero en la lista de parámetros del objeto que se le aplicará el formato. Si el objeto especificado por *índice* es `null`, el elemento de formato se reemplaza por <xref:System.String.Empty?displayProperty=nameWithType>. Puesto que esta sobrecarga tiene tres objetos en su parámetro de lista, el valor de *índice* siempre debe ser 0, 1 o 2. Si no hay ningún parámetro en el *índice* posición, un <xref:System.FormatException> se produce.|  
|,*longitud*|El número mínimo de caracteres en la representación de cadena del parámetro. Si es positivo, el parámetro está alineado a la derecha; Si es negativo, está alineado a la izquierda.|  
|:*formatString*|Una cadena de formato estándar o personalizado que sea compatible con el objeto que se va a aplicarse. Valores posibles de *formatString* son los mismos que los valores admitidos por el objeto `ToString(string format)` método. Si *formatString* no se especifica e implementa el objeto de dar formato a la <xref:System.IFormattable> interfaz, `null` se pasa como el valor de la `format` parámetro que se usa como el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> cadena de formato.|  
  
 Las iniciales y finales de llaves, "{" y "}", son necesarios. Para especificar una única llave literal en `format`, especifique dos iniciales o finales llaves; es decir, "{{" o "}}".  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>.  
  
 Si no se hace referencia a un objeto especificado en la cadena de formato, se omite.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid composite format string.  -or-  The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes data to the text string or stream asynchronously.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAsync (value As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(char value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : char -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : char -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The character to write to the text stream.</param>
        <summary>Writes a character to the text string or stream asynchronously.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase <xref:System.IO.TextWriter> es abstracta. Por lo tanto, no inicializarlo en el código. Para obtener un ejemplo del uso de la <xref:System.IO.TextWriter.WriteAsync%2A> método, consulte el <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAsync (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAsync(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteAsync (buffer As Char()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.WriteAsync : char[] -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array to write to the text stream. If <c>buffer</c> is <see langword="null" />, nothing is written.</param>
        <summary>Writes a character array to the text string or stream asynchronously.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAsync (value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : string -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to write. If <c>value</c> is <see langword="null" />, nothing is written to the text stream.</param>
        <summary>Writes a string to the text string or stream asynchronously.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase <xref:System.IO.TextWriter> es abstracta. Por lo tanto, no inicializarlo en el código. Para obtener un ejemplo del uso de la <xref:System.IO.TextWriter.WriteAsync%2A> método, consulte el <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.String)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (ReadOnlyMemory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(valuetype System.ReadOnlyMemory`1&lt;char&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array to write data from.</param>
        <param name="index">The character position in the buffer at which to start retrieving data.</param>
        <param name="count">The number of characters to write.</param>
        <summary>Writes a subarray of characters to the text string or stream asynchronously.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La clase <xref:System.IO.TextWriter> es abstracta. Por lo tanto, no inicializarlo en el código. Para obtener un ejemplo del uso de la <xref:System.IO.TextWriter.WriteAsync%2A> método, consulte el <xref:System.IO.StreamWriter.WriteAsync%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="index" /> plus <paramref name="count" /> is greater than the buffer length.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.WriteAsync(System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes data followed by a line terminator to the text string or stream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine();" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : unit -&gt; unit&#xA;override this.WriteLine : unit -&gt; unit" Usage="textWriter.WriteLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(bool value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : bool -&gt; unit&#xA;override this.WriteLine : bool -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The <see langword="Boolean" /> value to write.</param>
        <summary>Writes the text representation of a <see langword="Boolean" /> value followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.Boolean.ToString%2A?displayProperty=nameWithType> método.  
  
 Este método da como resultado <xref:System.Boolean.TrueString?displayProperty=nameWithType> o <xref:System.Boolean.FalseString?displayProperty=nameWithType>.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(char value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char -&gt; unit&#xA;override this.WriteLine : char -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The character to write to the text stream.</param>
        <summary>Writes a character followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga es equivalente a <xref:System.IO.TextWriter.Write%28System.Char%29> seguido de <xref:System.IO.TextWriter.WriteLine> .  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char[] -&gt; unit&#xA;override this.WriteLine : char[] -&gt; unit" Usage="textWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array from which data is read.</param>
        <summary>Writes an array of characters followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Todos los caracteres de `buffer` se escriben en la secuencia subyacente. Si la matriz de caracteres es `null`, sólo se escribe el terminador de línea.  
  
 Esta sobrecarga es equivalente a <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> seguido de <xref:System.IO.TextWriter.WriteLine> .  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::Decimal value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : decimal -&gt; unit&#xA;override this.WriteLine : decimal -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal value to write.</param>
        <summary>Writes the text representation of a decimal value followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IO.TextWriter.FormatProvider%2A> propiedad, si no `null`, especifica el formato de la referencia cultural. Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(double value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : double -&gt; unit&#xA;override this.WriteLine : double -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte floating-point value to write.</param>
        <summary>Writes the text representation of a 8-byte floating-point value followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IO.TextWriter.FormatProvider%2A> propiedad, si no `null`, especifica el formato de la referencia cultural. Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(int value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : int -&gt; unit&#xA;override this.WriteLine : int -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte signed integer to write.</param>
        <summary>Writes the text representation of a 4-byte signed integer followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.Int32.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(long value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : int64 -&gt; unit&#xA;override this.WriteLine : int64 -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte signed integer to write.</param>
        <summary>Writes the text representation of an 8-byte signed integer followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.Int64.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A?displayProperty=nameWithType> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : obj -&gt; unit&#xA;override this.WriteLine : obj -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">The object to write. If <c>value</c> is <see langword="null" />, only the line terminator is written.</param>
        <summary>Writes the text representation of an object by calling the <see langword="ToString" /> method on that object, followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga es equivalente a la <xref:System.IO.TextWriter.Write%28System.String%2CSystem.Object%29> de sobrecarga. El <xref:System.IO.TextWriter.FormatProvider%2A> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(valuetype System.ReadOnlySpan`1&lt;char&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (buffer As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(ReadOnlySpan&lt;char&gt; buffer);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : ReadOnlySpan&lt;char&gt; -&gt; unit&#xA;override this.WriteLine : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="textWriter.WriteLine buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(float value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : single -&gt; unit&#xA;override this.WriteLine : single -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte floating-point value to write.</param>
        <summary>Writes the text representation of a 4-byte floating-point value followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.IO.TextWriter.FormatProvider%2A> propiedad, si no `null`, especifica el formato de la referencia cultural. Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string -&gt; unit&#xA;override this.WriteLine : string -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to write. If <c>value</c> is <see langword="null" />, only the line terminator is written.</param>
        <summary>Writes a string followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Esta sobrecarga es equivalente a la <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> de sobrecarga.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A>.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : uint32 -&gt; unit&#xA;override this.WriteLine : uint32 -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 4-byte unsigned integer to write.</param>
        <summary>Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.UInt32.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : uint64 -&gt; unit&#xA;override this.WriteLine : uint64 -&gt; unit" Usage="textWriter.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 8-byte unsigned integer to write.</param>
        <summary>Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La representación de texto del valor especificado se produce al llamar a la <xref:System.UInt64.ToString%2A?displayProperty=nameWithType> método. El <xref:System.IO.TextWriter.FormatProvider%2A> propiedad, si no `null`, especifica el formato de la referencia cultural.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj -&gt; unit&#xA;override this.WriteLine : string * obj -&gt; unit" Usage="textWriter.WriteLine (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The object to format and write.</param>
        <summary>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza un formato compuesto para convertir el valor de un objeto en su representación de cadena e incrustar esa representación en una cadena. .NET proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de la característica de formato compuesto, vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información acerca de fecha y hora especificadores de formato, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Para obtener más información acerca de los especificadores de formato de enumeración, consulte [cadenas de formato de enumeración](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Para obtener más información sobre cómo dar formato, consulte [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `format` parámetro consta de cero o más ejecuciones de texto combinadas con cero o más marcadores de posición indizados, denominados elementos de formato, que corresponden a un objeto en la lista de parámetros de este método. El proceso de formato reemplaza cada elemento de formato con la representación de cadena del valor del objeto correspondiente.  
  
 La sintaxis de un elemento de formato es como sigue:  
  
 {*índice*[,*longitud*] [:*formatString*]}  
  
 Los elementos entre corchetes son opcionales. En esta tabla se describe cada elemento. Para obtener más información acerca de la característica, incluida la sintaxis de un elemento de formato, de formato compuesto vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|índice|La posición de base cero en la lista de parámetros del objeto que se le aplicará el formato. Si el objeto especificado por *índice* es `null`, el elemento de formato se reemplaza por <xref:System.String.Empty?displayProperty=nameWithType>. Puesto que esta sobrecarga tiene solo un objeto único en su parámetro de lista, el valor de *índice* siempre debe ser 0. Si no hay ningún parámetro en el *índice* posición, un <xref:System.FormatException> se produce.|  
|,*longitud*|El número mínimo de caracteres en la representación de cadena del parámetro. Si es positivo, el parámetro está alineado a la derecha; Si es negativo, está alineado a la izquierda.|  
|:*formatString*|Una cadena de formato estándar o personalizado que sea compatible con el objeto que se va a aplicarse. Valores posibles de *formatString* son los mismos que los valores admitidos por el objeto `ToString(string format)` método. Si *formatString* no se especifica e implementa el objeto de dar formato a la <xref:System.IFormattable> interfaz, `null` se pasa como el valor de la `format` parámetro que se usa como el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> cadena de formato.|  
  
 Las iniciales y finales de llaves, "{" y "}", son necesarios. Para especificar una única llave literal en `format`, especifique dos iniciales o finales llaves; es decir, "{{" o "}}".  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A>.  
  
 Si no se hace referencia a un objeto especificado en la cadena de formato, se omite.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid composite format string.  -or-  The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is one).</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj[] -&gt; unit&#xA;override this.WriteLine : string * obj[] -&gt; unit" Usage="textWriter.WriteLine (format, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg">An object array that contains zero or more objects to format and write.</param>
        <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza un formato compuesto para convertir el valor de un objeto en su representación de cadena e incrustar esa representación en una cadena. .NET proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de la característica de formato compuesto, vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información acerca de fecha y hora especificadores de formato, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Para obtener más información acerca de los especificadores de formato de enumeración, consulte [cadenas de formato de enumeración](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Para obtener más información sobre cómo dar formato, consulte [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `format` parámetro consta de cero o más ejecuciones de texto combinadas con cero o más marcadores de posición indizados, denominados elementos de formato, que corresponden a un objeto en la lista de parámetros de este método. El proceso de formato reemplaza cada elemento de formato con la representación de cadena del valor del objeto correspondiente.  
  
 La sintaxis de un elemento de formato es como sigue:  
  
 {*índice*[,*longitud*] [:*formatString*]}  
  
 Los elementos entre corchetes son opcionales. En esta tabla se describe cada elemento. Para obtener más información acerca de la característica, incluida la sintaxis de un elemento de formato, de formato compuesto vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|índice|La posición de base cero en la lista de parámetros del objeto que se le aplicará el formato. Si el objeto especificado por *índice* es `null`, el elemento de formato se reemplaza por <xref:System.String.Empty?displayProperty=nameWithType>. Puesto que esta sobrecarga tiene una matriz en su parámetro de lista, el valor de *índice* siempre debe ser menor que la longitud de la matriz. Si no hay ningún parámetro en el *índice* posición, un <xref:System.FormatException> se produce.|  
|,*longitud*|El número mínimo de caracteres en la representación de cadena del parámetro. Si es positivo, el parámetro está alineado a la derecha; Si es negativo, está alineado a la izquierda.|  
|:*formatString*|Una cadena de formato estándar o personalizado que sea compatible con el objeto que se va a aplicarse. Valores posibles de *formatString* son los mismos que los valores admitidos por el objeto `ToString(string format)` método. Si *formatString* no se especifica e implementa el objeto de dar formato a la <xref:System.IFormattable> interfaz, `null` se pasa como el valor de la `format` parámetro que se usa como el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> cadena de formato.|  
  
 Las iniciales y finales de llaves, "{" y "}", son necesarios. Para especificar una única llave literal en `format`, especifique dos iniciales o finales llaves; es decir, "{{" o "}}".  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A>.  
  
 Si no se hace referencia a un objeto especificado en la cadena de formato, se omite.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">A string or object is passed in as <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid composite format string.  -or-  The index of a format item is less than 0 (zero), or greater than or equal to the length of the <paramref name="arg" /> array.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : char[] * int * int -&gt; unit&#xA;override this.WriteLine : char[] * int * int -&gt; unit" Usage="textWriter.WriteLine (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array from which data is read.</param>
        <param name="index">The character position in <c>buffer</c> at which to start reading data.</param>
        <param name="count">The maximum number of characters to write.</param>
        <summary>Writes a subarray of characters followed by a line terminator to the text string or stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método escribirá `count` caracteres de datos en esta `TextWriter` desde el `buffer` matriz de caracteres a partir de posición `index`.  
  
 Esta sobrecarga es equivalente a llamar a la <xref:System.IO.TextWriter.Write%28System.Char%5B%5D%29> método seguido <xref:System.IO.TextWriter.WriteLine%2A> para cada carácter en `buffer` entre `index` y (`index` + `count`).  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj * obj -&gt; unit&#xA;override this.WriteLine : string * obj * obj -&gt; unit" Usage="textWriter.WriteLine (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to format and write.</param>
        <param name="arg1">The second object to format and write.</param>
        <summary>Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza un formato compuesto para convertir el valor de un objeto en su representación de cadena e incrustar esa representación en una cadena. .NET proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de la característica de formato compuesto, vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información acerca de fecha y hora especificadores de formato, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Para obtener más información acerca de los especificadores de formato de enumeración, consulte [cadenas de formato de enumeración](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Para obtener más información sobre cómo dar formato, consulte [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `format` parámetro consta de cero o más ejecuciones de texto combinadas con cero o más marcadores de posición indizados, denominados elementos de formato, que corresponden a un objeto en la lista de parámetros de este método. El proceso de formato reemplaza cada elemento de formato con la representación de cadena del valor del objeto correspondiente.  
  
 La sintaxis de un elemento de formato es como sigue:  
  
 {*índice*[,*longitud*] [:*formatString*]}  
  
 Los elementos entre corchetes son opcionales. En esta tabla se describe cada elemento. Para obtener más información acerca de la característica, incluida la sintaxis de un elemento de formato, de formato compuesto vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|índice|La posición de base cero en la lista de parámetros del objeto que se le aplicará el formato. Si el objeto especificado por *índice* es `null`, el elemento de formato se reemplaza por <xref:System.String.Empty?displayProperty=nameWithType>. Puesto que esta sobrecarga tiene dos objetos en su parámetro de lista, el valor de *índice* siempre debe ser 0 o 1. Si no hay ningún parámetro en el *índice* posición, un <xref:System.FormatException> se produce.|  
|,*longitud*|El número mínimo de caracteres en la representación de cadena del parámetro. Si es positivo, el parámetro está alineado a la derecha; Si es negativo, está alineado a la izquierda.|  
|:*formatString*|Una cadena de formato estándar o personalizado que sea compatible con el objeto que se va a aplicarse. Valores posibles de *formatString* son los mismos que los valores admitidos por el objeto `ToString(string format)` método. Si *formatString* no se especifica e implementa el objeto de dar formato a la <xref:System.IFormattable> interfaz, `null` se pasa como el valor de la `format` parámetro que se usa como el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> cadena de formato.|  
  
 Las iniciales y finales de llaves, "{" y "}", son necesarios. Para especificar una única llave literal en `format`, especifique dos iniciales o finales llaves; es decir, "{{" o "}}".  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A>.  
  
 Si no se hace referencia a un objeto especificado en la cadena de formato, se omite.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid composite format string.  -or-  The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is two).</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public virtual void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="abstract member WriteLine : string * obj * obj * obj -&gt; unit&#xA;override this.WriteLine : string * obj * obj * obj -&gt; unit" Usage="textWriter.WriteLine (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A composite format string.</param>
        <param name="arg0">The first object to format and write.</param>
        <param name="arg1">The second object to format and write.</param>
        <param name="arg2">The third object to format and write.</param>
        <summary>Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método utiliza un formato compuesto para convertir el valor de un objeto en su representación de cadena e incrustar esa representación en una cadena. .NET proporciona una amplia compatibilidad de formato, que se describe con más detalle en los temas de formato siguientes:  
  
-   Para obtener más información acerca de la característica de formato compuesto, vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
-   Para obtener más información acerca de los especificadores de formato numérico, vea [cadenas de formato numérico estándar](~/docs/standard/base-types/standard-numeric-format-strings.md) y [cadenas de formato numérico personalizado](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   Para obtener más información acerca de fecha y hora especificadores de formato, vea [cadenas de formato de hora y fecha estándar](~/docs/standard/base-types/standard-date-and-time-format-strings.md) y [cadenas de formato de hora y fecha personalizada](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   Para obtener más información acerca de los especificadores de formato de enumeración, consulte [cadenas de formato de enumeración](~/docs/standard/base-types/enumeration-format-strings.md).  
  
-   Para obtener más información sobre cómo dar formato, consulte [Formatting Types](~/docs/standard/base-types/formatting-types.md).  
  
 El `format` parámetro consta de cero o más ejecuciones de texto combinadas con cero o más marcadores de posición indizados, denominados elementos de formato, que corresponden a un objeto en la lista de parámetros de este método. El proceso de formato reemplaza cada elemento de formato con la representación de cadena del valor del objeto correspondiente.  
  
 La sintaxis de un elemento de formato es como sigue:  
  
 {*índice*[,*longitud*] [:*formatString*]}  
  
 Los elementos entre corchetes son opcionales. En esta tabla se describe cada elemento. Para obtener más información acerca de la característica, incluida la sintaxis de un elemento de formato, de formato compuesto vea [formatos compuestos](~/docs/standard/base-types/composite-formatting.md).  
  
|Elemento|Descripción|  
|-------------|-----------------|  
|índice|La posición de base cero en la lista de parámetros del objeto que se le aplicará el formato. Si el objeto especificado por *índice* es `null`, el elemento de formato se reemplaza por <xref:System.String.Empty?displayProperty=nameWithType>. Puesto que esta sobrecarga tiene tres objetos en su parámetro de lista, el valor de *índice* siempre debe ser 0, 1 o 2. Si no hay ningún parámetro en el *índice* posición, un <xref:System.FormatException> se produce.|  
|,*longitud*|El número mínimo de caracteres en la representación de cadena del parámetro. Si es positivo, el parámetro está alineado a la derecha; Si es negativo, está alineado a la izquierda.|  
|:*formatString*|Una cadena de formato estándar o personalizado que sea compatible con el objeto que se va a aplicarse. Valores posibles de *formatString* son los mismos que los valores admitidos por el objeto `ToString(string format)` método. Si *formatString* no se especifica e implementa el objeto de dar formato a la <xref:System.IFormattable> interfaz, `null` se pasa como el valor de la `format` parámetro que se usa como el <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> cadena de formato.|  
  
 Las iniciales y finales de llaves, "{" y "}", son necesarios. Para especificar una única llave literal en `format`, especifique dos iniciales o finales llaves; es decir, "{{" o "}}".  
  
 Este método no buscar la cadena especificada para los caracteres individuales de nueva línea (hexadecimal 0x000a) y reemplácelas con <xref:System.IO.TextWriter.NewLine%2A>.  
  
 Si no se hace referencia a un objeto especificado en la cadena de formato, se omite.  
  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 Para obtener una lista de tareas de E/S comunes, vea [tareas de E/S comunes](~/docs/standard/io/common-i-o-tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter" /> is closed.</exception>
        <exception cref="T:System.IO.IOException">An I/O error occurs.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> is not a valid composite format string.  -or-  The index of a format item is less than 0 (zero), or greater than or equal to the number of objects to be formatted (which, for this method overload, is three).</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineAsync">
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Writes data followed by a line terminator asynchronously to the text string or stream.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteLineAsync();" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : unit -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes a line terminator asynchronously to the text string or stream.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync (value As Char) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteLineAsync(char value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : char -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : char -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The character to write to the text stream.</param>
        <summary>Writes a character followed by a line terminator asynchronously to the text string or stream.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 La clase <xref:System.IO.TextWriter> es abstracta. Por lo tanto, no inicializarlo en el código. Para obtener un ejemplo del uso de la <xref:System.IO.TextWriter.WriteLineAsync%2A> método, consulte el <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.Char)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteLineAsync (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteLineAsync(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function WriteLineAsync (buffer As Char()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ WriteLineAsync(cli::array &lt;char&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.WriteLineAsync : char[] -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync buffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array to write to the text stream. If the character array is <see langword="null" />, only the line terminator is written.</param>
        <summary>Writes an array of characters followed by a line terminator asynchronously to the text string or stream.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="T:System.IO.StreamWriter" />
        <altmember cref="T:System.IO.StringWriter" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync (value As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteLineAsync(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : string -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to write. If the value is <see langword="null" />, only a line terminator is written.</param>
        <summary>Writes a string followed by a line terminator asynchronously to the text string or stream.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 La clase <xref:System.IO.TextWriter> es abstracta. Por lo tanto, no inicializarlo en el código. Para obtener un ejemplo del uso de la <xref:System.IO.TextWriter.WriteLineAsync%2A> método, consulte el <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.String)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (ReadOnlyMemory&lt;char&gt; buffer, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(valuetype System.ReadOnlyMemory`1&lt;char&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : ReadOnlyMemory&lt;char&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync (buffer, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLineAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteLineAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteLineAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function WriteLineAsync (buffer As Char(), index As Integer, count As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ WriteLineAsync(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member WriteLineAsync : char[] * int * int -&gt; System.Threading.Tasks.Task&#xA;override this.WriteLineAsync : char[] * int * int -&gt; System.Threading.Tasks.Task" Usage="textWriter.WriteLineAsync (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">The character array to write data from.</param>
        <param name="index">The character position in the buffer at which to start retrieving data.</param>
        <param name="count">The number of characters to write.</param>
        <summary>Writes a subarray of characters followed by a line terminator asynchronously to the text string or stream.</summary>
        <returns>A task that represents the asynchronous write operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El terminador de línea se define por la <xref:System.IO.TextWriter.CoreNewLine> campo.  
  
 La clase <xref:System.IO.TextWriter> es abstracta. Por lo tanto, no inicializarlo en el código. Para obtener un ejemplo del uso de la <xref:System.IO.TextWriter.WriteLineAsync%2A> método, consulte el <xref:System.IO.StreamWriter.WriteLineAsync%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">The <paramref name="index" /> plus <paramref name="count" /> is greater than the buffer length.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> or <paramref name="count" /> is negative.</exception>
        <exception cref="T:System.ObjectDisposedException">The text writer is disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The text writer is currently in use by a previous write operation.</exception>
        <altmember cref="M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.IO.StringWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
  </Members>
</Type>