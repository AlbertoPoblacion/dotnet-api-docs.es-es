<Type Name="Roles" FullName="System.Web.Security.Roles">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cad064b36e9a290c953de2f65314d8fef4aa3e1d" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51935110" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <TypeSignature Language="VB.NET" Value="Public Class Roles" />
  <TypeSignature Language="C++ CLI" Value="public ref class Roles abstract sealed" />
  <TypeSignature Language="F#" Value="type Roles = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Administra la pertenencia del usuario a roles para el control de autorización en una aplicación ASP.NET. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Administración de roles ASP.NET le permite administrar la autorización para la aplicación basada en grupos de usuarios, que se conoce como roles. Al asignar usuarios a roles, puede controlar el acceso a diferentes partes o características de la aplicación Web basado en rol en lugar de, o además, especificar una autorización basada en nombre de usuario. Por ejemplo, una aplicación de empleados podría tener funciones como administradores, empleados, directores y así sucesivamente, donde se especifican privilegios diferentes para cada rol.  
  
 Los usuarios pueden pertenecer a más de un rol. Por ejemplo, si su sitio es un foro de discusión, algunos usuarios podrían estar en el rol de los miembros y los moderadores. Puede definir cada función para que tenga privilegios diferentes en el sitio y un usuario que pertenezca a ambas funciones, a continuación, tendría dos conjuntos de privilegios.  
  
 Para habilitar la administración de roles para la aplicación ASP.NET, use el elemento de la `system.web` sección en el archivo Web.config para la aplicación, tal como se muestra en el ejemplo siguiente.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
  <roleManager defaultProvider="SqlProvider"   
    enabled="true"  
    cacheRolesInCookie="true"  
    cookieName=".ASPROLES"  
    cookieTimeout="30"  
    cookiePath="/"  
    cookieRequireSSL="false"  
    cookieSlidingExpiration="true"  
    cookieProtection="All" >  
    <providers>  
      <add  
        name="SqlProvider"  
        type="System.Web.Security.SqlRoleProvider"  
        connectionStringName="SqlServices"  
        applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Puede especificar las reglas de autorización en el archivo de configuración de la aplicación Web o mediante programación en el código. Por ejemplo, la siguiente sección de un archivo Web.config requiere que los usuarios iniciar sesión (al denegar a los usuarios anónimos) y, a continuación, permite a solo los usuarios de la función de los administradores tengan acceso.  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 Si usas el `authorization` sección en el archivo Web.config de la aplicación para especificar la autorización basada en roles, usuarios de la aplicación debe proporcionar una identidad de usuario autenticado. Puede autenticar a los usuarios mediante la autenticación de Windows o de formularios. Los usuarios anónimos no pueden asignarse a un rol. Roles se pueden usar con independencia de, o junto con ASP.NET <xref:System.Web.Security.Membership> clases.  
  
 Para comprobar la pertenencia a roles mediante programación, puede usar el <xref:System.Web.Security.Roles> clase o el <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> propiedad con el <xref:System.Web.Security.Roles.IsUserInRole%2A> método, o bien puede usar el <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> propiedad con el <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=nameWithType> método. Código de ejemplo que comprueba la pertenencia a roles mediante programación, vea la sección de ejemplo en este tema.  
  
 La <xref:System.Web.Security.Roles> clase también le permite crear y eliminar roles y agregar o quitar usuarios de roles.  
  
> [!NOTE]
>  Si ha configurado la aplicación para usar el <xref:System.Web.Security.WindowsTokenRoleProvider> (clase), no se puede modificar roles o pertenencia al rol. El <xref:System.Web.Security.WindowsTokenRoleProvider> classverifies pertenencia en la seguridad de Windows sólo grupos. En este caso, debe usar Administración de cuentas de usuario de Windows en lugar de las funciones de ASP.NET para crear y eliminar grupos y administrar la pertenencia a grupo.  
  
 Puede almacenar información de roles en varios orígenes de datos.  
  
-   Puede usar el <xref:System.Web.Security.WindowsTokenRoleProvider> clase para recuperar información de las funciones según la pertenencia a grupos de Windows.  
  
-   Puede almacenar información de funciones en una base de datos de SQL Server mediante el <xref:System.Web.Security.SqlRoleProvider> clase.  
  
-   Si tiene información de roles existentes, o desea almacenar información de funciones y recuperar información de funciones desde un origen de datos distinto de Windows, una autorización Store o SQL Server, puede implementar un proveedor de funciones personalizado mediante la creación de una clase que hereda la <xref:System.Web.Security.RoleProvider> clase abstracta. Para obtener más información, consulte [implementar un proveedor de roles](https://msdn.microsoft.com/library/851671ce-bf9b-43f2-aba4-bc9d28b11c7d).  
  
 Si el Explorador de un usuario acepta las cookies, puede almacenar información de roles para que el usuario en una cookie en el equipo del usuario. En cada solicitud de página, ASP.NET lee la información de roles para que el usuario de la cookie. Esto puede mejorar el rendimiento de la aplicación al reducir la cantidad de comunicación necesaria con el origen de datos para recuperar información de roles. Si la información de roles para un usuario es demasiado larga para almacenar en una cookie, ASP.NET almacena sólo la información de roles usa más recientemente en la cookie y, a continuación, busca información de rol adicionales en el origen de datos según sea necesario. Si el explorador del usuario no es compatible con las cookies o las cookies están deshabilitadas, información de roles no se almacena en caché en una cookie.  
  
 Puede mejorar la confiabilidad de los nombres de rol almacenados en una cookie especificando un <xref:System.Web.Security.Roles.CookieProtectionValue%2A> propiedad al configurar las funciones de ASP.NET. El valor predeterminado <xref:System.Web.Security.Roles.CookieProtectionValue%2A> es `All`, que cifra los nombres de rol en la cookie y valida que el contenido de la cookie no ha sido alterado.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el archivo Web.config para una aplicación configurada para usar la pertenencia a ASP.NET y las funciones de ASP.NET y para usar el <xref:System.Web.Security.SqlRoleProvider> para almacenar información de pertenencia y funciones en una base de datos de SQL Server. Los usuarios se autentican con autenticación de formularios y solo los usuarios del rol administradores tienen acceso a la aplicación.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
      <allow roles="Administrators" />  
      <deny users="*" />  
    </authorization>  
  
    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">  
    </membership>  
  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
  
      <providers>  
        <clear />  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="SampleApplication" />  
        </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 En el ejemplo de código siguiente se comprueba mediante programación si el usuario ha iniciado la sesión está en la función Administradores antes de permitir al usuario ver las funciones de otros usuarios.  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Una matriz de cadenas de nombres de usuario que se agregarán a los roles especificados.</param>
        <param name="roleName">El rol al que se agregan los nombres de usuario especificados.</param>
        <summary>Agrega los usuarios especificados al rol especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.AddUsersToRole%2A> método llama al proveedor de funciones predeterminado para asociar los usuarios especificados a la función especificada en el origen de datos.  
  
 Si la aplicación utiliza el <xref:System.Web.Security.SqlRoleProvider> clase, las actualizaciones de base de datos que se realizan durante la llamada a la <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> método se realizan dentro de una transacción. Si se produce un error, como un nombre de usuario que ya está en una función especificada, la transacción se revierte y no se realizan actualizaciones.  
  
> [!NOTE]
>  Los nombres de usuario y los nombres de rol no pueden contener comas.  
  
   
  
## Examples  
 El siguiente ejemplo de código agrega uno o varios usuarios a un rol o quita un usuario de una función basada en la entrada del usuario. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.  
  
O bien 
Uno de los elementos de <paramref name="usernames" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
Uno de los elementos de <paramref name="usernames" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="usernames" /> contiene un elemento duplicado.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUsersToRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Una matriz de cadenas de nombres de usuario que agregan a los roles especificados.</param>
        <param name="roleNames">Una matriz de cadenas de nombres de roles a los que se agregan los nombres de usuario especificados.</param>
        <summary>Agrega los usuarios especificados a los roles especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.AddUsersToRoles%2A> método llama al proveedor de funciones predeterminado para asociar los usuarios especificados a las funciones especificadas en el origen de datos.  
  
 Si la aplicación utiliza el <xref:System.Web.Security.SqlRoleProvider> clase, las actualizaciones de base de datos que se realizan durante la llamada a la <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> método se realizan dentro de una transacción. Si se produce un error, como un nombre de usuario que ya está en una función especificada, la transacción se revierte y no se realizan actualizaciones.  
  
> [!NOTE]
>  Los nombres de usuario y los nombres de rol no pueden contener comas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se agrega uno o varios usuarios a uno o varios roles. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.Roles#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Una de los roles de <paramref name="roleNames" /> es <see langword="null" />.  
  
O bien 
Uno de los usuarios de <paramref name="usernames" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Una de los roles de <paramref name="roleNames" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
Uno de los usuarios de <paramref name="usernames" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="roleNames" /> contiene un elemento duplicado.  
  
O bien 
 <paramref name="usernames" /> contiene un elemento duplicado.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member AddUserToRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">El nombre de usuario que se agrega al rol especificado.</param>
        <param name="roleName">El rol al que se agrega el nombre de usuario especificado.</param>
        <summary>Agrega el usuario especificado al rol especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.AddUserToRole%2A> método llama al proveedor de funciones predeterminado para asociar el usuario especificado a la función especificada en el origen de datos.  
  
> [!NOTE]
>  Los nombres de usuario y los nombres de rol no pueden contener comas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se agrega un usuario a un rol. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.Roles#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="username" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="username" /> es una cadena vacía o contiene una coma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.  
  
O bien 
El usuario ya está asignado al rol especificado.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddUserToRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddUserToRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member AddUserToRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.AddUserToRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">El nombre de usuario que se agrega a los roles especificados.</param>
        <param name="roleNames">Una matriz de cadenas de roles que se agregan al nombre de usuario especificado.</param>
        <summary>Agrega el usuario especificado a los roles especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.AddUserToRoles%2A> método llama al proveedor de funciones predeterminado para asociar el usuario especificado con las funciones especificadas en el origen de datos.  
  
 Si la aplicación utiliza el <xref:System.Web.Security.SqlRoleProvider> clase, las actualizaciones de base de datos que se realizan durante la llamada a la <xref:System.Web.Security.Roles.AddUserToRoles%2A> método se realizan dentro de una transacción. Si se produce un error, como un nombre de usuario que ya está en una función especificada, la transacción se revierte y no se realizan actualizaciones.  
  
> [!NOTE]
>  Los nombres de usuario y los nombres de rol no pueden contener comas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se agrega un usuario a uno o varios roles. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.Roles#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Una de los roles de <paramref name="roleNames" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="username" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Una de los roles de <paramref name="roleNames" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="username" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="roleNames" /> contiene un elemento duplicado.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.Roles.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece el nombre de la aplicación para la que se va a almacenar y recuperar información de roles.</summary>
        <value>Nombre de la aplicación para la que se va a almacenar y recuperar información de roles.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad la usa el <xref:System.Web.Security.Roles> clase para asociar usuarios y roles diferentes aplicaciones. Esto permite que varias aplicaciones que usan el mismo origen de datos para almacenar información de usuario y rol sin entrar en conflicto entre nombres de usuario duplicados o nombres de función duplicados. Varias aplicaciones de ASP.NET pueden utilizar el mismo origen de datos especificando el mismo valor en el <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad. Puede establecer el <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad mediante programación, o se puede establecer mediante declaración en el archivo de configuración de la aplicación Web utilizando el `applicationName` atributo.  
  
 Si está usando la aplicación Web la <xref:System.Web.Security.SqlRoleProvider> no se especifica la clase y un valor para el `applicationName` atributo en el archivo de configuración, el <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> valor actual de la propiedad <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> se utiliza la propiedad.  
  
> [!CAUTION]
>  Dado que se usa una instancia del proveedor de funciones predeterminado único para todas las solicitudes atendidas por un <xref:System.Web.HttpApplication> objeto, puede tener varias solicitudes de ejecución al mismo tiempo y se intentó establecer el <xref:System.Web.Security.Roles.ApplicationName%2A> valor de propiedad. El <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad no es segura para subprocesos de varias escrituras y variación la <xref:System.Web.Security.Roles.ApplicationName%2A> valor de propiedad puede provocar un comportamiento inesperado para varios usuarios de una aplicación. Debe evitar escribir código para permitir que los usuarios establezcan la <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad, a menos que requiera. Un ejemplo de una aplicación que el valor del <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad puede ser necesaria es una aplicación administrativa que administra datos de rol para varias aplicaciones. Este tipo de aplicación debe ser una aplicación de usuario único y no es una aplicación Web.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece el `applicationName` atributo `MyApplication`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CacheRolesInCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CacheRolesInCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CacheRolesInCookie : bool" Usage="System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si los roles del usuario actual se almacenan provisionalmente en una cookie.</summary>
        <value>
          <see langword="true" /> si los roles del usuario actual se almacenan en memoria caché en una cookie; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando el <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> propiedad está establecida en `true` en el archivo Web.config, información de roles para cada usuario se almacena en una cookie. Cuando la administración de funciones comprueba si un usuario está en un rol determinado, se comprueba la cookie de roles antes de llama al proveedor de funciones para comprobar la lista de roles en el origen de datos. La cookie se actualiza dinámicamente para almacenar en caché los nombres de función recientemente validados.  
  
 Puede mejorar la confiabilidad de los nombres de rol almacenados en una cookie especificando un <xref:System.Web.Security.Roles.CookieProtectionValue%2A> propiedad al configurar las funciones de ASP.NET. El valor predeterminado <xref:System.Web.Security.Roles.CookieProtectionValue%2A> es `All`, que cifra los nombres de rol en la cookie y valida que el contenido de la cookie no ha sido alterado.  
  
> [!NOTE]
>  Dado que pueden almacenarse en caché los nombres de rol aparte del origen de datos, es posible que no se reflejarán los cambios realizados en la administración de roles en el origen de datos en los valores almacenados en caché. En este caso, el usuario debe cerrar y volver a abrir su explorador para borrar el valor de cookie almacenada en caché.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece el `cacheRolesInCookie` atributo `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
   </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieName : string" Usage="System.Web.Security.Roles.CookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nombre de la cookie donde están almacenados los nombres de rol.</summary>
        <value>El nombre de la cookie donde están almacenados los nombres de rol. El valor predeterminado es .ASPXROLES.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar el nombre de la cookie donde se almacenan en caché de roles para su aplicación estableciendo el `cookieName` atributo en el archivo Web.config de la aplicación ASP.NET. Esto es útil cuando desea identificar de forma exclusiva una cookie para la aplicación o cuando una cookie se comparte entre varias aplicaciones, como una cookie de dominio.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece el `cookieName` atributo. ASPROLES.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiePath : string" Usage="System.Web.Security.Roles.CookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene la ruta de acceso de la cookie de nombres de rol.</summary>
        <value>La ruta de acceso de la cookie donde están almacenados los nombres de rol. El valor predeterminado es /.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar la ruta de acceso de la cookie donde se almacenan en caché de roles para la aplicación estableciendo el `cookiePath` atributo en el archivo Web.config de la aplicación ASP.NET. Para obtener más información sobre las rutas de acceso de la cookie, consulte <xref:System.Web.HttpCookie.Path%2A>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece el  `cookiePath` /MiAplicación de atributo.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieProtectionValue As CookieProtection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::CookieProtection CookieProtectionValue { System::Web::Security::CookieProtection get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieProtectionValue : System.Web.Security.CookieProtection" Usage="System.Web.Security.Roles.CookieProtectionValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica cómo se protegen los nombres de rol almacenados provisionalmente en una cookie.</summary>
        <value>Uno de los valores de la enumeración <see cref="T:System.Web.Security.CookieProtection" /> que indica cómo se protegen los nombres de rol almacenados en una cookie. El valor predeterminado es <see langword="All" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar la protección de la cookie donde se almacenan en caché de roles para la aplicación estableciendo el `cookieProtection` atributo en el archivo Web.config de la aplicación ASP.NET. El `cookieProtection` atributo toma un <xref:System.Web.Security.CookieProtection> valida el valor de enumeración que indica si se cifran los nombres de rol, ambos o ninguno.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece `cookieProtection` atributo `Encrypted`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieRequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieRequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieRequireSSL : bool" Usage="System.Web.Security.Roles.CookieRequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la cookie de nombres de rol requiere SSL para su devolución al servidor.</summary>
        <value>Es <see langword="true" /> si se requiere SSL para devolver la cookie de nombres de rol al servidor; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar si se requiere SSL (capa de Sockets seguros) para devolver la cookie de nombres de rol en el servidor en la aplicación estableciendo el `cookieRequireSSL` atributo en el archivo Web.config de la aplicación ASP.NET. Para obtener más información, vea <xref:System.Web.HttpCookie.Secure%2A>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece `cookieRequireSSL` a `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookieSlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSlidingExpiration : bool" Usage="System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indica si la fecha y hora de expiración de la cookie de nombres de rol se restablece periódicamente.</summary>
        <value>
          <see langword="true" /> si la fecha y hora de expiración de la cookie se restablecerán periódicamente; de lo contrario, <see langword="false" />. El valor predeterminado es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede especificar si la fecha de expiración de cookie de nombres de función y tiempo se restablece con cada respuesta mediante el uso de la `cookieSlidingExpiration` atributo en el archivo Web.config de la aplicación ASP.NET. Si `true`, la expiración de la cookie se establecerá inicialmente en la fecha y hora actual más el <xref:System.Web.Security.Roles.CookieTimeout%2A> en cuestión de minutos. Mientras el usuario continúa utilizando activamente la aplicación ASP.NET, la fecha de expiración y la hora de la cookie se actualizará automáticamente si hay menos de la mitad de la <xref:System.Web.Security.Roles.CookieTimeout%2A> restantes. Para obtener más información, vea la propiedad <xref:System.Web.HttpCookie.Expires%2A>.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece el <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> propiedad `false`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="false"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CookieTimeout { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieTimeout : int" Usage="System.Web.Security.Roles.CookieTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número de minutos antes de que expire la cookie de roles.</summary>
        <value>Un entero que especifica el número de minutos antes de que expire la cookie de roles. El valor predeterminado es de 30 minutos.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.CookieTimeout%2A> propiedad se utiliza cuando el <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> propiedad es `true` y especifica el período de vida en minutos para la cookie de roles. Para establecer el <xref:System.Web.Security.Roles.CookieTimeout%2A> valor, agregue el `cookieTimeout` atributo al elemento en el archivo Web.config para la aplicación ASP.NET y especifique un valor entero.  
  
 Si <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> es `false`, esta propiedad se omite.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece el <xref:System.Web.Security.Roles.CookieTimeout%2A> propiedad en 30 minutos.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
  <add  
    name="SqlProvider"  
    type="System.Web.Security.SqlRoleProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CreatePersistentCookie As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CreatePersistentCookie { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CreatePersistentCookie : bool" Usage="System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene un valor que indica si la cookie de nombres de rol es para una sesión o persistente.</summary>
        <value>Es <see langword="true" /> si la cookie de nombres de rol es persistente; de lo contrario, es <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> valor de propiedad se establece en la configuración de una aplicación ASP.NET con la `createPersistentCookie` atributo del elemento de configuración.  
  
 Cuando `false`, la cookie de nombres de función es una cookie de sesión, es decir, la cookie se pierde cuando se cierra el explorador. Cuando `true`, la cookie de nombres de función es una cookie persistente que está disponible en varias sesiones de explorador. La fecha de expiración de cookie persistente y la hora se establecen en la fecha y hora actual más el <xref:System.Web.Security.Roles.CookieTimeout%2A> valor en minutos.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member CreateRole : string -&gt; unit" Usage="System.Web.Security.Roles.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nombre del rol que se va a crear.</param>
        <summary>Agrega un rol nuevo al origen de datos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.CreateRole%2A> método agrega un nombre de rol para el origen de datos. <xref:System.Web.Security.Roles.CreateRole%2A> las llamadas del <xref:System.Web.Security.RoleProvider.CreateRole%2A> método del proveedor de funciones predeterminado para agregar el rol especificado para el origen de datos.  
  
> [!NOTE]
>  Los nombres de rol no pueden contener comas.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se crea un nuevo rol del origen de datos. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  En este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía.  
  
O bien 
 <paramref name="roleName" /> contiene una coma.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteCookie ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteCookie();" />
      <MemberSignature Language="F#" Value="static member DeleteCookie : unit -&gt; unit" Usage="System.Web.Security.Roles.DeleteCookie " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Elimina la cookie donde se almacenan los nombres de rol.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.DeleteCookie%2A> método borra el contenido de la cookie que se usa para la memoria caché los nombres de rol. Para obtener más información sobre el almacenamiento en caché los nombres de rol, consulte <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.  
  
   
  
## Examples  
 El siguiente ejemplo de código llama el <xref:System.Web.Security.Roles.DeleteCookie%2A> para borrar cualquier método de almacenar en caché los nombres de rol cuando un usuario inicia sesión. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  En este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Roles#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-aspx-vb[System.Web.Security.Roles#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Quita un rol del origen de datos.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">Nombre del rol que se va a eliminar.</param>
        <summary>Quita un rol del origen de datos.</summary>
        <returns>Es <see langword="true" /> si <paramref name="roleName" /> se eliminó del origen de datos; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.DeleteRole%2A> método quita un nombre de rol del origen de datos. <xref:System.Web.Security.Roles.DeleteRole%2A> las llamadas del <xref:System.Web.Security.RoleProvider.DeleteRole%2A> método del proveedor de funciones predeterminado para quitar el rol especificado del origen de datos.  
  
 Si la función identificada por el `roleName` parámetro tiene uno o más miembros, a continuación, se producirá una excepción y no se eliminará el rol.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se elimina un rol del origen de datos. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> tiene uno o varios miembros.  
  
O bien 
No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="static member DeleteRole : string * bool -&gt; bool" Usage="System.Web.Security.Roles.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">Nombre del rol que se va a eliminar.</param>
        <param name="throwOnPopulatedRole">Si es <see langword="true" />, se produce una excepción si <c>roleName</c> tiene uno o más miembros.</param>
        <summary>Quita un rol del origen de datos.</summary>
        <returns>Es <see langword="true" /> si <paramref name="roleName" /> se eliminó del origen de datos; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.DeleteRole%2A> método quita un nombre de rol del origen de datos. <xref:System.Web.Security.Roles.DeleteRole%2A> las llamadas del <xref:System.Web.Security.RoleProvider.DeleteRole%2A> método del proveedor de funciones predeterminado para quitar el rol especificado del origen de datos.  
  
 Si `throwOnPopulatedRole` es `true`, a continuación, se producirá una excepción y el rol no se eliminará si la función identificada por el `roleName` parámetro tiene uno o más miembros. Si `throwOnPopulatedRole` es `false`, a continuación, se eliminará el rol si está vacía o no.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se elimina un rol del origen de datos. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> tiene uno o más miembros y <paramref name="throwOnPopulatedRole" /> es <see langword="true" />.  
  
O bien 
No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Domain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string" Usage="System.Web.Security.Roles.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el valor del dominio de la cookie de nombres de rol.</summary>
        <value>La propiedad <see cref="P:System.Web.HttpCookie.Domain" /> de la cookie de nombres de rol.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.Domain%2A> valor de propiedad se establece en la configuración de una aplicación ASP.NET con la `domain` atributo del elemento de configuración.  
  
 Si se especifica ningún valor en la configuración para el atributo de dominio, el <xref:System.Web.Security.Roles.Domain%2A> propiedad devuelve `null` y el valor predeterminado es el dominio de la cookie de nombres de rol al comportamiento de la <xref:System.Web.HttpCookie> <xref:System.Web.HttpCookie.Domain%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Web.Security.Roles.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene o establece un valor que indica si está habilitada la administración de roles para la aplicación web actual.</summary>
        <value>Es <see langword="true" /> si la administración de roles está habilitada; en caso contrario, <see langword="false" />. El valor predeterminado es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece el `enabled` atributo `true`.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="static member FindUsersInRole : string * string -&gt; string[]" Usage="System.Web.Security.Roles.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">El rol en el que se va a buscar.</param>
        <param name="usernameToMatch">El nombre de usuario que se va a buscar.</param>
        <summary>Obtiene una lista de los nombres de usuario de un rol especificado que contienen un nombre de usuario buscado.</summary>
        <returns>Una matriz de cadenas que contiene los nombres de todos los usuarios cuyo nombre coincide con <paramref name="usernameToMatch" /> y que son miembros del rol especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> Devuelve una lista de usuarios de una función donde el nombre de usuario contiene una coincidencia de proporcionado `usernameToMatch` el configurado `applicationName`. Por ejemplo, si la `usernameToMatch` parámetro se establece en "user", a continuación, los usuarios "user1", "user2", "usuario3", y así sucesivamente se devuelven. Los usuarios se devuelven en orden alfabético por nombre de usuario.  
  
 El <xref:System.Web.Security.SqlRoleProvider> realiza la búsqueda utilizando una cláusula LIKE contra el `usernameToMatch` parámetro. Los caracteres comodín que es compatibles con SQL Server en como cláusulas que pueden usarse en el `usernameToMatch` el valor del parámetro.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.FindUsersInRole%2A> método para mostrar la pertenencia al rol basado en la entrada del usuario. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  En este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> es <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).  
  
O bien 
 El valor de <paramref name="usernameToMatch" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="usernameToMatch" /> es una cadena vacía.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="static member GetAllRoles : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene una lista de todas los roles de la aplicación.</summary>
        <returns>Una matriz de cadenas que contiene los nombres de todas los roles almacenados en el origen de datos de la aplicación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.GetAllRoles%2A> llamadas al método el <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=nameWithType> método del proveedor de funciones para obtener una lista de todas las funciones del origen de datos para una aplicación de forma predeterminada. Sólo las funciones de la aplicación que se especifica en el <xref:System.Web.Security.Roles.ApplicationName%2A> se recupera la propiedad.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.GetAllRoles%2A> método para obtener la lista de roles para una aplicación y enlazar los resultados a un <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> control. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  En este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene una lista de los roles en que está incluido un usuario.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser();" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : unit -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene una lista de los roles en los que está incluido el usuario de la sesión actual.</summary>
        <returns>Una matriz de cadenas que contiene los nombres de todas los roles en los que está incluido el usuario de la sesión actual.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.GetRolesForUser%2A> llamadas al método el <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> método del proveedor de funciones predeterminado para recuperar de los datos de origen de los roles que el usuario ha iniciado sesión actualmente se encuentra en. El usuario ha iniciado sesión actualmente se identifica mediante el <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> propiedad del elemento actual <xref:System.Web.HttpContext?displayProperty=nameWithType>, o por <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> entornos de hospedaje para que no sean HTTP. Si ningún usuario ha iniciado sesión, se producirá una excepción. Sólo las funciones de la aplicación que se especifica en el <xref:System.Web.Security.Roles.ApplicationName%2A> se recupera la propiedad.  
  
 Si <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> es `true`, a continuación, los resultados de la <xref:System.Web.Security.Roles.GetRolesForUser%2A> método puede devolverse desde la caché de rol en lugar de con el proveedor de roles especificado.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.GetRolesForUser%2A> método para recuperar una lista de roles para un usuario específico y enlazar las funciones devueltas a un <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> control. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Ningún usuario ha iniciado sesión.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="static member GetRolesForUser : string -&gt; string[]" Usage="System.Web.Security.Roles.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">Usuario del que se va a devolver una lista de roles.</param>
        <summary>Obtiene una lista de los roles en que está incluido un usuario.</summary>
        <returns>Matriz de cadenas que contiene los nombres de todas los roles en los que está incluido el usuario especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.GetRolesForUser%2A> llamadas al método el <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=nameWithType> método del proveedor de funciones predeterminado para recuperar de los datos de origen de los roles que el usuario está en. Sólo las funciones de la aplicación que se especifica en el <xref:System.Web.Security.Roles.ApplicationName%2A> se recupera la propiedad.  
  
 Si `username` es igual que el usuario ha iniciado la sesión actual y <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> es `true`, los resultados de la <xref:System.Web.Security.Roles.GetRolesForUser%2A> método puede devolverse desde la caché de rol en lugar de especificado <xref:System.Web.Security.Roles.Provider%2A>.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.GetRolesForUser%2A> método para recuperar una lista de roles para un usuario específico y enlazar las funciones devueltas a un <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> control. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.Roles#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="username" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> contiene una coma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member GetUsersInRole : string -&gt; string[]" Usage="System.Web.Security.Roles.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">El rol para la que se obtiene la lista de usuarios.</param>
        <summary>Obtiene una lista de usuarios incluidos en el rol especificado.</summary>
        <returns>Matriz de cadenas que contiene los nombres de todos los usuarios que son miembros del rol especificado.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.GetUsersInRole%2A> llamadas al método el <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> método del proveedor de funciones para recuperar los nombres de usuario asociados a una función del origen de datos de forma predeterminada. Sólo las funciones de la aplicación que se especifica en el <xref:System.Web.Security.Roles.ApplicationName%2A> se recupera la propiedad.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.GetUsersInRole%2A> método para obtener una lista de los usuarios en un rol determinado y enlaza los resultados a un <xref:System.Web.UI.WebControls.GridView> control. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obtiene un valor que indica si un usuario está incluido en el rol especificado.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">El nombre del rol en el que se busca.</param>
        <summary>Obtiene un valor que indica si el usuario que inició la sesión actual está incluido en el rol especificado. La API solo se ha diseñado para que se llame en el contexto de un subproceso de solicitud ASP.NET, y en este uso aprobado es seguro para subprocesos.</summary>
        <returns>Es <see langword="true" /> si el usuario que inició la sesión actual está en el rol especificado; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.IsUserInRole%2A> llamadas al método el <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=nameWithType> método del proveedor de funciones predeterminado para determinar si el usuario ha iniciado la sesión está asociado a un rol del origen de datos para la aplicación que se especifica en el <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad. El usuario ha iniciado sesión actualmente se identifica mediante el <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> propiedad del elemento actual <xref:System.Web.HttpContext?displayProperty=nameWithType>, o por <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> entornos de hospedaje para que no sean HTTP. Si ningún usuario ha iniciado sesión, se producirá una excepción. Sólo las funciones de la aplicación que se especifica en el <xref:System.Web.Security.Roles.ApplicationName%2A> se recupera la propiedad.  
  
 Si <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> es `true`, a continuación, `roleName` puede comprobarse con la memoria caché de roles en lugar de con el proveedor de roles especificado.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se comprueba mediante programación si el usuario ha iniciado la sesión está en la función Administradores antes de permitir al usuario ver la configuración de roles para la aplicación. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.  
  
O bien 
Ningún usuario ha iniciado sesión.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member IsUserInRole : string * string -&gt; bool" Usage="System.Web.Security.Roles.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">El nombre del usuario que se busca.</param>
        <param name="roleName">El nombre del rol en el que se busca.</param>
        <summary>Obtiene un valor que indica si el usuario especificado está incluido en el rol especificado. La API solo se ha diseñado para que se llame en el contexto de un subproceso de solicitud ASP.NET, y en este uso aprobado es seguro para subprocesos.</summary>
        <returns>Es <see langword="true" /> si el usuario especificado está incluido en el rol especificado; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.IsUserInRole%2A> llamadas al método el <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> método del proveedor de funciones predeterminado para determinar si un nombre de usuario está asociado a un rol del origen de datos para la aplicación que se especifica en el <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad.  
  
 Si `username` es igual que el usuario ha iniciado la sesión actual y el <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> es el valor de propiedad `true`, `roleName` pueden comprobarse con la memoria caché de rol en lugar de especificado <xref:System.Web.Security.Roles.Provider%2A>.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se comprueba mediante programación si un usuario está en la función Administradores antes de permitir al usuario ver la configuración de roles para la aplicación. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="username" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="username" /> contiene una coma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxCachedResults As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxCachedResults { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxCachedResults : int" Usage="System.Web.Security.Roles.MaxCachedResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el número máximo de nombres de rol almacenados para un usuario.</summary>
        <value>El número máximo de nombres de rol que se almacenan para un usuario. El valor predeterminado es 25.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.MaxCachedResults%2A> propiedad se establece mediante la `maxCachedResults` atributo de configuración. El valor de la `maxCachedResults` atributo de configuración debe establecerse en un valor entero mayor que cero.  
  
   
  
## Examples  
 El ejemplo siguiente muestra el elemento en el `system.web` sección del archivo Web.config para una aplicación ASP.NET. Especifica que la aplicación usa un <xref:System.Web.Security.SqlRoleProvider> instancia y establece el `maxCachedResults` atribuir a 10.  
  
```  
<roleManager  
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All"   
  maxCachedResults="10" />  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Provider As RoleProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProvider ^ Provider { System::Web::Security::RoleProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Provider : System.Web.Security.RoleProvider" Usage="System.Web.Security.Roles.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el proveedor de roles predeterminado para la aplicación.</summary>
        <value>El proveedor de roles predeterminado de la aplicación, que se expone como una clase que hereda de la clase abstracta <see cref="T:System.Web.Security.RoleProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.Provider%2A> propiedad le permite hacer referencia directamente a proveedor de funciones predeterminado para una aplicación. Esto se utiliza normalmente para tener acceso a los miembros personalizados del proveedor de funciones que no forma parte de la <xref:System.Web.Security.RoleProvider> clase abstracta.  
  
 Por ejemplo, el <xref:System.Web.Security.WindowsTokenRoleProvider> clase incluye una sobrecarga de la <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> método que le permite determinar si un usuario está en una función común de Windows mediante el uso de un <xref:System.Security.Principal.WindowsBuiltInRole> valor de enumeración. Una referencia a la <xref:System.Web.Security.WindowsTokenRoleProvider> la clase para una aplicación puede obtenerse mediante el uso de la <xref:System.Web.Security.Roles.Provider%2A> propiedad y se puede convertir un <xref:System.Web.Security.WindowsTokenRoleProvider> con el fin de hacer referencia a la <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> sobrecargar.  
  
 Si se configuran varios proveedores de roles para una aplicación, puede tener acceso a proveedores de funciones diferentes mediante el <xref:System.Web.Security.Roles.Providers%2A> colección.  
  
   
  
## Examples  
 El ejemplo de código siguiente convierte el proveedor de roles predeterminado como un <xref:System.Web.Security.WindowsTokenRoleProvider> y comprueba si el usuario ha iniciado la sesión está en la función Administradores antes de permitir al usuario ver la configuración de roles para la aplicación. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.WindowsTokenRoleProvider>.  
  
 [!code-aspx-csharp[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Providers As RoleProviderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Security::RoleProviderCollection ^ Providers { System::Web::Security::RoleProviderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Web.Security.RoleProviderCollection" Usage="System.Web.Security.Roles.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene una colección de los proveedores de roles de la aplicación ASP.NET.</summary>
        <value>Una clase <see cref="T:System.Web.Security.RoleProviderCollection" /> que contiene los proveedores de roles configurados para la aplicación ASP.NET.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.Providers%2A> propiedad hace referencia a todos los proveedores de roles habilitados para una aplicación, incluidos todos los proveedores agregados en el archivo Web.config. Puede controlar qué rol proveedores están disponibles para una aplicación mediante el uso de la `providers` elemento de la sección en el archivo Web.config para la aplicación.  
  
 El ejemplo siguiente se muestra una sección que quita cualquier proveedor existente (como los especificados en el archivo Machine.config) y agrega un <xref:System.Web.Security.SqlRoleProvider> instancia como el proveedor de roles para la aplicación.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="Encrypted">  
  
      <providers>  
        <clear/>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
         </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Puede obtener una referencia fuertemente tipada a un proveedor de la <xref:System.Web.Security.Roles.Providers%2A> colección indizar el proveedor de funciones por nombre y convirtiéndolo en el tipo deseado.  
  
 Puede obtener una referencia al proveedor predeterminado para una aplicación con el <xref:System.Web.Security.Roles.Provider%2A> propiedad.  
  
   
  
## Examples  
 El ejemplo de código siguiente enumera los proveedores habilitados para una aplicación y sus tipos respectivos.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-aspx-vb[System.Web.Security.Roles#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRole (username As String, roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRole : string * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">El usuario que se quita del rol especificado.</param>
        <param name="roleName">El rol del que se quita el usuario especificado.</param>
        <summary>Quita el usuario especificado del rol especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> método llama al proveedor de funciones predeterminado para quitar el usuario especificado de la función especificada en el origen de datos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se quita un usuario de un rol. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="username" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,). 
 <paramref name="username" /> es una cadena vacía o contiene una coma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUserFromRoles (username As String, roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUserFromRoles(System::String ^ username, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUserFromRoles : string * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUserFromRoles (username, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">El usuario que se quita de los roles especificados.</param>
        <param name="roleNames">Una matriz de cadenas de nombres de rol del que se quita el usuario especificado.</param>
        <summary>Quita el usuario especificado de los roles especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> método llama al proveedor de funciones predeterminado para quitar el usuario especificado de las funciones especificadas en el origen de datos.  
  
 Si la aplicación está configurada para usar el <xref:System.Web.Security.SqlRoleProvider> clase, las actualizaciones de base de datos que se realizan durante la llamada a la <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> método se realizan dentro de una transacción. Si se produce un error, como un nombre de usuario que no está en una función especificada, la transacción se revierte y no se realizan actualizaciones.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> método para quitar un usuario de uno o varios roles. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-aspx-vb[System.Web.Security.Roles#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Una de los roles de <paramref name="roleNames" /> es <see langword="null" />.  
  
O bien 
 El valor de <paramref name="username" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Una de los roles de <paramref name="roleNames" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="username" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="roleNames" /> contiene un elemento duplicado.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRole (usernames As String(), roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRole(cli::array &lt;System::String ^&gt; ^ usernames, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRole : string[] * string -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRole (usernames, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">Una matriz de cadena de nombres de usuario que se quitarán de los roles especificados.</param>
        <param name="roleName">El nombre del rol del que se quitan los usuarios especificados.</param>
        <summary>Quita los usuarios especificados del rol especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> método llama al proveedor de funciones predeterminado para quitar los usuarios especificados de la función especificada en el origen de datos.  
  
 Si la aplicación usa el <xref:System.Web.Security.SqlRoleProvider> clase, las actualizaciones de base de datos que se realizan durante la llamada a la <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> método se realizan dentro de una transacción. Si se produce un error, como un nombre de usuario que no está en una función especificada, la transacción se revierte y no se realizan actualizaciones.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> método para quitar uno o varios usuarios de un rol. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-aspx-vb[System.Web.Security.Roles#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">El valor de <paramref name="roleName" /> es <see langword="null" />.  
  
O bien 
Uno de los nombres de usuario de <paramref name="usernames" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
Uno de los nombres de usuario de <paramref name="usernames" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="usernames" /> contiene un elemento duplicado.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="static member RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="System.Web.Security.Roles.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">Una matriz de cadena de nombres de usuario que se quitarán de los roles especificados.</param>
        <param name="roleNames">Una matriz de cadenas de nombres de rol del que se quitan los usuarios especificados.</param>
        <summary>Quita los nombres de usuario especificados de los roles especificados.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> método llama al proveedor de funciones predeterminado para quitar los usuarios especificados de las funciones especificadas en el origen de datos.  
  
 Si la aplicación usa el <xref:System.Web.Security.SqlRoleProvider> clase, las actualizaciones de base de datos que se realizan durante la llamada a la <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> método se realizan dentro de una transacción. Si se produce un error, como un nombre de usuario que no está en una función especificada, la transacción se revierte y no se realizan actualizaciones.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> método para quitar uno o varios usuarios de uno o varios roles en función de entrada del usuario. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
 [!code-aspx-csharp[System.Web.Security.Roles#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-aspx-vb[System.Web.Security.Roles#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Una de los roles especificados en <paramref name="roleNames" /> es <see langword="null" />.  
  
O bien 
Uno de los usuarios especificados en <paramref name="usernames" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Una de los roles especificadas en <paramref name="roleNames" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
Uno de los usuarios especificados en <paramref name="usernames" /> es una cadena vacía o contiene una coma (,).  
  
O bien 
 <paramref name="roleNames" /> contiene un elemento duplicado.  
  
O bien 
 <paramref name="usernames" /> contiene un elemento duplicado.</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="static member RoleExists : string -&gt; bool" Usage="System.Web.Security.Roles.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">El nombre del rol que se va a buscar en el origen de datos.</param>
        <summary>Obtiene un valor que indica si el nombre de rol especificado ya existe en el origen de datos del rol.</summary>
        <returns>Es <see langword="true" /> si el nombre del rol ya existe en el origen de datos; de lo contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.Roles.RoleExists%2A> llamadas al método el `RoleExists` método del proveedor de funciones predeterminado para determinar si existe un nombre de rol en el origen de datos para la aplicación que se especifica en el <xref:System.Web.Security.Roles.ApplicationName%2A> propiedad.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza el <xref:System.Web.Security.Roles.RoleExists%2A> método para determinar si un nombre de rol ya existe antes de crear el rol. Para obtener un ejemplo de un archivo Web.config que permite la administración de roles, consulte <xref:System.Web.Security.Roles>.  
  
> [!IMPORTANT]
>  En este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](https://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> es <see langword="null" /> (<see langword="Nothing" /> en Visual Basic).</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> es una cadena vacía o contiene una coma (,).</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">No está habilitada la administración de roles.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a0d2f19d-a2a7-496d-88b6-30133f8ea3d6">Descripción de la administración de roles de ASP.NET</related>
      </Docs>
    </Member>
  </Members>
</Type>