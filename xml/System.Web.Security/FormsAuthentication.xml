<Type Name="FormsAuthentication" FullName="System.Web.Security.FormsAuthentication">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99fdbeccd9e5760538fd56df9dc3fd84a77c7e7d" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36597460" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FormsAuthentication" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FormsAuthentication extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.FormsAuthentication" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FormsAuthentication" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormsAuthentication sealed" />
  <TypeSignature Language="F#" Value="type FormsAuthentication = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Manages forms-authentication services for Web applications. This class cannot be inherited.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Autenticación de formularios permite usuario y la validación de contraseña para las aplicaciones Web que no requieren autenticación de Windows. Con autenticación de formularios, información de usuario se almacena en un origen de datos externo, como un <xref:System.Web.Security.Membership> base de datos, o en el archivo de configuración para una aplicación. Una vez que un usuario está autenticado, la autenticación de formularios mantiene un vale de autenticación en una cookie o en la dirección URL para que un usuario autenticado no necesita proporcionar credenciales con cada solicitud.  
  
 Autenticación de formularios se habilita estableciendo el `mode` atributo del elemento de configuración para `Forms`. Puede requerir que todas las solicitudes a una aplicación contienen un vale de autenticación de usuario válido utilizando el elemento de configuración para denegar la solicitud de cualquier usuario desconocido, como se muestra en el ejemplo siguiente.  
  
```  
<system.web>  
  <authentication mode="Forms">  
    <forms loginUrl="login.aspx" />  
  </authentication>  
  <authorization>  
    <deny users="?" />  
  </authorization>  
</system.web>  
```  
  
 En el ejemplo anterior, cualquier solicitud de una página ASP.NET que forma parte de la aplicación requiere un nombre de usuario válido que se proporciona mediante la autenticación de formularios. Si no existe ningún nombre de usuario, la solicitud se redirige a la configurada <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>.  
  
 La <xref:System.Web.Security.FormsAuthentication> clase proporciona acceso a métodos y propiedades que puede usar en una aplicación que autentica a los usuarios. El <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método redirige un explorador a la configurada <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> para los usuarios inicien sesión en una aplicación. El <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método redirige al usuario autenticado a la dirección URL protegida original que se solicitó o a la <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>. También hay métodos que permiten administrar vales de autenticación de formularios, si es necesario.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra el archivo Web.config para una aplicación de ASP.NET que usa el proveedor de pertenencia ASP.NET para la autenticación de formularios y requiere que todos los usuarios se autentiquen.  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  <system.web>  
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="20">  
      <providers>  
        <add name="SqlProvider"  
          type="System.Web.Security.SqlMembershipProvider"  
          connectionStringName="SqlServices"  
          enablePasswordRetrieval="false"  
          enablePasswordReset="true"  
          requiresQuestionAndAnswer="true"  
          passwordFormat="Hashed"  
          applicationName="/" />  
      </providers>  
    </membership>  
  </system.web>  
</configuration>  
```  
  
 En el ejemplo de código siguiente se muestra la página de inicio de sesión para una aplicación ASP.NET que utiliza autenticación de formularios y pertenencia a ASP.NET.  
  
> [!IMPORTANT]
>  Este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Web.AspNetHostingPermission">Para usar la <see cref="T:System.Web.Security.FormsAuthentication" /> clase en un entorno hospedado. Valor de la petición: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Valor de permiso: <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" />.</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormsAuthentication ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormsAuthentication();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Security.FormsAuthentication" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este constructor no está pensado para usarse desde el código.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public static bool Authenticate (string name, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Authenticate(string name, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Authenticate(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Authenticate (name As String, password As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Authenticate(System::String ^ name, System::String ^ password);" />
      <MemberSignature Language="F#" Value="static member Authenticate : string * string -&gt; bool" Usage="System.Web.Security.FormsAuthentication.Authenticate (name, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.ValidateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The user name.</param>
        <param name="password">The password for the user.</param>
        <summary>Validates a user name and password against credentials stored in the configuration file for an application.</summary>
        <returns>
          <see langword="true" /> if the user name and password are valid; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El método Authenticate comprueba las credenciales de usuario que se almacenan en la sección del archivo de configuración de aplicación. Como alternativa, puede usar la pertenencia a ASP.NET para almacenar las credenciales de usuario y llame al método el <xref:System.Web.Security.MembershipProvider.ValidateUser%2A> para comprobar las credenciales. Para obtener más información, consulte [administrar usuarios mediante pertenencia](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd).  
  
 Para mejorar la seguridad, puede cifrar las contraseñas almacenadas en el archivo de configuración para una aplicación mediante el uso de la <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra las credenciales de usuario almacenadas en el archivo Web.config para una aplicación. Los valores de contraseña han sido aplica un algoritmo hash mediante la <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> método.  
  
 `<authentication mode="Forms">`  
  
 `<forms loginUrl="login.aspx">`  
  
 `<credentials passwordFormat="SHA1">`  
  
 `<user name="user1"   password="27CE4CA7FBF00685AF2F617E3F5BBCAFF7B7403C" />`  
  
 `<user name="user2"   password="D108F80936F78DFDD333141EBC985B0233A30C7A" />`  
  
 `<user name="user3" password="7BDB09781A3F23885CD43177C0508B375CB1B7E9"/>`  
  
 `</credentials>`  
  
 `</forms>`  
  
 `</authentication>`  
  
 En el ejemplo de código siguiente se muestra una página de inicio de sesión que usa el <xref:System.Web.Security.FormsAuthentication.Authenticate%2A> método para validar las credenciales de usuario.  
  
> [!IMPORTANT]
>  Este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieDomain">
      <MemberSignature Language="C#" Value="public static string CookieDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieDomain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieDomain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CookieDomain { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieDomain : string" Usage="System.Web.Security.FormsAuthentication.CookieDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the domain of the forms-authentication cookie.</summary>
        <value>El <see cref="P:System.Web.HttpCookie.Domain" /> de la cookie de autenticación de formularios. El valor predeterminado es una cadena vacía ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A> valor de la propiedad se establece en el archivo de configuración para una aplicación de ASP.NET mediante el `domain` atributo del elemento de configuración. El <xref:System.Web.Security.FormsAuthentication.CookieDomain%2A> determina el valor de propiedad el <xref:System.Web.HttpCookie.Domain%2A> que se usará para la cookie.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `domain` atributo en el archivo Web.config.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    domain="contoso.com" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieMode As HttpCookieMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::HttpCookieMode CookieMode { System::Web::HttpCookieMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieMode : System.Web.HttpCookieMode" Usage="System.Web.Security.FormsAuthentication.CookieMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the application is configured for cookieless forms authentication.</summary>
        <value>Uno de los <see cref="T:System.Web.HttpCookieMode" /> valores que indica si la aplicación está configurada para la autenticación de formularios sin cookies. De manera predeterminada, es <see cref="F:System.Web.HttpCookieMode.UseDeviceProfile" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> propiedad refleja el valor de la `cookieless` atributo del elemento de configuración. El <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> propiedad determina si el <xref:System.Web.Security.FormsAuthenticationTicket> valor se almacena en una cookie de sesión en el explorador o se almacena en la <xref:System.Web.HttpRequest.QueryString%2A> propiedad.  
  
> [!NOTE]
>  Cuando el <xref:System.Web.Security.FormsAuthenticationTicket> valor se almacena en el URI, la longitud del URI generado puede ser mayor que la longitud máxima permitida. Esto es más probable que se produzca cuando el <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> propiedad se establece en el nombre de la aplicación y el nombre de la aplicación es largo (40 o más caracteres), cuando los nombres de usuario de la aplicación son largos o cuando long <xref:System.Web.Security.FormsAuthenticationTicket.UserData%2A> cadenas se almacenan en la <xref:System.Web.Security.FormsAuthenticationTicket> valor. Si el URI generado es demasiado largo, el servidor Web devolverá un `400 - Bad Request` error.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `cookieless` atribuir a `AutoDetect` en el archivo Web.config.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="AutoDetect" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieSameSite">
      <MemberSignature Language="C#" Value="public static System.Web.SameSiteMode CookieSameSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.SameSiteMode CookieSameSite" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookieSameSite As SameSiteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::SameSiteMode CookieSameSite { System::Web::SameSiteMode get(); };" />
      <MemberSignature Language="F#" Value="member this.CookieSameSite : System.Web.SameSiteMode" Usage="System.Web.Security.FormsAuthentication.CookieSameSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SameSiteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the value for the SameSite attribute of the cookie.</summary>
        <value>Uno de los valores de enumeración que representa el modo de cumplimiento de la cookie. El valor predeterminado es <see cref="F:System.Web.SameSiteMode.Lax" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiesSupported">
      <MemberSignature Language="C#" Value="public static bool CookiesSupported { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookiesSupported" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CookiesSupported As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CookiesSupported { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CookiesSupported : bool" Usage="System.Web.Security.FormsAuthentication.CookiesSupported" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether the application is configured to support cookieless forms authentication.</summary>
        <value>
          <see langword="false" /> Si la aplicación está configurada para admitir la autenticación de formularios sin cookies; en caso contrario, <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad devuelve un valor basado en la <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> valor y las capacidades del explorador.  
  
-   Si el <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> propiedad está establecida en <xref:System.Web.HttpCookieMode.UseCookies>, <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad devolverá `true`.  
  
-   Si el <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> propiedad está establecida en <xref:System.Web.HttpCookieMode.UseUri>, <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad devolverá `false`.  
  
-   Si el <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> propiedad está establecida en <xref:System.Web.HttpCookieMode.AutoDetect>, <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad devolverá `true` si el explorador admite cookies y las cookies están habilitadas; en caso contrario, el <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad devolverá `false`.  
  
-   Si el <xref:System.Web.Security.FormsAuthentication.CookieMode%2A> propiedad está establecida en <xref:System.Web.HttpCookieMode.UseDeviceProfile>, el <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad devolverá `true` si la <xref:System.Web.HttpRequest.Browser%2A> actuales <xref:System.Web.HttpContext.Request%2A> es compatible con las cookies y la redirección con cookies; en caso contrario, el <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad devolverá `false`.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `cookieless` atribuir a <xref:System.Web.HttpCookieMode.UseUri> en el archivo Web.config. Esta configuración se producirá en el <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad devolver `false`.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseUri" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket Decrypt (string encryptedTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket Decrypt(string encryptedTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Decrypt(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Decrypt (encryptedTicket As String) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ Decrypt(System::String ^ encryptedTicket);" />
      <MemberSignature Language="F#" Value="static member Decrypt : string -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.Decrypt encryptedTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encryptedTicket" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="encryptedTicket">The encrypted authentication ticket.</param>
        <summary>Creates a <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> object based on the encrypted forms-authentication ticket passed to the method.</summary>
        <returns>A <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> object. If the <paramref name="encryptedTicket" /> parameter is not a valid ticket, <see langword="null" /> is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="encryptedTicket" /> is <see langword="null" />.  \- or -  <paramref name="encryptedTicket" /> is an empty string ("").  \- or -  The length of <paramref name="encryptedTicket" /> is greater than 4096 characters.  \- or -  <paramref name="encryptedTicket" /> is of an invalid format.</exception>
      </Docs>
    </Member>
    <Member MemberName="DefaultUrl">
      <MemberSignature Language="C#" Value="public static string DefaultUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string DefaultUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ DefaultUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultUrl : string" Usage="System.Web.Security.FormsAuthentication.DefaultUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URL that the <see cref="T:System.Web.Security.FormsAuthentication" /> class will redirect to if no redirect URL is specified.</summary>
        <value>La dirección URL que el <see cref="T:System.Web.Security.FormsAuthentication" /> clase no redirigirá como si se especifica la dirección URL de redireccionamiento. El valor predeterminado es "default.aspx".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> valor de la propiedad se establece en el archivo de configuración para una aplicación de ASP.NET mediante el `defaultUrl` atributo del elemento de configuración. El <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad la usan los <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método si no se incluye ninguna dirección URL devuelta en la solicitud. De forma similar, el <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> método devolverá el <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> si ninguna dirección URL de retorno se incluye en la solicitud.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `defaultUrl` atributo en el archivo Web.config.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    defaultUrl="index.aspx" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCrossAppRedirects">
      <MemberSignature Language="C#" Value="public static bool EnableCrossAppRedirects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool EnableCrossAppRedirects" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnableCrossAppRedirects As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool EnableCrossAppRedirects { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EnableCrossAppRedirects : bool" Usage="System.Web.Security.FormsAuthentication.EnableCrossAppRedirects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether authenticated users can be redirected to URLs in other Web applications.</summary>
        <value>
          <see langword="true" /> Si los usuarios autenticados pueden redirigirse a direcciones URL en otras aplicaciones Web; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> valor de la propiedad se establece mediante el `enableCrossAppRedirects` atributo del elemento de configuración.  
  
 El <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad está activada en la <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método cuando la redirección de dirección URL no apunta a una página de la aplicación actual. Si <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> es `true`, a continuación, se realiza el redireccionamiento; si <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> es `false`, el explorador se redirige a la página definida en la <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad.  
  
> [!NOTE]
>  Al redirigir las páginas en todas las aplicaciones, debe asegurarse de que los atributos específicos en el elemento de configuración estén duplicados en las aplicaciones autenticadas. Para obtener más información y un ejemplo, vea [Forms Authentication Across Applications](http://msdn.microsoft.com/library/99e2f9e8-5b97-4a4d-a4ed-5f93276053b7).  
  
> [!IMPORTANT]
>  Cuando se permiten las redirecciones de todas las aplicaciones, el sitio es vulnerable a un ataque que dirige a los usuarios a un sitio Web malintencionado pero usa la página de inicio de sesión para el sitio. Compruebe siempre que la dirección URL de redireccionamiento que es devuelto por la <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> método es una dirección URL que se espera para que asegurarse de que permite las redirecciones a sitios Web aprobados exclusivamente. También debe comprobar que la dirección URL de redireccionamiento usa el protocolo adecuado (HTTP o HTTPS). Para realizar estas comprobaciones, puede agregar un controlador de evento de postback a su página de inicio de sesión o puede agregar un controlador para el <xref:System.Web.UI.WebControls.Login.LoggedIn> eventos de la <xref:System.Web.UI.WebControls.Login> control.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `enableCrossAppRedirects` atribuir a `true` en el archivo Web.config para una aplicación ASP.NET.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseUri"  
    requireSSL="true"   
    enableCrossAppRedirects="true" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableFormsAuthentication">
      <MemberSignature Language="C#" Value="public static void EnableFormsAuthentication (System.Collections.Specialized.NameValueCollection configurationData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableFormsAuthentication(class System.Collections.Specialized.NameValueCollection configurationData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.EnableFormsAuthentication(System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableFormsAuthentication (configurationData As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableFormsAuthentication(System::Collections::Specialized::NameValueCollection ^ configurationData);" />
      <MemberSignature Language="F#" Value="static member EnableFormsAuthentication : System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="System.Web.Security.FormsAuthentication.EnableFormsAuthentication configurationData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="configurationData" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="configurationData">A name-value collection that contains values for "defaultUrl" and/or "loginUrl". The parameter can be null if there are no values for the default URL or the login URL.</param>
        <summary>Enables forms authentication.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad es `null`, que la propiedad está establecida en el valor de la dirección URL predeterminada de la `configurationData` parámetro. Si el <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> propiedad es `null`, que la propiedad está establecida en el valor de dirección URL de inicio de sesión de la `configurationData` parámetro.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The application is not in the pre-start initialization phase.</exception>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public static string Encrypt (System.Web.Security.FormsAuthenticationTicket ticket);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Encrypt(class System.Web.Security.FormsAuthenticationTicket ticket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Encrypt(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Encrypt (ticket As FormsAuthenticationTicket) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Encrypt(System::Web::Security::FormsAuthenticationTicket ^ ticket);" />
      <MemberSignature Language="F#" Value="static member Encrypt : System.Web.Security.FormsAuthenticationTicket -&gt; string" Usage="System.Web.Security.FormsAuthentication.Encrypt ticket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticket" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="ticket">The <see cref="T:System.Web.Security.FormsAuthenticationTicket" /> object with which to create the encrypted forms-authentication ticket.</param>
        <summary>Creates a string containing an encrypted forms-authentication ticket suitable for use in an HTTP cookie.</summary>
        <returns>A string containing an encrypted forms-authentication ticket.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 El ejemplo de código siguiente almacena el resultado de la <xref:System.Web.Security.FormsAuthentication.Encrypt%2A> método en una cookie utilizando la <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> propiedad y redirige al usuario a la dirección URL devuelta desde el <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> método.  
  
> [!IMPORTANT]
>  Este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ticket" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FormsCookieName">
      <MemberSignature Language="C#" Value="public static string FormsCookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookieName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookieName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookieName : string" Usage="System.Web.Security.FormsAuthentication.FormsCookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the cookie used to store the forms-authentication ticket.</summary>
        <value>El nombre de la cookie usada para almacenar el vale de autenticación de formularios. El valor predeterminado es ". ASPXAUTH".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> valor de la propiedad se establece en el archivo de configuración para una aplicación de ASP.NET mediante el `name` atributo del elemento de configuración. El <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> se utiliza para hacer referencia a la cookie que almacena la <xref:System.Web.Security.FormsAuthenticationTicket> información.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la <xref:System.Web.Security.FormsAuthentication.FormsCookieName%2A> valor de la propiedad mediante el uso de la `name` atributo en el archivo Web.config.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    name=".ASPXFORMSAUTH" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormsCookiePath">
      <MemberSignature Language="C#" Value="public static string FormsCookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string FormsCookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property FormsCookiePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ FormsCookiePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FormsCookiePath : string" Usage="System.Web.Security.FormsAuthentication.FormsCookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the path for the forms-authentication cookie.</summary>
        <value>La ruta de acceso de la cookie donde se almacena la información del vale de autenticación de formularios. El valor predeterminado es "/".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> valor de la propiedad se establece en el archivo de configuración para una aplicación de ASP.NET utilizando el `path` atributo del elemento de configuración. El <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> especifica la <xref:System.Web.HttpCookie.Path%2A> de la cookie que almacena la <xref:System.Web.Security.FormsAuthenticationTicket> información.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> valor de la propiedad mediante el uso de la `path` atributo en el archivo Web.config.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    path="/MyApplication" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates an authentication cookie for a given user name.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The name of the authenticated user.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <summary>Creates an authentication cookie for a given user name. This does not set the cookie as part of the outgoing response, so that an application can have more control over how the cookie is issued.</summary>
        <returns>An <see cref="T:System.Web.HttpCookie" /> that contains encrypted forms-authentication ticket information. The default value for the <see cref="P:System.Web.Security.FormsAuthentication.FormsCookiePath" /> property is used.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 La ruta de acceso de la cookie viene determinado por la <xref:System.Web.Security.FormsAuthentication.FormsCookiePath%2A> propiedad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthCookie">
      <MemberSignature Language="C#" Value="public static System.Web.HttpCookie GetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.HttpCookie GetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String) As HttpCookie" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::HttpCookie ^ GetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member GetAuthCookie : string * bool * string -&gt; System.Web.HttpCookie" Usage="System.Web.Security.FormsAuthentication.GetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookie</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">The name of the authenticated user.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <param name="strCookiePath">The <see cref="P:System.Web.HttpCookie.Path" /> of the authentication cookie.</param>
        <summary>Creates an authentication cookie for a given user name. This does not set the cookie as part of the outgoing response.</summary>
        <returns>An <see cref="T:System.Web.HttpCookie" /> that contains encrypted forms-authentication ticket information.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRedirectUrl">
      <MemberSignature Language="C#" Value="public static string GetRedirectUrl (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRedirectUrl(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.GetRedirectUrl(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRedirectUrl (userName As String, createPersistentCookie As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetRedirectUrl(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member GetRedirectUrl : string * bool -&gt; string" Usage="System.Web.Security.FormsAuthentication.GetRedirectUrl (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The name of the authenticated user.</param>
        <param name="createPersistentCookie">This parameter is ignored.</param>
        <summary>Returns the redirect URL for the original request that caused the redirect to the login page.</summary>
        <returns>A string that contains the redirect URL, or null if <paramref name="userName" /> is null.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede usar este método cuando desee realizar la redirección en el código de aplicación en lugar de utilizar el <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método.  
  
 El <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> método devuelve la dirección URL especificada en la cadena de consulta usando el `ReturnURL` nombre de variable. Por ejemplo, en la dirección URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`, <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> método devuelve la dirección URL de retorno `caller.aspx`. Si el `ReturnURL` variable no existe, el <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> método devuelve la dirección URL en el <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad.  
  
 Cuando el explorador se redirige a la página de inicio de sesión, ASP.NET agrega automáticamente la URL de retorno.  
  
 De forma predeterminada, la `ReturnUrl` variable debe hacer referencia a una página en la aplicación actual. Si `ReturnUrl` hace referencia a una página en una aplicación diferente o en un servidor diferente, la <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> métodos devuelve la dirección URL en el <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad. Si desea permitir que la dirección URL de retorno hacer referencia a una página fuera de la aplicación actual, debe establecer el <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad `true` mediante el `enableCrossAppRedirects` atributo del elemento de configuración.  

Este método no crea una cookie.
  
> [!IMPORTANT]
>  Establecer el <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad `true` para permitir que las redirecciones de varias aplicaciones puede suponer una amenaza de seguridad. Para obtener más información, vea la propiedad <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>.  
  
   
  
## Examples  
 El siguiente código redirecciones de ejemplo procedentes de los usuarios autenticados a la dirección URL del <xref:System.Web.Security.FormsAuthentication.GetRedirectUrl%2A> método.  
  
> [!IMPORTANT]
>  Este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[FormsAuthenticationTicketClass#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationTicketClass/CS/formsauthenticationticketclasscs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationTicketClass#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationTicketClass/VB/formsauthenticationticketclassvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashPasswordForStoringInConfigFile">
      <MemberSignature Language="C#" Value="public static string HashPasswordForStoringInConfigFile (string password, string passwordFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string HashPasswordForStoringInConfigFile(string password, string passwordFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function HashPasswordForStoringInConfigFile (password As String, passwordFormat As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ HashPasswordForStoringInConfigFile(System::String ^ password, System::String ^ passwordFormat);" />
      <MemberSignature Language="F#" Value="static member HashPasswordForStoringInConfigFile : string * string -&gt; string" Usage="System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile (password, passwordFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("The recommended alternative is to use the Membership APIs, such as Membership.CreateUser. For more information, see http://go.microsoft.com/fwlink/?LinkId=252463.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="passwordFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="password">The password to hash.</param>
        <param name="passwordFormat">The hash algorithm to use. <c>passwordFormat</c> is a <see langword="String" /> that represents one of the <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> enumeration values.</param>
        <summary>Produces a hash password suitable for storing in a configuration file based on the specified password and hash algorithm.</summary>
        <returns>The hashed password.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.HashPasswordForStoringInConfigFile%2A> método crea un valor de contraseña con algoritmo hash que se puede usar cuando las credenciales de autenticación de formularios de almacenar en el archivo de configuración para una aplicación.  
  
 Se utilizan las credenciales de autenticación que se almacena en el archivo de configuración para una aplicación mediante el <xref:System.Web.Security.FormsAuthentication.Authenticate%2A> método para comprobar las contraseñas de usuarios de una aplicación. Como alternativa, puede usar la pertenencia a ASP.NET para almacenar las credenciales de usuario. Para obtener más información, consulte [administrar usuarios mediante pertenencia](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd).  
  
   
  
## Examples  
 En el ejemplo de código siguiente se toma un nombre de usuario, una contraseña y un tipo de algoritmo hash y muestra la sección de la configuración que incluye la definición de usuario y contraseña con algoritmo hash.  
  
> [!IMPORTANT]
>  Este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[FormsAuthenticationHashPassword#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormsAuthenticationHashPassword/CS/formsauthenticationhashpasswordcs.aspx#1)]
 [!code-aspx-vb[FormsAuthenticationHashPassword#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormsAuthenticationHashPassword/VB/formsauthenticationhashpasswordvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="password" /> is <see langword="null" />  -or-  <paramref name="passwordFormat" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="passwordFormat" /> is not a valid <see cref="T:System.Web.Configuration.FormsAuthPasswordFormat" /> value.</exception>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.Initialize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Initialize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Initialize();" />
      <MemberSignature Language="F#" Value="static member Initialize : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.Initialize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes the <see cref="T:System.Web.Security.FormsAuthentication" /> object based on the configuration settings for the application.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.Initialize%2A> se llama al método cuando el <xref:System.Web.Security.FormsAuthenticationModule> crea una instancia de la <xref:System.Web.Security.FormsAuthentication> clase. Este método no está pensado para ser llamado desde el código.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public static bool IsEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool" Usage="System.Web.Security.FormsAuthentication.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether forms authentication is enabled.</summary>
        <value>
          <see langword="true" /> Si está habilitada la autenticación de formularios; en caso contrario, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginUrl">
      <MemberSignature Language="C#" Value="public static string LoginUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string LoginUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LoginUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ LoginUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LoginUrl : string" Usage="System.Web.Security.FormsAuthentication.LoginUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URL for the login page that the <see cref="T:System.Web.Security.FormsAuthentication" /> class will redirect to.</summary>
        <value>Página de la dirección URL para el inicio de sesión que el <see cref="T:System.Web.Security.FormsAuthentication" /> clase le redirigirá a. El valor predeterminado es "login.aspx".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> valor de la propiedad se establece en el archivo de configuración para una aplicación de ASP.NET mediante el `loginUrl` atributo del elemento de configuración. El <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> utiliza la <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `loginUrl` atributo en el archivo Web.config.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    defaultUrl="index.aspx" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectFromLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Redirects an authenticated user back to the originally requested URL or the default URL.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The authenticated user name.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <summary>Redirects an authenticated user back to the originally requested URL or the default URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método redirige a la dirección URL especificada en la cadena de consulta usando el `ReturnURL` nombre de variable. Por ejemplo, en la dirección URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`, <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método redirige a la dirección URL de retorno `caller.aspx`. Si el `ReturnURL` variable no existe, el <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método redirige a la dirección URL en el <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad.  
  
 Cuando el explorador se redirige a la página de inicio de sesión, ASP.NET agrega automáticamente la URL de retorno.  
  
 De forma predeterminada, la `ReturnUrl` variable debe hacer referencia a una página en la aplicación actual. Si `ReturnUrl` hace referencia a una página en una aplicación diferente o en un servidor diferente, la <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> métodos redirige a la dirección URL en el <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad. Si desea permitir que redirige a una página fuera de la aplicación actual, debe establecer el <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad `true` mediante el `enableCrossAppRedirects` atributo del elemento de configuración.  
  
> [!IMPORTANT]
>  Establecer el <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad `true` para permitir que las redirecciones de varias aplicaciones puede suponer una amenaza de seguridad. Para obtener más información, vea la propiedad <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>.  
  
 Si el <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad es `true`y el `ReturnUrl` variable está dentro de la aplicación actual o la <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad es `true`, la <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método emite un vale de autenticación y lo coloca en el cookie de predeterminado mediante el <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> método.  
  
 Si <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> es `false` y es la ruta de acceso de redirección a una dirección URL de la aplicación actual, el vale se emitió como parte de la dirección URL de redireccionamiento. Si <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> es `false`, <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> es `true`y la redirección de dirección URL no hace referencia a una página en la aplicación actual, el <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método emite un vale de autenticación y lo coloca en el <xref:System.Web.HttpRequest.QueryString%2A> propiedad.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se redirige a los usuarios validados a la dirección URL solicitada originalmente o <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A>. El ejemplo de código utiliza la pertenencia ASP.NET para validar a los usuarios. Para obtener más información acerca de la pertenencia ASP.NET, vea [administrar usuarios mediante pertenencia](http://msdn.microsoft.com/library/824c3a24-f0af-427c-a652-0d2d1e9397cd).  
  
> [!IMPORTANT]
>  Este ejemplo contiene un cuadro de texto que acepta datos proporcionados por el usuario, que puede suponer una amenaza de seguridad. De forma predeterminada, ASP.NET Web Pages valida que los datos proporcionados por el usuario no incluyen elementos HTML ni de script. Para más información, consulte [Información general sobre los ataques mediante scripts](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/CS/logincs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlMembershipProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlMembershipProvider/VB/loginvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The return URL specified in the query string contains a protocol other than HTTP: or HTTPS:.</exception>
      </Docs>
    </Member>
    <Member MemberName="RedirectFromLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectFromLoginPage (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectFromLoginPage(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectFromLoginPage(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectFromLoginPage (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectFromLoginPage(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member RedirectFromLoginPage : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectFromLoginPage (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">The authenticated user name.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <param name="strCookiePath">The cookie path for the forms-authentication ticket.</param>
        <summary>Redirects an authenticated user back to the originally requested URL or the default URL using the specified cookie path for the forms-authentication cookie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método redirige a la dirección URL de retorno especificada en la cadena de consulta con el `ReturnURL` nombre de variable. Por ejemplo, en la dirección URL `http://www.contoso.com/login.aspx?ReturnUrl=caller.aspx`, <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método redirige a la dirección URL de retorno `caller.aspx`. Si el `ReturnURL` variable no existe, el <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método redirige a la dirección URL en el <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad.  
  
 Cuando el explorador se redirige a la página de inicio de sesión, ASP.NET agrega automáticamente la URL de retorno.  
  
 De forma predeterminada, la `ReturnUrl` variable debe hacer referencia a una página en la aplicación actual. Si `ReturnUrl` hace referencia a una página en una aplicación diferente o en un servidor diferente, la <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método redirige a la dirección URL en el <xref:System.Web.Security.FormsAuthentication.DefaultUrl%2A> propiedad. Si desea permitir que redirige a una página fuera de la aplicación actual, debe establecer el <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad `true` mediante el `enableCrossAppRedirects` atributo del elemento de configuración.  
  
> [!IMPORTANT]
>  Establecer el <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad `true` para permitir que las redirecciones de varias aplicaciones puede suponer una amenaza de seguridad. Para obtener más información, vea la propiedad <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A>.  
  
 Si el <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> propiedad es `true`y el `ReturnUrl` variable está dentro de la aplicación actual o la <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> propiedad es `true`, la <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método emite un vale de autenticación y lo coloca en el cookie especificado por el `strCookiePath` parámetro con el <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> método.  
  
 Si <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> es `false` y es la ruta de acceso de redirección a una dirección URL de la aplicación actual, el vale se emitió como parte de la dirección URL de redireccionamiento. Si <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> es `false`, <xref:System.Web.Security.FormsAuthentication.EnableCrossAppRedirects%2A> es `true`y la redirección de dirección URL no hace referencia a una página en la aplicación actual, el <xref:System.Web.Security.FormsAuthentication.RedirectFromLoginPage%2A> método emite un vale de autenticación y lo coloca en el <xref:System.Web.HttpRequest.QueryString%2A> propiedad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">The return URL specified in the query string contains a protocol other than HTTP: or HTTPS:.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RedirectToLoginPage">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Redirects the browser to the login URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método redirige el explorador a la <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>.  
  
 El <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método no borra la cookie de autenticación de formularios. Puede usar el <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método junto con el <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método para cerrar la sesión un usuario y permitir que un usuario diferente iniciar sesión.  
  
 A diferencia de la <xref:System.Web.HttpResponse.Redirect%2A?displayProperty=nameWithType> , este método no finaliza la solicitud mediante una llamada a <xref:System.Web.HttpResponse.End%2A?displayProperty=nameWithType>. Esto significa que el código que sigue a la <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> se ejecutará la llamada al método.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se borra la cookie de autenticación de formularios utilizando la <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método y redirige al usuario al inicio de sesión página con el <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método.  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage();" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Redirects the browser to the login URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método redirige el explorador a la <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A>.  
  
 El <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método no borra la cookie de autenticación de formularios. Puede usar el <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método junto con el <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método para cerrar la sesión un usuario y permitir que un usuario diferente iniciar sesión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se borra la cookie de autenticación de formularios utilizando la <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método y redirige al usuario al inicio de sesión página con el <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método.  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToLoginPage">
      <MemberSignature Language="C#" Value="public static void RedirectToLoginPage (string extraQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RedirectToLoginPage(string extraQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RedirectToLoginPage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RedirectToLoginPage (extraQueryString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RedirectToLoginPage(System::String ^ extraQueryString);" />
      <MemberSignature Language="F#" Value="static member RedirectToLoginPage : string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.RedirectToLoginPage extraQueryString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extraQueryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extraQueryString">The query string to include with the redirect URL.</param>
        <summary>Redirects the browser to the login URL with the specified query string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método redirige el explorador a la <xref:System.Web.Security.FormsAuthentication.LoginUrl%2A> e incluye el `extraQueryString` valor como el <xref:System.Management.ManagementQuery.QueryString%2A> para la dirección URL redirigida.  
  
 El <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método no borra la cookie de autenticación de formularios. Puede usar el <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método junto con el <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método para cerrar la sesión un usuario y permitir que un usuario diferente iniciar sesión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se borra la cookie de autenticación de formularios utilizando la <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método y redirige al usuario al inicio de sesión página con el <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método.  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signout2cs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signout2vb.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenewTicketIfOld">
      <MemberSignature Language="C#" Value="public static System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld (System.Web.Security.FormsAuthenticationTicket tOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Security.FormsAuthenticationTicket RenewTicketIfOld(class System.Web.Security.FormsAuthenticationTicket tOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.RenewTicketIfOld(System.Web.Security.FormsAuthenticationTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RenewTicketIfOld (tOld As FormsAuthenticationTicket) As FormsAuthenticationTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Security::FormsAuthenticationTicket ^ RenewTicketIfOld(System::Web::Security::FormsAuthenticationTicket ^ tOld);" />
      <MemberSignature Language="F#" Value="static member RenewTicketIfOld : System.Web.Security.FormsAuthenticationTicket -&gt; System.Web.Security.FormsAuthenticationTicket" Usage="System.Web.Security.FormsAuthentication.RenewTicketIfOld tOld" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.FormsAuthenticationTicket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tOld" Type="System.Web.Security.FormsAuthenticationTicket" />
      </Parameters>
      <Docs>
        <param name="tOld">The forms-authentication ticket to update.</param>
        <summary>Conditionally updates the issue date and time and expiration date and time for a <see cref="T:System.Web.Security.FormsAuthenticationTicket" />.</summary>
        <returns>The updated <see cref="T:System.Web.Security.FormsAuthenticationTicket" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.RenewTicketIfOld%2A> método actualiza la fecha de expiración y la hora de proporcionado <xref:System.Web.Security.FormsAuthenticationTicket> si la fecha y hora actuales menos la <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> valor es mayor que el <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> valor menos la fecha y hora actuales.  
  
 El vale se actualiza con la <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> propiedad establecida en la fecha y hora actuales y el <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> propiedad establecida en la fecha actual y la hora más original <xref:System.Web.Security.FormsAuthenticationTicket.Expiration%2A> valor menos original <xref:System.Web.Security.FormsAuthenticationTicket.IssueDate%2A> valor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireSSL">
      <MemberSignature Language="C#" Value="public static bool RequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RequireSSL As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RequireSSL { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RequireSSL : bool" Usage="System.Web.Security.FormsAuthentication.RequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the forms-authentication cookie requires SSL in order to be returned to the server.</summary>
        <value>
          <see langword="true" /> Si SSL es necesario para devolver la cookie de autenticación de formularios al servidor; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> valor de la propiedad se establece en el archivo de configuración para una aplicación de ASP.NET mediante el `requireSSL` atributo del elemento de configuración. Puede especificar en el archivo Web.config para la aplicación ASP.NET si se requiere SSL (capa de Sockets seguros) para devolver la cookie de autenticación de formularios en el servidor estableciendo el `requireSSL` atributo. Para obtener más información, consulta <xref:System.Web.HttpCookie.Secure%2A>.  
  
 Se recomienda que si configura `requireSSL` como `false`, también configurar `slidingExpiration` como `false`, para reducir la cantidad de tiempo para el que un vale es válido.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `requireSSL` atributo en el archivo Web.config.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    cookieless="UseCookies"  
    requireSSL="true"  
    path="/MyApplication" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetAuthCookie">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Creates an authentication ticket for the supplied user name and adds it to the cookies collection of the response, or to the URL if you are using cookieless authentication.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> método agrega un vale de autenticación de formularios a la colección de cookies o la dirección URL si <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> es `false`. El vale de autenticación de formularios proporciona información de autenticación de formularios a la siguiente solicitud realizada por el explorador. Con autenticación de formularios, puede usar el <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> método si desea autenticar a un usuario pero retener el control de la navegación con redireccionamientos.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The name of an authenticated user. This does not have to map to a Windows account.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a persistent cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <summary>Creates an authentication ticket for the supplied user name and adds it to the cookies collection of the response, or to the URL if you are using cookieless authentication.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> método agrega un vale de autenticación de formularios a la colección de cookies o a la dirección URL si <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> es `false`. El vale de autenticación de formularios proporciona información de autenticación de formularios a la siguiente solicitud realizada por el explorador. Con autenticación de formularios, puede usar el <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> método si desea autenticar a un usuario pero retener el control de la navegación con redireccionamientos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> is <see langword="true" /> and <see cref="P:System.Web.HttpRequest.IsSecureConnection" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuthCookie">
      <MemberSignature Language="C#" Value="public static void SetAuthCookie (string userName, bool createPersistentCookie, string strCookiePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetAuthCookie(string userName, bool createPersistentCookie, string strCookiePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SetAuthCookie(System.String,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetAuthCookie (userName As String, createPersistentCookie As Boolean, strCookiePath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAuthCookie(System::String ^ userName, bool createPersistentCookie, System::String ^ strCookiePath);" />
      <MemberSignature Language="F#" Value="static member SetAuthCookie : string * bool * string -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SetAuthCookie (userName, createPersistentCookie, strCookiePath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="createPersistentCookie" Type="System.Boolean" />
        <Parameter Name="strCookiePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">The name of an authenticated user.</param>
        <param name="createPersistentCookie">
          <see langword="true" /> to create a durable cookie (one that is saved across browser sessions); otherwise, <see langword="false" />.</param>
        <param name="strCookiePath">The cookie path for the forms-authentication ticket.</param>
        <summary>Creates an authentication ticket for the supplied user name and adds it to the cookies collection of the response, using the supplied cookie path, or using the URL if you are using cookieless authentication.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> método agrega un vale de autenticación de formularios a la colección de cookies o la dirección URL si <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> es `false`. El vale de autenticación de formularios proporciona información de autenticación de formularios a la siguiente solicitud realizada por el explorador. Con autenticación de formularios, puede usar el <xref:System.Web.Security.FormsAuthentication.SetAuthCookie%2A> método si desea autenticar a un usuario pero retener el control de la navegación con redireccionamientos.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="P:System.Web.Security.FormsAuthentication.RequireSSL" /> is <see langword="true" /> and <see cref="P:System.Web.HttpRequest.IsSecureConnection" /> is <see langword="false" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public static void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.FormsAuthentication.SignOut" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SignOut ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SignOut();" />
      <MemberSignature Language="F#" Value="static member SignOut : unit -&gt; unit" Usage="System.Web.Security.FormsAuthentication.SignOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the forms-authentication ticket from the browser.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método quita la información del vale de autenticación de formularios de la cookie o la dirección URL si <xref:System.Web.Security.FormsAuthentication.CookiesSupported%2A> es `false`. Puede usar el <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método junto con el <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método para cerrar la sesión un usuario y permitir que un usuario diferente iniciar sesión.  
  
 Si se ejecuta exclusivamente en modo sin cookies o si admite los usuarios autenticados y anónimos, explícitamente debe controlar la redirección a la página de inicio de sesión si necesita lógica de negocios especial para ejecutar como resultado de quitar el identificador anónimo.  
  
 Cuando el <xref:System.Web.Security.FormsAuthentication.SignOut%2A> se llama al método, se realiza un redireccionamiento a la página de inicio de sesión de la aplicación mediante una llamada a la <xref:System.Web.HttpResponse.Redirect%2A> método con el `endResponse` parámetro establecido en `false`. La redirección no realizará hasta que la página actual ha terminado de ejecutarse, por lo que se puede ejecutar código adicional. Si el código no contiene un redireccionamiento explícito a otra página, se redirige al usuario a la página de inicio de sesión definido en el archivo de configuración de la aplicación.  
  
 Llamar a la <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método solo quita la cookie de autenticación de formularios. El servidor Web no almacena los vales de autenticación válidos y expirados de comparación posterior. Esto hace que el sitio sea vulnerable a un ataque de reproducción si un usuario malintencionado obtiene una cookie de autenticación de formularios válida. Para mejorar la seguridad cuando se utiliza una cookie de autenticación de formularios, debe hacer lo siguiente:  
  
-   Utilice la expiración absoluto para las cookies de autenticación de formularios estableciendo la <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> propiedad `false`. Esto limita la ventana en la que se pueden reproducir una cookie atacada.  
  
-   Solo emita y acepte cookies de autenticación sobre Secure Sockets Layer (SSL), estableciendo la <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> propiedad `true` y ejecutando todo el sitio Web con SSL. Establecer el <xref:System.Web.Security.FormsAuthentication.RequireSSL%2A> propiedad `true` garantiza que ASP.NET nunca enviará una cookie de autenticación al explorador a través de una conexión sin SSL; sin embargo, el cliente no puede cumplir con la configuración de seguridad de la cookie. Esto significa que el cliente puede enviar la cookie de autenticación de formularios a través de una conexión sin SSL, dejándola así vulnerable al secuestro. Se puede evitar que a un cliente envíe la cookie de autenticación de formularios en texto sin cifrar mediante la ejecución de todo el sitio Web con SSL.  
  
-   Utilice el almacenamiento persistente en el servidor para registrar cuándo un usuario inicia sesión en el sitio Web y, a continuación, usar un evento de aplicación como <xref:System.Web.HttpApplication.PostAuthenticateRequest> evento para determinar si el usuario actual se autenticó con autenticación de formularios. Si el usuario se autenticó con autenticación de formularios, y si la información en el almacenamiento persistente indica el usuario se cerró la sesión, inmediatamente borra la cookie de autenticación y redirigir el explorador a la página de inicio de sesión. Después de un inicio de sesión correcto, actualice el almacenamiento para reflejar que el usuario ha iniciado sesión. Cuando utiliza este método, la aplicación debe realizar un seguimiento del estado ha iniciado la sesión del usuario y deberá forzar que los usuarios inactivos a cerrar la sesión.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se borra la cookie de autenticación de formularios utilizando la <xref:System.Web.Security.FormsAuthentication.SignOut%2A> método y redirige al usuario al inicio de sesión página con el <xref:System.Web.Security.FormsAuthentication.RedirectToLoginPage%2A> método.  
  
 [!code-aspx-csharp[System.Web.Security.FormsAuthentication#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/CS/signoutcs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.FormsAuthentication#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.FormsAuthentication/VB/signoutvb.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool SlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool SlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SlidingExpiration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool SlidingExpiration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SlidingExpiration : bool" Usage="System.Web.Security.FormsAuthentication.SlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether sliding expiration is enabled.</summary>
        <value>
          <see langword="true" /> Si la expiración variable está habilitada; en caso contrario, <see langword="false" />. De manera predeterminada, es <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> valor de la propiedad se establece mediante el `slidingExpiration` atributo del elemento de configuración.  
  
 La expiración variable restablece la hora de expiración de una cookie de autenticación válida si se realiza una solicitud y ha transcurrido más de la mitad del intervalo de tiempo de espera. Si la cookie expira, el usuario debe volver a autenticarse. Establecer el <xref:System.Web.Security.FormsAuthentication.SlidingExpiration%2A> propiedad `false` puede mejorar la seguridad de una aplicación si limita el tiempo para que una cookie de autenticación es válida, en función de la configurada `timeout` valor.  
  
 Se recomienda que si configura `requireSSL` como `false`, también configurar `slidingExpiration` como `false`, para reducir la cantidad de tiempo para el que un vale es válido.  
  
   
  
## Examples  
 El siguiente ejemplo de código establece la `slidingExpiration` atribuir a `false` en el archivo Web.config para una aplicación ASP.NET.  
  
```  
<authentication mode="Forms">  
  <forms loginUrl="member_login.aspx"  
    name=".ASPXFORMSAUTH"  
    cookieless="UseCookies"  
    requireSSL="true"   
    slidingExpiration="false" />  
</authentication>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicketCompatibilityMode">
      <MemberSignature Language="C#" Value="public static System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Configuration.TicketCompatibilityMode TicketCompatibilityMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TicketCompatibilityMode As TicketCompatibilityMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Web::Configuration::TicketCompatibilityMode TicketCompatibilityMode { System::Web::Configuration::TicketCompatibilityMode get(); };" />
      <MemberSignature Language="F#" Value="member this.TicketCompatibilityMode : System.Web.Configuration.TicketCompatibilityMode" Usage="System.Web.Security.FormsAuthentication.TicketCompatibilityMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Configuration.TicketCompatibilityMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether to use Coordinated Universal Time (UTC) or local time for the ticket expiration date.</summary>
        <value>Un valor que indica si se usa la hora Universal coordinada (UTC) u hora local para la fecha de caducidad del vale.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public static TimeSpan Timeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.FormsAuthentication.Timeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Timeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan Timeout { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeout : TimeSpan" Usage="System.Web.Security.FormsAuthentication.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the amount of time before an authentication ticket expires.</summary>
        <value>La cantidad de tiempo antes de un vale de autenticación expira.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>