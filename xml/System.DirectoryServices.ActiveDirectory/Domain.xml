<Type Name="Domain" FullName="System.DirectoryServices.ActiveDirectory.Domain">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8c55b1592bae939ea2f0594be512198033bf8ed5" /><Meta Name="ms.sourcegitcommit" Value="112ca25eddde8ac8b788d67c406b7745ba914261" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="01/15/2019" /><Meta Name="ms.locfileid" Value="54313952" /></Metadata><TypeSignature Language="C#" Value="public class Domain : System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Domain extends System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.ActiveDirectory.Domain" />
  <TypeSignature Language="VB.NET" Value="Public Class Domain&#xA;Inherits ActiveDirectoryPartition" />
  <TypeSignature Language="C++ CLI" Value="public ref class Domain : System::DirectoryServices::ActiveDirectory::ActiveDirectoryPartition" />
  <TypeSignature Language="F#" Value="type Domain = class&#xA;    inherit ActiveDirectoryPartition" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.DirectoryServices.ActiveDirectory.ActiveDirectoryPartition</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>La clase <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> representa un dominio de Active Directory.</summary>
    <remarks>To be added.</remarks>
    <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Valor de demanda: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
    <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
  </Docs>
  <Members>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainCollection Children" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As DomainCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainCollection ^ Children { System::DirectoryServices::ActiveDirectory::DomainCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Children : System.DirectoryServices.ActiveDirectory.DomainCollection" Usage="System.DirectoryServices.ActiveDirectory.Domain.Children" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los dominios secundarios de este dominio.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainCollection" /> que contiene los dominios secundarios.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateLocalSideOfTrustRelationship">
      <MemberSignature Language="C#" Value="public void CreateLocalSideOfTrustRelationship (string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateLocalSideOfTrustRelationship(string targetDomainName, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection direction, string trustPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateLocalSideOfTrustRelationship (targetDomainName As String, direction As TrustDirection, trustPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateLocalSideOfTrustRelationship(System::String ^ targetDomainName, System::DirectoryServices::ActiveDirectory::TrustDirection direction, System::String ^ trustPassword);" />
      <MemberSignature Language="F#" Value="member this.CreateLocalSideOfTrustRelationship : string * System.DirectoryServices.ActiveDirectory.TrustDirection * string -&gt; unit" Usage="domain.CreateLocalSideOfTrustRelationship (targetDomainName, direction, trustPassword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="direction" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <Parameter Name="trustPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">Nombre DNS del dominio con el que se crea la confianza.</param>
        <param name="direction">Uno de los miembros de <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> que determina la dirección de la confianza con respecto a este dominio.</param>
        <param name="trustPassword">Contraseña para la confianza.</param>
        <summary>Crea el lado local de una relación de confianza con el dominio especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método crea un lado de una relación de confianza. La relación de confianza no se establece hasta que se han creado ambos lados de la relación de confianza.  
  
 El `trustPassword` parámetro asocia una contraseña con la confianza creada. Cuando se crea el otro lado de la relación de confianza, se proporciona la misma contraseña y, a continuación, se enlazan las dos confianzas locales entre sí.  
  
 Para crear mediante programación ambos lados de una relación de confianza en una única llamada al método, utilice el <xref:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException">Ya existe la relación de confianza.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente generó un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> o <paramref name="trustPassword" /> está vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> o <paramref name="trustPassword" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="direction" /> no es un valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="CreateTrustRelationship">
      <MemberSignature Language="C#" Value="public void CreateTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateTrustRelationship (targetDomain As Domain, direction As TrustDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain, System::DirectoryServices::ActiveDirectory::TrustDirection direction);" />
      <MemberSignature Language="F#" Value="member this.CreateTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain * System.DirectoryServices.ActiveDirectory.TrustDirection -&gt; unit" Usage="domain.CreateTrustRelationship (targetDomain, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
        <Parameter Name="direction" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio con el que se crea la confianza.</param>
        <param name="direction">Uno de los miembros de <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> que determina la dirección de la confianza con respecto a este dominio.</param>
        <summary>Crea lados locales de una relación de confianza con el dominio especificado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método crea ambos lados de una relación de confianza con una única llamada al método. El <xref:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship%2A?displayProperty=nameWithType> método se usa para crear un solo lado de una relación de confianza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectExistsException">Ya existe la relación de confianza.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente generó un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="direction" /> no es un valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteLocalSideOfTrustRelationship">
      <MemberSignature Language="C#" Value="public void DeleteLocalSideOfTrustRelationship (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteLocalSideOfTrustRelationship(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteLocalSideOfTrustRelationship (targetDomainName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteLocalSideOfTrustRelationship(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.DeleteLocalSideOfTrustRelationship : string -&gt; unit" Usage="domain.DeleteLocalSideOfTrustRelationship targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">Nombre DNS del dominio con el que existe confianza.</param>
        <summary>Elimina el lado local de una relación de confianza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se elimina un lado de una relación de confianza, la confianza deja de existir.  
  
 Para eliminar ambos lados de una relación de confianza con una llamada al método, use el <xref:System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> especificado por el parámetro <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.CreateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)" />
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteTrustRelationship">
      <MemberSignature Language="C#" Value="public void DeleteTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.DeleteTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteTrustRelationship (targetDomain As Domain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain);" />
      <MemberSignature Language="F#" Value="member this.DeleteTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain -&gt; unit" Usage="domain.DeleteTrustRelationship targetDomain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio con el que existe la confianza.</param>
        <summary>Elimina ambos lados de una relación de confianza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para eliminar un solo lado de una relación de confianza, use el <xref:System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship%2A?displayProperty=nameWithType> método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> especificado.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.DeleteLocalSideOfTrustRelationship(System.String)" />
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.CreateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="DomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection DomainControllers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection DomainControllers" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.DomainControllers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainControllers As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ DomainControllers { System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomainControllers : System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="System.DirectoryServices.ActiveDirectory.Domain.DomainControllers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene los controladores de dominio en este dominio.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contiene los controladores de dominio de este dominio.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <Member MemberName="DomainMode">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainMode DomainMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DirectoryServices.ActiveDirectory.DomainMode DomainMode" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.DomainMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainMode As DomainMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainMode DomainMode { System::DirectoryServices::ActiveDirectory::DomainMode get(); };" />
      <MemberSignature Language="F#" Value="member this.DomainMode : System.DirectoryServices.ActiveDirectory.DomainMode" Usage="System.DirectoryServices.ActiveDirectory.Domain.DomainMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el modo en que funciona este dominio.</summary>
        <value>Uno de los valores <see cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" /> que indica el modo en que funciona este dominio.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" />
      </Docs>
    </Member>
    <Member MemberName="DomainModeLevel">
      <MemberSignature Language="C#" Value="public int DomainModeLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DomainModeLevel" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainModeLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DomainModeLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DomainModeLevel : int" Usage="System.DirectoryServices.ActiveDirectory.Domain.DomainModeLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el nivel del modo en que funciona este dominio.</summary>
        <value>El nivel del modo de dominio.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindAllDiscoverableDomainControllers">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Busca todos los controladores de dominio detectables de este dominio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindAllDiscoverableDomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAllDiscoverableDomainControllers () As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ FindAllDiscoverableDomainControllers();" />
      <MemberSignature Language="F#" Value="member this.FindAllDiscoverableDomainControllers : unit -&gt; System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="domain.FindAllDiscoverableDomainControllers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Busca todos los controladores de dominio detectables de este dominio.</summary>
        <returns><see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contiene los objetos de controlador de dominio que se encontraron mediante este método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede encontrar los controladores de dominio detectables consultando los registros SRV de DNS. Este método devolverá solo aquellos controladores de dominio que registre el genérico, específico de sitio, el registro SRV de controlador de dominio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <Member MemberName="FindAllDiscoverableDomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers (string siteName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDiscoverableDomainControllers(string siteName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindAllDiscoverableDomainControllers(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAllDiscoverableDomainControllers (siteName As String) As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ FindAllDiscoverableDomainControllers(System::String ^ siteName);" />
      <MemberSignature Language="F#" Value="member this.FindAllDiscoverableDomainControllers : string -&gt; System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="domain.FindAllDiscoverableDomainControllers siteName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siteName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="siteName">Nombre del sitio en el que se buscarán los controladores de dominio.</param>
        <summary>Busca todos los controladores de dominio detectables de este dominio que también están en el sitio especificado.</summary>
        <returns><see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contiene los objetos de controlador de dominio que se encontraron mediante este método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede encontrar los controladores de dominio detectables consultando los registros SRV de DNS.  Si un controlador de dominio no registra un registro SRV para el sitio especificado, este método, no se devolverá incluso si el controlador de dominio se encuentra físicamente dentro de ese sitio.  
  
 Se devolverán todos los controladores de dominio que registran un registro SRV para el sitio especificado por este método, aunque no estén ubicados físicamente dentro de ese sitio.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="siteName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="siteName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindAllDomainControllers">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Busca todos los controladores de dominio de este dominio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindAllDomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAllDomainControllers () As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ FindAllDomainControllers();" />
      <MemberSignature Language="F#" Value="member this.FindAllDomainControllers : unit -&gt; System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="domain.FindAllDomainControllers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Busca todos los controladores de dominio de este dominio.</summary>
        <returns><see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contiene los objetos de controlador de dominio que se encontraron mediante este método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <Member MemberName="FindAllDomainControllers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers (string siteName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainControllerCollection FindAllDomainControllers(string siteName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindAllDomainControllers(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAllDomainControllers (siteName As String) As DomainControllerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainControllerCollection ^ FindAllDomainControllers(System::String ^ siteName);" />
      <MemberSignature Language="F#" Value="member this.FindAllDomainControllers : string -&gt; System.DirectoryServices.ActiveDirectory.DomainControllerCollection" Usage="domain.FindAllDomainControllers siteName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainControllerCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siteName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="siteName">Nombre del sitio en el que se buscarán los controladores de dominio.</param>
        <summary>Busca todos los controladores de dominio de este dominio que también están en el sitio especificado.</summary>
        <returns><see cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" /> que contiene los objetos de controlador de dominio que se encontraron mediante este método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="siteName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="siteName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainControllerCollection" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindDomainController">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Busca cualquier controlador de dominio en este dominio.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindDomainController">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainController FindDomainController() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindDomainController" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDomainController () As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainController ^ FindDomainController();" />
      <MemberSignature Language="F#" Value="member this.FindDomainController : unit -&gt; System.DirectoryServices.ActiveDirectory.DomainController" Usage="domain.FindDomainController " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Busca cualquier controlador de dominio en este dominio.</summary>
        <returns><see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa el controlador de dominio encontrado por este método.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método busca cualquier controlador de dominio en el dominio. No hay ninguna garantía de que se encuentra el mismo controlador de dominio por otra llamada a este método.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No se encuentra un controlador de dominio.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="FindDomainController">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (System.DirectoryServices.ActiveDirectory.LocatorOptions flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(valuetype System.DirectoryServices.ActiveDirectory.LocatorOptions flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.DirectoryServices.ActiveDirectory.LocatorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDomainController (flag As LocatorOptions) As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainController ^ FindDomainController(System::DirectoryServices::ActiveDirectory::LocatorOptions flag);" />
      <MemberSignature Language="F#" Value="member this.FindDomainController : System.DirectoryServices.ActiveDirectory.LocatorOptions -&gt; System.DirectoryServices.ActiveDirectory.DomainController" Usage="domain.FindDomainController flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.DirectoryServices.ActiveDirectory.LocatorOptions" />
      </Parameters>
      <Docs>
        <param name="flag">Combinación de uno o varios de los miembros <see cref="T:System.DirectoryServices.ActiveDirectory.LocatorOptions" /> que define el tipo de controlador de dominio que se va a buscar.</param>
        <summary>Busca un controlador de dominio en este dominio que cumpla los criterios especificados.</summary>
        <returns><see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa el controlador de dominio encontrado por este método.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No se encuentra un controlador de dominio.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.ArgumentException">El parámetro <paramref name="flag" /> contiene un valor no válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.LocatorOptions" />
      </Docs>
    </Member>
    <Member MemberName="FindDomainController">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (string siteName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(string siteName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDomainController (siteName As String) As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainController ^ FindDomainController(System::String ^ siteName);" />
      <MemberSignature Language="F#" Value="member this.FindDomainController : string -&gt; System.DirectoryServices.ActiveDirectory.DomainController" Usage="domain.FindDomainController siteName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siteName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="siteName">Nombre del sitio en el que se buscará el controlador de dominio.</param>
        <summary>Busca un controlador de dominio en este dominio y en el sitio especificado.</summary>
        <returns>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa el controlador de dominio que este método encuentra.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No se encuentra un controlador de dominio.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="siteName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="siteName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="FindDomainController">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController FindDomainController (string siteName, System.DirectoryServices.ActiveDirectory.LocatorOptions flag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.DomainController FindDomainController(string siteName, valuetype System.DirectoryServices.ActiveDirectory.LocatorOptions flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.FindDomainController(System.String,System.DirectoryServices.ActiveDirectory.LocatorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindDomainController (siteName As String, flag As LocatorOptions) As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::DomainController ^ FindDomainController(System::String ^ siteName, System::DirectoryServices::ActiveDirectory::LocatorOptions flag);" />
      <MemberSignature Language="F#" Value="member this.FindDomainController : string * System.DirectoryServices.ActiveDirectory.LocatorOptions -&gt; System.DirectoryServices.ActiveDirectory.DomainController" Usage="domain.FindDomainController (siteName, flag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="siteName" Type="System.String" />
        <Parameter Name="flag" Type="System.DirectoryServices.ActiveDirectory.LocatorOptions" />
      </Parameters>
      <Docs>
        <param name="siteName">Nombre del sitio en el que se buscará el controlador de dominio.</param>
        <param name="flag">Combinación de uno o varios de los miembros <see cref="T:System.DirectoryServices.ActiveDirectory.LocatorOptions" /> que define el tipo de controlador de dominio que se va a buscar.</param>
        <summary>Busca un controlador de dominio en este dominio y en el sitio especificado que cumpla los criterios especificados.</summary>
        <returns>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa el controlador de dominio que este método encuentra.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No se encuentra un controlador de dominio.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.ArgumentException">Esta excepción se producirá por cualquiera de los siguientes motivos.  
  
-   <paramref name="siteName" /> es una cadena vacía.  
  
-   <paramref name="flag" /> contiene un valor no válido.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="siteName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.LocatorOptions" />
      </Docs>
    </Member>
    <Member MemberName="Forest">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.Forest Forest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.Forest Forest" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.Forest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Forest As Forest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::Forest ^ Forest { System::DirectoryServices::ActiveDirectory::Forest ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Forest : System.DirectoryServices.ActiveDirectory.Forest" Usage="System.DirectoryServices.ActiveDirectory.Domain.Forest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Forest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el bosque del que es miembro de este dominio.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Forest" /> que representa el bosque del que es miembro de este dominio.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.Forest" />
      </Docs>
    </Member>
    <Member MemberName="GetAllTrustRelationships">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection GetAllTrustRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetAllTrustRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllTrustRelationships () As TrustRelationshipInformationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::TrustRelationshipInformationCollection ^ GetAllTrustRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetAllTrustRelationships : unit -&gt; System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection" Usage="domain.GetAllTrustRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera todas las relaciones de confianza para este dominio.</summary>
        <returns>Un objeto <see cref="T:System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection" /> que contiene todas las relaciones de confianza para este dominio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustRelationshipInformationCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetComputerDomain">
      <MemberSignature Language="C#" Value="public static System.DirectoryServices.ActiveDirectory.Domain GetComputerDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.DirectoryServices.ActiveDirectory.Domain GetComputerDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetComputerDomain () As Domain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::DirectoryServices::ActiveDirectory::Domain ^ GetComputerDomain();" />
      <MemberSignature Language="F#" Value="static member GetComputerDomain : unit -&gt; System.DirectoryServices.ActiveDirectory.Domain" Usage="System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Domain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio al que está unido el equipo local.</summary>
        <returns>Un objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio al que está unida la máquina local.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El valor devuelto de la <xref:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain%2A> método es un <xref:System.DirectoryServices.ActiveDirectory.Domain> objeto que representa el dominio al que está unido el equipo que ejecuta la aplicación.  Este valor devuelto es independiente de las credenciales de dominio en la que se ejecuta la aplicación. Este método recupera el dominio del equipo, independientemente de se ejecuta bajo las credenciales de dominio de cuenta de confianza.  Para recuperar el <xref:System.DirectoryServices.ActiveDirectory.Domain> objeto que representa el dominio correspondiente al usuario las credenciales en vigor para el contexto de seguridad en que se ejecuta la aplicación, use el <xref:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain%2A> método en su lugar.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No se pudo establecer una conexión con el dominio.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentDomain">
      <MemberSignature Language="C#" Value="public static System.DirectoryServices.ActiveDirectory.Domain GetCurrentDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.DirectoryServices.ActiveDirectory.Domain GetCurrentDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentDomain () As Domain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::DirectoryServices::ActiveDirectory::Domain ^ GetCurrentDomain();" />
      <MemberSignature Language="F#" Value="static member GetCurrentDomain : unit -&gt; System.DirectoryServices.ActiveDirectory.Domain" Usage="System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Domain</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtiene el <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> objeto para las credenciales de usuario actuales en vigor para el contexto de seguridad bajo el que se ejecuta la aplicación.</summary>
        <returns>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio para las credenciales de usuario especificadas en vigor para el contexto de seguridad bajo el que se ejecuta la aplicación.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DirectoryServices.ActiveDirectory.Domain.GetCurrentDomain%2A> método viene determinada por las credenciales de dominio en que se ejecuta la aplicación.  Para recuperar el <xref:System.DirectoryServices.ActiveDirectory.Domain> Unidos a un objeto que representa el dominio al que el equipo que ejecuta la aplicación, independientemente de las credenciales asociadas a esa aplicación, use el <xref:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain%2A> método en su lugar.  
  
## <a name="see-also"></a>Vea también  
 <xref:System.DirectoryServices.ActiveDirectory.Domain.GetComputerDomain%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No se pudo establecer una conexión con el contexto actual.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryEntry">
      <MemberSignature Language="C#" Value="public override System.DirectoryServices.DirectoryEntry GetDirectoryEntry ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.DirectoryServices.DirectoryEntry GetDirectoryEntry() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetDirectoryEntry" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDirectoryEntry () As DirectoryEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::DirectoryServices::DirectoryEntry ^ GetDirectoryEntry();" />
      <MemberSignature Language="F#" Value="override this.GetDirectoryEntry : unit -&gt; System.DirectoryServices.DirectoryEntry" Usage="domain.GetDirectoryEntry " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.DirectoryEntry</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Recupera un objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que representa el contexto de nomenclatura predeterminado del dominio.</summary>
        <returns>Objeto <see cref="T:System.DirectoryServices.DirectoryEntry" /> que representa el dominio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">Se ha eliminado el objeto actual.</exception>
        <permission cref="T:System.DirectoryServices.DirectoryServicesPermission">Valor de demanda: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /></permission>
        <altmember cref="T:System.DirectoryServices.DirectoryEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetDomain">
      <MemberSignature Language="C#" Value="public static System.DirectoryServices.ActiveDirectory.Domain GetDomain (System.DirectoryServices.ActiveDirectory.DirectoryContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.DirectoryServices.ActiveDirectory.Domain GetDomain(class System.DirectoryServices.ActiveDirectory.DirectoryContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetDomain(System.DirectoryServices.ActiveDirectory.DirectoryContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDomain (context As DirectoryContext) As Domain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::DirectoryServices::ActiveDirectory::Domain ^ GetDomain(System::DirectoryServices::ActiveDirectory::DirectoryContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetDomain : System.DirectoryServices.ActiveDirectory.DirectoryContext -&gt; System.DirectoryServices.ActiveDirectory.Domain" Usage="System.DirectoryServices.ActiveDirectory.Domain.GetDomain context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Domain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.DirectoryServices.ActiveDirectory.DirectoryContext" />
      </Parameters>
      <Docs>
        <param name="context">Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" /> que contiene el destino y las credenciales que se usarán para recuperar el objeto. El tipo del contexto debe ser un servidor de dominio o directorio.</param>
        <summary>Obtiene el objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> para el contexto especificado.</summary>
        <returns>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio para el contexto especificado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No se pudo realizar una conexión con el destino que se especifica en <paramref name="context" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="context" /> no es válido.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="context" /> es <see langword="null" />.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DirectoryContext" />
      </Docs>
    </Member>
    <Member MemberName="GetSelectiveAuthenticationStatus">
      <MemberSignature Language="C#" Value="public bool GetSelectiveAuthenticationStatus (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelectiveAuthenticationStatus(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelectiveAuthenticationStatus (targetDomainName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSelectiveAuthenticationStatus(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.GetSelectiveAuthenticationStatus : string -&gt; bool" Usage="domain.GetSelectiveAuthenticationStatus targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">Nombre DNS del dominio con el que existe la confianza.</param>
        <summary>Determina el tipo de autenticación de una confianza entrante.</summary>
        <returns><see langword="true" /> si la autenticación de la confianza es selectiva; <see langword="false" /> si la autenticación es de todo el dominio.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el <see cref="T:System.DirectoryServices.ActiveDirectory.Forest" /> especificado por el parámetro <paramref name="targetForestName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">No se pudo llamar a <c>LsaQueryTrustedDomainInfoByName</c>. Para obtener más información, vea <see href="/windows/desktop/api/ntsecapi/nf-ntsecapi-lsaquerytrusteddomaininfobyname">LsaQueryTrustedDomainInfoByName</see>.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Se ha eliminado el objeto actual.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(System.String,System.Boolean)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="GetSidFilteringStatus">
      <MemberSignature Language="C#" Value="public bool GetSidFilteringStatus (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSidFilteringStatus(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSidFilteringStatus (targetDomainName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSidFilteringStatus(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.GetSidFilteringStatus : string -&gt; bool" Usage="domain.GetSidFilteringStatus targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">El nombre DNS del dominio con el que existe la relación de confianza.</param>
        <summary>Determina el estado de filtrado del SID de una relación de confianza.</summary>
        <returns><see langword="true" /> si se habilita el filtrado de SID; de lo contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el <see cref="T:System.DirectoryServices.ActiveDirectory.Forest" /> especificado por el parámetro <paramref name="targetForestName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Se ha eliminado el objeto actual.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(System.String,System.Boolean)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="GetTrustRelationship">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation GetTrustRelationship (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation GetTrustRelationship(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.GetTrustRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTrustRelationship (targetDomainName As String) As TrustRelationshipInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::DirectoryServices::ActiveDirectory::TrustRelationshipInformation ^ GetTrustRelationship(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.GetTrustRelationship : string -&gt; System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation" Usage="domain.GetTrustRelationship targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">El nombre DNS del dominio con el que existe la relación de confianza.</param>
        <summary>Obtiene la relación de confianza entre este dominio y el dominio especificado.</summary>
        <returns>Un objeto <see cref="T:System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation" /> que representa la relación de confianza entre este dominio y el dominio especificado.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el <see cref="T:System.DirectoryServices.ActiveDirectory.Forest" /> especificado por el parámetro <paramref name="targetForestName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Se ha eliminado el objeto actual.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustRelationshipInformation" />
      </Docs>
    </Member>
    <Member MemberName="InfrastructureRoleOwner">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController InfrastructureRoleOwner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainController InfrastructureRoleOwner" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InfrastructureRoleOwner As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainController ^ InfrastructureRoleOwner { System::DirectoryServices::ActiveDirectory::DomainController ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InfrastructureRoleOwner : System.DirectoryServices.ActiveDirectory.DomainController" Usage="System.DirectoryServices.ActiveDirectory.Domain.InfrastructureRoleOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el propietario de la función de infraestructura de este dominio.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa el controlador de dominio que contiene el rol de propietario de infraestructura.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.Domain Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.Domain Parent" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Domain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::Domain ^ Parent { System::DirectoryServices::ActiveDirectory::Domain ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.DirectoryServices.ActiveDirectory.Domain" Usage="System.DirectoryServices.ActiveDirectory.Domain.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.Domain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el dominio primario de este dominio.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio primario de este dominio. <see langword="null" /> si este dominio no tiene ningún dominio primario.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
      </Docs>
    </Member>
    <Member MemberName="PdcRoleOwner">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController PdcRoleOwner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainController PdcRoleOwner" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PdcRoleOwner As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainController ^ PdcRoleOwner { System::DirectoryServices::ActiveDirectory::DomainController ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PdcRoleOwner : System.DirectoryServices.ActiveDirectory.DomainController" Usage="System.DirectoryServices.ActiveDirectory.Domain.PdcRoleOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que contiene el controlador de dominio principal (PDC) para este dominio.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa el controlador de dominio que contiene el rol de emulador PDC para este dominio.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDomainFunctionality">
      <MemberSignature Language="C#" Value="public void RaiseDomainFunctionality (System.DirectoryServices.ActiveDirectory.DomainMode domainMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseDomainFunctionality(valuetype System.DirectoryServices.ActiveDirectory.DomainMode domainMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionality(System.DirectoryServices.ActiveDirectory.DomainMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseDomainFunctionality(System::DirectoryServices::ActiveDirectory::DomainMode domainMode);" />
      <MemberSignature Language="F#" Value="member this.RaiseDomainFunctionality : System.DirectoryServices.ActiveDirectory.DomainMode -&gt; unit" Usage="domain.RaiseDomainFunctionality domainMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainMode" Type="System.DirectoryServices.ActiveDirectory.DomainMode" />
      </Parameters>
      <Docs>
        <param name="domainMode">Valor de enumeración <see cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" /> que especifica el nuevo nivel de operación para el dominio.</param>
        <summary>Genera el modo de operación del dominio.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El <xref:System.DirectoryServices.ActiveDirectory.DomainMode> valor se puede elevar, pero no Bajar. Esto significa que no es reversible elevar el nivel de funcionalidad del dominio y se debe realizar con cuidado la decisión de hacer esto.  
  
 Para obtener más información sobre los modos operativos de dominio, consulte [funcionalidad de dominios y bosques](https://www.microsoft.com/resources/documentation/WindowsServ/2003/standard/proddocs/en-us/sag_levels.asp).  
  
 La siguiente tabla define los valores válidos para `domainMode` según el modo de funcionamiento actual del dominio.  
  
|Modo actual|Modo puede elevarse a|  
|------------------|---------------------------|  
|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2000MixedDomain>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2000NativeDomain><br /><br /> <xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003InterimDomain><br /><br /> <xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003Domain>|  
|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2000NativeDomain>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003Domain>|  
|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003InterimDomain>|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003Domain>|  
|<xref:System.DirectoryServices.ActiveDirectory.DomainMode.Windows2003Domain>|None|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException">Según el modo de operación actual del dominio, el valor especificado para <paramref name="domainMode" /> no es válido.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="domainMode" /> no es un valor de enumeración <see cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainMode" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDomainFunctionalityLevel">
      <MemberSignature Language="C#" Value="public void RaiseDomainFunctionalityLevel (int domainMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RaiseDomainFunctionalityLevel(int32 domainMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.RaiseDomainFunctionalityLevel(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RaiseDomainFunctionalityLevel (domainMode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RaiseDomainFunctionalityLevel(int domainMode);" />
      <MemberSignature Language="F#" Value="member this.RaiseDomainFunctionalityLevel : int -&gt; unit" Usage="domain.RaiseDomainFunctionalityLevel domainMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainMode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="domainMode">Valor que representa el nuevo nivel.</param>
        <summary>Eleva el nivel de funcionalidad para el dominio.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepairTrustRelationship">
      <MemberSignature Language="C#" Value="public void RepairTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RepairTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.RepairTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RepairTrustRelationship (targetDomain As Domain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RepairTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain);" />
      <MemberSignature Language="F#" Value="member this.RepairTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain -&gt; unit" Usage="domain.RepairTrustRelationship targetDomain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio con el que existe la confianza.</param>
        <summary>Repara una relación de confianza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método repara la confianza restableciendo el canal seguro para la relación de confianza. Si se produce un error en la operación restablecer el canal seguro, a continuación, también restablecerá la contraseña de confianza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> especificado por <paramref name="targetDomain" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de origen o destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.Domain" />
      </Docs>
    </Member>
    <Member MemberName="RidRoleOwner">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.ActiveDirectory.DomainController RidRoleOwner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.ActiveDirectory.DomainController RidRoleOwner" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RidRoleOwner As DomainController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::DirectoryServices::ActiveDirectory::DomainController ^ RidRoleOwner { System::DirectoryServices::ActiveDirectory::DomainController ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RidRoleOwner : System.DirectoryServices.ActiveDirectory.DomainController" Usage="System.DirectoryServices.ActiveDirectory.Domain.RidRoleOwner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.ActiveDirectory.DomainController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtiene el titular del rol maestro de RID para este dominio.</summary>
        <value>Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.DomainController" /> que representa el controlador de dominio que contiene el rol maestro de identificador relativo (RID) para este dominio.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.DomainController" />
      </Docs>
    </Member>
    <Member MemberName="SetSelectiveAuthenticationStatus">
      <MemberSignature Language="C#" Value="public void SetSelectiveAuthenticationStatus (string targetDomainName, bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelectiveAuthenticationStatus(string targetDomainName, bool enable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.SetSelectiveAuthenticationStatus(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelectiveAuthenticationStatus (targetDomainName As String, enable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelectiveAuthenticationStatus(System::String ^ targetDomainName, bool enable);" />
      <MemberSignature Language="F#" Value="member this.SetSelectiveAuthenticationStatus : string * bool -&gt; unit" Usage="domain.SetSelectiveAuthenticationStatus (targetDomainName, enable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">El nombre DNS del dominio con el que existe la confianza entrante.</param>
        <param name="enable"><see langword="true" /> si está habilitada la autenticación selectiva; si no, <see langword="false" />.</param>
        <summary>Habilita o deshabilita la autenticación selectiva para una confianza entrante.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el controlador de dominio que especifica <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Se ha eliminado el objeto actual.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.GetSelectiveAuthenticationStatus(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="SetSidFilteringStatus">
      <MemberSignature Language="C#" Value="public void SetSidFilteringStatus (string targetDomainName, bool enable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSidFilteringStatus(string targetDomainName, bool enable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.SetSidFilteringStatus(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSidFilteringStatus (targetDomainName As String, enable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSidFilteringStatus(System::String ^ targetDomainName, bool enable);" />
      <MemberSignature Language="F#" Value="member this.SetSidFilteringStatus : string * bool -&gt; unit" Usage="domain.SetSidFilteringStatus (targetDomainName, enable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="enable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">El nombre DNS del dominio con el que existe la confianza.</param>
        <param name="enable"><see langword="true" /> si se debe habilitar el filtrado de SID; de lo contrario, <see langword="false" />.</param>
        <summary>Establece el estado del filtrado de SID para el dominio especificado.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el dominio especificado por <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Se ha eliminado el objeto actual.</exception>
        <altmember cref="M:System.DirectoryServices.ActiveDirectory.Domain.GetSidFilteringStatus(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateLocalSideOfTrustRelationship">
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Actualiza el lado local de una relación de confianza.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateLocalSideOfTrustRelationship">
      <MemberSignature Language="C#" Value="public void UpdateLocalSideOfTrustRelationship (string targetDomainName, string newTrustPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLocalSideOfTrustRelationship(string targetDomainName, string newTrustPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLocalSideOfTrustRelationship (targetDomainName As String, newTrustPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLocalSideOfTrustRelationship(System::String ^ targetDomainName, System::String ^ newTrustPassword);" />
      <MemberSignature Language="F#" Value="member this.UpdateLocalSideOfTrustRelationship : string * string -&gt; unit" Usage="domain.UpdateLocalSideOfTrustRelationship (targetDomainName, newTrustPassword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="newTrustPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">Nombre DNS del dominio con el que existe una confianza.</param>
        <param name="newTrustPassword">Nueva contraseña para la confianza.</param>
        <summary>Actualiza la contraseña para el lado local de una relación de confianza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para volver a establecer la relación de confianza, deben actualizarse ambos lados de la relación de confianza con la misma contraseña.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el dominio especificado por <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> o <paramref name="newTrustPassword" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> o <paramref name="newTrustPassword" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateLocalSideOfTrustRelationship">
      <MemberSignature Language="C#" Value="public void UpdateLocalSideOfTrustRelationship (string targetDomainName, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateLocalSideOfTrustRelationship(string targetDomainName, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection, string newTrustPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.UpdateLocalSideOfTrustRelationship(System.String,System.DirectoryServices.ActiveDirectory.TrustDirection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateLocalSideOfTrustRelationship (targetDomainName As String, newTrustDirection As TrustDirection, newTrustPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateLocalSideOfTrustRelationship(System::String ^ targetDomainName, System::DirectoryServices::ActiveDirectory::TrustDirection newTrustDirection, System::String ^ newTrustPassword);" />
      <MemberSignature Language="F#" Value="member this.UpdateLocalSideOfTrustRelationship : string * System.DirectoryServices.ActiveDirectory.TrustDirection * string -&gt; unit" Usage="domain.UpdateLocalSideOfTrustRelationship (targetDomainName, newTrustDirection, newTrustPassword)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
        <Parameter Name="newTrustDirection" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <Parameter Name="newTrustPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">Nombre DNS del dominio con el que existe una confianza.</param>
        <param name="newTrustDirection">Valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> para la nueva dirección de confianza de la relación de confianza.</param>
        <param name="newTrustPassword">Nueva contraseña para la confianza.</param>
        <summary>Actualiza la contraseña y la dirección de confianza para el lado local de una relación de confianza.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el dominio especificado por el parámetro <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> o <paramref name="newTrustPassword" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> o <paramref name="newTrustPassword" /> son <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="newTrustDirection" /> no es un valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="UpdateTrustRelationship">
      <MemberSignature Language="C#" Value="public void UpdateTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection newTrustDirection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.UpdateTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateTrustRelationship (targetDomain As Domain, newTrustDirection As TrustDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain, System::DirectoryServices::ActiveDirectory::TrustDirection newTrustDirection);" />
      <MemberSignature Language="F#" Value="member this.UpdateTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain * System.DirectoryServices.ActiveDirectory.TrustDirection -&gt; unit" Usage="domain.UpdateTrustRelationship (targetDomain, newTrustDirection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
        <Parameter Name="newTrustDirection" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio con el que existe la confianza.</param>
        <param name="newTrustDirection">Valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> que especifica la nueva dirección de confianza para la relación de confianza.</param>
        <summary>Actualiza la dirección de confianza para una relación de confianza existente. Las direcciones de confianza se actualizan en ambos lados de la confianza.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el dominio especificado por el parámetro <paramref name="targetDomain" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="newTrustDirection" /> no es un valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="VerifyOutboundTrustRelationship">
      <MemberSignature Language="C#" Value="public void VerifyOutboundTrustRelationship (string targetDomainName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyOutboundTrustRelationship(string targetDomainName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.VerifyOutboundTrustRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyOutboundTrustRelationship (targetDomainName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyOutboundTrustRelationship(System::String ^ targetDomainName);" />
      <MemberSignature Language="F#" Value="member this.VerifyOutboundTrustRelationship : string -&gt; unit" Usage="domain.VerifyOutboundTrustRelationship targetDomainName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomainName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetDomainName">El nombre DNS del dominio con el que existe la confianza.</param>
        <summary>Comprueba si una confianza saliente establecida previamente con el dominio especificado es válida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método se utiliza para comprobar que se ha establecido una relación de confianza totalmente. La relación de confianza no se establece hasta que se han creado ambos lados de la relación de confianza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza saliente con el dominio especificado por <paramref name="targetDomainName" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetDomainName" /> es una cadena vacía.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomainName" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
    <Member MemberName="VerifyTrustRelationship">
      <MemberSignature Language="C#" Value="public void VerifyTrustRelationship (System.DirectoryServices.ActiveDirectory.Domain targetDomain, System.DirectoryServices.ActiveDirectory.TrustDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyTrustRelationship(class System.DirectoryServices.ActiveDirectory.Domain targetDomain, valuetype System.DirectoryServices.ActiveDirectory.TrustDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.ActiveDirectory.Domain.VerifyTrustRelationship(System.DirectoryServices.ActiveDirectory.Domain,System.DirectoryServices.ActiveDirectory.TrustDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyTrustRelationship (targetDomain As Domain, direction As TrustDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyTrustRelationship(System::DirectoryServices::ActiveDirectory::Domain ^ targetDomain, System::DirectoryServices::ActiveDirectory::TrustDirection direction);" />
      <MemberSignature Language="F#" Value="member this.VerifyTrustRelationship : System.DirectoryServices.ActiveDirectory.Domain * System.DirectoryServices.ActiveDirectory.TrustDirection -&gt; unit" Usage="domain.VerifyTrustRelationship (targetDomain, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetDomain" Type="System.DirectoryServices.ActiveDirectory.Domain" />
        <Parameter Name="direction" Type="System.DirectoryServices.ActiveDirectory.TrustDirection" />
      </Parameters>
      <Docs>
        <param name="targetDomain">Objeto <see cref="T:System.DirectoryServices.ActiveDirectory.Domain" /> que representa el dominio con el que existe la confianza.</param>
        <param name="direction">Un valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> que especifica la dirección de la confianza con respecto a este dominio.</param>
        <summary>Comprueba que una confianza establecida previamente con el dominio especificado es válida.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Este método comprueba que se ha establecido una relación de confianza totalmente. La relación de confianza no se establece hasta que se han creado ambos lados de la relación de confianza.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryObjectNotFoundException">No hay ninguna relación de confianza con el dominio especificado por el parámetro <paramref name="targetDomain" /> o el dominio de destino no tiene la dirección de confianza especificada por el parámetro <paramref name="direction" />.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryOperationException">Una llamada al servicio de directorio subyacente produjo un error.</exception>
        <exception cref="T:System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException">El servidor de destino está ocupado o no está disponible.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetDomain" /> es <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="direction" /> no es un valor <see cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" /> válido.</exception>
        <exception cref="T:System.ObjectDisposedException">El objeto se ha eliminado.</exception>
        <exception cref="T:System.UnauthorizedAccessException">La cuenta especificada no tiene permiso para realizar esta operación.</exception>
        <altmember cref="T:System.DirectoryServices.ActiveDirectory.TrustDirection" />
        <related type="Article" href="https://msdn.microsoft.com/library/e1df3378-17b0-4429-91c7-13d4a457fb6e">Cómo Trabajar con confianzas</related>
      </Docs>
    </Member>
  </Members>
</Type>