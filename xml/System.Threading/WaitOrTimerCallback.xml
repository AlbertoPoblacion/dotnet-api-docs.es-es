<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="289e1b5b821956cddb25a0678cc80180a46e2875" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48724839" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Objeto que contiene la información que va a utilizar el método de devolución de llamadas cada vez que se ejecute.</param>
    <param name="timedOut"><see langword="true" /> si <see cref="T:System.Threading.WaitHandle" /> ha agotado el tiempo de espera; <see langword="false" /> si estaba señalado.</param>
    <summary>Representa un método al que se debe llamar cuando un <see cref="T:System.Threading.WaitHandle" /> está señalado o se agota su tiempo de espera.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> Representa un método de devolución de llamada que se desea ejecutar cuando se agota el tiempo de un identificador de espera registrada o se señala. Crear el delegado pasando el método de devolución de llamada para el <xref:System.Threading.WaitOrTimerCallback> constructor. El método debe tener la firma que se muestra aquí.  
  
 Crear el identificador de espera registrada pasando el <xref:System.Threading.WaitOrTimerCallback> delegado y un <xref:System.Threading.WaitHandle> a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. El método de devolución de llamada ejecuta cada vez que el <xref:System.Threading.WaitHandle> el tiempo de espera o se señala.  
  
  
> [!NOTE]
>  Los usuarios de Visual Basic pueden omitir el <xref:System.Threading.WaitOrTimerCallback> constructor y basta con usar el `AddressOf` operador al pasar el método de devolución de llamada a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic llama automáticamente al constructor de delegado correcto.  
  
 Si desea pasar información a su método de devolución de llamada, cree un objeto que contiene la información necesaria y páselo a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> cuando se crea el identificador de espera registrada. Cada vez que se ejecuta el método de devolución de llamada, el `state` parámetro contiene este objeto.  
  
 Para obtener más información sobre el uso de métodos de devolución de llamada para sincronizar subprocesos de grupo, consulte [el grupo de subprocesos administrados](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 El ejemplo siguiente muestra cómo usar el <xref:System.Threading.WaitOrTimerCallback> delegado para representar un método de devolución de llamada que se ejecuta cuando se señala un identificador de espera.  
  
 El ejemplo también muestra cómo usar el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método para ejecutar un método de devolución de llamada especificada cuando se señala un identificador de espera especificado. En este ejemplo, el método de devolución de llamada es `WaitProc` y el identificador de espera es un <xref:System.Threading.AutoResetEvent>.  
  
 El ejemplo define un `TaskInfo` clase para contener la información que se pasa a la devolución de llamada cuando se ejecuta. El ejemplo se crea un `TaskInfo` de objeto y lo asigna algunos datos de cadena. El <xref:System.Threading.RegisteredWaitHandle> devuelta por la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método se asigna a la `Handle` campo de la `TaskInfo` objeto, para que el método de devolución de llamada tiene acceso a la <xref:System.Threading.RegisteredWaitHandle>.  
  
 Además el `TaskInfo` (objeto), la llamada a la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método especifica el <xref:System.Threading.AutoResetEvent> espera a que la tarea, un <xref:System.Threading.WaitOrTimerCallback> delegado que representa el `WaitProc` varias devoluciones de llamada, un intervalo de tiempo de espera de un segundo y el método de devolución de llamada .  
  
 Cuando el subproceso principal señala el <xref:System.Threading.AutoResetEvent> mediante una llamada a su <xref:System.Threading.EventWaitHandle.Set%2A> método, el <xref:System.Threading.WaitOrTimerCallback> se invoca el delegado. El `WaitProc` método pruebas <xref:System.Threading.RegisteredWaitHandle> para determinar si se ha producido un tiempo de espera. Si la devolución de llamada se invocó porque se señaló el identificador de espera, el `WaitProc` anula el registro de método la <xref:System.Threading.RegisteredWaitHandle>, deteniendo aún más las devoluciones de llamada. En el caso de un tiempo de espera, la tarea sigue esperando. El `WaitProc` método termina con la impresión de un mensaje en la consola.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">Subprocesos y subprocesamiento</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Grupo de subprocesos administrado</related>
  </Docs>
</Type>