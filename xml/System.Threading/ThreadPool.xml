<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50de54f2e0cde589b4af1c454e85fed39c9f40df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="98ef8-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      <span class="sxs-lookup">
        <span data-stu-id="98ef8-101">Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-102">Muchas aplicaciones crean subprocesos que pasan mucho tiempo en el estado inactivo, esperando un evento que se produzca.</span><span class="sxs-lookup"><span data-stu-id="98ef8-102">Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</span></span> <span data-ttu-id="98ef8-103">Otros subprocesos pueden entrar en estado de inactividad y activarse periódicamente para sondear en busca de un cambio o actualizar información de estado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-103">Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</span></span> <span data-ttu-id="98ef8-104">El grupo de subprocesos permite usar subprocesos más eficaz al proporcionar la aplicación con un grupo de subprocesos de trabajo administrados por el sistema.</span><span class="sxs-lookup"><span data-stu-id="98ef8-104">The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</span></span> <span data-ttu-id="98ef8-105">A continuación se indican algunos ejemplos de operaciones que utilizan el grupo de subprocesos:</span><span class="sxs-lookup"><span data-stu-id="98ef8-105">Examples of operations that use thread pool threads include the following:</span></span>  
  
-   <span data-ttu-id="98ef8-106">Cuando se crea un <xref:System.Threading.Tasks.Task> o <xref:System.Threading.Tasks.Task%601> objeto que se va a realizar algunas tareas de forma asincrónica, de forma predeterminada, la tarea está programada para ejecutarse en un subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-106">When you create a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</span></span>  
  
-   <span data-ttu-id="98ef8-107">Temporizadores asincrónicos usar el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-107">Asynchronous timers use the thread pool.</span></span> <span data-ttu-id="98ef8-108">Grupo de subprocesos ejecuta devoluciones de llamada desde el <xref:System.Threading.Timer?displayProperty=nameWithType> clase y provocar eventos desde la <xref:System.Timers.Timer?displayProperty=nameWithType> clase.</span><span class="sxs-lookup"><span data-stu-id="98ef8-108">Thread pool threads execute callbacks from the <xref:System.Threading.Timer?displayProperty=nameWithType> class and raise events from the <xref:System.Timers.Timer?displayProperty=nameWithType> class.</span></span>  
  
-   <span data-ttu-id="98ef8-109">Cuando se usa identificadores de espera registrada, un subproceso del sistema supervisa el estado de los identificadores de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-109">When you use registered wait handles, a system thread monitors the status of the wait handles.</span></span> <span data-ttu-id="98ef8-110">Cuando se completa una operación de espera, un subproceso de trabajo del grupo de subprocesos ejecuta la función de devolución de llamada correspondiente.</span><span class="sxs-lookup"><span data-stu-id="98ef8-110">When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</span></span>  
  
-   <span data-ttu-id="98ef8-111">Cuando se llama a la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método para poner en cola un método para su ejecución en un subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-111">When you call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method to queue a method for execution on a thread pool thread.</span></span> <span data-ttu-id="98ef8-112">Para ello, pasando al método un <xref:System.Threading.WaitCallback> delegar.</span><span class="sxs-lookup"><span data-stu-id="98ef8-112">You do this by passing the method a <xref:System.Threading.WaitCallback> delegate.</span></span>   <span data-ttu-id="98ef8-113">El delegado tiene la firma</span><span class="sxs-lookup"><span data-stu-id="98ef8-113">The delegate has the signature</span></span>  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     <span data-ttu-id="98ef8-114">donde `state` es un objeto que contiene los datos que va a usar el delegado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-114">where `state` is an object that contains data to be used by the delegate.</span></span> <span data-ttu-id="98ef8-115">Los datos reales se pueden pasar al delegado mediante una llamada a la <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-115">The actual data can be passed to the delegate by calling the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98ef8-116">Los subprocesos en el grupo de subprocesos administrados son subprocesos en segundo plano.</span><span class="sxs-lookup"><span data-stu-id="98ef8-116">The threads in the managed thread pool are background threads.</span></span> <span data-ttu-id="98ef8-117">Es decir, su <xref:System.Threading.Thread.IsBackground%2A> propiedades son `true`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-117">That is, their <xref:System.Threading.Thread.IsBackground%2A> properties are `true`.</span></span> <span data-ttu-id="98ef8-118">Esto significa que un <xref:System.Threading.ThreadPool> subproceso no mantendrá una aplicación que se ejecuta después de que han salido de todos los subprocesos de primer plano.</span><span class="sxs-lookup"><span data-stu-id="98ef8-118">This means that a <xref:System.Threading.ThreadPool> thread will not keep an application running after all foreground threads have exited.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98ef8-119">Cuando el grupo de subprocesos reutiliza un subproceso, no borra los datos de almacenamiento local de subprocesos o en los campos que se marcan con la <xref:System.ThreadStaticAttribute> atributo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-119">When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <xref:System.ThreadStaticAttribute> attribute.</span></span> <span data-ttu-id="98ef8-120">Por lo tanto, cuando un método examina el almacenamiento local de subprocesos o campos que se marcan con la <xref:System.ThreadStaticAttribute> atributo, los valores que encuentra podrían quedar a través de un uso anterior de subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-120">Therefore, when a method examines thread local storage or fields that are marked with the <xref:System.ThreadStaticAttribute> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</span></span>  
  
 <span data-ttu-id="98ef8-121">También puede poner en cola los elementos de trabajo que no están relacionados con una operación de espera para el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-121">You can also queue work items that are not related to a wait operation to the thread pool.</span></span> <span data-ttu-id="98ef8-122">Para solicitar que un subproceso en el grupo de subprocesos controle un elemento de trabajo, llame a la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-122">To request that a work item be handled by a thread in the thread pool, call the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="98ef8-123">Este método toma como parámetro una referencia para el método o el delegado al que llamará el subproceso seleccionado del grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-123">This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</span></span> <span data-ttu-id="98ef8-124">No hay ninguna manera de cancelar un elemento de trabajo después de que se ha puesto en cola.</span><span class="sxs-lookup"><span data-stu-id="98ef8-124">There is no way to cancel a work item after it has been queued.</span></span>  
  
 <span data-ttu-id="98ef8-125">Temporizadores de la cola del temporizador y operaciones de espera registradas también utilizan el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-125">Timer-queue timers and registered wait operations also use the thread pool.</span></span> <span data-ttu-id="98ef8-126">Sus funciones de devolución de llamada se ponen en cola para el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-126">Their callback functions are queued to the thread pool.</span></span>  
  
 <span data-ttu-id="98ef8-127">Hay un grupo de subprocesos por proceso.</span><span class="sxs-lookup"><span data-stu-id="98ef8-127">There is one thread pool per process.</span></span> <span data-ttu-id="98ef8-128">A partir de [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], el tamaño predeterminado del grupo de subprocesos de un proceso depende de varios factores, como el tamaño del espacio de direcciones virtuales.</span><span class="sxs-lookup"><span data-stu-id="98ef8-128">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</span></span> <span data-ttu-id="98ef8-129">Un proceso puede llamar al método <xref:System.Threading.ThreadPool.GetMaxThreads%2A> para determinar el número de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-129">A process can call the <xref:System.Threading.ThreadPool.GetMaxThreads%2A> method to determine the number of threads.</span></span> <span data-ttu-id="98ef8-130">El número de subprocesos en el grupo de subprocesos puede cambiarse mediante el <xref:System.Threading.ThreadPool.SetMaxThreads%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-130">The number of threads in the thread pool can be changed by using the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> method.</span></span> <span data-ttu-id="98ef8-131">Cada subproceso utiliza el tamaño de pila predeterminado y se ejecuta con la prioridad predeterminada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-131">Each thread uses the default stack size and runs at the default priority.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98ef8-132">Código no administrado que hospeda .NET Framework puede cambiar el tamaño del grupo de subprocesos mediante el `CorSetMaxThreads` función, definido en el archivo mscoree.h.</span><span class="sxs-lookup"><span data-stu-id="98ef8-132">Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the `CorSetMaxThreads` function, defined in the mscoree.h file.</span></span>  
  
 <span data-ttu-id="98ef8-133">El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría.</span><span class="sxs-lookup"><span data-stu-id="98ef8-133">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="98ef8-134">Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas.</span><span class="sxs-lookup"><span data-stu-id="98ef8-134">When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="98ef8-135">A partir de [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el grupo de subprocesos crea y destruye subprocesos de trabajo para optimizar el rendimiento, definido como el número de tareas que se completan por unidad de tiempo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-135">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="98ef8-136">Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-136">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98ef8-137">Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-137">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="98ef8-138">Puede utilizar el método <xref:System.Threading.ThreadPool.GetMinThreads%2A> para obtener estos valores mínimos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-138">You can use the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method to obtain these minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98ef8-139">Puede usar el <xref:System.Threading.ThreadPool.SetMinThreads%2A> método para aumentar el número mínimo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-139">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number of threads.</span></span> <span data-ttu-id="98ef8-140">Sin embargo, aumentar innecesariamente estos valores puede causar problemas de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="98ef8-140">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="98ef8-141">Si se inician demasiadas tareas al mismo tiempo, puede que todas ellas parezcan funcionar con lentitud.</span><span class="sxs-lookup"><span data-stu-id="98ef8-141">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="98ef8-142">En la mayoría de los casos, el grupo de subprocesos funciona mejor con su propio algoritmo de asignación de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-142">In most cases the thread pool will perform better with its own algorithm for allocating threads.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98ef8-143">En el ejemplo siguiente, el subproceso de aplicación principal se pone en cola con un método denominado `ThreadProc` para ejecutar en un subproceso del grupo, espera un segundo y, a continuación, se cierra.</span><span class="sxs-lookup"><span data-stu-id="98ef8-143">In the following example, the main application thread  queues a method named `ThreadProc` to execute on a thread pool thread, sleeps for one second, and then exits.</span></span> <span data-ttu-id="98ef8-144">El `ThreadProc` método simplemente muestra un mensaje.</span><span class="sxs-lookup"><span data-stu-id="98ef8-144">The `ThreadProc` method simply displays a message.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 <span data-ttu-id="98ef8-145">Si Comente la llamada a la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método, el subproceso principal finaliza antes de ejecutarse el método en el subproceso del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-145">If you comment out the call to the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, the main thread exits before         method runs on the thread pool thread.</span></span>  <span data-ttu-id="98ef8-146">El grupo de subprocesos utiliza subprocesos en segundo plano, que no mantienen la aplicación en ejecución si han finalizado todos los subprocesos de primer plano.</span><span class="sxs-lookup"><span data-stu-id="98ef8-146">The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</span></span>  <span data-ttu-id="98ef8-147">(Esto es un ejemplo sencillo de una condición de carrera).</span><span class="sxs-lookup"><span data-stu-id="98ef8-147">(This         is a simple example of a race condition.)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="98ef8-148">Este tipo es seguro para la ejecución de subprocesos.</span>
      <span class="sxs-lookup">
        <span data-stu-id="98ef8-148">This type is thread safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="98ef8-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-149">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="98ef8-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-150">An <see cref="T:System.IntPtr" /> that holds the handle.</span>
          </span>
          <span data-ttu-id="98ef8-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-151">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-152">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-153">
            <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-153">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="98ef8-154">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-154">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="98ef8-155">Para poder llamar a código no administrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-155">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="98ef8-156">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-156">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <span data-ttu-id="98ef8-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-157">A <see cref="T:System.Runtime.InteropServices.SafeHandle" /> that holds the operating system handle.</span>
          </span>
          <span data-ttu-id="98ef8-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-158">The handle must have been opened for overlapped I/O on the unmanaged side.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-159">Binds an operating system handle to the <see cref="T:System.Threading.ThreadPool" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-160">
            <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-160">
              <see langword="true" /> if the handle is bound; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-161">El `osHandle` parámetro debe ser un <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, que deriva de la clase abstracta <xref:System.Runtime.InteropServices.SafeHandle> clase.</span><span class="sxs-lookup"><span data-stu-id="98ef8-161">The `osHandle` parameter should be a <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, which derives from the abstract <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="98ef8-162">
            <paramref name="osHandle" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-162">
              <paramref name="osHandle" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="98ef8-163">Para poder llamar a código no administrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-163">for the ability to call unmanaged code.</span>
          </span>
          <span data-ttu-id="98ef8-164">Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-164">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="98ef8-165">The number of available worker threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-165">The number of available worker threads.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="98ef8-166">The number of available asynchronous I/O threads.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-166">The number of available asynchronous I/O threads.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-167">Retrieves the difference between the maximum number of thread pool threads returned by the <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> method, and the number currently active.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-168">Cuando <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> devuelve, la variable especificada por `workerThreads` contiene el número de subprocesos de trabajo adicionales que se pueden iniciar y la variable especificada por `completionPortThreads` contiene el número de subprocesos de E/S asincrónicos adicionales que se pueden iniciar.</span><span class="sxs-lookup"><span data-stu-id="98ef8-168">When <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> returns, the variable specified by `workerThreads` contains the number of additional worker threads that can be started, and the variable specified by `completionPortThreads` contains the number of additional asynchronous I/O threads that can be started.</span></span>  
  
 <span data-ttu-id="98ef8-169">Si no hay ningún subproceso disponible, las solicitudes de grupo de subprocesos adicionales permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-169">If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98ef8-170">En el ejemplo siguiente se muestra el número de subprocesos de trabajo y subprocesos de E/S disponibles cuando se inicia una aplicación sencilla.</span><span class="sxs-lookup"><span data-stu-id="98ef8-170">The following example displays the number of worker threads and I/O threads available when a simple app is started.</span></span>  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="98ef8-171">The maximum number of worker threads in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-171">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="98ef8-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-172">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-173">Retrieves the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="98ef8-174">All requests above that number remain queued until thread pool threads become available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-174">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-175">Cuando <xref:System.Threading.ThreadPool.GetMaxThreads%2A> devuelve, la variable especificada por `workerThreads` contiene el número máximo de subprocesos de trabajo permitidos en el grupo de subprocesos y la variable especificada por `completionPortThreads` contiene el número máximo de subprocesos de E/S asincrónicos permitidos en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-175">When <xref:System.Threading.ThreadPool.GetMaxThreads%2A> returns, the variable specified by `workerThreads` contains the maximum number of worker threads allowed in the thread pool, and the variable specified by `completionPortThreads` contains the maximum number of asynchronous I/O threads allowed in the thread pool.</span></span>  
  
 <span data-ttu-id="98ef8-176">Puede usar el <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> método para determinar el número real de subprocesos en el grupo de subprocesos en un momento dado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-176">You can use the <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> method to determine the actual number of threads in the thread pool at any given time.</span></span>  
  
 <span data-ttu-id="98ef8-177">Puede usar el <xref:System.Threading.ThreadPool.SetMaxThreads%2A> para establecer el número máximo de subprocesos de trabajo y subprocesos de E/S asincrónicos en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-177">You can use the <xref:System.Threading.ThreadPool.SetMaxThreads%2A> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</span></span>  
  
 <span data-ttu-id="98ef8-178">Puede poner en cola como muchas solicitudes de grupo de subprocesos como permita la memoria del sistema.</span><span class="sxs-lookup"><span data-stu-id="98ef8-178">You can queue as many thread pool requests as system memory allows.</span></span> <span data-ttu-id="98ef8-179">Si hay más solicitudes que el grupo de subprocesos, las solicitudes adicionales permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-179">If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98ef8-180">En el ejemplo de código siguiente se muestra cómo recuperar un recuento del número máximo y disponible de subprocesos en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-180">The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</span></span> <span data-ttu-id="98ef8-181">Un elemento de trabajo se pone en cola que usa `FileStream` para escribir en dos archivos de forma asincrónica.</span><span class="sxs-lookup"><span data-stu-id="98ef8-181">A work item is queued that uses `FileStream` to asynchronously write to two files.</span></span> <span data-ttu-id="98ef8-182">Se superó el tiempo de los métodos de devolución de llamada que se superponen.</span><span class="sxs-lookup"><span data-stu-id="98ef8-182">The callback methods are timed to overlap.</span></span> <span data-ttu-id="98ef8-183">Un subproceso de trabajo controla el elemento de trabajo y, dependiendo de la velocidad y el número de procesadores del equipo, uno o dos subprocesos de puerto de finalización controlan las operaciones de escritura.</span><span class="sxs-lookup"><span data-stu-id="98ef8-183">A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="98ef8-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-184">When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="98ef8-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-185">When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-186">Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-187">El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría.</span><span class="sxs-lookup"><span data-stu-id="98ef8-187">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="98ef8-188">De forma predeterminada, el número mínimo de subprocesos se establece en el número de procesadores en un sistema.</span><span class="sxs-lookup"><span data-stu-id="98ef8-188">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="98ef8-189">Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas.</span><span class="sxs-lookup"><span data-stu-id="98ef8-189">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="98ef8-190">A partir del [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el grupo de subprocesos crea y destruye subprocesos para optimizar el rendimiento, que se define como el número de tareas que se completan por unidad de tiempo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-190">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="98ef8-191">Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-191">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98ef8-192">Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-192">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98ef8-193">En el ejemplo siguiente se establece el número mínimo de subprocesos de trabajo a cuatro y conserva el valor original para el número mínimo de subprocesos de finalización de E/S asincrónicos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-193">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="98ef8-194">Queues a method for execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-194">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="98ef8-195">The method executes when a thread pool thread becomes available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-195">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="98ef8-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-196">A <see cref="T:System.Threading.WaitCallback" /> that represents the method to be executed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-197">Queues a method for execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-197">Queues a method for execution.</span>
          </span>
          <span data-ttu-id="98ef8-198">The method executes when a thread pool thread becomes available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-198">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-199">
            <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-199">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-200">Puede colocar los datos requeridos por el método en cola en los campos de instancia de la clase en la que se define el método, o puede usar el <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> sobrecarga que acepta un objeto que contiene los datos necesarios.</span><span class="sxs-lookup"><span data-stu-id="98ef8-200">You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> overload that accepts an object containing the necessary data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98ef8-201">Los usuarios de Visual Basic pueden omitir el <xref:System.Threading.WaitCallback> constructor y simplemente, usar el `AddressOf` operador cuando se pasa el método de devolución de llamada a <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="98ef8-201">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="98ef8-202">Visual Basic llama automáticamente al constructor de delegado correcto.</span><span class="sxs-lookup"><span data-stu-id="98ef8-202">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="98ef8-203">Información de versión</span><span class="sxs-lookup"><span data-stu-id="98ef8-203">Version Information</span></span>  
 <span data-ttu-id="98ef8-204">En .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-204">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="98ef8-205">En versiones anteriores, no se propaga la información de entidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-205">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98ef8-206">En el ejemplo siguiente se usa el <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> sobrecarga del método para poner en cola una tarea, que se representa mediante el `ThreadProc` método, se debe ejecutar cuando hay disponible un subproceso.</span><span class="sxs-lookup"><span data-stu-id="98ef8-206">The following example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> method overload to queue a task, which is represented by the `ThreadProc` method, to execute when a thread becomes available.</span></span> <span data-ttu-id="98ef8-207">No hay información de la tarea se suministra con esta sobrecarga.</span><span class="sxs-lookup"><span data-stu-id="98ef8-207">No task information is supplied with this overload.</span></span> <span data-ttu-id="98ef8-208">Por lo tanto, la información que está disponible para el `ThreadProc` método se limita al objeto al que pertenece el método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-208">Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="98ef8-209">
            <paramref name="callBack" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-209">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="98ef8-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-210">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="98ef8-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-211">A <see cref="T:System.Threading.WaitCallback" /> representing the method to execute.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-212">An object containing data to be used by the method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-212">An object containing data to be used by the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-213">Queues a method for execution, and specifies an object containing data to be used by the method.</span>
          </span>
          <span data-ttu-id="98ef8-214">The method executes when a thread pool thread becomes available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-214">The method executes when a thread pool thread becomes available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-215">
            <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-215">
              <see langword="true" /> if the method is successfully queued; <see cref="T:System.NotSupportedException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-216">Si el método de devolución de llamada requiere datos complejos, puede definir una clase para contener los datos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-216">If the callback method requires complex data, you can define a class to contain the data.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98ef8-217">Los usuarios de Visual Basic pueden omitir el <xref:System.Threading.WaitCallback> constructor y simplemente, usar el `AddressOf` operador cuando se pasa el método de devolución de llamada a <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span><span class="sxs-lookup"><span data-stu-id="98ef8-217">Visual Basic users can omit the <xref:System.Threading.WaitCallback> constructor, and simply use the `AddressOf` operator when passing the callback method to <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</span></span> <span data-ttu-id="98ef8-218">Visual Basic llama automáticamente al constructor de delegado correcto.</span><span class="sxs-lookup"><span data-stu-id="98ef8-218">Visual Basic automatically calls the correct delegate constructor.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="98ef8-219">Información de versión</span><span class="sxs-lookup"><span data-stu-id="98ef8-219">Version Information</span></span>  
 <span data-ttu-id="98ef8-220">En .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-220">In the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method.</span></span> <span data-ttu-id="98ef8-221">En versiones anteriores, no se propaga la información de entidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-221">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98ef8-222">En el ejemplo siguiente se muestra cómo crear un objeto que contiene información de la tarea.</span><span class="sxs-lookup"><span data-stu-id="98ef8-222">The following example shows how to create an object that contains task information.</span></span> <span data-ttu-id="98ef8-223">También muestra cómo pasar ese objeto a una tarea que se pone en cola para su ejecución por el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-223">It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="98ef8-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-224">The common language runtime (CLR) is hosted, and the host does not support this action.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="98ef8-225">
            <paramref name="callBack" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-225">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state, bool preferLocal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="98ef8-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-226">Registers a delegate that is waiting for a <see cref="T:System.Threading.WaitHandle" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="98ef8-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-227">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="98ef8-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-228">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="98ef8-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-229">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-230">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-230">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="98ef8-231">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-231">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-232">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="98ef8-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-233">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="98ef8-234">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-234">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-235">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-236">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-237">Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-237">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="98ef8-238">Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-238">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="98ef8-239">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-239">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="98ef8-240">El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método pone en cola el delegado especificado en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-240">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="98ef8-241">Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:</span><span class="sxs-lookup"><span data-stu-id="98ef8-241">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="98ef8-242">El objeto especificado está en el estado señalado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-242">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="98ef8-243">Se agota el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-243">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="98ef8-244">El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método comprueba el estado actual del objeto especificado <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="98ef8-244">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="98ef8-245">Si el estado del objeto no está señalado, el método registra una operación de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-245">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="98ef8-246">La operación de espera se realiza mediante un subproceso del grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-246">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="98ef8-247">Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-247">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="98ef8-248">Si el `timeOutInterval` parámetro no es 0 (cero) y la `executeOnlyOnce` parámetro es `false`, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-248">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98ef8-249">Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-249">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="98ef8-250">En lugar de un <xref:System.Threading.Mutex>, use un <xref:System.Threading.Semaphore> con un recuento máximo de 1.</span><span class="sxs-lookup"><span data-stu-id="98ef8-250">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="98ef8-251">Para cancelar la operación de espera, llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-251">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="98ef8-252">El subproceso espera usa Win32 `WaitForMultipleObjects` función para supervisar las operaciones de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-252">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="98ef8-253">Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, debe duplicar el identificador utilizando Win32 `DuplicateHandle` función.</span><span class="sxs-lookup"><span data-stu-id="98ef8-253">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="98ef8-254">Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.</span><span class="sxs-lookup"><span data-stu-id="98ef8-254">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="98ef8-255">La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse.</span><span class="sxs-lookup"><span data-stu-id="98ef8-255">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="98ef8-256">Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla.</span><span class="sxs-lookup"><span data-stu-id="98ef8-256">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="98ef8-257">Por ejemplo, el recuento de un semáforo disminuye en uno.</span><span class="sxs-lookup"><span data-stu-id="98ef8-257">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="98ef8-258">Información de versión</span><span class="sxs-lookup"><span data-stu-id="98ef8-258">Version Information</span></span>  
 <span data-ttu-id="98ef8-259">A partir de .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-259">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="98ef8-260">En versiones anteriores, no se propaga la información de entidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-260">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="98ef8-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-261">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="98ef8-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-262">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="98ef8-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-263">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="98ef8-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-264">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-265">The object passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-265">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="98ef8-266">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-266">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-267">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="98ef8-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-268">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="98ef8-269">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-269">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-270">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-271">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-272">Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-272">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="98ef8-273">Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-273">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="98ef8-274">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-274">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="98ef8-275">El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método pone en cola el delegado especificado en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-275">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="98ef8-276">Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:</span><span class="sxs-lookup"><span data-stu-id="98ef8-276">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="98ef8-277">El objeto especificado está en el estado señalado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-277">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="98ef8-278">Se agota el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-278">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="98ef8-279">El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método comprueba el estado actual del objeto especificado <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="98ef8-279">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="98ef8-280">Si el estado del objeto no está señalado, el método registra una operación de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-280">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="98ef8-281">La operación de espera se realiza mediante un subproceso del grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-281">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="98ef8-282">Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-282">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="98ef8-283">Si el `timeOutInterval` parámetro no es 0 (cero) y la `executeOnlyOnce` parámetro es `false`, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-283">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98ef8-284">Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-284">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="98ef8-285">En lugar de un <xref:System.Threading.Mutex>, use un <xref:System.Threading.Semaphore> con un recuento máximo de 1.</span><span class="sxs-lookup"><span data-stu-id="98ef8-285">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="98ef8-286">Para cancelar la operación de espera, llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-286">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="98ef8-287">El subproceso espera usa Win32 `WaitForMultipleObjects` función para supervisar las operaciones de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-287">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="98ef8-288">Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, debe duplicar el identificador utilizando Win32 `DuplicateHandle` función.</span><span class="sxs-lookup"><span data-stu-id="98ef8-288">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="98ef8-289">Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.</span><span class="sxs-lookup"><span data-stu-id="98ef8-289">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="98ef8-290">La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse.</span><span class="sxs-lookup"><span data-stu-id="98ef8-290">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="98ef8-291">Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla.</span><span class="sxs-lookup"><span data-stu-id="98ef8-291">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="98ef8-292">Por ejemplo, el recuento de un semáforo disminuye en uno.</span><span class="sxs-lookup"><span data-stu-id="98ef8-292">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="98ef8-293">Información de versión</span><span class="sxs-lookup"><span data-stu-id="98ef8-293">Version Information</span></span>  
 <span data-ttu-id="98ef8-294">A partir de .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-294">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="98ef8-295">En versiones anteriores, no se propaga la información de entidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-295">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="98ef8-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-296">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="98ef8-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-297">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="98ef8-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-298">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="98ef8-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-299">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-300">The object passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-300">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="98ef8-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-301">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="98ef8-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-302">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="98ef8-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-303">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="98ef8-304">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-304">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-305">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-306">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that encapsulates the native handle.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-307">Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-307">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="98ef8-308">Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-308">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="98ef8-309">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-309">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="98ef8-310">El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método pone en cola el delegado especificado en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-310">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="98ef8-311">Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:</span><span class="sxs-lookup"><span data-stu-id="98ef8-311">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="98ef8-312">El objeto especificado está en el estado señalado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-312">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="98ef8-313">Se agota el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-313">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="98ef8-314">El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método comprueba el estado actual del objeto especificado <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="98ef8-314">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="98ef8-315">Si el estado del objeto no está señalado, el método registra una operación de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-315">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="98ef8-316">La operación de espera se realiza mediante un subproceso del grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-316">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="98ef8-317">Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-317">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="98ef8-318">Si el `timeOutInterval` parámetro no es 0 (cero) y la `executeOnlyOnce` parámetro es `false`, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-318">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98ef8-319">Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-319">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="98ef8-320">En lugar de un <xref:System.Threading.Mutex>, use un <xref:System.Threading.Semaphore> con un recuento máximo de 1.</span><span class="sxs-lookup"><span data-stu-id="98ef8-320">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="98ef8-321">Para cancelar la operación de espera, llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-321">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="98ef8-322">El subproceso espera usa Win32 `WaitForMultipleObjects` función para supervisar las operaciones de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-322">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="98ef8-323">Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, debe duplicar el identificador utilizando Win32 `DuplicateHandle` función.</span><span class="sxs-lookup"><span data-stu-id="98ef8-323">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="98ef8-324">Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.</span><span class="sxs-lookup"><span data-stu-id="98ef8-324">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="98ef8-325">La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse.</span><span class="sxs-lookup"><span data-stu-id="98ef8-325">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="98ef8-326">Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla.</span><span class="sxs-lookup"><span data-stu-id="98ef8-326">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="98ef8-327">Por ejemplo, el recuento de un semáforo disminuye en uno.</span><span class="sxs-lookup"><span data-stu-id="98ef8-327">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="98ef8-328">Información de versión</span><span class="sxs-lookup"><span data-stu-id="98ef8-328">Version Information</span></span>  
 <span data-ttu-id="98ef8-329">A partir de .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-329">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="98ef8-330">En versiones anteriores, no se propaga la información de entidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-330">In earlier versions, the principal information is not propagated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="98ef8-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-331">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="98ef8-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-332">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="98ef8-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-333">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="98ef8-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-334">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="98ef8-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-335">The <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-336">The object passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-336">The object passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="98ef8-337">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-337">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-338">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="98ef8-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-339">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="98ef8-340">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-340">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-341">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-342">The <see cref="T:System.Threading.RegisteredWaitHandle" /> that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-343">Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-343">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="98ef8-344">Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-344">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="98ef8-345">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-345">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 <span data-ttu-id="98ef8-346">El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método pone en cola el delegado especificado en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-346">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method queues the specified delegate to the thread pool.</span></span> <span data-ttu-id="98ef8-347">Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:</span><span class="sxs-lookup"><span data-stu-id="98ef8-347">A worker thread will execute the delegate when one of the following occurs:</span></span>  
  
-   <span data-ttu-id="98ef8-348">El objeto especificado está en el estado señalado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-348">The specified object is in the signaled state.</span></span>  
  
-   <span data-ttu-id="98ef8-349">Se agota el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-349">The time-out interval elapses.</span></span>  
  
 <span data-ttu-id="98ef8-350">El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método comprueba el estado actual del objeto especificado <xref:System.Threading.WaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="98ef8-350">The <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method checks the current state of the specified object's <xref:System.Threading.WaitHandle>.</span></span> <span data-ttu-id="98ef8-351">Si el estado del objeto no está señalado, el método registra una operación de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-351">If the object's state is unsignaled, the method registers a wait operation.</span></span> <span data-ttu-id="98ef8-352">La operación de espera se realiza mediante un subproceso del grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-352">The wait operation is performed by a thread from the thread pool.</span></span> <span data-ttu-id="98ef8-353">Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-353">The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</span></span> <span data-ttu-id="98ef8-354">Si el `timeOutInterval` parámetro no es 0 (cero) y la `executeOnlyOnce` parámetro es `false`, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-354">If the `timeOutInterval` parameter is not 0 (zero) and the `executeOnlyOnce` parameter is `false`, the timer is reset every time the event is signaled or the time-out interval elapses.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98ef8-355">Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-355">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span> <span data-ttu-id="98ef8-356">En lugar de un <xref:System.Threading.Mutex>, use un <xref:System.Threading.Semaphore> con un recuento máximo de 1.</span><span class="sxs-lookup"><span data-stu-id="98ef8-356">Instead of a <xref:System.Threading.Mutex>, use a <xref:System.Threading.Semaphore> with a maximum count of 1.</span></span>  
  
 <span data-ttu-id="98ef8-357">Para cancelar la operación de espera, llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-357">To cancel the wait operation, call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="98ef8-358">El subproceso espera usa Win32 `WaitForMultipleObjects` función para supervisar las operaciones de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-358">The wait thread uses the Win32 `WaitForMultipleObjects` function to monitor registered wait operations.</span></span> <span data-ttu-id="98ef8-359">Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, debe duplicar el identificador utilizando Win32 `DuplicateHandle` función.</span><span class="sxs-lookup"><span data-stu-id="98ef8-359">Therefore, if you must use the same native operating system handle in multiple calls to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, you must duplicate the handle using the Win32 `DuplicateHandle` function.</span></span> <span data-ttu-id="98ef8-360">Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.</span><span class="sxs-lookup"><span data-stu-id="98ef8-360">Note that you should not pulse an event object passed to <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, because the wait thread might not detect that the event is signaled before it is reset.</span></span>  
  
 <span data-ttu-id="98ef8-361">La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse.</span><span class="sxs-lookup"><span data-stu-id="98ef8-361">Before returning, the function modifies the state of some types of synchronization objects.</span></span> <span data-ttu-id="98ef8-362">Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla.</span><span class="sxs-lookup"><span data-stu-id="98ef8-362">Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</span></span> <span data-ttu-id="98ef8-363">Por ejemplo, el recuento de un semáforo disminuye en uno.</span><span class="sxs-lookup"><span data-stu-id="98ef8-363">For example, the count of a semaphore is decreased by one.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="98ef8-364">Información de versión</span><span class="sxs-lookup"><span data-stu-id="98ef8-364">Version Information</span></span>  
 <span data-ttu-id="98ef8-365">A partir de .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-365">Starting with the .NET Framework version 2.0, the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property value is propagated to worker threads queued using the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method.</span></span> <span data-ttu-id="98ef8-366">En versiones anteriores, no se propaga la información de entidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-366">In earlier versions, the principal information is not propagated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98ef8-367">En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método para ejecutar un método de devolución de llamada especificado cuando se señala a un controlador de espera especificado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-367">The following example shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled.</span></span> <span data-ttu-id="98ef8-368">En este ejemplo, el método de devolución de llamada es `WaitProc`, y el identificador de espera es un <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="98ef8-368">In this example, the callback method is `WaitProc`, and the wait handle is an <xref:System.Threading.AutoResetEvent>.</span></span>  
  
 <span data-ttu-id="98ef8-369">El ejemplo define un `TaskInfo` clase para contener la información que se pasa a la devolución de llamada cuando se ejecuta.</span><span class="sxs-lookup"><span data-stu-id="98ef8-369">The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes.</span></span> <span data-ttu-id="98ef8-370">El ejemplo se crea un `TaskInfo` de objeto y lo asigna algunos datos de cadena.</span><span class="sxs-lookup"><span data-stu-id="98ef8-370">The example creates a `TaskInfo` object and assigns it some string data.</span></span> <span data-ttu-id="98ef8-371">El <xref:System.Threading.RegisteredWaitHandle> devuelto por la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método se asigna a la `Handle` campo de la `TaskInfo` objeto para que el método de devolución de llamada no tiene acceso a la <xref:System.Threading.RegisteredWaitHandle>.</span><span class="sxs-lookup"><span data-stu-id="98ef8-371">The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.</span></span>  
  
 <span data-ttu-id="98ef8-372">Además de especificar `TaskInfo` como el objeto que se va a pasar al método de devolución de llamada, la llamada a la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método especifica la <xref:System.Threading.AutoResetEvent> que la tarea va a esperar, un <xref:System.Threading.WaitOrTimerCallback> delegado que representa el `WaitProc` método de devolución de llamada, un intervalo de tiempo de espera de un segundo y varias devoluciones de llamada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-372">In addition to specifying `TaskInfo` as the object to pass to the callback method, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> that the task will wait for, a <xref:System.Threading.WaitOrTimerCallback> delegate that represents the `WaitProc` callback method, a one second time-out interval, and multiple callbacks.</span></span>  
  
 <span data-ttu-id="98ef8-373">Cuando el subproceso principal señala el <xref:System.Threading.AutoResetEvent> mediante una llamada a su <xref:System.Threading.EventWaitHandle.Set%2A> método, el <xref:System.Threading.WaitOrTimerCallback> se invoca el delegado.</span><span class="sxs-lookup"><span data-stu-id="98ef8-373">When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the <xref:System.Threading.WaitOrTimerCallback> delegate is invoked.</span></span> <span data-ttu-id="98ef8-374">El `WaitProc` método pruebas <xref:System.Threading.RegisteredWaitHandle> para determinar si se produjo un tiempo de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-374">The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a time-out occurred.</span></span> <span data-ttu-id="98ef8-375">Si la devolución de llamada se invocó porque se señaló el identificador de espera, el `WaitProc` método anula el registro del <xref:System.Threading.RegisteredWaitHandle>, deteniendo las devoluciones de llamada adicionales.</span><span class="sxs-lookup"><span data-stu-id="98ef8-375">If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping additional callbacks.</span></span> <span data-ttu-id="98ef8-376">En el caso de un tiempo de espera, la tarea sigue a la espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-376">In the case of a time-out, the task continues to wait.</span></span> <span data-ttu-id="98ef8-377">El `WaitProc` método termina con la impresión de un mensaje en la consola.</span><span class="sxs-lookup"><span data-stu-id="98ef8-377">The `WaitProc` method ends by printing a message to the console.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="98ef8-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-378">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="98ef8-379">The maximum number of worker threads in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-379">The maximum number of worker threads in the thread pool.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="98ef8-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-380">The maximum number of asynchronous I/O threads in the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-381">Sets the number of requests to the thread pool that can be active concurrently.</span>
          </span>
          <span data-ttu-id="98ef8-382">All requests above that number remain queued until thread pool threads become available.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-382">All requests above that number remain queued until thread pool threads become available.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-383">
            <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-383">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-384">No se puede establecer el número máximo de subprocesos de trabajo o subprocesos de finalización de E/S en un número menor que el número de procesadores en el equipo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-384">You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</span></span> <span data-ttu-id="98ef8-385">Para determinar cuántos procesadores están presentes, recuperar el valor de la <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> propiedad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-385">To determine how many processors are present, retrieve the value of the <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="98ef8-386">Además, no se puede establecer el número máximo de subprocesos de trabajo o subprocesos de finalización de E/S en un número menor que el correspondiente número mínimo de subprocesos de trabajo o subprocesos de finalización de E/S.</span><span class="sxs-lookup"><span data-stu-id="98ef8-386">In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</span></span> <span data-ttu-id="98ef8-387">Para determinar el tamaño del grupo de subprocesos mínimos, llame a la <xref:System.Threading.ThreadPool.GetMinThreads%2A> método.</span><span class="sxs-lookup"><span data-stu-id="98ef8-387">To determine the minimum thread pool size,  call the <xref:System.Threading.ThreadPool.GetMinThreads%2A> method.</span></span>  
  
 <span data-ttu-id="98ef8-388">Si se hospeda common language runtime, por ejemplo mediante Internet Information Services (IIS) o SQL Server, el host puede limitar o impedir cambios en el tamaño del grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-388">If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</span></span>  
  
 <span data-ttu-id="98ef8-389">Tenga cuidado al cambiar el número máximo de subprocesos en el grupo de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-389">Use caution when changing the maximum number of threads in the thread pool.</span></span> <span data-ttu-id="98ef8-390">Mientras que podría beneficiarse del código, los cambios pueden tener un efecto adverso en bibliotecas de código que usar.</span><span class="sxs-lookup"><span data-stu-id="98ef8-390">While your code might benefit, the changes might have an adverse effect on code libraries you use.</span></span>  
  
 <span data-ttu-id="98ef8-391">Establecer el tamaño del grupo de subprocesos demasiado grande puede causar problemas de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="98ef8-391">Setting the thread pool size too large can cause performance problems.</span></span> <span data-ttu-id="98ef8-392">Si hay demasiados subprocesos se ejecutan al mismo tiempo, el cambio de la tarea se convierte sobrecarga en un factor importante.</span><span class="sxs-lookup"><span data-stu-id="98ef8-392">If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="98ef8-393">la capacidad para controlar los subprocesos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-393">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="98ef8-394">Valor del permiso: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-394">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">
          <span data-ttu-id="98ef8-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-395">The minimum number of worker threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <param name="completionPortThreads">
          <span data-ttu-id="98ef8-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-396">The minimum number of asynchronous I/O threads that the thread pool creates on demand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-397">Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-398">
            <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-398">
              <see langword="true" /> if the change is successful; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-399">El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría.</span><span class="sxs-lookup"><span data-stu-id="98ef8-399">The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</span></span> <span data-ttu-id="98ef8-400">Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas.</span><span class="sxs-lookup"><span data-stu-id="98ef8-400">When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</span></span> <span data-ttu-id="98ef8-401">A partir del [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el grupo de subprocesos crea y destruye subprocesos para optimizar el rendimiento, que se define como el número de tareas que se completan por unidad de tiempo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-401">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</span></span> <span data-ttu-id="98ef8-402">Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-402">Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</span></span>  
  
 <span data-ttu-id="98ef8-403">Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-403">When demand is low, the actual number of thread pool threads can fall below the minimum values.</span></span>  
  
 <span data-ttu-id="98ef8-404">Si especifica un número negativo o un número mayor que el número máximo de subprocesos del grupo de subprocesos activos (obtenido mediante <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> devuelve `false` y no cambia ninguno de los valores mínimos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-404">If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> returns `false` and does not change either of the minimum values.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98ef8-405">De forma predeterminada, el número mínimo de subprocesos se establece en el número de procesadores en un sistema.</span><span class="sxs-lookup"><span data-stu-id="98ef8-405">By default, the minimum number of threads is set to the number of processors on a system.</span></span> <span data-ttu-id="98ef8-406">Puede usar el <xref:System.Threading.ThreadPool.SetMinThreads%2A> método para aumentar la ofthreads número mínimo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-406">You can use the <xref:System.Threading.ThreadPool.SetMinThreads%2A> method to increase the minimum number ofthreads.</span></span> <span data-ttu-id="98ef8-407">Sin embargo, aumentar innecesariamente estos valores puede causar problemas de rendimiento.</span><span class="sxs-lookup"><span data-stu-id="98ef8-407">However, unnecessarily increasing these values can cause performance problems.</span></span> <span data-ttu-id="98ef8-408">Si se inician demasiadas tareas al mismo tiempo, puede que todas ellas parezcan funcionar con lentitud.</span><span class="sxs-lookup"><span data-stu-id="98ef8-408">If too many tasks start at the same time, all of them might appear to be slow.</span></span> <span data-ttu-id="98ef8-409">En la mayoría de los casos, el grupo de subprocesos funciona mejor con su propio algoritmo de asignación de subprocesos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-409">In most cases, the thread pool will perform better with its own algorithm for allocating threads.</span></span> <span data-ttu-id="98ef8-410">Reducir al mínimo a menos que el número de procesadores también puede afectar al rendimiento.</span><span class="sxs-lookup"><span data-stu-id="98ef8-410">Reducing the minimum to less than the number of processors can also hurt performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98ef8-411">En el ejemplo siguiente se establece el número mínimo de subprocesos de trabajo a cuatro y conserva el valor original para el número mínimo de subprocesos de finalización de E/S asincrónicos.</span><span class="sxs-lookup"><span data-stu-id="98ef8-411">The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</span></span>  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="98ef8-412">la capacidad para controlar los subprocesos.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-412">for the ability to control threads.</span>
          </span>
          <span data-ttu-id="98ef8-413">Valor del permiso: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-413">Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">
          <span data-ttu-id="98ef8-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-414">The <see cref="T:System.Threading.NativeOverlapped" /> structure to queue.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-415">Queues an overlapped I/O operation for execution.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-415">Queues an overlapped I/O operation for execution.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-416">
            <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-416">
              <see langword="true" /> if the operation was successfully queued to an I/O completion port; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-417">Para obtener información acerca de cómo utilizar Win32 nativo E/S superpuesta, vea el <xref:System.Threading.Overlapped> (clase), el <xref:System.Threading.NativeOverlapped> estructura y la `OVERLAPPED` estructura en el SDK de plataforma de Win32.</span><span class="sxs-lookup"><span data-stu-id="98ef8-417">For information about using native Win32 overlapped I/O, see the <xref:System.Threading.Overlapped> class, the <xref:System.Threading.NativeOverlapped> structure, and the `OVERLAPPED` structure in the Win32 Platform SDK.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98ef8-418">Mediante el <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> método podría abrir accidentalmente una vulnerabilidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-418">Using the <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> method could inadvertently open up a security hole.</span></span> <span data-ttu-id="98ef8-419">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</span><span class="sxs-lookup"><span data-stu-id="98ef8-419">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="98ef8-420">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, la pila del subproceso del grupo no tiene el contexto de los llamadores reales.</span><span class="sxs-lookup"><span data-stu-id="98ef8-420">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, the stack of the thread pool thread does not have the context of the actual callers.</span></span> <span data-ttu-id="98ef8-421">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</span><span class="sxs-lookup"><span data-stu-id="98ef8-421">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="98ef8-422">requiere plena confianza para el llamador inmediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-422">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="98ef8-423">Este miembro no puede usarse por código de confianza parcial o transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-423">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <span data-ttu-id="98ef8-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-424">A <see cref="T:System.Threading.WaitCallback" /> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-425">The object that is passed to the delegate when serviced from the thread pool.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-426">Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-427">
            <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-427">
              <see langword="true" /> if the method succeeds; <see cref="T:System.OutOfMemoryException" /> is thrown if the work item could not be queued.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-428">A diferencia de la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> no propaga la pila de llamadas al subproceso de trabajo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-428">Unlike the <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> method, <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="98ef8-429">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-429">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98ef8-430">Usar <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> podría abrir accidentalmente una vulnerabilidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-430">Using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="98ef8-431">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</span><span class="sxs-lookup"><span data-stu-id="98ef8-431">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="98ef8-432">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</span><span class="sxs-lookup"><span data-stu-id="98ef8-432">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="98ef8-433">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</span><span class="sxs-lookup"><span data-stu-id="98ef8-433">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="98ef8-434">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-434">The caller does not have the required permission.</span>
          </span>
        </exception>
        <exception cref="T:System.ApplicationException">
          <span data-ttu-id="98ef8-435">An out-of-memory condition was encountered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-435">An out-of-memory condition was encountered.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="98ef8-436">The work item could not be queued.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-436">The work item could not be queued.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="98ef8-437">
            <paramref name="callBack" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-437">
              <paramref name="callBack" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="98ef8-438">requiere plena confianza para el llamador inmediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-438">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="98ef8-439">Este miembro no puede usarse por código de confianza parcial o transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-439">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="98ef8-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-440">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, but does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="98ef8-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-441">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="98ef8-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-442">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="98ef8-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-443">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-444">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-444">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="98ef8-445">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-445">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-446">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="98ef8-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-447">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="98ef8-448">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-448">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-449">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, using a 32-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-450">This method does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-450">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-451">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-452">A diferencia de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> no propaga la pila de llamadas al subproceso de trabajo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-452">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="98ef8-453">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-453">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98ef8-454">Usar <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> podría abrir accidentalmente una vulnerabilidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-454">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="98ef8-455">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</span><span class="sxs-lookup"><span data-stu-id="98ef8-455">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="98ef8-456">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</span><span class="sxs-lookup"><span data-stu-id="98ef8-456">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="98ef8-457">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</span><span class="sxs-lookup"><span data-stu-id="98ef8-457">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="98ef8-458">Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-458">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="98ef8-459">Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-459">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="98ef8-460">Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-460">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="98ef8-461">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-461">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="98ef8-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-462">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="98ef8-463">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-463">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="98ef8-464">requiere plena confianza para el llamador inmediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-464">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="98ef8-465">Este miembro no puede usarse por código de confianza parcial o transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-465">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="98ef8-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-466">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="98ef8-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-467">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="98ef8-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-468">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-469">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-469">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="98ef8-470">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-470">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-471">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="98ef8-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-472">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="98ef8-473">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-473">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-474">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 64-bit signed integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-475">This method does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-475">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-476">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-477">A diferencia de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> no propaga la pila de llamadas al subproceso de trabajo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-477">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="98ef8-478">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-478">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98ef8-479">Usar <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> podría abrir accidentalmente una vulnerabilidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-479">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="98ef8-480">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</span><span class="sxs-lookup"><span data-stu-id="98ef8-480">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="98ef8-481">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</span><span class="sxs-lookup"><span data-stu-id="98ef8-481">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="98ef8-482">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</span><span class="sxs-lookup"><span data-stu-id="98ef8-482">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="98ef8-483">Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-483">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="98ef8-484">Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-484">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="98ef8-485">Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-485">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="98ef8-486">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-486">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="98ef8-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-487">The <paramref name="millisecondsTimeOutInterval" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="98ef8-488">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-488">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="98ef8-489">requiere plena confianza para el llamador inmediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-489">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="98ef8-490">Este miembro no puede usarse por código de confianza parcial o transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-490">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="98ef8-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-491">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="98ef8-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-492">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="98ef8-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-493">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-494">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-494">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="98ef8-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-495">The time-out represented by a <see cref="T:System.TimeSpan" />.</span>
          </span>
          <span data-ttu-id="98ef8-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-496">If <c>timeout</c> is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="98ef8-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-497">If <c>timeout</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="98ef8-498">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-498">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-499">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a <see cref="T:System.TimeSpan" /> value for the time-out. This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-500">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-501">A diferencia de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> no propaga la pila de llamadas al subproceso de trabajo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-501">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="98ef8-502">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-502">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98ef8-503">Usar <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> podría abrir accidentalmente una vulnerabilidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-503">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="98ef8-504">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</span><span class="sxs-lookup"><span data-stu-id="98ef8-504">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="98ef8-505">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</span><span class="sxs-lookup"><span data-stu-id="98ef8-505">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="98ef8-506">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</span><span class="sxs-lookup"><span data-stu-id="98ef8-506">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="98ef8-507">Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-507">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="98ef8-508">Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-508">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="98ef8-509">Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-509">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="98ef8-510">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-510">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="98ef8-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-511">The <paramref name="timeout" /> parameter is less than -1.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="98ef8-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-512">The <paramref name="timeout" /> parameter is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="98ef8-513">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-513">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="98ef8-514">requiere plena confianza para el llamador inmediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-514">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="98ef8-515">Este miembro no puede usarse por código de confianza parcial o transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-515">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">
          <span data-ttu-id="98ef8-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-516">The <see cref="T:System.Threading.WaitHandle" /> to register.</span>
          </span>
          <span data-ttu-id="98ef8-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-517">Use a <see cref="T:System.Threading.WaitHandle" /> other than <see cref="T:System.Threading.Mutex" />.</span>
          </span>
        </param>
        <param name="callBack">
          <span data-ttu-id="98ef8-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-518">The delegate to call when the <c>waitObject</c> parameter is signaled.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="98ef8-519">The object that is passed to the delegate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-519">The object that is passed to the delegate.</span>
          </span>
        </param>
        <param name="millisecondsTimeOutInterval">
          <span data-ttu-id="98ef8-520">The time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-520">The time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-521">If the <c>millisecondsTimeOutInterval</c> parameter is 0 (zero), the function tests the object's state and returns immediately.</span>
          </span>
          <span data-ttu-id="98ef8-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-522">If <c>millisecondsTimeOutInterval</c> is -1, the function's time-out interval never elapses.</span>
          </span>
        </param>
        <param name="executeOnlyOnce">
          <span data-ttu-id="98ef8-523">
            <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-523">
              <see langword="true" /> to indicate that the thread will no longer wait on the <c>waitObject</c> parameter after the delegate has been called; <see langword="false" /> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="98ef8-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-524">Registers a delegate to wait for a <see cref="T:System.Threading.WaitHandle" />, specifying a 32-bit unsigned integer for the time-out in milliseconds.</span>
          </span>
          <span data-ttu-id="98ef8-525">This method does not propagate the calling stack to the worker thread.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-525">This method does not propagate the calling stack to the worker thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="98ef8-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-526">The <see cref="T:System.Threading.RegisteredWaitHandle" /> object that can be used to cancel the registered wait operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98ef8-527">A diferencia de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> no propaga la pila de llamadas al subproceso de trabajo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-527">Unlike the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method, <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> does not propagate the calling stack to the worker thread.</span></span> <span data-ttu-id="98ef8-528">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-528">This allows code to lose the calling stack and thereby to elevate its security privileges.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="98ef8-529">Usar <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> podría abrir accidentalmente una vulnerabilidad de seguridad.</span><span class="sxs-lookup"><span data-stu-id="98ef8-529">Using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> could inadvertently open up a security hole.</span></span> <span data-ttu-id="98ef8-530">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</span><span class="sxs-lookup"><span data-stu-id="98ef8-530">Code access security bases its permission checks on the permissions of all the callers on the stack.</span></span> <span data-ttu-id="98ef8-531">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</span><span class="sxs-lookup"><span data-stu-id="98ef8-531">When work is queued on a thread pool thread using <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, the stack of the thread pool thread will not have the context of the actual callers.</span></span> <span data-ttu-id="98ef8-532">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</span><span class="sxs-lookup"><span data-stu-id="98ef8-532">Malicious code might be able exploit this to avoid permission checks.</span></span>  
  
 <span data-ttu-id="98ef8-533">Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</span><span class="sxs-lookup"><span data-stu-id="98ef8-533">Using a <xref:System.Threading.Mutex> for `waitObject` does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default `WT_EXECUTEDEFAULT` flag, so each callback is dispatched on a separate thread pool thread.</span></span>  
  
 <span data-ttu-id="98ef8-534">Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera.</span><span class="sxs-lookup"><span data-stu-id="98ef8-534">When you are finished using the <xref:System.Threading.RegisteredWaitHandle> that is returned by this method, call its <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method to release references to the wait handle.</span></span> <span data-ttu-id="98ef8-535">Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`.</span><span class="sxs-lookup"><span data-stu-id="98ef8-535">We recommend that you always call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method, even if you specify `true` for `executeOnlyOnce`.</span></span> <span data-ttu-id="98ef8-536">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.</span><span class="sxs-lookup"><span data-stu-id="98ef8-536">Garbage collection works more efficiently if you call the <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> method instead of depending on the registered wait handle's finalizer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="98ef8-537">The caller does not have the required permission.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-537">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">
          <span data-ttu-id="98ef8-538">requiere plena confianza para el llamador inmediato.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-538">Requires full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="98ef8-539">Este miembro no puede usarse por código de confianza parcial o transparente.</span>
          <span class="sxs-lookup">
            <span data-stu-id="98ef8-539">This member cannot be used by partially trusted or transparent code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
  </Members>
</Type>