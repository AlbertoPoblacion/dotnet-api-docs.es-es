<Type Name="ThreadPool" FullName="System.Threading.ThreadPool">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2a9494e53c8c3c4a4db1cc0f00c52b716f7945b8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407001" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ThreadPool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ThreadPool extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ThreadPool" />
  <TypeSignature Language="VB.NET" Value="Public Class ThreadPool" />
  <TypeSignature Language="C++ CLI" Value="public ref class ThreadPool abstract sealed" />
  <TypeSignature Language="F#" Value="type ThreadPool = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Proporciona un grupo de subprocesos que pueden usarse para ejecutar tareas, exponer elementos de trabajo, procesar la E/S asincrónica, esperar en nombre de otros subprocesos y procesar temporizadores.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Muchas aplicaciones crean subprocesos que pasan mucho tiempo en el estado inactivo, esperando un evento que se produzca. Otros subprocesos pueden entrar en estado de inactividad y activarse periódicamente para sondear en busca de un cambio o actualizar información de estado. El grupo de subprocesos permite usar subprocesos más eficaz al proporcionar la aplicación con un grupo de subprocesos de trabajo administrados por el sistema. A continuación se indican algunos ejemplos de operaciones que utilizan el grupo de subprocesos:  
  
-   Cuando se crea un <xref:System.Threading.Tasks.Task> o <xref:System.Threading.Tasks.Task%601> objeto que se va a realizar algunas tareas de forma asincrónica, de forma predeterminada, la tarea está programada para ejecutarse en un subproceso del grupo.  
  
-   Temporizadores asincrónicos usar el grupo de subprocesos. Grupo de subprocesos ejecuta devoluciones de llamada desde el <xref:System.Threading.Timer?displayProperty=nameWithType> clase y provocar eventos desde la <xref:System.Timers.Timer?displayProperty=nameWithType> clase.  
  
-   Cuando se usa identificadores de espera registrada, un subproceso del sistema supervisa el estado de los identificadores de espera. Cuando se completa una operación de espera, un subproceso de trabajo del grupo de subprocesos ejecuta la función de devolución de llamada correspondiente.  
  
-   Cuando se llama a la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método para poner en cola un método para su ejecución en un subproceso del grupo. Para ello, pasando al método un <xref:System.Threading.WaitCallback> delegar.   El delegado tiene la firma  
  
    ```csharp  
    void WaitCallback(Object state)  
    ```  
  
    ```vb  
    Sub WaitCallback(state As Object)  
    ```  
  
     donde `state` es un objeto que contiene los datos que va a usar el delegado. Los datos reales se pueden pasar al delegado mediante una llamada a la <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> método.  
  
> [!NOTE]
>  Los subprocesos en el grupo de subprocesos administrados son subprocesos en segundo plano. Es decir, su <xref:System.Threading.Thread.IsBackground%2A> propiedades son `true`. Esto significa que un <xref:System.Threading.ThreadPool> subproceso no mantendrá una aplicación que se ejecuta después de que han salido de todos los subprocesos de primer plano.  
  
> [!IMPORTANT]
>  Cuando el grupo de subprocesos reutiliza un subproceso, no borra los datos de almacenamiento local de subprocesos o en los campos que se marcan con la <xref:System.ThreadStaticAttribute> atributo. Por lo tanto, cuando un método examina el almacenamiento local de subprocesos o campos que se marcan con la <xref:System.ThreadStaticAttribute> atributo, los valores que encuentra podrían quedar a través de un uso anterior de subproceso del grupo.  
  
 También puede poner en cola los elementos de trabajo que no están relacionados con una operación de espera para el grupo de subprocesos. Para solicitar que un subproceso en el grupo de subprocesos controle un elemento de trabajo, llame a la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método. Este método toma como parámetro una referencia para el método o el delegado al que llamará el subproceso seleccionado del grupo de subprocesos. No hay ninguna manera de cancelar un elemento de trabajo después de que se ha puesto en cola.  
  
 Temporizadores de la cola del temporizador y operaciones de espera registradas también utilizan el grupo de subprocesos. Sus funciones de devolución de llamada se ponen en cola para el grupo de subprocesos.  
  
 Hay un grupo de subprocesos por proceso. A partir de [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], el tamaño predeterminado del grupo de subprocesos de un proceso depende de varios factores, como el tamaño del espacio de direcciones virtuales. Un proceso puede llamar al método <xref:System.Threading.ThreadPool.GetMaxThreads%2A> para determinar el número de subprocesos. El número de subprocesos en el grupo de subprocesos puede cambiarse mediante el <xref:System.Threading.ThreadPool.SetMaxThreads%2A> método. Cada subproceso utiliza el tamaño de pila predeterminado y se ejecuta con la prioridad predeterminada.  
  
> [!NOTE]
>  Código no administrado que hospeda .NET Framework puede cambiar el tamaño del grupo de subprocesos mediante el `CorSetMaxThreads` función, definido en el archivo mscoree.h.  
  
 El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría. Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas. A partir de [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el grupo de subprocesos crea y destruye subprocesos de trabajo para optimizar el rendimiento, definido como el número de tareas que se completan por unidad de tiempo. Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.  
  
> [!NOTE]
>  Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.  
  
 Puede utilizar el método <xref:System.Threading.ThreadPool.GetMinThreads%2A> para obtener estos valores mínimos.  
  
> [!CAUTION]
>  Puede usar el <xref:System.Threading.ThreadPool.SetMinThreads%2A> método para aumentar el número mínimo de subprocesos. Sin embargo, aumentar innecesariamente estos valores puede causar problemas de rendimiento. Si se inician demasiadas tareas al mismo tiempo, puede que todas ellas parezcan funcionar con lentitud. En la mayoría de los casos, el grupo de subprocesos funciona mejor con su propio algoritmo de asignación de subprocesos.  
  
   
  
## Examples  
 En el ejemplo siguiente, el subproceso de aplicación principal se pone en cola con un método denominado `ThreadProc` para ejecutar en un subproceso del grupo, espera un segundo y, a continuación, se cierra. El `ThreadProc` método simplemente muestra un mensaje.  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 Si Comente la llamada a la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método, el subproceso principal finaliza antes de ejecutarse el método en el subproceso del grupo.  El grupo de subprocesos utiliza subprocesos en segundo plano, que no mantienen la aplicación en ejecución si han finalizado todos los subprocesos de primer plano.  (Esto es un ejemplo sencillo de una condición de carrera).  
  
 ]]></format>
    </remarks>
    <threadsafe>Este tipo es seguro para la ejecución de subprocesos.</threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="BindHandle">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Enlaza un identificador del sistema operativo a <see cref="T:System.Threading.ThreadPool" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (IntPtr osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(native int osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(IntPtr osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : nativeint -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ThreadPool.BindHandle(IntPtr) has been deprecated.  Please use ThreadPool.BindHandle(SafeHandle) instead.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="osHandle">
          <see cref="T:System.IntPtr" /> que contiene el controlador. El identificador debe haberse abierto para la E/S superpuesta en la parte no administrada.</param>
        <summary>Enlaza un identificador del sistema operativo a <see cref="T:System.Threading.ThreadPool" />.</summary>
        <returns>Es <see langword="true" /> si el identificador está enlazado; en caso contrario, es <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BindHandle">
      <MemberSignature Language="C#" Value="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool BindHandle(class System.Runtime.InteropServices.SafeHandle osHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BindHandle (osHandle As SafeHandle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool BindHandle(System::Runtime::InteropServices::SafeHandle ^ osHandle);" />
      <MemberSignature Language="F#" Value="static member BindHandle : System.Runtime.InteropServices.SafeHandle -&gt; bool" Usage="System.Threading.ThreadPool.BindHandle osHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="osHandle" Type="System.Runtime.InteropServices.SafeHandle" />
      </Parameters>
      <Docs>
        <param name="osHandle">Propiedad <see cref="T:System.Runtime.InteropServices.SafeHandle" /> que contiene el identificador del sistema operativo. El identificador debe haberse abierto para la E/S superpuesta en la parte no administrada.</param>
        <summary>Enlaza un identificador del sistema operativo a <see cref="T:System.Threading.ThreadPool" />.</summary>
        <returns>Es <see langword="true" /> si el identificador está enlazado; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El `osHandle` parámetro debe ser un <xref:Microsoft.Win32.SafeHandles.SafeFileHandle>, que deriva de la clase abstracta <xref:System.Runtime.InteropServices.SafeHandle> clase.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="osHandle" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Para poder llamar a código no administrado. Enumeración asociada: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetAvailableThreads">
      <MemberSignature Language="C#" Value="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetAvailableThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetAvailableThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetAvailableThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetAvailableThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetAvailableThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">Número de subprocesos de trabajo disponibles.</param>
        <param name="completionPortThreads">Número de subprocesos de E/S asincrónicos disponibles.</param>
        <summary>Recupera la diferencia entre el número máximo de subprocesos de grupo de subprocesos devuelto por el método <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> y el número activo actualmente.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> devuelve, la variable especificada por `workerThreads` contiene el número de subprocesos de trabajo adicionales que se pueden iniciar y la variable especificada por `completionPortThreads` contiene el número de subprocesos de E/S asincrónicos adicionales que pueden ser se inició.  
  
 Si no hay ningún subproceso disponible, las solicitudes de grupo de subprocesos adicionales permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra el número de subprocesos de trabajo y subprocesos de E/S disponibles cuando se inicia una aplicación sencilla.  
  
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/Example2.cs#2)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/Example2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxThreads">
      <MemberSignature Language="C#" Value="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMaxThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMaxThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMaxThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMaxThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">Número máximo de subprocesos de trabajo en el grupo de subprocesos.</param>
        <param name="completionPortThreads">Número máximo de subprocesos de E/S asincrónicos en el grupo de subprocesos.</param>
        <summary>Recupera el número de solicitudes al grupo de subprocesos que pueden estar activas al mismo tiempo. Todas las solicitudes que pasen de ese número permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando <xref:System.Threading.ThreadPool.GetMaxThreads%2A> devuelve, la variable especificada por `workerThreads` contiene el número máximo de subprocesos de trabajo permitidos en el grupo de subprocesos y la variable especificada por `completionPortThreads` contiene el número máximo de subprocesos de E/S asincrónicos permitidos en el grupo de subprocesos.  
  
 Puede usar el <xref:System.Threading.ThreadPool.GetAvailableThreads%2A> método para determinar el número real de subprocesos en el grupo de subprocesos en un momento dado.  
  
 Puede usar el <xref:System.Threading.ThreadPool.SetMaxThreads%2A> para establecer el número máximo de subprocesos de trabajo y subprocesos de E/S asincrónicos en el grupo de subprocesos.  
  
 Puede poner en cola como muchas solicitudes de grupo de subprocesos como permita la memoria del sistema. Si hay más solicitudes que el grupo de subprocesos, las solicitudes adicionales permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.  
  
   
  
## Examples  
 En el ejemplo de código siguiente se muestra cómo recuperar un recuento del número máximo y disponible de subprocesos en el grupo de subprocesos. Un elemento de trabajo se pone en cola que usa `FileStream` para escribir en dos archivos de forma asincrónica. Se superó el tiempo de los métodos de devolución de llamada que se superponen. Un subproceso de trabajo controla el elemento de trabajo y, dependiendo de la velocidad y el número de procesadores del equipo, uno o dos subprocesos de puerto de finalización controlan las operaciones de escritura.  
  
 [!code-cpp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetAvailableThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetAvailableThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetMinThreads">
      <MemberSignature Language="C#" Value="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetMinThreads([out] int32&amp; workerThreads, [out] int32&amp; completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub GetMinThreads (ByRef workerThreads As Integer, ByRef completionPortThreads As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void GetMinThreads([Runtime::InteropServices::Out] int % workerThreads, [Runtime::InteropServices::Out] int % completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member GetMinThreads :  *  -&gt; unit" Usage="System.Threading.ThreadPool.GetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completionPortThreads" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="workerThreads">Cuando este método vuelve, contiene el número mínimo de subprocesos de trabajo que el grupo de subprocesos crea a petición.</param>
        <param name="completionPortThreads">Cuando este método vuelve, contiene el número mínimo de subprocesos de E/S asincrónicos que el grupo de subprocesos crea a petición.</param>
        <summary>Recupera el número mínimo de subprocesos que el grupo de subprocesos crea a petición, según se realizan nuevas solicitudes, antes de conmutar a un algoritmo para administrar la creación y destrucción de subprocesos.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría. De forma predeterminada, el número mínimo de subprocesos se establece en el número de procesadores en un sistema. Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas. A partir del [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el grupo de subprocesos crea y destruye subprocesos para optimizar el rendimiento, que se define como el número de tareas que se completan por unidad de tiempo. Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.  
  
> [!NOTE]
>  Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.  
  
   
  
## Examples  
 En el ejemplo siguiente se establece el número mínimo de subprocesos de trabajo a cuatro y conserva el valor original para el número mínimo de subprocesos de finalización de E/S asincrónicos.  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="QueueUserWorkItem">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pone en cola un método para su ejecución. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem callBack" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <see cref="T:System.Threading.WaitCallback" /> que representa el método que se va a ejecutar.</param>
        <summary>Pone en cola un método para su ejecución. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
        <returns>
          <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Puede colocar los datos requeridos por el método en cola en los campos de instancia de la clase en la que se define el método, o puede usar el <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29> sobrecarga que acepta un objeto que contiene los datos necesarios.  
  
> [!NOTE]
>  Los usuarios de Visual Basic pueden omitir el <xref:System.Threading.WaitCallback> constructor y simplemente, usar el `AddressOf` operador cuando se pasa el método de devolución de llamada a <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic llama automáticamente al constructor de delegado correcto.  
  
## <a name="version-information"></a>Información de versión  
 En .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método. En versiones anteriores, no se propaga la información de entidad de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se usa el <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29> sobrecarga del método para poner en cola una tarea, que se representa mediante el `ThreadProc` método, se debe ejecutar cuando hay disponible un subproceso. No hay información de la tarea se suministra con esta sobrecarga. Por lo tanto, la información que está disponible para el `ThreadProc` método se limita al objeto al que pertenece el método.  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callBack" /> es <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) está en un host y el host no admite esta acción.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool QueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <see cref="T:System.Threading.WaitCallback" /> que representa el método que se va a ejecutar.</param>
        <param name="state">Objeto que contiene los datos que va a usar el método.</param>
        <summary>Pone un método en cola para su ejecución y especifica un objeto que contiene los datos que debe usar el método. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
        <returns>
          <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el método de devolución de llamada requiere datos complejos, puede definir una clase para contener los datos.  
  
> [!NOTE]
>  Los usuarios de Visual Basic pueden omitir el <xref:System.Threading.WaitCallback> constructor y simplemente, usar el `AddressOf` operador cuando se pasa el método de devolución de llamada a <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>. Visual Basic llama automáticamente al constructor de delegado correcto.  
  
## <a name="version-information"></a>Información de versión  
 En .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método. En versiones anteriores, no se propaga la información de entidad de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo crear un objeto que contiene información de la tarea. También muestra cómo pasar ese objeto a una tarea que se pone en cola para su ejecución por el grupo de subprocesos.  
  
 [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool QueueUserWorkItem1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) está en un host y el host no admite esta acción.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callBack" /> es <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueUserWorkItem&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static bool QueueUserWorkItem&lt;TState&gt; (Action&lt;TState&gt; callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool QueueUserWorkItem&lt;TState&gt;(class System.Action`1&lt;!!TState&gt; callBack, !!TState state, bool preferLocal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function QueueUserWorkItem(Of TState) (callBack As Action(Of TState), state As TState, preferLocal As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static bool QueueUserWorkItem(Action&lt;TState&gt; ^ callBack, TState state, bool preferLocal);" />
      <MemberSignature Language="F#" Value="static member QueueUserWorkItem : Action&lt;'State&gt; * 'State * bool -&gt; bool" Usage="System.Threading.ThreadPool.QueueUserWorkItem (callBack, state, preferLocal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callBack" Type="System.Action&lt;TState&gt;" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="preferLocal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="callBack">To be added.</param>
        <param name="state">To be added.</param>
        <param name="preferLocal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un delegado que está esperando a una clase <see cref="T:System.Threading.WaitHandle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
        <param name="callBack">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <c>waitObject</c> esté marcado.</param>
        <param name="state">Objeto que se pasa al delegado.</param>
        <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <c>millisecondsTimeOutInterval</c> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente. Si <c>millisecondsTimeOutInterval</c> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
        <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <c>waitObject</c> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
        <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits con signo como tiempo de espera, en milisegundos.</summary>
        <returns>
          <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera. Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`. Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.  
  
 El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método pone en cola el delegado especificado en el grupo de subprocesos. Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:  
  
-   El objeto especificado está en el estado señalado.  
  
-   Se agota el tiempo de espera.  
  
 El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método comprueba el estado actual del objeto especificado <xref:System.Threading.WaitHandle>. Si el estado del objeto no está señalado, el método registra una operación de espera. La operación de espera se realiza mediante un subproceso del grupo de subprocesos. Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera. Si el `timeOutInterval` parámetro no es 0 (cero) y la `executeOnlyOnce` parámetro es `false`, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.  
  
> [!IMPORTANT]
>  Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo. En lugar de un <xref:System.Threading.Mutex>, use un <xref:System.Threading.Semaphore> con un recuento máximo de 1.  
  
 Para cancelar la operación de espera, llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método.  
  
 El subproceso espera usa Win32 `WaitForMultipleObjects` función para supervisar las operaciones de espera registrada. Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, debe duplicar el identificador utilizando Win32 `DuplicateHandle` función. Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.  
  
 La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse. Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla. Por ejemplo, el recuento de un semáforo disminuye en uno.  
  
## <a name="version-information"></a>Información de versión  
 A partir de .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método. En versiones anteriores, no se propaga la información de entidad de seguridad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
        <param name="callBack">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <c>waitObject</c> esté marcado.</param>
        <param name="state">Objeto que se ha pasado al delegado.</param>
        <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <c>millisecondsTimeOutInterval</c> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente. Si <c>millisecondsTimeOutInterval</c> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
        <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <c>waitObject</c> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
        <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 64 bits con signo como tiempo de espera, en milisegundos.</summary>
        <returns>
          <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera. Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`. Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.  
  
 El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método pone en cola el delegado especificado en el grupo de subprocesos. Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:  
  
-   El objeto especificado está en el estado señalado.  
  
-   Se agota el tiempo de espera.  
  
 El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método comprueba el estado actual del objeto especificado <xref:System.Threading.WaitHandle>. Si el estado del objeto no está señalado, el método registra una operación de espera. La operación de espera se realiza mediante un subproceso del grupo de subprocesos. Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera. Si el `timeOutInterval` parámetro no es 0 (cero) y la `executeOnlyOnce` parámetro es `false`, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.  
  
> [!IMPORTANT]
>  Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo. En lugar de un <xref:System.Threading.Mutex>, use un <xref:System.Threading.Semaphore> con un recuento máximo de 1.  
  
 Para cancelar la operación de espera, llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método.  
  
 El subproceso espera usa Win32 `WaitForMultipleObjects` función para supervisar las operaciones de espera registrada. Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, debe duplicar el identificador utilizando Win32 `DuplicateHandle` función. Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.  
  
 La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse. Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla. Por ejemplo, el recuento de un semáforo disminuye en uno.  
  
## <a name="version-information"></a>Información de versión  
 A partir de .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método. En versiones anteriores, no se propaga la información de entidad de seguridad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
        <param name="callBack">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <c>waitObject</c> esté marcado.</param>
        <param name="state">Objeto que se ha pasado al delegado.</param>
        <param name="timeout">Tiempo de espera representado por <see cref="T:System.TimeSpan" />. Si <c>timeout</c> es 0 (cero), la función comprueba el estado del objeto y devuelve un resultado inmediatamente. Si <c>timeout</c> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
        <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <c>waitObject</c> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
        <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un valor <see cref="T:System.TimeSpan" /> como tiempo de espera.</summary>
        <returns>
          <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera. Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`. Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.  
  
 El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método pone en cola el delegado especificado en el grupo de subprocesos. Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:  
  
-   El objeto especificado está en el estado señalado.  
  
-   Se agota el tiempo de espera.  
  
 El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método comprueba el estado actual del objeto especificado <xref:System.Threading.WaitHandle>. Si el estado del objeto no está señalado, el método registra una operación de espera. La operación de espera se realiza mediante un subproceso del grupo de subprocesos. Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera. Si el `timeOutInterval` parámetro no es 0 (cero) y la `executeOnlyOnce` parámetro es `false`, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.  
  
> [!IMPORTANT]
>  Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo. En lugar de un <xref:System.Threading.Mutex>, use un <xref:System.Threading.Semaphore> con un recuento máximo de 1.  
  
 Para cancelar la operación de espera, llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método.  
  
 El subproceso espera usa Win32 `WaitForMultipleObjects` función para supervisar las operaciones de espera registrada. Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, debe duplicar el identificador utilizando Win32 `DuplicateHandle` función. Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.  
  
 La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse. Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla. Por ejemplo, el recuento de un semáforo disminuye en uno.  
  
## <a name="version-information"></a>Información de versión  
 A partir de .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método. En versiones anteriores, no se propaga la información de entidad de seguridad.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="timeout" /> es menor que -1.</exception>
        <exception cref="T:System.NotSupportedException">El valor del parámetro <paramref name="timeout" /> es mayor que el valor de la propiedad <see cref="F:System.Int32.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ RegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member RegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.RegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
        <param name="callBack">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <c>waitObject</c> esté marcado.</param>
        <param name="state">Objeto que se ha pasado al delegado.</param>
        <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <c>millisecondsTimeOutInterval</c> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente. Si <c>millisecondsTimeOutInterval</c> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
        <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <c>waitObject</c> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
        <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits sin signo como tiempo de espera, en milisegundos.</summary>
        <returns>
          <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera. Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`. Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.  
  
 El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método pone en cola el delegado especificado en el grupo de subprocesos. Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:  
  
-   El objeto especificado está en el estado señalado.  
  
-   Se agota el tiempo de espera.  
  
 El <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método comprueba el estado actual del objeto especificado <xref:System.Threading.WaitHandle>. Si el estado del objeto no está señalado, el método registra una operación de espera. La operación de espera se realiza mediante un subproceso del grupo de subprocesos. Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera. Si el `timeOutInterval` parámetro no es 0 (cero) y la `executeOnlyOnce` parámetro es `false`, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.  
  
> [!IMPORTANT]
>  Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo. En lugar de un <xref:System.Threading.Mutex>, use un <xref:System.Threading.Semaphore> con un recuento máximo de 1.  
  
 Para cancelar la operación de espera, llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método.  
  
 El subproceso espera usa Win32 `WaitForMultipleObjects` función para supervisar las operaciones de espera registrada. Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, debe duplicar el identificador utilizando Win32 `DuplicateHandle` función. Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.  
  
 La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse. Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla. Por ejemplo, el recuento de un semáforo disminuye en uno.  
  
## <a name="version-information"></a>Información de versión  
 A partir de .NET Framework versión 2.0, el <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método. En versiones anteriores, no se propaga la información de entidad de seguridad.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo utilizar el <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método para ejecutar un método de devolución de llamada especificado cuando se señala a un controlador de espera especificado. En este ejemplo, el método de devolución de llamada es `WaitProc`, y el identificador de espera es un <xref:System.Threading.AutoResetEvent>.  
  
 El ejemplo define un `TaskInfo` clase para contener la información que se pasa a la devolución de llamada cuando se ejecuta. El ejemplo se crea un `TaskInfo` de objeto y lo asigna algunos datos de cadena. El <xref:System.Threading.RegisteredWaitHandle> devuelto por la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método se asigna a la `Handle` campo de la `TaskInfo` objeto para que el método de devolución de llamada no tiene acceso a la <xref:System.Threading.RegisteredWaitHandle>.  
  
 Además de especificar `TaskInfo` como el objeto que se va a pasar al método de devolución de llamada, la llamada a la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método especifica la <xref:System.Threading.AutoResetEvent> que la tarea va a esperar, un <xref:System.Threading.WaitOrTimerCallback> delegado que representa el `WaitProc` método de devolución de llamada, un intervalo de tiempo de espera de un segundo y varias devoluciones de llamada.  
  
 Cuando el subproceso principal señala el <xref:System.Threading.AutoResetEvent> mediante una llamada a su <xref:System.Threading.EventWaitHandle.Set%2A> método, el <xref:System.Threading.WaitOrTimerCallback> se invoca el delegado. El `WaitProc` método pruebas <xref:System.Threading.RegisteredWaitHandle> para determinar si se produjo un tiempo de espera. Si la devolución de llamada se invocó porque se señaló el identificador de espera, el `WaitProc` método anula el registro del <xref:System.Threading.RegisteredWaitHandle>, deteniendo las devoluciones de llamada adicionales. En el caso de un tiempo de espera, la tarea sigue a la espera. El `WaitProc` método termina con la impresión de un mensaje en la consola.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetMaxThreads">
      <MemberSignature Language="C#" Value="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMaxThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMaxThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMaxThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMaxThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMaxThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">Número máximo de subprocesos de trabajo en el grupo de subprocesos.</param>
        <param name="completionPortThreads">Número máximo de subprocesos de E/S asincrónicos en el grupo de subprocesos.</param>
        <summary>Establece el número de solicitudes al grupo de subprocesos que pueden estar activas al mismo tiempo. Todas las solicitudes que pasen de ese número permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</summary>
        <returns>Es <see langword="true" /> si el cambio se realiza correctamente; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 No se puede establecer el número máximo de subprocesos de trabajo o subprocesos de finalización de E/S en un número menor que el número de procesadores en el equipo. Para determinar cuántos procesadores están presentes, recuperar el valor de la <xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType> propiedad. Además, no se puede establecer el número máximo de subprocesos de trabajo o subprocesos de finalización de E/S en un número menor que el correspondiente número mínimo de subprocesos de trabajo o subprocesos de finalización de E/S. Para determinar el tamaño del grupo de subprocesos mínimos, llame a la <xref:System.Threading.ThreadPool.GetMinThreads%2A> método.  
  
 Si se hospeda common language runtime, por ejemplo mediante Internet Information Services (IIS) o SQL Server, el host puede limitar o impedir cambios en el tamaño del grupo de subprocesos.  
  
 Tenga cuidado al cambiar el número máximo de subprocesos en el grupo de subprocesos. Mientras que podría beneficiarse del código, los cambios pueden tener un efecto adverso en bibliotecas de código que usar.  
  
 Establecer el tamaño del grupo de subprocesos demasiado grande puede causar problemas de rendimiento. Si hay demasiados subprocesos se ejecutan al mismo tiempo, el cambio de la tarea se convierte sobrecarga en un factor importante.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la capacidad para controlar los subprocesos. Valor del permiso: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="SetMinThreads">
      <MemberSignature Language="C#" Value="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetMinThreads(int32 workerThreads, int32 completionPortThreads) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetMinThreads (workerThreads As Integer, completionPortThreads As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetMinThreads(int workerThreads, int completionPortThreads);" />
      <MemberSignature Language="F#" Value="static member SetMinThreads : int * int -&gt; bool" Usage="System.Threading.ThreadPool.SetMinThreads (workerThreads, completionPortThreads)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerThreads" Type="System.Int32" />
        <Parameter Name="completionPortThreads" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="workerThreads">Número mínimo de subprocesos de trabajo que el grupo de subprocesos crea a petición.</param>
        <param name="completionPortThreads">Número mínimo de subprocesos de E/S asincrónicos que el grupo de subprocesos crea a petición.</param>
        <summary>Establece el número mínimo de subprocesos que el grupo de subprocesos crea a petición, según se realizan nuevas solicitudes, antes de conmutar a un algoritmo para administrar la creación y destrucción de subprocesos.</summary>
        <returns>Es <see langword="true" /> si el cambio se realiza correctamente; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría. Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas. A partir del [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], el grupo de subprocesos crea y destruye subprocesos para optimizar el rendimiento, que se define como el número de tareas que se completan por unidad de tiempo. Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.  
  
 Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.  
  
 Si especifica un número negativo o un número mayor que el número máximo de subprocesos del grupo de subprocesos activos (obtenido mediante <xref:System.Threading.ThreadPool.GetMaxThreads%2A>), <xref:System.Threading.ThreadPool.SetMinThreads%2A> devuelve `false` y no cambia ninguno de los valores mínimos.  
  
> [!CAUTION]
>  De forma predeterminada, el número mínimo de subprocesos se establece en el número de procesadores en un sistema. Puede usar el <xref:System.Threading.ThreadPool.SetMinThreads%2A> método para aumentar la ofthreads número mínimo. Sin embargo, aumentar innecesariamente estos valores puede causar problemas de rendimiento. Si se inician demasiadas tareas al mismo tiempo, puede que todas ellas parezcan funcionar con lentitud. En la mayoría de los casos, el grupo de subprocesos funciona mejor con su propio algoritmo de asignación de subprocesos. Reducir al mínimo a menos que el número de procesadores también puede afectar al rendimiento.  
  
   
  
## Examples  
 En el ejemplo siguiente se establece el número mínimo de subprocesos de trabajo a cuatro y conserva el valor original para el número mínimo de subprocesos de finalización de E/S asincrónicos.  
  
 [!code-cpp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool.GetSetMinThreads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool.GetSetMinThreads/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">la capacidad para controlar los subprocesos. Valor del permiso: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /></permission>
        <altmember cref="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" />
        <altmember cref="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueNativeOverlapped">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueNativeOverlapped(valuetype System.Threading.NativeOverlapped* overlapped) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueNativeOverlapped(System::Threading::NativeOverlapped* overlapped);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueNativeOverlapped : nativeptr&lt;System.Threading.NativeOverlapped&gt; -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueNativeOverlapped overlapped" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlapped" Type="System.Threading.NativeOverlapped*" />
      </Parameters>
      <Docs>
        <param name="overlapped">Estructura <see cref="T:System.Threading.NativeOverlapped" /> que se va a poner en cola.</param>
        <summary>Pone en cola una operación de E/S superpuesta para que se ejecute.</summary>
        <returns>Es <see langword="true" /> si la operación se puso correctamente en la cola de un puerto de finalización de E/S; en caso contrario, es <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Para obtener información acerca de cómo utilizar Win32 nativo E/S superpuesta, vea el <xref:System.Threading.Overlapped> (clase), el <xref:System.Threading.NativeOverlapped> estructura y la `OVERLAPPED` estructura en el SDK de plataforma de Win32.  
  
> [!CAUTION]
>  Mediante el <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A> método podría abrir accidentalmente una vulnerabilidad de seguridad. Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila. Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A>, la pila del subproceso del grupo no tiene el contexto de los llamadores reales. Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeQueueUserWorkItem">
      <MemberSignature Language="C#" Value="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool UnsafeQueueUserWorkItem(class System.Threading.WaitCallback callBack, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeQueueUserWorkItem (callBack As WaitCallback, state As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback ^ callBack, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="static member UnsafeQueueUserWorkItem : System.Threading.WaitCallback * obj -&gt; bool" Usage="System.Threading.ThreadPool.UnsafeQueueUserWorkItem (callBack, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBack" Type="System.Threading.WaitCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callBack">
          <see cref="T:System.Threading.WaitCallback" /> que representa el delegado al que se va a invocar cuando un subproceso del grupo de subprocesos seleccione el elemento de trabajo.</param>
        <param name="state">Objeto que se pasa al delegado cuando se atiende desde el grupo de subprocesos.</param>
        <summary>Pone en cola el delegado especificado en el grupo de subprocesos, pero no propaga la pila de llamadas al subproceso de trabajo.</summary>
        <returns>
          <see langword="true" /> si el método se ejecuta correctamente; se produce la excepción <see cref="T:System.OutOfMemoryException" /> si el elemento de trabajo no se puede poner en la cola.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la <xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> método <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> no propaga la pila de llamadas al subproceso de trabajo. Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.  
  
> [!CAUTION]
>  Usar <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A> podría abrir accidentalmente una vulnerabilidad de seguridad. Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila. Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales. Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <exception cref="T:System.ApplicationException">Se ha encontrado una condición de falta de memoria.</exception>
        <exception cref="T:System.OutOfMemoryException">No se pudo poner en la cola el elemento de trabajo.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callBack" /> es <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnsafeRegisterWaitForSingleObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Registra un delegado para que espere a <see cref="T:System.Threading.WaitHandle" />, pero no propaga la pila de llamadas al subproceso de trabajo.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Integer, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
        <param name="callBack">Delegado al que se llamará cuando el parámetro <c>waitObject</c> esté marcado.</param>
        <param name="state">Objeto que se pasa al delegado.</param>
        <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <c>millisecondsTimeOutInterval</c> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente. Si <c>millisecondsTimeOutInterval</c> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
        <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <c>waitObject</c> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
        <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y usa un entero de 32 bits con signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
        <returns>Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> no propaga la pila de llamadas al subproceso de trabajo. Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.  
  
> [!CAUTION]
>  Usar <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> podría abrir accidentalmente una vulnerabilidad de seguridad. Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila. Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales. Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.  
  
 Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.  
  
 Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera. Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`. Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, int64 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As Long, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * int64 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.Int64" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
        <param name="callBack">Delegado al que se llamará cuando el parámetro <c>waitObject</c> esté marcado.</param>
        <param name="state">Objeto que se pasa al delegado.</param>
        <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <c>millisecondsTimeOutInterval</c> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente. Si <c>millisecondsTimeOutInterval</c> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
        <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <c>waitObject</c> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
        <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 64 bits con signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
        <returns>Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> no propaga la pila de llamadas al subproceso de trabajo. Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.  
  
> [!CAUTION]
>  Usar <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> podría abrir accidentalmente una vulnerabilidad de seguridad. Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila. Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales. Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.  
  
 Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.  
  
 Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera. Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`. Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, valuetype System.TimeSpan timeout, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, timeout As TimeSpan, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, TimeSpan timeout, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * TimeSpan * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, timeout, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
        <param name="callBack">Delegado al que se llamará cuando el parámetro <c>waitObject</c> esté marcado.</param>
        <param name="state">Objeto que se pasa al delegado.</param>
        <param name="timeout">Tiempo de espera representado por <see cref="T:System.TimeSpan" />. Si <c>timeout</c> es 0 (cero), la función comprueba el estado del objeto y devuelve un resultado inmediatamente. Si <c>timeout</c> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
        <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <c>waitObject</c> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
        <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un valor <see cref="T:System.TimeSpan" /> como tiempo de espera. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
        <returns>Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> no propaga la pila de llamadas al subproceso de trabajo. Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.  
  
> [!CAUTION]
>  Usar <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> podría abrir accidentalmente una vulnerabilidad de seguridad. Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila. Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales. Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.  
  
 Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.  
  
 Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera. Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`. Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="timeout" /> es menor que -1.</exception>
        <exception cref="T:System.NotSupportedException">El valor del parámetro <paramref name="timeout" /> es mayor que el valor de la propiedad <see cref="F:System.Int32.MaxValue" />.</exception>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
    <Member MemberName="UnsafeRegisterWaitForSingleObject">
      <MemberSignature Language="C#" Value="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject(class System.Threading.WaitHandle waitObject, class System.Threading.WaitOrTimerCallback callBack, object state, unsigned int32 millisecondsTimeOutInterval, bool executeOnlyOnce) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnsafeRegisterWaitForSingleObject (waitObject As WaitHandle, callBack As WaitOrTimerCallback, state As Object, millisecondsTimeOutInterval As UInteger, executeOnlyOnce As Boolean) As RegisteredWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::RegisteredWaitHandle ^ UnsafeRegisterWaitForSingleObject(System::Threading::WaitHandle ^ waitObject, System::Threading::WaitOrTimerCallback ^ callBack, System::Object ^ state, System::UInt32 millisecondsTimeOutInterval, bool executeOnlyOnce);" />
      <MemberSignature Language="F#" Value="static member UnsafeRegisterWaitForSingleObject : System.Threading.WaitHandle * System.Threading.WaitOrTimerCallback * obj * uint32 * bool -&gt; System.Threading.RegisteredWaitHandle" Usage="System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject (waitObject, callBack, state, millisecondsTimeOutInterval, executeOnlyOnce)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.ThreadPool</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.RegisteredWaitHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitObject" Type="System.Threading.WaitHandle" />
        <Parameter Name="callBack" Type="System.Threading.WaitOrTimerCallback" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="millisecondsTimeOutInterval" Type="System.UInt32" />
        <Parameter Name="executeOnlyOnce" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
        <param name="callBack">Delegado al que se llamará cuando el parámetro <c>waitObject</c> esté marcado.</param>
        <param name="state">Objeto que se pasa al delegado.</param>
        <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <c>millisecondsTimeOutInterval</c> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente. Si <c>millisecondsTimeOutInterval</c> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
        <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <c>waitObject</c> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
        <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits sin signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
        <returns>Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A diferencia de la <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> método <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> no propaga la pila de llamadas al subproceso de trabajo. Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.  
  
> [!CAUTION]
>  Usar <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A> podría abrir accidentalmente una vulnerabilidad de seguridad. Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila. Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales. Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.  
  
 Con un <xref:System.Threading.Mutex> para `waitObject` no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado `WT_EXECUTEDEFAULT` marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.  
  
 Cuando haya terminado con el <xref:System.Threading.RegisteredWaitHandle> devuelto por este método, llame a su <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método para liberar las referencias al identificador de espera. Se recomienda que siempre llame a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> método, incluso si se especifica `true` para `executeOnlyOnce`. Recolección de elementos no utilizados funciona más eficazmente si se llama a la <xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType> en lugar del método según el finalizador del controlador de espera registrada.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requiere plena confianza para el llamador inmediato. Este miembro no puede usarse por código de confianza parcial o transparente.</permission>
      </Docs>
    </Member>
  </Members>
</Type>