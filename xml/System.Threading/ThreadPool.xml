<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ThreadPool.xml" source-language="en-US" target-language="es-ES">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac550de54f2e0cde589b4af1c454e85fed39c9f40df.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">50de54f2e0cde589b4af1c454e85fed39c9f40df</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.</source>
          <target state="translated">Proporciona un grupo de subprocesos que pueden usarse para ejecutar tareas, exponer elementos de trabajo, procesar la E/S asincrónica, esperar en nombre de otros subprocesos y procesar temporizadores.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Many applications create threads that spend a great deal of time in the sleeping state, waiting for an event to occur.</source>
          <target state="translated">Muchas aplicaciones crean subprocesos que pasan mucho tiempo en el estado inactivo, esperando un evento que se produzca.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Other threads might enter a sleeping state only to be awakened periodically to poll for a change or update status information.</source>
          <target state="translated">Otros subprocesos pueden entrar en estado de inactividad y activarse periódicamente para sondear en busca de un cambio o actualizar información de estado.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool enables you to use threads more efficiently by providing your application with a pool of worker threads that are managed by the system.</source>
          <target state="translated">El grupo de subprocesos permite usar subprocesos más eficaz al proporcionar la aplicación con un grupo de subprocesos de trabajo administrados por el sistema.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Examples of operations that use thread pool threads include the following:</source>
          <target state="translated">A continuación se indican algunos ejemplos de operaciones que utilizan el grupo de subprocesos:</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you create a <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> or <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object to perform some task asynchronously, by default the task is scheduled to run on a thread pool thread.</source>
          <target state="translated">Cuando se crea un <ph id="ph1">&lt;xref:System.Threading.Tasks.Task&gt;</ph> o <ph id="ph2">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> objeto que se va a realizar algunas tareas de forma asincrónica, de forma predeterminada, la tarea está programada para ejecutarse en un subproceso del grupo.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Asynchronous timers use the thread pool.</source>
          <target state="translated">Temporizadores asincrónicos usar el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Thread pool threads execute callbacks from the <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> class and raise events from the <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> class.</source>
          <target state="translated">Grupo de subprocesos ejecuta devoluciones de llamada desde el <ph id="ph1">&lt;xref:System.Threading.Timer?displayProperty=nameWithType&gt;</ph> clase y provocar eventos desde la <ph id="ph2">&lt;xref:System.Timers.Timer?displayProperty=nameWithType&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you use registered wait handles, a system thread monitors the status of the wait handles.</source>
          <target state="translated">Cuando se usa identificadores de espera registrada, un subproceso del sistema supervisa el estado de los identificadores de espera.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a wait operation completes, a worker thread from the thread pool executes the corresponding callback function.</source>
          <target state="translated">Cuando se completa una operación de espera, un subproceso de trabajo del grupo de subprocesos ejecuta la función de devolución de llamada correspondiente.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When you call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method to queue a method for execution on a thread pool thread.</source>
          <target state="translated">Cuando se llama a la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> método para poner en cola un método para su ejecución en un subproceso del grupo.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You do this by passing the method a <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegate.</source>
          <target state="translated">Para ello, pasando al método un <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> delegar.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The delegate has the signature</source>
          <target state="translated">El delegado tiene la firma</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>where <ph id="ph1">`state`</ph> is an object that contains data to be used by the delegate.</source>
          <target state="translated">donde <ph id="ph1">`state`</ph> es un objeto que contiene los datos que va a usar el delegado.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The actual data can be passed to the delegate by calling the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> method.</source>
          <target state="translated">Los datos reales se pueden pasar al delegado mediante una llamada a la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The threads in the managed thread pool are background threads.</source>
          <target state="translated">Los subprocesos en el grupo de subprocesos administrados son subprocesos en segundo plano.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>That is, their <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> properties are <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Es decir, su <ph id="ph1">&lt;xref:System.Threading.Thread.IsBackground%2A&gt;</ph> propiedades son <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This means that a <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> thread will not keep an application running after all foreground threads have exited.</source>
          <target state="translated">Esto significa que un <ph id="ph1">&lt;xref:System.Threading.ThreadPool&gt;</ph> subproceso no mantendrá una aplicación que se ejecuta después de que han salido de todos los subprocesos de primer plano.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When the thread pool reuses a thread, it does not clear the data in thread local storage or in fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute.</source>
          <target state="translated">Cuando el grupo de subprocesos reutiliza un subproceso, no borra los datos de almacenamiento local de subprocesos o en los campos que se marcan con la <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> atributo.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Therefore, when a method examines thread local storage or fields that are marked with the <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> attribute, the values it finds might be left over from an earlier use of the thread pool thread.</source>
          <target state="translated">Por lo tanto, cuando un método examina el almacenamiento local de subprocesos o campos que se marcan con la <ph id="ph1">&lt;xref:System.ThreadStaticAttribute&gt;</ph> atributo, los valores que encuentra podrían quedar a través de un uso anterior de subproceso del grupo.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can also queue work items that are not related to a wait operation to the thread pool.</source>
          <target state="translated">También puede poner en cola los elementos de trabajo que no están relacionados con una operación de espera para el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>To request that a work item be handled by a thread in the thread pool, call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">Para solicitar que un subproceso en el grupo de subprocesos controle un elemento de trabajo, llame a la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This method takes as a parameter a reference to the method or delegate that will be called by the thread selected from the thread pool.</source>
          <target state="translated">Este método toma como parámetro una referencia para el método o el delegado al que llamará el subproceso seleccionado del grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is no way to cancel a work item after it has been queued.</source>
          <target state="translated">No hay ninguna manera de cancelar un elemento de trabajo después de que se ha puesto en cola.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Timer-queue timers and registered wait operations also use the thread pool.</source>
          <target state="translated">Temporizadores de la cola del temporizador y operaciones de espera registradas también utilizan el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Their callback functions are queued to the thread pool.</source>
          <target state="translated">Sus funciones de devolución de llamada se ponen en cola para el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>There is one thread pool per process.</source>
          <target state="translated">Hay un grupo de subprocesos por proceso.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the default size of the thread pool for a process depends on several factors, such as the size of the virtual address space.</source>
          <target state="translated">A partir de <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, el tamaño predeterminado del grupo de subprocesos de un proceso depende de varios factores, como el tamaño del espacio de direcciones virtuales.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>A process can call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> method to determine the number of threads.</source>
          <target state="translated">Un proceso puede llamar al método <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> para determinar el número de subprocesos.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The number of threads in the thread pool can be changed by using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> method.</source>
          <target state="translated">El número de subprocesos en el grupo de subprocesos puede cambiarse mediante el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Each thread uses the default stack size and runs at the default priority.</source>
          <target state="translated">Cada subproceso utiliza el tamaño de pila predeterminado y se ejecuta con la prioridad predeterminada.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Unmanaged code that hosts the .NET Framework can change the size of the thread pool by using the <ph id="ph1">`CorSetMaxThreads`</ph> function, defined in the mscoree.h file.</source>
          <target state="translated">Código no administrado que hospeda .NET Framework puede cambiar el tamaño del grupo de subprocesos mediante el <ph id="ph1">`CorSetMaxThreads`</ph> función, definido en el archivo mscoree.h.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When a minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys worker threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">A partir de <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, el grupo de subprocesos crea y destruye subprocesos de trabajo para optimizar el rendimiento, definido como el número de tareas que se completan por unidad de tiempo.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method to obtain these minimum values.</source>
          <target state="translated">Puede utilizar el método <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> para obtener estos valores mínimos.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number of threads.</source>
          <target state="translated">Puede usar el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> método para aumentar el número mínimo de subprocesos.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">Sin embargo, aumentar innecesariamente estos valores puede causar problemas de rendimiento.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Si se inician demasiadas tareas al mismo tiempo, puede que todas ellas parezcan funcionar con lentitud.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In most cases the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">En la mayoría de los casos, el grupo de subprocesos funciona mejor con su propio algoritmo de asignación de subprocesos.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>In the following example, the main application thread  queues a method named <ph id="ph1">`ThreadProc`</ph> to execute on a thread pool thread, sleeps for one second, and then exits.</source>
          <target state="translated">En el ejemplo siguiente, el subproceso de aplicación principal se pone en cola con un método denominado <ph id="ph1">`ThreadProc`</ph> para ejecutar en un subproceso del grupo, espera un segundo y, a continuación, se cierra.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The <ph id="ph1">`ThreadProc`</ph> method simply displays a message.</source>
          <target state="translated">El <ph id="ph1">`ThreadProc`</ph> método simplemente muestra un mensaje.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>If you comment out the call to the <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> method, the main thread exits before         method runs on the thread pool thread.</source>
          <target state="translated">Si Comente la llamada a la <ph id="ph1">&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType&gt;</ph> método, el subproceso principal finaliza antes de ejecutarse el método en el subproceso del grupo.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>The thread pool uses background         threads, which do not keep the application running if all foreground threads have terminated.</source>
          <target state="translated">El grupo de subprocesos utiliza subprocesos en segundo plano, que no mantienen la aplicación en ejecución si han finalizado todos los subprocesos de primer plano.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>(This         is a simple example of a race condition.)</source>
          <target state="translated">(Esto es un ejemplo sencillo de una condición de carrera).</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Threading.ThreadPool">
          <source>This type is thread safe.</source>
          <target state="translated">Este tipo es seguro para la ejecución de subprocesos.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Enlaza un identificador del sistema operativo a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>An <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> that holds the handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> que contiene el controlador.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">El identificador debe haberse abierto para la E/S superpuesta en la parte no administrada.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Enlaza un identificador del sistema operativo a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el identificador está enlazado; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">El llamador no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">Para poder llamar a código no administrado.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> that holds the operating system handle.</source>
          <target state="translated">Propiedad <ph id="ph1">&lt;see cref="T:System.Runtime.InteropServices.SafeHandle" /&gt;</ph> que contiene el identificador del sistema operativo.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The handle must have been opened for overlapped I/O on the unmanaged side.</source>
          <target state="translated">El identificador debe haberse abierto para la E/S superpuesta en la parte no administrada.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Binds an operating system handle to the <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</source>
          <target state="translated">Enlaza un identificador del sistema operativo a <ph id="ph1">&lt;see cref="T:System.Threading.ThreadPool" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the handle is bound; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el identificador está enlazado; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>The <ph id="ph1">`osHandle`</ph> parameter should be a <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, which derives from the abstract <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> class.</source>
          <target state="translated">El <ph id="ph1">`osHandle`</ph> parámetro debe ser un <ph id="ph2">&lt;xref:Microsoft.Win32.SafeHandles.SafeFileHandle&gt;</ph>, que deriva de la clase abstracta <ph id="ph3">&lt;xref:System.Runtime.InteropServices.SafeHandle&gt;</ph> clase.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="osHandle" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">Para poder llamar a código no administrado.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</source>
          <target state="translated">Enumeración asociada: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available worker threads.</source>
          <target state="translated">Número de subprocesos de trabajo disponibles.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The number of available asynchronous I/O threads.</source>
          <target state="translated">Número de subprocesos de E/S asincrónicos disponibles.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the difference between the maximum number of thread pool threads returned by the <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> method, and the number currently active.</source>
          <target state="translated">Recupera la diferencia entre el número máximo de subprocesos de grupo de subprocesos devuelto por el método <ph id="ph1">&lt;see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /&gt;</ph> y el número activo actualmente.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the number of additional worker threads that can be started, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the number of additional asynchronous I/O threads that can be started.</source>
          <target state="translated">Cuando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> devuelve, la variable especificada por <ph id="ph2">`workerThreads`</ph> contiene el número de subprocesos de trabajo adicionales que se pueden iniciar y la variable especificada por <ph id="ph3">`completionPortThreads`</ph> contiene el número de subprocesos de E/S asincrónicos adicionales que se pueden iniciar.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>If there are no available threads, additional thread pool requests remain queued until thread pool threads become available.</source>
          <target state="translated">Si no hay ningún subproceso disponible, las solicitudes de grupo de subprocesos adicionales permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
          <source>The following example displays the number of worker threads and I/O threads available when a simple app is started.</source>
          <target state="translated">En el ejemplo siguiente se muestra el número de subprocesos de trabajo y subprocesos de E/S disponibles cuando se inicia una aplicación sencilla.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">Número máximo de subprocesos de trabajo en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Número máximo de subprocesos de E/S asincrónicos en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Recupera el número de solicitudes al grupo de subprocesos que pueden estar activas al mismo tiempo.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Todas las solicitudes que pasen de ese número permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>When <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> returns, the variable specified by <ph id="ph2">`workerThreads`</ph> contains the maximum number of worker threads allowed in the thread pool, and the variable specified by <ph id="ph3">`completionPortThreads`</ph> contains the maximum number of asynchronous I/O threads allowed in the thread pool.</source>
          <target state="translated">Cuando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph> devuelve, la variable especificada por <ph id="ph2">`workerThreads`</ph> contiene el número máximo de subprocesos de trabajo permitidos en el grupo de subprocesos y la variable especificada por <ph id="ph3">`completionPortThreads`</ph> contiene el número máximo de subprocesos de E/S asincrónicos permitidos en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> method to determine the actual number of threads in the thread pool at any given time.</source>
          <target state="translated">Puede usar el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetAvailableThreads%2A&gt;</ph> método para determinar el número real de subprocesos en el grupo de subprocesos en un momento dado.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> to set the maximum number of worker threads and asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Puede usar el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMaxThreads%2A&gt;</ph> para establecer el número máximo de subprocesos de trabajo y subprocesos de E/S asincrónicos en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>You can queue as many thread pool requests as system memory allows.</source>
          <target state="translated">Puede poner en cola como muchas solicitudes de grupo de subprocesos como permita la memoria del sistema.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>If there are more requests than thread pool threads, the additional requests remain queued until thread pool threads become available.</source>
          <target state="translated">Si hay más solicitudes que el grupo de subprocesos, las solicitudes adicionales permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The following code example shows how to retrieve a count of the maximum and available number of threads in the thread pool.</source>
          <target state="translated">En el ejemplo de código siguiente se muestra cómo recuperar un recuento del número máximo y disponible de subprocesos en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A work item is queued that uses <ph id="ph1">`FileStream`</ph> to asynchronously write to two files.</source>
          <target state="translated">Un elemento de trabajo se pone en cola que usa <ph id="ph1">`FileStream`</ph> para escribir en dos archivos de forma asincrónica.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>The callback methods are timed to overlap.</source>
          <target state="translated">Se superó el tiempo de los métodos de devolución de llamada que se superponen.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
          <source>A worker thread handles the work item and, depending on the speed and number of processors on the computer, one or two completion port threads handle the write operations.</source>
          <target state="translated">Un subproceso de trabajo controla el elemento de trabajo y, dependiendo de la velocidad y el número de procesadores del equipo, uno o dos subprocesos de puerto de finalización controlan las operaciones de escritura.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Cuando este método vuelve, contiene el número mínimo de subprocesos de trabajo que el grupo de subprocesos crea a petición.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Cuando este método vuelve, contiene el número mínimo de subprocesos de E/S asincrónicos que el grupo de subprocesos crea a petición.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Recupera el número mínimo de subprocesos que el grupo de subprocesos crea a petición, según se realizan nuevas solicitudes, antes de conmutar a un algoritmo para administrar la creación y destrucción de subprocesos.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">De forma predeterminada, el número mínimo de subprocesos se establece en el número de procesadores en un sistema.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">A partir del <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, el grupo de subprocesos crea y destruye subprocesos para optimizar el rendimiento, que se define como el número de tareas que se completan por unidad de tiempo.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">En el ejemplo siguiente se establece el número mínimo de subprocesos de trabajo a cuatro y conserva el valor original para el número mínimo de subprocesos de finalización de E/S asincrónicos.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Queues a method for execution.</source>
          <target state="translated">Pone en cola un método para su ejecución.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the method to be executed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> que representa el método que se va a ejecutar.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Queues a method for execution.</source>
          <target state="translated">Pone en cola un método para su ejecución.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método se pone en la cola correctamente; se produce la excepción <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> si no se puede poner en la cola el elemento de trabajo.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>You can place data required by the queued method in the instance fields of the class in which the method is defined, or you can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> overload that accepts an object containing the necessary data.</source>
          <target state="translated">Puede colocar los datos requeridos por el método en cola en los campos de instancia de la clase en la que se define el método, o puede usar el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29&gt;</ph> sobrecarga que acepta un objeto que contiene los datos necesarios.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Los usuarios de Visual Basic pueden omitir el <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor y simplemente, usar el <ph id="ph2">`AddressOf`</ph> operador cuando se pasa el método de devolución de llamada a <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic llama automáticamente al constructor de delegado correcto.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Version Information</source>
          <target state="translated">Información de versión</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">En .NET Framework versión 2.0, el <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">En versiones anteriores, no se propaga la información de entidad de seguridad.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> method overload to queue a task, which is represented by the <ph id="ph2">`ThreadProc`</ph> method, to execute when a thread becomes available.</source>
          <target state="translated">En el ejemplo siguiente se usa el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29&gt;</ph> sobrecarga del método para poner en cola una tarea, que se representa mediante el <ph id="ph2">`ThreadProc`</ph> método, se debe ejecutar cuando hay disponible un subproceso.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>No task information is supplied with this overload.</source>
          <target state="translated">No hay información de la tarea se suministra con esta sobrecarga.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>Therefore, the information that is available to the <ph id="ph1">`ThreadProc`</ph> method is limited to the object the method belongs to.</source>
          <target state="translated">Por lo tanto, la información que está disponible para el <ph id="ph1">`ThreadProc`</ph> método se limita al objeto al que pertenece el método.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">Common Language Runtime (CLR) está en un host y el host no admite esta acción.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> representing the method to execute.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> que representa el método que se va a ejecutar.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An object containing data to be used by the method.</source>
          <target state="translated">Objeto que contiene los datos que va a usar el método.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues a method for execution, and specifies an object containing data to be used by the method.</source>
          <target state="translated">Pone un método en cola para su ejecución y especifica un objeto que contiene los datos que debe usar el método.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The method executes when a thread pool thread becomes available.</source>
          <target state="translated">El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method is successfully queued; <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método se pone en la cola correctamente; se produce la excepción <ph id="ph2">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> si no se puede poner en la cola el elemento de trabajo.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>If the callback method requires complex data, you can define a class to contain the data.</source>
          <target state="translated">Si el método de devolución de llamada requiere datos complejos, puede definir una clase para contener los datos.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic users can omit the <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor, and simply use the <ph id="ph2">`AddressOf`</ph> operator when passing the callback method to <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</source>
          <target state="translated">Los usuarios de Visual Basic pueden omitir el <ph id="ph1">&lt;xref:System.Threading.WaitCallback&gt;</ph> constructor y simplemente, usar el <ph id="ph2">`AddressOf`</ph> operador cuando se pasa el método de devolución de llamada a <ph id="ph3">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Visual Basic automatically calls the correct delegate constructor.</source>
          <target state="translated">Visual Basic llama automáticamente al constructor de delegado correcto.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Version Information</source>
          <target state="translated">Información de versión</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method.</source>
          <target state="translated">En .NET Framework versión 2.0, el <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <ph id="ph2">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">En versiones anteriores, no se propaga la información de entidad de seguridad.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The following example shows how to create an object that contains task information.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo crear un objeto que contiene información de la tarea.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</source>
          <target state="translated">También muestra cómo pasar ese objeto a una tarea que se pone en cola para su ejecución por el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The common language runtime (CLR) is hosted, and the host does not support this action.</source>
          <target state="translated">Common Language Runtime (CLR) está en un host y el host no admite esta acción.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate that is waiting for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</source>
          <target state="translated">Registra un delegado que está esperando a una clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se va a registrar.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Use un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diferente de <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> al que se llamará cuando el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> esté marcado.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objeto que se pasa al delegado.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Tiempo de espera en milisegundos.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si el valor del parámetro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que el subproceso no esperará en el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> después de haber llamado al delegado; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegado para que espere a la clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> y especifica un entero de 32 bits con signo como tiempo de espera, en milisegundos.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> que encapsula el identificador nativo.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Cuando haya terminado con el <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por este método, llame a su <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método para liberar las referencias al identificador de espera.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Se recomienda que siempre llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método, incluso si se especifica <ph id="ph2">`true`</ph> para <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> en lugar del método según el finalizador del controlador de espera registrada.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método pone en cola el delegado especificado en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">El objeto especificado está en el estado señalado.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">Se agota el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método comprueba el estado actual del objeto especificado <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Si el estado del objeto no está señalado, el método registra una operación de espera.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">La operación de espera se realiza mediante un subproceso del grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Si el <ph id="ph1">`timeOutInterval`</ph> parámetro no es 0 (cero) y la <ph id="ph2">`executeOnlyOnce`</ph> parámetro es <ph id="ph3">`false`</ph>, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Con un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> para <ph id="ph2">`waitObject`</ph> no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">En lugar de un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> con un recuento máximo de 1.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para cancelar la operación de espera, llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">El subproceso espera usa Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> función para supervisar las operaciones de espera registrada.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, debe duplicar el identificador utilizando Win32 <ph id="ph2">`DuplicateHandle`</ph> función.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Por ejemplo, el recuento de un semáforo disminuye en uno.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Información de versión</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">A partir de .NET Framework versión 2.0, el <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">En versiones anteriores, no se propaga la información de entidad de seguridad.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> es menor que -1.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se va a registrar.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Use un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diferente de <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> al que se llamará cuando el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> esté marcado.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Objeto que se ha pasado al delegado.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Tiempo de espera en milisegundos.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si el valor del parámetro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que el subproceso no esperará en el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> después de haber llamado al delegado; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegado para que espere a la clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> y especifica un entero de 64 bits con signo como tiempo de espera, en milisegundos.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> que encapsula el identificador nativo.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Cuando haya terminado con el <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por este método, llame a su <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método para liberar las referencias al identificador de espera.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Se recomienda que siempre llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método, incluso si se especifica <ph id="ph2">`true`</ph> para <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> en lugar del método según el finalizador del controlador de espera registrada.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método pone en cola el delegado especificado en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">El objeto especificado está en el estado señalado.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">Se agota el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método comprueba el estado actual del objeto especificado <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Si el estado del objeto no está señalado, el método registra una operación de espera.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">La operación de espera se realiza mediante un subproceso del grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Si el <ph id="ph1">`timeOutInterval`</ph> parámetro no es 0 (cero) y la <ph id="ph2">`executeOnlyOnce`</ph> parámetro es <ph id="ph3">`false`</ph>, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Con un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> para <ph id="ph2">`waitObject`</ph> no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">En lugar de un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> con un recuento máximo de 1.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para cancelar la operación de espera, llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">El subproceso espera usa Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> función para supervisar las operaciones de espera registrada.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, debe duplicar el identificador utilizando Win32 <ph id="ph2">`DuplicateHandle`</ph> función.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Por ejemplo, el recuento de un semáforo disminuye en uno.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Información de versión</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">A partir de .NET Framework versión 2.0, el <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">En versiones anteriores, no se propaga la información de entidad de seguridad.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> es menor que -1.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se va a registrar.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Use un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diferente de <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> al que se llamará cuando el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> esté marcado.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Objeto que se ha pasado al delegado.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated">Tiempo de espera representado por <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> es 0 (cero), la función comprueba el estado del objeto y devuelve un resultado inmediatamente.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que el subproceso no esperará en el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> después de haber llamado al delegado; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out.</source>
          <target state="translated">Registra un delegado para que espere a la clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> y especifica un valor <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> como tiempo de espera.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that encapsulates the native handle.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> que encapsula el identificador nativo.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Cuando haya terminado con el <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por este método, llame a su <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método para liberar las referencias al identificador de espera.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Se recomienda que siempre llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método, incluso si se especifica <ph id="ph2">`true`</ph> para <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> en lugar del método según el finalizador del controlador de espera registrada.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método pone en cola el delegado especificado en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">El objeto especificado está en el estado señalado.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">Se agota el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método comprueba el estado actual del objeto especificado <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Si el estado del objeto no está señalado, el método registra una operación de espera.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">La operación de espera se realiza mediante un subproceso del grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Si el <ph id="ph1">`timeOutInterval`</ph> parámetro no es 0 (cero) y la <ph id="ph2">`executeOnlyOnce`</ph> parámetro es <ph id="ph3">`false`</ph>, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Con un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> para <ph id="ph2">`waitObject`</ph> no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">En lugar de un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> con un recuento máximo de 1.</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para cancelar la operación de espera, llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">El subproceso espera usa Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> función para supervisar las operaciones de espera registrada.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, debe duplicar el identificador utilizando Win32 <ph id="ph2">`DuplicateHandle`</ph> función.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Por ejemplo, el recuento de un semáforo disminuye en uno.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Información de versión</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">A partir de .NET Framework versión 2.0, el <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">En versiones anteriores, no se propaga la información de entidad de seguridad.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> es menor que -1.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> es mayor que el valor de la propiedad <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se va a registrar.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Use un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diferente de <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegado de <ph id="ph1">&lt;see cref="T:System.Threading.WaitOrTimerCallback" /&gt;</ph> al que se llamará cuando el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> esté marcado.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object passed to the delegate.</source>
          <target state="translated">Objeto que se ha pasado al delegado.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Tiempo de espera en milisegundos.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si el valor del parámetro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que el subproceso no esperará en el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> después de haber llamado al delegado; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegado para que espere a la clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> y especifica un entero de 32 bits sin signo como tiempo de espera, en milisegundos.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> that can be used to cancel the registered wait operation.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> que puede usarse para cancelar la operación de espera registrada.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Cuando haya terminado con el <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por este método, llame a su <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método para liberar las referencias al identificador de espera.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Se recomienda que siempre llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método, incluso si se especifica <ph id="ph2">`true`</ph> para <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> en lugar del método según el finalizador del controlador de espera registrada.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method queues the specified delegate to the thread pool.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método pone en cola el delegado especificado en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>A worker thread will execute the delegate when one of the following occurs:</source>
          <target state="translated">Un subproceso de trabajo ejecutará al delegado cuando se produce una de las siguientes acciones:</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The specified object is in the signaled state.</source>
          <target state="translated">El objeto especificado está en el estado señalado.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out interval elapses.</source>
          <target state="translated">Se agota el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method checks the current state of the specified object's <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método comprueba el estado actual del objeto especificado <ph id="ph2">&lt;xref:System.Threading.WaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the object's state is unsignaled, the method registers a wait operation.</source>
          <target state="translated">Si el estado del objeto no está señalado, el método registra una operación de espera.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait operation is performed by a thread from the thread pool.</source>
          <target state="translated">La operación de espera se realiza mediante un subproceso del grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate is executed by a worker thread when the object's state becomes signaled or the time-out interval elapses.</source>
          <target state="translated">Un subproceso de trabajo ejecuta el delegado cuando el estado del objeto se convierte en estado señalado o transcurre el intervalo de tiempo de espera.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <ph id="ph1">`timeOutInterval`</ph> parameter is not 0 (zero) and the <ph id="ph2">`executeOnlyOnce`</ph> parameter is <ph id="ph3">`false`</ph>, the timer is reset every time the event is signaled or the time-out interval elapses.</source>
          <target state="translated">Si el <ph id="ph1">`timeOutInterval`</ph> parámetro no es 0 (cero) y la <ph id="ph2">`executeOnlyOnce`</ph> parámetro es <ph id="ph3">`false`</ph>, el temporizador se restablece cada vez que se señala el evento o se agota el tiempo de espera.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Con un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> para <ph id="ph2">`waitObject`</ph> no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Instead of a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use a <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> with a maximum count of 1.</source>
          <target state="translated">En lugar de un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph>, use un <ph id="ph2">&lt;xref:System.Threading.Semaphore&gt;</ph> con un recuento máximo de 1.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>To cancel the wait operation, call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">Para cancelar la operación de espera, llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The wait thread uses the Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> function to monitor registered wait operations.</source>
          <target state="translated">El subproceso espera usa Win32 <ph id="ph1">`WaitForMultipleObjects`</ph> función para supervisar las operaciones de espera registrada.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Therefore, if you must use the same native operating system handle in multiple calls to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, you must duplicate the handle using the Win32 <ph id="ph2">`DuplicateHandle`</ph> function.</source>
          <target state="translated">Por lo tanto, si tiene que utilizar el mismo identificador de sistema operativo nativo en varias llamadas a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, debe duplicar el identificador utilizando Win32 <ph id="ph2">`DuplicateHandle`</ph> función.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Note that you should not pulse an event object passed to <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, because the wait thread might not detect that the event is signaled before it is reset.</source>
          <target state="translated">Tenga en cuenta que no debe marcar un objeto de evento que se pasa a <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph>, ya que el subproceso de espera podría no detectar que el evento está señalado antes de restablecerse.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Before returning, the function modifies the state of some types of synchronization objects.</source>
          <target state="translated">La función modifica el estado de algunos tipos de objetos de sincronización antes de devolverse.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Modification occurs only for the object whose signaled state caused the wait condition to be satisfied.</source>
          <target state="translated">Modificación se produce sólo para el objeto cuyo estado señalado provocó la condición de espera para que se cumpla.</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>For example, the count of a semaphore is decreased by one.</source>
          <target state="translated">Por ejemplo, el recuento de un semáforo disminuye en uno.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Version Information</source>
          <target state="translated">Información de versión</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Starting with the .NET Framework version 2.0, the <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> property value is propagated to worker threads queued using the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method.</source>
          <target state="translated">A partir de .NET Framework versión 2.0, el <ph id="ph1">&lt;xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType&gt;</ph> valor de propiedad se propaga a los subprocesos de trabajo en una cola mediante el <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In earlier versions, the principal information is not propagated.</source>
          <target state="translated">En versiones anteriores, no se propaga la información de entidad de seguridad.</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method to execute a specified callback method when a specified wait handle is signaled.</source>
          <target state="translated">En el ejemplo siguiente se muestra cómo utilizar el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método para ejecutar un método de devolución de llamada especificado cuando se señala a un controlador de espera especificado.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In this example, the callback method is <ph id="ph1">`WaitProc`</ph>, and the wait handle is an <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</source>
          <target state="translated">En este ejemplo, el método de devolución de llamada es <ph id="ph1">`WaitProc`</ph>, y el identificador de espera es un <ph id="ph2">&lt;xref:System.Threading.AutoResetEvent&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example defines a <ph id="ph1">`TaskInfo`</ph> class to hold the information that is passed to the callback when it executes.</source>
          <target state="translated">El ejemplo define un <ph id="ph1">`TaskInfo`</ph> clase para contener la información que se pasa a la devolución de llamada cuando se ejecuta.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The example creates a <ph id="ph1">`TaskInfo`</ph> object and assigns it some string data.</source>
          <target state="translated">El ejemplo se crea un <ph id="ph1">`TaskInfo`</ph> de objeto y lo asigna algunos datos de cadena.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method is assigned to the <ph id="ph3">`Handle`</ph> field of the <ph id="ph4">`TaskInfo`</ph> object so that the callback method has access to the <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</source>
          <target state="translated">El <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método se asigna a la <ph id="ph3">`Handle`</ph> campo de la <ph id="ph4">`TaskInfo`</ph> objeto para que el método de devolución de llamada no tiene acceso a la <ph id="ph5">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In addition to specifying <ph id="ph1">`TaskInfo`</ph> as the object to pass to the callback method, the call to the <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method specifies the <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> that the task will wait for, a <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate that represents the <ph id="ph5">`WaitProc`</ph> callback method, a one second time-out interval, and multiple callbacks.</source>
          <target state="translated">Además de especificar <ph id="ph1">`TaskInfo`</ph> como el objeto que se va a pasar al método de devolución de llamada, la llamada a la <ph id="ph2">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método especifica la <ph id="ph3">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> que la tarea va a esperar, un <ph id="ph4">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegado que representa el <ph id="ph5">`WaitProc`</ph> método de devolución de llamada, un intervalo de tiempo de espera de un segundo y varias devoluciones de llamada.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When the main thread signals the <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> by calling its <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> delegate is invoked.</source>
          <target state="translated">Cuando el subproceso principal señala el <ph id="ph1">&lt;xref:System.Threading.AutoResetEvent&gt;</ph> mediante una llamada a su <ph id="ph2">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> método, el <ph id="ph3">&lt;xref:System.Threading.WaitOrTimerCallback&gt;</ph> se invoca el delegado.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method tests <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> to determine whether a time-out occurred.</source>
          <target state="translated">El <ph id="ph1">`WaitProc`</ph> método pruebas <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> para determinar si se produjo un tiempo de espera.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the callback was invoked because the wait handle was signaled, the <ph id="ph1">`WaitProc`</ph> method unregisters the <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, stopping additional callbacks.</source>
          <target state="translated">Si la devolución de llamada se invocó porque se señaló el identificador de espera, el <ph id="ph1">`WaitProc`</ph> método anula el registro del <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph>, deteniendo las devoluciones de llamada adicionales.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>In the case of a time-out, the task continues to wait.</source>
          <target state="translated">En el caso de un tiempo de espera, la tarea sigue a la espera.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">`WaitProc`</ph> method ends by printing a message to the console.</source>
          <target state="translated">El <ph id="ph1">`WaitProc`</ph> método termina con la impresión de un mensaje en la consola.</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> es menor que -1.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of worker threads in the thread pool.</source>
          <target state="translated">Número máximo de subprocesos de trabajo en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>The maximum number of asynchronous I/O threads in the thread pool.</source>
          <target state="translated">Número máximo de subprocesos de E/S asincrónicos en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Sets the number of requests to the thread pool that can be active concurrently.</source>
          <target state="translated">Establece el número de solicitudes al grupo de subprocesos que pueden estar activas al mismo tiempo.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>All requests above that number remain queued until thread pool threads become available.</source>
          <target state="translated">Todas las solicitudes que pasen de ese número permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el cambio se realiza correctamente; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>You cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the number of processors on the computer.</source>
          <target state="translated">No se puede establecer el número máximo de subprocesos de trabajo o subprocesos de finalización de E/S en un número menor que el número de procesadores en el equipo.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine how many processors are present, retrieve the value of the <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">Para determinar cuántos procesadores están presentes, recuperar el valor de la <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A?displayProperty=nameWithType&gt;</ph> propiedad.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>In addition, you cannot set the maximum number of worker threads or I/O completion threads to a number smaller than the corresponding minimum number of worker threads or I/O completion threads.</source>
          <target state="translated">Además, no se puede establecer el número máximo de subprocesos de trabajo o subprocesos de finalización de E/S en un número menor que el correspondiente número mínimo de subprocesos de trabajo o subprocesos de finalización de E/S.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>To determine the minimum thread pool size,  call the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> method.</source>
          <target state="translated">Para determinar el tamaño del grupo de subprocesos mínimos, llame a la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMinThreads%2A&gt;</ph> método.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If the common language runtime is hosted, for example by Internet Information Services (IIS) or SQL Server, the host can limit or prevent changes to the thread pool size.</source>
          <target state="translated">Si se hospeda common language runtime, por ejemplo mediante Internet Information Services (IIS) o SQL Server, el host puede limitar o impedir cambios en el tamaño del grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Use caution when changing the maximum number of threads in the thread pool.</source>
          <target state="translated">Tenga cuidado al cambiar el número máximo de subprocesos en el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>While your code might benefit, the changes might have an adverse effect on code libraries you use.</source>
          <target state="translated">Mientras que podría beneficiarse del código, los cambios pueden tener un efecto adverso en bibliotecas de código que usar.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Setting the thread pool size too large can cause performance problems.</source>
          <target state="translated">Establecer el tamaño del grupo de subprocesos demasiado grande puede causar problemas de rendimiento.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>If too many threads are executing at the same time, the task switching overhead becomes a significant factor.</source>
          <target state="translated">Si hay demasiados subprocesos se ejecutan al mismo tiempo, el cambio de la tarea se convierte sobrecarga en un factor importante.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">la capacidad para controlar los subprocesos.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">Valor del permiso: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of worker threads that the thread pool creates on demand.</source>
          <target state="translated">Número mínimo de subprocesos de trabajo que el grupo de subprocesos crea a petición.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The minimum number of asynchronous I/O threads that the thread pool creates on demand.</source>
          <target state="translated">Número mínimo de subprocesos de E/S asincrónicos que el grupo de subprocesos crea a petición.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.</source>
          <target state="translated">Establece el número mínimo de subprocesos que el grupo de subprocesos crea a petición, según se realizan nuevas solicitudes, antes de conmutar a un algoritmo para administrar la creación y destrucción de subprocesos.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the change is successful; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si el cambio se realiza correctamente; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The thread pool provides new worker threads or I/O completion threads on demand until it reaches the minimum for each category.</source>
          <target state="translated">El grupo de subprocesos ofrece nuevos subprocesos de trabajo o subprocesos de finalización de E/S a petición hasta que alcanza el valor mínimo para cada categoría.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When the minimum is reached, the thread pool can create additional threads in that category or wait until some tasks complete.</source>
          <target state="translated">Cuando se alcanza el mínimo, el grupo de subprocesos puede crear subprocesos adicionales en esa categoría o esperar hasta que se completen algunas tareas.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, the thread pool creates and destroys threads in order to optimize throughput, which is defined as the number of tasks that complete per unit of time.</source>
          <target state="translated">A partir del <ph id="ph1">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, el grupo de subprocesos crea y destruye subprocesos para optimizar el rendimiento, que se define como el número de tareas que se completan por unidad de tiempo.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Too few threads might not make optimal use of available resources, whereas too many threads could increase resource contention.</source>
          <target state="translated">Si hay demasiados pocos subprocesos, puede que los recursos disponibles no se usen de manera óptima, mientras que si hay demasiados subprocesos, puede aumentar la contención de recursos.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>When demand is low, the actual number of thread pool threads can fall below the minimum values.</source>
          <target state="translated">Cuando la demanda es baja, el número real de subprocesos del grupo de subprocesos puede descender por debajo de los valores mínimos.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If you specify a negative number or a number larger than the maximum number of active thread pool threads (obtained using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> returns <ph id="ph3">`false`</ph> and does not change either of the minimum values.</source>
          <target state="translated">Si especifica un número negativo o un número mayor que el número máximo de subprocesos del grupo de subprocesos activos (obtenido mediante <ph id="ph1">&lt;xref:System.Threading.ThreadPool.GetMaxThreads%2A&gt;</ph>), <ph id="ph2">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> devuelve <ph id="ph3">`false`</ph> y no cambia ninguno de los valores mínimos.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>By default, the minimum number of threads is set to the number of processors on a system.</source>
          <target state="translated">De forma predeterminada, el número mínimo de subprocesos se establece en el número de procesadores en un sistema.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>You can use the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> method to increase the minimum number ofthreads.</source>
          <target state="translated">Puede usar el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.SetMinThreads%2A&gt;</ph> método para aumentar la ofthreads número mínimo.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>However, unnecessarily increasing these values can cause performance problems.</source>
          <target state="translated">Sin embargo, aumentar innecesariamente estos valores puede causar problemas de rendimiento.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>If too many tasks start at the same time, all of them might appear to be slow.</source>
          <target state="translated">Si se inician demasiadas tareas al mismo tiempo, puede que todas ellas parezcan funcionar con lentitud.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>In most cases, the thread pool will perform better with its own algorithm for allocating threads.</source>
          <target state="translated">En la mayoría de los casos, el grupo de subprocesos funciona mejor con su propio algoritmo de asignación de subprocesos.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Reducing the minimum to less than the number of processors can also hurt performance.</source>
          <target state="translated">Reducir al mínimo a menos que el número de procesadores también puede afectar al rendimiento.</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>The following example sets the minimum number of worker threads to four, and preserves the original value for the minimum number of asynchronous I/O completion threads.</source>
          <target state="translated">En el ejemplo siguiente se establece el número mínimo de subprocesos de trabajo a cuatro y conserva el valor original para el número mínimo de subprocesos de finalización de E/S asincrónicos.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>for the ability to control threads.</source>
          <target state="translated">la capacidad para controlar los subprocesos.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
          <source>Permission value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></source>
          <target state="translated">Valor del permiso: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlThread" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> structure to queue.</source>
          <target state="translated">Estructura <ph id="ph1">&lt;see cref="T:System.Threading.NativeOverlapped" /&gt;</ph> que se va a poner en cola.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Queues an overlapped I/O operation for execution.</source>
          <target state="translated">Pone en cola una operación de E/S superpuesta para que se ejecute.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operation was successfully queued to an I/O completion port; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> si la operación se puso correctamente en la cola de un puerto de finalización de E/S; en caso contrario, es <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>For information about using native Win32 overlapped I/O, see the <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> class, the <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> structure, and the <ph id="ph3">`OVERLAPPED`</ph> structure in the Win32 Platform SDK.</source>
          <target state="translated">Para obtener información acerca de cómo utilizar Win32 nativo E/S superpuesta, vea el <ph id="ph1">&lt;xref:System.Threading.Overlapped&gt;</ph> (clase), el <ph id="ph2">&lt;xref:System.Threading.NativeOverlapped&gt;</ph> estructura y la <ph id="ph3">`OVERLAPPED`</ph> estructura en el SDK de plataforma de Win32.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Using the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> method could inadvertently open up a security hole.</source>
          <target state="translated">Mediante el <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph> método podría abrir accidentalmente una vulnerabilidad de seguridad.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, the stack of the thread pool thread does not have the context of the actual callers.</source>
          <target state="translated">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped%2A&gt;</ph>, la pila del subproceso del grupo no tiene el contexto de los llamadores reales.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> that represents the delegate to invoke when a thread in the thread pool picks up the work item.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Threading.WaitCallback" /&gt;</ph> que representa el delegado al que se va a invocar cuando un subproceso del grupo de subprocesos seleccione el elemento de trabajo.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The object that is passed to the delegate when serviced from the thread pool.</source>
          <target state="translated">Objeto que se pasa al delegado cuando se atiende desde el grupo de subprocesos.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Pone en cola el delegado especificado en el grupo de subprocesos, pero no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the method succeeds; <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph> is thrown if the work item could not be queued.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> si el método se ejecuta correctamente; se produce la excepción <ph id="ph2">&lt;see cref="T:System.OutOfMemoryException" /&gt;</ph> si el elemento de trabajo no se puede poner en la cola.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A diferencia de la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.QueueUserWorkItem%2A&gt;</ph> método <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Usar <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph> podría abrir accidentalmente una vulnerabilidad de seguridad.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeQueueUserWorkItem%2A&gt;</ph>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">El llamador no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>An out-of-memory condition was encountered.</source>
          <target state="translated">Se ha encontrado una condición de falta de memoria.</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>The work item could not be queued.</source>
          <target state="translated">No se pudo poner en la cola el elemento de trabajo.</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="callBack" /&gt;</ph> es <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="T:System.Threading.ThreadPool">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, but does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Registra un delegado para que espere a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, pero no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se va a registrar.</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Use un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diferente de <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegado al que se llamará cuando el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> esté marcado.</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objeto que se pasa al delegado.</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Tiempo de espera en milisegundos.</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si el valor del parámetro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente.</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que el subproceso no esperará en el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> después de haber llamado al delegado; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, using a 32-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegado para que espere a la clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> y usa un entero de 32 bits con signo como tiempo de espera, en milisegundos.</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Este método no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> que puede usarse para cancelar la operación de espera registrada.</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A diferencia de la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Usar <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> podría abrir accidentalmente una vulnerabilidad de seguridad.</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Con un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> para <ph id="ph2">`waitObject`</ph> no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Cuando haya terminado con el <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por este método, llame a su <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método para liberar las referencias al identificador de espera.</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Se recomienda que siempre llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método, incluso si se especifica <ph id="ph2">`true`</ph> para <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> en lugar del método según el finalizador del controlador de espera registrada.</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> es menor que -1.</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">El llamador no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se va a registrar.</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Use un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diferente de <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegado al que se llamará cuando el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> esté marcado.</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objeto que se pasa al delegado.</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Tiempo de espera en milisegundos.</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si el valor del parámetro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente.</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que el subproceso no esperará en el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> después de haber llamado al delegado; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 64-bit signed integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegado para que espere a la clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> y especifica un entero de 64 bits con signo como tiempo de espera, en milisegundos.</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Este método no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> que puede usarse para cancelar la operación de espera registrada.</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A diferencia de la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Usar <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> podría abrir accidentalmente una vulnerabilidad de seguridad.</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Con un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> para <ph id="ph2">`waitObject`</ph> no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Cuando haya terminado con el <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por este método, llame a su <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método para liberar las referencias al identificador de espera.</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Se recomienda que siempre llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método, incluso si se especifica <ph id="ph2">`true`</ph> para <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> en lugar del método según el finalizador del controlador de espera registrada.</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="millisecondsTimeOutInterval" /&gt;</ph> es menor que -1.</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">El llamador no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se va a registrar.</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Use un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diferente de <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegado al que se llamará cuando el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> esté marcado.</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objeto que se pasa al delegado.</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The time-out represented by a <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</source>
          <target state="translated">Tiempo de espera representado por <ph id="ph1">&lt;see cref="T:System.TimeSpan" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> es 0 (cero), la función comprueba el estado del objeto y devuelve un resultado inmediatamente.</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>timeout<ept id="p1">&lt;/c&gt;</ept> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que el subproceso no esperará en el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> después de haber llamado al delegado; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> value for the time-out. This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Registra un delegado para que espere a la clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> y especifica un valor <ph id="ph2">&lt;see cref="T:System.TimeSpan" /&gt;</ph> como tiempo de espera. Este método no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> que puede usarse para cancelar la operación de espera registrada.</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A diferencia de la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Usar <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> podría abrir accidentalmente una vulnerabilidad de seguridad.</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Con un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> para <ph id="ph2">`waitObject`</ph> no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Cuando haya terminado con el <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por este método, llame a su <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método para liberar las referencias al identificador de espera.</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Se recomienda que siempre llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método, incluso si se especifica <ph id="ph2">`true`</ph> para <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> en lugar del método según el finalizador del controlador de espera registrada.</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is less than -1.</source>
          <target state="translated">El parámetro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> es menor que -1.</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> parameter is greater than <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</source>
          <target state="translated">El valor del parámetro <ph id="ph1">&lt;paramref name="timeout" /&gt;</ph> es mayor que el valor de la propiedad <ph id="ph2">&lt;see cref="F:System.Int32.MaxValue" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">El llamador no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> to register.</source>
          <target state="translated">La clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> que se va a registrar.</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Use a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> other than <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</source>
          <target state="translated">Use un <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> diferente de <ph id="ph2">&lt;see cref="T:System.Threading.Mutex" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The delegate to call when the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter is signaled.</source>
          <target state="translated">Delegado al que se llamará cuando el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> esté marcado.</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The object that is passed to the delegate.</source>
          <target state="translated">Objeto que se pasa al delegado.</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The time-out in milliseconds.</source>
          <target state="translated">Tiempo de espera en milisegundos.</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> parameter is 0 (zero), the function tests the object's state and returns immediately.</source>
          <target state="translated">Si el valor del parámetro <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es 0 (cero), la función comprueba el estado del objeto y devuelve un valor inmediatamente.</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> is -1, the function's time-out interval never elapses.</source>
          <target state="translated">Si <bpt id="p1">&lt;c&gt;</bpt>millisecondsTimeOutInterval<ept id="p1">&lt;/c&gt;</ept> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the thread will no longer wait on the <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> parameter after the delegate has been called; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.</source>
          <target state="translated">Es <ph id="ph1">&lt;see langword="true" /&gt;</ph> para indicar que el subproceso no esperará en el parámetro <bpt id="p1">&lt;c&gt;</bpt>waitObject<ept id="p1">&lt;/c&gt;</ept> después de haber llamado al delegado; es <ph id="ph2">&lt;see langword="false" /&gt;</ph> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Registers a delegate to wait for a <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph>, specifying a 32-bit unsigned integer for the time-out in milliseconds.</source>
          <target state="translated">Registra un delegado para que espere a la clase <ph id="ph1">&lt;see cref="T:System.Threading.WaitHandle" /&gt;</ph> y especifica un entero de 32 bits sin signo como tiempo de espera, en milisegundos.</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This method does not propagate the calling stack to the worker thread.</source>
          <target state="translated">Este método no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> object that can be used to cancel the registered wait operation.</source>
          <target state="translated">Objeto <ph id="ph1">&lt;see cref="T:System.Threading.RegisteredWaitHandle" /&gt;</ph> que puede usarse para cancelar la operación de espera registrada.</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Unlike the <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> method, <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> does not propagate the calling stack to the worker thread.</source>
          <target state="translated">A diferencia de la <ph id="ph1">&lt;xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A&gt;</ph> método <ph id="ph2">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> no propaga la pila de llamadas al subproceso de trabajo.</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This allows code to lose the calling stack and thereby to elevate its security privileges.</source>
          <target state="translated">Esto permite que el código pierda la pila de llamadas y, por tanto, para elevar sus privilegios de seguridad.</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> could inadvertently open up a security hole.</source>
          <target state="translated">Usar <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph> podría abrir accidentalmente una vulnerabilidad de seguridad.</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Code access security bases its permission checks on the permissions of all the callers on the stack.</source>
          <target state="translated">Seguridad de acceso del código basa sus comprobaciones de permisos en los permisos de todos los llamadores de la pila.</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When work is queued on a thread pool thread using <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, the stack of the thread pool thread will not have the context of the actual callers.</source>
          <target state="translated">Cuando se pone en cola trabajo en un subproceso del grupo de subprocesos usando <ph id="ph1">&lt;xref:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject%2A&gt;</ph>, la pila del subproceso del grupo no tendrá el contexto de los llamadores reales.</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Malicious code might be able exploit this to avoid permission checks.</source>
          <target state="translated">Código malintencionado pueda aprovechar esta circunstancia para evitar las comprobaciones de permiso.</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Using a <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> for <ph id="ph2">`waitObject`</ph> does not provide mutual exclusion for the callbacks because the underlying Win32 API uses the default <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> flag, so each callback is dispatched on a separate thread pool thread.</source>
          <target state="translated">Con un <ph id="ph1">&lt;xref:System.Threading.Mutex&gt;</ph> para <ph id="ph2">`waitObject`</ph> no proporciona la exclusión mutua para las devoluciones de llamada porque la API de Win32 subyacente utiliza el valor predeterminado <ph id="ph3">`WT_EXECUTEDEFAULT`</ph> marca, por lo que cada devolución de llamada se envía en un subproceso independiente del grupo.</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>When you are finished using the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> that is returned by this method, call its <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method to release references to the wait handle.</source>
          <target state="translated">Cuando haya terminado con el <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle&gt;</ph> devuelto por este método, llame a su <ph id="ph2">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método para liberar las referencias al identificador de espera.</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>We recommend that you always call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method, even if you specify <ph id="ph2">`true`</ph> for <ph id="ph3">`executeOnlyOnce`</ph>.</source>
          <target state="translated">Se recomienda que siempre llame a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> método, incluso si se especifica <ph id="ph2">`true`</ph> para <ph id="ph3">`executeOnlyOnce`</ph>.</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Garbage collection works more efficiently if you call the <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> method instead of depending on the registered wait handle's finalizer.</source>
          <target state="translated">Recolección de elementos no utilizados funciona más eficazmente si se llama a la <ph id="ph1">&lt;xref:System.Threading.RegisteredWaitHandle.Unregister%2A?displayProperty=nameWithType&gt;</ph> en lugar del método según el finalizador del controlador de espera registrada.</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">El llamador no dispone del permiso requerido.</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">requiere plena confianza para el llamador inmediato.</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">Este miembro no puede usarse por código de confianza parcial o transparente.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>