<Type Name="LockRecursionPolicy" FullName="System.Threading.LockRecursionPolicy">
  <TypeSignature Language="C#" Value="public enum LockRecursionPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LockRecursionPolicy extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LockRecursionPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Enum LockRecursionPolicy" />
  <TypeSignature Language="C++ CLI" Value="public enum class LockRecursionPolicy" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="b2738-101">Especifica si el mismo subproceso puede entrar varias veces en un bloqueo.</span><span class="sxs-lookup"><span data-stu-id="b2738-101">Specifies whether a lock can be entered multiple times by the same thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b2738-102">La directiva de recursividad predeterminada depende del tipo de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="b2738-102">The default recursion policy depends on the type of lock.</span></span> <span data-ttu-id="b2738-103">Para la directiva predeterminada y el comportamiento exacto de recursividad de bloqueo para cualquier tipo de bloqueo determinado, consulte la documentación para el tipo.</span><span class="sxs-lookup"><span data-stu-id="b2738-103">For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type.</span></span> <span data-ttu-id="b2738-104">Por ejemplo, el <xref:System.Threading.ReaderWriterLockSlim> clase no permiten que un subproceso entrar en el bloqueo en modo de escritura si ya escribió el bloqueo en modo de lectura, independientemente de la configuración de directiva de bloqueo con el fin de reducir la posibilidad de interbloqueos.</span><span class="sxs-lookup"><span data-stu-id="b2738-104">For example, the <xref:System.Threading.ReaderWriterLockSlim> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks.</span></span>  
  
 <span data-ttu-id="b2738-105">Actualmente sólo un bloqueo utiliza esta enumeración:</span><span class="sxs-lookup"><span data-stu-id="b2738-105">Currently only one lock uses this enumeration:</span></span>  
  
-   <span data-ttu-id="b2738-106"><xref:System.Threading.ReaderWriterLockSlim>.</span><span class="sxs-lookup"><span data-stu-id="b2738-106"><xref:System.Threading.ReaderWriterLockSlim>.</span></span> <span data-ttu-id="b2738-107">Para obtener más información, vea la propiedad <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A>.</span><span class="sxs-lookup"><span data-stu-id="b2738-107">For more information, see the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b2738-108">El ejemplo siguiente muestra dos escenarios de excepción, uno que depende el <xref:System.Threading.LockRecursionPolicy> configuración y otro que no lo hace.</span><span class="sxs-lookup"><span data-stu-id="b2738-108">The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.</span></span>  
  
 <span data-ttu-id="b2738-109">En el primer escenario, el subproceso entra en el bloqueo en modo de lectura y, a continuación, intenta entrar en modo de lectura de forma recursiva.</span><span class="sxs-lookup"><span data-stu-id="b2738-109">In the first scenario, the thread enters the lock in read mode and then tries to enter read mode recursively.</span></span> <span data-ttu-id="b2738-110">Si el <xref:System.Threading.ReaderWriterLockSlim> se crea mediante el constructor predeterminado, que establece la directiva de recursividad en NoRecursion, se produce una excepción.</span><span class="sxs-lookup"><span data-stu-id="b2738-110">If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to NoRecursion, an exception is thrown.</span></span> <span data-ttu-id="b2738-111">Si SupportsRecursion se utiliza para crear el <xref:System.Threading.ReaderWriterLockSlim>, se inicia ninguna excepción.</span><span class="sxs-lookup"><span data-stu-id="b2738-111">If SupportsRecursion is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.</span></span>  
  
 <span data-ttu-id="b2738-112">En el segundo escenario, el subproceso entra en el bloqueo en modo de lectura y, a continuación, intenta entrar en el bloqueo en modo de escritura.</span><span class="sxs-lookup"><span data-stu-id="b2738-112">In the second scenario, the thread enters the lock in read mode and then tries to enter the lock in write mode.</span></span> <span data-ttu-id="b2738-113"><xref:System.Threading.LockRecursionException> se produce independientemente de la directiva de recursividad de bloqueo.</span><span class="sxs-lookup"><span data-stu-id="b2738-113"><xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.</span></span>  
  
 [!code-csharp[System.Threading.LockRecursionPolicy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/example1.cs#1)]
 [!code-vb[System.Threading.LockRecursionPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="NoRecursion">
      <MemberSignature Language="C#" Value="NoRecursion" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LockRecursionPolicy NoRecursion = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LockRecursionPolicy.NoRecursion" />
      <MemberSignature Language="VB.NET" Value="NoRecursion" />
      <MemberSignature Language="C++ CLI" Value="NoRecursion" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b2738-114">Si un subproceso intenta entrar en un bloqueo de forma recursiva, se inicia una excepción.</span><span class="sxs-lookup"><span data-stu-id="b2738-114">If a thread tries to enter a lock recursively, an exception is thrown.</span></span> <span data-ttu-id="b2738-115">Algunas clases pueden permitir cierta recursividad cuando se aplica esta configuración.</span><span class="sxs-lookup"><span data-stu-id="b2738-115">Some classes may allow certain recursions when this setting is in effect.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="SupportsRecursion">
      <MemberSignature Language="C#" Value="SupportsRecursion" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LockRecursionPolicy SupportsRecursion = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LockRecursionPolicy.SupportsRecursion" />
      <MemberSignature Language="VB.NET" Value="SupportsRecursion" />
      <MemberSignature Language="C++ CLI" Value="SupportsRecursion" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LockRecursionPolicy</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="b2738-116">Un subproceso puede entrar en un bloqueo de forma recursiva.</span><span class="sxs-lookup"><span data-stu-id="b2738-116">A thread can enter a lock recursively.</span></span> <span data-ttu-id="b2738-117">Algunas clases pueden limitar esta posibilidad.</span><span class="sxs-lookup"><span data-stu-id="b2738-117">Some classes may restrict this capability.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>