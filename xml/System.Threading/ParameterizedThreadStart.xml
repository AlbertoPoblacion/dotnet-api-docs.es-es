<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6367040f3868461a31ceec837781de60b418c2f6" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48762357" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj">Objeto que contiene datos para el procedimiento de subproceso.</param>
    <summary>Representa el método que se ejecuta en <see cref="T:System.Threading.Thread" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Cuando se crea un subproceso administrado, el método que se ejecuta en el subproceso está representado por:  
  
-   Un <xref:System.Threading.ThreadStart> delegado que se pasa a la <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.  Cualquier método que no tiene parámetros y devuelve `void` en C# o es una `Sub` procedimiento en Visual Basic puede representar el delegado.  
  
-   Un <xref:System.Threading.ParameterizedThreadStart> delegado que se pasa a la <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor. Cualquier método que tiene un único parámetro de tipo <xref:System.Object> y que devuelve void en C# o es un procedimiento Sub en Visual Basic puede representar el delegado.  
  
 El subproceso no comienza a ejecutarse hasta que el <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> se llama al método. El <xref:System.Threading.ThreadStart> o <xref:System.Threading.ParameterizedThreadStart> delegado se invoca en el subproceso y comienza la ejecución en la primera línea del método representado por el delegado. En el caso de los <xref:System.Threading.ParameterizedThreadStart> delegado, el objeto que se pasa a la <xref:System.Threading.Thread.Start%28System.Object%29> método se pasa al delegado.  
  
> [!NOTE]
>  Los usuarios de Visual Basic y C# pueden omitir el <xref:System.Threading.ThreadStart> o <xref:System.Threading.ParameterizedThreadStart> constructor de delegado al crear un subproceso. En Visual Basic, utilice el `AddressOf` operador al pasar el método para el <xref:System.Threading.Thread.%23ctor%2A> constructor; por ejemplo, `Dim t As New Thread(AddressOf ThreadProc)`. En C#, simplemente especifique el nombre del procedimiento de subproceso. El compilador selecciona el constructor de delegado correcto.  
  
> [!NOTE]
>  Cuando creas un <xref:System.Threading.ParameterizedThreadStart> delegado para un método de instancia en C++, el primer parámetro del constructor es la variable de instancia. Un método estático, el primer parámetro del constructor es cero. Para un método estático, el constructor delegado solo requiere un parámetro: la dirección del método de devolución de llamada, calificado con el nombre de clase.  
  
 El <xref:System.Threading.ParameterizedThreadStart> delegar y <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> sobrecarga del método facilitan la tarea pasar datos a un procedimiento de subproceso, pero esta técnica no tiene seguridad de tipos porque cualquier objeto puede pasarse a <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>. Es una manera más sólida para pasar datos a un procedimiento de subproceso poner el procedimiento de subproceso y los campos de datos en un objeto de trabajo. Para obtener más información, consulte [crear subprocesos y pasar datos en tiempo de inicio](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).  
  
 El <xref:System.Threading.ParameterizedThreadStart> delegado es compatible con un solo parámetro. Puede pasar varios elementos de datos a la <xref:System.Threading.ParameterizedThreadStart> mediante la realización de ese parámetro uno de los siguientes:  
  
-   Matriz.  
  
-   Un tipo de colección, si todos los elementos de datos son del mismo tipo.  
  
-   Escriba una tupla, como <xref:System.Tuple%602> o <xref:System.Tuple%604>.  
  
   
  
## Examples  
 El siguiente ejemplo de código utiliza un <xref:System.Threading.ParameterizedThreadStart> delegado para ejecutar un método estático y un método de instancia. La primera <xref:System.Threading.ParameterizedThreadStart> delegado representado por estático `DoWork` método y el segundo es representado por la instancia `DoMoreWork` método. Coincide con ambos métodos el <xref:System.Threading.ParameterizedThreadStart> firma de delegado; es decir, tienen un único parámetro de tipo <xref:System.Object> y no devuelve ningún valor.  
  
> [!NOTE]
>  Inferir los compiladores de Visual Basic y C# la <xref:System.Threading.ParameterizedThreadStart> delegar de las firmas de los `DoWork` y `DoMoreWork` métodos y la llamada al constructor correcto. Por lo tanto, no hay ninguna llamada de constructor explícito en el código.  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md">Crear subprocesos</related>
  </Docs>
</Type>