<Type Name="LazyThreadSafetyMode" FullName="System.Threading.LazyThreadSafetyMode">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4502e79c5f83c66e066d94d6b0a8fddc75bfa4ea" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46646687" /></Metadata><TypeSignature Language="C#" Value="public enum LazyThreadSafetyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed LazyThreadSafetyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyThreadSafetyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum LazyThreadSafetyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class LazyThreadSafetyMode" />
  <TypeSignature Language="F#" Value="type LazyThreadSafetyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Especifica cómo una instancia <see cref="T:System.Lazy`1" /> sincroniza el acceso entre varios subprocesos.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Utilice esta enumeración para especificar el `mode` parámetro de <xref:System.Lazy%601> constructores. Los efectos de todos los constructores en sincronización de subprocesos se pueden describir en términos de esta enumeración, tengan o no `mode` parámetros.  
  
 Un <xref:System.Lazy%601> instancia se inicializa mediante un método de inicialización especificado por el usuario o mediante el constructor predeterminado para `T`. El método de inicialización especificado por el `valueFactory` parámetro de un <xref:System.Lazy%601> constructor. El método devuelve una instancia de `T`, que es el tipo que se crea una instancia por la instancia de forma diferida <xref:System.Lazy%601>. Si no tiene un constructor un `valueFactory` parámetro, el constructor predeterminado para `T` se usa para inicializar el <xref:System.Lazy%601> instancia. En cualquier caso, la inicialización se produce la primera vez que llama el <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propiedad.  
  
 Además de especificar la seguridad para subprocesos de un <xref:System.Lazy%601> instancia, esta enumeración afecta a la excepción de almacenamiento en caché. Cuando las excepciones se almacenan en caché para un <xref:System.Lazy%601> instancia, recibirá solo una oportunidad de inicializar la instancia. Si se produce una excepción la primera vez que se llama a la <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propiedad que excepción se almacena en caché y vuelve a iniciar en todas las llamadas posteriores a la <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> propiedad. La ventaja de almacenamiento en caché de excepciones es que los dos subprocesos siempre obtención el mismo resultado, incluso cuando se producen errores.  
  
 Cuando se especifica el modo PublicationOnly, nunca se almacenan en caché de excepciones. Cuando se especifica ninguno o ExecutionAndPublication, almacenamiento en caché depende de si se especifica un método de inicialización o permitir que el constructor predeterminado para `T` para usarse. Al especificar un método de inicialización, se permite el almacenamiento en caché de excepciones para estos dos modos. El método de inicialización puede ser muy simple. Por ejemplo, podría llamar al constructor predeterminado para `T`: `new Lazy<Contents>(() => new Contents(), mode)` en C#, o `New Lazy(Of Contents)(Function() New Contents())` en Visual Basic. Si utiliza un constructor que no especifica un método de inicialización, las excepciones producidas por el constructor predeterminado para `T` no se almacenan en caché. La siguiente tabla resume el comportamiento de almacenamiento en caché de excepciones.  
  
|Modo|Mediante el método de inicialización|Utilizando el constructor predeterminado para `T`|  
|----------|---------------------------------|---------------------------------------|  
|None|En caché|No almacenar en caché|  
|PublicationOnly|No almacenar en caché|No almacenar en caché|  
|ExecutionAndPublication|En caché|No almacenar en caché|  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">Inicialización diferida</related>
  </Docs>
  <Members>
    <Member MemberName="ExecutionAndPublication">
      <MemberSignature Language="C#" Value="ExecutionAndPublication" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode ExecutionAndPublication = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberSignature Language="VB.NET" Value="ExecutionAndPublication" />
      <MemberSignature Language="C++ CLI" Value="ExecutionAndPublication" />
      <MemberSignature Language="F#" Value="ExecutionAndPublication = 2" Usage="System.Threading.LazyThreadSafetyMode.ExecutionAndPublication" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Los bloqueos se usan para garantizar que solo un subproceso pueda inicializar una instancia <see cref="T:System.Lazy`1" /> de manera segura para subprocesos. Si el método de inicialización (o el constructor predeterminado, si no hay ningún método de inicialización) usa los bloqueos internamente, pueden producirse interbloqueos. Si usa un constructor <see cref="T:System.Lazy`1" /> que especifica un método de inicialización (parámetro <paramref name="valueFactory" />) y si ese método de inicialización inicia una excepción (o no puede controlar una excepción) la primera vez que se llama a la propiedad <see cref="P:System.Lazy`1.Value" />, la excepción se almacena en caché y se vuelve a iniciar en las llamadas posteriores a la propiedad <see cref="P:System.Lazy`1.Value" />. Si usa un constructor <see cref="T:System.Lazy`1" /> que no especifica un método de inicialización, las excepciones que inicie el constructor predeterminado para <paramref name="T" /> no se almacenarán en caché. En ese caso, una llamada posterior a la propiedad <see cref="P:System.Lazy`1.Value" /> podría inicializar correctamente la instancia <see cref="T:System.Lazy`1" />. Si el método de inicialización accede de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, se inicia una <see cref="T:System.InvalidOperationException" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Threading.LazyThreadSafetyMode.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>La instancia <see cref="T:System.Lazy`1" /> no es segura para subprocesos; si se accede a la instancia desde varios subprocesos, su comportamiento está sin definir. Use este modo solo si es indispensable un rendimiento alto y si se garantiza que la instancia <see cref="T:System.Lazy`1" /> nunca se inicializará desde más de un subproceso. Si usa un constructor <see cref="T:System.Lazy`1" /> que especifica un método de inicialización (parámetro <paramref name="valueFactory" />) y si ese método de inicialización inicia una excepción (o no puede controlar una excepción) la primera vez que se llama a la propiedad <see cref="P:System.Lazy`1.Value" />, la excepción se almacena en caché y se vuelve a iniciar en las llamadas posteriores a la propiedad <see cref="P:System.Lazy`1.Value" />. Si usa un constructor <see cref="T:System.Lazy`1" /> que no especifica un método de inicialización, las excepciones que inicie el constructor predeterminado para <paramref name="T" /> no se almacenarán en caché. En ese caso, una llamada posterior a la propiedad <see cref="P:System.Lazy`1.Value" /> podría inicializar correctamente la instancia <see cref="T:System.Lazy`1" />. Si el método de inicialización accede de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, se inicia una <see cref="T:System.InvalidOperationException" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="PublicationOnly">
      <MemberSignature Language="C#" Value="PublicationOnly" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Threading.LazyThreadSafetyMode PublicationOnly = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberSignature Language="VB.NET" Value="PublicationOnly" />
      <MemberSignature Language="C++ CLI" Value="PublicationOnly" />
      <MemberSignature Language="F#" Value="PublicationOnly = 1" Usage="System.Threading.LazyThreadSafetyMode.PublicationOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.LazyThreadSafetyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Si varios subprocesos intentan inicializar una instancia <see cref="T:System.Lazy`1" /> simultáneamente, se permite a todos los subprocesos ejecutar el método de inicialización (o el constructor predeterminado, si no hay ningún método de inicialización). El primer subproceso en completar la inicialización establece el valor de la instancia <see cref="T:System.Lazy`1" />. Dicho valor se devuelve a todos los demás subprocesos que estaban ejecutando simultáneamente el método de inicialización, a menos que el método de inicialización inicie excepciones en esos subprocesos. Todas las instancias de <paramref name="T" /> creadas por los subprocesos competidores se descartan. Si el método de inicialización inicia una excepción en cualquier subproceso, la excepción se propaga fuera de la propiedad <see cref="P:System.Lazy`1.Value" /> en ese subproceso. La excepción no se almacena en caché. El valor de la propiedad <see cref="P:System.Lazy`1.IsValueCreated" /> permanece <see langword="false" /> y las llamadas posteriores a la propiedad <see cref="P:System.Lazy`1.Value" />, ya sean del subproceso donde se inició la excepción o de otros subprocesos, harán que el método de inicialización se ejecute de nuevo. Si el método de inicialización accede de forma recursiva a la propiedad <see cref="P:System.Lazy`1.Value" /> de la instancia <see cref="T:System.Lazy`1" />, no se inicia ninguna excepción.</summary>
      </Docs>
    </Member>
  </Members>
</Type>