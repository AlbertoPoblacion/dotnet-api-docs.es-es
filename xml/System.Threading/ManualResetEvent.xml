<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="afbdc-101">Notifica que se ha producido un evento a uno o varios subprocesos en espera.</span><span class="sxs-lookup"><span data-stu-id="afbdc-101">Notifies one or more waiting threads that an event has occurred.</span></span> <span data-ttu-id="afbdc-102">Esta clase no puede heredarse.</span><span class="sxs-lookup"><span data-stu-id="afbdc-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="afbdc-103">En .NET Framework versión 2.0, <xref:System.Threading.ManualResetEvent> se deriva de la nueva <xref:System.Threading.EventWaitHandle> clase.</span><span class="sxs-lookup"><span data-stu-id="afbdc-103">In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="afbdc-104">A <xref:System.Threading.ManualResetEvent> es funcionalmente equivalente a un <xref:System.Threading.EventWaitHandle> creado con <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="afbdc-104">A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="afbdc-105">A diferencia de la <xref:System.Threading.ManualResetEvent> (clase), el <xref:System.Threading.EventWaitHandle> clase proporciona acceso a los eventos de sincronización de sistema con nombre.</span><span class="sxs-lookup"><span data-stu-id="afbdc-105">Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
 <span data-ttu-id="afbdc-106"><xref:System.Threading.ManualResetEvent> permite que los subprocesos se comuniquen entre sí mediante señales.</span><span class="sxs-lookup"><span data-stu-id="afbdc-106"><xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling.</span></span> <span data-ttu-id="afbdc-107">Normalmente, esta comunicación tiene relación con una tarea que un subproceso debe completar antes de pueden continuar otros subprocesos.</span><span class="sxs-lookup"><span data-stu-id="afbdc-107">Typically, this communication concerns a task which one thread must complete before other threads can proceed.</span></span>  
  
 <span data-ttu-id="afbdc-108">Cuando un subproceso comienza una actividad que debe completar antes de otros subprocesos continuar, llama <xref:System.Threading.EventWaitHandle.Reset%2A> colocar `ManualResetEvent` en el estado no señalado.</span><span class="sxs-lookup"><span data-stu-id="afbdc-108">When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state.</span></span> <span data-ttu-id="afbdc-109">Este subproceso puede considerarse como controlar el `ManualResetEvent`.</span><span class="sxs-lookup"><span data-stu-id="afbdc-109">This thread can be thought of as controlling the `ManualResetEvent`.</span></span> <span data-ttu-id="afbdc-110">Subprocesos que llaman <xref:System.Threading.WaitHandle.WaitOne%2A> en el `ManualResetEvent` se bloqueará en espera de la señal.</span><span class="sxs-lookup"><span data-stu-id="afbdc-110">Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal.</span></span> <span data-ttu-id="afbdc-111">Cuando el subproceso controlador termina la actividad, llama al método <xref:System.Threading.EventWaitHandle.Set%2A> para indicar que los subprocesos en espera pueden continuar.</span><span class="sxs-lookup"><span data-stu-id="afbdc-111">When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed.</span></span> <span data-ttu-id="afbdc-112">Se liberan todos los subprocesos en espera.</span><span class="sxs-lookup"><span data-stu-id="afbdc-112">All waiting threads are released.</span></span>  
  
 <span data-ttu-id="afbdc-113">Una vez que se ha señalado, `ManualResetEvent` permanece señalado hasta que se restablezca manualmente.</span><span class="sxs-lookup"><span data-stu-id="afbdc-113">Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset.</span></span> <span data-ttu-id="afbdc-114">Es decir, se llama a `WaitOne` devuelven inmediatamente.</span><span class="sxs-lookup"><span data-stu-id="afbdc-114">That is, calls to `WaitOne` return immediately.</span></span>  
  
 <span data-ttu-id="afbdc-115">Puede controlar el estado inicial de un `ManualResetEvent` pasando un valor Boolean al constructor, `true` si se señala el estado inicial y `false` en caso contrario.</span><span class="sxs-lookup"><span data-stu-id="afbdc-115">You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="afbdc-116">`ManualResetEvent` También puede utilizarse con el `static` <xref:System.Threading.WaitHandle.WaitAll%2A> y <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.</span><span class="sxs-lookup"><span data-stu-id="afbdc-116">`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="afbdc-117">Para obtener más información acerca de los mecanismos de sincronización de subprocesos, vea [ManualResetEvent y ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) en la documentación conceptual.</span><span class="sxs-lookup"><span data-stu-id="afbdc-117">For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="afbdc-118">En el ejemplo siguiente se muestra cómo <xref:System.Threading.ManualResetEvent> funciona.</span><span class="sxs-lookup"><span data-stu-id="afbdc-118">The following example demonstrates how <xref:System.Threading.ManualResetEvent> works.</span></span> <span data-ttu-id="afbdc-119">En el ejemplo se inicia con un <xref:System.Threading.ManualResetEvent> en estado no señalado (es decir, `false` se pasa al constructor).</span><span class="sxs-lookup"><span data-stu-id="afbdc-119">The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor).</span></span> <span data-ttu-id="afbdc-120">El ejemplo crea tres subprocesos, cada uno de los bloques de la <xref:System.Threading.ManualResetEvent> mediante una llamada a su <xref:System.Threading.WaitHandle.WaitOne%2A> método.</span><span class="sxs-lookup"><span data-stu-id="afbdc-120">The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method.</span></span> <span data-ttu-id="afbdc-121">Cuando el usuario presiona el **ENTRAR** clave, el ejemplo llama el <xref:System.Threading.EventWaitHandle.Set%2A> método, que libera todos los subprocesos de tres.</span><span class="sxs-lookup"><span data-stu-id="afbdc-121">When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads.</span></span> <span data-ttu-id="afbdc-122">Compare esto con el comportamiento de la <xref:System.Threading.AutoResetEvent> (clase), lo que libera subprocesos de uno en uno, restablecer automáticamente después de cada versión.</span><span class="sxs-lookup"><span data-stu-id="afbdc-122">Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.</span></span>  
  
 <span data-ttu-id="afbdc-123">Al presionar la **ENTRAR** clave nuevo muestra que la <xref:System.Threading.ManualResetEvent> permanece en el estado señalado hasta que su <xref:System.Threading.EventWaitHandle.Reset%2A> se llama al método: el ejemplo inicia dos subprocesos más.</span><span class="sxs-lookup"><span data-stu-id="afbdc-123">Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads.</span></span> <span data-ttu-id="afbdc-124">Estos subprocesos no se bloquean cuando llama a la <xref:System.Threading.WaitHandle.WaitOne%2A> método, sino que se ejecuten hasta su finalización.</span><span class="sxs-lookup"><span data-stu-id="afbdc-124">These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.</span></span>  
  
 <span data-ttu-id="afbdc-125">Al presionar la **ENTRAR** clave nuevo hace que el ejemplo llamar a la <xref:System.Threading.EventWaitHandle.Reset%2A> método e iniciar un subproceso más, que se bloquea cuando llama a <xref:System.Threading.WaitHandle.WaitOne%2A>.</span><span class="sxs-lookup"><span data-stu-id="afbdc-125">Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>.</span></span> <span data-ttu-id="afbdc-126">Al presionar la **ENTRAR** clave una última vez llamadas <xref:System.Threading.EventWaitHandle.Set%2A> liberar el último subproceso y el programa finaliza.</span><span class="sxs-lookup"><span data-stu-id="afbdc-126">Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.</span></span>  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="afbdc-127">Esta clase es segura para subprocesos.</span><span class="sxs-lookup"><span data-stu-id="afbdc-127">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <span data-ttu-id="afbdc-128"><see langword="true" /> para establecer el estado inicial de señalado; <see langword="false" /> para establecer el estado inicial en no señalado.</span><span class="sxs-lookup"><span data-stu-id="afbdc-128"><see langword="true" /> to set the initial state signaled; <see langword="false" /> to set the initial state to nonsignaled.</span></span></param>
        <summary><span data-ttu-id="afbdc-129">Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ManualResetEvent" /> con un valor booleano que indica si hay que establecer el estado inicial en señalado.</span><span class="sxs-lookup"><span data-stu-id="afbdc-129">Initializes a new instance of the <see cref="T:System.Threading.ManualResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="afbdc-130">Si el estado inicial de un <xref:System.Threading.ManualResetEvent> se señaliza (es decir, si se crea pasando `true` para `initialState`), subprocesos que esperan en la <xref:System.Threading.ManualResetEvent> no se bloquean.</span><span class="sxs-lookup"><span data-stu-id="afbdc-130">If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block.</span></span> <span data-ttu-id="afbdc-131">Si el estado inicial es no señalado, los subprocesos se bloquean hasta que el <xref:System.Threading.EventWaitHandle.Set%2A> se llama al método.</span><span class="sxs-lookup"><span data-stu-id="afbdc-131">If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>