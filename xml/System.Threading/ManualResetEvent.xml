<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c19185907e45c5b7b80aae8627946c15d4efd4f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36605911" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Notifica que se ha producido un evento a uno o varios subprocesos en espera. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 En .NET Framework versión 2.0, <xref:System.Threading.ManualResetEvent> se deriva de la nueva <xref:System.Threading.EventWaitHandle> clase. A <xref:System.Threading.ManualResetEvent> es funcionalmente equivalente a un <xref:System.Threading.EventWaitHandle> creado con <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  A diferencia de la <xref:System.Threading.ManualResetEvent> (clase), el <xref:System.Threading.EventWaitHandle> clase proporciona acceso a los eventos de sincronización de sistema con nombre.  
  
 <xref:System.Threading.ManualResetEvent> permite que los subprocesos se comuniquen entre sí mediante señales. Normalmente, esta comunicación tiene relación con una tarea que un subproceso debe completar antes de pueden continuar otros subprocesos.  
  
 Cuando un subproceso comienza una actividad que debe completar antes de otros subprocesos continuar, llama <xref:System.Threading.EventWaitHandle.Reset%2A> colocar `ManualResetEvent` en el estado no señalado. Este subproceso puede considerarse como controlar el `ManualResetEvent`. Subprocesos que llaman <xref:System.Threading.WaitHandle.WaitOne%2A> en el `ManualResetEvent` se bloqueará en espera de la señal. Cuando el subproceso controlador termina la actividad, llama al método <xref:System.Threading.EventWaitHandle.Set%2A> para indicar que los subprocesos en espera pueden continuar. Se liberan todos los subprocesos en espera.  
  
 Una vez que se ha señalado, `ManualResetEvent` permanece señalado hasta que se restablezca manualmente. Es decir, se llama a `WaitOne` devuelven inmediatamente.  
  
 Puede controlar el estado inicial de un `ManualResetEvent` pasando un valor Boolean al constructor, `true` si se señala el estado inicial y `false` en caso contrario.  
  
 `ManualResetEvent` También puede utilizarse con el `static` <xref:System.Threading.WaitHandle.WaitAll%2A> y <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.  
  
 Para obtener más información acerca de los mecanismos de sincronización de subprocesos, vea [ManualResetEvent y ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) en la documentación conceptual.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo <xref:System.Threading.ManualResetEvent> funciona. En el ejemplo se inicia con un <xref:System.Threading.ManualResetEvent> en estado no señalado (es decir, `false` se pasa al constructor). El ejemplo crea tres subprocesos, cada uno de los bloques de la <xref:System.Threading.ManualResetEvent> mediante una llamada a su <xref:System.Threading.WaitHandle.WaitOne%2A> método. Cuando el usuario presiona el **ENTRAR** clave, el ejemplo llama el <xref:System.Threading.EventWaitHandle.Set%2A> método, que libera todos los subprocesos de tres. Compare esto con el comportamiento de la <xref:System.Threading.AutoResetEvent> (clase), lo que libera subprocesos de uno en uno, restablecer automáticamente después de cada versión.  
  
 Al presionar la **ENTRAR** clave nuevo muestra que la <xref:System.Threading.ManualResetEvent> permanece en el estado señalado hasta que su <xref:System.Threading.EventWaitHandle.Reset%2A> se llama al método: el ejemplo inicia dos subprocesos más. Estos subprocesos no se bloquean cuando llama a la <xref:System.Threading.WaitHandle.WaitOne%2A> método, sino que se ejecuten hasta su finalización.  
  
 Al presionar la **ENTRAR** clave nuevo hace que el ejemplo llamar a la <xref:System.Threading.EventWaitHandle.Reset%2A> método e iniciar un subproceso más, que se bloquea cuando llama a <xref:System.Threading.WaitHandle.WaitOne%2A>. Al presionar la **ENTRAR** clave una última vez llamadas <xref:System.Threading.EventWaitHandle.Set%2A> liberar el último subproceso y el programa finaliza.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Esta clase es segura para subprocesos.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <see langword="true" /> para establecer el estado inicial de señalado; <see langword="false" /> para establecer el estado inicial en no señalado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ManualResetEvent" /> con un valor booleano que indica si hay que establecer el estado inicial en señalado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el estado inicial de un <xref:System.Threading.ManualResetEvent> se señaliza (es decir, si se crea pasando `true` para `initialState`), subprocesos que esperan en la <xref:System.Threading.ManualResetEvent> no se bloquean. Si el estado inicial es no señalado, los subprocesos se bloquean hasta que el <xref:System.Threading.EventWaitHandle.Set%2A> se llama al método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>