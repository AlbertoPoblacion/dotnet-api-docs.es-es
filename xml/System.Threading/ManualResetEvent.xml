<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef7963b99d115f4a7f54e535f80eb38d73ee365" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="es-ES" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56394157" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Representa un evento de sincronización de subprocesos que, cuando se señale, se debe restablecer manualmente. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Usa `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, y <xref:System.Threading.EventWaitHandle> para la interacción de los subprocesos (o señalización de subproceso). Para obtener más información, consulte el [subprocesos interacción o señalización](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) sección de la [información general de las primitivas de sincronización](~/docs/standard/threading/overview-of-synchronization-primitives.md) artículo.  

 Cuando un subproceso comienza una actividad que debe completar antes que otras puedan continuar subprocesos, llama a [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) poner `ManualResetEvent` en el estado no señalado. Este subproceso puede considerarse como controlar el `ManualResetEvent`. Subprocesos que llaman a [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) bloque, en espera de la señal. Cuando el subproceso de control completa la actividad, llama a [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) para indicar que los subprocesos en espera pueden continuar. Se liberan todos los subprocesos en espera.  

 Una vez que se ha señalado, `ManualResetEvent` permanece señalado hasta que se restablezca manualmente mediante una llamada a la <xref:System.Threading.EventWaitHandle.Reset> método. Es decir, las llamadas a <xref:System.Threading.WaitHandle.WaitOne%2A> devolver inmediatamente.  

 Puede controlar el estado inicial de un `ManualResetEvent` pasando un valor booleano al constructor: `true` si se señala el estado inicial, y `false` en caso contrario.  
 
 `ManualResetEvent` También puede utilizarse con el `static` <xref:System.Threading.WaitHandle.WaitAll%2A> y <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.  
  
 A partir de .NET Framework versión 2.0, <xref:System.Threading.ManualResetEvent> deriva la <xref:System.Threading.EventWaitHandle> clase. Un <xref:System.Threading.ManualResetEvent> es funcionalmente equivalente a un <xref:System.Threading.EventWaitHandle> creado con <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
> A diferencia de la <xref:System.Threading.ManualResetEvent> (clase), el <xref:System.Threading.EventWaitHandle> clase proporciona acceso a los eventos de sincronización de sistema con nombre.  

 A partir de .NET Framework versión 4.0, el <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> clase es una alternativa ligera a <xref:System.Threading.ManualResetEvent>.    
   
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo <xref:System.Threading.ManualResetEvent> funciona. El ejemplo se inicia con un <xref:System.Threading.ManualResetEvent> en el estado no señalizado (es decir, `false` se pasa al constructor). El ejemplo crea tres subprocesos, cada uno de los bloques de la <xref:System.Threading.ManualResetEvent> mediante una llamada a su <xref:System.Threading.WaitHandle.WaitOne%2A> método. Cuando el usuario presiona el **ENTRAR** clave, el ejemplo llama a la <xref:System.Threading.EventWaitHandle.Set%2A> método, lo que libera todos los subprocesos de tres. Compare esto con el comportamiento de la <xref:System.Threading.AutoResetEvent> (clase), lo que libera uno de los subprocesos a la vez, restablecer automáticamente después de cada versión.  
  
 Al presionar el **ENTRAR** clave nuevo muestra que el <xref:System.Threading.ManualResetEvent> permanece en el estado señalado hasta que su <xref:System.Threading.EventWaitHandle.Reset%2A> se llama al método: El ejemplo inicia dos subprocesos más. Estos subprocesos no se bloquean cuando llama a la <xref:System.Threading.WaitHandle.WaitOne%2A> método, sino que se ejecuten hasta su finalización.  
  
 Al presionar el **ENTRAR** clave que provoca el ejemplo para llamar a la <xref:System.Threading.EventWaitHandle.Reset%2A> método e iniciar otro subproceso, que se bloquea cuando llama a <xref:System.Threading.WaitHandle.WaitOne%2A>. Al presionar el **ENTRAR** clave uno llama a la última vez <xref:System.Threading.EventWaitHandle.Set%2A> liberar el último subproceso y el programa finaliza.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Esta clase es segura para subprocesos.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Subprocesamiento administrado</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Información general sobre las primitivas de sincronización</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><see langword="true" /> para establecer el estado inicial de señalado; <see langword="false" /> para establecer el estado inicial en no señalado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.ManualResetEvent" /> con un valor booleano que indica si hay que establecer el estado inicial en señalado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Si el estado inicial de un <xref:System.Threading.ManualResetEvent> se señaliza (es decir, si se crea pasando `true` para `initialState`), subprocesos que esperan en la <xref:System.Threading.ManualResetEvent> no se bloquean. Si el estado inicial es no señalado, los subprocesos se bloquean hasta que el <xref:System.Threading.EventWaitHandle.Set%2A> se llama al método.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Subprocesamiento administrado</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Información general sobre las primitivas de sincronización</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece el estado del evento en no señalado, por lo que se bloquean los subprocesos.</summary>
        <returns><see langword="true" /> si la operación se realiza correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Establece el estado del evento en señalado, lo que permite que uno o varios subprocesos en espera continúen.</summary>
        <returns><see langword="true" /> si la operación se realiza correctamente; en caso contrario, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Una llamada al método Set deja el identificador de espera en un estado señalado hasta que el <xref:System.Threading.ManualResetEvent.Reset> se llama al método.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>