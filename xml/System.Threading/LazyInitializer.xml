<Type Name="LazyInitializer" FullName="System.Threading.LazyInitializer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="755905ca4152d31c2708d3f8171aedcdd452aa77" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39998211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class LazyInitializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LazyInitializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.LazyInitializer" />
  <TypeSignature Language="VB.NET" Value="Public Class LazyInitializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class LazyInitializer abstract sealed" />
  <TypeSignature Language="F#" Value="type LazyInitializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="29e5c-101">Proporciona rutinas de inicialización diferida.</span>
      <span class="sxs-lookup">
        <span data-stu-id="29e5c-101">Provides lazy initialization routines.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29e5c-102">Estas rutinas evitan la necesidad de asignar una instancia dedicada, inicialización diferida, en lugar de utilizar referencias para asegurarse de que se han inicializado los destinos tal como se obtiene acceso a.</span><span class="sxs-lookup"><span data-stu-id="29e5c-102">These routines avoid needing to allocate a dedicated, lazy-initialization instance, instead using references to ensure targets have been initialized as they are accessed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="29e5c-103">El ejemplo siguiente muestra cómo utilizar EnsureInitialized para inicializar un valor con un valor booleano para realizar un seguimiento de si ya ha ocurrido la inicialización de forma diferida y un objeto que se usará como el bloqueo de exclusión mutua.</span><span class="sxs-lookup"><span data-stu-id="29e5c-103">The following example demonstrates how to use EnsureInitialized to lazily initialize a value using a Boolean value to track whether initialization has already happened and an object to use as the mutual exclusion lock.</span></span>  
  
```vb  
Dim _data As ExpensiveData = Nothing  
Dim _dataInitialized As Boolean = False  
Dim _dataLock As Object = Nothing  
'    ...  
Dim name = LazyInitializer.EnsureInitialized(_data, _dataInitialized, _dataLock)  
```  
  
```csharp  
ExpensiveData _data = null;  
                     bool _dataInitialized = false;  
                     object _dataLock = new object();  
                  //  ...  
  
                    ExpensiveData dataToUse = LazyInitializer.EnsureInitialized(ref _data, ref _dataInitialized, ref _dataLock);  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="29e5c-104">Los métodos de <see cref="T:System.Threading.LazyInitializer" /> son seguros para subprocesos y pueden llamarse desde varios subprocesos simultáneamente.</span>
      <span class="sxs-lookup">
        <span data-stu-id="29e5c-104">The methods of <see cref="T:System.Threading.LazyInitializer" /> are thread-safe and may be called from multiple threads concurrently.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <MemberGroup MemberName="EnsureInitialized&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="29e5c-105">Inicializa un tipo de destino si aún no se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-105">Initializes a target type if it hasn't already been initialized.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="29e5c-106">Tipo de referencia que se va a inicializar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-106">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="29e5c-107">Referencia de tipo <c>T</c> que se va a inicializar si aún no se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-107">A reference of type <c>T</c> to initialize if it has not already been initialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="29e5c-108">Inicializa un tipo de referencia de destino con su constructor predeterminado si aún no se ha inicializado el destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-108">Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="29e5c-109">Referencia de tipo <paramref name="T" /> que se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-109">The initialized reference of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29e5c-110">Este método solo puede usarse con tipos de referencia.</span><span class="sxs-lookup"><span data-stu-id="29e5c-110">This method may only be used on reference types.</span></span> <span data-ttu-id="29e5c-111">Para asegurar la inicialización de tipos de valor, vea otras sobrecargas de EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="29e5c-111">To ensure initialization of value types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="29e5c-112">Este método puede utilizarse simultáneamente varios subprocesos para inicializar `target`.</span><span class="sxs-lookup"><span data-stu-id="29e5c-112">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="29e5c-113">En caso de que varios subprocesos obtienen acceso a este método al mismo tiempo, varias instancias de `T` mayo crearse, pero solo se almacenará en `target`.</span><span class="sxs-lookup"><span data-stu-id="29e5c-113">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="29e5c-114">En una instancia de este tipo, este método no eliminará los objetos que no se almacenaron.</span><span class="sxs-lookup"><span data-stu-id="29e5c-114">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="29e5c-115">Si se deben eliminar estos objetos, es responsabilidad del autor de llamada para determinar si no se ha utilizado un objeto y, a continuación, eliminar el objeto de forma adecuada.</span><span class="sxs-lookup"><span data-stu-id="29e5c-115">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="29e5c-116">Faltaban los permisos para tener acceso al constructor de tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-116">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="29e5c-117">El tipo <paramref name="T" /> no contiene un constructor predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-117">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="29e5c-118">Tipo de referencia que se va a inicializar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-118">The reference type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="29e5c-119">Referencia de tipo <c>T</c> que se va a inicializar si aún no se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-119">The reference of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="29e5c-120">Función que se llama para inicializar la referencia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-120">The function that is called to initialize the reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="29e5c-121">Inicializa un tipo de referencia de destino utilizando la función especificada si aún no se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-121">Initializes a target reference type by using a specified function if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="29e5c-122">Valor inicializado de tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-122">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29e5c-123">Este método solo puede usarse con tipos de referencia, y `valueFactory` no puede devolver una referencia nula (Nothing en Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="29e5c-123">This method may only be used on reference types, and `valueFactory` may not return a null reference (Nothing in Visual Basic).</span></span> <span data-ttu-id="29e5c-124">Para asegurar la inicialización de tipos de valor o para permitir a los tipos de referencia nula, vea otras sobrecargas de EnsureInitialized.</span><span class="sxs-lookup"><span data-stu-id="29e5c-124">To ensure initialization of value types or to allow null reference types, see other overloads of EnsureInitialized.</span></span>  
  
 <span data-ttu-id="29e5c-125">Este método puede utilizarse simultáneamente varios subprocesos para inicializar `target`.</span><span class="sxs-lookup"><span data-stu-id="29e5c-125">This method may be used concurrently by multiple threads to initialize `target`.</span></span>  
  
 <span data-ttu-id="29e5c-126">En caso de que varios subprocesos obtienen acceso a este método al mismo tiempo, varias instancias de `T` mayo crearse, pero solo se almacenará en `target`.</span><span class="sxs-lookup"><span data-stu-id="29e5c-126">In the event that multiple threads access this method concurrently, multiple instances of `T` may be created, but only one will be stored into `target`.</span></span> <span data-ttu-id="29e5c-127">En una instancia de este tipo, este método no eliminará los objetos que no se almacenaron.</span><span class="sxs-lookup"><span data-stu-id="29e5c-127">In such an occurrence, this method will not dispose of the objects that were not stored.</span></span> <span data-ttu-id="29e5c-128">Si se deben eliminar estos objetos, es responsabilidad del autor de llamada para determinar si no se ha utilizado un objeto y, a continuación, eliminar el objeto de forma adecuada.</span><span class="sxs-lookup"><span data-stu-id="29e5c-128">If such objects must be disposed, it is up to the caller to determine if an object was not used and to then dispose of the object appropriately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="29e5c-129">El tipo <paramref name="T" /> no contiene un constructor predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-129">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="29e5c-130">
            <paramref name="valueFactory" /> devuelve un valor NULL (Nothing en Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-130">
              <paramref name="valueFactory" /> returned null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="29e5c-131">Tipo de referencia que se va a inicializar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-131">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="29e5c-132">Referencia o valor de tipo <c>T</c> que se va a inicializar si aún no se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-132">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="initialized">
          <span data-ttu-id="29e5c-133">Referencia a un valor booleano que determina si ya se ha inicializado el destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-133">A reference to a Boolean value that determines whether the target has already been initialized.</span>
          </span>
        </param>
        <param name="syncLock">
          <span data-ttu-id="29e5c-134">Referencia a un objeto que se usa como bloqueo mutuamente excluyente para la inicialización de <c>target</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-134">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span>
          </span>
          <span data-ttu-id="29e5c-135">Si <c>synLock</c> es <see langword="null" />, se creará una instancia de un nuevo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-135">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="29e5c-136">Inicializa un tipo de referencia de destino o tipo de valor con su constructor predeterminado si aún no se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-136">Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="29e5c-137">Valor inicializado de tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-137">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29e5c-138">Si `intialized` se especifica como true, se producirá ninguna inicialización adicional.</span><span class="sxs-lookup"><span data-stu-id="29e5c-138">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="29e5c-139">Faltaban los permisos para tener acceso al constructor de tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-139">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="29e5c-140">El tipo <paramref name="T" /> no contiene un constructor predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-140">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref object syncLock, Func&lt;T&gt; valueFactory) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;class T&gt;(!!T&amp; target, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T As Class) (ByRef target As T, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static T EnsureInitialized(T % target, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  * Func&lt;'T (requires 'T : null)&gt; -&gt; 'T (requires 'T : null)" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="target">To be added.</param>
        <param name="syncLock">To be added.</param>
        <param name="valueFactory">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureInitialized&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T EnsureInitialized&lt;T&gt; (ref T target, ref bool initialized, ref object syncLock, Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T EnsureInitialized&lt;T&gt;(!!T&amp; target, bool&amp; initialized, object&amp; syncLock, class System.Func`1&lt;!!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EnsureInitialized(Of T) (ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T EnsureInitialized(T % target, bool % initialized, System::Object ^ % syncLock, Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member EnsureInitialized :  *  *  * Func&lt;'T&gt; -&gt; 'T" Usage="System.Threading.LazyInitializer.EnsureInitialized (target, initialized, syncLock, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="T" RefType="ref" />
        <Parameter Name="initialized" Type="System.Boolean" RefType="ref" />
        <Parameter Name="syncLock" Type="System.Object" RefType="ref" />
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="29e5c-141">Tipo de referencia que se va a inicializar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-141">The type of the reference to be initialized.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="29e5c-142">Referencia o valor de tipo <c>T</c> que se va a inicializar si aún no se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-142">A reference or value of type <c>T</c> to initialize if it hasn't already been initialized.</span>
          </span>
        </param>
        <param name="initialized">
          <span data-ttu-id="29e5c-143">Referencia a un valor booleano que determina si ya se ha inicializado el destino.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-143">A reference to a Boolean value that determines whether the target has already been initialized.</span>
          </span>
        </param>
        <param name="syncLock">
          <span data-ttu-id="29e5c-144">Referencia a un objeto que se usa como bloqueo mutuamente excluyente para la inicialización de <c>target</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-144">A reference to an object used as the mutually exclusive lock for initializing <c>target</c>.</span>
          </span>
          <span data-ttu-id="29e5c-145">Si <c>synLock</c> es <see langword="null" />, se creará una instancia de un nuevo objeto.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-145">If <c>syncLock</c> is <see langword="null" />, a new object will be instantiated.</span>
          </span>
        </param>
        <param name="valueFactory">
          <span data-ttu-id="29e5c-146">Función que se llama para inicializar la referencia o el valor.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-146">The function that is called to initialize the reference or value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="29e5c-147">Inicializa un tipo de referencia de destino o tipo de valor utilizando la función especificada si aún no se ha inicializado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-147">Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="29e5c-148">Valor inicializado de tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-148">The initialized value of type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="29e5c-149">Si `intialized` se especifica como true, se producirá ninguna inicialización adicional.</span><span class="sxs-lookup"><span data-stu-id="29e5c-149">If `intialized` is specified as true, then no further initialization occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="29e5c-150">Faltaban los permisos para tener acceso al constructor de tipo <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-150">Permissions to access the constructor of type <paramref name="T" /> were missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="29e5c-151">El tipo <paramref name="T" /> no contiene un constructor predeterminado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="29e5c-151">Type <paramref name="T" /> does not have a default constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>