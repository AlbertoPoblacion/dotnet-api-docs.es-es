<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7526a17165511a13b7213d3a9d257c6304cccb3b" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36407157" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Notifica que se ha producido un evento a un subproceso en espera. Esta clase no puede heredarse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `AutoResetEvent` permite que los subprocesos se comuniquen entre sí mediante señales. Normalmente, se usa esta clase cuando subprocesos necesitan acceso exclusivo a un recurso.  
  
> [!IMPORTANT]
>  Este tipo implementa la <xref:System.IDisposable> interfaz. Cuando haya terminado de utilizar el tipo, debe eliminar del mismo directa o indirectamente. Para deshacerse del tipo directamente, llame a su <xref:System.IDisposable.Dispose%2A> método en un `try` / `catch` bloque. Para deshacerse de él indirectamente, use una construcción de lenguaje como `using` (en C#) o `Using` (en Visual Basic). Para obtener más información, vea la sección "Uso de un objeto que implementa IDisposable" en el <xref:System.IDisposable> tema de la interfaz.  
  
 Un subproceso espera una señal mediante una llamada a <xref:System.Threading.WaitHandle.WaitOne%2A> en el `AutoResetEvent`. Si el `AutoResetEvent` está en el estado no señalado, el subproceso se bloquea, esperando el subproceso que actualmente controla el recurso para indicar que el recurso está disponible mediante una llamada a <xref:System.Threading.EventWaitHandle.Set%2A>.  
  
 Al llamar a `Set` señales `AutoResetEvent` para liberar un subproceso en espera. `AutoResetEvent` permanece señalado hasta que se libera un único subproceso en espera y, a continuación, se vuelve automáticamente al estado no señalado. Si no hay ningún subproceso en espera, el estado permanece señalado indefinidamente.  
  
 Si un subproceso llama a <xref:System.Threading.WaitHandle.WaitOne%2A> mientras el <xref:System.Threading.AutoResetEvent> está en el estado señalado, el subproceso no se bloquea. El <xref:System.Threading.AutoResetEvent> libera inmediatamente el subproceso y vuelve al estado no señalado.  
  
> [!IMPORTANT]
>  No hay ninguna garantía de que todas las llamadas a la <xref:System.Threading.EventWaitHandle.Set%2A> método liberará un subproceso. Si dos llamadas están demasiado juntos, por lo que la segunda llamada se produce antes de que se ha liberado un subproceso, se libera un solo subproceso. Es como si no se produjera la segunda llamada. Además, si <xref:System.Threading.EventWaitHandle.Set%2A> se llama cuando no hay ningún subproceso esperando y <xref:System.Threading.AutoResetEvent> ya se ha señalado, la llamada no tiene ningún efecto.  
  
 Puede controlar el estado inicial de un `AutoResetEvent` pasando un valor Boolean al constructor: `true` si se señala el estado inicial y `false` en caso contrario.  
  
 `AutoResetEvent` También puede utilizarse con el `static` <xref:System.Threading.WaitHandle.WaitAll%2A> y <xref:System.Threading.WaitHandle.WaitAny%2A> métodos.  
  
 Para obtener más información acerca de los mecanismos de sincronización de subprocesos, vea [AutoResetEvent](~/docs/standard/threading/autoresetevent.md) en la documentación conceptual.  
  
 A partir de .NET Framework versión 2.0, <xref:System.Threading.AutoResetEvent> se deriva de la nueva <xref:System.Threading.EventWaitHandle> clase. Un <xref:System.Threading.AutoResetEvent> es funcionalmente equivalente a un <xref:System.Threading.EventWaitHandle> creado con <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.  
  
> [!NOTE]
>  A diferencia de la <xref:System.Threading.AutoResetEvent> (clase), el <xref:System.Threading.EventWaitHandle> clase proporciona acceso a los eventos de sincronización de sistema con nombre.  
  
   
  
## Examples  
 En el ejemplo siguiente se muestra cómo usar <xref:System.Threading.AutoResetEvent> para liberar un subproceso a la vez, mediante una llamada a la <xref:System.Threading.EventWaitHandle.Set%2A> (método) (en la clase base) cada vez el usuario presiona el **ENTRAR** clave. En el ejemplo inicia tres subprocesos que esperan un <xref:System.Threading.AutoResetEvent> que se creó en el estado señalado. El primer subproceso se libera inmediatamente, porque el <xref:System.Threading.AutoResetEvent> ya está en el estado señalado. Esto restablece el <xref:System.Threading.AutoResetEvent> al estado no señalado, por lo que bloquean los subprocesos subsiguientes. Los subprocesos bloqueados no se liberan hasta que el usuario las vaya lanzando uno a la vez presionando la **ENTRAR** clave.  
  
 Después de que los subprocesos se liberan desde la primera <xref:System.Threading.AutoResetEvent>, esperan en otro <xref:System.Threading.AutoResetEvent> que creó en el estado no señalado. Bloquean todos los subprocesos de tres, por lo que el <xref:System.Threading.EventWaitHandle.Set%2A> debe llamar al método tres veces para liberar todos ellos.  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Esta clase es segura para subprocesos.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">
          <see langword="true" /> para establecer el estado inicial en señalado; <see langword="false" /> para establecer el estado inicial en no señalado.</param>
        <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.AutoResetEvent" /> con un valor booleano que indica si hay que establecer el estado inicial en señalado.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 En el ejemplo siguiente se usa un <xref:System.Threading.AutoResetEvent> para sincronizar las actividades de dos subprocesos. El primer subproceso, que es el subproceso de la aplicación, se ejecuta `Main`. Escribe valores en el recurso protegido, que es un `static` (`Shared` en Visual Basic) con el nombre de campo `number`. El segundo subproceso ejecuta el método estático `ThreadProc` método, que lee los valores escritos por `Main`.  
  
 El `ThreadProc` método espera el <xref:System.Threading.AutoResetEvent>. Cuando `Main` llamadas el <xref:System.Threading.EventWaitHandle.Set%2A> método en el <xref:System.Threading.AutoResetEvent>, el `ThreadProc` método lee un valor. El <xref:System.Threading.AutoResetEvent> restablece inmediatamente, por lo que el `ThreadProc` método espera de nuevo.  
  
 La lógica del programa, garantiza que la `ThreadProc` método nunca leerá el mismo valor dos veces. No garantiza que la `ThreadProc` método leerá cada valor escrito por `Main`. Esa garantía requeriría un segundo <xref:System.Threading.AutoResetEvent> bloqueo.  
  
 Después de cada operación de escritura, `Main` da como resultado mediante una llamada a la <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> método para dar al segundo subproceso una oportunidad de ejecutarse. En caso contrario, en un equipo monoprocesador `Main` escribiría muchos valores entre dos operaciones de lectura.  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
      </Docs>
    </Member>
  </Members>
</Type>